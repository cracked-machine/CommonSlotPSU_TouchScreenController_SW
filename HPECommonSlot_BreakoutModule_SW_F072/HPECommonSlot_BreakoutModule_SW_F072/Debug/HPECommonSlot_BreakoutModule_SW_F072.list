
HPECommonSlot_BreakoutModule_SW_F072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003e44  08003e44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e44  08003e44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  08003ec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003ec0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000237b  00000000  00000000  0002e14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b88  00000000  00000000  00031cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c72d  00000000  00000000  00049880  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ede2  00000000  00000000  00055fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec8  00000000  00000000  000d4e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b54 	.word	0x08003b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003b54 	.word	0x08003b54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 f86d 	bl	8003310 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b3d      	ldr	r3, [pc, #244]	; (800032c <MX_GPIO_Init+0x10c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b3c      	ldr	r3, [pc, #240]	; (800032c <MX_GPIO_Init+0x10c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b39      	ldr	r3, [pc, #228]	; (800032c <MX_GPIO_Init+0x10c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	029b      	lsls	r3, r3, #10
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000252:	4b36      	ldr	r3, [pc, #216]	; (800032c <MX_GPIO_Init+0x10c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b35      	ldr	r3, [pc, #212]	; (800032c <MX_GPIO_Init+0x10c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0309      	lsls	r1, r1, #12
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b32      	ldr	r3, [pc, #200]	; (800032c <MX_GPIO_Init+0x10c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	031b      	lsls	r3, r3, #12
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b2f      	ldr	r3, [pc, #188]	; (800032c <MX_GPIO_Init+0x10c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b2e      	ldr	r3, [pc, #184]	; (800032c <MX_GPIO_Init+0x10c>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	02c9      	lsls	r1, r1, #11
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b2b      	ldr	r3, [pc, #172]	; (800032c <MX_GPIO_Init+0x10c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	02db      	lsls	r3, r3, #11
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800028a:	4b29      	ldr	r3, [pc, #164]	; (8000330 <MX_GPIO_Init+0x110>)
 800028c:	2200      	movs	r2, #0
 800028e:	2130      	movs	r1, #48	; 0x30
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe28 	bl	8000ee6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin, GPIO_PIN_RESET);
 8000296:	4927      	ldr	r1, [pc, #156]	; (8000334 <MX_GPIO_Init+0x114>)
 8000298:	4b27      	ldr	r3, [pc, #156]	; (8000338 <MX_GPIO_Init+0x118>)
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fe22 	bl	8000ee6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 80002a2:	0021      	movs	r1, r4
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2230      	movs	r2, #48	; 0x30
 80002a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2201      	movs	r2, #1
 80002ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2203      	movs	r2, #3
 80002ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002bc:	000c      	movs	r4, r1
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <MX_GPIO_Init+0x110>)
 80002c2:	0019      	movs	r1, r3
 80002c4:	0010      	movs	r0, r2
 80002c6:	f000 fc79 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 80002ca:	0021      	movs	r1, r4
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	4a19      	ldr	r2, [pc, #100]	; (8000334 <MX_GPIO_Init+0x114>)
 80002d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2203      	movs	r2, #3
 80002e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e4:	000c      	movs	r4, r1
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <MX_GPIO_Init+0x118>)
 80002ea:	0019      	movs	r1, r3
 80002ec:	0010      	movs	r0, r2
 80002ee:	f000 fc65 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 80002f2:	0021      	movs	r1, r4
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <MX_GPIO_Init+0x11c>)
 80002fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000306:	187b      	adds	r3, r7, r1
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <MX_GPIO_Init+0x118>)
 800030a:	0019      	movs	r1, r3
 800030c:	0010      	movs	r0, r2
 800030e:	f000 fc55 	bl	8000bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	2005      	movs	r0, #5
 8000318:	f000 fc1e 	bl	8000b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800031c:	2005      	movs	r0, #5
 800031e:	f000 fc30 	bl	8000b82 <HAL_NVIC_EnableIRQ>

}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b009      	add	sp, #36	; 0x24
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	40021000 	.word	0x40021000
 8000330:	48000800 	.word	0x48000800
 8000334:	00001001 	.word	0x00001001
 8000338:	48000400 	.word	0x48000400
 800033c:	10210000 	.word	0x10210000

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b089      	sub	sp, #36	; 0x24
 8000344:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fad5 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f87b 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f7ff ff67 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000352:	f000 f8c7 	bl	80004e4 <MX_SPI1_Init>
  MX_TIM17_Init();
 8000356:	f000 fa53 	bl	8000800 <MX_TIM17_Init>
  MX_SPI2_Init();
 800035a:	f000 f901 	bl	8000560 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800035e:	f001 ff8a 	bl	8002276 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000362:	2001      	movs	r0, #1
 8000364:	f002 fbfc 	bl	8002b60 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(BLUE);
 8000368:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <main+0xe4>)
 800036a:	0018      	movs	r0, r3
 800036c:	f002 f98c 	bl	8002688 <ILI9341_Fill_Screen>

  TSC2046_HM_Init();
 8000370:	f002 fe8e 	bl	8003090 <TSC2046_HM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE

	  ILI9341_Draw_Text("TEST6", 10, 10, BLACK, 2, RED);
 8000374:	482c      	ldr	r0, [pc, #176]	; (8000428 <main+0xe8>)
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <main+0xec>)
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2302      	movs	r3, #2
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2300      	movs	r3, #0
 8000380:	220a      	movs	r2, #10
 8000382:	210a      	movs	r1, #10
 8000384:	f001 ff06 	bl	8002194 <ILI9341_Draw_Text>

	  if(TSC2046_EM_GetTouchScreenState())
 8000388:	f002 fe44 	bl	8003014 <TSC2046_EM_GetTouchScreenState>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d03d      	beq.n	800040c <main+0xcc>
	  {
		  ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 8000390:	4827      	ldr	r0, [pc, #156]	; (8000430 <main+0xf0>)
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <main+0xec>)
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2302      	movs	r3, #2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2300      	movs	r3, #0
 800039c:	220a      	movs	r2, #10
 800039e:	2164      	movs	r1, #100	; 0x64
 80003a0:	f001 fef8 	bl	8002194 <ILI9341_Draw_Text>
		  uint16_t Positions[2];
		  if( TSC2046_HM_ReadAnalogInput(Positions) == TSC2046_DATAOK )
 80003a4:	2314      	movs	r3, #20
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	0018      	movs	r0, r3
 80003aa:	f002 fe8d 	bl	80030c8 <TSC2046_HM_ReadAnalogInput>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d121      	bne.n	80003f6 <main+0xb6>
		  {
			  ILI9341_Draw_Filled_Circle(Positions[0], Positions[1], 2, WHITE);
 80003b2:	2214      	movs	r2, #20
 80003b4:	18bb      	adds	r3, r7, r2
 80003b6:	8818      	ldrh	r0, [r3, #0]
 80003b8:	0014      	movs	r4, r2
 80003ba:	18bb      	adds	r3, r7, r2
 80003bc:	8859      	ldrh	r1, [r3, #2]
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <main+0xf4>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	f001 fd45 	bl	8001e50 <ILI9341_Draw_Filled_Circle>
			  char pos_string[15];
			  snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", Positions[0], Positions[1]);
 80003c6:	0022      	movs	r2, r4
 80003c8:	18bb      	adds	r3, r7, r2
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	0019      	movs	r1, r3
 80003ce:	18bb      	adds	r3, r7, r2
 80003d0:	885b      	ldrh	r3, [r3, #2]
 80003d2:	4a19      	ldr	r2, [pc, #100]	; (8000438 <main+0xf8>)
 80003d4:	1d38      	adds	r0, r7, #4
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	000b      	movs	r3, r1
 80003da:	210f      	movs	r1, #15
 80003dc:	f002 ffa0 	bl	8003320 <sniprintf>
			  ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 80003e0:	1d38      	adds	r0, r7, #4
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <main+0xec>)
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2302      	movs	r3, #2
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2300      	movs	r3, #0
 80003ec:	220a      	movs	r2, #10
 80003ee:	21b4      	movs	r1, #180	; 0xb4
 80003f0:	f001 fed0 	bl	8002194 <ILI9341_Draw_Text>
 80003f4:	e7be      	b.n	8000374 <main+0x34>
		  }
		  else
		  {
			  ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <main+0xfc>)
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <main+0xec>)
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	2302      	movs	r3, #2
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2300      	movs	r3, #0
 8000402:	220a      	movs	r2, #10
 8000404:	21c8      	movs	r1, #200	; 0xc8
 8000406:	f001 fec5 	bl	8002194 <ILI9341_Draw_Text>
 800040a:	e7b3      	b.n	8000374 <main+0x34>

	  }

	  else
	  {
		  ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <main+0x100>)
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <main+0xec>)
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2302      	movs	r3, #2
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	220a      	movs	r2, #10
 800041a:	2164      	movs	r1, #100	; 0x64
 800041c:	f001 feba 	bl	8002194 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("TEST6", 10, 10, BLACK, 2, RED);
 8000420:	e7a8      	b.n	8000374 <main+0x34>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	000002fd 	.word	0x000002fd
 8000428:	08003b6c 	.word	0x08003b6c
 800042c:	0000d8c3 	.word	0x0000d8c3
 8000430:	08003b74 	.word	0x08003b74
 8000434:	0000ffff 	.word	0x0000ffff
 8000438:	08003b7c 	.word	0x08003b7c
 800043c:	08003b8c 	.word	0x08003b8c
 8000440:	08003b98 	.word	0x08003b98

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b093      	sub	sp, #76	; 0x4c
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	2414      	movs	r4, #20
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2334      	movs	r3, #52	; 0x34
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 ff5b 	bl	8003310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	0018      	movs	r0, r3
 800045e:	2310      	movs	r3, #16
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f002 ff54 	bl	8003310 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	0021      	movs	r1, r4
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2202      	movs	r2, #2
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2201      	movs	r2, #1
 8000474:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2210      	movs	r2, #16
 800047a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2202      	movs	r2, #2
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	; 0x80
 8000486:	0212      	lsls	r2, r2, #8
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	0352      	lsls	r2, r2, #13
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	187b      	adds	r3, r7, r1
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fd66 	bl	8000f6c <HAL_RCC_OscConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004a4:	f000 f819 	bl	80004da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2207      	movs	r2, #7
 80004ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2202      	movs	r2, #2
 80004b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 f8d7 	bl	8001678 <HAL_RCC_ClockConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004ce:	f000 f804 	bl	80004da <Error_Handler>
  }
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b013      	add	sp, #76	; 0x4c
 80004d8:	bd90      	pop	{r4, r7, pc}

080004da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_SPI1_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_SPI1_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f0:	2282      	movs	r2, #130	; 0x82
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_SPI1_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_SPI1_Init+0x74>)
 80004fe:	22e0      	movs	r2, #224	; 0xe0
 8000500:	00d2      	lsls	r2, r2, #3
 8000502:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_SPI1_Init+0x74>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0092      	lsls	r2, r2, #2
 8000516:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_SPI1_Init+0x74>)
 800051a:	2208      	movs	r2, #8
 800051c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SPI1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SPI1_Init+0x74>)
 8000532:	2207      	movs	r2, #7
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_SPI1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_SPI1_Init+0x74>)
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f9ef 	bl	8001928 <HAL_SPI_Init>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800054e:	f7ff ffc4 	bl	80004da <Error_Handler>
  }

}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000104 	.word	0x20000104
 800055c:	40013000 	.word	0x40013000

08000560 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_SPI2_Init+0x74>)
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <MX_SPI2_Init+0x78>)
 8000568:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_SPI2_Init+0x74>)
 800056c:	2282      	movs	r2, #130	; 0x82
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_SPI2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_SPI2_Init+0x74>)
 800057a:	22e0      	movs	r2, #224	; 0xe0
 800057c:	00d2      	lsls	r2, r2, #3
 800057e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_SPI2_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_SPI2_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_SPI2_Init+0x74>)
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_SPI2_Init+0x74>)
 8000596:	2208      	movs	r2, #8
 8000598:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_SPI2_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_SPI2_Init+0x74>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f9b1 	bl	8001928 <HAL_SPI_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005ca:	f7ff ff86 	bl	80004da <Error_Handler>
  }

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000a0 	.word	0x200000a0
 80005d8:	40003800 	.word	0x40003800

080005dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	231c      	movs	r3, #28
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fe8e 	bl	8003310 <memset>
  if(spiHandle->Instance==SPI1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <HAL_SPI_MspInit+0x104>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d133      	bne.n	8000666 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000600:	699a      	ldr	r2, [r3, #24]
 8000602:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0149      	lsls	r1, r1, #5
 8000608:	430a      	orrs	r2, r1
 800060a:	619a      	str	r2, [r3, #24]
 800060c:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 800060e:	699a      	ldr	r2, [r3, #24]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	015b      	lsls	r3, r3, #5
 8000614:	4013      	ands	r3, r2
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000636:	211c      	movs	r1, #28
 8000638:	187b      	adds	r3, r7, r1
 800063a:	22e0      	movs	r2, #224	; 0xe0
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2202      	movs	r2, #2
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	187a      	adds	r2, r7, r1
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 faac 	bl	8000bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000664:	e037      	b.n	80006d6 <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <HAL_SPI_MspInit+0x10c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d132      	bne.n	80006d6 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000672:	69da      	ldr	r2, [r3, #28]
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	01c9      	lsls	r1, r1, #7
 800067a:	430a      	orrs	r2, r1
 800067c:	61da      	str	r2, [r3, #28]
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000680:	69da      	ldr	r2, [r3, #28]
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	01db      	lsls	r3, r3, #7
 8000686:	4013      	ands	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	02c9      	lsls	r1, r1, #11
 8000696:	430a      	orrs	r2, r1
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_SPI_MspInit+0x108>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	02db      	lsls	r3, r3, #11
 80006a2:	4013      	ands	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 80006a8:	211c      	movs	r1, #28
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	22e0      	movs	r2, #224	; 0xe0
 80006ae:	0212      	lsls	r2, r2, #8
 80006b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2203      	movs	r2, #3
 80006c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_SPI_MspInit+0x110>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f000 fa73 	bl	8000bbc <HAL_GPIO_Init>
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b00c      	add	sp, #48	; 0x30
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40003800 	.word	0x40003800
 80006ec:	48000400 	.word	0x48000400

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	619a      	str	r2, [r3, #24]
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	69da      	ldr	r2, [r3, #28]
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0549      	lsls	r1, r1, #21
 8000718:	430a      	orrs	r2, r1
 800071a:	61da      	str	r2, [r3, #28]
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_MspInit+0x44>)
 800071e:	69da      	ldr	r2, [r3, #28]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	055b      	lsls	r3, r3, #21
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000760:	f000 f910 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	TSC2046_IM_PENIRQ_EXTI_Handler();
 800076e:	f002 fd87 	bl	8003280 <TSC2046_IM_PENIRQ_EXTI_Handler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fbd4 	bl	8000f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	TSC2046_IM_HardwareManagerLoopHandler();
 8000784:	f002 fd84 	bl	8003290 <TSC2046_IM_HardwareManagerLoopHandler>
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <TIM17_IRQHandler+0x18>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 f992 	bl	8001ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000168 	.word	0x20000168

0800079c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_sbrk+0x50>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x16>
		heap_end = &end;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <_sbrk+0x50>)
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <_sbrk+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <_sbrk+0x50>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <_sbrk+0x50>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	18d3      	adds	r3, r2, r3
 80007c0:	466a      	mov	r2, sp
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d907      	bls.n	80007d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007c6:	f002 fd79 	bl	80032bc <__errno>
 80007ca:	0003      	movs	r3, r0
 80007cc:	220c      	movs	r2, #12
 80007ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	e006      	b.n	80007e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <_sbrk+0x50>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	18d2      	adds	r2, r2, r3
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <_sbrk+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b004      	add	sp, #16
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000090 	.word	0x20000090
 80007f0:	200001b0 	.word	0x200001b0

080007f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_TIM17_Init+0x48>)
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <MX_TIM17_Init+0x4c>)
 8000808:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_TIM17_Init+0x48>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_TIM17_Init+0x48>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_TIM17_Init+0x48>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	00d2      	lsls	r2, r2, #3
 800081c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_TIM17_Init+0x48>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_TIM17_Init+0x48>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_TIM17_Init+0x48>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_TIM17_Init+0x48>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 f912 	bl	8001a5c <HAL_TIM_Base_Init>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800083c:	f7ff fe4d 	bl	80004da <Error_Handler>
  }

}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000168 	.word	0x20000168
 800084c:	40014800 	.word	0x40014800

08000850 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_TIM_Base_MspInit+0x48>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d115      	bne.n	800088e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_TIM_Base_MspInit+0x4c>)
 8000864:	699a      	ldr	r2, [r3, #24]
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_TIM_Base_MspInit+0x4c>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	02c9      	lsls	r1, r1, #11
 800086c:	430a      	orrs	r2, r1
 800086e:	619a      	str	r2, [r3, #24]
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_TIM_Base_MspInit+0x4c>)
 8000872:	699a      	ldr	r2, [r3, #24]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	02db      	lsls	r3, r3, #11
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	2016      	movs	r0, #22
 8000884:	f000 f968 	bl	8000b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000888:	2016      	movs	r0, #22
 800088a:	f000 f97a 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b004      	add	sp, #16
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40014800 	.word	0x40014800
 800089c:	40021000 	.word	0x40021000

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008ca:	f7ff ff93 	bl	80007f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008ce:	f002 fcfb 	bl	80032c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fd35 	bl	8000340 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008e4:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 80008e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008ec:	200001b0 	.word	0x200001b0

080008f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_COMP_IRQHandler>
	...

080008f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_Init+0x24>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_Init+0x24>)
 80008fe:	2110      	movs	r1, #16
 8000900:	430a      	orrs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f809 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090a:	f7ff fef1 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_InitTick+0x5c>)
 8000926:	681c      	ldr	r4, [r3, #0]
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_InitTick+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	0019      	movs	r1, r3
 800092e:	23fa      	movs	r3, #250	; 0xfa
 8000930:	0098      	lsls	r0, r3, #2
 8000932:	f7ff fbe9 	bl	8000108 <__udivsi3>
 8000936:	0003      	movs	r3, r0
 8000938:	0019      	movs	r1, r3
 800093a:	0020      	movs	r0, r4
 800093c:	f7ff fbe4 	bl	8000108 <__udivsi3>
 8000940:	0003      	movs	r3, r0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 f92d 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e00f      	b.n	8000970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80b      	bhi.n	800096e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f8fa 	bl	8000b58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_InitTick+0x64>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	18d2      	adds	r2, r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_IncTick+0x20>)
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	20000008 	.word	0x20000008
 80009a4:	200001a8 	.word	0x200001a8

080009a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	200001a8 	.word	0x200001a8

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_Delay+0x40>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001a      	movs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	0002      	movs	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b004      	add	sp, #16
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b7f      	cmp	r3, #127	; 0x7f
 8000a12:	d809      	bhi.n	8000a28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a14:	1dfb      	adds	r3, r7, #7
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_EnableIRQ+0x30>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	4091      	lsls	r1, r2
 8000a24:	000a      	movs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
  }
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b7f      	cmp	r3, #127	; 0x7f
 8000a48:	d828      	bhi.n	8000a9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	33c0      	adds	r3, #192	; 0xc0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	589b      	ldr	r3, [r3, r2]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	; 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <__NVIC_SetPriority+0xd4>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	430a      	orrs	r2, r1
 8000a94:	33c0      	adds	r3, #192	; 0xc0
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9a:	e031      	b.n	8000b00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <__NVIC_SetPriority+0xd8>)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	3b08      	subs	r3, #8
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	3306      	adds	r3, #6
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	18d3      	adds	r3, r2, r3
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1dfa      	adds	r2, r7, #7
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	0011      	movs	r1, r2
 8000abc:	2203      	movs	r2, #3
 8000abe:	400a      	ands	r2, r1
 8000ac0:	00d2      	lsls	r2, r2, #3
 8000ac2:	21ff      	movs	r1, #255	; 0xff
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0018      	movs	r0, r3
 8000adc:	2303      	movs	r3, #3
 8000ade:	4003      	ands	r3, r0
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001c      	movs	r4, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	4023      	ands	r3, r4
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	430a      	orrs	r2, r1
 8000af6:	3306      	adds	r3, #6
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18c3      	adds	r3, r0, r3
 8000afc:	3304      	adds	r3, #4
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <SysTick_Config+0x40>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d901      	bls.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e010      	b.n	8000b48 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <SysTick_Config+0x44>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	425b      	negs	r3, r3
 8000b32:	2103      	movs	r1, #3
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ff7d 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SysTick_Config+0x44>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x44>)
 8000b42:	2207      	movs	r2, #7
 8000b44:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	00ffffff 	.word	0x00ffffff
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	210f      	movs	r1, #15
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	1c02      	adds	r2, r0, #0
 8000b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	0002      	movs	r2, r0
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff33 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffaf 	bl	8000b10 <SysTick_Config>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e155      	b.n	8000e78 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x28>
 8000be2:	e146      	b.n	8000e72 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x38>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b12      	cmp	r3, #18
 8000bf2:	d123      	bne.n	8000c3c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	58d3      	ldr	r3, [r2, r3]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2207      	movs	r2, #7
 8000c06:	4013      	ands	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	691a      	ldr	r2, [r3, #16]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2107      	movs	r1, #7
 8000c20:	400b      	ands	r3, r1
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	409a      	lsls	r2, r3
 8000c26:	0013      	movs	r3, r2
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	6939      	ldr	r1, [r7, #16]
 8000c3a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d00b      	beq.n	8000c90 <HAL_GPIO_Init+0xd4>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	2b11      	cmp	r3, #17
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b12      	cmp	r3, #18
 8000c8e:	d130      	bne.n	8000cf2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	091b      	lsrs	r3, r3, #4
 8000cdc:	2201      	movs	r2, #1
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	055b      	lsls	r3, r3, #21
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x174>
 8000d2e:	e0a0      	b.n	8000e72 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b57      	ldr	r3, [pc, #348]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d32:	699a      	ldr	r2, [r3, #24]
 8000d34:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4013      	ands	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	589b      	ldr	r3, [r3, r2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	2390      	movs	r3, #144	; 0x90
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1ea>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1e6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x2e4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1de>
 8000d96:	2304      	movs	r3, #4
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x1f0>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x1f0>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x1f0>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x1f0>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x1f0>
 8000daa:	2300      	movs	r3, #0
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	2103      	movs	r1, #3
 8000db0:	400a      	ands	r2, r1
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	4013      	ands	r3, r2
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	035b      	lsls	r3, r3, #13
 8000e36:	4013      	ands	r3, r2
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	039b      	lsls	r3, r3, #14
 8000e60:	4013      	ands	r3, r2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	40da      	lsrs	r2, r3
 8000e80:	1e13      	subs	r3, r2, #0
 8000e82:	d000      	beq.n	8000e86 <HAL_GPIO_Init+0x2ca>
 8000e84:	e6a2      	b.n	8000bcc <HAL_GPIO_Init+0x10>
  } 
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b006      	add	sp, #24
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000c00 	.word	0x48000c00
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	1cbb      	adds	r3, r7, #2
 8000eb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	1cba      	adds	r2, r7, #2
 8000ec0:	8812      	ldrh	r2, [r2, #0]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d004      	beq.n	8000ed0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e003      	b.n	8000ed8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	781b      	ldrb	r3, [r3, #0]
  }
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	0008      	movs	r0, r1
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	1cbb      	adds	r3, r7, #2
 8000ef4:	1c02      	adds	r2, r0, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
 8000ef8:	1c7b      	adds	r3, r7, #1
 8000efa:	1c0a      	adds	r2, r1, #0
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efe:	1c7b      	adds	r3, r7, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f06:	1cbb      	adds	r3, r7, #2
 8000f08:	881a      	ldrh	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f0e:	e003      	b.n	8000f18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	1dba      	adds	r2, r7, #6
 8000f32:	8812      	ldrh	r2, [r2, #0]
 8000f34:	4013      	ands	r3, r2
 8000f36:	d008      	beq.n	8000f4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f3a:	1dba      	adds	r2, r7, #6
 8000f3c:	8812      	ldrh	r2, [r2, #0]
 8000f3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 f807 	bl	8000f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	1dbb      	adds	r3, r7, #6
 8000f62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f000 fb76 	bl	800166c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_RCC_OscConfig+0x20>
 8000f8a:	e08e      	b.n	80010aa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f8c:	4bc5      	ldr	r3, [pc, #788]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	220c      	movs	r2, #12
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00e      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4bc2      	ldr	r3, [pc, #776]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d117      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x68>
 8000fa4:	4bbf      	ldr	r3, [pc, #764]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	23c0      	movs	r3, #192	; 0xc0
 8000faa:	025b      	lsls	r3, r3, #9
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	025b      	lsls	r3, r3, #9
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	4bbb      	ldr	r3, [pc, #748]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x58>
 8000fc2:	e071      	b.n	80010a8 <HAL_RCC_OscConfig+0x13c>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d000      	beq.n	8000fce <HAL_RCC_OscConfig+0x62>
 8000fcc:	e06c      	b.n	80010a8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f000 fb4c 	bl	800166c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <HAL_RCC_OscConfig+0x80>
 8000fdc:	4bb1      	ldr	r3, [pc, #708]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4bb0      	ldr	r3, [pc, #704]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e02f      	b.n	800104c <HAL_RCC_OscConfig+0xe0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0xa2>
 8000ff4:	4bab      	ldr	r3, [pc, #684]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4baa      	ldr	r3, [pc, #680]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8000ffa:	49ab      	ldr	r1, [pc, #684]	; (80012a8 <HAL_RCC_OscConfig+0x33c>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	4ba8      	ldr	r3, [pc, #672]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4ba7      	ldr	r3, [pc, #668]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001006:	49a9      	ldr	r1, [pc, #676]	; (80012ac <HAL_RCC_OscConfig+0x340>)
 8001008:	400a      	ands	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e01e      	b.n	800104c <HAL_RCC_OscConfig+0xe0>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10e      	bne.n	8001034 <HAL_RCC_OscConfig+0xc8>
 8001016:	4ba3      	ldr	r3, [pc, #652]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4ba2      	ldr	r3, [pc, #648]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	02c9      	lsls	r1, r1, #11
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4b9f      	ldr	r3, [pc, #636]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b9e      	ldr	r3, [pc, #632]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xe0>
 8001034:	4b9b      	ldr	r3, [pc, #620]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b9a      	ldr	r3, [pc, #616]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800103a:	499b      	ldr	r1, [pc, #620]	; (80012a8 <HAL_RCC_OscConfig+0x33c>)
 800103c:	400a      	ands	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	4b98      	ldr	r3, [pc, #608]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b97      	ldr	r3, [pc, #604]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001046:	4999      	ldr	r1, [pc, #612]	; (80012ac <HAL_RCC_OscConfig+0x340>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fca8 	bl	80009a8 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105e:	f7ff fca3 	bl	80009a8 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e2fd      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001070:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0xf2>
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fc93 	bl	80009a8 <HAL_GetTick>
 8001082:	0003      	movs	r3, r0
 8001084:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fc8e 	bl	80009a8 <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e2e8      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	029b      	lsls	r3, r3, #10
 80010a2:	4013      	ands	r3, r2
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x11c>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x14a>
 80010b4:	e06c      	b.n	8001190 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b6:	4b7b      	ldr	r3, [pc, #492]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	220c      	movs	r2, #12
 80010bc:	4013      	ands	r3, r2
 80010be:	d00e      	beq.n	80010de <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010c0:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d11f      	bne.n	800110c <HAL_RCC_OscConfig+0x1a0>
 80010cc:	4b75      	ldr	r3, [pc, #468]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	401a      	ands	r2, r3
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	429a      	cmp	r2, r3
 80010dc:	d116      	bne.n	800110c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2202      	movs	r2, #2
 80010e4:	4013      	ands	r3, r2
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_OscConfig+0x188>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d001      	beq.n	80010f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e2bb      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	22f8      	movs	r2, #248	; 0xf8
 80010fa:	4393      	bics	r3, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00da      	lsls	r2, r3, #3
 8001104:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	e041      	b.n	8001190 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d024      	beq.n	800115e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fc42 	bl	80009a8 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc3d 	bl	80009a8 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e297      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d0f1      	beq.n	800112a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22f8      	movs	r2, #248	; 0xf8
 800114c:	4393      	bics	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	00da      	lsls	r2, r3, #3
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e018      	b.n	8001190 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001164:	2101      	movs	r1, #1
 8001166:	438a      	bics	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fc1d 	bl	80009a8 <HAL_GetTick>
 800116e:	0003      	movs	r3, r0
 8001170:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc18 	bl	80009a8 <HAL_GetTick>
 8001178:	0002      	movs	r2, r0
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e272      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d1f1      	bne.n	8001174 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2208      	movs	r2, #8
 8001196:	4013      	ands	r3, r2
 8001198:	d036      	beq.n	8001208 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80011a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fbfb 	bl	80009a8 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fbf6 	bl	80009a8 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e250      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f1      	beq.n	80011b8 <HAL_RCC_OscConfig+0x24c>
 80011d4:	e018      	b.n	8001208 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80011d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 80011dc:	2101      	movs	r1, #1
 80011de:	438a      	bics	r2, r1
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fbe1 	bl	80009a8 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fbdc 	bl	80009a8 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e236      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	d1f1      	bne.n	80011ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2204      	movs	r2, #4
 800120e:	4013      	ands	r3, r2
 8001210:	d100      	bne.n	8001214 <HAL_RCC_OscConfig+0x2a8>
 8001212:	e0b5      	b.n	8001380 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001214:	231f      	movs	r3, #31
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	055b      	lsls	r3, r3, #21
 8001224:	4013      	ands	r3, r2
 8001226:	d111      	bne.n	800124c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0549      	lsls	r1, r1, #21
 8001232:	430a      	orrs	r2, r1
 8001234:	61da      	str	r2, [r3, #28]
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001244:	231f      	movs	r3, #31
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_RCC_OscConfig+0x344>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4013      	ands	r3, r2
 8001256:	d11a      	bne.n	800128e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_RCC_OscConfig+0x344>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_RCC_OscConfig+0x344>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0049      	lsls	r1, r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb9f 	bl	80009a8 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001270:	f7ff fb9a 	bl	80009a8 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1f4      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x344>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4013      	ands	r3, r2
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10e      	bne.n	80012b4 <HAL_RCC_OscConfig+0x348>
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 8001298:	6a1a      	ldr	r2, [r3, #32]
 800129a:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_RCC_OscConfig+0x338>)
 800129c:	2101      	movs	r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	621a      	str	r2, [r3, #32]
 80012a2:	e035      	b.n	8001310 <HAL_RCC_OscConfig+0x3a4>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	fffeffff 	.word	0xfffeffff
 80012ac:	fffbffff 	.word	0xfffbffff
 80012b0:	40007000 	.word	0x40007000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10c      	bne.n	80012d6 <HAL_RCC_OscConfig+0x36a>
 80012bc:	4bca      	ldr	r3, [pc, #808]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4bc9      	ldr	r3, [pc, #804]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	621a      	str	r2, [r3, #32]
 80012c8:	4bc7      	ldr	r3, [pc, #796]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	4bc6      	ldr	r3, [pc, #792]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012ce:	2104      	movs	r1, #4
 80012d0:	438a      	bics	r2, r1
 80012d2:	621a      	str	r2, [r3, #32]
 80012d4:	e01c      	b.n	8001310 <HAL_RCC_OscConfig+0x3a4>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x38c>
 80012de:	4bc2      	ldr	r3, [pc, #776]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	4bc1      	ldr	r3, [pc, #772]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012e4:	2104      	movs	r1, #4
 80012e6:	430a      	orrs	r2, r1
 80012e8:	621a      	str	r2, [r3, #32]
 80012ea:	4bbf      	ldr	r3, [pc, #764]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	4bbe      	ldr	r3, [pc, #760]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	621a      	str	r2, [r3, #32]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0x3a4>
 80012f8:	4bbb      	ldr	r3, [pc, #748]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	4bba      	ldr	r3, [pc, #744]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80012fe:	2101      	movs	r1, #1
 8001300:	438a      	bics	r2, r1
 8001302:	621a      	str	r2, [r3, #32]
 8001304:	4bb8      	ldr	r3, [pc, #736]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4bb7      	ldr	r3, [pc, #732]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800130a:	2104      	movs	r1, #4
 800130c:	438a      	bics	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d014      	beq.n	8001342 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fb46 	bl	80009a8 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	e009      	b.n	8001336 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb41 	bl	80009a8 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	4aaf      	ldr	r2, [pc, #700]	; (80015ec <HAL_RCC_OscConfig+0x680>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e19a      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	4bac      	ldr	r3, [pc, #688]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x3b6>
 8001340:	e013      	b.n	800136a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fb31 	bl	80009a8 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	e009      	b.n	8001360 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fb2c 	bl	80009a8 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	4aa5      	ldr	r2, [pc, #660]	; (80015ec <HAL_RCC_OscConfig+0x680>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e185      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001360:	4ba1      	ldr	r3, [pc, #644]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800136a:	231f      	movs	r3, #31
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4b9c      	ldr	r3, [pc, #624]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800137a:	499d      	ldr	r1, [pc, #628]	; (80015f0 <HAL_RCC_OscConfig+0x684>)
 800137c:	400a      	ands	r2, r1
 800137e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2210      	movs	r2, #16
 8001386:	4013      	ands	r3, r2
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d12a      	bne.n	80013e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001392:	4b95      	ldr	r3, [pc, #596]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001398:	2104      	movs	r1, #4
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800139e:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fafd 	bl	80009a8 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013b4:	f7ff faf8 	bl	80009a8 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e152      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
 80013ce:	d0f1      	beq.n	80013b4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013d0:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	22f8      	movs	r2, #248	; 0xf8
 80013d6:	4393      	bics	r3, r2
 80013d8:	0019      	movs	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	00da      	lsls	r2, r3, #3
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	635a      	str	r2, [r3, #52]	; 0x34
 80013e6:	e034      	b.n	8001452 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	3305      	adds	r3, #5
 80013ee:	d111      	bne.n	8001414 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013f0:	4b7d      	ldr	r3, [pc, #500]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f4:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	438a      	bics	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013fc:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	22f8      	movs	r2, #248	; 0xf8
 8001402:	4393      	bics	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	00da      	lsls	r2, r3, #3
 800140c:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
 8001412:	e01e      	b.n	8001452 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001414:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001418:	4b73      	ldr	r3, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800141a:	2104      	movs	r1, #4
 800141c:	430a      	orrs	r2, r1
 800141e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001420:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff fabc 	bl	80009a8 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001436:	f7ff fab7 	bl	80009a8 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e111      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001448:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d1f1      	bne.n	8001436 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2220      	movs	r2, #32
 8001458:	4013      	ands	r3, r2
 800145a:	d05c      	beq.n	8001516 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800145c:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	220c      	movs	r2, #12
 8001462:	4013      	ands	r3, r2
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d00e      	beq.n	8001486 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	220c      	movs	r2, #12
 800146e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001470:	2b08      	cmp	r3, #8
 8001472:	d114      	bne.n	800149e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001474:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	401a      	ands	r2, r3
 800147e:	23c0      	movs	r3, #192	; 0xc0
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	429a      	cmp	r2, r3
 8001484:	d10b      	bne.n	800149e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	4013      	ands	r3, r2
 8001490:	d040      	beq.n	8001514 <HAL_RCC_OscConfig+0x5a8>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d03c      	beq.n	8001514 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0e6      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01b      	beq.n	80014de <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014a6:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80014a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0249      	lsls	r1, r1, #9
 80014b0:	430a      	orrs	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fa78 	bl	80009a8 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014be:	f7ff fa73 	bl	80009a8 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0cd      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	025b      	lsls	r3, r3, #9
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x552>
 80014dc:	e01b      	b.n	8001516 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	4943      	ldr	r1, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x688>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fa5d 	bl	80009a8 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f4:	f7ff fa58 	bl	80009a8 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0b2      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x588>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001514:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x5b4>
 800151e:	e0a4      	b.n	800166a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	2b08      	cmp	r3, #8
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x5c2>
 800152c:	e078      	b.n	8001620 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2b02      	cmp	r3, #2
 8001534:	d14c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800153c:	492e      	ldr	r1, [pc, #184]	; (80015f8 <HAL_RCC_OscConfig+0x68c>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fa31 	bl	80009a8 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fa2c 	bl	80009a8 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e086      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	049b      	lsls	r3, r3, #18
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	220f      	movs	r2, #15
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800157a:	430a      	orrs	r2, r1
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_RCC_OscConfig+0x690>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	431a      	orrs	r2, r3
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0449      	lsls	r1, r1, #17
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff f9ff 	bl	80009a8 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff f9fa 	bl	80009a8 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e054      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x644>
 80015ce:	e04c      	b.n	800166a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_RCC_OscConfig+0x67c>)
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x68c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff f9e4 	bl	80009a8 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x6a6>
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000
 80015ec:	00001388 	.word	0x00001388
 80015f0:	efffffff 	.word	0xefffffff
 80015f4:	fffeffff 	.word	0xfffeffff
 80015f8:	feffffff 	.word	0xfeffffff
 80015fc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff f9d2 	bl	80009a8 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e02c      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_RCC_OscConfig+0x708>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	049b      	lsls	r3, r3, #18
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x694>
 800161e:	e024      	b.n	800166a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e01f      	b.n	800166c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_RCC_OscConfig+0x708>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x708>)
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	429a      	cmp	r2, r3
 8001646:	d10e      	bne.n	8001666 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	220f      	movs	r2, #15
 800164c:	401a      	ands	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	23f0      	movs	r3, #240	; 0xf0
 800165a:	039b      	lsls	r3, r3, #14
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b008      	add	sp, #32
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0bf      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d911      	bls.n	80016be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b5e      	ldr	r3, [pc, #376]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	4393      	bics	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0a6      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2204      	movs	r2, #4
 80016ce:	4013      	ands	r3, r2
 80016d0:	d006      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80016d8:	21e0      	movs	r1, #224	; 0xe0
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	22f0      	movs	r2, #240	; 0xf0
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d04c      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d120      	bne.n	8001754 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07a      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d114      	bne.n	8001754 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06e      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	4013      	ands	r3, r2
 8001740:	d108      	bne.n	8001754 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e062      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e05b      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	4393      	bics	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f91e 	bl	80009a8 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001770:	e009      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7ff f919 	bl	80009a8 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x1a4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e042      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	220c      	movs	r2, #12
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1ec      	bne.n	8001772 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d211      	bcs.n	80017ca <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x19c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e020      	b.n	800180c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d009      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_RCC_ClockConfig+0x1a8>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017e8:	f000 f820 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	220f      	movs	r2, #15
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x1ac>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	000a      	movs	r2, r1
 80017fe:	40da      	lsrs	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1b0>)
 8001802:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff f889 	bl	800091c <HAL_InitTick>
  
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	40021000 	.word	0x40021000
 800181c:	00001388 	.word	0x00001388
 8001820:	fffff8ff 	.word	0xfffff8ff
 8001824:	08003bc0 	.word	0x08003bc0
 8001828:	20000000 	.word	0x20000000

0800182c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b08f      	sub	sp, #60	; 0x3c
 8001830:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001832:	2314      	movs	r3, #20
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001838:	ca13      	ldmia	r2!, {r0, r1, r4}
 800183a:	c313      	stmia	r3!, {r0, r1, r4}
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a35      	ldr	r2, [pc, #212]	; (8001918 <HAL_RCC_GetSysClockFreq+0xec>)
 8001844:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001846:	c313      	stmia	r3!, {r0, r1, r4}
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d006      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x52>
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d043      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xd0>
 8001874:	2b04      	cmp	r3, #4
 8001876:	d144      	bne.n	8001902 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800187c:	e044      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	220f      	movs	r2, #15
 8001884:	4013      	ands	r3, r2
 8001886:	2214      	movs	r2, #20
 8001888:	18ba      	adds	r2, r7, r2
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	220f      	movs	r2, #15
 8001894:	4013      	ands	r3, r2
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018b0:	f7fe fc2a 	bl	8000108 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	001a      	movs	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4353      	muls	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	401a      	ands	r2, r3
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d109      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d4:	f7fe fc18 	bl	8000108 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	001a      	movs	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	4353      	muls	r3, r2
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018e8:	f7fe fc0e 	bl	8000108 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	001a      	movs	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4353      	muls	r3, r2
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001906:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b00f      	add	sp, #60	; 0x3c
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	08003ba0 	.word	0x08003ba0
 8001918:	08003bb0 	.word	0x08003bb0
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	02dc6c00 	.word	0x02dc6c00

08001928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08a      	b.n	8001a50 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	225d      	movs	r2, #93	; 0x5d
 8001944:	5c9b      	ldrb	r3, [r3, r2]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	225c      	movs	r2, #92	; 0x5c
 8001950:	2100      	movs	r1, #0
 8001952:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f7fe fe40 	bl	80005dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	225d      	movs	r2, #93	; 0x5d
 8001960:	2102      	movs	r1, #2
 8001962:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	438a      	bics	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	23e0      	movs	r3, #224	; 0xe0
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	429a      	cmp	r2, r3
 800197e:	d902      	bls.n	8001986 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e002      	b.n	800198c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	23f0      	movs	r3, #240	; 0xf0
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	429a      	cmp	r2, r3
 8001996:	d008      	beq.n	80019aa <HAL_SPI_Init+0x82>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	23e0      	movs	r3, #224	; 0xe0
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d002      	beq.n	80019aa <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	23e0      	movs	r3, #224	; 0xe0
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d903      	bls.n	80019c6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
 80019c4:	e002      	b.n	80019cc <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6999      	ldr	r1, [r3, #24]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	0011      	movs	r1, r2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	2204      	movs	r2, #4
 8001a10:	401a      	ands	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	0011      	movs	r1, r2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4907      	ldr	r1, [pc, #28]	; (8001a58 <HAL_SPI_Init+0x130>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	225d      	movs	r2, #93	; 0x5d
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	fffff7ff 	.word	0xfffff7ff

08001a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e01e      	b.n	8001aac <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	223d      	movs	r2, #61	; 0x3d
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223c      	movs	r2, #60	; 0x3c
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fee3 	bl	8000850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223d      	movs	r2, #61	; 0x3d
 8001a8e:	2102      	movs	r1, #2
 8001a90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f000 f947 	bl	8001d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223d      	movs	r2, #61	; 0x3d
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d124      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d11d      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2203      	movs	r2, #3
 8001ade:	4252      	negs	r2, r2
 8001ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	d004      	beq.n	8001afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f902 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e007      	b.n	8001b0e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f8f5 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f901 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d125      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d11e      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2205      	movs	r2, #5
 8001b36:	4252      	negs	r2, r2
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	23c0      	movs	r3, #192	; 0xc0
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 f8d5 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001b56:	e007      	b.n	8001b68 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 f8c8 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8d4 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2208      	movs	r2, #8
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d124      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2208      	movs	r2, #8
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11d      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2209      	movs	r2, #9
 8001b90:	4252      	negs	r2, r2
 8001b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d004      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f8a9 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001bae:	e007      	b.n	8001bc0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 f89c 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f8a8 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d125      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2210      	movs	r2, #16
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d11e      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2211      	movs	r2, #17
 8001be8:	4252      	negs	r2, r2
 8001bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f87c 	bl	8001d00 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e007      	b.n	8001c1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f86f 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f87b 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2201      	movs	r2, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10f      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2202      	movs	r2, #2
 8001c42:	4252      	negs	r2, r2
 8001c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f849 	bl	8001ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b80      	cmp	r3, #128	; 0x80
 8001c5a:	d10f      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d108      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2281      	movs	r2, #129	; 0x81
 8001c70:	4252      	negs	r2, r2
 8001c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f8e2 	bl	8001e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d10f      	bne.n	8001caa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d108      	bne.n	8001caa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2241      	movs	r2, #65	; 0x41
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f83b 	bl	8001d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d108      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2221      	movs	r2, #33	; 0x21
 8001ccc:	4252      	negs	r2, r2
 8001cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f8ac 	bl	8001e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d008      	beq.n	8001d5a <TIM_Base_SetConfig+0x2a>
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d003      	beq.n	8001d5a <TIM_Base_SetConfig+0x2a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <TIM_Base_SetConfig+0xe8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2270      	movs	r2, #112	; 0x70
 8001d5e:	4393      	bics	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d018      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d013      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <TIM_Base_SetConfig+0xe8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00f      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <TIM_Base_SetConfig+0xec>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00b      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <TIM_Base_SetConfig+0xf0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <TIM_Base_SetConfig+0xf4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <TIM_Base_SetConfig+0x76>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <TIM_Base_SetConfig+0xf8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d108      	bne.n	8001db8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <TIM_Base_SetConfig+0xfc>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <TIM_Base_SetConfig+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00b      	beq.n	8001dfe <TIM_Base_SetConfig+0xce>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <TIM_Base_SetConfig+0xf0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <TIM_Base_SetConfig+0xce>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <TIM_Base_SetConfig+0xf4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d003      	beq.n	8001dfe <TIM_Base_SetConfig+0xce>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <TIM_Base_SetConfig+0xf8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d103      	bne.n	8001e06 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	615a      	str	r2, [r3, #20]
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40002000 	.word	0x40002000
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40014400 	.word	0x40014400
 8001e28:	40014800 	.word	0x40014800
 8001e2c:	fffffcff 	.word	0xfffffcff

08001e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	0005      	movs	r5, r0
 8001e58:	000c      	movs	r4, r1
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	1dbb      	adds	r3, r7, #6
 8001e60:	1c2a      	adds	r2, r5, #0
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	1c22      	adds	r2, r4, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1cbb      	adds	r3, r7, #2
 8001e6c:	1c02      	adds	r2, r0, #0
 8001e6e:	801a      	strh	r2, [r3, #0]
 8001e70:	003b      	movs	r3, r7
 8001e72:	1c0a      	adds	r2, r1, #0
 8001e74:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8001e76:	1cbb      	adds	r3, r7, #2
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 8001e80:	1cbb      	adds	r3, r7, #2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2201      	movs	r2, #1
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8001e94:	e06d      	b.n	8001f72 <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e01c      	b.n	8001edc <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	b298      	uxth	r0, r3
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	18d3      	adds	r3, r2, r3
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	003b      	movs	r3, r7
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	f000 fc10 	bl	80026dc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	b298      	uxth	r0, r3
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	1d3a      	adds	r2, r7, #4
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	003b      	movs	r3, r7
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	f000 fc03 	bl	80026dc <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	1dbb      	adds	r3, r7, #6
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	18d3      	adds	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dddb      	ble.n	8001ea2 <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8001eea:	1dbb      	adds	r3, r7, #6
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e01c      	b.n	8001f30 <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	b298      	uxth	r0, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	18d3      	adds	r3, r2, r3
 8001f04:	b299      	uxth	r1, r3
 8001f06:	003b      	movs	r3, r7
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	f000 fbe6 	bl	80026dc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	b298      	uxth	r0, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	1d3a      	adds	r2, r7, #4
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	003b      	movs	r3, r7
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	001a      	movs	r2, r3
 8001f26:	f000 fbd9 	bl	80026dc <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	18d3      	adds	r3, r2, r3
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dddb      	ble.n	8001ef6 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	3301      	adds	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005a      	lsls	r2, r3, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	dd09      	ble.n	8001f72 <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3b01      	subs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3302      	adds	r3, #2
 8001f70:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	da8d      	bge.n	8001e96 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b00a      	add	sp, #40	; 0x28
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f84 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	0005      	movs	r5, r0
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	1c2a      	adds	r2, r5, #0
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	1c22      	adds	r2, r4, #0
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	1cbb      	adds	r3, r7, #2
 8001fa0:	1c02      	adds	r2, r0, #0
 8001fa2:	801a      	strh	r2, [r3, #0]
 8001fa4:	003b      	movs	r3, r7
 8001fa6:	1c0a      	adds	r2, r1, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8001faa:	2117      	movs	r1, #23
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	1dfa      	adds	r2, r7, #7
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8001fb4:	187b      	adds	r3, r7, r1
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b1f      	cmp	r3, #31
 8001fba:	d803      	bhi.n	8001fc4 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e005      	b.n	8001fd0 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8001fc4:	2217      	movs	r2, #23
 8001fc6:	18bb      	adds	r3, r7, r2
 8001fc8:	18ba      	adds	r2, r7, r2
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	3a20      	subs	r2, #32
 8001fce:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001fd0:	2314      	movs	r3, #20
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e016      	b.n	8002008 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	2514      	movs	r5, #20
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	7818      	ldrb	r0, [r3, #0]
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	7819      	ldrb	r1, [r3, #0]
 8001fea:	4c69      	ldr	r4, [pc, #420]	; (8002190 <ILI9341_Draw_Char+0x20c>)
 8001fec:	0013      	movs	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	189b      	adds	r3, r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	18e3      	adds	r3, r4, r3
 8001ff6:	5c1a      	ldrb	r2, [r3, r0]
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001ffe:	197b      	adds	r3, r7, r5
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	197b      	adds	r3, r7, r5
 8002004:	3201      	adds	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	2314      	movs	r3, #20
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d9e3      	bls.n	8001fda <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8002012:	2315      	movs	r3, #21
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e0ae      	b.n	800217a <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800201c:	2316      	movs	r3, #22
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e09d      	b.n	8002162 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8002026:	2315      	movs	r3, #21
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	220c      	movs	r2, #12
 800202e:	18ba      	adds	r2, r7, r2
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	001a      	movs	r2, r3
 8002034:	2316      	movs	r3, #22
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	411a      	asrs	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	2201      	movs	r2, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d043      	beq.n	80020cc <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8002044:	2328      	movs	r3, #40	; 0x28
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d115      	bne.n	800207a <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800204e:	2315      	movs	r3, #21
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b29a      	uxth	r2, r3
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	18d3      	adds	r3, r2, r3
 800205c:	b298      	uxth	r0, r3
 800205e:	2316      	movs	r3, #22
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b29a      	uxth	r2, r3
 8002066:	1cbb      	adds	r3, r7, #2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	18d3      	adds	r3, r2, r3
 800206c:	b299      	uxth	r1, r3
 800206e:	003b      	movs	r3, r7
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	001a      	movs	r2, r3
 8002074:	f000 fb32 	bl	80026dc <ILI9341_Draw_Pixel>
 8002078:	e06d      	b.n	8002156 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800207a:	2315      	movs	r3, #21
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	2128      	movs	r1, #40	; 0x28
 8002084:	187a      	adds	r2, r7, r1
 8002086:	8812      	ldrh	r2, [r2, #0]
 8002088:	4353      	muls	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	b298      	uxth	r0, r3
 8002094:	2316      	movs	r3, #22
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	000c      	movs	r4, r1
 800209e:	187a      	adds	r2, r7, r1
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	4353      	muls	r3, r2
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	1cbb      	adds	r3, r7, #2
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	b299      	uxth	r1, r3
 80020ae:	0022      	movs	r2, r4
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	881c      	ldrh	r4, [r3, #0]
 80020b4:	0013      	movs	r3, r2
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	003b      	movs	r3, r7
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	0023      	movs	r3, r4
 80020c6:	f000 fc7d 	bl	80029c4 <ILI9341_Draw_Rectangle>
 80020ca:	e044      	b.n	8002156 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 80020cc:	2328      	movs	r3, #40	; 0x28
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d116      	bne.n	8002104 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80020d6:	2315      	movs	r3, #21
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	b298      	uxth	r0, r3
 80020e6:	2316      	movs	r3, #22
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	1cbb      	adds	r3, r7, #2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	18d3      	adds	r3, r2, r3
 80020f4:	b299      	uxth	r1, r3
 80020f6:	232c      	movs	r3, #44	; 0x2c
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	f000 faed 	bl	80026dc <ILI9341_Draw_Pixel>
 8002102:	e028      	b.n	8002156 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8002104:	2315      	movs	r3, #21
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	2128      	movs	r1, #40	; 0x28
 800210e:	187a      	adds	r2, r7, r1
 8002110:	8812      	ldrh	r2, [r2, #0]
 8002112:	4353      	muls	r3, r2
 8002114:	b29a      	uxth	r2, r3
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	b298      	uxth	r0, r3
 800211e:	2316      	movs	r3, #22
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	000c      	movs	r4, r1
 8002128:	187a      	adds	r2, r7, r1
 800212a:	8812      	ldrh	r2, [r2, #0]
 800212c:	4353      	muls	r3, r2
 800212e:	b29a      	uxth	r2, r3
 8002130:	1cbb      	adds	r3, r7, #2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	18d3      	adds	r3, r2, r3
 8002136:	b299      	uxth	r1, r3
 8002138:	0022      	movs	r2, r4
 800213a:	193b      	adds	r3, r7, r4
 800213c:	881c      	ldrh	r4, [r3, #0]
 800213e:	0013      	movs	r3, r2
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	232c      	movs	r3, #44	; 0x2c
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	0023      	movs	r3, r4
 8002152:	f000 fc37 	bl	80029c4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8002156:	2116      	movs	r1, #22
 8002158:	187b      	adds	r3, r7, r1
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	187b      	adds	r3, r7, r1
 800215e:	3201      	adds	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	2316      	movs	r3, #22
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b07      	cmp	r3, #7
 800216a:	d800      	bhi.n	800216e <ILI9341_Draw_Char+0x1ea>
 800216c:	e75b      	b.n	8002026 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 800216e:	2115      	movs	r1, #21
 8002170:	187b      	adds	r3, r7, r1
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	187b      	adds	r3, r7, r1
 8002176:	3201      	adds	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	2315      	movs	r3, #21
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d800      	bhi.n	8002186 <ILI9341_Draw_Char+0x202>
 8002184:	e74a      	b.n	800201c <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	08003bd0 	.word	0x08003bd0

08002194 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	000c      	movs	r4, r1
 800219e:	0010      	movs	r0, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	250a      	movs	r5, #10
 80021a4:	197b      	adds	r3, r7, r5
 80021a6:	1c22      	adds	r2, r4, #0
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	2608      	movs	r6, #8
 80021ac:	19bb      	adds	r3, r7, r6
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	1dbb      	adds	r3, r7, #6
 80021b4:	1c0a      	adds	r2, r1, #0
 80021b6:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 80021b8:	197b      	adds	r3, r7, r5
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	b298      	uxth	r0, r3
 80021c0:	2320      	movs	r3, #32
 80021c2:	2208      	movs	r2, #8
 80021c4:	4694      	mov	ip, r2
 80021c6:	44bc      	add	ip, r7
 80021c8:	4463      	add	r3, ip
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2124      	movs	r1, #36	; 0x24
 80021d2:	2308      	movs	r3, #8
 80021d4:	18fc      	adds	r4, r7, r3
 80021d6:	1863      	adds	r3, r4, r1
 80021d8:	881c      	ldrh	r4, [r3, #0]
 80021da:	19bb      	adds	r3, r7, r6
 80021dc:	8819      	ldrh	r1, [r3, #0]
 80021de:	0023      	movs	r3, r4
 80021e0:	f000 f974 	bl	80024cc <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80021e4:	197b      	adds	r3, r7, r5
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	3b02      	subs	r3, #2
 80021ea:	b298      	uxth	r0, r3
 80021ec:	2320      	movs	r3, #32
 80021ee:	2208      	movs	r2, #8
 80021f0:	4694      	mov	ip, r2
 80021f2:	44bc      	add	ip, r7
 80021f4:	4463      	add	r3, ip
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	2124      	movs	r1, #36	; 0x24
 80021fe:	2308      	movs	r3, #8
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	185b      	adds	r3, r3, r1
 8002204:	881c      	ldrh	r4, [r3, #0]
 8002206:	19bb      	adds	r3, r7, r6
 8002208:	8819      	ldrh	r1, [r3, #0]
 800220a:	0023      	movs	r3, r4
 800220c:	f000 f95e 	bl	80024cc <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8002210:	e029      	b.n	8002266 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	7818      	ldrb	r0, [r3, #0]
 800221a:	1dbb      	adds	r3, r7, #6
 800221c:	881c      	ldrh	r4, [r3, #0]
 800221e:	2308      	movs	r3, #8
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	250a      	movs	r5, #10
 8002226:	197b      	adds	r3, r7, r5
 8002228:	8819      	ldrh	r1, [r3, #0]
 800222a:	2324      	movs	r3, #36	; 0x24
 800222c:	2608      	movs	r6, #8
 800222e:	46b4      	mov	ip, r6
 8002230:	44bc      	add	ip, r7
 8002232:	4463      	add	r3, ip
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2620      	movs	r6, #32
 800223a:	2308      	movs	r3, #8
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	199b      	adds	r3, r3, r6
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	0023      	movs	r3, r4
 8002246:	f7ff fe9d 	bl	8001f84 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800224a:	2308      	movs	r3, #8
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	199b      	adds	r3, r3, r6
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	1c1a      	adds	r2, r3, #0
 8002254:	1892      	adds	r2, r2, r2
 8002256:	18d3      	adds	r3, r2, r3
 8002258:	18db      	adds	r3, r3, r3
 800225a:	b299      	uxth	r1, r3
 800225c:	197b      	adds	r3, r7, r5
 800225e:	197a      	adds	r2, r7, r5
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	188a      	adds	r2, r1, r2
 8002264:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1d1      	bne.n	8002212 <ILI9341_Draw_Text+0x7e>
    }


}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b005      	add	sp, #20
 8002274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002276 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800227a:	f000 fcc1 	bl	8002c00 <_LCD_Enable>
	ILI9341_SPI_Init();
 800227e:	f000 f909 	bl	8002494 <ILI9341_SPI_Init>
	_LCD_Reset();
 8002282:	f000 fccb 	bl	8002c1c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 fdc8 	bl	8002e1c <_LCD_SendCommand>
	HAL_Delay(2000);
 800228c:	23fa      	movs	r3, #250	; 0xfa
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe fb93 	bl	80009bc <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8002296:	20cb      	movs	r0, #203	; 0xcb
 8002298:	f000 fdc0 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800229c:	2039      	movs	r0, #57	; 0x39
 800229e:	f000 fdf3 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x2C);
 80022a2:	202c      	movs	r0, #44	; 0x2c
 80022a4:	f000 fdf0 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 fded 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x34);
 80022ae:	2034      	movs	r0, #52	; 0x34
 80022b0:	f000 fdea 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x02);
 80022b4:	2002      	movs	r0, #2
 80022b6:	f000 fde7 	bl	8002e88 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 80022ba:	20cf      	movs	r0, #207	; 0xcf
 80022bc:	f000 fdae 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 fde1 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80022c6:	20c1      	movs	r0, #193	; 0xc1
 80022c8:	f000 fdde 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x30);
 80022cc:	2030      	movs	r0, #48	; 0x30
 80022ce:	f000 fddb 	bl	8002e88 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 80022d2:	20e8      	movs	r0, #232	; 0xe8
 80022d4:	f000 fda2 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 80022d8:	2085      	movs	r0, #133	; 0x85
 80022da:	f000 fdd5 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x00);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 fdd2 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x78);
 80022e4:	2078      	movs	r0, #120	; 0x78
 80022e6:	f000 fdcf 	bl	8002e88 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80022ea:	20ea      	movs	r0, #234	; 0xea
 80022ec:	f000 fd96 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 fdc9 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x00);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 fdc6 	bl	8002e88 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80022fc:	20ed      	movs	r0, #237	; 0xed
 80022fe:	f000 fd8d 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	f000 fdc0 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x03);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 fdbd 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x12);
 800230e:	2012      	movs	r0, #18
 8002310:	f000 fdba 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x81);
 8002314:	2081      	movs	r0, #129	; 0x81
 8002316:	f000 fdb7 	bl	8002e88 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800231a:	20f7      	movs	r0, #247	; 0xf7
 800231c:	f000 fd7e 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8002320:	2020      	movs	r0, #32
 8002322:	f000 fdb1 	bl	8002e88 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8002326:	20c0      	movs	r0, #192	; 0xc0
 8002328:	f000 fd78 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800232c:	2023      	movs	r0, #35	; 0x23
 800232e:	f000 fdab 	bl	8002e88 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8002332:	20c1      	movs	r0, #193	; 0xc1
 8002334:	f000 fd72 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8002338:	2010      	movs	r0, #16
 800233a:	f000 fda5 	bl	8002e88 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800233e:	20c5      	movs	r0, #197	; 0xc5
 8002340:	f000 fd6c 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8002344:	203e      	movs	r0, #62	; 0x3e
 8002346:	f000 fd9f 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x28);
 800234a:	2028      	movs	r0, #40	; 0x28
 800234c:	f000 fd9c 	bl	8002e88 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8002350:	20c7      	movs	r0, #199	; 0xc7
 8002352:	f000 fd63 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8002356:	2086      	movs	r0, #134	; 0x86
 8002358:	f000 fd96 	bl	8002e88 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800235c:	2036      	movs	r0, #54	; 0x36
 800235e:	f000 fd5d 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8002362:	2048      	movs	r0, #72	; 0x48
 8002364:	f000 fd90 	bl	8002e88 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8002368:	203a      	movs	r0, #58	; 0x3a
 800236a:	f000 fd57 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800236e:	2055      	movs	r0, #85	; 0x55
 8002370:	f000 fd8a 	bl	8002e88 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8002374:	20b1      	movs	r0, #177	; 0xb1
 8002376:	f000 fd51 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 fd84 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x18);
 8002380:	2018      	movs	r0, #24
 8002382:	f000 fd81 	bl	8002e88 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8002386:	20b6      	movs	r0, #182	; 0xb6
 8002388:	f000 fd48 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800238c:	2008      	movs	r0, #8
 800238e:	f000 fd7b 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x82);
 8002392:	2082      	movs	r0, #130	; 0x82
 8002394:	f000 fd78 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x27);
 8002398:	2027      	movs	r0, #39	; 0x27
 800239a:	f000 fd75 	bl	8002e88 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800239e:	20f2      	movs	r0, #242	; 0xf2
 80023a0:	f000 fd3c 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 fd6f 	bl	8002e88 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 80023aa:	2026      	movs	r0, #38	; 0x26
 80023ac:	f000 fd36 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f000 fd69 	bl	8002e88 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 80023b6:	20e0      	movs	r0, #224	; 0xe0
 80023b8:	f000 fd30 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 80023bc:	200f      	movs	r0, #15
 80023be:	f000 fd63 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x31);
 80023c2:	2031      	movs	r0, #49	; 0x31
 80023c4:	f000 fd60 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x2B);
 80023c8:	202b      	movs	r0, #43	; 0x2b
 80023ca:	f000 fd5d 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80023ce:	200c      	movs	r0, #12
 80023d0:	f000 fd5a 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80023d4:	200e      	movs	r0, #14
 80023d6:	f000 fd57 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x08);
 80023da:	2008      	movs	r0, #8
 80023dc:	f000 fd54 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x4E);
 80023e0:	204e      	movs	r0, #78	; 0x4e
 80023e2:	f000 fd51 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0xF1);
 80023e6:	20f1      	movs	r0, #241	; 0xf1
 80023e8:	f000 fd4e 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x37);
 80023ec:	2037      	movs	r0, #55	; 0x37
 80023ee:	f000 fd4b 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x07);
 80023f2:	2007      	movs	r0, #7
 80023f4:	f000 fd48 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x10);
 80023f8:	2010      	movs	r0, #16
 80023fa:	f000 fd45 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x03);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 fd42 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8002404:	200e      	movs	r0, #14
 8002406:	f000 fd3f 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x09);
 800240a:	2009      	movs	r0, #9
 800240c:	f000 fd3c 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f000 fd39 	bl	8002e88 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8002416:	20e1      	movs	r0, #225	; 0xe1
 8002418:	f000 fd00 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 fd33 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8002422:	200e      	movs	r0, #14
 8002424:	f000 fd30 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x14);
 8002428:	2014      	movs	r0, #20
 800242a:	f000 fd2d 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x03);
 800242e:	2003      	movs	r0, #3
 8002430:	f000 fd2a 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x11);
 8002434:	2011      	movs	r0, #17
 8002436:	f000 fd27 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x07);
 800243a:	2007      	movs	r0, #7
 800243c:	f000 fd24 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x31);
 8002440:	2031      	movs	r0, #49	; 0x31
 8002442:	f000 fd21 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8002446:	20c1      	movs	r0, #193	; 0xc1
 8002448:	f000 fd1e 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x48);
 800244c:	2048      	movs	r0, #72	; 0x48
 800244e:	f000 fd1b 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x08);
 8002452:	2008      	movs	r0, #8
 8002454:	f000 fd18 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8002458:	200f      	movs	r0, #15
 800245a:	f000 fd15 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800245e:	200c      	movs	r0, #12
 8002460:	f000 fd12 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x31);
 8002464:	2031      	movs	r0, #49	; 0x31
 8002466:	f000 fd0f 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x36);
 800246a:	2036      	movs	r0, #54	; 0x36
 800246c:	f000 fd0c 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8002470:	200f      	movs	r0, #15
 8002472:	f000 fd09 	bl	8002e88 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8002476:	2011      	movs	r0, #17
 8002478:	f000 fcd0 	bl	8002e1c <_LCD_SendCommand>
	HAL_Delay(240);
 800247c:	20f0      	movs	r0, #240	; 0xf0
 800247e:	f7fe fa9d 	bl	80009bc <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8002482:	2029      	movs	r0, #41	; 0x29
 8002484:	f000 fcca 	bl	8002e1c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002488:	2000      	movs	r0, #0
 800248a:	f000 fb69 	bl	8002b60 <ILI9341_Set_Rotation>
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <ILI9341_SPI_Init+0x30>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2240      	movs	r2, #64	; 0x40
 800249e:	4013      	ands	r3, r2
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d005      	beq.n	80024b0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <ILI9341_SPI_Init+0x30>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <ILI9341_SPI_Init+0x30>)
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <ILI9341_SPI_Init+0x34>)
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <ILI9341_SPI_Init+0x34>)
 80024b6:	2110      	movs	r1, #16
 80024b8:	438a      	bics	r2, r1
 80024ba:	615a      	str	r2, [r3, #20]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	40013000 	.word	0x40013000
 80024c8:	48000800 	.word	0x48000800

080024cc <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	0005      	movs	r5, r0
 80024d4:	000c      	movs	r4, r1
 80024d6:	0010      	movs	r0, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	1c2a      	adds	r2, r5, #0
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	1c22      	adds	r2, r4, #0
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	1cbb      	adds	r3, r7, #2
 80024e8:	1c02      	adds	r2, r0, #0
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	003b      	movs	r3, r7
 80024ee:	1c0a      	adds	r2, r1, #0
 80024f0:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80024f2:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <ILI9341_Draw_Vertical_Line+0x104>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	1dba      	adds	r2, r7, #6
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d300      	bcc.n	8002502 <ILI9341_Draw_Vertical_Line+0x36>
 8002500:	e062      	b.n	80025c8 <ILI9341_Draw_Vertical_Line+0xfc>
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <ILI9341_Draw_Vertical_Line+0x108>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	1d3a      	adds	r2, r7, #4
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d25b      	bcs.n	80025c8 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	1cbb      	adds	r3, r7, #2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <ILI9341_Draw_Vertical_Line+0x108>)
 800251e:	8812      	ldrh	r2, [r2, #0]
 8002520:	b292      	uxth	r2, r2
 8002522:	4293      	cmp	r3, r2
 8002524:	db07      	blt.n	8002536 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <ILI9341_Draw_Vertical_Line+0x108>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b299      	uxth	r1, r3
 800252c:	1cbb      	adds	r3, r7, #2
 800252e:	1d3a      	adds	r2, r7, #4
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	1a8a      	subs	r2, r1, r2
 8002534:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8002536:	1d3a      	adds	r2, r7, #4
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29c      	uxth	r4, r3
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	8819      	ldrh	r1, [r3, #0]
 800254e:	1dbb      	adds	r3, r7, #6
 8002550:	8818      	ldrh	r0, [r3, #0]
 8002552:	0023      	movs	r3, r4
 8002554:	f000 f840 	bl	80025d8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8002560:	1cbb      	adds	r3, r7, #2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d00e      	beq.n	8002588 <ILI9341_Draw_Vertical_Line+0xbc>
 800256a:	1cbb      	adds	r3, r7, #2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d90a      	bls.n	8002588 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 800257a:	1cbb      	adds	r3, r7, #2
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	1cba      	adds	r2, r7, #2
 8002584:	18db      	adds	r3, r3, r3
 8002586:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8002592:	1d3a      	adds	r2, r7, #4
 8002594:	1cbb      	adds	r3, r7, #2
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	b299      	uxth	r1, r3
 800259e:	003b      	movs	r3, r7
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	1dbb      	adds	r3, r7, #6
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f898 	bl	80026dc <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 80025ac:	1cbb      	adds	r3, r7, #2
 80025ae:	881c      	ldrh	r4, [r3, #0]
 80025b0:	003b      	movs	r3, r7
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	8819      	ldrh	r1, [r3, #0]
 80025b8:	1dbb      	adds	r3, r7, #6
 80025ba:	8818      	ldrh	r0, [r3, #0]
 80025bc:	2303      	movs	r3, #3
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	0023      	movs	r3, r4
 80025c2:	f000 fb4b 	bl	8002c5c <_LCD_Write_Frame>
 80025c6:	e000      	b.n	80025ca <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80025c8:	46c0      	nop			; (mov r8, r8)
}
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	2000000a 	.word	0x2000000a

080025d8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	0005      	movs	r5, r0
 80025e0:	000c      	movs	r4, r1
 80025e2:	0010      	movs	r0, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	1c2a      	adds	r2, r5, #0
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	1c22      	adds	r2, r4, #0
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	1cbb      	adds	r3, r7, #2
 80025f4:	1c02      	adds	r2, r0, #0
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	003b      	movs	r3, r7
 80025fa:	1c0a      	adds	r2, r1, #0
 80025fc:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 80025fe:	202a      	movs	r0, #42	; 0x2a
 8002600:	f000 fc0c 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29b      	uxth	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fc3a 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(sc);
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fc34 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8002620:	1cbb      	adds	r3, r7, #2
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b29b      	uxth	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fc2c 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(ec);
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fc26 	bl	8002e88 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800263c:	202b      	movs	r0, #43	; 0x2b
 800263e:	f000 fbed 	bl	8002e1c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fc1b 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(sp);
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	0018      	movs	r0, r3
 800265a:	f000 fc15 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800265e:	003b      	movs	r3, r7
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fc0d 	bl	8002e88 <_LCD_SendData>
	_LCD_SendData(ep);
 800266e:	003b      	movs	r3, r7
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fc07 	bl	8002e88 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800267a:	202c      	movs	r0, #44	; 0x2c
 800267c:	f000 fbce 	bl	8002e1c <_LCD_SendCommand>
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bdb0      	pop	{r4, r5, r7, pc}

08002688 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af02      	add	r7, sp, #8
 800268e:	0002      	movs	r2, r0
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <ILI9341_Fill_Screen+0x4c>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <ILI9341_Fill_Screen+0x50>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2100      	movs	r1, #0
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff ff98 	bl	80025d8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <ILI9341_Fill_Screen+0x4c>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	001a      	movs	r2, r3
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <ILI9341_Fill_Screen+0x50>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4353      	muls	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	1dbb      	adds	r3, r7, #6
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	2304      	movs	r3, #4
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	000b      	movs	r3, r1
 80026c4:	2100      	movs	r1, #0
 80026c6:	2000      	movs	r0, #0
 80026c8:	f000 fac8 	bl	8002c5c <_LCD_Write_Frame>
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	2000000a 	.word	0x2000000a

080026dc <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b08f      	sub	sp, #60	; 0x3c
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	0004      	movs	r4, r0
 80026e4:	0008      	movs	r0, r1
 80026e6:	0011      	movs	r1, r2
 80026e8:	1dbb      	adds	r3, r7, #6
 80026ea:	1c22      	adds	r2, r4, #0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	1c02      	adds	r2, r0, #0
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	1cbb      	adds	r3, r7, #2
 80026f6:	1c0a      	adds	r2, r1, #0
 80026f8:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80026fa:	4bae      	ldr	r3, [pc, #696]	; (80029b4 <ILI9341_Draw_Pixel+0x2d8>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	1dba      	adds	r2, r7, #6
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d300      	bcc.n	800270a <ILI9341_Draw_Pixel+0x2e>
 8002708:	e150      	b.n	80029ac <ILI9341_Draw_Pixel+0x2d0>
 800270a:	4bab      	ldr	r3, [pc, #684]	; (80029b8 <ILI9341_Draw_Pixel+0x2dc>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	1d3a      	adds	r2, r7, #4
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d300      	bcc.n	800271a <ILI9341_Draw_Pixel+0x3e>
 8002718:	e148      	b.n	80029ac <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800271a:	4ba8      	ldr	r3, [pc, #672]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002726:	4ba6      	ldr	r3, [pc, #664]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	4ba5      	ldr	r3, [pc, #660]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800272c:	2110      	movs	r1, #16
 800272e:	438a      	bics	r2, r1
 8002730:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8002732:	220a      	movs	r2, #10
 8002734:	2100      	movs	r1, #0
 8002736:	202a      	movs	r0, #42	; 0x2a
 8002738:	f000 fbdc 	bl	8002ef4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
 8002740:	e008      	b.n	8002754 <ILI9341_Draw_Pixel+0x78>
 8002742:	4b9f      	ldr	r3, [pc, #636]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	4b9e      	ldr	r3, [pc, #632]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002748:	2110      	movs	r1, #16
 800274a:	438a      	bics	r2, r1
 800274c:	615a      	str	r2, [r3, #20]
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	3301      	adds	r3, #1
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	2b02      	cmp	r3, #2
 8002758:	ddf3      	ble.n	8002742 <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800275a:	4b98      	ldr	r3, [pc, #608]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	4b97      	ldr	r3, [pc, #604]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8002766:	4b96      	ldr	r3, [pc, #600]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	4b95      	ldr	r3, [pc, #596]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800276c:	2110      	movs	r1, #16
 800276e:	430a      	orrs	r2, r1
 8002770:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002772:	4b93      	ldr	r3, [pc, #588]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002778:	2110      	movs	r1, #16
 800277a:	438a      	bics	r2, r1
 800277c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800277e:	1dbb      	adds	r3, r7, #6
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2da      	uxtb	r2, r3
 8002788:	2114      	movs	r1, #20
 800278a:	187b      	adds	r3, r7, r1
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	187b      	adds	r3, r7, r1
 8002796:	705a      	strb	r2, [r3, #1]
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	121b      	asrs	r3, r3, #8
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	709a      	strb	r2, [r3, #2]
 80027a6:	1dbb      	adds	r3, r7, #6
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 80027b4:	1878      	adds	r0, r7, r1
 80027b6:	230a      	movs	r3, #10
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	f000 fbd4 	bl	8002f68 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80027c0:	2300      	movs	r3, #0
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
 80027c4:	e008      	b.n	80027d8 <ILI9341_Draw_Pixel+0xfc>
 80027c6:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027cc:	2110      	movs	r1, #16
 80027ce:	438a      	bics	r2, r1
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	3301      	adds	r3, #1
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	2b02      	cmp	r3, #2
 80027dc:	ddf3      	ble.n	80027c6 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80027de:	4b78      	ldr	r3, [pc, #480]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	4b77      	ldr	r3, [pc, #476]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027e4:	2110      	movs	r1, #16
 80027e6:	430a      	orrs	r2, r1
 80027e8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b73      	ldr	r3, [pc, #460]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	438a      	bics	r2, r1
 80027f4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80027f6:	4b72      	ldr	r3, [pc, #456]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	4b71      	ldr	r3, [pc, #452]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80027fc:	2110      	movs	r1, #16
 80027fe:	438a      	bics	r2, r1
 8002800:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8002802:	220a      	movs	r2, #10
 8002804:	2100      	movs	r1, #0
 8002806:	202b      	movs	r0, #43	; 0x2b
 8002808:	f000 fb74 	bl	8002ef4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002810:	e008      	b.n	8002824 <ILI9341_Draw_Pixel+0x148>
 8002812:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002818:	2110      	movs	r1, #16
 800281a:	438a      	bics	r2, r1
 800281c:	615a      	str	r2, [r3, #20]
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3301      	adds	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	2b02      	cmp	r3, #2
 8002828:	ddf3      	ble.n	8002812 <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800282a:	4b64      	ldr	r3, [pc, #400]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 8002830:	2101      	movs	r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	4b61      	ldr	r3, [pc, #388]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800283c:	2110      	movs	r1, #16
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	4b5e      	ldr	r3, [pc, #376]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002848:	2110      	movs	r1, #16
 800284a:	438a      	bics	r2, r1
 800284c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29b      	uxth	r3, r3
 8002856:	b2da      	uxtb	r2, r3
 8002858:	2110      	movs	r1, #16
 800285a:	187b      	adds	r3, r7, r1
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	187b      	adds	r3, r7, r1
 8002866:	705a      	strb	r2, [r3, #1]
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	121b      	asrs	r3, r3, #8
 8002870:	b2da      	uxtb	r2, r3
 8002872:	187b      	adds	r3, r7, r1
 8002874:	709a      	strb	r2, [r3, #2]
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	187b      	adds	r3, r7, r1
 8002882:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8002884:	1878      	adds	r0, r7, r1
 8002886:	230a      	movs	r3, #10
 8002888:	2200      	movs	r2, #0
 800288a:	2104      	movs	r1, #4
 800288c:	f000 fb6c 	bl	8002f68 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
 8002894:	e008      	b.n	80028a8 <ILI9341_Draw_Pixel+0x1cc>
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800289c:	2110      	movs	r1, #16
 800289e:	438a      	bics	r2, r1
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	3301      	adds	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	ddf3      	ble.n	8002896 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028b4:	2110      	movs	r1, #16
 80028b6:	430a      	orrs	r2, r1
 80028b8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	438a      	bics	r2, r1
 80028c4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028cc:	2110      	movs	r1, #16
 80028ce:	438a      	bics	r2, r1
 80028d0:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 80028d2:	220a      	movs	r2, #10
 80028d4:	2100      	movs	r1, #0
 80028d6:	202c      	movs	r0, #44	; 0x2c
 80028d8:	f000 fb0c 	bl	8002ef4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e008      	b.n	80028f4 <ILI9341_Draw_Pixel+0x218>
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80028e8:	2110      	movs	r1, #16
 80028ea:	438a      	bics	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	ddf3      	ble.n	80028e2 <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <ILI9341_Draw_Pixel+0x2e0>)
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800290c:	2110      	movs	r1, #16
 800290e:	430a      	orrs	r2, r1
 8002910:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002918:	2110      	movs	r1, #16
 800291a:	438a      	bics	r2, r1
 800291c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800291e:	1cbb      	adds	r3, r7, #2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29b      	uxth	r3, r3
 8002926:	b2da      	uxtb	r2, r3
 8002928:	210c      	movs	r1, #12
 800292a:	187b      	adds	r3, r7, r1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	1cbb      	adds	r3, r7, #2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	187b      	adds	r3, r7, r1
 8002936:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8002938:	1878      	adds	r0, r7, r1
 800293a:	2301      	movs	r3, #1
 800293c:	2200      	movs	r2, #0
 800293e:	2102      	movs	r1, #2
 8002940:	f000 fb12 	bl	8002f68 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	e008      	b.n	800295c <ILI9341_Draw_Pixel+0x280>
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002950:	2110      	movs	r1, #16
 8002952:	438a      	bics	r2, r1
 8002954:	615a      	str	r2, [r3, #20]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	3301      	adds	r3, #1
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b02      	cmp	r3, #2
 8002960:	ddf3      	ble.n	800294a <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e008      	b.n	800297a <ILI9341_Draw_Pixel+0x29e>
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800296e:	2110      	movs	r1, #16
 8002970:	438a      	bics	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	ddf3      	ble.n	8002968 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e008      	b.n	8002998 <ILI9341_Draw_Pixel+0x2bc>
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 800298c:	2110      	movs	r1, #16
 800298e:	438a      	bics	r2, r1
 8002990:	615a      	str	r2, [r3, #20]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	3301      	adds	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	ddf3      	ble.n	8002986 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <ILI9341_Draw_Pixel+0x2e4>)
 80029a4:	2110      	movs	r1, #16
 80029a6:	430a      	orrs	r2, r1
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	e000      	b.n	80029ae <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80029ac:	46c0      	nop			; (mov r8, r8)


}
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b00f      	add	sp, #60	; 0x3c
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	2000000a 	.word	0x2000000a
 80029bc:	48000400 	.word	0x48000400
 80029c0:	48000800 	.word	0x48000800

080029c4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	0005      	movs	r5, r0
 80029cc:	000c      	movs	r4, r1
 80029ce:	0010      	movs	r0, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	1dbb      	adds	r3, r7, #6
 80029d4:	1c2a      	adds	r2, r5, #0
 80029d6:	801a      	strh	r2, [r3, #0]
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	1c22      	adds	r2, r4, #0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	1cbb      	adds	r3, r7, #2
 80029e0:	1c02      	adds	r2, r0, #0
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	003b      	movs	r3, r7
 80029e6:	1c0a      	adds	r2, r1, #0
 80029e8:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <ILI9341_Draw_Rectangle+0x194>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	1dba      	adds	r2, r7, #6
 80029f2:	8812      	ldrh	r2, [r2, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d300      	bcc.n	80029fa <ILI9341_Draw_Rectangle+0x36>
 80029f8:	e0a9      	b.n	8002b4e <ILI9341_Draw_Rectangle+0x18a>
 80029fa:	4b58      	ldr	r3, [pc, #352]	; (8002b5c <ILI9341_Draw_Rectangle+0x198>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	1d3a      	adds	r2, r7, #4
 8002a02:	8812      	ldrh	r2, [r2, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d300      	bcc.n	8002a0a <ILI9341_Draw_Rectangle+0x46>
 8002a08:	e0a1      	b.n	8002b4e <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	18d3      	adds	r3, r2, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <ILI9341_Draw_Rectangle+0x194>)
 8002a18:	8812      	ldrh	r2, [r2, #0]
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	db07      	blt.n	8002a30 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8002a20:	4b4d      	ldr	r3, [pc, #308]	; (8002b58 <ILI9341_Draw_Rectangle+0x194>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b299      	uxth	r1, r3
 8002a26:	1cbb      	adds	r3, r7, #2
 8002a28:	1dba      	adds	r2, r7, #6
 8002a2a:	8812      	ldrh	r2, [r2, #0]
 8002a2c:	1a8a      	subs	r2, r1, r2
 8002a2e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	003b      	movs	r3, r7
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	4a47      	ldr	r2, [pc, #284]	; (8002b5c <ILI9341_Draw_Rectangle+0x198>)
 8002a3e:	8812      	ldrh	r2, [r2, #0]
 8002a40:	b292      	uxth	r2, r2
 8002a42:	4293      	cmp	r3, r2
 8002a44:	db07      	blt.n	8002a56 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <ILI9341_Draw_Rectangle+0x198>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	1d3a      	adds	r2, r7, #4
 8002a50:	8812      	ldrh	r2, [r2, #0]
 8002a52:	1a8a      	subs	r2, r1, r2
 8002a54:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8002a56:	1dba      	adds	r2, r7, #6
 8002a58:	1cbb      	adds	r3, r7, #2
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	18d3      	adds	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8002a66:	1d3a      	adds	r2, r7, #4
 8002a68:	003b      	movs	r3, r7
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	18d3      	adds	r3, r2, r3
 8002a70:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	8819      	ldrh	r1, [r3, #0]
 8002a7a:	1dbb      	adds	r3, r7, #6
 8002a7c:	8818      	ldrh	r0, [r3, #0]
 8002a7e:	0013      	movs	r3, r2
 8002a80:	0022      	movs	r2, r4
 8002a82:	f7ff fda9 	bl	80025d8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8002a86:	200e      	movs	r0, #14
 8002a88:	183b      	adds	r3, r7, r0
 8002a8a:	003a      	movs	r2, r7
 8002a8c:	1cb9      	adds	r1, r7, #2
 8002a8e:	8812      	ldrh	r2, [r2, #0]
 8002a90:	8809      	ldrh	r1, [r1, #0]
 8002a92:	434a      	muls	r2, r1
 8002a94:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8002a96:	230d      	movs	r3, #13
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d010      	beq.n	8002aca <ILI9341_Draw_Rectangle+0x106>
 8002aa8:	230e      	movs	r3, #14
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d90b      	bls.n	8002aca <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 8002ab2:	230d      	movs	r3, #13
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8002aba:	220e      	movs	r2, #14
 8002abc:	18bb      	adds	r3, r7, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	18ba      	adds	r2, r7, r2
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8002aca:	230e      	movs	r3, #14
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	881c      	ldrh	r4, [r3, #0]
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	8819      	ldrh	r1, [r3, #0]
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	8818      	ldrh	r0, [r3, #0]
 8002ade:	2324      	movs	r3, #36	; 0x24
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	0023      	movs	r3, r4
 8002ae8:	f000 f8b8 	bl	8002c5c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8002aec:	230d      	movs	r3, #13
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02c      	beq.n	8002b50 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8002af6:	1dba      	adds	r2, r7, #6
 8002af8:	1cbb      	adds	r3, r7, #2
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	18d3      	adds	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b02      	subs	r3, #2
 8002b04:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8002b06:	1d3a      	adds	r2, r7, #4
 8002b08:	003b      	movs	r3, r7
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	18d3      	adds	r3, r2, r3
 8002b10:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2420      	movs	r4, #32
 8002b18:	193a      	adds	r2, r7, r4
 8002b1a:	8812      	ldrh	r2, [r2, #0]
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	f7ff fddd 	bl	80026dc <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8002b22:	1dba      	adds	r2, r7, #6
 8002b24:	1cbb      	adds	r3, r7, #2
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8002b32:	1d3a      	adds	r2, r7, #4
 8002b34:	003b      	movs	r3, r7
 8002b36:	8812      	ldrh	r2, [r2, #0]
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	18d3      	adds	r3, r2, r3
 8002b3c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	193a      	adds	r2, r7, r4
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	0019      	movs	r1, r3
 8002b48:	f7ff fdc8 	bl	80026dc <ILI9341_Draw_Pixel>
 8002b4c:	e000      	b.n	8002b50 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8002b4e:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	2000000a 	.word	0x2000000a

08002b60 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	0002      	movs	r2, r0
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8002b6c:	240f      	movs	r4, #15
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	1dfa      	adds	r2, r7, #7
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8002b76:	2036      	movs	r0, #54	; 0x36
 8002b78:	f000 f950 	bl	8002e1c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d013      	beq.n	8002bac <ILI9341_Set_Rotation+0x4c>
 8002b84:	dc02      	bgt.n	8002b8c <ILI9341_Set_Rotation+0x2c>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002b8a:	e030      	b.n	8002bee <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d018      	beq.n	8002bc2 <ILI9341_Set_Rotation+0x62>
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d021      	beq.n	8002bd8 <ILI9341_Set_Rotation+0x78>
			break;
 8002b94:	e02b      	b.n	8002bee <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8002b96:	2048      	movs	r0, #72	; 0x48
 8002b98:	f000 f976 	bl	8002e88 <_LCD_SendData>
			LCD_WIDTH = 240;
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <ILI9341_Set_Rotation+0x98>)
 8002b9e:	22f0      	movs	r2, #240	; 0xf0
 8002ba0:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <ILI9341_Set_Rotation+0x9c>)
 8002ba4:	22a0      	movs	r2, #160	; 0xa0
 8002ba6:	0052      	lsls	r2, r2, #1
 8002ba8:	801a      	strh	r2, [r3, #0]
			break;
 8002baa:	e020      	b.n	8002bee <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8002bac:	2028      	movs	r0, #40	; 0x28
 8002bae:	f000 f96b 	bl	8002e88 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <ILI9341_Set_Rotation+0x98>)
 8002bb4:	22a0      	movs	r2, #160	; 0xa0
 8002bb6:	0052      	lsls	r2, r2, #1
 8002bb8:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <ILI9341_Set_Rotation+0x9c>)
 8002bbc:	22f0      	movs	r2, #240	; 0xf0
 8002bbe:	801a      	strh	r2, [r3, #0]
			break;
 8002bc0:	e015      	b.n	8002bee <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 8002bc2:	2088      	movs	r0, #136	; 0x88
 8002bc4:	f000 f960 	bl	8002e88 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <ILI9341_Set_Rotation+0x98>)
 8002bca:	22f0      	movs	r2, #240	; 0xf0
 8002bcc:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <ILI9341_Set_Rotation+0x9c>)
 8002bd0:	22a0      	movs	r2, #160	; 0xa0
 8002bd2:	0052      	lsls	r2, r2, #1
 8002bd4:	801a      	strh	r2, [r3, #0]
			break;
 8002bd6:	e00a      	b.n	8002bee <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8002bd8:	20e8      	movs	r0, #232	; 0xe8
 8002bda:	f000 f955 	bl	8002e88 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <ILI9341_Set_Rotation+0x98>)
 8002be0:	22a0      	movs	r2, #160	; 0xa0
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <ILI9341_Set_Rotation+0x9c>)
 8002be8:	22f0      	movs	r2, #240	; 0xf0
 8002bea:	801a      	strh	r2, [r3, #0]
			break;
 8002bec:	46c0      	nop			; (mov r8, r8)
	}
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b005      	add	sp, #20
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	2000000c 	.word	0x2000000c
 8002bfc:	2000000a 	.word	0x2000000a

08002c00 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <_LCD_Enable+0x18>)
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <_LCD_Enable+0x18>)
 8002c0a:	2120      	movs	r1, #32
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	615a      	str	r2, [r3, #20]
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	48000800 	.word	0x48000800

08002c1c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c26:	2120      	movs	r1, #32
 8002c28:	438a      	bics	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8002c2c:	20c8      	movs	r0, #200	; 0xc8
 8002c2e:	f7fd fec5 	bl	80009bc <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c38:	2110      	movs	r1, #16
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8002c3e:	20c8      	movs	r0, #200	; 0xc8
 8002c40:	f7fd febc 	bl	80009bc <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <_LCD_Reset+0x3c>)
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	615a      	str	r2, [r3, #20]
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	48000800 	.word	0x48000800

08002c5c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b095      	sub	sp, #84	; 0x54
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	0006      	movs	r6, r0
 8002c64:	0008      	movs	r0, r1
 8002c66:	0011      	movs	r1, r2
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	2218      	movs	r2, #24
 8002c6e:	4694      	mov	ip, r2
 8002c70:	44bc      	add	ip, r7
 8002c72:	4463      	add	r3, ip
 8002c74:	1c32      	adds	r2, r6, #0
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	230c      	movs	r3, #12
 8002c7a:	2218      	movs	r2, #24
 8002c7c:	4694      	mov	ip, r2
 8002c7e:	44bc      	add	ip, r7
 8002c80:	4463      	add	r3, ip
 8002c82:	1c02      	adds	r2, r0, #0
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	230a      	movs	r3, #10
 8002c88:	2218      	movs	r2, #24
 8002c8a:	4694      	mov	ip, r2
 8002c8c:	44bc      	add	ip, r7
 8002c8e:	4463      	add	r3, ip
 8002c90:	1c0a      	adds	r2, r1, #0
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	466b      	mov	r3, sp
 8002c96:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4a5b      	ldr	r2, [pc, #364]	; (8002e10 <_LCD_Write_Frame+0x1b4>)
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
 8002cac:	e002      	b.n	8002cb4 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8002cae:	4b58      	ldr	r3, [pc, #352]	; (8002e10 <_LCD_Write_Frame+0x1b4>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8002cb4:	230a      	movs	r3, #10
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	4694      	mov	ip, r2
 8002cba:	44bc      	add	ip, r7
 8002cbc:	4463      	add	r3, ip
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	231f      	movs	r3, #31
 8002cc6:	2118      	movs	r1, #24
 8002cc8:	468c      	mov	ip, r1
 8002cca:	44bc      	add	ip, r7
 8002ccc:	4463      	add	r3, ip
 8002cce:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60fa      	str	r2, [r7, #12]
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	0f52      	lsrs	r2, r2, #29
 8002ce6:	000e      	movs	r6, r1
 8002ce8:	00f6      	lsls	r6, r6, #3
 8002cea:	617e      	str	r6, [r7, #20]
 8002cec:	697e      	ldr	r6, [r7, #20]
 8002cee:	4316      	orrs	r6, r2
 8002cf0:	617e      	str	r6, [r7, #20]
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	613a      	str	r2, [r7, #16]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	6838      	ldr	r0, [r7, #0]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	0002      	movs	r2, r0
 8002d04:	0f52      	lsrs	r2, r2, #29
 8002d06:	000e      	movs	r6, r1
 8002d08:	00f5      	lsls	r5, r6, #3
 8002d0a:	4315      	orrs	r5, r2
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	00d4      	lsls	r4, r2, #3
 8002d10:	3307      	adds	r3, #7
 8002d12:	08db      	lsrs	r3, r3, #3
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	466a      	mov	r2, sp
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	469d      	mov	sp, r3
 8002d1c:	466b      	mov	r3, sp
 8002d1e:	3300      	adds	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8002d22:	2300      	movs	r3, #0
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d26:	e017      	b.n	8002d58 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8002d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	221f      	movs	r2, #31
 8002d30:	2118      	movs	r1, #24
 8002d32:	468c      	mov	ip, r1
 8002d34:	44bc      	add	ip, r7
 8002d36:	4462      	add	r2, ip
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3e:	3301      	adds	r3, #1
 8002d40:	220a      	movs	r2, #10
 8002d42:	2118      	movs	r1, #24
 8002d44:	468c      	mov	ip, r1
 8002d46:	44bc      	add	ip, r7
 8002d48:	4462      	add	r2, ip
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	b2d1      	uxtb	r1, r2
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	3302      	adds	r3, #2
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3e3      	bcc.n	8002d28 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8002d74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d78:	f7fd f9c6 	bl	8000108 <__udivsi3>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fd fa45 	bl	8000214 <__aeabi_uidivmod>
 8002d8a:	000b      	movs	r3, r1
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <_LCD_Write_Frame+0x1b8>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <_LCD_Write_Frame+0x1b8>)
 8002d94:	2101      	movs	r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002da0:	2110      	movs	r1, #16
 8002da2:	438a      	bics	r2, r1
 8002da4:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00f      	beq.n	8002dcc <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db0:	e008      	b.n	8002dc4 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8002db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002db6:	230a      	movs	r3, #10
 8002db8:	2200      	movs	r2, #0
 8002dba:	f000 f8d5 	bl	8002f68 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3f2      	bcc.n	8002db2 <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8002dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f000 f8c8 	bl	8002f68 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ddc:	e008      	b.n	8002df0 <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002de4:	2110      	movs	r1, #16
 8002de6:	438a      	bics	r2, r1
 8002de8:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	3301      	adds	r3, #1
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	ddf3      	ble.n	8002dde <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <_LCD_Write_Frame+0x1bc>)
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	615a      	str	r2, [r3, #20]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	469d      	mov	sp, r3

}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b015      	add	sp, #84	; 0x54
 8002e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	2000000e 	.word	0x2000000e
 8002e14:	48000400 	.word	0x48000400
 8002e18:	48000800 	.word	0x48000800

08002e1c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	0002      	movs	r2, r0
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e2e:	2110      	movs	r1, #16
 8002e30:	438a      	bics	r2, r1
 8002e32:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <_LCD_SendCommand+0x68>)
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <_LCD_SendCommand+0x68>)
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8002e40:	1dfb      	adds	r3, r7, #7
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2100      	movs	r1, #0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 f853 	bl	8002ef4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e008      	b.n	8002e66 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	ddf3      	ble.n	8002e54 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <_LCD_SendCommand+0x64>)
 8002e72:	2110      	movs	r1, #16
 8002e74:	430a      	orrs	r2, r1
 8002e76:	615a      	str	r2, [r3, #20]
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	48000800 	.word	0x48000800
 8002e84:	48000400 	.word	0x48000400

08002e88 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	0002      	movs	r2, r0
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <_LCD_SendData+0x64>)
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <_LCD_SendData+0x64>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <_LCD_SendData+0x68>)
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <_LCD_SendData+0x68>)
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f81d 	bl	8002ef4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e008      	b.n	8002ed2 <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <_LCD_SendData+0x68>)
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <_LCD_SendData+0x68>)
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	438a      	bics	r2, r1
 8002eca:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	ddf3      	ble.n	8002ec0 <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <_LCD_SendData+0x68>)
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <_LCD_SendData+0x68>)
 8002ede:	2110      	movs	r1, #16
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	48000400 	.word	0x48000400
 8002ef0:	48000800 	.word	0x48000800

08002ef4 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	0004      	movs	r4, r0
 8002efc:	0008      	movs	r0, r1
 8002efe:	0011      	movs	r1, r2
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	1c22      	adds	r2, r4, #0
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	1dbb      	adds	r3, r7, #6
 8002f08:	1c02      	adds	r2, r0, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	1d7b      	adds	r3, r7, #5
 8002f0e:	1c0a      	adds	r2, r1, #0
 8002f10:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e003      	b.n	8002f20 <_SPI_SendByte+0x2c>
   		asm("nop");
 8002f18:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	dbf6      	blt.n	8002f18 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <_SPI_SendByte+0x6c>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <_SPI_SendByte+0x70>)
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	e003      	b.n	8002f4c <_SPI_SendByte+0x58>
   		asm("nop");
 8002f44:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	1d7b      	adds	r3, r7, #5
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	dbf6      	blt.n	8002f44 <_SPI_SendByte+0x50>

#endif

}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b005      	add	sp, #20
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40013000 	.word	0x40013000
 8002f64:	4001300c 	.word	0x4001300c

08002f68 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	0019      	movs	r1, r3
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	1c0a      	adds	r2, r1, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e003      	b.n	8002f8c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8002f84:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbf6      	blt.n	8002f84 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8002f9a:	e01d      	b.n	8002fd8 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <_SPI_SendByteMultiByte+0xa4>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d117      	bne.n	8002fd8 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d90a      	bls.n	8002fc4 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <_SPI_SendByteMultiByte+0xa4>)
 8002fb4:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	e009      	b.n	8002fd8 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <_SPI_SendByteMultiByte+0xa8>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1de      	bne.n	8002f9c <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <_SPI_SendByteMultiByte+0xa4>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <_SPI_SendByteMultiByte+0xa4>)
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e003      	b.n	8002ff8 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 8002ff0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	1dbb      	adds	r3, r7, #6
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	dbf6      	blt.n	8002ff0 <_SPI_SendByteMultiByte+0x88>

#endif

}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b008      	add	sp, #32
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40013000 	.word	0x40013000
 8003010:	4001300c 	.word	0x4001300c

08003014 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <TSC2046_EM_GetTouchScreenState+0x10>)
 800301a:	781b      	ldrb	r3, [r3, #0]
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	20000094 	.word	0x20000094

08003028 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	0002      	movs	r2, r0
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <TSC2046_EM_ProcessEvent+0x4c>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	3300      	adds	r3, #0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d815      	bhi.n	800306a <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <TSC2046_EM_ProcessEvent+0x24>
 8003046:	2b01      	cmp	r3, #1
 8003048:	d007      	beq.n	800305a <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 800304a:	e00d      	b.n	8003068 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 800304c:	f000 f81a 	bl	8003084 <TSC2046_EM_EnableIdleState>
 8003050:	0003      	movs	r3, r0
 8003052:	001a      	movs	r2, r3
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <TSC2046_EM_ProcessEvent+0x4c>)
 8003056:	701a      	strb	r2, [r3, #0]
					break;
 8003058:	e006      	b.n	8003068 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 800305a:	f000 f80d 	bl	8003078 <TSC2046_EM_EnableConversionState>
 800305e:	0003      	movs	r3, r0
 8003060:	001a      	movs	r2, r3
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <TSC2046_EM_ProcessEvent+0x4c>)
 8003064:	701a      	strb	r2, [r3, #0]
					break;
 8003066:	46c0      	nop			; (mov r8, r8)
			break;
 8003068:	46c0      	nop			; (mov r8, r8)
	}
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b002      	add	sp, #8
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000094 	.word	0x20000094

08003078 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 800307c:	2301      	movs	r3, #1
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8003088:	2300      	movs	r3, #0
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <TSC2046_HM_Init+0x30>)
 8003096:	2200      	movs	r2, #0
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <TSC2046_HM_Init+0x30>)
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <TSC2046_HM_Init+0x34>)
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <TSC2046_HM_Init+0x30>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <TSC2046_HM_Init+0x30>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <TSC2046_HM_Init+0x30>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <TSC2046_HM_Init+0x30>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40014800 	.word	0x40014800
 80030c4:	00000fff 	.word	0x00000fff

080030c8 <TSC2046_HM_ReadAnalogInput>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_ReadAnalogInput(uint16_t Positions[2])
{
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 80030d0:	230f      	movs	r3, #15
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]

	// Read Data Bytes (2 x 8 bits)
	uint8_t tsc2046_read_xpos_data[2] = {};
	uint8_t tsc2046_read_ypos_data[2] = {};
#else
	uint16_t tsc2046_read_xpos_data = 0;
 80030d8:	230c      	movs	r3, #12
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	801a      	strh	r2, [r3, #0]
	uint16_t tsc2046_read_ypos_data = 0;
 80030e0:	230a      	movs	r3, #10
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	801a      	strh	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 80030e8:	f7ff ff94 	bl	8003014 <TSC2046_EM_GetTouchScreenState>
 80030ec:	0003      	movs	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d133      	bne.n	800315a <TSC2046_HM_ReadAnalogInput+0x92>
	{

	// Check SPI is enabled
		_EnableSPI();
 80030f2:	f000 f881 	bl	80031f8 <_EnableSPI>
			HAL_SPI_Transmit(&hspi2, tsc2046_read_ypos_cmd, 1, 1);
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else
			_SetCsPinLow();
 80030f6:	f000 f86f 	bl	80031d8 <_SetCsPinLow>
			//_WaitDelay(100);

			_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 80030fa:	2090      	movs	r0, #144	; 0x90
 80030fc:	f000 f890 	bl	8003220 <_SpiTransmit8>
			_SpiReceive16();								// dummy receive
 8003100:	f000 f8a6 	bl	8003250 <_SpiReceive16>

			//_WaitDelay(0);

			_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8003104:	2090      	movs	r0, #144	; 0x90
 8003106:	f000 f88b 	bl	8003220 <_SpiTransmit8>
			tsc2046_read_ypos_data = _SpiReceive16();		// Y POS receive
 800310a:	250a      	movs	r5, #10
 800310c:	197c      	adds	r4, r7, r5
 800310e:	f000 f89f 	bl	8003250 <_SpiReceive16>
 8003112:	0003      	movs	r3, r0
 8003114:	8023      	strh	r3, [r4, #0]

			//_WaitDelay(100);
			_SetCsPinHigh();
 8003116:	f000 f851 	bl	80031bc <_SetCsPinHigh>

			_SetCsPinLow();
 800311a:	f000 f85d 	bl	80031d8 <_SetCsPinLow>
			//_WaitDelay(100);

			_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 800311e:	20d0      	movs	r0, #208	; 0xd0
 8003120:	f000 f87e 	bl	8003220 <_SpiTransmit8>
			_SpiReceive16();								// dummy receive
 8003124:	f000 f894 	bl	8003250 <_SpiReceive16>

			//_WaitDelay(0);

			_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8003128:	20d0      	movs	r0, #208	; 0xd0
 800312a:	f000 f879 	bl	8003220 <_SpiTransmit8>
			tsc2046_read_xpos_data = _SpiReceive16();		// Y POS receive
 800312e:	260c      	movs	r6, #12
 8003130:	19bc      	adds	r4, r7, r6
 8003132:	f000 f88d 	bl	8003250 <_SpiReceive16>
 8003136:	0003      	movs	r3, r0
 8003138:	8023      	strh	r3, [r4, #0]

			//_WaitDelay(100);
			_SetCsPinHigh();
 800313a:	f000 f83f 	bl	80031bc <_SetCsPinHigh>
		    Positions[0] |= (uint16_t)tsc2046_read_ypos_data[0] << 8;
		    Positions[0] |= (uint16_t)tsc2046_read_ypos_data[1] << 0;
		#endif
#else
		#ifdef FLIP_TSC2046_COORDS
			Positions[0] = tsc2046_read_ypos_data;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	197a      	adds	r2, r7, r5
 8003142:	8812      	ldrh	r2, [r2, #0]
 8003144:	801a      	strh	r2, [r3, #0]
			Positions[1] = tsc2046_read_xpos_data;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3302      	adds	r3, #2
 800314a:	19ba      	adds	r2, r7, r6
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	801a      	strh	r2, [r3, #0]
			Positions[0] = tsc2046_read_xpos_data;
			Positions[1] = tsc2046_read_ypos_data;
		#endif
#endif

	    TSC2046_HM_ConvertToQVGA(Positions);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f813 	bl	800317e <TSC2046_HM_ConvertToQVGA>
 8003158:	e00a      	b.n	8003170 <TSC2046_HM_ReadAnalogInput+0xa8>
	}
	else
	{
	    Positions[0] = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	801a      	strh	r2, [r3, #0]
	    Positions[1] = 0;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3302      	adds	r3, #2
 8003164:	2200      	movs	r2, #0
 8003166:	801a      	strh	r2, [r3, #0]
		status = TSC2046_DATAERR;
 8003168:	230f      	movs	r3, #15
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]

}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b005      	add	sp, #20
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800317e <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA(uint16_t pos[2])
{
 800317e:	b590      	push	{r4, r7, lr}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
	//uint16_t QVGA_HORIZON = 	320;
	//uint16_t QVGA_VERTICAL = 	240;

	pos[0] /= 100;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	0018      	movs	r0, r3
 800318e:	f7fc ffbb 	bl	8000108 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	801a      	strh	r2, [r3, #0]
	pos[1] /= 100;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3302      	adds	r3, #2
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1c9c      	adds	r4, r3, #2
 80031a4:	2164      	movs	r1, #100	; 0x64
 80031a6:	0010      	movs	r0, r2
 80031a8:	f7fc ffae 	bl	8000108 <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	8023      	strh	r3, [r4, #0]

	// mag
	pos[0] *= 3.5;			// y
	pos[1] *= 3.5;			// x
*/
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b003      	add	sp, #12
 80031b8:	bd90      	pop	{r4, r7, pc}
	...

080031bc <_SetCsPinHigh>:

void _SetCsPinHigh()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <_SetCsPinHigh+0x18>)
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <_SetCsPinHigh+0x18>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0149      	lsls	r1, r1, #5
 80031ca:	430a      	orrs	r2, r1
 80031cc:	615a      	str	r2, [r3, #20]
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	48000400 	.word	0x48000400

080031d8 <_SetCsPinLow>:

void _SetCsPinLow()
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <_SetCsPinLow+0x18>)
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <_SetCsPinLow+0x18>)
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <_SetCsPinLow+0x1c>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	615a      	str	r2, [r3, #20]
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	48000400 	.word	0x48000400
 80031f4:	ffffefff 	.word	0xffffefff

080031f8 <_EnableSPI>:

void _EnableSPI()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <_EnableSPI+0x24>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d005      	beq.n	8003214 <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <_EnableSPI+0x24>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <_EnableSPI+0x24>)
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
	}

}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40003800 	.word	0x40003800

08003220 <_SpiTransmit8>:

void _SpiTransmit8(uint8_t data)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	0002      	movs	r2, r0
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <_SpiTransmit8+0x28>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d103      	bne.n	8003240 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <_SpiTransmit8+0x2c>)
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	7013      	strb	r3, [r2, #0]
	}
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40003800 	.word	0x40003800
 800324c:	4000380c 	.word	0x4000380c

08003250 <_SpiReceive16>:

uint16_t _SpiReceive16()
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 8003256:	1dbb      	adds	r3, r7, #6
 8003258:	2200      	movs	r2, #0
 800325a:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <_SpiReceive16+0x2c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	2b01      	cmp	r3, #1
 8003266:	d103      	bne.n	8003270 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <_SpiReceive16+0x2c>)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	801a      	strh	r2, [r3, #0]
	}
	return data;
 8003270:	1dbb      	adds	r3, r7, #6
 8003272:	881b      	ldrh	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40003800 	.word	0x40003800

08003280 <TSC2046_IM_PENIRQ_EXTI_Handler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_PENIRQ_EXTI_Handler()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
//	uint32_t interrupt_time = TSC2046_HW_DEBOUNCE_TIMER->CNT;

//	if( (interrupt_time - touchscreen_last_interrupt_time) > MAX_TOUCHSCREEN_DEBOUNCE_DELAY )
//	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 8003284:	2001      	movs	r0, #1
 8003286:	f7ff fecf 	bl	8003028 <TSC2046_EM_ProcessEvent>
//	}
//	touchscreen_last_interrupt_time = interrupt_time;
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <TSC2046_IM_HardwareManagerLoopHandler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_HardwareManagerLoopHandler()
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin) == 0)
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <TSC2046_IM_HardwareManagerLoopHandler+0x28>)
 8003296:	2102      	movs	r1, #2
 8003298:	0018      	movs	r0, r3
 800329a:	f7fd fe07 	bl	8000eac <HAL_GPIO_ReadPin>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d103      	bne.n	80032aa <TSC2046_IM_HardwareManagerLoopHandler+0x1a>
	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7ff fec0 	bl	8003028 <TSC2046_EM_ProcessEvent>
	}
	else
	{
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
	}
}
 80032a8:	e002      	b.n	80032b0 <TSC2046_IM_HardwareManagerLoopHandler+0x20>
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7ff febc 	bl	8003028 <TSC2046_EM_ProcessEvent>
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	48000400 	.word	0x48000400

080032bc <__errno>:
 80032bc:	4b01      	ldr	r3, [pc, #4]	; (80032c4 <__errno+0x8>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	4770      	bx	lr
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000010 	.word	0x20000010

080032c8 <__libc_init_array>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	2600      	movs	r6, #0
 80032cc:	4d0c      	ldr	r5, [pc, #48]	; (8003300 <__libc_init_array+0x38>)
 80032ce:	4c0d      	ldr	r4, [pc, #52]	; (8003304 <__libc_init_array+0x3c>)
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	42a6      	cmp	r6, r4
 80032d6:	d109      	bne.n	80032ec <__libc_init_array+0x24>
 80032d8:	2600      	movs	r6, #0
 80032da:	f000 fc3b 	bl	8003b54 <_init>
 80032de:	4d0a      	ldr	r5, [pc, #40]	; (8003308 <__libc_init_array+0x40>)
 80032e0:	4c0a      	ldr	r4, [pc, #40]	; (800330c <__libc_init_array+0x44>)
 80032e2:	1b64      	subs	r4, r4, r5
 80032e4:	10a4      	asrs	r4, r4, #2
 80032e6:	42a6      	cmp	r6, r4
 80032e8:	d105      	bne.n	80032f6 <__libc_init_array+0x2e>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	00b3      	lsls	r3, r6, #2
 80032ee:	58eb      	ldr	r3, [r5, r3]
 80032f0:	4798      	blx	r3
 80032f2:	3601      	adds	r6, #1
 80032f4:	e7ee      	b.n	80032d4 <__libc_init_array+0xc>
 80032f6:	00b3      	lsls	r3, r6, #2
 80032f8:	58eb      	ldr	r3, [r5, r3]
 80032fa:	4798      	blx	r3
 80032fc:	3601      	adds	r6, #1
 80032fe:	e7f2      	b.n	80032e6 <__libc_init_array+0x1e>
 8003300:	08003e44 	.word	0x08003e44
 8003304:	08003e44 	.word	0x08003e44
 8003308:	08003e44 	.word	0x08003e44
 800330c:	08003e48 	.word	0x08003e48

08003310 <memset>:
 8003310:	0003      	movs	r3, r0
 8003312:	1812      	adds	r2, r2, r0
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	7019      	strb	r1, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <sniprintf>:
 8003320:	b40c      	push	{r2, r3}
 8003322:	b530      	push	{r4, r5, lr}
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <sniprintf+0x60>)
 8003326:	b09d      	sub	sp, #116	; 0x74
 8003328:	1e0c      	subs	r4, r1, #0
 800332a:	681d      	ldr	r5, [r3, #0]
 800332c:	da08      	bge.n	8003340 <sniprintf+0x20>
 800332e:	238b      	movs	r3, #139	; 0x8b
 8003330:	2001      	movs	r0, #1
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	4240      	negs	r0, r0
 8003336:	b01d      	add	sp, #116	; 0x74
 8003338:	bc30      	pop	{r4, r5}
 800333a:	bc08      	pop	{r3}
 800333c:	b002      	add	sp, #8
 800333e:	4718      	bx	r3
 8003340:	2382      	movs	r3, #130	; 0x82
 8003342:	a902      	add	r1, sp, #8
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	818b      	strh	r3, [r1, #12]
 8003348:	2300      	movs	r3, #0
 800334a:	9002      	str	r0, [sp, #8]
 800334c:	6108      	str	r0, [r1, #16]
 800334e:	429c      	cmp	r4, r3
 8003350:	d000      	beq.n	8003354 <sniprintf+0x34>
 8003352:	1e63      	subs	r3, r4, #1
 8003354:	608b      	str	r3, [r1, #8]
 8003356:	614b      	str	r3, [r1, #20]
 8003358:	2301      	movs	r3, #1
 800335a:	425b      	negs	r3, r3
 800335c:	81cb      	strh	r3, [r1, #14]
 800335e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003360:	ab21      	add	r3, sp, #132	; 0x84
 8003362:	0028      	movs	r0, r5
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	f000 f86f 	bl	8003448 <_svfiprintf_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	da01      	bge.n	8003372 <sniprintf+0x52>
 800336e:	238b      	movs	r3, #139	; 0x8b
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	2c00      	cmp	r4, #0
 8003374:	d0df      	beq.n	8003336 <sniprintf+0x16>
 8003376:	2300      	movs	r3, #0
 8003378:	9a02      	ldr	r2, [sp, #8]
 800337a:	7013      	strb	r3, [r2, #0]
 800337c:	e7db      	b.n	8003336 <sniprintf+0x16>
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000010 	.word	0x20000010

08003384 <__ssputs_r>:
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	688e      	ldr	r6, [r1, #8]
 8003388:	b085      	sub	sp, #20
 800338a:	0007      	movs	r7, r0
 800338c:	000c      	movs	r4, r1
 800338e:	9203      	str	r2, [sp, #12]
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	429e      	cmp	r6, r3
 8003394:	d83c      	bhi.n	8003410 <__ssputs_r+0x8c>
 8003396:	2390      	movs	r3, #144	; 0x90
 8003398:	898a      	ldrh	r2, [r1, #12]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	421a      	tst	r2, r3
 800339e:	d034      	beq.n	800340a <__ssputs_r+0x86>
 80033a0:	2503      	movs	r5, #3
 80033a2:	6909      	ldr	r1, [r1, #16]
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	1a5b      	subs	r3, r3, r1
 80033a8:	9302      	str	r3, [sp, #8]
 80033aa:	6963      	ldr	r3, [r4, #20]
 80033ac:	9802      	ldr	r0, [sp, #8]
 80033ae:	435d      	muls	r5, r3
 80033b0:	0feb      	lsrs	r3, r5, #31
 80033b2:	195d      	adds	r5, r3, r5
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	106d      	asrs	r5, r5, #1
 80033b8:	3301      	adds	r3, #1
 80033ba:	181b      	adds	r3, r3, r0
 80033bc:	42ab      	cmp	r3, r5
 80033be:	d900      	bls.n	80033c2 <__ssputs_r+0x3e>
 80033c0:	001d      	movs	r5, r3
 80033c2:	0553      	lsls	r3, r2, #21
 80033c4:	d532      	bpl.n	800342c <__ssputs_r+0xa8>
 80033c6:	0029      	movs	r1, r5
 80033c8:	0038      	movs	r0, r7
 80033ca:	f000 fb23 	bl	8003a14 <_malloc_r>
 80033ce:	1e06      	subs	r6, r0, #0
 80033d0:	d109      	bne.n	80033e6 <__ssputs_r+0x62>
 80033d2:	230c      	movs	r3, #12
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	2001      	movs	r0, #1
 80033da:	89a2      	ldrh	r2, [r4, #12]
 80033dc:	4240      	negs	r0, r0
 80033de:	4313      	orrs	r3, r2
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	b005      	add	sp, #20
 80033e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e6:	9a02      	ldr	r2, [sp, #8]
 80033e8:	6921      	ldr	r1, [r4, #16]
 80033ea:	f000 faac 	bl	8003946 <memcpy>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <__ssputs_r+0xc0>)
 80033f2:	401a      	ands	r2, r3
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	4313      	orrs	r3, r2
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	9b02      	ldr	r3, [sp, #8]
 80033fc:	6126      	str	r6, [r4, #16]
 80033fe:	18f6      	adds	r6, r6, r3
 8003400:	6026      	str	r6, [r4, #0]
 8003402:	6165      	str	r5, [r4, #20]
 8003404:	9e01      	ldr	r6, [sp, #4]
 8003406:	1aed      	subs	r5, r5, r3
 8003408:	60a5      	str	r5, [r4, #8]
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	429e      	cmp	r6, r3
 800340e:	d900      	bls.n	8003412 <__ssputs_r+0x8e>
 8003410:	9e01      	ldr	r6, [sp, #4]
 8003412:	0032      	movs	r2, r6
 8003414:	9903      	ldr	r1, [sp, #12]
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	f000 fa9e 	bl	8003958 <memmove>
 800341c:	68a3      	ldr	r3, [r4, #8]
 800341e:	2000      	movs	r0, #0
 8003420:	1b9b      	subs	r3, r3, r6
 8003422:	60a3      	str	r3, [r4, #8]
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	199e      	adds	r6, r3, r6
 8003428:	6026      	str	r6, [r4, #0]
 800342a:	e7da      	b.n	80033e2 <__ssputs_r+0x5e>
 800342c:	002a      	movs	r2, r5
 800342e:	0038      	movs	r0, r7
 8003430:	f000 fb4e 	bl	8003ad0 <_realloc_r>
 8003434:	1e06      	subs	r6, r0, #0
 8003436:	d1e0      	bne.n	80033fa <__ssputs_r+0x76>
 8003438:	6921      	ldr	r1, [r4, #16]
 800343a:	0038      	movs	r0, r7
 800343c:	f000 faa0 	bl	8003980 <_free_r>
 8003440:	e7c7      	b.n	80033d2 <__ssputs_r+0x4e>
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	fffffb7f 	.word	0xfffffb7f

08003448 <_svfiprintf_r>:
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b0a1      	sub	sp, #132	; 0x84
 800344c:	9003      	str	r0, [sp, #12]
 800344e:	001d      	movs	r5, r3
 8003450:	898b      	ldrh	r3, [r1, #12]
 8003452:	000f      	movs	r7, r1
 8003454:	0016      	movs	r6, r2
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	d511      	bpl.n	800347e <_svfiprintf_r+0x36>
 800345a:	690b      	ldr	r3, [r1, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10e      	bne.n	800347e <_svfiprintf_r+0x36>
 8003460:	2140      	movs	r1, #64	; 0x40
 8003462:	f000 fad7 	bl	8003a14 <_malloc_r>
 8003466:	6038      	str	r0, [r7, #0]
 8003468:	6138      	str	r0, [r7, #16]
 800346a:	2800      	cmp	r0, #0
 800346c:	d105      	bne.n	800347a <_svfiprintf_r+0x32>
 800346e:	230c      	movs	r3, #12
 8003470:	9a03      	ldr	r2, [sp, #12]
 8003472:	3801      	subs	r0, #1
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	b021      	add	sp, #132	; 0x84
 8003478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	2300      	movs	r3, #0
 8003480:	ac08      	add	r4, sp, #32
 8003482:	6163      	str	r3, [r4, #20]
 8003484:	3320      	adds	r3, #32
 8003486:	7663      	strb	r3, [r4, #25]
 8003488:	3310      	adds	r3, #16
 800348a:	76a3      	strb	r3, [r4, #26]
 800348c:	9507      	str	r5, [sp, #28]
 800348e:	0035      	movs	r5, r6
 8003490:	782b      	ldrb	r3, [r5, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <_svfiprintf_r+0x52>
 8003496:	2b25      	cmp	r3, #37	; 0x25
 8003498:	d146      	bne.n	8003528 <_svfiprintf_r+0xe0>
 800349a:	1bab      	subs	r3, r5, r6
 800349c:	9305      	str	r3, [sp, #20]
 800349e:	d00c      	beq.n	80034ba <_svfiprintf_r+0x72>
 80034a0:	0032      	movs	r2, r6
 80034a2:	0039      	movs	r1, r7
 80034a4:	9803      	ldr	r0, [sp, #12]
 80034a6:	f7ff ff6d 	bl	8003384 <__ssputs_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d100      	bne.n	80034b0 <_svfiprintf_r+0x68>
 80034ae:	e0ae      	b.n	800360e <_svfiprintf_r+0x1c6>
 80034b0:	6962      	ldr	r2, [r4, #20]
 80034b2:	9b05      	ldr	r3, [sp, #20]
 80034b4:	4694      	mov	ip, r2
 80034b6:	4463      	add	r3, ip
 80034b8:	6163      	str	r3, [r4, #20]
 80034ba:	782b      	ldrb	r3, [r5, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <_svfiprintf_r+0x7a>
 80034c0:	e0a5      	b.n	800360e <_svfiprintf_r+0x1c6>
 80034c2:	2201      	movs	r2, #1
 80034c4:	2300      	movs	r3, #0
 80034c6:	4252      	negs	r2, r2
 80034c8:	6062      	str	r2, [r4, #4]
 80034ca:	a904      	add	r1, sp, #16
 80034cc:	3254      	adds	r2, #84	; 0x54
 80034ce:	1852      	adds	r2, r2, r1
 80034d0:	1c6e      	adds	r6, r5, #1
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	60e3      	str	r3, [r4, #12]
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	7013      	strb	r3, [r2, #0]
 80034da:	65a3      	str	r3, [r4, #88]	; 0x58
 80034dc:	7831      	ldrb	r1, [r6, #0]
 80034de:	2205      	movs	r2, #5
 80034e0:	4853      	ldr	r0, [pc, #332]	; (8003630 <_svfiprintf_r+0x1e8>)
 80034e2:	f000 fa25 	bl	8003930 <memchr>
 80034e6:	1c75      	adds	r5, r6, #1
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d11f      	bne.n	800352c <_svfiprintf_r+0xe4>
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	06d3      	lsls	r3, r2, #27
 80034f0:	d504      	bpl.n	80034fc <_svfiprintf_r+0xb4>
 80034f2:	2353      	movs	r3, #83	; 0x53
 80034f4:	a904      	add	r1, sp, #16
 80034f6:	185b      	adds	r3, r3, r1
 80034f8:	2120      	movs	r1, #32
 80034fa:	7019      	strb	r1, [r3, #0]
 80034fc:	0713      	lsls	r3, r2, #28
 80034fe:	d504      	bpl.n	800350a <_svfiprintf_r+0xc2>
 8003500:	2353      	movs	r3, #83	; 0x53
 8003502:	a904      	add	r1, sp, #16
 8003504:	185b      	adds	r3, r3, r1
 8003506:	212b      	movs	r1, #43	; 0x2b
 8003508:	7019      	strb	r1, [r3, #0]
 800350a:	7833      	ldrb	r3, [r6, #0]
 800350c:	2b2a      	cmp	r3, #42	; 0x2a
 800350e:	d016      	beq.n	800353e <_svfiprintf_r+0xf6>
 8003510:	0035      	movs	r5, r6
 8003512:	2100      	movs	r1, #0
 8003514:	200a      	movs	r0, #10
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	782a      	ldrb	r2, [r5, #0]
 800351a:	1c6e      	adds	r6, r5, #1
 800351c:	3a30      	subs	r2, #48	; 0x30
 800351e:	2a09      	cmp	r2, #9
 8003520:	d94e      	bls.n	80035c0 <_svfiprintf_r+0x178>
 8003522:	2900      	cmp	r1, #0
 8003524:	d018      	beq.n	8003558 <_svfiprintf_r+0x110>
 8003526:	e010      	b.n	800354a <_svfiprintf_r+0x102>
 8003528:	3501      	adds	r5, #1
 800352a:	e7b1      	b.n	8003490 <_svfiprintf_r+0x48>
 800352c:	4b40      	ldr	r3, [pc, #256]	; (8003630 <_svfiprintf_r+0x1e8>)
 800352e:	6822      	ldr	r2, [r4, #0]
 8003530:	1ac0      	subs	r0, r0, r3
 8003532:	2301      	movs	r3, #1
 8003534:	4083      	lsls	r3, r0
 8003536:	4313      	orrs	r3, r2
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	002e      	movs	r6, r5
 800353c:	e7ce      	b.n	80034dc <_svfiprintf_r+0x94>
 800353e:	9b07      	ldr	r3, [sp, #28]
 8003540:	1d19      	adds	r1, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9107      	str	r1, [sp, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db01      	blt.n	800354e <_svfiprintf_r+0x106>
 800354a:	930b      	str	r3, [sp, #44]	; 0x2c
 800354c:	e004      	b.n	8003558 <_svfiprintf_r+0x110>
 800354e:	425b      	negs	r3, r3
 8003550:	60e3      	str	r3, [r4, #12]
 8003552:	2302      	movs	r3, #2
 8003554:	4313      	orrs	r3, r2
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	782b      	ldrb	r3, [r5, #0]
 800355a:	2b2e      	cmp	r3, #46	; 0x2e
 800355c:	d10a      	bne.n	8003574 <_svfiprintf_r+0x12c>
 800355e:	786b      	ldrb	r3, [r5, #1]
 8003560:	2b2a      	cmp	r3, #42	; 0x2a
 8003562:	d135      	bne.n	80035d0 <_svfiprintf_r+0x188>
 8003564:	9b07      	ldr	r3, [sp, #28]
 8003566:	3502      	adds	r5, #2
 8003568:	1d1a      	adds	r2, r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	9207      	str	r2, [sp, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db2b      	blt.n	80035ca <_svfiprintf_r+0x182>
 8003572:	9309      	str	r3, [sp, #36]	; 0x24
 8003574:	4e2f      	ldr	r6, [pc, #188]	; (8003634 <_svfiprintf_r+0x1ec>)
 8003576:	7829      	ldrb	r1, [r5, #0]
 8003578:	2203      	movs	r2, #3
 800357a:	0030      	movs	r0, r6
 800357c:	f000 f9d8 	bl	8003930 <memchr>
 8003580:	2800      	cmp	r0, #0
 8003582:	d006      	beq.n	8003592 <_svfiprintf_r+0x14a>
 8003584:	2340      	movs	r3, #64	; 0x40
 8003586:	1b80      	subs	r0, r0, r6
 8003588:	4083      	lsls	r3, r0
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	3501      	adds	r5, #1
 800358e:	4313      	orrs	r3, r2
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	7829      	ldrb	r1, [r5, #0]
 8003594:	2206      	movs	r2, #6
 8003596:	4828      	ldr	r0, [pc, #160]	; (8003638 <_svfiprintf_r+0x1f0>)
 8003598:	1c6e      	adds	r6, r5, #1
 800359a:	7621      	strb	r1, [r4, #24]
 800359c:	f000 f9c8 	bl	8003930 <memchr>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d03c      	beq.n	800361e <_svfiprintf_r+0x1d6>
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <_svfiprintf_r+0x1f4>)
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d125      	bne.n	80035f6 <_svfiprintf_r+0x1ae>
 80035aa:	2207      	movs	r2, #7
 80035ac:	9b07      	ldr	r3, [sp, #28]
 80035ae:	3307      	adds	r3, #7
 80035b0:	4393      	bics	r3, r2
 80035b2:	3308      	adds	r3, #8
 80035b4:	9307      	str	r3, [sp, #28]
 80035b6:	6963      	ldr	r3, [r4, #20]
 80035b8:	9a04      	ldr	r2, [sp, #16]
 80035ba:	189b      	adds	r3, r3, r2
 80035bc:	6163      	str	r3, [r4, #20]
 80035be:	e766      	b.n	800348e <_svfiprintf_r+0x46>
 80035c0:	4343      	muls	r3, r0
 80035c2:	2101      	movs	r1, #1
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	0035      	movs	r5, r6
 80035c8:	e7a6      	b.n	8003518 <_svfiprintf_r+0xd0>
 80035ca:	2301      	movs	r3, #1
 80035cc:	425b      	negs	r3, r3
 80035ce:	e7d0      	b.n	8003572 <_svfiprintf_r+0x12a>
 80035d0:	2300      	movs	r3, #0
 80035d2:	200a      	movs	r0, #10
 80035d4:	001a      	movs	r2, r3
 80035d6:	3501      	adds	r5, #1
 80035d8:	6063      	str	r3, [r4, #4]
 80035da:	7829      	ldrb	r1, [r5, #0]
 80035dc:	1c6e      	adds	r6, r5, #1
 80035de:	3930      	subs	r1, #48	; 0x30
 80035e0:	2909      	cmp	r1, #9
 80035e2:	d903      	bls.n	80035ec <_svfiprintf_r+0x1a4>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0c5      	beq.n	8003574 <_svfiprintf_r+0x12c>
 80035e8:	9209      	str	r2, [sp, #36]	; 0x24
 80035ea:	e7c3      	b.n	8003574 <_svfiprintf_r+0x12c>
 80035ec:	4342      	muls	r2, r0
 80035ee:	2301      	movs	r3, #1
 80035f0:	1852      	adds	r2, r2, r1
 80035f2:	0035      	movs	r5, r6
 80035f4:	e7f1      	b.n	80035da <_svfiprintf_r+0x192>
 80035f6:	ab07      	add	r3, sp, #28
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	003a      	movs	r2, r7
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_svfiprintf_r+0x1f8>)
 80035fe:	0021      	movs	r1, r4
 8003600:	9803      	ldr	r0, [sp, #12]
 8003602:	e000      	b.n	8003606 <_svfiprintf_r+0x1be>
 8003604:	bf00      	nop
 8003606:	9004      	str	r0, [sp, #16]
 8003608:	9b04      	ldr	r3, [sp, #16]
 800360a:	3301      	adds	r3, #1
 800360c:	d1d3      	bne.n	80035b6 <_svfiprintf_r+0x16e>
 800360e:	89bb      	ldrh	r3, [r7, #12]
 8003610:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003612:	065b      	lsls	r3, r3, #25
 8003614:	d400      	bmi.n	8003618 <_svfiprintf_r+0x1d0>
 8003616:	e72e      	b.n	8003476 <_svfiprintf_r+0x2e>
 8003618:	2001      	movs	r0, #1
 800361a:	4240      	negs	r0, r0
 800361c:	e72b      	b.n	8003476 <_svfiprintf_r+0x2e>
 800361e:	ab07      	add	r3, sp, #28
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	003a      	movs	r2, r7
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <_svfiprintf_r+0x1f8>)
 8003626:	0021      	movs	r1, r4
 8003628:	9803      	ldr	r0, [sp, #12]
 800362a:	f000 f879 	bl	8003720 <_printf_i>
 800362e:	e7ea      	b.n	8003606 <_svfiprintf_r+0x1be>
 8003630:	08003e10 	.word	0x08003e10
 8003634:	08003e16 	.word	0x08003e16
 8003638:	08003e1a 	.word	0x08003e1a
 800363c:	00000000 	.word	0x00000000
 8003640:	08003385 	.word	0x08003385

08003644 <_printf_common>:
 8003644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003646:	0015      	movs	r5, r2
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	688a      	ldr	r2, [r1, #8]
 800364c:	690b      	ldr	r3, [r1, #16]
 800364e:	9000      	str	r0, [sp, #0]
 8003650:	000c      	movs	r4, r1
 8003652:	4293      	cmp	r3, r2
 8003654:	da00      	bge.n	8003658 <_printf_common+0x14>
 8003656:	0013      	movs	r3, r2
 8003658:	0022      	movs	r2, r4
 800365a:	602b      	str	r3, [r5, #0]
 800365c:	3243      	adds	r2, #67	; 0x43
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	2a00      	cmp	r2, #0
 8003662:	d001      	beq.n	8003668 <_printf_common+0x24>
 8003664:	3301      	adds	r3, #1
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	d502      	bpl.n	8003674 <_printf_common+0x30>
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	3302      	adds	r3, #2
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	2706      	movs	r7, #6
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	401f      	ands	r7, r3
 800367a:	d027      	beq.n	80036cc <_printf_common+0x88>
 800367c:	0023      	movs	r3, r4
 800367e:	3343      	adds	r3, #67	; 0x43
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	4193      	sbcs	r3, r2
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	0692      	lsls	r2, r2, #26
 800368a:	d430      	bmi.n	80036ee <_printf_common+0xaa>
 800368c:	0022      	movs	r2, r4
 800368e:	9901      	ldr	r1, [sp, #4]
 8003690:	3243      	adds	r2, #67	; 0x43
 8003692:	9800      	ldr	r0, [sp, #0]
 8003694:	9e08      	ldr	r6, [sp, #32]
 8003696:	47b0      	blx	r6
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d025      	beq.n	80036e8 <_printf_common+0xa4>
 800369c:	2306      	movs	r3, #6
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	682a      	ldr	r2, [r5, #0]
 80036a2:	68e1      	ldr	r1, [r4, #12]
 80036a4:	4003      	ands	r3, r0
 80036a6:	2500      	movs	r5, #0
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d103      	bne.n	80036b4 <_printf_common+0x70>
 80036ac:	1a8d      	subs	r5, r1, r2
 80036ae:	43eb      	mvns	r3, r5
 80036b0:	17db      	asrs	r3, r3, #31
 80036b2:	401d      	ands	r5, r3
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	6922      	ldr	r2, [r4, #16]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	dd01      	ble.n	80036c0 <_printf_common+0x7c>
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	18ed      	adds	r5, r5, r3
 80036c0:	2700      	movs	r7, #0
 80036c2:	42bd      	cmp	r5, r7
 80036c4:	d120      	bne.n	8003708 <_printf_common+0xc4>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e010      	b.n	80036ec <_printf_common+0xa8>
 80036ca:	3701      	adds	r7, #1
 80036cc:	68e3      	ldr	r3, [r4, #12]
 80036ce:	682a      	ldr	r2, [r5, #0]
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	42bb      	cmp	r3, r7
 80036d4:	ddd2      	ble.n	800367c <_printf_common+0x38>
 80036d6:	0022      	movs	r2, r4
 80036d8:	2301      	movs	r3, #1
 80036da:	3219      	adds	r2, #25
 80036dc:	9901      	ldr	r1, [sp, #4]
 80036de:	9800      	ldr	r0, [sp, #0]
 80036e0:	9e08      	ldr	r6, [sp, #32]
 80036e2:	47b0      	blx	r6
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d1f0      	bne.n	80036ca <_printf_common+0x86>
 80036e8:	2001      	movs	r0, #1
 80036ea:	4240      	negs	r0, r0
 80036ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036ee:	2030      	movs	r0, #48	; 0x30
 80036f0:	18e1      	adds	r1, r4, r3
 80036f2:	3143      	adds	r1, #67	; 0x43
 80036f4:	7008      	strb	r0, [r1, #0]
 80036f6:	0021      	movs	r1, r4
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	3145      	adds	r1, #69	; 0x45
 80036fc:	7809      	ldrb	r1, [r1, #0]
 80036fe:	18a2      	adds	r2, r4, r2
 8003700:	3243      	adds	r2, #67	; 0x43
 8003702:	3302      	adds	r3, #2
 8003704:	7011      	strb	r1, [r2, #0]
 8003706:	e7c1      	b.n	800368c <_printf_common+0x48>
 8003708:	0022      	movs	r2, r4
 800370a:	2301      	movs	r3, #1
 800370c:	321a      	adds	r2, #26
 800370e:	9901      	ldr	r1, [sp, #4]
 8003710:	9800      	ldr	r0, [sp, #0]
 8003712:	9e08      	ldr	r6, [sp, #32]
 8003714:	47b0      	blx	r6
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d0e6      	beq.n	80036e8 <_printf_common+0xa4>
 800371a:	3701      	adds	r7, #1
 800371c:	e7d1      	b.n	80036c2 <_printf_common+0x7e>
	...

08003720 <_printf_i>:
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	9204      	str	r2, [sp, #16]
 8003726:	000a      	movs	r2, r1
 8003728:	3243      	adds	r2, #67	; 0x43
 800372a:	9305      	str	r3, [sp, #20]
 800372c:	9003      	str	r0, [sp, #12]
 800372e:	9202      	str	r2, [sp, #8]
 8003730:	7e0a      	ldrb	r2, [r1, #24]
 8003732:	000c      	movs	r4, r1
 8003734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003736:	2a6e      	cmp	r2, #110	; 0x6e
 8003738:	d100      	bne.n	800373c <_printf_i+0x1c>
 800373a:	e086      	b.n	800384a <_printf_i+0x12a>
 800373c:	d81f      	bhi.n	800377e <_printf_i+0x5e>
 800373e:	2a63      	cmp	r2, #99	; 0x63
 8003740:	d033      	beq.n	80037aa <_printf_i+0x8a>
 8003742:	d808      	bhi.n	8003756 <_printf_i+0x36>
 8003744:	2a00      	cmp	r2, #0
 8003746:	d100      	bne.n	800374a <_printf_i+0x2a>
 8003748:	e08c      	b.n	8003864 <_printf_i+0x144>
 800374a:	2a58      	cmp	r2, #88	; 0x58
 800374c:	d04d      	beq.n	80037ea <_printf_i+0xca>
 800374e:	0025      	movs	r5, r4
 8003750:	3542      	adds	r5, #66	; 0x42
 8003752:	702a      	strb	r2, [r5, #0]
 8003754:	e030      	b.n	80037b8 <_printf_i+0x98>
 8003756:	2a64      	cmp	r2, #100	; 0x64
 8003758:	d001      	beq.n	800375e <_printf_i+0x3e>
 800375a:	2a69      	cmp	r2, #105	; 0x69
 800375c:	d1f7      	bne.n	800374e <_printf_i+0x2e>
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6825      	ldr	r5, [r4, #0]
 8003762:	1d0a      	adds	r2, r1, #4
 8003764:	0628      	lsls	r0, r5, #24
 8003766:	d529      	bpl.n	80037bc <_printf_i+0x9c>
 8003768:	6808      	ldr	r0, [r1, #0]
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	2800      	cmp	r0, #0
 800376e:	da03      	bge.n	8003778 <_printf_i+0x58>
 8003770:	232d      	movs	r3, #45	; 0x2d
 8003772:	9a02      	ldr	r2, [sp, #8]
 8003774:	4240      	negs	r0, r0
 8003776:	7013      	strb	r3, [r2, #0]
 8003778:	4e6b      	ldr	r6, [pc, #428]	; (8003928 <_printf_i+0x208>)
 800377a:	270a      	movs	r7, #10
 800377c:	e04f      	b.n	800381e <_printf_i+0xfe>
 800377e:	2a73      	cmp	r2, #115	; 0x73
 8003780:	d074      	beq.n	800386c <_printf_i+0x14c>
 8003782:	d808      	bhi.n	8003796 <_printf_i+0x76>
 8003784:	2a6f      	cmp	r2, #111	; 0x6f
 8003786:	d01f      	beq.n	80037c8 <_printf_i+0xa8>
 8003788:	2a70      	cmp	r2, #112	; 0x70
 800378a:	d1e0      	bne.n	800374e <_printf_i+0x2e>
 800378c:	2220      	movs	r2, #32
 800378e:	6809      	ldr	r1, [r1, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	6022      	str	r2, [r4, #0]
 8003794:	e003      	b.n	800379e <_printf_i+0x7e>
 8003796:	2a75      	cmp	r2, #117	; 0x75
 8003798:	d016      	beq.n	80037c8 <_printf_i+0xa8>
 800379a:	2a78      	cmp	r2, #120	; 0x78
 800379c:	d1d7      	bne.n	800374e <_printf_i+0x2e>
 800379e:	0022      	movs	r2, r4
 80037a0:	2178      	movs	r1, #120	; 0x78
 80037a2:	3245      	adds	r2, #69	; 0x45
 80037a4:	7011      	strb	r1, [r2, #0]
 80037a6:	4e61      	ldr	r6, [pc, #388]	; (800392c <_printf_i+0x20c>)
 80037a8:	e022      	b.n	80037f0 <_printf_i+0xd0>
 80037aa:	0025      	movs	r5, r4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	3542      	adds	r5, #66	; 0x42
 80037b0:	1d11      	adds	r1, r2, #4
 80037b2:	6019      	str	r1, [r3, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	702b      	strb	r3, [r5, #0]
 80037b8:	2301      	movs	r3, #1
 80037ba:	e065      	b.n	8003888 <_printf_i+0x168>
 80037bc:	6808      	ldr	r0, [r1, #0]
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	0669      	lsls	r1, r5, #25
 80037c2:	d5d3      	bpl.n	800376c <_printf_i+0x4c>
 80037c4:	b200      	sxth	r0, r0
 80037c6:	e7d1      	b.n	800376c <_printf_i+0x4c>
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	1d08      	adds	r0, r1, #4
 80037ce:	6018      	str	r0, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	062e      	lsls	r6, r5, #24
 80037d4:	d505      	bpl.n	80037e2 <_printf_i+0xc2>
 80037d6:	4e54      	ldr	r6, [pc, #336]	; (8003928 <_printf_i+0x208>)
 80037d8:	2708      	movs	r7, #8
 80037da:	2a6f      	cmp	r2, #111	; 0x6f
 80037dc:	d01b      	beq.n	8003816 <_printf_i+0xf6>
 80037de:	270a      	movs	r7, #10
 80037e0:	e019      	b.n	8003816 <_printf_i+0xf6>
 80037e2:	066d      	lsls	r5, r5, #25
 80037e4:	d5f7      	bpl.n	80037d6 <_printf_i+0xb6>
 80037e6:	b280      	uxth	r0, r0
 80037e8:	e7f5      	b.n	80037d6 <_printf_i+0xb6>
 80037ea:	3145      	adds	r1, #69	; 0x45
 80037ec:	4e4e      	ldr	r6, [pc, #312]	; (8003928 <_printf_i+0x208>)
 80037ee:	700a      	strb	r2, [r1, #0]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	1d01      	adds	r1, r0, #4
 80037f6:	6800      	ldr	r0, [r0, #0]
 80037f8:	6019      	str	r1, [r3, #0]
 80037fa:	0615      	lsls	r5, r2, #24
 80037fc:	d521      	bpl.n	8003842 <_printf_i+0x122>
 80037fe:	07d3      	lsls	r3, r2, #31
 8003800:	d502      	bpl.n	8003808 <_printf_i+0xe8>
 8003802:	2320      	movs	r3, #32
 8003804:	431a      	orrs	r2, r3
 8003806:	6022      	str	r2, [r4, #0]
 8003808:	2710      	movs	r7, #16
 800380a:	2800      	cmp	r0, #0
 800380c:	d103      	bne.n	8003816 <_printf_i+0xf6>
 800380e:	2320      	movs	r3, #32
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	439a      	bics	r2, r3
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	0023      	movs	r3, r4
 8003818:	2200      	movs	r2, #0
 800381a:	3343      	adds	r3, #67	; 0x43
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	60a3      	str	r3, [r4, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	db58      	blt.n	80038d8 <_printf_i+0x1b8>
 8003826:	2204      	movs	r2, #4
 8003828:	6821      	ldr	r1, [r4, #0]
 800382a:	4391      	bics	r1, r2
 800382c:	6021      	str	r1, [r4, #0]
 800382e:	2800      	cmp	r0, #0
 8003830:	d154      	bne.n	80038dc <_printf_i+0x1bc>
 8003832:	9d02      	ldr	r5, [sp, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d05a      	beq.n	80038ee <_printf_i+0x1ce>
 8003838:	0025      	movs	r5, r4
 800383a:	7833      	ldrb	r3, [r6, #0]
 800383c:	3542      	adds	r5, #66	; 0x42
 800383e:	702b      	strb	r3, [r5, #0]
 8003840:	e055      	b.n	80038ee <_printf_i+0x1ce>
 8003842:	0655      	lsls	r5, r2, #25
 8003844:	d5db      	bpl.n	80037fe <_printf_i+0xde>
 8003846:	b280      	uxth	r0, r0
 8003848:	e7d9      	b.n	80037fe <_printf_i+0xde>
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	680d      	ldr	r5, [r1, #0]
 800384e:	1d10      	adds	r0, r2, #4
 8003850:	6949      	ldr	r1, [r1, #20]
 8003852:	6018      	str	r0, [r3, #0]
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	062e      	lsls	r6, r5, #24
 8003858:	d501      	bpl.n	800385e <_printf_i+0x13e>
 800385a:	6019      	str	r1, [r3, #0]
 800385c:	e002      	b.n	8003864 <_printf_i+0x144>
 800385e:	066d      	lsls	r5, r5, #25
 8003860:	d5fb      	bpl.n	800385a <_printf_i+0x13a>
 8003862:	8019      	strh	r1, [r3, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	9d02      	ldr	r5, [sp, #8]
 8003868:	6123      	str	r3, [r4, #16]
 800386a:	e04f      	b.n	800390c <_printf_i+0x1ec>
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	1d11      	adds	r1, r2, #4
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	6815      	ldr	r5, [r2, #0]
 8003874:	2100      	movs	r1, #0
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	0028      	movs	r0, r5
 800387a:	f000 f859 	bl	8003930 <memchr>
 800387e:	2800      	cmp	r0, #0
 8003880:	d001      	beq.n	8003886 <_printf_i+0x166>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	6060      	str	r0, [r4, #4]
 8003886:	6863      	ldr	r3, [r4, #4]
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	2300      	movs	r3, #0
 800388c:	9a02      	ldr	r2, [sp, #8]
 800388e:	7013      	strb	r3, [r2, #0]
 8003890:	e03c      	b.n	800390c <_printf_i+0x1ec>
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	002a      	movs	r2, r5
 8003896:	9904      	ldr	r1, [sp, #16]
 8003898:	9803      	ldr	r0, [sp, #12]
 800389a:	9d05      	ldr	r5, [sp, #20]
 800389c:	47a8      	blx	r5
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d03e      	beq.n	8003920 <_printf_i+0x200>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	079b      	lsls	r3, r3, #30
 80038a6:	d415      	bmi.n	80038d4 <_printf_i+0x1b4>
 80038a8:	9b07      	ldr	r3, [sp, #28]
 80038aa:	68e0      	ldr	r0, [r4, #12]
 80038ac:	4298      	cmp	r0, r3
 80038ae:	da39      	bge.n	8003924 <_printf_i+0x204>
 80038b0:	0018      	movs	r0, r3
 80038b2:	e037      	b.n	8003924 <_printf_i+0x204>
 80038b4:	0022      	movs	r2, r4
 80038b6:	2301      	movs	r3, #1
 80038b8:	3219      	adds	r2, #25
 80038ba:	9904      	ldr	r1, [sp, #16]
 80038bc:	9803      	ldr	r0, [sp, #12]
 80038be:	9e05      	ldr	r6, [sp, #20]
 80038c0:	47b0      	blx	r6
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	d02c      	beq.n	8003920 <_printf_i+0x200>
 80038c6:	3501      	adds	r5, #1
 80038c8:	68e3      	ldr	r3, [r4, #12]
 80038ca:	9a07      	ldr	r2, [sp, #28]
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	dcf0      	bgt.n	80038b4 <_printf_i+0x194>
 80038d2:	e7e9      	b.n	80038a8 <_printf_i+0x188>
 80038d4:	2500      	movs	r5, #0
 80038d6:	e7f7      	b.n	80038c8 <_printf_i+0x1a8>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d0ad      	beq.n	8003838 <_printf_i+0x118>
 80038dc:	9d02      	ldr	r5, [sp, #8]
 80038de:	0039      	movs	r1, r7
 80038e0:	f7fc fc98 	bl	8000214 <__aeabi_uidivmod>
 80038e4:	5c73      	ldrb	r3, [r6, r1]
 80038e6:	3d01      	subs	r5, #1
 80038e8:	702b      	strb	r3, [r5, #0]
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1f7      	bne.n	80038de <_printf_i+0x1be>
 80038ee:	2f08      	cmp	r7, #8
 80038f0:	d109      	bne.n	8003906 <_printf_i+0x1e6>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	07db      	lsls	r3, r3, #31
 80038f6:	d506      	bpl.n	8003906 <_printf_i+0x1e6>
 80038f8:	6863      	ldr	r3, [r4, #4]
 80038fa:	6922      	ldr	r2, [r4, #16]
 80038fc:	4293      	cmp	r3, r2
 80038fe:	dc02      	bgt.n	8003906 <_printf_i+0x1e6>
 8003900:	2330      	movs	r3, #48	; 0x30
 8003902:	3d01      	subs	r5, #1
 8003904:	702b      	strb	r3, [r5, #0]
 8003906:	9b02      	ldr	r3, [sp, #8]
 8003908:	1b5b      	subs	r3, r3, r5
 800390a:	6123      	str	r3, [r4, #16]
 800390c:	9b05      	ldr	r3, [sp, #20]
 800390e:	aa07      	add	r2, sp, #28
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	0021      	movs	r1, r4
 8003914:	9b04      	ldr	r3, [sp, #16]
 8003916:	9803      	ldr	r0, [sp, #12]
 8003918:	f7ff fe94 	bl	8003644 <_printf_common>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d1b8      	bne.n	8003892 <_printf_i+0x172>
 8003920:	2001      	movs	r0, #1
 8003922:	4240      	negs	r0, r0
 8003924:	b009      	add	sp, #36	; 0x24
 8003926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003928:	08003e21 	.word	0x08003e21
 800392c:	08003e32 	.word	0x08003e32

08003930 <memchr>:
 8003930:	b2c9      	uxtb	r1, r1
 8003932:	1882      	adds	r2, r0, r2
 8003934:	4290      	cmp	r0, r2
 8003936:	d101      	bne.n	800393c <memchr+0xc>
 8003938:	2000      	movs	r0, #0
 800393a:	4770      	bx	lr
 800393c:	7803      	ldrb	r3, [r0, #0]
 800393e:	428b      	cmp	r3, r1
 8003940:	d0fb      	beq.n	800393a <memchr+0xa>
 8003942:	3001      	adds	r0, #1
 8003944:	e7f6      	b.n	8003934 <memchr+0x4>

08003946 <memcpy>:
 8003946:	2300      	movs	r3, #0
 8003948:	b510      	push	{r4, lr}
 800394a:	429a      	cmp	r2, r3
 800394c:	d100      	bne.n	8003950 <memcpy+0xa>
 800394e:	bd10      	pop	{r4, pc}
 8003950:	5ccc      	ldrb	r4, [r1, r3]
 8003952:	54c4      	strb	r4, [r0, r3]
 8003954:	3301      	adds	r3, #1
 8003956:	e7f8      	b.n	800394a <memcpy+0x4>

08003958 <memmove>:
 8003958:	b510      	push	{r4, lr}
 800395a:	4288      	cmp	r0, r1
 800395c:	d902      	bls.n	8003964 <memmove+0xc>
 800395e:	188b      	adds	r3, r1, r2
 8003960:	4298      	cmp	r0, r3
 8003962:	d303      	bcc.n	800396c <memmove+0x14>
 8003964:	2300      	movs	r3, #0
 8003966:	e007      	b.n	8003978 <memmove+0x20>
 8003968:	5c8b      	ldrb	r3, [r1, r2]
 800396a:	5483      	strb	r3, [r0, r2]
 800396c:	3a01      	subs	r2, #1
 800396e:	d2fb      	bcs.n	8003968 <memmove+0x10>
 8003970:	bd10      	pop	{r4, pc}
 8003972:	5ccc      	ldrb	r4, [r1, r3]
 8003974:	54c4      	strb	r4, [r0, r3]
 8003976:	3301      	adds	r3, #1
 8003978:	429a      	cmp	r2, r3
 800397a:	d1fa      	bne.n	8003972 <memmove+0x1a>
 800397c:	e7f8      	b.n	8003970 <memmove+0x18>
	...

08003980 <_free_r>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	0005      	movs	r5, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	d010      	beq.n	80039aa <_free_r+0x2a>
 8003988:	1f0c      	subs	r4, r1, #4
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	da00      	bge.n	8003992 <_free_r+0x12>
 8003990:	18e4      	adds	r4, r4, r3
 8003992:	0028      	movs	r0, r5
 8003994:	f000 f8d4 	bl	8003b40 <__malloc_lock>
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <_free_r+0x90>)
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <_free_r+0x2c>
 80039a0:	6063      	str	r3, [r4, #4]
 80039a2:	6014      	str	r4, [r2, #0]
 80039a4:	0028      	movs	r0, r5
 80039a6:	f000 f8cc 	bl	8003b42 <__malloc_unlock>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d909      	bls.n	80039c4 <_free_r+0x44>
 80039b0:	6821      	ldr	r1, [r4, #0]
 80039b2:	1860      	adds	r0, r4, r1
 80039b4:	4283      	cmp	r3, r0
 80039b6:	d1f3      	bne.n	80039a0 <_free_r+0x20>
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	1841      	adds	r1, r0, r1
 80039be:	6021      	str	r1, [r4, #0]
 80039c0:	e7ee      	b.n	80039a0 <_free_r+0x20>
 80039c2:	0013      	movs	r3, r2
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d001      	beq.n	80039ce <_free_r+0x4e>
 80039ca:	42a2      	cmp	r2, r4
 80039cc:	d9f9      	bls.n	80039c2 <_free_r+0x42>
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	1858      	adds	r0, r3, r1
 80039d2:	42a0      	cmp	r0, r4
 80039d4:	d10b      	bne.n	80039ee <_free_r+0x6e>
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	1809      	adds	r1, r1, r0
 80039da:	1858      	adds	r0, r3, r1
 80039dc:	6019      	str	r1, [r3, #0]
 80039de:	4282      	cmp	r2, r0
 80039e0:	d1e0      	bne.n	80039a4 <_free_r+0x24>
 80039e2:	6810      	ldr	r0, [r2, #0]
 80039e4:	6852      	ldr	r2, [r2, #4]
 80039e6:	1841      	adds	r1, r0, r1
 80039e8:	6019      	str	r1, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	e7da      	b.n	80039a4 <_free_r+0x24>
 80039ee:	42a0      	cmp	r0, r4
 80039f0:	d902      	bls.n	80039f8 <_free_r+0x78>
 80039f2:	230c      	movs	r3, #12
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	e7d5      	b.n	80039a4 <_free_r+0x24>
 80039f8:	6821      	ldr	r1, [r4, #0]
 80039fa:	1860      	adds	r0, r4, r1
 80039fc:	4282      	cmp	r2, r0
 80039fe:	d103      	bne.n	8003a08 <_free_r+0x88>
 8003a00:	6810      	ldr	r0, [r2, #0]
 8003a02:	6852      	ldr	r2, [r2, #4]
 8003a04:	1841      	adds	r1, r0, r1
 8003a06:	6021      	str	r1, [r4, #0]
 8003a08:	6062      	str	r2, [r4, #4]
 8003a0a:	605c      	str	r4, [r3, #4]
 8003a0c:	e7ca      	b.n	80039a4 <_free_r+0x24>
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	20000098 	.word	0x20000098

08003a14 <_malloc_r>:
 8003a14:	2303      	movs	r3, #3
 8003a16:	b570      	push	{r4, r5, r6, lr}
 8003a18:	1ccd      	adds	r5, r1, #3
 8003a1a:	439d      	bics	r5, r3
 8003a1c:	3508      	adds	r5, #8
 8003a1e:	0006      	movs	r6, r0
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	d21e      	bcs.n	8003a62 <_malloc_r+0x4e>
 8003a24:	250c      	movs	r5, #12
 8003a26:	42a9      	cmp	r1, r5
 8003a28:	d81d      	bhi.n	8003a66 <_malloc_r+0x52>
 8003a2a:	0030      	movs	r0, r6
 8003a2c:	f000 f888 	bl	8003b40 <__malloc_lock>
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <_malloc_r+0xb4>)
 8003a32:	6814      	ldr	r4, [r2, #0]
 8003a34:	0021      	movs	r1, r4
 8003a36:	2900      	cmp	r1, #0
 8003a38:	d119      	bne.n	8003a6e <_malloc_r+0x5a>
 8003a3a:	4c24      	ldr	r4, [pc, #144]	; (8003acc <_malloc_r+0xb8>)
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <_malloc_r+0x36>
 8003a42:	0030      	movs	r0, r6
 8003a44:	f000 f86a 	bl	8003b1c <_sbrk_r>
 8003a48:	6020      	str	r0, [r4, #0]
 8003a4a:	0029      	movs	r1, r5
 8003a4c:	0030      	movs	r0, r6
 8003a4e:	f000 f865 	bl	8003b1c <_sbrk_r>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	d12b      	bne.n	8003aae <_malloc_r+0x9a>
 8003a56:	230c      	movs	r3, #12
 8003a58:	0030      	movs	r0, r6
 8003a5a:	6033      	str	r3, [r6, #0]
 8003a5c:	f000 f871 	bl	8003b42 <__malloc_unlock>
 8003a60:	e003      	b.n	8003a6a <_malloc_r+0x56>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	dadf      	bge.n	8003a26 <_malloc_r+0x12>
 8003a66:	230c      	movs	r3, #12
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	bd70      	pop	{r4, r5, r6, pc}
 8003a6e:	680b      	ldr	r3, [r1, #0]
 8003a70:	1b5b      	subs	r3, r3, r5
 8003a72:	d419      	bmi.n	8003aa8 <_malloc_r+0x94>
 8003a74:	2b0b      	cmp	r3, #11
 8003a76:	d903      	bls.n	8003a80 <_malloc_r+0x6c>
 8003a78:	600b      	str	r3, [r1, #0]
 8003a7a:	18cc      	adds	r4, r1, r3
 8003a7c:	6025      	str	r5, [r4, #0]
 8003a7e:	e003      	b.n	8003a88 <_malloc_r+0x74>
 8003a80:	684b      	ldr	r3, [r1, #4]
 8003a82:	428c      	cmp	r4, r1
 8003a84:	d10d      	bne.n	8003aa2 <_malloc_r+0x8e>
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	0030      	movs	r0, r6
 8003a8a:	f000 f85a 	bl	8003b42 <__malloc_unlock>
 8003a8e:	0020      	movs	r0, r4
 8003a90:	2207      	movs	r2, #7
 8003a92:	300b      	adds	r0, #11
 8003a94:	1d23      	adds	r3, r4, #4
 8003a96:	4390      	bics	r0, r2
 8003a98:	1ac3      	subs	r3, r0, r3
 8003a9a:	d0e7      	beq.n	8003a6c <_malloc_r+0x58>
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	50e2      	str	r2, [r4, r3]
 8003aa0:	e7e4      	b.n	8003a6c <_malloc_r+0x58>
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	000c      	movs	r4, r1
 8003aa6:	e7ef      	b.n	8003a88 <_malloc_r+0x74>
 8003aa8:	000c      	movs	r4, r1
 8003aaa:	6849      	ldr	r1, [r1, #4]
 8003aac:	e7c3      	b.n	8003a36 <_malloc_r+0x22>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	1cc4      	adds	r4, r0, #3
 8003ab2:	439c      	bics	r4, r3
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d0e1      	beq.n	8003a7c <_malloc_r+0x68>
 8003ab8:	1a21      	subs	r1, r4, r0
 8003aba:	0030      	movs	r0, r6
 8003abc:	f000 f82e 	bl	8003b1c <_sbrk_r>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d1db      	bne.n	8003a7c <_malloc_r+0x68>
 8003ac4:	e7c7      	b.n	8003a56 <_malloc_r+0x42>
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000098 	.word	0x20000098
 8003acc:	2000009c 	.word	0x2000009c

08003ad0 <_realloc_r>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	0007      	movs	r7, r0
 8003ad4:	000d      	movs	r5, r1
 8003ad6:	0016      	movs	r6, r2
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	d105      	bne.n	8003ae8 <_realloc_r+0x18>
 8003adc:	0011      	movs	r1, r2
 8003ade:	f7ff ff99 	bl	8003a14 <_malloc_r>
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0020      	movs	r0, r4
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	d103      	bne.n	8003af4 <_realloc_r+0x24>
 8003aec:	f7ff ff48 	bl	8003980 <_free_r>
 8003af0:	0034      	movs	r4, r6
 8003af2:	e7f7      	b.n	8003ae4 <_realloc_r+0x14>
 8003af4:	f000 f826 	bl	8003b44 <_malloc_usable_size_r>
 8003af8:	002c      	movs	r4, r5
 8003afa:	42b0      	cmp	r0, r6
 8003afc:	d2f2      	bcs.n	8003ae4 <_realloc_r+0x14>
 8003afe:	0031      	movs	r1, r6
 8003b00:	0038      	movs	r0, r7
 8003b02:	f7ff ff87 	bl	8003a14 <_malloc_r>
 8003b06:	1e04      	subs	r4, r0, #0
 8003b08:	d0ec      	beq.n	8003ae4 <_realloc_r+0x14>
 8003b0a:	0029      	movs	r1, r5
 8003b0c:	0032      	movs	r2, r6
 8003b0e:	f7ff ff1a 	bl	8003946 <memcpy>
 8003b12:	0029      	movs	r1, r5
 8003b14:	0038      	movs	r0, r7
 8003b16:	f7ff ff33 	bl	8003980 <_free_r>
 8003b1a:	e7e3      	b.n	8003ae4 <_realloc_r+0x14>

08003b1c <_sbrk_r>:
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	b570      	push	{r4, r5, r6, lr}
 8003b20:	4c06      	ldr	r4, [pc, #24]	; (8003b3c <_sbrk_r+0x20>)
 8003b22:	0005      	movs	r5, r0
 8003b24:	0008      	movs	r0, r1
 8003b26:	6023      	str	r3, [r4, #0]
 8003b28:	f7fc fe38 	bl	800079c <_sbrk>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d103      	bne.n	8003b38 <_sbrk_r+0x1c>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d000      	beq.n	8003b38 <_sbrk_r+0x1c>
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	200001ac 	.word	0x200001ac

08003b40 <__malloc_lock>:
 8003b40:	4770      	bx	lr

08003b42 <__malloc_unlock>:
 8003b42:	4770      	bx	lr

08003b44 <_malloc_usable_size_r>:
 8003b44:	1f0b      	subs	r3, r1, #4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1f18      	subs	r0, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da01      	bge.n	8003b52 <_malloc_usable_size_r+0xe>
 8003b4e:	580b      	ldr	r3, [r1, r0]
 8003b50:	18c0      	adds	r0, r0, r3
 8003b52:	4770      	bx	lr

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
