/*
 * TSC2046_STM32_TaskManager.c
 *
 *  Created on: Jul 26, 2020
 *      Author: chris
 */

#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "TSC2046_STM32.h"
#include "UxManager.h"

#include <stdio.h>
#include "UserTasks.h"

#include "adc.h"


#define IMONITOR_VOLT_RATIO		0.06015		// analogue output voltage = 60.15mV/Amp

#define USE_FLOAT

#ifdef USE_FLOAT
	#define ADC_DATA_SIZE 2.0
	float final_adc_data = 0;
#else
	#define ADC_DATA_SIZE 3
	uint32_t final_adc_data = 0;
#endif // USE_FLOAT


#define ADC_TO_VOLTS_RES	0.000805	// 3.3v / 4096


uint32_t adc_data = 0;
uint8_t adc_count = 0;

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
#ifdef USE_FREERTOS

void _togglePSU()
{
	// turn on PSU
	if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_RESET);

	}
	else
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_SET);

	}
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void UserPenIrqManager()
{



	while(1)
	{
		if(myBinarySem01Handle != NULL)
		{
			osSemaphoreWait(myBinarySem01Handle, osWaitForever);

			_togglePSU();

			// update display
			//UserDisplayTask();
		}
	}
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void UserDisplayManager()
{
	osDelay(5000);
	UxDrawLayout(UxPsuDisplayLayout);


	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);

		// update display
		UserDisplayTask();

		osSemaphoreRelease(myBinarySem02Handle);
		osThreadSuspend(NULL);
	}
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void UserAdcManager()
{

	osDelay(5000);

	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);

		UserAdcTask();

		osThreadResume(DisplayTaskHandle);
		osSemaphoreRelease(myBinarySem02Handle);


	}
}



#endif

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{



	#ifdef USE_FREERTOS
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
		//xQueueGenericSendFromISR(xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition)

		osSemaphoreRelease(myBinarySem01Handle);
	#else
		TSC2046_IM_PENIRQ_EXTI_Handler();
	#endif

}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void UserDisplayTask()
{

	ILI9341_Draw_Text("PSU Display", 25, UxDisplayLayout.title_ypos, UX_H1_TXT_FGCOLOR, 2, UX_TITLE_BGCOLOR);
	ILI9341_Draw_Text("Status", 40, UxDisplayLayout.section1_heading_ypos, BLACK, 2, UX_BODY_BGCOLOR);
	ILI9341_Draw_Text("OUTPUT", 40, UxDisplayLayout.section2_heading_ypos, BLACK, 2, UX_BODY_BGCOLOR);

#ifdef USE_FREERTOS
	// make sure UserDisplayTask() is not interrupted
	EXTI->IMR &= ~(TS_IRQ_Pin);
#endif

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
	   {
		 ILI9341_Draw_Text("HIT ", 10, UxDisplayLayout.footer_ypos, UX_H1_TXT_FGCOLOR, 1, UX_TITLE_BGCOLOR);



		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
		   ILI9341_Draw_Text(pos_string, 50, UxDisplayLayout.footer_ypos, UX_H1_TXT_FGCOLOR, 1, UX_TITLE_BGCOLOR);
		 }
		 else
		 {
		   ILI9341_Draw_Text("DATAERR   ", 50, UxDisplayLayout.footer_ypos, UX_H1_TXT_FGCOLOR, 1, UX_TITLE_BGCOLOR);
		 }
	   }

	   else
	   {
		 ILI9341_Draw_Text("NONE", 10, UxDisplayLayout.footer_ypos, UX_H1_TXT_FGCOLOR, 1, UX_TITLE_BGCOLOR);
	   }

	   // update screen ON/OFF label
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
	   {
		   ILI9341_Draw_Text("ON ", 50, UxDisplayLayout.section1_line1_ypos, BLACK, 2, GREEN);
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 50, UxDisplayLayout.section1_line1_ypos, BLACK, 2, RED);
	   }

#ifdef USE_FREERTOS
		// clear bit and resume EXTI
		__HAL_GPIO_EXTI_CLEAR_IT(TS_IRQ_Pin);
		EXTI->IMR |= (TS_IRQ_Pin);
#endif

}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval
 *
 */
void UserAdcTask()
{
		// if PSU enabled
		if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
		{
			// poll PSU imonitor pin with ADC
			if(HAL_ADC_PollForConversion(&hadc, 1) == HAL_OK)
			{
			   // keep summing ADC data values until we reach ADC_DATA_SIZE, then calculate mean average.
			   if(adc_count == ADC_DATA_SIZE)
			   {

#ifdef USE_FLOAT
				   final_adc_data = (float)adc_data / ADC_DATA_SIZE;		// calculate mean average.
				   final_adc_data = final_adc_data * ADC_TO_VOLTS_RES;		// convert from 16bit ADC data to volts
#else
				   final_adc_data = adc_data / ADC_DATA_SIZE;

#endif	//USE_FLOAT
				   adc_data = 0;						// clear the total
				   adc_count = 0;
			   }

			   adc_data += HAL_ADC_GetValue(&hadc);		// sum ADC data values
			   adc_count++;
		   }
		}
		else
		{
			final_adc_data = 0;
		}

#ifdef USE_FLOAT
		char imon_string[15];
		sprintf(imon_string, "%f A", final_adc_data / IMONITOR_VOLT_RATIO);
		ILI9341_Draw_Text(imon_string, 50, UxDisplayLayout.section2_line1_ypos, BLACK, 2, UX_BODY_BGCOLOR);

		sprintf(imon_string, "(%f mV)", final_adc_data);
		ILI9341_Draw_Text(imon_string, 50, UxDisplayLayout.section2_line2_ypos, BLACK, 2, UX_BODY_BGCOLOR);
#else
		char imon_string[12];
		snprintf(imon_string, sizeof(imon_string), "%lu mV", final_adc_data / IMONITOR_VOLT_RATIO);
		ILI9341_Draw_Text(imon_string, 50, UxDisplayLayout.section2_line1_ypos, BLACK, 2, UX_BODY_BGCOLOR);
#endif	//USE_FLOAT


}
