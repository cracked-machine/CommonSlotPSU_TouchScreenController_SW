
PSUControllerF072.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080082d8  080082d8  000182d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e0  080088e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080088e0  080088e0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088e0  080088e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080088e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001e0  08008ac8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08008ac8  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106c0  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002933  00000000  00000000  000308c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00034018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a0b  00000000  00000000  00034cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb6a  00000000  00000000  0004d6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008191f  00000000  00000000  0005c22d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddb4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000ddbc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080082bc 	.word	0x080082bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	080082bc 	.word	0x080082bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f843 	bl	80014b4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff9b 	bl	8001374 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f835 	bl	80014b4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f82b 	bl	80014b4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffbd 	bl	80013ec <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffb3 	bl	80013ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_fdiv>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	0244      	lsls	r4, r0, #9
 80004a0:	b5e0      	push	{r5, r6, r7, lr}
 80004a2:	0046      	lsls	r6, r0, #1
 80004a4:	4688      	mov	r8, r1
 80004a6:	0a64      	lsrs	r4, r4, #9
 80004a8:	0e36      	lsrs	r6, r6, #24
 80004aa:	0fc7      	lsrs	r7, r0, #31
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d063      	beq.n	8000578 <__aeabi_fdiv+0xe4>
 80004b0:	2eff      	cmp	r6, #255	; 0xff
 80004b2:	d024      	beq.n	80004fe <__aeabi_fdiv+0x6a>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	00e4      	lsls	r4, r4, #3
 80004b8:	04db      	lsls	r3, r3, #19
 80004ba:	431c      	orrs	r4, r3
 80004bc:	2300      	movs	r3, #0
 80004be:	4699      	mov	r9, r3
 80004c0:	469b      	mov	fp, r3
 80004c2:	3e7f      	subs	r6, #127	; 0x7f
 80004c4:	4643      	mov	r3, r8
 80004c6:	4642      	mov	r2, r8
 80004c8:	025d      	lsls	r5, r3, #9
 80004ca:	0fd2      	lsrs	r2, r2, #31
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	0a6d      	lsrs	r5, r5, #9
 80004d0:	0e1b      	lsrs	r3, r3, #24
 80004d2:	4690      	mov	r8, r2
 80004d4:	4692      	mov	sl, r2
 80004d6:	d065      	beq.n	80005a4 <__aeabi_fdiv+0x110>
 80004d8:	2bff      	cmp	r3, #255	; 0xff
 80004da:	d055      	beq.n	8000588 <__aeabi_fdiv+0xf4>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	2100      	movs	r1, #0
 80004e0:	00ed      	lsls	r5, r5, #3
 80004e2:	04d2      	lsls	r2, r2, #19
 80004e4:	3b7f      	subs	r3, #127	; 0x7f
 80004e6:	4315      	orrs	r5, r2
 80004e8:	1af6      	subs	r6, r6, r3
 80004ea:	4643      	mov	r3, r8
 80004ec:	464a      	mov	r2, r9
 80004ee:	407b      	eors	r3, r7
 80004f0:	2a0f      	cmp	r2, #15
 80004f2:	d900      	bls.n	80004f6 <__aeabi_fdiv+0x62>
 80004f4:	e08d      	b.n	8000612 <__aeabi_fdiv+0x17e>
 80004f6:	486d      	ldr	r0, [pc, #436]	; (80006ac <__aeabi_fdiv+0x218>)
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	5882      	ldr	r2, [r0, r2]
 80004fc:	4697      	mov	pc, r2
 80004fe:	2c00      	cmp	r4, #0
 8000500:	d154      	bne.n	80005ac <__aeabi_fdiv+0x118>
 8000502:	2308      	movs	r3, #8
 8000504:	4699      	mov	r9, r3
 8000506:	3b06      	subs	r3, #6
 8000508:	26ff      	movs	r6, #255	; 0xff
 800050a:	469b      	mov	fp, r3
 800050c:	e7da      	b.n	80004c4 <__aeabi_fdiv+0x30>
 800050e:	2500      	movs	r5, #0
 8000510:	4653      	mov	r3, sl
 8000512:	2902      	cmp	r1, #2
 8000514:	d01b      	beq.n	800054e <__aeabi_fdiv+0xba>
 8000516:	2903      	cmp	r1, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fdiv+0x88>
 800051a:	e0bf      	b.n	800069c <__aeabi_fdiv+0x208>
 800051c:	2901      	cmp	r1, #1
 800051e:	d028      	beq.n	8000572 <__aeabi_fdiv+0xde>
 8000520:	0030      	movs	r0, r6
 8000522:	307f      	adds	r0, #127	; 0x7f
 8000524:	2800      	cmp	r0, #0
 8000526:	dd20      	ble.n	800056a <__aeabi_fdiv+0xd6>
 8000528:	076a      	lsls	r2, r5, #29
 800052a:	d004      	beq.n	8000536 <__aeabi_fdiv+0xa2>
 800052c:	220f      	movs	r2, #15
 800052e:	402a      	ands	r2, r5
 8000530:	2a04      	cmp	r2, #4
 8000532:	d000      	beq.n	8000536 <__aeabi_fdiv+0xa2>
 8000534:	3504      	adds	r5, #4
 8000536:	012a      	lsls	r2, r5, #4
 8000538:	d503      	bpl.n	8000542 <__aeabi_fdiv+0xae>
 800053a:	0030      	movs	r0, r6
 800053c:	4a5c      	ldr	r2, [pc, #368]	; (80006b0 <__aeabi_fdiv+0x21c>)
 800053e:	3080      	adds	r0, #128	; 0x80
 8000540:	4015      	ands	r5, r2
 8000542:	28fe      	cmp	r0, #254	; 0xfe
 8000544:	dc03      	bgt.n	800054e <__aeabi_fdiv+0xba>
 8000546:	01ac      	lsls	r4, r5, #6
 8000548:	0a64      	lsrs	r4, r4, #9
 800054a:	b2c2      	uxtb	r2, r0
 800054c:	e001      	b.n	8000552 <__aeabi_fdiv+0xbe>
 800054e:	22ff      	movs	r2, #255	; 0xff
 8000550:	2400      	movs	r4, #0
 8000552:	0264      	lsls	r4, r4, #9
 8000554:	05d2      	lsls	r2, r2, #23
 8000556:	0a60      	lsrs	r0, r4, #9
 8000558:	07db      	lsls	r3, r3, #31
 800055a:	4310      	orrs	r0, r2
 800055c:	4318      	orrs	r0, r3
 800055e:	bc3c      	pop	{r2, r3, r4, r5}
 8000560:	4690      	mov	r8, r2
 8000562:	4699      	mov	r9, r3
 8000564:	46a2      	mov	sl, r4
 8000566:	46ab      	mov	fp, r5
 8000568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056a:	2201      	movs	r2, #1
 800056c:	1a10      	subs	r0, r2, r0
 800056e:	281b      	cmp	r0, #27
 8000570:	dd7c      	ble.n	800066c <__aeabi_fdiv+0x1d8>
 8000572:	2200      	movs	r2, #0
 8000574:	2400      	movs	r4, #0
 8000576:	e7ec      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000578:	2c00      	cmp	r4, #0
 800057a:	d11d      	bne.n	80005b8 <__aeabi_fdiv+0x124>
 800057c:	2304      	movs	r3, #4
 800057e:	4699      	mov	r9, r3
 8000580:	3b03      	subs	r3, #3
 8000582:	2600      	movs	r6, #0
 8000584:	469b      	mov	fp, r3
 8000586:	e79d      	b.n	80004c4 <__aeabi_fdiv+0x30>
 8000588:	3eff      	subs	r6, #255	; 0xff
 800058a:	2d00      	cmp	r5, #0
 800058c:	d120      	bne.n	80005d0 <__aeabi_fdiv+0x13c>
 800058e:	2102      	movs	r1, #2
 8000590:	4643      	mov	r3, r8
 8000592:	464a      	mov	r2, r9
 8000594:	407b      	eors	r3, r7
 8000596:	430a      	orrs	r2, r1
 8000598:	2a0f      	cmp	r2, #15
 800059a:	d8d8      	bhi.n	800054e <__aeabi_fdiv+0xba>
 800059c:	4845      	ldr	r0, [pc, #276]	; (80006b4 <__aeabi_fdiv+0x220>)
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	5882      	ldr	r2, [r0, r2]
 80005a2:	4697      	mov	pc, r2
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d119      	bne.n	80005dc <__aeabi_fdiv+0x148>
 80005a8:	2101      	movs	r1, #1
 80005aa:	e7f1      	b.n	8000590 <__aeabi_fdiv+0xfc>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	26ff      	movs	r6, #255	; 0xff
 80005b4:	469b      	mov	fp, r3
 80005b6:	e785      	b.n	80004c4 <__aeabi_fdiv+0x30>
 80005b8:	0020      	movs	r0, r4
 80005ba:	f001 ff31 	bl	8002420 <__clzsi2>
 80005be:	2676      	movs	r6, #118	; 0x76
 80005c0:	1f43      	subs	r3, r0, #5
 80005c2:	409c      	lsls	r4, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	4276      	negs	r6, r6
 80005c8:	1a36      	subs	r6, r6, r0
 80005ca:	4699      	mov	r9, r3
 80005cc:	469b      	mov	fp, r3
 80005ce:	e779      	b.n	80004c4 <__aeabi_fdiv+0x30>
 80005d0:	464a      	mov	r2, r9
 80005d2:	2303      	movs	r3, #3
 80005d4:	431a      	orrs	r2, r3
 80005d6:	4691      	mov	r9, r2
 80005d8:	2103      	movs	r1, #3
 80005da:	e786      	b.n	80004ea <__aeabi_fdiv+0x56>
 80005dc:	0028      	movs	r0, r5
 80005de:	f001 ff1f 	bl	8002420 <__clzsi2>
 80005e2:	1f43      	subs	r3, r0, #5
 80005e4:	1836      	adds	r6, r6, r0
 80005e6:	409d      	lsls	r5, r3
 80005e8:	3676      	adds	r6, #118	; 0x76
 80005ea:	2100      	movs	r1, #0
 80005ec:	e77d      	b.n	80004ea <__aeabi_fdiv+0x56>
 80005ee:	2480      	movs	r4, #128	; 0x80
 80005f0:	2300      	movs	r3, #0
 80005f2:	03e4      	lsls	r4, r4, #15
 80005f4:	22ff      	movs	r2, #255	; 0xff
 80005f6:	e7ac      	b.n	8000552 <__aeabi_fdiv+0xbe>
 80005f8:	2500      	movs	r5, #0
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	03db      	lsls	r3, r3, #15
 80005fe:	421c      	tst	r4, r3
 8000600:	d028      	beq.n	8000654 <__aeabi_fdiv+0x1c0>
 8000602:	421d      	tst	r5, r3
 8000604:	d126      	bne.n	8000654 <__aeabi_fdiv+0x1c0>
 8000606:	432b      	orrs	r3, r5
 8000608:	025c      	lsls	r4, r3, #9
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	4643      	mov	r3, r8
 800060e:	22ff      	movs	r2, #255	; 0xff
 8000610:	e79f      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000612:	0162      	lsls	r2, r4, #5
 8000614:	016c      	lsls	r4, r5, #5
 8000616:	42a2      	cmp	r2, r4
 8000618:	d224      	bcs.n	8000664 <__aeabi_fdiv+0x1d0>
 800061a:	211b      	movs	r1, #27
 800061c:	2500      	movs	r5, #0
 800061e:	3e01      	subs	r6, #1
 8000620:	2701      	movs	r7, #1
 8000622:	0010      	movs	r0, r2
 8000624:	006d      	lsls	r5, r5, #1
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	2800      	cmp	r0, #0
 800062a:	db01      	blt.n	8000630 <__aeabi_fdiv+0x19c>
 800062c:	4294      	cmp	r4, r2
 800062e:	d801      	bhi.n	8000634 <__aeabi_fdiv+0x1a0>
 8000630:	1b12      	subs	r2, r2, r4
 8000632:	433d      	orrs	r5, r7
 8000634:	3901      	subs	r1, #1
 8000636:	2900      	cmp	r1, #0
 8000638:	d1f3      	bne.n	8000622 <__aeabi_fdiv+0x18e>
 800063a:	0014      	movs	r4, r2
 800063c:	1e62      	subs	r2, r4, #1
 800063e:	4194      	sbcs	r4, r2
 8000640:	4325      	orrs	r5, r4
 8000642:	e76d      	b.n	8000520 <__aeabi_fdiv+0x8c>
 8000644:	46ba      	mov	sl, r7
 8000646:	4659      	mov	r1, fp
 8000648:	0025      	movs	r5, r4
 800064a:	4653      	mov	r3, sl
 800064c:	2902      	cmp	r1, #2
 800064e:	d000      	beq.n	8000652 <__aeabi_fdiv+0x1be>
 8000650:	e761      	b.n	8000516 <__aeabi_fdiv+0x82>
 8000652:	e77c      	b.n	800054e <__aeabi_fdiv+0xba>
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	431c      	orrs	r4, r3
 800065a:	0264      	lsls	r4, r4, #9
 800065c:	0a64      	lsrs	r4, r4, #9
 800065e:	003b      	movs	r3, r7
 8000660:	22ff      	movs	r2, #255	; 0xff
 8000662:	e776      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000664:	1b12      	subs	r2, r2, r4
 8000666:	211a      	movs	r1, #26
 8000668:	2501      	movs	r5, #1
 800066a:	e7d9      	b.n	8000620 <__aeabi_fdiv+0x18c>
 800066c:	369e      	adds	r6, #158	; 0x9e
 800066e:	002a      	movs	r2, r5
 8000670:	40b5      	lsls	r5, r6
 8000672:	002c      	movs	r4, r5
 8000674:	40c2      	lsrs	r2, r0
 8000676:	1e65      	subs	r5, r4, #1
 8000678:	41ac      	sbcs	r4, r5
 800067a:	4314      	orrs	r4, r2
 800067c:	0762      	lsls	r2, r4, #29
 800067e:	d004      	beq.n	800068a <__aeabi_fdiv+0x1f6>
 8000680:	220f      	movs	r2, #15
 8000682:	4022      	ands	r2, r4
 8000684:	2a04      	cmp	r2, #4
 8000686:	d000      	beq.n	800068a <__aeabi_fdiv+0x1f6>
 8000688:	3404      	adds	r4, #4
 800068a:	0162      	lsls	r2, r4, #5
 800068c:	d403      	bmi.n	8000696 <__aeabi_fdiv+0x202>
 800068e:	01a4      	lsls	r4, r4, #6
 8000690:	0a64      	lsrs	r4, r4, #9
 8000692:	2200      	movs	r2, #0
 8000694:	e75d      	b.n	8000552 <__aeabi_fdiv+0xbe>
 8000696:	2201      	movs	r2, #1
 8000698:	2400      	movs	r4, #0
 800069a:	e75a      	b.n	8000552 <__aeabi_fdiv+0xbe>
 800069c:	2480      	movs	r4, #128	; 0x80
 800069e:	03e4      	lsls	r4, r4, #15
 80006a0:	432c      	orrs	r4, r5
 80006a2:	0264      	lsls	r4, r4, #9
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	22ff      	movs	r2, #255	; 0xff
 80006a8:	e753      	b.n	8000552 <__aeabi_fdiv+0xbe>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	08008334 	.word	0x08008334
 80006b0:	f7ffffff 	.word	0xf7ffffff
 80006b4:	08008374 	.word	0x08008374

080006b8 <__aeabi_ui2f>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	1e04      	subs	r4, r0, #0
 80006bc:	d034      	beq.n	8000728 <__aeabi_ui2f+0x70>
 80006be:	f001 feaf 	bl	8002420 <__clzsi2>
 80006c2:	229e      	movs	r2, #158	; 0x9e
 80006c4:	1a12      	subs	r2, r2, r0
 80006c6:	2a96      	cmp	r2, #150	; 0x96
 80006c8:	dc07      	bgt.n	80006da <__aeabi_ui2f+0x22>
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	2808      	cmp	r0, #8
 80006ce:	dd2e      	ble.n	800072e <__aeabi_ui2f+0x76>
 80006d0:	3808      	subs	r0, #8
 80006d2:	4084      	lsls	r4, r0
 80006d4:	0260      	lsls	r0, r4, #9
 80006d6:	0a40      	lsrs	r0, r0, #9
 80006d8:	e021      	b.n	800071e <__aeabi_ui2f+0x66>
 80006da:	2a99      	cmp	r2, #153	; 0x99
 80006dc:	dd09      	ble.n	80006f2 <__aeabi_ui2f+0x3a>
 80006de:	0003      	movs	r3, r0
 80006e0:	0021      	movs	r1, r4
 80006e2:	331b      	adds	r3, #27
 80006e4:	4099      	lsls	r1, r3
 80006e6:	1e4b      	subs	r3, r1, #1
 80006e8:	4199      	sbcs	r1, r3
 80006ea:	2305      	movs	r3, #5
 80006ec:	1a1b      	subs	r3, r3, r0
 80006ee:	40dc      	lsrs	r4, r3
 80006f0:	430c      	orrs	r4, r1
 80006f2:	2805      	cmp	r0, #5
 80006f4:	dd01      	ble.n	80006fa <__aeabi_ui2f+0x42>
 80006f6:	1f43      	subs	r3, r0, #5
 80006f8:	409c      	lsls	r4, r3
 80006fa:	0023      	movs	r3, r4
 80006fc:	490d      	ldr	r1, [pc, #52]	; (8000734 <__aeabi_ui2f+0x7c>)
 80006fe:	400b      	ands	r3, r1
 8000700:	0765      	lsls	r5, r4, #29
 8000702:	d009      	beq.n	8000718 <__aeabi_ui2f+0x60>
 8000704:	250f      	movs	r5, #15
 8000706:	402c      	ands	r4, r5
 8000708:	2c04      	cmp	r4, #4
 800070a:	d005      	beq.n	8000718 <__aeabi_ui2f+0x60>
 800070c:	3304      	adds	r3, #4
 800070e:	015c      	lsls	r4, r3, #5
 8000710:	d502      	bpl.n	8000718 <__aeabi_ui2f+0x60>
 8000712:	229f      	movs	r2, #159	; 0x9f
 8000714:	400b      	ands	r3, r1
 8000716:	1a12      	subs	r2, r2, r0
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	0a58      	lsrs	r0, r3, #9
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	0240      	lsls	r0, r0, #9
 8000720:	05d2      	lsls	r2, r2, #23
 8000722:	0a40      	lsrs	r0, r0, #9
 8000724:	4310      	orrs	r0, r2
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	2200      	movs	r2, #0
 800072a:	2000      	movs	r0, #0
 800072c:	e7f7      	b.n	800071e <__aeabi_ui2f+0x66>
 800072e:	0260      	lsls	r0, r4, #9
 8000730:	0a40      	lsrs	r0, r0, #9
 8000732:	e7f4      	b.n	800071e <__aeabi_ui2f+0x66>
 8000734:	fbffffff 	.word	0xfbffffff

08000738 <__aeabi_dadd>:
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073a:	464f      	mov	r7, r9
 800073c:	4646      	mov	r6, r8
 800073e:	46d6      	mov	lr, sl
 8000740:	000c      	movs	r4, r1
 8000742:	0309      	lsls	r1, r1, #12
 8000744:	b5c0      	push	{r6, r7, lr}
 8000746:	0a49      	lsrs	r1, r1, #9
 8000748:	0f47      	lsrs	r7, r0, #29
 800074a:	005e      	lsls	r6, r3, #1
 800074c:	4339      	orrs	r1, r7
 800074e:	031f      	lsls	r7, r3, #12
 8000750:	0fdb      	lsrs	r3, r3, #31
 8000752:	469c      	mov	ip, r3
 8000754:	0065      	lsls	r5, r4, #1
 8000756:	0a7b      	lsrs	r3, r7, #9
 8000758:	0f57      	lsrs	r7, r2, #29
 800075a:	431f      	orrs	r7, r3
 800075c:	0d6d      	lsrs	r5, r5, #21
 800075e:	0fe4      	lsrs	r4, r4, #31
 8000760:	0d76      	lsrs	r6, r6, #21
 8000762:	46a1      	mov	r9, r4
 8000764:	00c0      	lsls	r0, r0, #3
 8000766:	46b8      	mov	r8, r7
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	1bab      	subs	r3, r5, r6
 800076c:	4564      	cmp	r4, ip
 800076e:	d07b      	beq.n	8000868 <__aeabi_dadd+0x130>
 8000770:	2b00      	cmp	r3, #0
 8000772:	dd5f      	ble.n	8000834 <__aeabi_dadd+0xfc>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d000      	beq.n	800077a <__aeabi_dadd+0x42>
 8000778:	e0a4      	b.n	80008c4 <__aeabi_dadd+0x18c>
 800077a:	003e      	movs	r6, r7
 800077c:	4316      	orrs	r6, r2
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x4a>
 8000780:	e112      	b.n	80009a8 <__aeabi_dadd+0x270>
 8000782:	1e5e      	subs	r6, r3, #1
 8000784:	2e00      	cmp	r6, #0
 8000786:	d000      	beq.n	800078a <__aeabi_dadd+0x52>
 8000788:	e19e      	b.n	8000ac8 <__aeabi_dadd+0x390>
 800078a:	1a87      	subs	r7, r0, r2
 800078c:	4643      	mov	r3, r8
 800078e:	42b8      	cmp	r0, r7
 8000790:	4180      	sbcs	r0, r0
 8000792:	2501      	movs	r5, #1
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	4240      	negs	r0, r0
 8000798:	1a09      	subs	r1, r1, r0
 800079a:	020b      	lsls	r3, r1, #8
 800079c:	d400      	bmi.n	80007a0 <__aeabi_dadd+0x68>
 800079e:	e131      	b.n	8000a04 <__aeabi_dadd+0x2cc>
 80007a0:	0249      	lsls	r1, r1, #9
 80007a2:	0a4e      	lsrs	r6, r1, #9
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x72>
 80007a8:	e16e      	b.n	8000a88 <__aeabi_dadd+0x350>
 80007aa:	0030      	movs	r0, r6
 80007ac:	f001 fe38 	bl	8002420 <__clzsi2>
 80007b0:	0003      	movs	r3, r0
 80007b2:	3b08      	subs	r3, #8
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x82>
 80007b8:	e161      	b.n	8000a7e <__aeabi_dadd+0x346>
 80007ba:	2220      	movs	r2, #32
 80007bc:	0039      	movs	r1, r7
 80007be:	1ad2      	subs	r2, r2, r3
 80007c0:	409e      	lsls	r6, r3
 80007c2:	40d1      	lsrs	r1, r2
 80007c4:	409f      	lsls	r7, r3
 80007c6:	430e      	orrs	r6, r1
 80007c8:	429d      	cmp	r5, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0x96>
 80007cc:	e151      	b.n	8000a72 <__aeabi_dadd+0x33a>
 80007ce:	1b5d      	subs	r5, r3, r5
 80007d0:	1c6b      	adds	r3, r5, #1
 80007d2:	2b1f      	cmp	r3, #31
 80007d4:	dd00      	ble.n	80007d8 <__aeabi_dadd+0xa0>
 80007d6:	e17c      	b.n	8000ad2 <__aeabi_dadd+0x39a>
 80007d8:	2120      	movs	r1, #32
 80007da:	1ac9      	subs	r1, r1, r3
 80007dc:	003d      	movs	r5, r7
 80007de:	0030      	movs	r0, r6
 80007e0:	408f      	lsls	r7, r1
 80007e2:	4088      	lsls	r0, r1
 80007e4:	40dd      	lsrs	r5, r3
 80007e6:	1e79      	subs	r1, r7, #1
 80007e8:	418f      	sbcs	r7, r1
 80007ea:	0031      	movs	r1, r6
 80007ec:	2207      	movs	r2, #7
 80007ee:	4328      	orrs	r0, r5
 80007f0:	40d9      	lsrs	r1, r3
 80007f2:	2500      	movs	r5, #0
 80007f4:	4307      	orrs	r7, r0
 80007f6:	403a      	ands	r2, r7
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d009      	beq.n	8000810 <__aeabi_dadd+0xd8>
 80007fc:	230f      	movs	r3, #15
 80007fe:	403b      	ands	r3, r7
 8000800:	2b04      	cmp	r3, #4
 8000802:	d005      	beq.n	8000810 <__aeabi_dadd+0xd8>
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	42bb      	cmp	r3, r7
 8000808:	41bf      	sbcs	r7, r7
 800080a:	427f      	negs	r7, r7
 800080c:	19c9      	adds	r1, r1, r7
 800080e:	001f      	movs	r7, r3
 8000810:	020b      	lsls	r3, r1, #8
 8000812:	d400      	bmi.n	8000816 <__aeabi_dadd+0xde>
 8000814:	e226      	b.n	8000c64 <__aeabi_dadd+0x52c>
 8000816:	1c6a      	adds	r2, r5, #1
 8000818:	4bc6      	ldr	r3, [pc, #792]	; (8000b34 <__aeabi_dadd+0x3fc>)
 800081a:	0555      	lsls	r5, r2, #21
 800081c:	0d6d      	lsrs	r5, r5, #21
 800081e:	429a      	cmp	r2, r3
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0xec>
 8000822:	e106      	b.n	8000a32 <__aeabi_dadd+0x2fa>
 8000824:	4ac4      	ldr	r2, [pc, #784]	; (8000b38 <__aeabi_dadd+0x400>)
 8000826:	08ff      	lsrs	r7, r7, #3
 8000828:	400a      	ands	r2, r1
 800082a:	0753      	lsls	r3, r2, #29
 800082c:	0252      	lsls	r2, r2, #9
 800082e:	433b      	orrs	r3, r7
 8000830:	0b12      	lsrs	r2, r2, #12
 8000832:	e08e      	b.n	8000952 <__aeabi_dadd+0x21a>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d000      	beq.n	800083a <__aeabi_dadd+0x102>
 8000838:	e0b8      	b.n	80009ac <__aeabi_dadd+0x274>
 800083a:	1c6b      	adds	r3, r5, #1
 800083c:	055b      	lsls	r3, r3, #21
 800083e:	0d5b      	lsrs	r3, r3, #21
 8000840:	2b01      	cmp	r3, #1
 8000842:	dc00      	bgt.n	8000846 <__aeabi_dadd+0x10e>
 8000844:	e130      	b.n	8000aa8 <__aeabi_dadd+0x370>
 8000846:	1a87      	subs	r7, r0, r2
 8000848:	4643      	mov	r3, r8
 800084a:	42b8      	cmp	r0, r7
 800084c:	41b6      	sbcs	r6, r6
 800084e:	1acb      	subs	r3, r1, r3
 8000850:	4276      	negs	r6, r6
 8000852:	1b9e      	subs	r6, r3, r6
 8000854:	0233      	lsls	r3, r6, #8
 8000856:	d500      	bpl.n	800085a <__aeabi_dadd+0x122>
 8000858:	e14c      	b.n	8000af4 <__aeabi_dadd+0x3bc>
 800085a:	003b      	movs	r3, r7
 800085c:	4333      	orrs	r3, r6
 800085e:	d1a1      	bne.n	80007a4 <__aeabi_dadd+0x6c>
 8000860:	2200      	movs	r2, #0
 8000862:	2400      	movs	r4, #0
 8000864:	2500      	movs	r5, #0
 8000866:	e070      	b.n	800094a <__aeabi_dadd+0x212>
 8000868:	2b00      	cmp	r3, #0
 800086a:	dc00      	bgt.n	800086e <__aeabi_dadd+0x136>
 800086c:	e0e5      	b.n	8000a3a <__aeabi_dadd+0x302>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x13c>
 8000872:	e083      	b.n	800097c <__aeabi_dadd+0x244>
 8000874:	4eaf      	ldr	r6, [pc, #700]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000876:	42b5      	cmp	r5, r6
 8000878:	d060      	beq.n	800093c <__aeabi_dadd+0x204>
 800087a:	2680      	movs	r6, #128	; 0x80
 800087c:	0436      	lsls	r6, r6, #16
 800087e:	4337      	orrs	r7, r6
 8000880:	46b8      	mov	r8, r7
 8000882:	2b38      	cmp	r3, #56	; 0x38
 8000884:	dc00      	bgt.n	8000888 <__aeabi_dadd+0x150>
 8000886:	e13e      	b.n	8000b06 <__aeabi_dadd+0x3ce>
 8000888:	4643      	mov	r3, r8
 800088a:	4313      	orrs	r3, r2
 800088c:	001f      	movs	r7, r3
 800088e:	1e7a      	subs	r2, r7, #1
 8000890:	4197      	sbcs	r7, r2
 8000892:	183f      	adds	r7, r7, r0
 8000894:	4287      	cmp	r7, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4240      	negs	r0, r0
 800089a:	1809      	adds	r1, r1, r0
 800089c:	020b      	lsls	r3, r1, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x16a>
 80008a0:	e0b0      	b.n	8000a04 <__aeabi_dadd+0x2cc>
 80008a2:	4ba4      	ldr	r3, [pc, #656]	; (8000b34 <__aeabi_dadd+0x3fc>)
 80008a4:	3501      	adds	r5, #1
 80008a6:	429d      	cmp	r5, r3
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x174>
 80008aa:	e0c3      	b.n	8000a34 <__aeabi_dadd+0x2fc>
 80008ac:	4aa2      	ldr	r2, [pc, #648]	; (8000b38 <__aeabi_dadd+0x400>)
 80008ae:	087b      	lsrs	r3, r7, #1
 80008b0:	400a      	ands	r2, r1
 80008b2:	2101      	movs	r1, #1
 80008b4:	400f      	ands	r7, r1
 80008b6:	431f      	orrs	r7, r3
 80008b8:	0851      	lsrs	r1, r2, #1
 80008ba:	07d3      	lsls	r3, r2, #31
 80008bc:	2207      	movs	r2, #7
 80008be:	431f      	orrs	r7, r3
 80008c0:	403a      	ands	r2, r7
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0xc0>
 80008c4:	4e9b      	ldr	r6, [pc, #620]	; (8000b34 <__aeabi_dadd+0x3fc>)
 80008c6:	42b5      	cmp	r5, r6
 80008c8:	d038      	beq.n	800093c <__aeabi_dadd+0x204>
 80008ca:	2680      	movs	r6, #128	; 0x80
 80008cc:	0436      	lsls	r6, r6, #16
 80008ce:	4337      	orrs	r7, r6
 80008d0:	46b8      	mov	r8, r7
 80008d2:	2b38      	cmp	r3, #56	; 0x38
 80008d4:	dd00      	ble.n	80008d8 <__aeabi_dadd+0x1a0>
 80008d6:	e0dc      	b.n	8000a92 <__aeabi_dadd+0x35a>
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	dc00      	bgt.n	80008de <__aeabi_dadd+0x1a6>
 80008dc:	e130      	b.n	8000b40 <__aeabi_dadd+0x408>
 80008de:	001e      	movs	r6, r3
 80008e0:	4647      	mov	r7, r8
 80008e2:	3e20      	subs	r6, #32
 80008e4:	40f7      	lsrs	r7, r6
 80008e6:	46bc      	mov	ip, r7
 80008e8:	2b20      	cmp	r3, #32
 80008ea:	d004      	beq.n	80008f6 <__aeabi_dadd+0x1be>
 80008ec:	2640      	movs	r6, #64	; 0x40
 80008ee:	1af3      	subs	r3, r6, r3
 80008f0:	4646      	mov	r6, r8
 80008f2:	409e      	lsls	r6, r3
 80008f4:	4332      	orrs	r2, r6
 80008f6:	0017      	movs	r7, r2
 80008f8:	4663      	mov	r3, ip
 80008fa:	1e7a      	subs	r2, r7, #1
 80008fc:	4197      	sbcs	r7, r2
 80008fe:	431f      	orrs	r7, r3
 8000900:	e0cc      	b.n	8000a9c <__aeabi_dadd+0x364>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x1d0>
 8000906:	e204      	b.n	8000d12 <__aeabi_dadd+0x5da>
 8000908:	4643      	mov	r3, r8
 800090a:	4313      	orrs	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x1d8>
 800090e:	e159      	b.n	8000bc4 <__aeabi_dadd+0x48c>
 8000910:	074b      	lsls	r3, r1, #29
 8000912:	08c0      	lsrs	r0, r0, #3
 8000914:	4318      	orrs	r0, r3
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	08c9      	lsrs	r1, r1, #3
 800091a:	031b      	lsls	r3, r3, #12
 800091c:	4219      	tst	r1, r3
 800091e:	d008      	beq.n	8000932 <__aeabi_dadd+0x1fa>
 8000920:	4645      	mov	r5, r8
 8000922:	08ed      	lsrs	r5, r5, #3
 8000924:	421d      	tst	r5, r3
 8000926:	d104      	bne.n	8000932 <__aeabi_dadd+0x1fa>
 8000928:	4643      	mov	r3, r8
 800092a:	08d0      	lsrs	r0, r2, #3
 800092c:	0759      	lsls	r1, r3, #29
 800092e:	4308      	orrs	r0, r1
 8000930:	0029      	movs	r1, r5
 8000932:	0f42      	lsrs	r2, r0, #29
 8000934:	00c9      	lsls	r1, r1, #3
 8000936:	4d7f      	ldr	r5, [pc, #508]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000938:	4311      	orrs	r1, r2
 800093a:	00c0      	lsls	r0, r0, #3
 800093c:	074b      	lsls	r3, r1, #29
 800093e:	08ca      	lsrs	r2, r1, #3
 8000940:	497c      	ldr	r1, [pc, #496]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000942:	08c0      	lsrs	r0, r0, #3
 8000944:	4303      	orrs	r3, r0
 8000946:	428d      	cmp	r5, r1
 8000948:	d068      	beq.n	8000a1c <__aeabi_dadd+0x2e4>
 800094a:	0312      	lsls	r2, r2, #12
 800094c:	056d      	lsls	r5, r5, #21
 800094e:	0b12      	lsrs	r2, r2, #12
 8000950:	0d6d      	lsrs	r5, r5, #21
 8000952:	2100      	movs	r1, #0
 8000954:	0312      	lsls	r2, r2, #12
 8000956:	0018      	movs	r0, r3
 8000958:	0b13      	lsrs	r3, r2, #12
 800095a:	0d0a      	lsrs	r2, r1, #20
 800095c:	0512      	lsls	r2, r2, #20
 800095e:	431a      	orrs	r2, r3
 8000960:	4b76      	ldr	r3, [pc, #472]	; (8000b3c <__aeabi_dadd+0x404>)
 8000962:	052d      	lsls	r5, r5, #20
 8000964:	4013      	ands	r3, r2
 8000966:	432b      	orrs	r3, r5
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	07e4      	lsls	r4, r4, #31
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	4323      	orrs	r3, r4
 8000970:	0019      	movs	r1, r3
 8000972:	bc1c      	pop	{r2, r3, r4}
 8000974:	4690      	mov	r8, r2
 8000976:	4699      	mov	r9, r3
 8000978:	46a2      	mov	sl, r4
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	003e      	movs	r6, r7
 800097e:	4316      	orrs	r6, r2
 8000980:	d012      	beq.n	80009a8 <__aeabi_dadd+0x270>
 8000982:	1e5e      	subs	r6, r3, #1
 8000984:	2e00      	cmp	r6, #0
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x252>
 8000988:	e100      	b.n	8000b8c <__aeabi_dadd+0x454>
 800098a:	1887      	adds	r7, r0, r2
 800098c:	4287      	cmp	r7, r0
 800098e:	4180      	sbcs	r0, r0
 8000990:	4441      	add	r1, r8
 8000992:	4240      	negs	r0, r0
 8000994:	1809      	adds	r1, r1, r0
 8000996:	2501      	movs	r5, #1
 8000998:	020b      	lsls	r3, r1, #8
 800099a:	d533      	bpl.n	8000a04 <__aeabi_dadd+0x2cc>
 800099c:	2502      	movs	r5, #2
 800099e:	e785      	b.n	80008ac <__aeabi_dadd+0x174>
 80009a0:	4664      	mov	r4, ip
 80009a2:	0033      	movs	r3, r6
 80009a4:	4641      	mov	r1, r8
 80009a6:	0010      	movs	r0, r2
 80009a8:	001d      	movs	r5, r3
 80009aa:	e7c7      	b.n	800093c <__aeabi_dadd+0x204>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x27a>
 80009b0:	e0da      	b.n	8000b68 <__aeabi_dadd+0x430>
 80009b2:	000c      	movs	r4, r1
 80009b4:	4304      	orrs	r4, r0
 80009b6:	d0f3      	beq.n	80009a0 <__aeabi_dadd+0x268>
 80009b8:	1c5c      	adds	r4, r3, #1
 80009ba:	d100      	bne.n	80009be <__aeabi_dadd+0x286>
 80009bc:	e19f      	b.n	8000cfe <__aeabi_dadd+0x5c6>
 80009be:	4c5d      	ldr	r4, [pc, #372]	; (8000b34 <__aeabi_dadd+0x3fc>)
 80009c0:	42a6      	cmp	r6, r4
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x28e>
 80009c4:	e12f      	b.n	8000c26 <__aeabi_dadd+0x4ee>
 80009c6:	43db      	mvns	r3, r3
 80009c8:	2b38      	cmp	r3, #56	; 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0x296>
 80009cc:	e166      	b.n	8000c9c <__aeabi_dadd+0x564>
 80009ce:	2b1f      	cmp	r3, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x29c>
 80009d2:	e183      	b.n	8000cdc <__aeabi_dadd+0x5a4>
 80009d4:	2420      	movs	r4, #32
 80009d6:	0005      	movs	r5, r0
 80009d8:	1ae4      	subs	r4, r4, r3
 80009da:	000f      	movs	r7, r1
 80009dc:	40dd      	lsrs	r5, r3
 80009de:	40d9      	lsrs	r1, r3
 80009e0:	40a0      	lsls	r0, r4
 80009e2:	4643      	mov	r3, r8
 80009e4:	40a7      	lsls	r7, r4
 80009e6:	1a5b      	subs	r3, r3, r1
 80009e8:	1e44      	subs	r4, r0, #1
 80009ea:	41a0      	sbcs	r0, r4
 80009ec:	4698      	mov	r8, r3
 80009ee:	432f      	orrs	r7, r5
 80009f0:	4338      	orrs	r0, r7
 80009f2:	1a17      	subs	r7, r2, r0
 80009f4:	42ba      	cmp	r2, r7
 80009f6:	4192      	sbcs	r2, r2
 80009f8:	4643      	mov	r3, r8
 80009fa:	4252      	negs	r2, r2
 80009fc:	1a99      	subs	r1, r3, r2
 80009fe:	4664      	mov	r4, ip
 8000a00:	0035      	movs	r5, r6
 8000a02:	e6ca      	b.n	800079a <__aeabi_dadd+0x62>
 8000a04:	2207      	movs	r2, #7
 8000a06:	403a      	ands	r2, r7
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dadd+0x2d6>
 8000a0c:	e6f6      	b.n	80007fc <__aeabi_dadd+0xc4>
 8000a0e:	074b      	lsls	r3, r1, #29
 8000a10:	08ca      	lsrs	r2, r1, #3
 8000a12:	4948      	ldr	r1, [pc, #288]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000a14:	08ff      	lsrs	r7, r7, #3
 8000a16:	433b      	orrs	r3, r7
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d196      	bne.n	800094a <__aeabi_dadd+0x212>
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	4311      	orrs	r1, r2
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x2ec>
 8000a22:	e19e      	b.n	8000d62 <__aeabi_dadd+0x62a>
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0309      	lsls	r1, r1, #12
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	0312      	lsls	r2, r2, #12
 8000a2c:	0b12      	lsrs	r2, r2, #12
 8000a2e:	4d41      	ldr	r5, [pc, #260]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000a30:	e78f      	b.n	8000952 <__aeabi_dadd+0x21a>
 8000a32:	0015      	movs	r5, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	2300      	movs	r3, #0
 8000a38:	e78b      	b.n	8000952 <__aeabi_dadd+0x21a>
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_dadd+0x308>
 8000a3e:	e0c7      	b.n	8000bd0 <__aeabi_dadd+0x498>
 8000a40:	1c6b      	adds	r3, r5, #1
 8000a42:	055f      	lsls	r7, r3, #21
 8000a44:	0d7f      	lsrs	r7, r7, #21
 8000a46:	2f01      	cmp	r7, #1
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_dadd+0x314>
 8000a4a:	e0f1      	b.n	8000c30 <__aeabi_dadd+0x4f8>
 8000a4c:	4d39      	ldr	r5, [pc, #228]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000a4e:	42ab      	cmp	r3, r5
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x31c>
 8000a52:	e0b9      	b.n	8000bc8 <__aeabi_dadd+0x490>
 8000a54:	1885      	adds	r5, r0, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	4285      	cmp	r5, r0
 8000a5a:	4189      	sbcs	r1, r1
 8000a5c:	4442      	add	r2, r8
 8000a5e:	4249      	negs	r1, r1
 8000a60:	1851      	adds	r1, r2, r1
 8000a62:	2207      	movs	r2, #7
 8000a64:	07cf      	lsls	r7, r1, #31
 8000a66:	086d      	lsrs	r5, r5, #1
 8000a68:	432f      	orrs	r7, r5
 8000a6a:	0849      	lsrs	r1, r1, #1
 8000a6c:	403a      	ands	r2, r7
 8000a6e:	001d      	movs	r5, r3
 8000a70:	e6c2      	b.n	80007f8 <__aeabi_dadd+0xc0>
 8000a72:	2207      	movs	r2, #7
 8000a74:	4930      	ldr	r1, [pc, #192]	; (8000b38 <__aeabi_dadd+0x400>)
 8000a76:	1aed      	subs	r5, r5, r3
 8000a78:	4031      	ands	r1, r6
 8000a7a:	403a      	ands	r2, r7
 8000a7c:	e6bc      	b.n	80007f8 <__aeabi_dadd+0xc0>
 8000a7e:	003e      	movs	r6, r7
 8000a80:	3828      	subs	r0, #40	; 0x28
 8000a82:	4086      	lsls	r6, r0
 8000a84:	2700      	movs	r7, #0
 8000a86:	e69f      	b.n	80007c8 <__aeabi_dadd+0x90>
 8000a88:	0038      	movs	r0, r7
 8000a8a:	f001 fcc9 	bl	8002420 <__clzsi2>
 8000a8e:	3020      	adds	r0, #32
 8000a90:	e68e      	b.n	80007b0 <__aeabi_dadd+0x78>
 8000a92:	4643      	mov	r3, r8
 8000a94:	4313      	orrs	r3, r2
 8000a96:	001f      	movs	r7, r3
 8000a98:	1e7a      	subs	r2, r7, #1
 8000a9a:	4197      	sbcs	r7, r2
 8000a9c:	1bc7      	subs	r7, r0, r7
 8000a9e:	42b8      	cmp	r0, r7
 8000aa0:	4180      	sbcs	r0, r0
 8000aa2:	4240      	negs	r0, r0
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	e678      	b.n	800079a <__aeabi_dadd+0x62>
 8000aa8:	000e      	movs	r6, r1
 8000aaa:	003b      	movs	r3, r7
 8000aac:	4306      	orrs	r6, r0
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d161      	bne.n	8000b78 <__aeabi_dadd+0x440>
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x382>
 8000ab8:	e0f4      	b.n	8000ca4 <__aeabi_dadd+0x56c>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x388>
 8000abe:	e11b      	b.n	8000cf8 <__aeabi_dadd+0x5c0>
 8000ac0:	4664      	mov	r4, ip
 8000ac2:	0039      	movs	r1, r7
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	e739      	b.n	800093c <__aeabi_dadd+0x204>
 8000ac8:	4f1a      	ldr	r7, [pc, #104]	; (8000b34 <__aeabi_dadd+0x3fc>)
 8000aca:	42bb      	cmp	r3, r7
 8000acc:	d07a      	beq.n	8000bc4 <__aeabi_dadd+0x48c>
 8000ace:	0033      	movs	r3, r6
 8000ad0:	e6ff      	b.n	80008d2 <__aeabi_dadd+0x19a>
 8000ad2:	0030      	movs	r0, r6
 8000ad4:	3d1f      	subs	r5, #31
 8000ad6:	40e8      	lsrs	r0, r5
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d003      	beq.n	8000ae4 <__aeabi_dadd+0x3ac>
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	1acb      	subs	r3, r1, r3
 8000ae0:	409e      	lsls	r6, r3
 8000ae2:	4337      	orrs	r7, r6
 8000ae4:	1e7b      	subs	r3, r7, #1
 8000ae6:	419f      	sbcs	r7, r3
 8000ae8:	2207      	movs	r2, #7
 8000aea:	4307      	orrs	r7, r0
 8000aec:	403a      	ands	r2, r7
 8000aee:	2100      	movs	r1, #0
 8000af0:	2500      	movs	r5, #0
 8000af2:	e789      	b.n	8000a08 <__aeabi_dadd+0x2d0>
 8000af4:	1a17      	subs	r7, r2, r0
 8000af6:	4643      	mov	r3, r8
 8000af8:	42ba      	cmp	r2, r7
 8000afa:	41b6      	sbcs	r6, r6
 8000afc:	1a59      	subs	r1, r3, r1
 8000afe:	4276      	negs	r6, r6
 8000b00:	1b8e      	subs	r6, r1, r6
 8000b02:	4664      	mov	r4, ip
 8000b04:	e64e      	b.n	80007a4 <__aeabi_dadd+0x6c>
 8000b06:	2b1f      	cmp	r3, #31
 8000b08:	dd00      	ble.n	8000b0c <__aeabi_dadd+0x3d4>
 8000b0a:	e0ad      	b.n	8000c68 <__aeabi_dadd+0x530>
 8000b0c:	2620      	movs	r6, #32
 8000b0e:	4647      	mov	r7, r8
 8000b10:	1af6      	subs	r6, r6, r3
 8000b12:	40b7      	lsls	r7, r6
 8000b14:	46b9      	mov	r9, r7
 8000b16:	0017      	movs	r7, r2
 8000b18:	46b2      	mov	sl, r6
 8000b1a:	40df      	lsrs	r7, r3
 8000b1c:	464e      	mov	r6, r9
 8000b1e:	433e      	orrs	r6, r7
 8000b20:	0037      	movs	r7, r6
 8000b22:	4656      	mov	r6, sl
 8000b24:	40b2      	lsls	r2, r6
 8000b26:	1e56      	subs	r6, r2, #1
 8000b28:	41b2      	sbcs	r2, r6
 8000b2a:	4317      	orrs	r7, r2
 8000b2c:	4642      	mov	r2, r8
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	1889      	adds	r1, r1, r2
 8000b32:	e6ae      	b.n	8000892 <__aeabi_dadd+0x15a>
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff
 8000b3c:	800fffff 	.word	0x800fffff
 8000b40:	2620      	movs	r6, #32
 8000b42:	4647      	mov	r7, r8
 8000b44:	1af6      	subs	r6, r6, r3
 8000b46:	40b7      	lsls	r7, r6
 8000b48:	46b9      	mov	r9, r7
 8000b4a:	0017      	movs	r7, r2
 8000b4c:	46b2      	mov	sl, r6
 8000b4e:	40df      	lsrs	r7, r3
 8000b50:	464e      	mov	r6, r9
 8000b52:	433e      	orrs	r6, r7
 8000b54:	0037      	movs	r7, r6
 8000b56:	4656      	mov	r6, sl
 8000b58:	40b2      	lsls	r2, r6
 8000b5a:	1e56      	subs	r6, r2, #1
 8000b5c:	41b2      	sbcs	r2, r6
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	4642      	mov	r2, r8
 8000b62:	40da      	lsrs	r2, r3
 8000b64:	1a89      	subs	r1, r1, r2
 8000b66:	e799      	b.n	8000a9c <__aeabi_dadd+0x364>
 8000b68:	4c7f      	ldr	r4, [pc, #508]	; (8000d68 <__aeabi_dadd+0x630>)
 8000b6a:	42a6      	cmp	r6, r4
 8000b6c:	d05b      	beq.n	8000c26 <__aeabi_dadd+0x4ee>
 8000b6e:	2480      	movs	r4, #128	; 0x80
 8000b70:	0424      	lsls	r4, r4, #16
 8000b72:	425b      	negs	r3, r3
 8000b74:	4321      	orrs	r1, r4
 8000b76:	e727      	b.n	80009c8 <__aeabi_dadd+0x290>
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d10c      	bne.n	8000b96 <__aeabi_dadd+0x45e>
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x44a>
 8000b80:	e0cb      	b.n	8000d1a <__aeabi_dadd+0x5e2>
 8000b82:	4664      	mov	r4, ip
 8000b84:	0039      	movs	r1, r7
 8000b86:	0010      	movs	r0, r2
 8000b88:	4d77      	ldr	r5, [pc, #476]	; (8000d68 <__aeabi_dadd+0x630>)
 8000b8a:	e6d7      	b.n	800093c <__aeabi_dadd+0x204>
 8000b8c:	4f76      	ldr	r7, [pc, #472]	; (8000d68 <__aeabi_dadd+0x630>)
 8000b8e:	42bb      	cmp	r3, r7
 8000b90:	d018      	beq.n	8000bc4 <__aeabi_dadd+0x48c>
 8000b92:	0033      	movs	r3, r6
 8000b94:	e675      	b.n	8000882 <__aeabi_dadd+0x14a>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d014      	beq.n	8000bc4 <__aeabi_dadd+0x48c>
 8000b9a:	074b      	lsls	r3, r1, #29
 8000b9c:	08c0      	lsrs	r0, r0, #3
 8000b9e:	4318      	orrs	r0, r3
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	08c9      	lsrs	r1, r1, #3
 8000ba4:	031b      	lsls	r3, r3, #12
 8000ba6:	4219      	tst	r1, r3
 8000ba8:	d007      	beq.n	8000bba <__aeabi_dadd+0x482>
 8000baa:	08fc      	lsrs	r4, r7, #3
 8000bac:	421c      	tst	r4, r3
 8000bae:	d104      	bne.n	8000bba <__aeabi_dadd+0x482>
 8000bb0:	0779      	lsls	r1, r7, #29
 8000bb2:	08d0      	lsrs	r0, r2, #3
 8000bb4:	4308      	orrs	r0, r1
 8000bb6:	46e1      	mov	r9, ip
 8000bb8:	0021      	movs	r1, r4
 8000bba:	464c      	mov	r4, r9
 8000bbc:	0f42      	lsrs	r2, r0, #29
 8000bbe:	00c9      	lsls	r1, r1, #3
 8000bc0:	4311      	orrs	r1, r2
 8000bc2:	00c0      	lsls	r0, r0, #3
 8000bc4:	4d68      	ldr	r5, [pc, #416]	; (8000d68 <__aeabi_dadd+0x630>)
 8000bc6:	e6b9      	b.n	800093c <__aeabi_dadd+0x204>
 8000bc8:	001d      	movs	r5, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e6c0      	b.n	8000952 <__aeabi_dadd+0x21a>
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d15b      	bne.n	8000c8c <__aeabi_dadd+0x554>
 8000bd4:	000d      	movs	r5, r1
 8000bd6:	4305      	orrs	r5, r0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x4a4>
 8000bda:	e6e2      	b.n	80009a2 <__aeabi_dadd+0x26a>
 8000bdc:	1c5d      	adds	r5, r3, #1
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x4aa>
 8000be0:	e0b0      	b.n	8000d44 <__aeabi_dadd+0x60c>
 8000be2:	4d61      	ldr	r5, [pc, #388]	; (8000d68 <__aeabi_dadd+0x630>)
 8000be4:	42ae      	cmp	r6, r5
 8000be6:	d01f      	beq.n	8000c28 <__aeabi_dadd+0x4f0>
 8000be8:	43db      	mvns	r3, r3
 8000bea:	2b38      	cmp	r3, #56	; 0x38
 8000bec:	dc71      	bgt.n	8000cd2 <__aeabi_dadd+0x59a>
 8000bee:	2b1f      	cmp	r3, #31
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_dadd+0x4bc>
 8000bf2:	e096      	b.n	8000d22 <__aeabi_dadd+0x5ea>
 8000bf4:	2520      	movs	r5, #32
 8000bf6:	000f      	movs	r7, r1
 8000bf8:	1aed      	subs	r5, r5, r3
 8000bfa:	40af      	lsls	r7, r5
 8000bfc:	46b9      	mov	r9, r7
 8000bfe:	0007      	movs	r7, r0
 8000c00:	46aa      	mov	sl, r5
 8000c02:	40df      	lsrs	r7, r3
 8000c04:	464d      	mov	r5, r9
 8000c06:	433d      	orrs	r5, r7
 8000c08:	002f      	movs	r7, r5
 8000c0a:	4655      	mov	r5, sl
 8000c0c:	40a8      	lsls	r0, r5
 8000c0e:	40d9      	lsrs	r1, r3
 8000c10:	1e45      	subs	r5, r0, #1
 8000c12:	41a8      	sbcs	r0, r5
 8000c14:	4488      	add	r8, r1
 8000c16:	4307      	orrs	r7, r0
 8000c18:	18bf      	adds	r7, r7, r2
 8000c1a:	4297      	cmp	r7, r2
 8000c1c:	4192      	sbcs	r2, r2
 8000c1e:	4251      	negs	r1, r2
 8000c20:	4441      	add	r1, r8
 8000c22:	0035      	movs	r5, r6
 8000c24:	e63a      	b.n	800089c <__aeabi_dadd+0x164>
 8000c26:	4664      	mov	r4, ip
 8000c28:	0035      	movs	r5, r6
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	e685      	b.n	800093c <__aeabi_dadd+0x204>
 8000c30:	000b      	movs	r3, r1
 8000c32:	4303      	orrs	r3, r0
 8000c34:	2d00      	cmp	r5, #0
 8000c36:	d000      	beq.n	8000c3a <__aeabi_dadd+0x502>
 8000c38:	e663      	b.n	8000902 <__aeabi_dadd+0x1ca>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f5      	beq.n	8000c2a <__aeabi_dadd+0x4f2>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	4313      	orrs	r3, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x50e>
 8000c44:	e67a      	b.n	800093c <__aeabi_dadd+0x204>
 8000c46:	1887      	adds	r7, r0, r2
 8000c48:	4287      	cmp	r7, r0
 8000c4a:	4180      	sbcs	r0, r0
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	4441      	add	r1, r8
 8000c50:	4240      	negs	r0, r0
 8000c52:	1809      	adds	r1, r1, r0
 8000c54:	403a      	ands	r2, r7
 8000c56:	020b      	lsls	r3, r1, #8
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_dadd+0x524>
 8000c5a:	e6d5      	b.n	8000a08 <__aeabi_dadd+0x2d0>
 8000c5c:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <__aeabi_dadd+0x634>)
 8000c5e:	3501      	adds	r5, #1
 8000c60:	4019      	ands	r1, r3
 8000c62:	e5c9      	b.n	80007f8 <__aeabi_dadd+0xc0>
 8000c64:	0038      	movs	r0, r7
 8000c66:	e669      	b.n	800093c <__aeabi_dadd+0x204>
 8000c68:	001e      	movs	r6, r3
 8000c6a:	4647      	mov	r7, r8
 8000c6c:	3e20      	subs	r6, #32
 8000c6e:	40f7      	lsrs	r7, r6
 8000c70:	46bc      	mov	ip, r7
 8000c72:	2b20      	cmp	r3, #32
 8000c74:	d004      	beq.n	8000c80 <__aeabi_dadd+0x548>
 8000c76:	2640      	movs	r6, #64	; 0x40
 8000c78:	1af3      	subs	r3, r6, r3
 8000c7a:	4646      	mov	r6, r8
 8000c7c:	409e      	lsls	r6, r3
 8000c7e:	4332      	orrs	r2, r6
 8000c80:	0017      	movs	r7, r2
 8000c82:	4663      	mov	r3, ip
 8000c84:	1e7a      	subs	r2, r7, #1
 8000c86:	4197      	sbcs	r7, r2
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e602      	b.n	8000892 <__aeabi_dadd+0x15a>
 8000c8c:	4d36      	ldr	r5, [pc, #216]	; (8000d68 <__aeabi_dadd+0x630>)
 8000c8e:	42ae      	cmp	r6, r5
 8000c90:	d0ca      	beq.n	8000c28 <__aeabi_dadd+0x4f0>
 8000c92:	2580      	movs	r5, #128	; 0x80
 8000c94:	042d      	lsls	r5, r5, #16
 8000c96:	425b      	negs	r3, r3
 8000c98:	4329      	orrs	r1, r5
 8000c9a:	e7a6      	b.n	8000bea <__aeabi_dadd+0x4b2>
 8000c9c:	4308      	orrs	r0, r1
 8000c9e:	1e41      	subs	r1, r0, #1
 8000ca0:	4188      	sbcs	r0, r1
 8000ca2:	e6a6      	b.n	80009f2 <__aeabi_dadd+0x2ba>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x572>
 8000ca8:	e648      	b.n	800093c <__aeabi_dadd+0x204>
 8000caa:	1a87      	subs	r7, r0, r2
 8000cac:	4643      	mov	r3, r8
 8000cae:	42b8      	cmp	r0, r7
 8000cb0:	41b6      	sbcs	r6, r6
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	4276      	negs	r6, r6
 8000cb6:	1b9e      	subs	r6, r3, r6
 8000cb8:	0233      	lsls	r3, r6, #8
 8000cba:	d54b      	bpl.n	8000d54 <__aeabi_dadd+0x61c>
 8000cbc:	1a17      	subs	r7, r2, r0
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	42ba      	cmp	r2, r7
 8000cc2:	4192      	sbcs	r2, r2
 8000cc4:	1a59      	subs	r1, r3, r1
 8000cc6:	4252      	negs	r2, r2
 8000cc8:	1a89      	subs	r1, r1, r2
 8000cca:	2207      	movs	r2, #7
 8000ccc:	4664      	mov	r4, ip
 8000cce:	403a      	ands	r2, r7
 8000cd0:	e592      	b.n	80007f8 <__aeabi_dadd+0xc0>
 8000cd2:	4301      	orrs	r1, r0
 8000cd4:	000f      	movs	r7, r1
 8000cd6:	1e79      	subs	r1, r7, #1
 8000cd8:	418f      	sbcs	r7, r1
 8000cda:	e79d      	b.n	8000c18 <__aeabi_dadd+0x4e0>
 8000cdc:	001c      	movs	r4, r3
 8000cde:	000f      	movs	r7, r1
 8000ce0:	3c20      	subs	r4, #32
 8000ce2:	40e7      	lsrs	r7, r4
 8000ce4:	2b20      	cmp	r3, #32
 8000ce6:	d003      	beq.n	8000cf0 <__aeabi_dadd+0x5b8>
 8000ce8:	2440      	movs	r4, #64	; 0x40
 8000cea:	1ae3      	subs	r3, r4, r3
 8000cec:	4099      	lsls	r1, r3
 8000cee:	4308      	orrs	r0, r1
 8000cf0:	1e41      	subs	r1, r0, #1
 8000cf2:	4188      	sbcs	r0, r1
 8000cf4:	4338      	orrs	r0, r7
 8000cf6:	e67c      	b.n	80009f2 <__aeabi_dadd+0x2ba>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2400      	movs	r4, #0
 8000cfc:	e625      	b.n	800094a <__aeabi_dadd+0x212>
 8000cfe:	1a17      	subs	r7, r2, r0
 8000d00:	4643      	mov	r3, r8
 8000d02:	42ba      	cmp	r2, r7
 8000d04:	4192      	sbcs	r2, r2
 8000d06:	1a59      	subs	r1, r3, r1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	1a89      	subs	r1, r1, r2
 8000d0c:	4664      	mov	r4, ip
 8000d0e:	0035      	movs	r5, r6
 8000d10:	e543      	b.n	800079a <__aeabi_dadd+0x62>
 8000d12:	4641      	mov	r1, r8
 8000d14:	0010      	movs	r0, r2
 8000d16:	4d14      	ldr	r5, [pc, #80]	; (8000d68 <__aeabi_dadd+0x630>)
 8000d18:	e610      	b.n	800093c <__aeabi_dadd+0x204>
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	0312      	lsls	r2, r2, #12
 8000d20:	e680      	b.n	8000a24 <__aeabi_dadd+0x2ec>
 8000d22:	001d      	movs	r5, r3
 8000d24:	000f      	movs	r7, r1
 8000d26:	3d20      	subs	r5, #32
 8000d28:	40ef      	lsrs	r7, r5
 8000d2a:	46bc      	mov	ip, r7
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	d003      	beq.n	8000d38 <__aeabi_dadd+0x600>
 8000d30:	2540      	movs	r5, #64	; 0x40
 8000d32:	1aeb      	subs	r3, r5, r3
 8000d34:	4099      	lsls	r1, r3
 8000d36:	4308      	orrs	r0, r1
 8000d38:	0007      	movs	r7, r0
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	1e78      	subs	r0, r7, #1
 8000d3e:	4187      	sbcs	r7, r0
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e769      	b.n	8000c18 <__aeabi_dadd+0x4e0>
 8000d44:	1887      	adds	r7, r0, r2
 8000d46:	4297      	cmp	r7, r2
 8000d48:	419b      	sbcs	r3, r3
 8000d4a:	4441      	add	r1, r8
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	18c9      	adds	r1, r1, r3
 8000d50:	0035      	movs	r5, r6
 8000d52:	e5a3      	b.n	800089c <__aeabi_dadd+0x164>
 8000d54:	003b      	movs	r3, r7
 8000d56:	4333      	orrs	r3, r6
 8000d58:	d0ce      	beq.n	8000cf8 <__aeabi_dadd+0x5c0>
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	0031      	movs	r1, r6
 8000d5e:	403a      	ands	r2, r7
 8000d60:	e652      	b.n	8000a08 <__aeabi_dadd+0x2d0>
 8000d62:	2300      	movs	r3, #0
 8000d64:	001a      	movs	r2, r3
 8000d66:	e5f4      	b.n	8000952 <__aeabi_dadd+0x21a>
 8000d68:	000007ff 	.word	0x000007ff
 8000d6c:	ff7fffff 	.word	0xff7fffff

08000d70 <__aeabi_ddiv>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	4657      	mov	r7, sl
 8000d74:	46de      	mov	lr, fp
 8000d76:	464e      	mov	r6, r9
 8000d78:	4645      	mov	r5, r8
 8000d7a:	b5e0      	push	{r5, r6, r7, lr}
 8000d7c:	4683      	mov	fp, r0
 8000d7e:	0007      	movs	r7, r0
 8000d80:	030e      	lsls	r6, r1, #12
 8000d82:	0048      	lsls	r0, r1, #1
 8000d84:	b085      	sub	sp, #20
 8000d86:	4692      	mov	sl, r2
 8000d88:	001c      	movs	r4, r3
 8000d8a:	0b36      	lsrs	r6, r6, #12
 8000d8c:	0d40      	lsrs	r0, r0, #21
 8000d8e:	0fcd      	lsrs	r5, r1, #31
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0x26>
 8000d94:	e09d      	b.n	8000ed2 <__aeabi_ddiv+0x162>
 8000d96:	4b95      	ldr	r3, [pc, #596]	; (8000fec <__aeabi_ddiv+0x27c>)
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	d039      	beq.n	8000e10 <__aeabi_ddiv+0xa0>
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	00f6      	lsls	r6, r6, #3
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	431e      	orrs	r6, r3
 8000da4:	4a92      	ldr	r2, [pc, #584]	; (8000ff0 <__aeabi_ddiv+0x280>)
 8000da6:	0f7b      	lsrs	r3, r7, #29
 8000da8:	4333      	orrs	r3, r6
 8000daa:	4699      	mov	r9, r3
 8000dac:	4694      	mov	ip, r2
 8000dae:	0003      	movs	r3, r0
 8000db0:	4463      	add	r3, ip
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2300      	movs	r3, #0
 8000db6:	2600      	movs	r6, #0
 8000db8:	00ff      	lsls	r7, r7, #3
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	0323      	lsls	r3, r4, #12
 8000dbe:	0b1b      	lsrs	r3, r3, #12
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	0063      	lsls	r3, r4, #1
 8000dc4:	0fe4      	lsrs	r4, r4, #31
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	0d5b      	lsrs	r3, r3, #21
 8000dca:	9401      	str	r4, [sp, #4]
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x60>
 8000dce:	e0b3      	b.n	8000f38 <__aeabi_ddiv+0x1c8>
 8000dd0:	4986      	ldr	r1, [pc, #536]	; (8000fec <__aeabi_ddiv+0x27c>)
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0x68>
 8000dd6:	e09e      	b.n	8000f16 <__aeabi_ddiv+0x1a6>
 8000dd8:	4642      	mov	r2, r8
 8000dda:	00d1      	lsls	r1, r2, #3
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0412      	lsls	r2, r2, #16
 8000de0:	430a      	orrs	r2, r1
 8000de2:	4651      	mov	r1, sl
 8000de4:	0f49      	lsrs	r1, r1, #29
 8000de6:	4311      	orrs	r1, r2
 8000de8:	468b      	mov	fp, r1
 8000dea:	4981      	ldr	r1, [pc, #516]	; (8000ff0 <__aeabi_ddiv+0x280>)
 8000dec:	4652      	mov	r2, sl
 8000dee:	468c      	mov	ip, r1
 8000df0:	9900      	ldr	r1, [sp, #0]
 8000df2:	4463      	add	r3, ip
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	002b      	movs	r3, r5
 8000dfe:	4063      	eors	r3, r4
 8000e00:	469a      	mov	sl, r3
 8000e02:	2e0f      	cmp	r6, #15
 8000e04:	d900      	bls.n	8000e08 <__aeabi_ddiv+0x98>
 8000e06:	e105      	b.n	8001014 <__aeabi_ddiv+0x2a4>
 8000e08:	4b7a      	ldr	r3, [pc, #488]	; (8000ff4 <__aeabi_ddiv+0x284>)
 8000e0a:	00b6      	lsls	r6, r6, #2
 8000e0c:	599b      	ldr	r3, [r3, r6]
 8000e0e:	469f      	mov	pc, r3
 8000e10:	465b      	mov	r3, fp
 8000e12:	4333      	orrs	r3, r6
 8000e14:	4699      	mov	r9, r3
 8000e16:	d000      	beq.n	8000e1a <__aeabi_ddiv+0xaa>
 8000e18:	e0b8      	b.n	8000f8c <__aeabi_ddiv+0x21c>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	2608      	movs	r6, #8
 8000e1e:	2700      	movs	r7, #0
 8000e20:	9000      	str	r0, [sp, #0]
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	e7ca      	b.n	8000dbc <__aeabi_ddiv+0x4c>
 8000e26:	46cb      	mov	fp, r9
 8000e28:	003a      	movs	r2, r7
 8000e2a:	9902      	ldr	r1, [sp, #8]
 8000e2c:	9501      	str	r5, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	469a      	mov	sl, r3
 8000e32:	2902      	cmp	r1, #2
 8000e34:	d027      	beq.n	8000e86 <__aeabi_ddiv+0x116>
 8000e36:	2903      	cmp	r1, #3
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0xcc>
 8000e3a:	e280      	b.n	800133e <__aeabi_ddiv+0x5ce>
 8000e3c:	2901      	cmp	r1, #1
 8000e3e:	d044      	beq.n	8000eca <__aeabi_ddiv+0x15a>
 8000e40:	496d      	ldr	r1, [pc, #436]	; (8000ff8 <__aeabi_ddiv+0x288>)
 8000e42:	9b00      	ldr	r3, [sp, #0]
 8000e44:	468c      	mov	ip, r1
 8000e46:	4463      	add	r3, ip
 8000e48:	001c      	movs	r4, r3
 8000e4a:	2c00      	cmp	r4, #0
 8000e4c:	dd38      	ble.n	8000ec0 <__aeabi_ddiv+0x150>
 8000e4e:	0753      	lsls	r3, r2, #29
 8000e50:	d000      	beq.n	8000e54 <__aeabi_ddiv+0xe4>
 8000e52:	e213      	b.n	800127c <__aeabi_ddiv+0x50c>
 8000e54:	08d2      	lsrs	r2, r2, #3
 8000e56:	465b      	mov	r3, fp
 8000e58:	01db      	lsls	r3, r3, #7
 8000e5a:	d509      	bpl.n	8000e70 <__aeabi_ddiv+0x100>
 8000e5c:	4659      	mov	r1, fp
 8000e5e:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <__aeabi_ddiv+0x28c>)
 8000e60:	4019      	ands	r1, r3
 8000e62:	468b      	mov	fp, r1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	00c9      	lsls	r1, r1, #3
 8000e68:	468c      	mov	ip, r1
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	4463      	add	r3, ip
 8000e6e:	001c      	movs	r4, r3
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <__aeabi_ddiv+0x290>)
 8000e72:	429c      	cmp	r4, r3
 8000e74:	dc07      	bgt.n	8000e86 <__aeabi_ddiv+0x116>
 8000e76:	465b      	mov	r3, fp
 8000e78:	0564      	lsls	r4, r4, #21
 8000e7a:	075f      	lsls	r7, r3, #29
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	0b1b      	lsrs	r3, r3, #12
 8000e82:	0d62      	lsrs	r2, r4, #21
 8000e84:	e002      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8000e86:	2300      	movs	r3, #0
 8000e88:	2700      	movs	r7, #0
 8000e8a:	4a58      	ldr	r2, [pc, #352]	; (8000fec <__aeabi_ddiv+0x27c>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	031b      	lsls	r3, r3, #12
 8000e90:	0b1c      	lsrs	r4, r3, #12
 8000e92:	0d0b      	lsrs	r3, r1, #20
 8000e94:	051b      	lsls	r3, r3, #20
 8000e96:	4323      	orrs	r3, r4
 8000e98:	0514      	lsls	r4, r2, #20
 8000e9a:	4a5a      	ldr	r2, [pc, #360]	; (8001004 <__aeabi_ddiv+0x294>)
 8000e9c:	0038      	movs	r0, r7
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	4653      	mov	r3, sl
 8000ea4:	0064      	lsls	r4, r4, #1
 8000ea6:	07db      	lsls	r3, r3, #31
 8000ea8:	0864      	lsrs	r4, r4, #1
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	0021      	movs	r1, r4
 8000eae:	b005      	add	sp, #20
 8000eb0:	bc3c      	pop	{r2, r3, r4, r5}
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	46a2      	mov	sl, r4
 8000eb8:	46ab      	mov	fp, r5
 8000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4252      	negs	r2, r2
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	1b1b      	subs	r3, r3, r4
 8000ec4:	2b38      	cmp	r3, #56	; 0x38
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_ddiv+0x15a>
 8000ec8:	e1ad      	b.n	8001226 <__aeabi_ddiv+0x4b6>
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2700      	movs	r7, #0
 8000ed0:	e7dc      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8000ed2:	465b      	mov	r3, fp
 8000ed4:	4333      	orrs	r3, r6
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	d05e      	beq.n	8000f98 <__aeabi_ddiv+0x228>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x170>
 8000ede:	e18a      	b.n	80011f6 <__aeabi_ddiv+0x486>
 8000ee0:	0030      	movs	r0, r6
 8000ee2:	f001 fa9d 	bl	8002420 <__clzsi2>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	3b0b      	subs	r3, #11
 8000eea:	2b1c      	cmp	r3, #28
 8000eec:	dd00      	ble.n	8000ef0 <__aeabi_ddiv+0x180>
 8000eee:	e17b      	b.n	80011e8 <__aeabi_ddiv+0x478>
 8000ef0:	221d      	movs	r2, #29
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	465a      	mov	r2, fp
 8000ef6:	0001      	movs	r1, r0
 8000ef8:	40da      	lsrs	r2, r3
 8000efa:	3908      	subs	r1, #8
 8000efc:	408e      	lsls	r6, r1
 8000efe:	0013      	movs	r3, r2
 8000f00:	465f      	mov	r7, fp
 8000f02:	4333      	orrs	r3, r6
 8000f04:	4699      	mov	r9, r3
 8000f06:	408f      	lsls	r7, r1
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <__aeabi_ddiv+0x298>)
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	1a1b      	subs	r3, r3, r0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	e752      	b.n	8000dbc <__aeabi_ddiv+0x4c>
 8000f16:	4641      	mov	r1, r8
 8000f18:	4653      	mov	r3, sl
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	493b      	ldr	r1, [pc, #236]	; (800100c <__aeabi_ddiv+0x29c>)
 8000f1e:	469b      	mov	fp, r3
 8000f20:	468c      	mov	ip, r1
 8000f22:	9b00      	ldr	r3, [sp, #0]
 8000f24:	4463      	add	r3, ip
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	465b      	mov	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d13b      	bne.n	8000fa6 <__aeabi_ddiv+0x236>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	2200      	movs	r2, #0
 8000f32:	431e      	orrs	r6, r3
 8000f34:	2102      	movs	r1, #2
 8000f36:	e761      	b.n	8000dfc <__aeabi_ddiv+0x8c>
 8000f38:	4643      	mov	r3, r8
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	469b      	mov	fp, r3
 8000f3e:	d037      	beq.n	8000fb0 <__aeabi_ddiv+0x240>
 8000f40:	4643      	mov	r3, r8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x1d8>
 8000f46:	e162      	b.n	800120e <__aeabi_ddiv+0x49e>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	f001 fa69 	bl	8002420 <__clzsi2>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	3b0b      	subs	r3, #11
 8000f52:	2b1c      	cmp	r3, #28
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_ddiv+0x1e8>
 8000f56:	e153      	b.n	8001200 <__aeabi_ddiv+0x490>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	4641      	mov	r1, r8
 8000f5c:	3a08      	subs	r2, #8
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	4688      	mov	r8, r1
 8000f62:	211d      	movs	r1, #29
 8000f64:	1acb      	subs	r3, r1, r3
 8000f66:	4651      	mov	r1, sl
 8000f68:	40d9      	lsrs	r1, r3
 8000f6a:	000b      	movs	r3, r1
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	469b      	mov	fp, r3
 8000f72:	4653      	mov	r3, sl
 8000f74:	4093      	lsls	r3, r2
 8000f76:	001a      	movs	r2, r3
 8000f78:	9b00      	ldr	r3, [sp, #0]
 8000f7a:	4925      	ldr	r1, [pc, #148]	; (8001010 <__aeabi_ddiv+0x2a0>)
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	4460      	add	r0, ip
 8000f80:	0003      	movs	r3, r0
 8000f82:	468c      	mov	ip, r1
 8000f84:	4463      	add	r3, ip
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	e737      	b.n	8000dfc <__aeabi_ddiv+0x8c>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	46b1      	mov	r9, r6
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	260c      	movs	r6, #12
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	e711      	b.n	8000dbc <__aeabi_ddiv+0x4c>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	2604      	movs	r6, #4
 8000fa0:	2700      	movs	r7, #0
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	e70a      	b.n	8000dbc <__aeabi_ddiv+0x4c>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	46c3      	mov	fp, r8
 8000faa:	431e      	orrs	r6, r3
 8000fac:	2103      	movs	r1, #3
 8000fae:	e725      	b.n	8000dfc <__aeabi_ddiv+0x8c>
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	431e      	orrs	r6, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	e720      	b.n	8000dfc <__aeabi_ddiv+0x8c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	469a      	mov	sl, r3
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	2700      	movs	r7, #0
 8000fc2:	031b      	lsls	r3, r3, #12
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <__aeabi_ddiv+0x27c>)
 8000fc6:	e761      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	4649      	mov	r1, r9
 8000fcc:	031b      	lsls	r3, r3, #12
 8000fce:	4219      	tst	r1, r3
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_ddiv+0x264>
 8000fd2:	e0e2      	b.n	800119a <__aeabi_ddiv+0x42a>
 8000fd4:	4659      	mov	r1, fp
 8000fd6:	4219      	tst	r1, r3
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_ddiv+0x26c>
 8000fda:	e0de      	b.n	800119a <__aeabi_ddiv+0x42a>
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	031b      	lsls	r3, r3, #12
 8000fe0:	0017      	movs	r7, r2
 8000fe2:	0b1b      	lsrs	r3, r3, #12
 8000fe4:	46a2      	mov	sl, r4
 8000fe6:	4a01      	ldr	r2, [pc, #4]	; (8000fec <__aeabi_ddiv+0x27c>)
 8000fe8:	e750      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	000007ff 	.word	0x000007ff
 8000ff0:	fffffc01 	.word	0xfffffc01
 8000ff4:	080083b4 	.word	0x080083b4
 8000ff8:	000003ff 	.word	0x000003ff
 8000ffc:	feffffff 	.word	0xfeffffff
 8001000:	000007fe 	.word	0x000007fe
 8001004:	800fffff 	.word	0x800fffff
 8001008:	fffffc0d 	.word	0xfffffc0d
 800100c:	fffff801 	.word	0xfffff801
 8001010:	000003f3 	.word	0x000003f3
 8001014:	45d9      	cmp	r9, fp
 8001016:	d900      	bls.n	800101a <__aeabi_ddiv+0x2aa>
 8001018:	e0cb      	b.n	80011b2 <__aeabi_ddiv+0x442>
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x2ae>
 800101c:	e0c6      	b.n	80011ac <__aeabi_ddiv+0x43c>
 800101e:	003c      	movs	r4, r7
 8001020:	4648      	mov	r0, r9
 8001022:	2700      	movs	r7, #0
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	465b      	mov	r3, fp
 800102c:	0e16      	lsrs	r6, r2, #24
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	431e      	orrs	r6, r3
 8001032:	0213      	lsls	r3, r2, #8
 8001034:	4698      	mov	r8, r3
 8001036:	0433      	lsls	r3, r6, #16
 8001038:	0c1b      	lsrs	r3, r3, #16
 800103a:	4699      	mov	r9, r3
 800103c:	0c31      	lsrs	r1, r6, #16
 800103e:	9101      	str	r1, [sp, #4]
 8001040:	f7ff f8fa 	bl	8000238 <__aeabi_uidivmod>
 8001044:	464a      	mov	r2, r9
 8001046:	4342      	muls	r2, r0
 8001048:	040b      	lsls	r3, r1, #16
 800104a:	0c21      	lsrs	r1, r4, #16
 800104c:	0005      	movs	r5, r0
 800104e:	4319      	orrs	r1, r3
 8001050:	428a      	cmp	r2, r1
 8001052:	d907      	bls.n	8001064 <__aeabi_ddiv+0x2f4>
 8001054:	1989      	adds	r1, r1, r6
 8001056:	3d01      	subs	r5, #1
 8001058:	428e      	cmp	r6, r1
 800105a:	d803      	bhi.n	8001064 <__aeabi_ddiv+0x2f4>
 800105c:	428a      	cmp	r2, r1
 800105e:	d901      	bls.n	8001064 <__aeabi_ddiv+0x2f4>
 8001060:	1e85      	subs	r5, r0, #2
 8001062:	1989      	adds	r1, r1, r6
 8001064:	1a88      	subs	r0, r1, r2
 8001066:	9901      	ldr	r1, [sp, #4]
 8001068:	f7ff f8e6 	bl	8000238 <__aeabi_uidivmod>
 800106c:	0409      	lsls	r1, r1, #16
 800106e:	468c      	mov	ip, r1
 8001070:	464a      	mov	r2, r9
 8001072:	0421      	lsls	r1, r4, #16
 8001074:	4664      	mov	r4, ip
 8001076:	4342      	muls	r2, r0
 8001078:	0c09      	lsrs	r1, r1, #16
 800107a:	0003      	movs	r3, r0
 800107c:	4321      	orrs	r1, r4
 800107e:	428a      	cmp	r2, r1
 8001080:	d904      	bls.n	800108c <__aeabi_ddiv+0x31c>
 8001082:	1989      	adds	r1, r1, r6
 8001084:	3b01      	subs	r3, #1
 8001086:	428e      	cmp	r6, r1
 8001088:	d800      	bhi.n	800108c <__aeabi_ddiv+0x31c>
 800108a:	e0f1      	b.n	8001270 <__aeabi_ddiv+0x500>
 800108c:	042d      	lsls	r5, r5, #16
 800108e:	431d      	orrs	r5, r3
 8001090:	46ab      	mov	fp, r5
 8001092:	4643      	mov	r3, r8
 8001094:	1a89      	subs	r1, r1, r2
 8001096:	4642      	mov	r2, r8
 8001098:	0c28      	lsrs	r0, r5, #16
 800109a:	0412      	lsls	r2, r2, #16
 800109c:	0c1d      	lsrs	r5, r3, #16
 800109e:	465b      	mov	r3, fp
 80010a0:	0c14      	lsrs	r4, r2, #16
 80010a2:	0022      	movs	r2, r4
 80010a4:	041b      	lsls	r3, r3, #16
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	435a      	muls	r2, r3
 80010aa:	9403      	str	r4, [sp, #12]
 80010ac:	436b      	muls	r3, r5
 80010ae:	4344      	muls	r4, r0
 80010b0:	9502      	str	r5, [sp, #8]
 80010b2:	4368      	muls	r0, r5
 80010b4:	191b      	adds	r3, r3, r4
 80010b6:	0c15      	lsrs	r5, r2, #16
 80010b8:	18eb      	adds	r3, r5, r3
 80010ba:	429c      	cmp	r4, r3
 80010bc:	d903      	bls.n	80010c6 <__aeabi_ddiv+0x356>
 80010be:	2480      	movs	r4, #128	; 0x80
 80010c0:	0264      	lsls	r4, r4, #9
 80010c2:	46a4      	mov	ip, r4
 80010c4:	4460      	add	r0, ip
 80010c6:	0c1c      	lsrs	r4, r3, #16
 80010c8:	0415      	lsls	r5, r2, #16
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	0c2d      	lsrs	r5, r5, #16
 80010ce:	1820      	adds	r0, r4, r0
 80010d0:	195d      	adds	r5, r3, r5
 80010d2:	4281      	cmp	r1, r0
 80010d4:	d377      	bcc.n	80011c6 <__aeabi_ddiv+0x456>
 80010d6:	d073      	beq.n	80011c0 <__aeabi_ddiv+0x450>
 80010d8:	1a0c      	subs	r4, r1, r0
 80010da:	4aa2      	ldr	r2, [pc, #648]	; (8001364 <__aeabi_ddiv+0x5f4>)
 80010dc:	1b7d      	subs	r5, r7, r5
 80010de:	42af      	cmp	r7, r5
 80010e0:	41bf      	sbcs	r7, r7
 80010e2:	4694      	mov	ip, r2
 80010e4:	9b00      	ldr	r3, [sp, #0]
 80010e6:	427f      	negs	r7, r7
 80010e8:	4463      	add	r3, ip
 80010ea:	1be0      	subs	r0, r4, r7
 80010ec:	001c      	movs	r4, r3
 80010ee:	4286      	cmp	r6, r0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_ddiv+0x384>
 80010f2:	e0db      	b.n	80012ac <__aeabi_ddiv+0x53c>
 80010f4:	9901      	ldr	r1, [sp, #4]
 80010f6:	f7ff f89f 	bl	8000238 <__aeabi_uidivmod>
 80010fa:	464a      	mov	r2, r9
 80010fc:	4342      	muls	r2, r0
 80010fe:	040b      	lsls	r3, r1, #16
 8001100:	0c29      	lsrs	r1, r5, #16
 8001102:	0007      	movs	r7, r0
 8001104:	4319      	orrs	r1, r3
 8001106:	428a      	cmp	r2, r1
 8001108:	d907      	bls.n	800111a <__aeabi_ddiv+0x3aa>
 800110a:	1989      	adds	r1, r1, r6
 800110c:	3f01      	subs	r7, #1
 800110e:	428e      	cmp	r6, r1
 8001110:	d803      	bhi.n	800111a <__aeabi_ddiv+0x3aa>
 8001112:	428a      	cmp	r2, r1
 8001114:	d901      	bls.n	800111a <__aeabi_ddiv+0x3aa>
 8001116:	1e87      	subs	r7, r0, #2
 8001118:	1989      	adds	r1, r1, r6
 800111a:	1a88      	subs	r0, r1, r2
 800111c:	9901      	ldr	r1, [sp, #4]
 800111e:	f7ff f88b 	bl	8000238 <__aeabi_uidivmod>
 8001122:	0409      	lsls	r1, r1, #16
 8001124:	464a      	mov	r2, r9
 8001126:	4689      	mov	r9, r1
 8001128:	0429      	lsls	r1, r5, #16
 800112a:	464d      	mov	r5, r9
 800112c:	4342      	muls	r2, r0
 800112e:	0c09      	lsrs	r1, r1, #16
 8001130:	0003      	movs	r3, r0
 8001132:	4329      	orrs	r1, r5
 8001134:	428a      	cmp	r2, r1
 8001136:	d907      	bls.n	8001148 <__aeabi_ddiv+0x3d8>
 8001138:	1989      	adds	r1, r1, r6
 800113a:	3b01      	subs	r3, #1
 800113c:	428e      	cmp	r6, r1
 800113e:	d803      	bhi.n	8001148 <__aeabi_ddiv+0x3d8>
 8001140:	428a      	cmp	r2, r1
 8001142:	d901      	bls.n	8001148 <__aeabi_ddiv+0x3d8>
 8001144:	1e83      	subs	r3, r0, #2
 8001146:	1989      	adds	r1, r1, r6
 8001148:	043f      	lsls	r7, r7, #16
 800114a:	1a89      	subs	r1, r1, r2
 800114c:	003a      	movs	r2, r7
 800114e:	9f03      	ldr	r7, [sp, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	0038      	movs	r0, r7
 8001154:	0413      	lsls	r3, r2, #16
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	4358      	muls	r0, r3
 800115a:	4681      	mov	r9, r0
 800115c:	9802      	ldr	r0, [sp, #8]
 800115e:	0c15      	lsrs	r5, r2, #16
 8001160:	436f      	muls	r7, r5
 8001162:	4343      	muls	r3, r0
 8001164:	4345      	muls	r5, r0
 8001166:	4648      	mov	r0, r9
 8001168:	0c00      	lsrs	r0, r0, #16
 800116a:	4684      	mov	ip, r0
 800116c:	19db      	adds	r3, r3, r7
 800116e:	4463      	add	r3, ip
 8001170:	429f      	cmp	r7, r3
 8001172:	d903      	bls.n	800117c <__aeabi_ddiv+0x40c>
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	0240      	lsls	r0, r0, #9
 8001178:	4684      	mov	ip, r0
 800117a:	4465      	add	r5, ip
 800117c:	4648      	mov	r0, r9
 800117e:	0c1f      	lsrs	r7, r3, #16
 8001180:	0400      	lsls	r0, r0, #16
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	0c00      	lsrs	r0, r0, #16
 8001186:	197d      	adds	r5, r7, r5
 8001188:	1818      	adds	r0, r3, r0
 800118a:	42a9      	cmp	r1, r5
 800118c:	d200      	bcs.n	8001190 <__aeabi_ddiv+0x420>
 800118e:	e084      	b.n	800129a <__aeabi_ddiv+0x52a>
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x424>
 8001192:	e07f      	b.n	8001294 <__aeabi_ddiv+0x524>
 8001194:	2301      	movs	r3, #1
 8001196:	431a      	orrs	r2, r3
 8001198:	e657      	b.n	8000e4a <__aeabi_ddiv+0xda>
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	464a      	mov	r2, r9
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	4313      	orrs	r3, r2
 80011a2:	031b      	lsls	r3, r3, #12
 80011a4:	0b1b      	lsrs	r3, r3, #12
 80011a6:	46aa      	mov	sl, r5
 80011a8:	4a6f      	ldr	r2, [pc, #444]	; (8001368 <__aeabi_ddiv+0x5f8>)
 80011aa:	e66f      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 80011ac:	42ba      	cmp	r2, r7
 80011ae:	d900      	bls.n	80011b2 <__aeabi_ddiv+0x442>
 80011b0:	e735      	b.n	800101e <__aeabi_ddiv+0x2ae>
 80011b2:	464b      	mov	r3, r9
 80011b4:	07dc      	lsls	r4, r3, #31
 80011b6:	0858      	lsrs	r0, r3, #1
 80011b8:	087b      	lsrs	r3, r7, #1
 80011ba:	431c      	orrs	r4, r3
 80011bc:	07ff      	lsls	r7, r7, #31
 80011be:	e734      	b.n	800102a <__aeabi_ddiv+0x2ba>
 80011c0:	2400      	movs	r4, #0
 80011c2:	42af      	cmp	r7, r5
 80011c4:	d289      	bcs.n	80010da <__aeabi_ddiv+0x36a>
 80011c6:	4447      	add	r7, r8
 80011c8:	4547      	cmp	r7, r8
 80011ca:	41a4      	sbcs	r4, r4
 80011cc:	465b      	mov	r3, fp
 80011ce:	4264      	negs	r4, r4
 80011d0:	19a4      	adds	r4, r4, r6
 80011d2:	1864      	adds	r4, r4, r1
 80011d4:	3b01      	subs	r3, #1
 80011d6:	42a6      	cmp	r6, r4
 80011d8:	d21e      	bcs.n	8001218 <__aeabi_ddiv+0x4a8>
 80011da:	42a0      	cmp	r0, r4
 80011dc:	d86d      	bhi.n	80012ba <__aeabi_ddiv+0x54a>
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x472>
 80011e0:	e0b6      	b.n	8001350 <__aeabi_ddiv+0x5e0>
 80011e2:	1a24      	subs	r4, r4, r0
 80011e4:	469b      	mov	fp, r3
 80011e6:	e778      	b.n	80010da <__aeabi_ddiv+0x36a>
 80011e8:	0003      	movs	r3, r0
 80011ea:	465a      	mov	r2, fp
 80011ec:	3b28      	subs	r3, #40	; 0x28
 80011ee:	409a      	lsls	r2, r3
 80011f0:	2700      	movs	r7, #0
 80011f2:	4691      	mov	r9, r2
 80011f4:	e688      	b.n	8000f08 <__aeabi_ddiv+0x198>
 80011f6:	4658      	mov	r0, fp
 80011f8:	f001 f912 	bl	8002420 <__clzsi2>
 80011fc:	3020      	adds	r0, #32
 80011fe:	e672      	b.n	8000ee6 <__aeabi_ddiv+0x176>
 8001200:	0003      	movs	r3, r0
 8001202:	4652      	mov	r2, sl
 8001204:	3b28      	subs	r3, #40	; 0x28
 8001206:	409a      	lsls	r2, r3
 8001208:	4693      	mov	fp, r2
 800120a:	2200      	movs	r2, #0
 800120c:	e6b4      	b.n	8000f78 <__aeabi_ddiv+0x208>
 800120e:	4650      	mov	r0, sl
 8001210:	f001 f906 	bl	8002420 <__clzsi2>
 8001214:	3020      	adds	r0, #32
 8001216:	e69a      	b.n	8000f4e <__aeabi_ddiv+0x1de>
 8001218:	42a6      	cmp	r6, r4
 800121a:	d1e2      	bne.n	80011e2 <__aeabi_ddiv+0x472>
 800121c:	45b8      	cmp	r8, r7
 800121e:	d9dc      	bls.n	80011da <__aeabi_ddiv+0x46a>
 8001220:	1a34      	subs	r4, r6, r0
 8001222:	469b      	mov	fp, r3
 8001224:	e759      	b.n	80010da <__aeabi_ddiv+0x36a>
 8001226:	2b1f      	cmp	r3, #31
 8001228:	dc65      	bgt.n	80012f6 <__aeabi_ddiv+0x586>
 800122a:	4c50      	ldr	r4, [pc, #320]	; (800136c <__aeabi_ddiv+0x5fc>)
 800122c:	9900      	ldr	r1, [sp, #0]
 800122e:	46a4      	mov	ip, r4
 8001230:	465c      	mov	r4, fp
 8001232:	4461      	add	r1, ip
 8001234:	0008      	movs	r0, r1
 8001236:	408c      	lsls	r4, r1
 8001238:	0011      	movs	r1, r2
 800123a:	4082      	lsls	r2, r0
 800123c:	40d9      	lsrs	r1, r3
 800123e:	1e50      	subs	r0, r2, #1
 8001240:	4182      	sbcs	r2, r0
 8001242:	430c      	orrs	r4, r1
 8001244:	4314      	orrs	r4, r2
 8001246:	465a      	mov	r2, fp
 8001248:	40da      	lsrs	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	0762      	lsls	r2, r4, #29
 800124e:	d009      	beq.n	8001264 <__aeabi_ddiv+0x4f4>
 8001250:	220f      	movs	r2, #15
 8001252:	4022      	ands	r2, r4
 8001254:	2a04      	cmp	r2, #4
 8001256:	d005      	beq.n	8001264 <__aeabi_ddiv+0x4f4>
 8001258:	0022      	movs	r2, r4
 800125a:	1d14      	adds	r4, r2, #4
 800125c:	4294      	cmp	r4, r2
 800125e:	4189      	sbcs	r1, r1
 8001260:	4249      	negs	r1, r1
 8001262:	185b      	adds	r3, r3, r1
 8001264:	021a      	lsls	r2, r3, #8
 8001266:	d562      	bpl.n	800132e <__aeabi_ddiv+0x5be>
 8001268:	2201      	movs	r2, #1
 800126a:	2300      	movs	r3, #0
 800126c:	2700      	movs	r7, #0
 800126e:	e60d      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8001270:	428a      	cmp	r2, r1
 8001272:	d800      	bhi.n	8001276 <__aeabi_ddiv+0x506>
 8001274:	e70a      	b.n	800108c <__aeabi_ddiv+0x31c>
 8001276:	1e83      	subs	r3, r0, #2
 8001278:	1989      	adds	r1, r1, r6
 800127a:	e707      	b.n	800108c <__aeabi_ddiv+0x31c>
 800127c:	230f      	movs	r3, #15
 800127e:	4013      	ands	r3, r2
 8001280:	2b04      	cmp	r3, #4
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x516>
 8001284:	e5e6      	b.n	8000e54 <__aeabi_ddiv+0xe4>
 8001286:	1d17      	adds	r7, r2, #4
 8001288:	4297      	cmp	r7, r2
 800128a:	4192      	sbcs	r2, r2
 800128c:	4253      	negs	r3, r2
 800128e:	449b      	add	fp, r3
 8001290:	08fa      	lsrs	r2, r7, #3
 8001292:	e5e0      	b.n	8000e56 <__aeabi_ddiv+0xe6>
 8001294:	2800      	cmp	r0, #0
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x52a>
 8001298:	e5d7      	b.n	8000e4a <__aeabi_ddiv+0xda>
 800129a:	1871      	adds	r1, r6, r1
 800129c:	1e53      	subs	r3, r2, #1
 800129e:	42b1      	cmp	r1, r6
 80012a0:	d327      	bcc.n	80012f2 <__aeabi_ddiv+0x582>
 80012a2:	42a9      	cmp	r1, r5
 80012a4:	d315      	bcc.n	80012d2 <__aeabi_ddiv+0x562>
 80012a6:	d058      	beq.n	800135a <__aeabi_ddiv+0x5ea>
 80012a8:	001a      	movs	r2, r3
 80012aa:	e773      	b.n	8001194 <__aeabi_ddiv+0x424>
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_ddiv+0x542>
 80012b0:	e604      	b.n	8000ebc <__aeabi_ddiv+0x14c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	2200      	movs	r2, #0
 80012b6:	449b      	add	fp, r3
 80012b8:	e5cd      	b.n	8000e56 <__aeabi_ddiv+0xe6>
 80012ba:	2302      	movs	r3, #2
 80012bc:	4447      	add	r7, r8
 80012be:	4547      	cmp	r7, r8
 80012c0:	4189      	sbcs	r1, r1
 80012c2:	425b      	negs	r3, r3
 80012c4:	469c      	mov	ip, r3
 80012c6:	4249      	negs	r1, r1
 80012c8:	1989      	adds	r1, r1, r6
 80012ca:	190c      	adds	r4, r1, r4
 80012cc:	44e3      	add	fp, ip
 80012ce:	1a24      	subs	r4, r4, r0
 80012d0:	e703      	b.n	80010da <__aeabi_ddiv+0x36a>
 80012d2:	4643      	mov	r3, r8
 80012d4:	005f      	lsls	r7, r3, #1
 80012d6:	4547      	cmp	r7, r8
 80012d8:	419b      	sbcs	r3, r3
 80012da:	46b8      	mov	r8, r7
 80012dc:	425b      	negs	r3, r3
 80012de:	199e      	adds	r6, r3, r6
 80012e0:	3a02      	subs	r2, #2
 80012e2:	1989      	adds	r1, r1, r6
 80012e4:	42a9      	cmp	r1, r5
 80012e6:	d000      	beq.n	80012ea <__aeabi_ddiv+0x57a>
 80012e8:	e754      	b.n	8001194 <__aeabi_ddiv+0x424>
 80012ea:	4540      	cmp	r0, r8
 80012ec:	d000      	beq.n	80012f0 <__aeabi_ddiv+0x580>
 80012ee:	e751      	b.n	8001194 <__aeabi_ddiv+0x424>
 80012f0:	e5ab      	b.n	8000e4a <__aeabi_ddiv+0xda>
 80012f2:	001a      	movs	r2, r3
 80012f4:	e7f6      	b.n	80012e4 <__aeabi_ddiv+0x574>
 80012f6:	211f      	movs	r1, #31
 80012f8:	465f      	mov	r7, fp
 80012fa:	4249      	negs	r1, r1
 80012fc:	1b0c      	subs	r4, r1, r4
 80012fe:	40e7      	lsrs	r7, r4
 8001300:	2b20      	cmp	r3, #32
 8001302:	d007      	beq.n	8001314 <__aeabi_ddiv+0x5a4>
 8001304:	491a      	ldr	r1, [pc, #104]	; (8001370 <__aeabi_ddiv+0x600>)
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	468c      	mov	ip, r1
 800130a:	4463      	add	r3, ip
 800130c:	0018      	movs	r0, r3
 800130e:	465b      	mov	r3, fp
 8001310:	4083      	lsls	r3, r0
 8001312:	431a      	orrs	r2, r3
 8001314:	1e50      	subs	r0, r2, #1
 8001316:	4182      	sbcs	r2, r0
 8001318:	433a      	orrs	r2, r7
 800131a:	2707      	movs	r7, #7
 800131c:	2300      	movs	r3, #0
 800131e:	4017      	ands	r7, r2
 8001320:	d009      	beq.n	8001336 <__aeabi_ddiv+0x5c6>
 8001322:	210f      	movs	r1, #15
 8001324:	2300      	movs	r3, #0
 8001326:	4011      	ands	r1, r2
 8001328:	0014      	movs	r4, r2
 800132a:	2904      	cmp	r1, #4
 800132c:	d195      	bne.n	800125a <__aeabi_ddiv+0x4ea>
 800132e:	0022      	movs	r2, r4
 8001330:	075f      	lsls	r7, r3, #29
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	0b1b      	lsrs	r3, r3, #12
 8001336:	08d2      	lsrs	r2, r2, #3
 8001338:	4317      	orrs	r7, r2
 800133a:	2200      	movs	r2, #0
 800133c:	e5a6      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	4659      	mov	r1, fp
 8001342:	031b      	lsls	r3, r3, #12
 8001344:	430b      	orrs	r3, r1
 8001346:	031b      	lsls	r3, r3, #12
 8001348:	0017      	movs	r7, r2
 800134a:	0b1b      	lsrs	r3, r3, #12
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <__aeabi_ddiv+0x5f8>)
 800134e:	e59d      	b.n	8000e8c <__aeabi_ddiv+0x11c>
 8001350:	42bd      	cmp	r5, r7
 8001352:	d8b2      	bhi.n	80012ba <__aeabi_ddiv+0x54a>
 8001354:	469b      	mov	fp, r3
 8001356:	2400      	movs	r4, #0
 8001358:	e6bf      	b.n	80010da <__aeabi_ddiv+0x36a>
 800135a:	4580      	cmp	r8, r0
 800135c:	d3b9      	bcc.n	80012d2 <__aeabi_ddiv+0x562>
 800135e:	001a      	movs	r2, r3
 8001360:	e7c3      	b.n	80012ea <__aeabi_ddiv+0x57a>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	000003ff 	.word	0x000003ff
 8001368:	000007ff 	.word	0x000007ff
 800136c:	0000041e 	.word	0x0000041e
 8001370:	0000043e 	.word	0x0000043e

08001374 <__eqdf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464f      	mov	r7, r9
 8001378:	4646      	mov	r6, r8
 800137a:	46d6      	mov	lr, sl
 800137c:	4684      	mov	ip, r0
 800137e:	b5c0      	push	{r6, r7, lr}
 8001380:	4680      	mov	r8, r0
 8001382:	4e19      	ldr	r6, [pc, #100]	; (80013e8 <__eqdf2+0x74>)
 8001384:	0318      	lsls	r0, r3, #12
 8001386:	030f      	lsls	r7, r1, #12
 8001388:	004d      	lsls	r5, r1, #1
 800138a:	0b00      	lsrs	r0, r0, #12
 800138c:	005c      	lsls	r4, r3, #1
 800138e:	4682      	mov	sl, r0
 8001390:	0b3f      	lsrs	r7, r7, #12
 8001392:	0d6d      	lsrs	r5, r5, #21
 8001394:	0fc9      	lsrs	r1, r1, #31
 8001396:	4691      	mov	r9, r2
 8001398:	0d64      	lsrs	r4, r4, #21
 800139a:	0fdb      	lsrs	r3, r3, #31
 800139c:	2001      	movs	r0, #1
 800139e:	42b5      	cmp	r5, r6
 80013a0:	d00a      	beq.n	80013b8 <__eqdf2+0x44>
 80013a2:	42b4      	cmp	r4, r6
 80013a4:	d003      	beq.n	80013ae <__eqdf2+0x3a>
 80013a6:	42a5      	cmp	r5, r4
 80013a8:	d101      	bne.n	80013ae <__eqdf2+0x3a>
 80013aa:	4557      	cmp	r7, sl
 80013ac:	d00c      	beq.n	80013c8 <__eqdf2+0x54>
 80013ae:	bc1c      	pop	{r2, r3, r4}
 80013b0:	4690      	mov	r8, r2
 80013b2:	4699      	mov	r9, r3
 80013b4:	46a2      	mov	sl, r4
 80013b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b8:	4666      	mov	r6, ip
 80013ba:	433e      	orrs	r6, r7
 80013bc:	d1f7      	bne.n	80013ae <__eqdf2+0x3a>
 80013be:	42ac      	cmp	r4, r5
 80013c0:	d1f5      	bne.n	80013ae <__eqdf2+0x3a>
 80013c2:	4654      	mov	r4, sl
 80013c4:	4314      	orrs	r4, r2
 80013c6:	d1f2      	bne.n	80013ae <__eqdf2+0x3a>
 80013c8:	2001      	movs	r0, #1
 80013ca:	45c8      	cmp	r8, r9
 80013cc:	d1ef      	bne.n	80013ae <__eqdf2+0x3a>
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d007      	beq.n	80013e2 <__eqdf2+0x6e>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d1eb      	bne.n	80013ae <__eqdf2+0x3a>
 80013d6:	4663      	mov	r3, ip
 80013d8:	431f      	orrs	r7, r3
 80013da:	0038      	movs	r0, r7
 80013dc:	1e47      	subs	r7, r0, #1
 80013de:	41b8      	sbcs	r0, r7
 80013e0:	e7e5      	b.n	80013ae <__eqdf2+0x3a>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e7e3      	b.n	80013ae <__eqdf2+0x3a>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__gedf2>:
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	464f      	mov	r7, r9
 80013f0:	4646      	mov	r6, r8
 80013f2:	46d6      	mov	lr, sl
 80013f4:	004d      	lsls	r5, r1, #1
 80013f6:	b5c0      	push	{r6, r7, lr}
 80013f8:	030e      	lsls	r6, r1, #12
 80013fa:	0fc9      	lsrs	r1, r1, #31
 80013fc:	468a      	mov	sl, r1
 80013fe:	492c      	ldr	r1, [pc, #176]	; (80014b0 <__gedf2+0xc4>)
 8001400:	031f      	lsls	r7, r3, #12
 8001402:	005c      	lsls	r4, r3, #1
 8001404:	4680      	mov	r8, r0
 8001406:	0b36      	lsrs	r6, r6, #12
 8001408:	0d6d      	lsrs	r5, r5, #21
 800140a:	4691      	mov	r9, r2
 800140c:	0b3f      	lsrs	r7, r7, #12
 800140e:	0d64      	lsrs	r4, r4, #21
 8001410:	0fdb      	lsrs	r3, r3, #31
 8001412:	428d      	cmp	r5, r1
 8001414:	d01e      	beq.n	8001454 <__gedf2+0x68>
 8001416:	428c      	cmp	r4, r1
 8001418:	d016      	beq.n	8001448 <__gedf2+0x5c>
 800141a:	2d00      	cmp	r5, #0
 800141c:	d11e      	bne.n	800145c <__gedf2+0x70>
 800141e:	4330      	orrs	r0, r6
 8001420:	4684      	mov	ip, r0
 8001422:	2c00      	cmp	r4, #0
 8001424:	d101      	bne.n	800142a <__gedf2+0x3e>
 8001426:	433a      	orrs	r2, r7
 8001428:	d023      	beq.n	8001472 <__gedf2+0x86>
 800142a:	4662      	mov	r2, ip
 800142c:	2a00      	cmp	r2, #0
 800142e:	d01a      	beq.n	8001466 <__gedf2+0x7a>
 8001430:	459a      	cmp	sl, r3
 8001432:	d029      	beq.n	8001488 <__gedf2+0x9c>
 8001434:	4651      	mov	r1, sl
 8001436:	2002      	movs	r0, #2
 8001438:	3901      	subs	r1, #1
 800143a:	4008      	ands	r0, r1
 800143c:	3801      	subs	r0, #1
 800143e:	bc1c      	pop	{r2, r3, r4}
 8001440:	4690      	mov	r8, r2
 8001442:	4699      	mov	r9, r3
 8001444:	46a2      	mov	sl, r4
 8001446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001448:	0039      	movs	r1, r7
 800144a:	4311      	orrs	r1, r2
 800144c:	d0e5      	beq.n	800141a <__gedf2+0x2e>
 800144e:	2002      	movs	r0, #2
 8001450:	4240      	negs	r0, r0
 8001452:	e7f4      	b.n	800143e <__gedf2+0x52>
 8001454:	4330      	orrs	r0, r6
 8001456:	d1fa      	bne.n	800144e <__gedf2+0x62>
 8001458:	42ac      	cmp	r4, r5
 800145a:	d00f      	beq.n	800147c <__gedf2+0x90>
 800145c:	2c00      	cmp	r4, #0
 800145e:	d10f      	bne.n	8001480 <__gedf2+0x94>
 8001460:	433a      	orrs	r2, r7
 8001462:	d0e7      	beq.n	8001434 <__gedf2+0x48>
 8001464:	e00c      	b.n	8001480 <__gedf2+0x94>
 8001466:	2201      	movs	r2, #1
 8001468:	3b01      	subs	r3, #1
 800146a:	4393      	bics	r3, r2
 800146c:	0018      	movs	r0, r3
 800146e:	3001      	adds	r0, #1
 8001470:	e7e5      	b.n	800143e <__gedf2+0x52>
 8001472:	4663      	mov	r3, ip
 8001474:	2000      	movs	r0, #0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0e1      	beq.n	800143e <__gedf2+0x52>
 800147a:	e7db      	b.n	8001434 <__gedf2+0x48>
 800147c:	433a      	orrs	r2, r7
 800147e:	d1e6      	bne.n	800144e <__gedf2+0x62>
 8001480:	459a      	cmp	sl, r3
 8001482:	d1d7      	bne.n	8001434 <__gedf2+0x48>
 8001484:	42a5      	cmp	r5, r4
 8001486:	dcd5      	bgt.n	8001434 <__gedf2+0x48>
 8001488:	42a5      	cmp	r5, r4
 800148a:	db05      	blt.n	8001498 <__gedf2+0xac>
 800148c:	42be      	cmp	r6, r7
 800148e:	d8d1      	bhi.n	8001434 <__gedf2+0x48>
 8001490:	d008      	beq.n	80014a4 <__gedf2+0xb8>
 8001492:	2000      	movs	r0, #0
 8001494:	42be      	cmp	r6, r7
 8001496:	d2d2      	bcs.n	800143e <__gedf2+0x52>
 8001498:	4650      	mov	r0, sl
 800149a:	2301      	movs	r3, #1
 800149c:	3801      	subs	r0, #1
 800149e:	4398      	bics	r0, r3
 80014a0:	3001      	adds	r0, #1
 80014a2:	e7cc      	b.n	800143e <__gedf2+0x52>
 80014a4:	45c8      	cmp	r8, r9
 80014a6:	d8c5      	bhi.n	8001434 <__gedf2+0x48>
 80014a8:	2000      	movs	r0, #0
 80014aa:	45c8      	cmp	r8, r9
 80014ac:	d3f4      	bcc.n	8001498 <__gedf2+0xac>
 80014ae:	e7c6      	b.n	800143e <__gedf2+0x52>
 80014b0:	000007ff 	.word	0x000007ff

080014b4 <__ledf2>:
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	464f      	mov	r7, r9
 80014b8:	4646      	mov	r6, r8
 80014ba:	46d6      	mov	lr, sl
 80014bc:	004d      	lsls	r5, r1, #1
 80014be:	b5c0      	push	{r6, r7, lr}
 80014c0:	030e      	lsls	r6, r1, #12
 80014c2:	0fc9      	lsrs	r1, r1, #31
 80014c4:	468a      	mov	sl, r1
 80014c6:	492e      	ldr	r1, [pc, #184]	; (8001580 <__ledf2+0xcc>)
 80014c8:	031f      	lsls	r7, r3, #12
 80014ca:	005c      	lsls	r4, r3, #1
 80014cc:	4680      	mov	r8, r0
 80014ce:	0b36      	lsrs	r6, r6, #12
 80014d0:	0d6d      	lsrs	r5, r5, #21
 80014d2:	4691      	mov	r9, r2
 80014d4:	0b3f      	lsrs	r7, r7, #12
 80014d6:	0d64      	lsrs	r4, r4, #21
 80014d8:	0fdb      	lsrs	r3, r3, #31
 80014da:	428d      	cmp	r5, r1
 80014dc:	d018      	beq.n	8001510 <__ledf2+0x5c>
 80014de:	428c      	cmp	r4, r1
 80014e0:	d011      	beq.n	8001506 <__ledf2+0x52>
 80014e2:	2d00      	cmp	r5, #0
 80014e4:	d118      	bne.n	8001518 <__ledf2+0x64>
 80014e6:	4330      	orrs	r0, r6
 80014e8:	4684      	mov	ip, r0
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d11e      	bne.n	800152c <__ledf2+0x78>
 80014ee:	433a      	orrs	r2, r7
 80014f0:	d11c      	bne.n	800152c <__ledf2+0x78>
 80014f2:	4663      	mov	r3, ip
 80014f4:	2000      	movs	r0, #0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d030      	beq.n	800155c <__ledf2+0xa8>
 80014fa:	4651      	mov	r1, sl
 80014fc:	2002      	movs	r0, #2
 80014fe:	3901      	subs	r1, #1
 8001500:	4008      	ands	r0, r1
 8001502:	3801      	subs	r0, #1
 8001504:	e02a      	b.n	800155c <__ledf2+0xa8>
 8001506:	0039      	movs	r1, r7
 8001508:	4311      	orrs	r1, r2
 800150a:	d0ea      	beq.n	80014e2 <__ledf2+0x2e>
 800150c:	2002      	movs	r0, #2
 800150e:	e025      	b.n	800155c <__ledf2+0xa8>
 8001510:	4330      	orrs	r0, r6
 8001512:	d1fb      	bne.n	800150c <__ledf2+0x58>
 8001514:	42ac      	cmp	r4, r5
 8001516:	d026      	beq.n	8001566 <__ledf2+0xb2>
 8001518:	2c00      	cmp	r4, #0
 800151a:	d126      	bne.n	800156a <__ledf2+0xb6>
 800151c:	433a      	orrs	r2, r7
 800151e:	d124      	bne.n	800156a <__ledf2+0xb6>
 8001520:	4651      	mov	r1, sl
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	e017      	b.n	800155c <__ledf2+0xa8>
 800152c:	4662      	mov	r2, ip
 800152e:	2a00      	cmp	r2, #0
 8001530:	d00f      	beq.n	8001552 <__ledf2+0x9e>
 8001532:	459a      	cmp	sl, r3
 8001534:	d1e1      	bne.n	80014fa <__ledf2+0x46>
 8001536:	42a5      	cmp	r5, r4
 8001538:	db05      	blt.n	8001546 <__ledf2+0x92>
 800153a:	42be      	cmp	r6, r7
 800153c:	d8dd      	bhi.n	80014fa <__ledf2+0x46>
 800153e:	d019      	beq.n	8001574 <__ledf2+0xc0>
 8001540:	2000      	movs	r0, #0
 8001542:	42be      	cmp	r6, r7
 8001544:	d20a      	bcs.n	800155c <__ledf2+0xa8>
 8001546:	4650      	mov	r0, sl
 8001548:	2301      	movs	r3, #1
 800154a:	3801      	subs	r0, #1
 800154c:	4398      	bics	r0, r3
 800154e:	3001      	adds	r0, #1
 8001550:	e004      	b.n	800155c <__ledf2+0xa8>
 8001552:	2201      	movs	r2, #1
 8001554:	3b01      	subs	r3, #1
 8001556:	4393      	bics	r3, r2
 8001558:	0018      	movs	r0, r3
 800155a:	3001      	adds	r0, #1
 800155c:	bc1c      	pop	{r2, r3, r4}
 800155e:	4690      	mov	r8, r2
 8001560:	4699      	mov	r9, r3
 8001562:	46a2      	mov	sl, r4
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001566:	433a      	orrs	r2, r7
 8001568:	d1d0      	bne.n	800150c <__ledf2+0x58>
 800156a:	459a      	cmp	sl, r3
 800156c:	d1c5      	bne.n	80014fa <__ledf2+0x46>
 800156e:	42a5      	cmp	r5, r4
 8001570:	dcc3      	bgt.n	80014fa <__ledf2+0x46>
 8001572:	e7e0      	b.n	8001536 <__ledf2+0x82>
 8001574:	45c8      	cmp	r8, r9
 8001576:	d8c0      	bhi.n	80014fa <__ledf2+0x46>
 8001578:	2000      	movs	r0, #0
 800157a:	45c8      	cmp	r8, r9
 800157c:	d3e3      	bcc.n	8001546 <__ledf2+0x92>
 800157e:	e7ed      	b.n	800155c <__ledf2+0xa8>
 8001580:	000007ff 	.word	0x000007ff

08001584 <__aeabi_dmul>:
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4657      	mov	r7, sl
 8001588:	46de      	mov	lr, fp
 800158a:	464e      	mov	r6, r9
 800158c:	4645      	mov	r5, r8
 800158e:	b5e0      	push	{r5, r6, r7, lr}
 8001590:	4683      	mov	fp, r0
 8001592:	0006      	movs	r6, r0
 8001594:	030f      	lsls	r7, r1, #12
 8001596:	0048      	lsls	r0, r1, #1
 8001598:	b087      	sub	sp, #28
 800159a:	4692      	mov	sl, r2
 800159c:	001d      	movs	r5, r3
 800159e:	0b3f      	lsrs	r7, r7, #12
 80015a0:	0d40      	lsrs	r0, r0, #21
 80015a2:	0fcc      	lsrs	r4, r1, #31
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x26>
 80015a8:	e06f      	b.n	800168a <__aeabi_dmul+0x106>
 80015aa:	4bde      	ldr	r3, [pc, #888]	; (8001924 <__aeabi_dmul+0x3a0>)
 80015ac:	4298      	cmp	r0, r3
 80015ae:	d038      	beq.n	8001622 <__aeabi_dmul+0x9e>
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	00ff      	lsls	r7, r7, #3
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	431f      	orrs	r7, r3
 80015b8:	0f73      	lsrs	r3, r6, #29
 80015ba:	433b      	orrs	r3, r7
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	4bda      	ldr	r3, [pc, #872]	; (8001928 <__aeabi_dmul+0x3a4>)
 80015c0:	2700      	movs	r7, #0
 80015c2:	4699      	mov	r9, r3
 80015c4:	2300      	movs	r3, #0
 80015c6:	469b      	mov	fp, r3
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	4481      	add	r9, r0
 80015cc:	032b      	lsls	r3, r5, #12
 80015ce:	0069      	lsls	r1, r5, #1
 80015d0:	0b1b      	lsrs	r3, r3, #12
 80015d2:	4652      	mov	r2, sl
 80015d4:	4698      	mov	r8, r3
 80015d6:	0d49      	lsrs	r1, r1, #21
 80015d8:	0fed      	lsrs	r5, r5, #31
 80015da:	2900      	cmp	r1, #0
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dmul+0x5c>
 80015de:	e085      	b.n	80016ec <__aeabi_dmul+0x168>
 80015e0:	4bd0      	ldr	r3, [pc, #832]	; (8001924 <__aeabi_dmul+0x3a0>)
 80015e2:	4299      	cmp	r1, r3
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dmul+0x64>
 80015e6:	e073      	b.n	80016d0 <__aeabi_dmul+0x14c>
 80015e8:	4643      	mov	r3, r8
 80015ea:	00da      	lsls	r2, r3, #3
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	4313      	orrs	r3, r2
 80015f2:	4652      	mov	r2, sl
 80015f4:	48cc      	ldr	r0, [pc, #816]	; (8001928 <__aeabi_dmul+0x3a4>)
 80015f6:	0f52      	lsrs	r2, r2, #29
 80015f8:	4684      	mov	ip, r0
 80015fa:	4313      	orrs	r3, r2
 80015fc:	4652      	mov	r2, sl
 80015fe:	2000      	movs	r0, #0
 8001600:	4461      	add	r1, ip
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	4489      	add	r9, r1
 8001606:	0021      	movs	r1, r4
 8001608:	4069      	eors	r1, r5
 800160a:	9100      	str	r1, [sp, #0]
 800160c:	468c      	mov	ip, r1
 800160e:	2101      	movs	r1, #1
 8001610:	4449      	add	r1, r9
 8001612:	468a      	mov	sl, r1
 8001614:	2f0f      	cmp	r7, #15
 8001616:	d900      	bls.n	800161a <__aeabi_dmul+0x96>
 8001618:	e090      	b.n	800173c <__aeabi_dmul+0x1b8>
 800161a:	49c4      	ldr	r1, [pc, #784]	; (800192c <__aeabi_dmul+0x3a8>)
 800161c:	00bf      	lsls	r7, r7, #2
 800161e:	59cf      	ldr	r7, [r1, r7]
 8001620:	46bf      	mov	pc, r7
 8001622:	465b      	mov	r3, fp
 8001624:	433b      	orrs	r3, r7
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	d000      	beq.n	800162c <__aeabi_dmul+0xa8>
 800162a:	e16a      	b.n	8001902 <__aeabi_dmul+0x37e>
 800162c:	2302      	movs	r3, #2
 800162e:	2708      	movs	r7, #8
 8001630:	2600      	movs	r6, #0
 8001632:	4681      	mov	r9, r0
 8001634:	469b      	mov	fp, r3
 8001636:	e7c9      	b.n	80015cc <__aeabi_dmul+0x48>
 8001638:	0032      	movs	r2, r6
 800163a:	4658      	mov	r0, fp
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	4661      	mov	r1, ip
 8001640:	9100      	str	r1, [sp, #0]
 8001642:	2802      	cmp	r0, #2
 8001644:	d100      	bne.n	8001648 <__aeabi_dmul+0xc4>
 8001646:	e075      	b.n	8001734 <__aeabi_dmul+0x1b0>
 8001648:	2803      	cmp	r0, #3
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0xca>
 800164c:	e1fe      	b.n	8001a4c <__aeabi_dmul+0x4c8>
 800164e:	2801      	cmp	r0, #1
 8001650:	d000      	beq.n	8001654 <__aeabi_dmul+0xd0>
 8001652:	e12c      	b.n	80018ae <__aeabi_dmul+0x32a>
 8001654:	2300      	movs	r3, #0
 8001656:	2700      	movs	r7, #0
 8001658:	2600      	movs	r6, #0
 800165a:	2500      	movs	r5, #0
 800165c:	033f      	lsls	r7, r7, #12
 800165e:	0d2a      	lsrs	r2, r5, #20
 8001660:	0b3f      	lsrs	r7, r7, #12
 8001662:	48b3      	ldr	r0, [pc, #716]	; (8001930 <__aeabi_dmul+0x3ac>)
 8001664:	0512      	lsls	r2, r2, #20
 8001666:	433a      	orrs	r2, r7
 8001668:	4002      	ands	r2, r0
 800166a:	051b      	lsls	r3, r3, #20
 800166c:	4313      	orrs	r3, r2
 800166e:	9a00      	ldr	r2, [sp, #0]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	07d1      	lsls	r1, r2, #31
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	430b      	orrs	r3, r1
 8001678:	0030      	movs	r0, r6
 800167a:	0019      	movs	r1, r3
 800167c:	b007      	add	sp, #28
 800167e:	bc3c      	pop	{r2, r3, r4, r5}
 8001680:	4690      	mov	r8, r2
 8001682:	4699      	mov	r9, r3
 8001684:	46a2      	mov	sl, r4
 8001686:	46ab      	mov	fp, r5
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	465b      	mov	r3, fp
 800168c:	433b      	orrs	r3, r7
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	d100      	bne.n	8001694 <__aeabi_dmul+0x110>
 8001692:	e12f      	b.n	80018f4 <__aeabi_dmul+0x370>
 8001694:	2f00      	cmp	r7, #0
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x116>
 8001698:	e1a5      	b.n	80019e6 <__aeabi_dmul+0x462>
 800169a:	0038      	movs	r0, r7
 800169c:	f000 fec0 	bl	8002420 <__clzsi2>
 80016a0:	0003      	movs	r3, r0
 80016a2:	3b0b      	subs	r3, #11
 80016a4:	2b1c      	cmp	r3, #28
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dmul+0x126>
 80016a8:	e196      	b.n	80019d8 <__aeabi_dmul+0x454>
 80016aa:	221d      	movs	r2, #29
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	465a      	mov	r2, fp
 80016b0:	0001      	movs	r1, r0
 80016b2:	40da      	lsrs	r2, r3
 80016b4:	465e      	mov	r6, fp
 80016b6:	3908      	subs	r1, #8
 80016b8:	408f      	lsls	r7, r1
 80016ba:	0013      	movs	r3, r2
 80016bc:	408e      	lsls	r6, r1
 80016be:	433b      	orrs	r3, r7
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	4b9c      	ldr	r3, [pc, #624]	; (8001934 <__aeabi_dmul+0x3b0>)
 80016c4:	2700      	movs	r7, #0
 80016c6:	1a1b      	subs	r3, r3, r0
 80016c8:	4699      	mov	r9, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	469b      	mov	fp, r3
 80016ce:	e77d      	b.n	80015cc <__aeabi_dmul+0x48>
 80016d0:	4641      	mov	r1, r8
 80016d2:	4653      	mov	r3, sl
 80016d4:	430b      	orrs	r3, r1
 80016d6:	4993      	ldr	r1, [pc, #588]	; (8001924 <__aeabi_dmul+0x3a0>)
 80016d8:	468c      	mov	ip, r1
 80016da:	44e1      	add	r9, ip
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d000      	beq.n	80016e2 <__aeabi_dmul+0x15e>
 80016e0:	e11a      	b.n	8001918 <__aeabi_dmul+0x394>
 80016e2:	2202      	movs	r2, #2
 80016e4:	2002      	movs	r0, #2
 80016e6:	4317      	orrs	r7, r2
 80016e8:	2200      	movs	r2, #0
 80016ea:	e78c      	b.n	8001606 <__aeabi_dmul+0x82>
 80016ec:	4313      	orrs	r3, r2
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x16e>
 80016f0:	e10d      	b.n	800190e <__aeabi_dmul+0x38a>
 80016f2:	4643      	mov	r3, r8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d100      	bne.n	80016fa <__aeabi_dmul+0x176>
 80016f8:	e181      	b.n	80019fe <__aeabi_dmul+0x47a>
 80016fa:	4640      	mov	r0, r8
 80016fc:	f000 fe90 	bl	8002420 <__clzsi2>
 8001700:	0002      	movs	r2, r0
 8001702:	3a0b      	subs	r2, #11
 8001704:	2a1c      	cmp	r2, #28
 8001706:	dd00      	ble.n	800170a <__aeabi_dmul+0x186>
 8001708:	e172      	b.n	80019f0 <__aeabi_dmul+0x46c>
 800170a:	0001      	movs	r1, r0
 800170c:	4643      	mov	r3, r8
 800170e:	3908      	subs	r1, #8
 8001710:	408b      	lsls	r3, r1
 8001712:	4698      	mov	r8, r3
 8001714:	231d      	movs	r3, #29
 8001716:	1a9a      	subs	r2, r3, r2
 8001718:	4653      	mov	r3, sl
 800171a:	40d3      	lsrs	r3, r2
 800171c:	001a      	movs	r2, r3
 800171e:	4643      	mov	r3, r8
 8001720:	4313      	orrs	r3, r2
 8001722:	4652      	mov	r2, sl
 8001724:	408a      	lsls	r2, r1
 8001726:	4649      	mov	r1, r9
 8001728:	1a08      	subs	r0, r1, r0
 800172a:	4982      	ldr	r1, [pc, #520]	; (8001934 <__aeabi_dmul+0x3b0>)
 800172c:	4689      	mov	r9, r1
 800172e:	4481      	add	r9, r0
 8001730:	2000      	movs	r0, #0
 8001732:	e768      	b.n	8001606 <__aeabi_dmul+0x82>
 8001734:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <__aeabi_dmul+0x3a0>)
 8001736:	2700      	movs	r7, #0
 8001738:	2600      	movs	r6, #0
 800173a:	e78e      	b.n	800165a <__aeabi_dmul+0xd6>
 800173c:	0c14      	lsrs	r4, r2, #16
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	0c12      	lsrs	r2, r2, #16
 8001742:	0011      	movs	r1, r2
 8001744:	0c37      	lsrs	r7, r6, #16
 8001746:	0436      	lsls	r6, r6, #16
 8001748:	0c35      	lsrs	r5, r6, #16
 800174a:	4379      	muls	r1, r7
 800174c:	0028      	movs	r0, r5
 800174e:	468c      	mov	ip, r1
 8001750:	002e      	movs	r6, r5
 8001752:	4360      	muls	r0, r4
 8001754:	4460      	add	r0, ip
 8001756:	4683      	mov	fp, r0
 8001758:	4356      	muls	r6, r2
 800175a:	0021      	movs	r1, r4
 800175c:	0c30      	lsrs	r0, r6, #16
 800175e:	4680      	mov	r8, r0
 8001760:	4658      	mov	r0, fp
 8001762:	4379      	muls	r1, r7
 8001764:	4440      	add	r0, r8
 8001766:	9102      	str	r1, [sp, #8]
 8001768:	4584      	cmp	ip, r0
 800176a:	d906      	bls.n	800177a <__aeabi_dmul+0x1f6>
 800176c:	4688      	mov	r8, r1
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	468c      	mov	ip, r1
 8001774:	44e0      	add	r8, ip
 8001776:	4641      	mov	r1, r8
 8001778:	9102      	str	r1, [sp, #8]
 800177a:	0436      	lsls	r6, r6, #16
 800177c:	0c01      	lsrs	r1, r0, #16
 800177e:	0c36      	lsrs	r6, r6, #16
 8001780:	0400      	lsls	r0, r0, #16
 8001782:	468b      	mov	fp, r1
 8001784:	1981      	adds	r1, r0, r6
 8001786:	0c1e      	lsrs	r6, r3, #16
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	9103      	str	r1, [sp, #12]
 800178e:	0019      	movs	r1, r3
 8001790:	4379      	muls	r1, r7
 8001792:	468c      	mov	ip, r1
 8001794:	0028      	movs	r0, r5
 8001796:	4375      	muls	r5, r6
 8001798:	4465      	add	r5, ip
 800179a:	46a8      	mov	r8, r5
 800179c:	4358      	muls	r0, r3
 800179e:	0c05      	lsrs	r5, r0, #16
 80017a0:	4445      	add	r5, r8
 80017a2:	4377      	muls	r7, r6
 80017a4:	42a9      	cmp	r1, r5
 80017a6:	d903      	bls.n	80017b0 <__aeabi_dmul+0x22c>
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0249      	lsls	r1, r1, #9
 80017ac:	468c      	mov	ip, r1
 80017ae:	4467      	add	r7, ip
 80017b0:	0c29      	lsrs	r1, r5, #16
 80017b2:	468c      	mov	ip, r1
 80017b4:	0039      	movs	r1, r7
 80017b6:	0400      	lsls	r0, r0, #16
 80017b8:	0c00      	lsrs	r0, r0, #16
 80017ba:	042d      	lsls	r5, r5, #16
 80017bc:	182d      	adds	r5, r5, r0
 80017be:	4461      	add	r1, ip
 80017c0:	44ab      	add	fp, r5
 80017c2:	9105      	str	r1, [sp, #20]
 80017c4:	4659      	mov	r1, fp
 80017c6:	9104      	str	r1, [sp, #16]
 80017c8:	9901      	ldr	r1, [sp, #4]
 80017ca:	040f      	lsls	r7, r1, #16
 80017cc:	0c3f      	lsrs	r7, r7, #16
 80017ce:	0c08      	lsrs	r0, r1, #16
 80017d0:	0039      	movs	r1, r7
 80017d2:	4351      	muls	r1, r2
 80017d4:	4342      	muls	r2, r0
 80017d6:	4690      	mov	r8, r2
 80017d8:	0002      	movs	r2, r0
 80017da:	468c      	mov	ip, r1
 80017dc:	0c09      	lsrs	r1, r1, #16
 80017de:	468b      	mov	fp, r1
 80017e0:	4362      	muls	r2, r4
 80017e2:	437c      	muls	r4, r7
 80017e4:	4444      	add	r4, r8
 80017e6:	445c      	add	r4, fp
 80017e8:	45a0      	cmp	r8, r4
 80017ea:	d903      	bls.n	80017f4 <__aeabi_dmul+0x270>
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0249      	lsls	r1, r1, #9
 80017f0:	4688      	mov	r8, r1
 80017f2:	4442      	add	r2, r8
 80017f4:	0c21      	lsrs	r1, r4, #16
 80017f6:	4688      	mov	r8, r1
 80017f8:	4661      	mov	r1, ip
 80017fa:	0409      	lsls	r1, r1, #16
 80017fc:	0c09      	lsrs	r1, r1, #16
 80017fe:	468c      	mov	ip, r1
 8001800:	0039      	movs	r1, r7
 8001802:	4359      	muls	r1, r3
 8001804:	4343      	muls	r3, r0
 8001806:	4370      	muls	r0, r6
 8001808:	437e      	muls	r6, r7
 800180a:	0c0f      	lsrs	r7, r1, #16
 800180c:	18f6      	adds	r6, r6, r3
 800180e:	0424      	lsls	r4, r4, #16
 8001810:	19be      	adds	r6, r7, r6
 8001812:	4464      	add	r4, ip
 8001814:	4442      	add	r2, r8
 8001816:	468c      	mov	ip, r1
 8001818:	42b3      	cmp	r3, r6
 800181a:	d903      	bls.n	8001824 <__aeabi_dmul+0x2a0>
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	4698      	mov	r8, r3
 8001822:	4440      	add	r0, r8
 8001824:	9b02      	ldr	r3, [sp, #8]
 8001826:	4661      	mov	r1, ip
 8001828:	4698      	mov	r8, r3
 800182a:	9b04      	ldr	r3, [sp, #16]
 800182c:	0437      	lsls	r7, r6, #16
 800182e:	4443      	add	r3, r8
 8001830:	469b      	mov	fp, r3
 8001832:	45ab      	cmp	fp, r5
 8001834:	41ad      	sbcs	r5, r5
 8001836:	426b      	negs	r3, r5
 8001838:	040d      	lsls	r5, r1, #16
 800183a:	9905      	ldr	r1, [sp, #20]
 800183c:	0c2d      	lsrs	r5, r5, #16
 800183e:	468c      	mov	ip, r1
 8001840:	197f      	adds	r7, r7, r5
 8001842:	4467      	add	r7, ip
 8001844:	18fd      	adds	r5, r7, r3
 8001846:	46a8      	mov	r8, r5
 8001848:	465d      	mov	r5, fp
 800184a:	192d      	adds	r5, r5, r4
 800184c:	42a5      	cmp	r5, r4
 800184e:	41a4      	sbcs	r4, r4
 8001850:	4693      	mov	fp, r2
 8001852:	4264      	negs	r4, r4
 8001854:	46a4      	mov	ip, r4
 8001856:	44c3      	add	fp, r8
 8001858:	44dc      	add	ip, fp
 800185a:	428f      	cmp	r7, r1
 800185c:	41bf      	sbcs	r7, r7
 800185e:	4598      	cmp	r8, r3
 8001860:	419b      	sbcs	r3, r3
 8001862:	4593      	cmp	fp, r2
 8001864:	4192      	sbcs	r2, r2
 8001866:	45a4      	cmp	ip, r4
 8001868:	41a4      	sbcs	r4, r4
 800186a:	425b      	negs	r3, r3
 800186c:	427f      	negs	r7, r7
 800186e:	431f      	orrs	r7, r3
 8001870:	0c36      	lsrs	r6, r6, #16
 8001872:	4252      	negs	r2, r2
 8001874:	4264      	negs	r4, r4
 8001876:	19bf      	adds	r7, r7, r6
 8001878:	4322      	orrs	r2, r4
 800187a:	18bf      	adds	r7, r7, r2
 800187c:	4662      	mov	r2, ip
 800187e:	1838      	adds	r0, r7, r0
 8001880:	0243      	lsls	r3, r0, #9
 8001882:	0dd2      	lsrs	r2, r2, #23
 8001884:	9903      	ldr	r1, [sp, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	026a      	lsls	r2, r5, #9
 800188a:	430a      	orrs	r2, r1
 800188c:	1e50      	subs	r0, r2, #1
 800188e:	4182      	sbcs	r2, r0
 8001890:	4661      	mov	r1, ip
 8001892:	0ded      	lsrs	r5, r5, #23
 8001894:	432a      	orrs	r2, r5
 8001896:	024e      	lsls	r6, r1, #9
 8001898:	4332      	orrs	r2, r6
 800189a:	01d9      	lsls	r1, r3, #7
 800189c:	d400      	bmi.n	80018a0 <__aeabi_dmul+0x31c>
 800189e:	e0b3      	b.n	8001a08 <__aeabi_dmul+0x484>
 80018a0:	2601      	movs	r6, #1
 80018a2:	0850      	lsrs	r0, r2, #1
 80018a4:	4032      	ands	r2, r6
 80018a6:	4302      	orrs	r2, r0
 80018a8:	07de      	lsls	r6, r3, #31
 80018aa:	4332      	orrs	r2, r6
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	4c22      	ldr	r4, [pc, #136]	; (8001938 <__aeabi_dmul+0x3b4>)
 80018b0:	4454      	add	r4, sl
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	dd62      	ble.n	800197c <__aeabi_dmul+0x3f8>
 80018b6:	0751      	lsls	r1, r2, #29
 80018b8:	d009      	beq.n	80018ce <__aeabi_dmul+0x34a>
 80018ba:	200f      	movs	r0, #15
 80018bc:	4010      	ands	r0, r2
 80018be:	2804      	cmp	r0, #4
 80018c0:	d005      	beq.n	80018ce <__aeabi_dmul+0x34a>
 80018c2:	1d10      	adds	r0, r2, #4
 80018c4:	4290      	cmp	r0, r2
 80018c6:	4192      	sbcs	r2, r2
 80018c8:	4252      	negs	r2, r2
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	0002      	movs	r2, r0
 80018ce:	01d9      	lsls	r1, r3, #7
 80018d0:	d504      	bpl.n	80018dc <__aeabi_dmul+0x358>
 80018d2:	2480      	movs	r4, #128	; 0x80
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <__aeabi_dmul+0x3b8>)
 80018d6:	00e4      	lsls	r4, r4, #3
 80018d8:	4003      	ands	r3, r0
 80018da:	4454      	add	r4, sl
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <__aeabi_dmul+0x3bc>)
 80018de:	4284      	cmp	r4, r0
 80018e0:	dd00      	ble.n	80018e4 <__aeabi_dmul+0x360>
 80018e2:	e727      	b.n	8001734 <__aeabi_dmul+0x1b0>
 80018e4:	075e      	lsls	r6, r3, #29
 80018e6:	025b      	lsls	r3, r3, #9
 80018e8:	08d2      	lsrs	r2, r2, #3
 80018ea:	0b1f      	lsrs	r7, r3, #12
 80018ec:	0563      	lsls	r3, r4, #21
 80018ee:	4316      	orrs	r6, r2
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	e6b2      	b.n	800165a <__aeabi_dmul+0xd6>
 80018f4:	2300      	movs	r3, #0
 80018f6:	4699      	mov	r9, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	2704      	movs	r7, #4
 80018fc:	2600      	movs	r6, #0
 80018fe:	469b      	mov	fp, r3
 8001900:	e664      	b.n	80015cc <__aeabi_dmul+0x48>
 8001902:	2303      	movs	r3, #3
 8001904:	9701      	str	r7, [sp, #4]
 8001906:	4681      	mov	r9, r0
 8001908:	270c      	movs	r7, #12
 800190a:	469b      	mov	fp, r3
 800190c:	e65e      	b.n	80015cc <__aeabi_dmul+0x48>
 800190e:	2201      	movs	r2, #1
 8001910:	2001      	movs	r0, #1
 8001912:	4317      	orrs	r7, r2
 8001914:	2200      	movs	r2, #0
 8001916:	e676      	b.n	8001606 <__aeabi_dmul+0x82>
 8001918:	2303      	movs	r3, #3
 800191a:	2003      	movs	r0, #3
 800191c:	431f      	orrs	r7, r3
 800191e:	4643      	mov	r3, r8
 8001920:	e671      	b.n	8001606 <__aeabi_dmul+0x82>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff
 8001928:	fffffc01 	.word	0xfffffc01
 800192c:	080083f4 	.word	0x080083f4
 8001930:	800fffff 	.word	0x800fffff
 8001934:	fffffc0d 	.word	0xfffffc0d
 8001938:	000003ff 	.word	0x000003ff
 800193c:	feffffff 	.word	0xfeffffff
 8001940:	000007fe 	.word	0x000007fe
 8001944:	2300      	movs	r3, #0
 8001946:	2780      	movs	r7, #128	; 0x80
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	033f      	lsls	r7, r7, #12
 800194c:	2600      	movs	r6, #0
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <__aeabi_dmul+0x4d8>)
 8001950:	e683      	b.n	800165a <__aeabi_dmul+0xd6>
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	0032      	movs	r2, r6
 8001956:	46a4      	mov	ip, r4
 8001958:	4658      	mov	r0, fp
 800195a:	e670      	b.n	800163e <__aeabi_dmul+0xba>
 800195c:	46ac      	mov	ip, r5
 800195e:	e66e      	b.n	800163e <__aeabi_dmul+0xba>
 8001960:	2780      	movs	r7, #128	; 0x80
 8001962:	9901      	ldr	r1, [sp, #4]
 8001964:	033f      	lsls	r7, r7, #12
 8001966:	4239      	tst	r1, r7
 8001968:	d02d      	beq.n	80019c6 <__aeabi_dmul+0x442>
 800196a:	423b      	tst	r3, r7
 800196c:	d12b      	bne.n	80019c6 <__aeabi_dmul+0x442>
 800196e:	431f      	orrs	r7, r3
 8001970:	033f      	lsls	r7, r7, #12
 8001972:	0b3f      	lsrs	r7, r7, #12
 8001974:	9500      	str	r5, [sp, #0]
 8001976:	0016      	movs	r6, r2
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <__aeabi_dmul+0x4d8>)
 800197a:	e66e      	b.n	800165a <__aeabi_dmul+0xd6>
 800197c:	2501      	movs	r5, #1
 800197e:	1b2d      	subs	r5, r5, r4
 8001980:	2d38      	cmp	r5, #56	; 0x38
 8001982:	dd00      	ble.n	8001986 <__aeabi_dmul+0x402>
 8001984:	e666      	b.n	8001654 <__aeabi_dmul+0xd0>
 8001986:	2d1f      	cmp	r5, #31
 8001988:	dc40      	bgt.n	8001a0c <__aeabi_dmul+0x488>
 800198a:	4835      	ldr	r0, [pc, #212]	; (8001a60 <__aeabi_dmul+0x4dc>)
 800198c:	001c      	movs	r4, r3
 800198e:	4450      	add	r0, sl
 8001990:	0016      	movs	r6, r2
 8001992:	4082      	lsls	r2, r0
 8001994:	4084      	lsls	r4, r0
 8001996:	40ee      	lsrs	r6, r5
 8001998:	1e50      	subs	r0, r2, #1
 800199a:	4182      	sbcs	r2, r0
 800199c:	4334      	orrs	r4, r6
 800199e:	4314      	orrs	r4, r2
 80019a0:	40eb      	lsrs	r3, r5
 80019a2:	0762      	lsls	r2, r4, #29
 80019a4:	d009      	beq.n	80019ba <__aeabi_dmul+0x436>
 80019a6:	220f      	movs	r2, #15
 80019a8:	4022      	ands	r2, r4
 80019aa:	2a04      	cmp	r2, #4
 80019ac:	d005      	beq.n	80019ba <__aeabi_dmul+0x436>
 80019ae:	0022      	movs	r2, r4
 80019b0:	1d14      	adds	r4, r2, #4
 80019b2:	4294      	cmp	r4, r2
 80019b4:	4180      	sbcs	r0, r0
 80019b6:	4240      	negs	r0, r0
 80019b8:	181b      	adds	r3, r3, r0
 80019ba:	021a      	lsls	r2, r3, #8
 80019bc:	d53e      	bpl.n	8001a3c <__aeabi_dmul+0x4b8>
 80019be:	2301      	movs	r3, #1
 80019c0:	2700      	movs	r7, #0
 80019c2:	2600      	movs	r6, #0
 80019c4:	e649      	b.n	800165a <__aeabi_dmul+0xd6>
 80019c6:	2780      	movs	r7, #128	; 0x80
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	033f      	lsls	r7, r7, #12
 80019cc:	431f      	orrs	r7, r3
 80019ce:	033f      	lsls	r7, r7, #12
 80019d0:	0b3f      	lsrs	r7, r7, #12
 80019d2:	9400      	str	r4, [sp, #0]
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <__aeabi_dmul+0x4d8>)
 80019d6:	e640      	b.n	800165a <__aeabi_dmul+0xd6>
 80019d8:	0003      	movs	r3, r0
 80019da:	465a      	mov	r2, fp
 80019dc:	3b28      	subs	r3, #40	; 0x28
 80019de:	409a      	lsls	r2, r3
 80019e0:	2600      	movs	r6, #0
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	e66d      	b.n	80016c2 <__aeabi_dmul+0x13e>
 80019e6:	4658      	mov	r0, fp
 80019e8:	f000 fd1a 	bl	8002420 <__clzsi2>
 80019ec:	3020      	adds	r0, #32
 80019ee:	e657      	b.n	80016a0 <__aeabi_dmul+0x11c>
 80019f0:	0003      	movs	r3, r0
 80019f2:	4652      	mov	r2, sl
 80019f4:	3b28      	subs	r3, #40	; 0x28
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	e693      	b.n	8001726 <__aeabi_dmul+0x1a2>
 80019fe:	4650      	mov	r0, sl
 8001a00:	f000 fd0e 	bl	8002420 <__clzsi2>
 8001a04:	3020      	adds	r0, #32
 8001a06:	e67b      	b.n	8001700 <__aeabi_dmul+0x17c>
 8001a08:	46ca      	mov	sl, r9
 8001a0a:	e750      	b.n	80018ae <__aeabi_dmul+0x32a>
 8001a0c:	201f      	movs	r0, #31
 8001a0e:	001e      	movs	r6, r3
 8001a10:	4240      	negs	r0, r0
 8001a12:	1b04      	subs	r4, r0, r4
 8001a14:	40e6      	lsrs	r6, r4
 8001a16:	2d20      	cmp	r5, #32
 8001a18:	d003      	beq.n	8001a22 <__aeabi_dmul+0x49e>
 8001a1a:	4c12      	ldr	r4, [pc, #72]	; (8001a64 <__aeabi_dmul+0x4e0>)
 8001a1c:	4454      	add	r4, sl
 8001a1e:	40a3      	lsls	r3, r4
 8001a20:	431a      	orrs	r2, r3
 8001a22:	1e50      	subs	r0, r2, #1
 8001a24:	4182      	sbcs	r2, r0
 8001a26:	4332      	orrs	r2, r6
 8001a28:	2607      	movs	r6, #7
 8001a2a:	2700      	movs	r7, #0
 8001a2c:	4016      	ands	r6, r2
 8001a2e:	d009      	beq.n	8001a44 <__aeabi_dmul+0x4c0>
 8001a30:	200f      	movs	r0, #15
 8001a32:	2300      	movs	r3, #0
 8001a34:	4010      	ands	r0, r2
 8001a36:	0014      	movs	r4, r2
 8001a38:	2804      	cmp	r0, #4
 8001a3a:	d1b9      	bne.n	80019b0 <__aeabi_dmul+0x42c>
 8001a3c:	0022      	movs	r2, r4
 8001a3e:	075e      	lsls	r6, r3, #29
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	0b1f      	lsrs	r7, r3, #12
 8001a44:	08d2      	lsrs	r2, r2, #3
 8001a46:	4316      	orrs	r6, r2
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e606      	b.n	800165a <__aeabi_dmul+0xd6>
 8001a4c:	2780      	movs	r7, #128	; 0x80
 8001a4e:	033f      	lsls	r7, r7, #12
 8001a50:	431f      	orrs	r7, r3
 8001a52:	033f      	lsls	r7, r7, #12
 8001a54:	0b3f      	lsrs	r7, r7, #12
 8001a56:	0016      	movs	r6, r2
 8001a58:	4b00      	ldr	r3, [pc, #0]	; (8001a5c <__aeabi_dmul+0x4d8>)
 8001a5a:	e5fe      	b.n	800165a <__aeabi_dmul+0xd6>
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	0000041e 	.word	0x0000041e
 8001a64:	0000043e 	.word	0x0000043e

08001a68 <__aeabi_dsub>:
 8001a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6a:	4657      	mov	r7, sl
 8001a6c:	464e      	mov	r6, r9
 8001a6e:	4645      	mov	r5, r8
 8001a70:	46de      	mov	lr, fp
 8001a72:	000c      	movs	r4, r1
 8001a74:	0309      	lsls	r1, r1, #12
 8001a76:	b5e0      	push	{r5, r6, r7, lr}
 8001a78:	0a49      	lsrs	r1, r1, #9
 8001a7a:	0f46      	lsrs	r6, r0, #29
 8001a7c:	005f      	lsls	r7, r3, #1
 8001a7e:	4331      	orrs	r1, r6
 8001a80:	031e      	lsls	r6, r3, #12
 8001a82:	0fdb      	lsrs	r3, r3, #31
 8001a84:	0a76      	lsrs	r6, r6, #9
 8001a86:	469b      	mov	fp, r3
 8001a88:	0f53      	lsrs	r3, r2, #29
 8001a8a:	4333      	orrs	r3, r6
 8001a8c:	4ec8      	ldr	r6, [pc, #800]	; (8001db0 <__aeabi_dsub+0x348>)
 8001a8e:	0065      	lsls	r5, r4, #1
 8001a90:	00c0      	lsls	r0, r0, #3
 8001a92:	0fe4      	lsrs	r4, r4, #31
 8001a94:	00d2      	lsls	r2, r2, #3
 8001a96:	0d6d      	lsrs	r5, r5, #21
 8001a98:	46a2      	mov	sl, r4
 8001a9a:	4681      	mov	r9, r0
 8001a9c:	0d7f      	lsrs	r7, r7, #21
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	42b7      	cmp	r7, r6
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dsub+0x40>
 8001aa6:	e0b9      	b.n	8001c1c <__aeabi_dsub+0x1b4>
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	2601      	movs	r6, #1
 8001aac:	4073      	eors	r3, r6
 8001aae:	469b      	mov	fp, r3
 8001ab0:	1bee      	subs	r6, r5, r7
 8001ab2:	45a3      	cmp	fp, r4
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x50>
 8001ab6:	e083      	b.n	8001bc0 <__aeabi_dsub+0x158>
 8001ab8:	2e00      	cmp	r6, #0
 8001aba:	dd63      	ble.n	8001b84 <__aeabi_dsub+0x11c>
 8001abc:	2f00      	cmp	r7, #0
 8001abe:	d000      	beq.n	8001ac2 <__aeabi_dsub+0x5a>
 8001ac0:	e0b1      	b.n	8001c26 <__aeabi_dsub+0x1be>
 8001ac2:	4663      	mov	r3, ip
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x62>
 8001ac8:	e123      	b.n	8001d12 <__aeabi_dsub+0x2aa>
 8001aca:	1e73      	subs	r3, r6, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x6a>
 8001ad0:	e1ba      	b.n	8001e48 <__aeabi_dsub+0x3e0>
 8001ad2:	1a86      	subs	r6, r0, r2
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	42b0      	cmp	r0, r6
 8001ad8:	4180      	sbcs	r0, r0
 8001ada:	2501      	movs	r5, #1
 8001adc:	1ac9      	subs	r1, r1, r3
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1a09      	subs	r1, r1, r0
 8001ae2:	020b      	lsls	r3, r1, #8
 8001ae4:	d400      	bmi.n	8001ae8 <__aeabi_dsub+0x80>
 8001ae6:	e147      	b.n	8001d78 <__aeabi_dsub+0x310>
 8001ae8:	0249      	lsls	r1, r1, #9
 8001aea:	0a4b      	lsrs	r3, r1, #9
 8001aec:	4698      	mov	r8, r3
 8001aee:	4643      	mov	r3, r8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x8e>
 8001af4:	e189      	b.n	8001e0a <__aeabi_dsub+0x3a2>
 8001af6:	4640      	mov	r0, r8
 8001af8:	f000 fc92 	bl	8002420 <__clzsi2>
 8001afc:	0003      	movs	r3, r0
 8001afe:	3b08      	subs	r3, #8
 8001b00:	2b1f      	cmp	r3, #31
 8001b02:	dd00      	ble.n	8001b06 <__aeabi_dsub+0x9e>
 8001b04:	e17c      	b.n	8001e00 <__aeabi_dsub+0x398>
 8001b06:	2220      	movs	r2, #32
 8001b08:	0030      	movs	r0, r6
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	40d0      	lsrs	r0, r2
 8001b10:	4099      	lsls	r1, r3
 8001b12:	0002      	movs	r2, r0
 8001b14:	409e      	lsls	r6, r3
 8001b16:	430a      	orrs	r2, r1
 8001b18:	429d      	cmp	r5, r3
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0xb6>
 8001b1c:	e16a      	b.n	8001df4 <__aeabi_dsub+0x38c>
 8001b1e:	1b5d      	subs	r5, r3, r5
 8001b20:	1c6b      	adds	r3, r5, #1
 8001b22:	2b1f      	cmp	r3, #31
 8001b24:	dd00      	ble.n	8001b28 <__aeabi_dsub+0xc0>
 8001b26:	e194      	b.n	8001e52 <__aeabi_dsub+0x3ea>
 8001b28:	2120      	movs	r1, #32
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	0035      	movs	r5, r6
 8001b2e:	1ac9      	subs	r1, r1, r3
 8001b30:	408e      	lsls	r6, r1
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	4088      	lsls	r0, r1
 8001b36:	40dd      	lsrs	r5, r3
 8001b38:	1e71      	subs	r1, r6, #1
 8001b3a:	418e      	sbcs	r6, r1
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	2207      	movs	r2, #7
 8001b40:	4328      	orrs	r0, r5
 8001b42:	2500      	movs	r5, #0
 8001b44:	4306      	orrs	r6, r0
 8001b46:	4032      	ands	r2, r6
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_dsub+0xf8>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	4033      	ands	r3, r6
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_dsub+0xf8>
 8001b54:	1d33      	adds	r3, r6, #4
 8001b56:	42b3      	cmp	r3, r6
 8001b58:	41b6      	sbcs	r6, r6
 8001b5a:	4276      	negs	r6, r6
 8001b5c:	1989      	adds	r1, r1, r6
 8001b5e:	001e      	movs	r6, r3
 8001b60:	020b      	lsls	r3, r1, #8
 8001b62:	d400      	bmi.n	8001b66 <__aeabi_dsub+0xfe>
 8001b64:	e23d      	b.n	8001fe2 <__aeabi_dsub+0x57a>
 8001b66:	1c6a      	adds	r2, r5, #1
 8001b68:	4b91      	ldr	r3, [pc, #580]	; (8001db0 <__aeabi_dsub+0x348>)
 8001b6a:	0555      	lsls	r5, r2, #21
 8001b6c:	0d6d      	lsrs	r5, r5, #21
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x10c>
 8001b72:	e119      	b.n	8001da8 <__aeabi_dsub+0x340>
 8001b74:	4a8f      	ldr	r2, [pc, #572]	; (8001db4 <__aeabi_dsub+0x34c>)
 8001b76:	08f6      	lsrs	r6, r6, #3
 8001b78:	400a      	ands	r2, r1
 8001b7a:	0757      	lsls	r7, r2, #29
 8001b7c:	0252      	lsls	r2, r2, #9
 8001b7e:	4337      	orrs	r7, r6
 8001b80:	0b12      	lsrs	r2, r2, #12
 8001b82:	e09b      	b.n	8001cbc <__aeabi_dsub+0x254>
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x122>
 8001b88:	e0c5      	b.n	8001d16 <__aeabi_dsub+0x2ae>
 8001b8a:	1c6e      	adds	r6, r5, #1
 8001b8c:	0576      	lsls	r6, r6, #21
 8001b8e:	0d76      	lsrs	r6, r6, #21
 8001b90:	2e01      	cmp	r6, #1
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dsub+0x12e>
 8001b94:	e148      	b.n	8001e28 <__aeabi_dsub+0x3c0>
 8001b96:	4667      	mov	r7, ip
 8001b98:	1a86      	subs	r6, r0, r2
 8001b9a:	1bcb      	subs	r3, r1, r7
 8001b9c:	42b0      	cmp	r0, r6
 8001b9e:	41bf      	sbcs	r7, r7
 8001ba0:	427f      	negs	r7, r7
 8001ba2:	46b8      	mov	r8, r7
 8001ba4:	001f      	movs	r7, r3
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	1aff      	subs	r7, r7, r3
 8001baa:	003b      	movs	r3, r7
 8001bac:	46b8      	mov	r8, r7
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	d500      	bpl.n	8001bb4 <__aeabi_dsub+0x14c>
 8001bb2:	e15f      	b.n	8001e74 <__aeabi_dsub+0x40c>
 8001bb4:	4337      	orrs	r7, r6
 8001bb6:	d19a      	bne.n	8001aee <__aeabi_dsub+0x86>
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2400      	movs	r4, #0
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	e079      	b.n	8001cb4 <__aeabi_dsub+0x24c>
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_dsub+0x15e>
 8001bc4:	e0fa      	b.n	8001dbc <__aeabi_dsub+0x354>
 8001bc6:	2f00      	cmp	r7, #0
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x164>
 8001bca:	e08d      	b.n	8001ce8 <__aeabi_dsub+0x280>
 8001bcc:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <__aeabi_dsub+0x348>)
 8001bce:	429d      	cmp	r5, r3
 8001bd0:	d067      	beq.n	8001ca2 <__aeabi_dsub+0x23a>
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	4667      	mov	r7, ip
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	431f      	orrs	r7, r3
 8001bda:	46bc      	mov	ip, r7
 8001bdc:	2e38      	cmp	r6, #56	; 0x38
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dsub+0x17a>
 8001be0:	e152      	b.n	8001e88 <__aeabi_dsub+0x420>
 8001be2:	4663      	mov	r3, ip
 8001be4:	4313      	orrs	r3, r2
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	4193      	sbcs	r3, r2
 8001bea:	181e      	adds	r6, r3, r0
 8001bec:	4286      	cmp	r6, r0
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	1809      	adds	r1, r1, r0
 8001bf4:	020b      	lsls	r3, r1, #8
 8001bf6:	d400      	bmi.n	8001bfa <__aeabi_dsub+0x192>
 8001bf8:	e0be      	b.n	8001d78 <__aeabi_dsub+0x310>
 8001bfa:	4b6d      	ldr	r3, [pc, #436]	; (8001db0 <__aeabi_dsub+0x348>)
 8001bfc:	3501      	adds	r5, #1
 8001bfe:	429d      	cmp	r5, r3
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x19c>
 8001c02:	e0d2      	b.n	8001daa <__aeabi_dsub+0x342>
 8001c04:	4a6b      	ldr	r2, [pc, #428]	; (8001db4 <__aeabi_dsub+0x34c>)
 8001c06:	0873      	lsrs	r3, r6, #1
 8001c08:	400a      	ands	r2, r1
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	400e      	ands	r6, r1
 8001c0e:	431e      	orrs	r6, r3
 8001c10:	0851      	lsrs	r1, r2, #1
 8001c12:	07d3      	lsls	r3, r2, #31
 8001c14:	2207      	movs	r2, #7
 8001c16:	431e      	orrs	r6, r3
 8001c18:	4032      	ands	r2, r6
 8001c1a:	e795      	b.n	8001b48 <__aeabi_dsub+0xe0>
 8001c1c:	001e      	movs	r6, r3
 8001c1e:	4316      	orrs	r6, r2
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dsub+0x1bc>
 8001c22:	e745      	b.n	8001ab0 <__aeabi_dsub+0x48>
 8001c24:	e740      	b.n	8001aa8 <__aeabi_dsub+0x40>
 8001c26:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <__aeabi_dsub+0x348>)
 8001c28:	429d      	cmp	r5, r3
 8001c2a:	d03a      	beq.n	8001ca2 <__aeabi_dsub+0x23a>
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	4667      	mov	r7, ip
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431f      	orrs	r7, r3
 8001c34:	46bc      	mov	ip, r7
 8001c36:	2e38      	cmp	r6, #56	; 0x38
 8001c38:	dd00      	ble.n	8001c3c <__aeabi_dsub+0x1d4>
 8001c3a:	e0eb      	b.n	8001e14 <__aeabi_dsub+0x3ac>
 8001c3c:	2e1f      	cmp	r6, #31
 8001c3e:	dc00      	bgt.n	8001c42 <__aeabi_dsub+0x1da>
 8001c40:	e13a      	b.n	8001eb8 <__aeabi_dsub+0x450>
 8001c42:	0033      	movs	r3, r6
 8001c44:	4667      	mov	r7, ip
 8001c46:	3b20      	subs	r3, #32
 8001c48:	40df      	lsrs	r7, r3
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	2e20      	cmp	r6, #32
 8001c4e:	d005      	beq.n	8001c5c <__aeabi_dsub+0x1f4>
 8001c50:	2740      	movs	r7, #64	; 0x40
 8001c52:	1bbf      	subs	r7, r7, r6
 8001c54:	4666      	mov	r6, ip
 8001c56:	40be      	lsls	r6, r7
 8001c58:	4332      	orrs	r2, r6
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4646      	mov	r6, r8
 8001c5e:	1e72      	subs	r2, r6, #1
 8001c60:	4196      	sbcs	r6, r2
 8001c62:	4333      	orrs	r3, r6
 8001c64:	e0da      	b.n	8001e1c <__aeabi_dsub+0x3b4>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x204>
 8001c6a:	e214      	b.n	8002096 <__aeabi_dsub+0x62e>
 8001c6c:	4663      	mov	r3, ip
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x20c>
 8001c72:	e168      	b.n	8001f46 <__aeabi_dsub+0x4de>
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	074e      	lsls	r6, r1, #29
 8001c78:	08c0      	lsrs	r0, r0, #3
 8001c7a:	08c9      	lsrs	r1, r1, #3
 8001c7c:	031b      	lsls	r3, r3, #12
 8001c7e:	4306      	orrs	r6, r0
 8001c80:	4219      	tst	r1, r3
 8001c82:	d008      	beq.n	8001c96 <__aeabi_dsub+0x22e>
 8001c84:	4660      	mov	r0, ip
 8001c86:	08c0      	lsrs	r0, r0, #3
 8001c88:	4218      	tst	r0, r3
 8001c8a:	d104      	bne.n	8001c96 <__aeabi_dsub+0x22e>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	0001      	movs	r1, r0
 8001c90:	08d2      	lsrs	r2, r2, #3
 8001c92:	075e      	lsls	r6, r3, #29
 8001c94:	4316      	orrs	r6, r2
 8001c96:	00f3      	lsls	r3, r6, #3
 8001c98:	4699      	mov	r9, r3
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4d44      	ldr	r5, [pc, #272]	; (8001db0 <__aeabi_dsub+0x348>)
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	08de      	lsrs	r6, r3, #3
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <__aeabi_dsub+0x348>)
 8001ca8:	074f      	lsls	r7, r1, #29
 8001caa:	4337      	orrs	r7, r6
 8001cac:	08ca      	lsrs	r2, r1, #3
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x24c>
 8001cb2:	e06e      	b.n	8001d92 <__aeabi_dsub+0x32a>
 8001cb4:	0312      	lsls	r2, r2, #12
 8001cb6:	056d      	lsls	r5, r5, #21
 8001cb8:	0b12      	lsrs	r2, r2, #12
 8001cba:	0d6d      	lsrs	r5, r5, #21
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	0312      	lsls	r2, r2, #12
 8001cc0:	0b13      	lsrs	r3, r2, #12
 8001cc2:	0d0a      	lsrs	r2, r1, #20
 8001cc4:	0512      	lsls	r2, r2, #20
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <__aeabi_dsub+0x350>)
 8001cca:	052d      	lsls	r5, r5, #20
 8001ccc:	4013      	ands	r3, r2
 8001cce:	432b      	orrs	r3, r5
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	07e4      	lsls	r4, r4, #31
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	4323      	orrs	r3, r4
 8001cd8:	0038      	movs	r0, r7
 8001cda:	0019      	movs	r1, r3
 8001cdc:	bc3c      	pop	{r2, r3, r4, r5}
 8001cde:	4690      	mov	r8, r2
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	46a2      	mov	sl, r4
 8001ce4:	46ab      	mov	fp, r5
 8001ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce8:	4663      	mov	r3, ip
 8001cea:	4313      	orrs	r3, r2
 8001cec:	d011      	beq.n	8001d12 <__aeabi_dsub+0x2aa>
 8001cee:	1e73      	subs	r3, r6, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d000      	beq.n	8001cf6 <__aeabi_dsub+0x28e>
 8001cf4:	e107      	b.n	8001f06 <__aeabi_dsub+0x49e>
 8001cf6:	1886      	adds	r6, r0, r2
 8001cf8:	4286      	cmp	r6, r0
 8001cfa:	4180      	sbcs	r0, r0
 8001cfc:	4461      	add	r1, ip
 8001cfe:	4240      	negs	r0, r0
 8001d00:	1809      	adds	r1, r1, r0
 8001d02:	2501      	movs	r5, #1
 8001d04:	020b      	lsls	r3, r1, #8
 8001d06:	d537      	bpl.n	8001d78 <__aeabi_dsub+0x310>
 8001d08:	2502      	movs	r5, #2
 8001d0a:	e77b      	b.n	8001c04 <__aeabi_dsub+0x19c>
 8001d0c:	003e      	movs	r6, r7
 8001d0e:	4661      	mov	r1, ip
 8001d10:	4691      	mov	r9, r2
 8001d12:	0035      	movs	r5, r6
 8001d14:	e7c5      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001d16:	465c      	mov	r4, fp
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x2b6>
 8001d1c:	e0e1      	b.n	8001ee2 <__aeabi_dsub+0x47a>
 8001d1e:	000b      	movs	r3, r1
 8001d20:	4303      	orrs	r3, r0
 8001d22:	d0f3      	beq.n	8001d0c <__aeabi_dsub+0x2a4>
 8001d24:	1c73      	adds	r3, r6, #1
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dsub+0x2c2>
 8001d28:	e1ac      	b.n	8002084 <__aeabi_dsub+0x61c>
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <__aeabi_dsub+0x348>)
 8001d2c:	429f      	cmp	r7, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x2ca>
 8001d30:	e13a      	b.n	8001fa8 <__aeabi_dsub+0x540>
 8001d32:	43f3      	mvns	r3, r6
 8001d34:	2b38      	cmp	r3, #56	; 0x38
 8001d36:	dd00      	ble.n	8001d3a <__aeabi_dsub+0x2d2>
 8001d38:	e16f      	b.n	800201a <__aeabi_dsub+0x5b2>
 8001d3a:	2b1f      	cmp	r3, #31
 8001d3c:	dd00      	ble.n	8001d40 <__aeabi_dsub+0x2d8>
 8001d3e:	e18c      	b.n	800205a <__aeabi_dsub+0x5f2>
 8001d40:	2520      	movs	r5, #32
 8001d42:	000e      	movs	r6, r1
 8001d44:	1aed      	subs	r5, r5, r3
 8001d46:	40ae      	lsls	r6, r5
 8001d48:	46b0      	mov	r8, r6
 8001d4a:	0006      	movs	r6, r0
 8001d4c:	46aa      	mov	sl, r5
 8001d4e:	40de      	lsrs	r6, r3
 8001d50:	4645      	mov	r5, r8
 8001d52:	4335      	orrs	r5, r6
 8001d54:	002e      	movs	r6, r5
 8001d56:	4655      	mov	r5, sl
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	40a8      	lsls	r0, r5
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	1e45      	subs	r5, r0, #1
 8001d60:	41a8      	sbcs	r0, r5
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	469c      	mov	ip, r3
 8001d66:	4330      	orrs	r0, r6
 8001d68:	1a16      	subs	r6, r2, r0
 8001d6a:	42b2      	cmp	r2, r6
 8001d6c:	4192      	sbcs	r2, r2
 8001d6e:	4663      	mov	r3, ip
 8001d70:	4252      	negs	r2, r2
 8001d72:	1a99      	subs	r1, r3, r2
 8001d74:	003d      	movs	r5, r7
 8001d76:	e6b4      	b.n	8001ae2 <__aeabi_dsub+0x7a>
 8001d78:	2207      	movs	r2, #7
 8001d7a:	4032      	ands	r2, r6
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dsub+0x31a>
 8001d80:	e6e4      	b.n	8001b4c <__aeabi_dsub+0xe4>
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <__aeabi_dsub+0x348>)
 8001d84:	08f6      	lsrs	r6, r6, #3
 8001d86:	074f      	lsls	r7, r1, #29
 8001d88:	4337      	orrs	r7, r6
 8001d8a:	08ca      	lsrs	r2, r1, #3
 8001d8c:	429d      	cmp	r5, r3
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x32a>
 8001d90:	e790      	b.n	8001cb4 <__aeabi_dsub+0x24c>
 8001d92:	003b      	movs	r3, r7
 8001d94:	4313      	orrs	r3, r2
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x332>
 8001d98:	e1a6      	b.n	80020e8 <__aeabi_dsub+0x680>
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	031b      	lsls	r3, r3, #12
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	0312      	lsls	r2, r2, #12
 8001da2:	0b12      	lsrs	r2, r2, #12
 8001da4:	4d02      	ldr	r5, [pc, #8]	; (8001db0 <__aeabi_dsub+0x348>)
 8001da6:	e789      	b.n	8001cbc <__aeabi_dsub+0x254>
 8001da8:	0015      	movs	r5, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	2700      	movs	r7, #0
 8001dae:	e785      	b.n	8001cbc <__aeabi_dsub+0x254>
 8001db0:	000007ff 	.word	0x000007ff
 8001db4:	ff7fffff 	.word	0xff7fffff
 8001db8:	800fffff 	.word	0x800fffff
 8001dbc:	2e00      	cmp	r6, #0
 8001dbe:	d000      	beq.n	8001dc2 <__aeabi_dsub+0x35a>
 8001dc0:	e0c7      	b.n	8001f52 <__aeabi_dsub+0x4ea>
 8001dc2:	1c6b      	adds	r3, r5, #1
 8001dc4:	055e      	lsls	r6, r3, #21
 8001dc6:	0d76      	lsrs	r6, r6, #21
 8001dc8:	2e01      	cmp	r6, #1
 8001dca:	dc00      	bgt.n	8001dce <__aeabi_dsub+0x366>
 8001dcc:	e0f0      	b.n	8001fb0 <__aeabi_dsub+0x548>
 8001dce:	4dc8      	ldr	r5, [pc, #800]	; (80020f0 <__aeabi_dsub+0x688>)
 8001dd0:	42ab      	cmp	r3, r5
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x36e>
 8001dd4:	e0b9      	b.n	8001f4a <__aeabi_dsub+0x4e2>
 8001dd6:	1885      	adds	r5, r0, r2
 8001dd8:	000a      	movs	r2, r1
 8001dda:	4285      	cmp	r5, r0
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	4462      	add	r2, ip
 8001de0:	4249      	negs	r1, r1
 8001de2:	1851      	adds	r1, r2, r1
 8001de4:	2207      	movs	r2, #7
 8001de6:	07ce      	lsls	r6, r1, #31
 8001de8:	086d      	lsrs	r5, r5, #1
 8001dea:	432e      	orrs	r6, r5
 8001dec:	0849      	lsrs	r1, r1, #1
 8001dee:	4032      	ands	r2, r6
 8001df0:	001d      	movs	r5, r3
 8001df2:	e6a9      	b.n	8001b48 <__aeabi_dsub+0xe0>
 8001df4:	49bf      	ldr	r1, [pc, #764]	; (80020f4 <__aeabi_dsub+0x68c>)
 8001df6:	1aed      	subs	r5, r5, r3
 8001df8:	4011      	ands	r1, r2
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	4032      	ands	r2, r6
 8001dfe:	e6a3      	b.n	8001b48 <__aeabi_dsub+0xe0>
 8001e00:	0032      	movs	r2, r6
 8001e02:	3828      	subs	r0, #40	; 0x28
 8001e04:	4082      	lsls	r2, r0
 8001e06:	2600      	movs	r6, #0
 8001e08:	e686      	b.n	8001b18 <__aeabi_dsub+0xb0>
 8001e0a:	0030      	movs	r0, r6
 8001e0c:	f000 fb08 	bl	8002420 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e673      	b.n	8001afc <__aeabi_dsub+0x94>
 8001e14:	4663      	mov	r3, ip
 8001e16:	4313      	orrs	r3, r2
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	4193      	sbcs	r3, r2
 8001e1c:	1ac6      	subs	r6, r0, r3
 8001e1e:	42b0      	cmp	r0, r6
 8001e20:	4180      	sbcs	r0, r0
 8001e22:	4240      	negs	r0, r0
 8001e24:	1a09      	subs	r1, r1, r0
 8001e26:	e65c      	b.n	8001ae2 <__aeabi_dsub+0x7a>
 8001e28:	000e      	movs	r6, r1
 8001e2a:	4667      	mov	r7, ip
 8001e2c:	4306      	orrs	r6, r0
 8001e2e:	4317      	orrs	r7, r2
 8001e30:	2d00      	cmp	r5, #0
 8001e32:	d15e      	bne.n	8001ef2 <__aeabi_dsub+0x48a>
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x3d2>
 8001e38:	e0f3      	b.n	8002022 <__aeabi_dsub+0x5ba>
 8001e3a:	2f00      	cmp	r7, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x3d8>
 8001e3e:	e11e      	b.n	800207e <__aeabi_dsub+0x616>
 8001e40:	465c      	mov	r4, fp
 8001e42:	4661      	mov	r1, ip
 8001e44:	4691      	mov	r9, r2
 8001e46:	e72c      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001e48:	4fa9      	ldr	r7, [pc, #676]	; (80020f0 <__aeabi_dsub+0x688>)
 8001e4a:	42be      	cmp	r6, r7
 8001e4c:	d07b      	beq.n	8001f46 <__aeabi_dsub+0x4de>
 8001e4e:	001e      	movs	r6, r3
 8001e50:	e6f1      	b.n	8001c36 <__aeabi_dsub+0x1ce>
 8001e52:	0010      	movs	r0, r2
 8001e54:	3d1f      	subs	r5, #31
 8001e56:	40e8      	lsrs	r0, r5
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d003      	beq.n	8001e64 <__aeabi_dsub+0x3fc>
 8001e5c:	2140      	movs	r1, #64	; 0x40
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	409a      	lsls	r2, r3
 8001e62:	4316      	orrs	r6, r2
 8001e64:	1e73      	subs	r3, r6, #1
 8001e66:	419e      	sbcs	r6, r3
 8001e68:	2207      	movs	r2, #7
 8001e6a:	4306      	orrs	r6, r0
 8001e6c:	4032      	ands	r2, r6
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2500      	movs	r5, #0
 8001e72:	e783      	b.n	8001d7c <__aeabi_dsub+0x314>
 8001e74:	1a16      	subs	r6, r2, r0
 8001e76:	4663      	mov	r3, ip
 8001e78:	42b2      	cmp	r2, r6
 8001e7a:	4180      	sbcs	r0, r0
 8001e7c:	1a59      	subs	r1, r3, r1
 8001e7e:	4240      	negs	r0, r0
 8001e80:	1a0b      	subs	r3, r1, r0
 8001e82:	4698      	mov	r8, r3
 8001e84:	465c      	mov	r4, fp
 8001e86:	e632      	b.n	8001aee <__aeabi_dsub+0x86>
 8001e88:	2e1f      	cmp	r6, #31
 8001e8a:	dd00      	ble.n	8001e8e <__aeabi_dsub+0x426>
 8001e8c:	e0ab      	b.n	8001fe6 <__aeabi_dsub+0x57e>
 8001e8e:	2720      	movs	r7, #32
 8001e90:	1bbb      	subs	r3, r7, r6
 8001e92:	469a      	mov	sl, r3
 8001e94:	4663      	mov	r3, ip
 8001e96:	4657      	mov	r7, sl
 8001e98:	40bb      	lsls	r3, r7
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	464f      	mov	r7, r9
 8001ea0:	40f3      	lsrs	r3, r6
 8001ea2:	431f      	orrs	r7, r3
 8001ea4:	003b      	movs	r3, r7
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	40ba      	lsls	r2, r7
 8001eaa:	1e57      	subs	r7, r2, #1
 8001eac:	41ba      	sbcs	r2, r7
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4662      	mov	r2, ip
 8001eb2:	40f2      	lsrs	r2, r6
 8001eb4:	1889      	adds	r1, r1, r2
 8001eb6:	e698      	b.n	8001bea <__aeabi_dsub+0x182>
 8001eb8:	2720      	movs	r7, #32
 8001eba:	1bbb      	subs	r3, r7, r6
 8001ebc:	469a      	mov	sl, r3
 8001ebe:	4663      	mov	r3, ip
 8001ec0:	4657      	mov	r7, sl
 8001ec2:	40bb      	lsls	r3, r7
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	464f      	mov	r7, r9
 8001eca:	40f3      	lsrs	r3, r6
 8001ecc:	431f      	orrs	r7, r3
 8001ece:	003b      	movs	r3, r7
 8001ed0:	4657      	mov	r7, sl
 8001ed2:	40ba      	lsls	r2, r7
 8001ed4:	1e57      	subs	r7, r2, #1
 8001ed6:	41ba      	sbcs	r2, r7
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	4662      	mov	r2, ip
 8001edc:	40f2      	lsrs	r2, r6
 8001ede:	1a89      	subs	r1, r1, r2
 8001ee0:	e79c      	b.n	8001e1c <__aeabi_dsub+0x3b4>
 8001ee2:	4b83      	ldr	r3, [pc, #524]	; (80020f0 <__aeabi_dsub+0x688>)
 8001ee4:	429f      	cmp	r7, r3
 8001ee6:	d05f      	beq.n	8001fa8 <__aeabi_dsub+0x540>
 8001ee8:	2580      	movs	r5, #128	; 0x80
 8001eea:	042d      	lsls	r5, r5, #16
 8001eec:	4273      	negs	r3, r6
 8001eee:	4329      	orrs	r1, r5
 8001ef0:	e720      	b.n	8001d34 <__aeabi_dsub+0x2cc>
 8001ef2:	2e00      	cmp	r6, #0
 8001ef4:	d10c      	bne.n	8001f10 <__aeabi_dsub+0x4a8>
 8001ef6:	2f00      	cmp	r7, #0
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x494>
 8001efa:	e0d0      	b.n	800209e <__aeabi_dsub+0x636>
 8001efc:	465c      	mov	r4, fp
 8001efe:	4661      	mov	r1, ip
 8001f00:	4691      	mov	r9, r2
 8001f02:	4d7b      	ldr	r5, [pc, #492]	; (80020f0 <__aeabi_dsub+0x688>)
 8001f04:	e6cd      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001f06:	4f7a      	ldr	r7, [pc, #488]	; (80020f0 <__aeabi_dsub+0x688>)
 8001f08:	42be      	cmp	r6, r7
 8001f0a:	d01c      	beq.n	8001f46 <__aeabi_dsub+0x4de>
 8001f0c:	001e      	movs	r6, r3
 8001f0e:	e665      	b.n	8001bdc <__aeabi_dsub+0x174>
 8001f10:	2f00      	cmp	r7, #0
 8001f12:	d018      	beq.n	8001f46 <__aeabi_dsub+0x4de>
 8001f14:	08c0      	lsrs	r0, r0, #3
 8001f16:	074e      	lsls	r6, r1, #29
 8001f18:	4306      	orrs	r6, r0
 8001f1a:	2080      	movs	r0, #128	; 0x80
 8001f1c:	08c9      	lsrs	r1, r1, #3
 8001f1e:	0300      	lsls	r0, r0, #12
 8001f20:	4201      	tst	r1, r0
 8001f22:	d008      	beq.n	8001f36 <__aeabi_dsub+0x4ce>
 8001f24:	4663      	mov	r3, ip
 8001f26:	08dc      	lsrs	r4, r3, #3
 8001f28:	4204      	tst	r4, r0
 8001f2a:	d104      	bne.n	8001f36 <__aeabi_dsub+0x4ce>
 8001f2c:	0021      	movs	r1, r4
 8001f2e:	46da      	mov	sl, fp
 8001f30:	08d2      	lsrs	r2, r2, #3
 8001f32:	075e      	lsls	r6, r3, #29
 8001f34:	4316      	orrs	r6, r2
 8001f36:	00f3      	lsls	r3, r6, #3
 8001f38:	4699      	mov	r9, r3
 8001f3a:	2401      	movs	r4, #1
 8001f3c:	4653      	mov	r3, sl
 8001f3e:	00c9      	lsls	r1, r1, #3
 8001f40:	0f72      	lsrs	r2, r6, #29
 8001f42:	4311      	orrs	r1, r2
 8001f44:	401c      	ands	r4, r3
 8001f46:	4d6a      	ldr	r5, [pc, #424]	; (80020f0 <__aeabi_dsub+0x688>)
 8001f48:	e6ab      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001f4a:	001d      	movs	r5, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2700      	movs	r7, #0
 8001f50:	e6b4      	b.n	8001cbc <__aeabi_dsub+0x254>
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d159      	bne.n	800200a <__aeabi_dsub+0x5a2>
 8001f56:	000b      	movs	r3, r1
 8001f58:	4303      	orrs	r3, r0
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x4f6>
 8001f5c:	e6d6      	b.n	8001d0c <__aeabi_dsub+0x2a4>
 8001f5e:	1c73      	adds	r3, r6, #1
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x4fc>
 8001f62:	e0b2      	b.n	80020ca <__aeabi_dsub+0x662>
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <__aeabi_dsub+0x688>)
 8001f66:	429f      	cmp	r7, r3
 8001f68:	d01e      	beq.n	8001fa8 <__aeabi_dsub+0x540>
 8001f6a:	43f3      	mvns	r3, r6
 8001f6c:	2b38      	cmp	r3, #56	; 0x38
 8001f6e:	dc6f      	bgt.n	8002050 <__aeabi_dsub+0x5e8>
 8001f70:	2b1f      	cmp	r3, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x50e>
 8001f74:	e097      	b.n	80020a6 <__aeabi_dsub+0x63e>
 8001f76:	2520      	movs	r5, #32
 8001f78:	000e      	movs	r6, r1
 8001f7a:	1aed      	subs	r5, r5, r3
 8001f7c:	40ae      	lsls	r6, r5
 8001f7e:	46b0      	mov	r8, r6
 8001f80:	0006      	movs	r6, r0
 8001f82:	46aa      	mov	sl, r5
 8001f84:	40de      	lsrs	r6, r3
 8001f86:	4645      	mov	r5, r8
 8001f88:	4335      	orrs	r5, r6
 8001f8a:	002e      	movs	r6, r5
 8001f8c:	4655      	mov	r5, sl
 8001f8e:	40a8      	lsls	r0, r5
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	1e45      	subs	r5, r0, #1
 8001f94:	41a8      	sbcs	r0, r5
 8001f96:	448c      	add	ip, r1
 8001f98:	4306      	orrs	r6, r0
 8001f9a:	18b6      	adds	r6, r6, r2
 8001f9c:	4296      	cmp	r6, r2
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	4251      	negs	r1, r2
 8001fa2:	4461      	add	r1, ip
 8001fa4:	003d      	movs	r5, r7
 8001fa6:	e625      	b.n	8001bf4 <__aeabi_dsub+0x18c>
 8001fa8:	003d      	movs	r5, r7
 8001faa:	4661      	mov	r1, ip
 8001fac:	4691      	mov	r9, r2
 8001fae:	e678      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001fb0:	000b      	movs	r3, r1
 8001fb2:	4303      	orrs	r3, r0
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x552>
 8001fb8:	e655      	b.n	8001c66 <__aeabi_dsub+0x1fe>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f5      	beq.n	8001faa <__aeabi_dsub+0x542>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x55e>
 8001fc4:	e66d      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001fc6:	1886      	adds	r6, r0, r2
 8001fc8:	4286      	cmp	r6, r0
 8001fca:	4180      	sbcs	r0, r0
 8001fcc:	4461      	add	r1, ip
 8001fce:	4240      	negs	r0, r0
 8001fd0:	1809      	adds	r1, r1, r0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	020b      	lsls	r3, r1, #8
 8001fd6:	d400      	bmi.n	8001fda <__aeabi_dsub+0x572>
 8001fd8:	e6d0      	b.n	8001d7c <__aeabi_dsub+0x314>
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <__aeabi_dsub+0x68c>)
 8001fdc:	3501      	adds	r5, #1
 8001fde:	4019      	ands	r1, r3
 8001fe0:	e5b2      	b.n	8001b48 <__aeabi_dsub+0xe0>
 8001fe2:	46b1      	mov	r9, r6
 8001fe4:	e65d      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8001fe6:	0033      	movs	r3, r6
 8001fe8:	4667      	mov	r7, ip
 8001fea:	3b20      	subs	r3, #32
 8001fec:	40df      	lsrs	r7, r3
 8001fee:	003b      	movs	r3, r7
 8001ff0:	2e20      	cmp	r6, #32
 8001ff2:	d005      	beq.n	8002000 <__aeabi_dsub+0x598>
 8001ff4:	2740      	movs	r7, #64	; 0x40
 8001ff6:	1bbf      	subs	r7, r7, r6
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	40be      	lsls	r6, r7
 8001ffc:	4332      	orrs	r2, r6
 8001ffe:	4690      	mov	r8, r2
 8002000:	4646      	mov	r6, r8
 8002002:	1e72      	subs	r2, r6, #1
 8002004:	4196      	sbcs	r6, r2
 8002006:	4333      	orrs	r3, r6
 8002008:	e5ef      	b.n	8001bea <__aeabi_dsub+0x182>
 800200a:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <__aeabi_dsub+0x688>)
 800200c:	429f      	cmp	r7, r3
 800200e:	d0cb      	beq.n	8001fa8 <__aeabi_dsub+0x540>
 8002010:	2580      	movs	r5, #128	; 0x80
 8002012:	042d      	lsls	r5, r5, #16
 8002014:	4273      	negs	r3, r6
 8002016:	4329      	orrs	r1, r5
 8002018:	e7a8      	b.n	8001f6c <__aeabi_dsub+0x504>
 800201a:	4308      	orrs	r0, r1
 800201c:	1e41      	subs	r1, r0, #1
 800201e:	4188      	sbcs	r0, r1
 8002020:	e6a2      	b.n	8001d68 <__aeabi_dsub+0x300>
 8002022:	2f00      	cmp	r7, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x5c0>
 8002026:	e63c      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 8002028:	4663      	mov	r3, ip
 800202a:	1a86      	subs	r6, r0, r2
 800202c:	1acf      	subs	r7, r1, r3
 800202e:	42b0      	cmp	r0, r6
 8002030:	419b      	sbcs	r3, r3
 8002032:	425b      	negs	r3, r3
 8002034:	1afb      	subs	r3, r7, r3
 8002036:	4698      	mov	r8, r3
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	d54e      	bpl.n	80020da <__aeabi_dsub+0x672>
 800203c:	1a16      	subs	r6, r2, r0
 800203e:	4663      	mov	r3, ip
 8002040:	42b2      	cmp	r2, r6
 8002042:	4192      	sbcs	r2, r2
 8002044:	1a59      	subs	r1, r3, r1
 8002046:	4252      	negs	r2, r2
 8002048:	1a89      	subs	r1, r1, r2
 800204a:	465c      	mov	r4, fp
 800204c:	2200      	movs	r2, #0
 800204e:	e57b      	b.n	8001b48 <__aeabi_dsub+0xe0>
 8002050:	4301      	orrs	r1, r0
 8002052:	000e      	movs	r6, r1
 8002054:	1e71      	subs	r1, r6, #1
 8002056:	418e      	sbcs	r6, r1
 8002058:	e79f      	b.n	8001f9a <__aeabi_dsub+0x532>
 800205a:	001d      	movs	r5, r3
 800205c:	000e      	movs	r6, r1
 800205e:	3d20      	subs	r5, #32
 8002060:	40ee      	lsrs	r6, r5
 8002062:	46b0      	mov	r8, r6
 8002064:	2b20      	cmp	r3, #32
 8002066:	d004      	beq.n	8002072 <__aeabi_dsub+0x60a>
 8002068:	2540      	movs	r5, #64	; 0x40
 800206a:	1aeb      	subs	r3, r5, r3
 800206c:	4099      	lsls	r1, r3
 800206e:	4308      	orrs	r0, r1
 8002070:	4681      	mov	r9, r0
 8002072:	4648      	mov	r0, r9
 8002074:	4643      	mov	r3, r8
 8002076:	1e41      	subs	r1, r0, #1
 8002078:	4188      	sbcs	r0, r1
 800207a:	4318      	orrs	r0, r3
 800207c:	e674      	b.n	8001d68 <__aeabi_dsub+0x300>
 800207e:	2200      	movs	r2, #0
 8002080:	2400      	movs	r4, #0
 8002082:	e617      	b.n	8001cb4 <__aeabi_dsub+0x24c>
 8002084:	1a16      	subs	r6, r2, r0
 8002086:	4663      	mov	r3, ip
 8002088:	42b2      	cmp	r2, r6
 800208a:	4192      	sbcs	r2, r2
 800208c:	1a59      	subs	r1, r3, r1
 800208e:	4252      	negs	r2, r2
 8002090:	1a89      	subs	r1, r1, r2
 8002092:	003d      	movs	r5, r7
 8002094:	e525      	b.n	8001ae2 <__aeabi_dsub+0x7a>
 8002096:	4661      	mov	r1, ip
 8002098:	4691      	mov	r9, r2
 800209a:	4d15      	ldr	r5, [pc, #84]	; (80020f0 <__aeabi_dsub+0x688>)
 800209c:	e601      	b.n	8001ca2 <__aeabi_dsub+0x23a>
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	2400      	movs	r4, #0
 80020a2:	0312      	lsls	r2, r2, #12
 80020a4:	e679      	b.n	8001d9a <__aeabi_dsub+0x332>
 80020a6:	001d      	movs	r5, r3
 80020a8:	000e      	movs	r6, r1
 80020aa:	3d20      	subs	r5, #32
 80020ac:	40ee      	lsrs	r6, r5
 80020ae:	46b0      	mov	r8, r6
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d004      	beq.n	80020be <__aeabi_dsub+0x656>
 80020b4:	2540      	movs	r5, #64	; 0x40
 80020b6:	1aeb      	subs	r3, r5, r3
 80020b8:	4099      	lsls	r1, r3
 80020ba:	4308      	orrs	r0, r1
 80020bc:	4681      	mov	r9, r0
 80020be:	464e      	mov	r6, r9
 80020c0:	4643      	mov	r3, r8
 80020c2:	1e71      	subs	r1, r6, #1
 80020c4:	418e      	sbcs	r6, r1
 80020c6:	431e      	orrs	r6, r3
 80020c8:	e767      	b.n	8001f9a <__aeabi_dsub+0x532>
 80020ca:	1886      	adds	r6, r0, r2
 80020cc:	4296      	cmp	r6, r2
 80020ce:	419b      	sbcs	r3, r3
 80020d0:	4461      	add	r1, ip
 80020d2:	425b      	negs	r3, r3
 80020d4:	18c9      	adds	r1, r1, r3
 80020d6:	003d      	movs	r5, r7
 80020d8:	e58c      	b.n	8001bf4 <__aeabi_dsub+0x18c>
 80020da:	4647      	mov	r7, r8
 80020dc:	4337      	orrs	r7, r6
 80020de:	d0ce      	beq.n	800207e <__aeabi_dsub+0x616>
 80020e0:	2207      	movs	r2, #7
 80020e2:	4641      	mov	r1, r8
 80020e4:	4032      	ands	r2, r6
 80020e6:	e649      	b.n	8001d7c <__aeabi_dsub+0x314>
 80020e8:	2700      	movs	r7, #0
 80020ea:	003a      	movs	r2, r7
 80020ec:	e5e6      	b.n	8001cbc <__aeabi_dsub+0x254>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff
 80020f4:	ff7fffff 	.word	0xff7fffff

080020f8 <__aeabi_dcmpun>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	4e0c      	ldr	r6, [pc, #48]	; (800212c <__aeabi_dcmpun+0x34>)
 80020fc:	030d      	lsls	r5, r1, #12
 80020fe:	031c      	lsls	r4, r3, #12
 8002100:	0049      	lsls	r1, r1, #1
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	0b2d      	lsrs	r5, r5, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	42b1      	cmp	r1, r6
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2a>
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <__aeabi_dcmpun+0x34>)
 8002112:	2000      	movs	r0, #0
 8002114:	428b      	cmp	r3, r1
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x28>
 8002118:	4314      	orrs	r4, r2
 800211a:	0020      	movs	r0, r4
 800211c:	1e44      	subs	r4, r0, #1
 800211e:	41a0      	sbcs	r0, r4
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	4305      	orrs	r5, r0
 8002124:	2001      	movs	r0, #1
 8002126:	2d00      	cmp	r5, #0
 8002128:	d1fa      	bne.n	8002120 <__aeabi_dcmpun+0x28>
 800212a:	e7f1      	b.n	8002110 <__aeabi_dcmpun+0x18>
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	b530      	push	{r4, r5, lr}
 8002132:	4d14      	ldr	r5, [pc, #80]	; (8002184 <__aeabi_d2iz+0x54>)
 8002134:	030a      	lsls	r2, r1, #12
 8002136:	004b      	lsls	r3, r1, #1
 8002138:	0b12      	lsrs	r2, r2, #12
 800213a:	0d5b      	lsrs	r3, r3, #21
 800213c:	0fc9      	lsrs	r1, r1, #31
 800213e:	2400      	movs	r4, #0
 8002140:	42ab      	cmp	r3, r5
 8002142:	dd11      	ble.n	8002168 <__aeabi_d2iz+0x38>
 8002144:	4c10      	ldr	r4, [pc, #64]	; (8002188 <__aeabi_d2iz+0x58>)
 8002146:	42a3      	cmp	r3, r4
 8002148:	dc10      	bgt.n	800216c <__aeabi_d2iz+0x3c>
 800214a:	2480      	movs	r4, #128	; 0x80
 800214c:	0364      	lsls	r4, r4, #13
 800214e:	4322      	orrs	r2, r4
 8002150:	4c0e      	ldr	r4, [pc, #56]	; (800218c <__aeabi_d2iz+0x5c>)
 8002152:	1ae4      	subs	r4, r4, r3
 8002154:	2c1f      	cmp	r4, #31
 8002156:	dd0c      	ble.n	8002172 <__aeabi_d2iz+0x42>
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215a:	1ac3      	subs	r3, r0, r3
 800215c:	40da      	lsrs	r2, r3
 800215e:	0013      	movs	r3, r2
 8002160:	425c      	negs	r4, r3
 8002162:	2900      	cmp	r1, #0
 8002164:	d100      	bne.n	8002168 <__aeabi_d2iz+0x38>
 8002166:	001c      	movs	r4, r3
 8002168:	0020      	movs	r0, r4
 800216a:	bd30      	pop	{r4, r5, pc}
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <__aeabi_d2iz+0x64>)
 800216e:	18cc      	adds	r4, r1, r3
 8002170:	e7fa      	b.n	8002168 <__aeabi_d2iz+0x38>
 8002172:	4d09      	ldr	r5, [pc, #36]	; (8002198 <__aeabi_d2iz+0x68>)
 8002174:	40e0      	lsrs	r0, r4
 8002176:	46ac      	mov	ip, r5
 8002178:	4463      	add	r3, ip
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	4303      	orrs	r3, r0
 8002180:	e7ee      	b.n	8002160 <__aeabi_d2iz+0x30>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	00000433 	.word	0x00000433
 8002190:	00000413 	.word	0x00000413
 8002194:	7fffffff 	.word	0x7fffffff
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d02d      	beq.n	80021fe <__aeabi_i2d+0x62>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f938 	bl	8002420 <__clzsi2>
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <__aeabi_i2d+0x6c>)
 80021b2:	1a1b      	subs	r3, r3, r0
 80021b4:	055b      	lsls	r3, r3, #21
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	280a      	cmp	r0, #10
 80021ba:	dd15      	ble.n	80021e8 <__aeabi_i2d+0x4c>
 80021bc:	380b      	subs	r0, #11
 80021be:	4085      	lsls	r5, r0
 80021c0:	2200      	movs	r2, #0
 80021c2:	032d      	lsls	r5, r5, #12
 80021c4:	0b2d      	lsrs	r5, r5, #12
 80021c6:	2100      	movs	r1, #0
 80021c8:	0010      	movs	r0, r2
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	0d0a      	lsrs	r2, r1, #20
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	0512      	lsls	r2, r2, #20
 80021d2:	432a      	orrs	r2, r5
 80021d4:	4d0d      	ldr	r5, [pc, #52]	; (800220c <__aeabi_i2d+0x70>)
 80021d6:	051b      	lsls	r3, r3, #20
 80021d8:	402a      	ands	r2, r5
 80021da:	4313      	orrs	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	07e4      	lsls	r4, r4, #31
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	4323      	orrs	r3, r4
 80021e4:	0019      	movs	r1, r3
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	0002      	movs	r2, r0
 80021ea:	0029      	movs	r1, r5
 80021ec:	3215      	adds	r2, #21
 80021ee:	4091      	lsls	r1, r2
 80021f0:	000a      	movs	r2, r1
 80021f2:	210b      	movs	r1, #11
 80021f4:	1a08      	subs	r0, r1, r0
 80021f6:	40c5      	lsrs	r5, r0
 80021f8:	032d      	lsls	r5, r5, #12
 80021fa:	0b2d      	lsrs	r5, r5, #12
 80021fc:	e7e3      	b.n	80021c6 <__aeabi_i2d+0x2a>
 80021fe:	2400      	movs	r4, #0
 8002200:	2300      	movs	r3, #0
 8002202:	2500      	movs	r5, #0
 8002204:	2200      	movs	r2, #0
 8002206:	e7de      	b.n	80021c6 <__aeabi_i2d+0x2a>
 8002208:	0000041e 	.word	0x0000041e
 800220c:	800fffff 	.word	0x800fffff

08002210 <__aeabi_ui2d>:
 8002210:	b510      	push	{r4, lr}
 8002212:	1e04      	subs	r4, r0, #0
 8002214:	d025      	beq.n	8002262 <__aeabi_ui2d+0x52>
 8002216:	f000 f903 	bl	8002420 <__clzsi2>
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <__aeabi_ui2d+0x5c>)
 800221c:	1a1b      	subs	r3, r3, r0
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	280a      	cmp	r0, #10
 8002224:	dd12      	ble.n	800224c <__aeabi_ui2d+0x3c>
 8002226:	380b      	subs	r0, #11
 8002228:	4084      	lsls	r4, r0
 800222a:	2200      	movs	r2, #0
 800222c:	0324      	lsls	r4, r4, #12
 800222e:	0b24      	lsrs	r4, r4, #12
 8002230:	2100      	movs	r1, #0
 8002232:	0010      	movs	r0, r2
 8002234:	0324      	lsls	r4, r4, #12
 8002236:	0d0a      	lsrs	r2, r1, #20
 8002238:	0b24      	lsrs	r4, r4, #12
 800223a:	0512      	lsls	r2, r2, #20
 800223c:	4322      	orrs	r2, r4
 800223e:	4c0c      	ldr	r4, [pc, #48]	; (8002270 <__aeabi_ui2d+0x60>)
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	4022      	ands	r2, r4
 8002244:	4313      	orrs	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	0859      	lsrs	r1, r3, #1
 800224a:	bd10      	pop	{r4, pc}
 800224c:	0002      	movs	r2, r0
 800224e:	0021      	movs	r1, r4
 8002250:	3215      	adds	r2, #21
 8002252:	4091      	lsls	r1, r2
 8002254:	000a      	movs	r2, r1
 8002256:	210b      	movs	r1, #11
 8002258:	1a08      	subs	r0, r1, r0
 800225a:	40c4      	lsrs	r4, r0
 800225c:	0324      	lsls	r4, r4, #12
 800225e:	0b24      	lsrs	r4, r4, #12
 8002260:	e7e6      	b.n	8002230 <__aeabi_ui2d+0x20>
 8002262:	2300      	movs	r3, #0
 8002264:	2400      	movs	r4, #0
 8002266:	2200      	movs	r2, #0
 8002268:	e7e2      	b.n	8002230 <__aeabi_ui2d+0x20>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	0000041e 	.word	0x0000041e
 8002270:	800fffff 	.word	0x800fffff

08002274 <__aeabi_f2d>:
 8002274:	0041      	lsls	r1, r0, #1
 8002276:	0e09      	lsrs	r1, r1, #24
 8002278:	1c4b      	adds	r3, r1, #1
 800227a:	b570      	push	{r4, r5, r6, lr}
 800227c:	b2db      	uxtb	r3, r3
 800227e:	0246      	lsls	r6, r0, #9
 8002280:	0a75      	lsrs	r5, r6, #9
 8002282:	0fc4      	lsrs	r4, r0, #31
 8002284:	2b01      	cmp	r3, #1
 8002286:	dd14      	ble.n	80022b2 <__aeabi_f2d+0x3e>
 8002288:	23e0      	movs	r3, #224	; 0xe0
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	076d      	lsls	r5, r5, #29
 800228e:	0b36      	lsrs	r6, r6, #12
 8002290:	18cb      	adds	r3, r1, r3
 8002292:	2100      	movs	r1, #0
 8002294:	0d0a      	lsrs	r2, r1, #20
 8002296:	0028      	movs	r0, r5
 8002298:	0512      	lsls	r2, r2, #20
 800229a:	4d1c      	ldr	r5, [pc, #112]	; (800230c <__aeabi_f2d+0x98>)
 800229c:	4332      	orrs	r2, r6
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	402a      	ands	r2, r5
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	4313      	orrs	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	07e4      	lsls	r4, r4, #31
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	4323      	orrs	r3, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	2900      	cmp	r1, #0
 80022b4:	d114      	bne.n	80022e0 <__aeabi_f2d+0x6c>
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	d01e      	beq.n	80022f8 <__aeabi_f2d+0x84>
 80022ba:	0028      	movs	r0, r5
 80022bc:	f000 f8b0 	bl	8002420 <__clzsi2>
 80022c0:	280a      	cmp	r0, #10
 80022c2:	dc1c      	bgt.n	80022fe <__aeabi_f2d+0x8a>
 80022c4:	230b      	movs	r3, #11
 80022c6:	002a      	movs	r2, r5
 80022c8:	1a1b      	subs	r3, r3, r0
 80022ca:	40da      	lsrs	r2, r3
 80022cc:	0003      	movs	r3, r0
 80022ce:	3315      	adds	r3, #21
 80022d0:	409d      	lsls	r5, r3
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <__aeabi_f2d+0x9c>)
 80022d4:	0312      	lsls	r2, r2, #12
 80022d6:	1a1b      	subs	r3, r3, r0
 80022d8:	055b      	lsls	r3, r3, #21
 80022da:	0b16      	lsrs	r6, r2, #12
 80022dc:	0d5b      	lsrs	r3, r3, #21
 80022de:	e7d8      	b.n	8002292 <__aeabi_f2d+0x1e>
 80022e0:	2d00      	cmp	r5, #0
 80022e2:	d006      	beq.n	80022f2 <__aeabi_f2d+0x7e>
 80022e4:	0b32      	lsrs	r2, r6, #12
 80022e6:	2680      	movs	r6, #128	; 0x80
 80022e8:	0336      	lsls	r6, r6, #12
 80022ea:	076d      	lsls	r5, r5, #29
 80022ec:	4316      	orrs	r6, r2
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <__aeabi_f2d+0xa0>)
 80022f0:	e7cf      	b.n	8002292 <__aeabi_f2d+0x1e>
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <__aeabi_f2d+0xa0>)
 80022f4:	2600      	movs	r6, #0
 80022f6:	e7cc      	b.n	8002292 <__aeabi_f2d+0x1e>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2600      	movs	r6, #0
 80022fc:	e7c9      	b.n	8002292 <__aeabi_f2d+0x1e>
 80022fe:	0003      	movs	r3, r0
 8002300:	002a      	movs	r2, r5
 8002302:	3b0b      	subs	r3, #11
 8002304:	409a      	lsls	r2, r3
 8002306:	2500      	movs	r5, #0
 8002308:	e7e3      	b.n	80022d2 <__aeabi_f2d+0x5e>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	800fffff 	.word	0x800fffff
 8002310:	00000389 	.word	0x00000389
 8002314:	000007ff 	.word	0x000007ff

08002318 <__aeabi_d2f>:
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231a:	004c      	lsls	r4, r1, #1
 800231c:	0d64      	lsrs	r4, r4, #21
 800231e:	030b      	lsls	r3, r1, #12
 8002320:	1c62      	adds	r2, r4, #1
 8002322:	0a5b      	lsrs	r3, r3, #9
 8002324:	0f46      	lsrs	r6, r0, #29
 8002326:	0552      	lsls	r2, r2, #21
 8002328:	0fc9      	lsrs	r1, r1, #31
 800232a:	431e      	orrs	r6, r3
 800232c:	00c5      	lsls	r5, r0, #3
 800232e:	0d52      	lsrs	r2, r2, #21
 8002330:	2a01      	cmp	r2, #1
 8002332:	dd29      	ble.n	8002388 <__aeabi_d2f+0x70>
 8002334:	4b37      	ldr	r3, [pc, #220]	; (8002414 <__aeabi_d2f+0xfc>)
 8002336:	18e7      	adds	r7, r4, r3
 8002338:	2ffe      	cmp	r7, #254	; 0xfe
 800233a:	dc1c      	bgt.n	8002376 <__aeabi_d2f+0x5e>
 800233c:	2f00      	cmp	r7, #0
 800233e:	dd3b      	ble.n	80023b8 <__aeabi_d2f+0xa0>
 8002340:	0180      	lsls	r0, r0, #6
 8002342:	1e43      	subs	r3, r0, #1
 8002344:	4198      	sbcs	r0, r3
 8002346:	2207      	movs	r2, #7
 8002348:	00f3      	lsls	r3, r6, #3
 800234a:	0f6d      	lsrs	r5, r5, #29
 800234c:	4303      	orrs	r3, r0
 800234e:	432b      	orrs	r3, r5
 8002350:	401a      	ands	r2, r3
 8002352:	2a00      	cmp	r2, #0
 8002354:	d004      	beq.n	8002360 <__aeabi_d2f+0x48>
 8002356:	220f      	movs	r2, #15
 8002358:	401a      	ands	r2, r3
 800235a:	2a04      	cmp	r2, #4
 800235c:	d000      	beq.n	8002360 <__aeabi_d2f+0x48>
 800235e:	3304      	adds	r3, #4
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	04d2      	lsls	r2, r2, #19
 8002364:	401a      	ands	r2, r3
 8002366:	d024      	beq.n	80023b2 <__aeabi_d2f+0x9a>
 8002368:	3701      	adds	r7, #1
 800236a:	b2fa      	uxtb	r2, r7
 800236c:	2fff      	cmp	r7, #255	; 0xff
 800236e:	d002      	beq.n	8002376 <__aeabi_d2f+0x5e>
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	0a58      	lsrs	r0, r3, #9
 8002374:	e001      	b.n	800237a <__aeabi_d2f+0x62>
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	2000      	movs	r0, #0
 800237a:	0240      	lsls	r0, r0, #9
 800237c:	05d2      	lsls	r2, r2, #23
 800237e:	0a40      	lsrs	r0, r0, #9
 8002380:	07c9      	lsls	r1, r1, #31
 8002382:	4310      	orrs	r0, r2
 8002384:	4308      	orrs	r0, r1
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002388:	4335      	orrs	r5, r6
 800238a:	2c00      	cmp	r4, #0
 800238c:	d104      	bne.n	8002398 <__aeabi_d2f+0x80>
 800238e:	2d00      	cmp	r5, #0
 8002390:	d10a      	bne.n	80023a8 <__aeabi_d2f+0x90>
 8002392:	2200      	movs	r2, #0
 8002394:	2000      	movs	r0, #0
 8002396:	e7f0      	b.n	800237a <__aeabi_d2f+0x62>
 8002398:	2d00      	cmp	r5, #0
 800239a:	d0ec      	beq.n	8002376 <__aeabi_d2f+0x5e>
 800239c:	2080      	movs	r0, #128	; 0x80
 800239e:	03c0      	lsls	r0, r0, #15
 80023a0:	4330      	orrs	r0, r6
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	e7e9      	b.n	800237a <__aeabi_d2f+0x62>
 80023a6:	2400      	movs	r4, #0
 80023a8:	2300      	movs	r3, #0
 80023aa:	025b      	lsls	r3, r3, #9
 80023ac:	0a58      	lsrs	r0, r3, #9
 80023ae:	b2e2      	uxtb	r2, r4
 80023b0:	e7e3      	b.n	800237a <__aeabi_d2f+0x62>
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	003c      	movs	r4, r7
 80023b6:	e7f8      	b.n	80023aa <__aeabi_d2f+0x92>
 80023b8:	003b      	movs	r3, r7
 80023ba:	3317      	adds	r3, #23
 80023bc:	dbf3      	blt.n	80023a6 <__aeabi_d2f+0x8e>
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	4333      	orrs	r3, r6
 80023c4:	261e      	movs	r6, #30
 80023c6:	1bf6      	subs	r6, r6, r7
 80023c8:	2e1f      	cmp	r6, #31
 80023ca:	dd14      	ble.n	80023f6 <__aeabi_d2f+0xde>
 80023cc:	2202      	movs	r2, #2
 80023ce:	4252      	negs	r2, r2
 80023d0:	1bd7      	subs	r7, r2, r7
 80023d2:	001a      	movs	r2, r3
 80023d4:	40fa      	lsrs	r2, r7
 80023d6:	0017      	movs	r7, r2
 80023d8:	2e20      	cmp	r6, #32
 80023da:	d004      	beq.n	80023e6 <__aeabi_d2f+0xce>
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <__aeabi_d2f+0x100>)
 80023de:	4694      	mov	ip, r2
 80023e0:	4464      	add	r4, ip
 80023e2:	40a3      	lsls	r3, r4
 80023e4:	431d      	orrs	r5, r3
 80023e6:	002b      	movs	r3, r5
 80023e8:	1e5d      	subs	r5, r3, #1
 80023ea:	41ab      	sbcs	r3, r5
 80023ec:	2207      	movs	r2, #7
 80023ee:	433b      	orrs	r3, r7
 80023f0:	401a      	ands	r2, r3
 80023f2:	2700      	movs	r7, #0
 80023f4:	e7ad      	b.n	8002352 <__aeabi_d2f+0x3a>
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <__aeabi_d2f+0x104>)
 80023f8:	0028      	movs	r0, r5
 80023fa:	18a2      	adds	r2, r4, r2
 80023fc:	4095      	lsls	r5, r2
 80023fe:	4093      	lsls	r3, r2
 8002400:	1e6c      	subs	r4, r5, #1
 8002402:	41a5      	sbcs	r5, r4
 8002404:	40f0      	lsrs	r0, r6
 8002406:	2207      	movs	r2, #7
 8002408:	432b      	orrs	r3, r5
 800240a:	4303      	orrs	r3, r0
 800240c:	401a      	ands	r2, r3
 800240e:	2700      	movs	r7, #0
 8002410:	e79f      	b.n	8002352 <__aeabi_d2f+0x3a>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	fffffc80 	.word	0xfffffc80
 8002418:	fffffca2 	.word	0xfffffca2
 800241c:	fffffc82 	.word	0xfffffc82

08002420 <__clzsi2>:
 8002420:	211c      	movs	r1, #28
 8002422:	2301      	movs	r3, #1
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	4298      	cmp	r0, r3
 8002428:	d301      	bcc.n	800242e <__clzsi2+0xe>
 800242a:	0c00      	lsrs	r0, r0, #16
 800242c:	3910      	subs	r1, #16
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	4298      	cmp	r0, r3
 8002432:	d301      	bcc.n	8002438 <__clzsi2+0x18>
 8002434:	0a00      	lsrs	r0, r0, #8
 8002436:	3908      	subs	r1, #8
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	4298      	cmp	r0, r3
 800243c:	d301      	bcc.n	8002442 <__clzsi2+0x22>
 800243e:	0900      	lsrs	r0, r0, #4
 8002440:	3904      	subs	r1, #4
 8002442:	a202      	add	r2, pc, #8	; (adr r2, 800244c <__clzsi2+0x2c>)
 8002444:	5c10      	ldrb	r0, [r2, r0]
 8002446:	1840      	adds	r0, r0, r1
 8002448:	4770      	bx	lr
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	02020304 	.word	0x02020304
 8002450:	01010101 	.word	0x01010101
	...

0800245c <UserDisplayTask>:
 *	@param None
 *	@retval
 *
 */
void UserDisplayTask()
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af02      	add	r7, sp, #8
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <UserDisplayTask+0xec>)
 8002464:	2108      	movs	r1, #8
 8002466:	0018      	movs	r0, r3
 8002468:	f001 fbe0 	bl	8003c2c <HAL_GPIO_ReadPin>
 800246c:	0003      	movs	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10a      	bne.n	8002488 <UserDisplayTask+0x2c>
	   {
		   ILI9341_Draw_Text("ON ", 10, 50, BLACK, 3, GREEN);
 8002472:	4836      	ldr	r0, [pc, #216]	; (800254c <UserDisplayTask+0xf0>)
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <UserDisplayTask+0xf4>)
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2303      	movs	r3, #3
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	2232      	movs	r2, #50	; 0x32
 8002480:	210a      	movs	r1, #10
 8002482:	f002 fd63 	bl	8004f4c <ILI9341_Draw_Text>
 8002486:	e009      	b.n	800249c <UserDisplayTask+0x40>
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 10, 50, BLACK, 3, RED);
 8002488:	4832      	ldr	r0, [pc, #200]	; (8002554 <UserDisplayTask+0xf8>)
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <UserDisplayTask+0xfc>)
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2303      	movs	r3, #3
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	2232      	movs	r2, #50	; 0x32
 8002496:	210a      	movs	r1, #10
 8002498:	f002 fd58 	bl	8004f4c <ILI9341_Draw_Text>
	   }

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
 800249c:	f003 fc96 	bl	8005dcc <TSC2046_EM_GetTouchScreenState>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d043      	beq.n	800252c <UserDisplayTask+0xd0>
	   {
		 ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 80024a4:	482d      	ldr	r0, [pc, #180]	; (800255c <UserDisplayTask+0x100>)
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <UserDisplayTask+0xfc>)
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	2302      	movs	r3, #2
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	220a      	movs	r2, #10
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	f002 fd4a 	bl	8004f4c <ILI9341_Draw_Text>
		 HAL_GPIO_TogglePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin);
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <UserDisplayTask+0xec>)
 80024ba:	2108      	movs	r1, #8
 80024bc:	0018      	movs	r0, r3
 80024be:	f001 fbef 	bl	8003ca0 <HAL_GPIO_TogglePin>

		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 80024c2:	f003 fcf5 	bl	8005eb0 <TSC2046_HM_RunConversion>
 80024c6:	1e03      	subs	r3, r0, #0
 80024c8:	d125      	bne.n	8002516 <UserDisplayTask+0xba>
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 80024ca:	f003 fdf9 	bl	80060c0 <TSC4026_STM32_HM_GetXpos>
 80024ce:	0003      	movs	r3, r0
 80024d0:	001c      	movs	r4, r3
 80024d2:	f003 fdff 	bl	80060d4 <TSC4026_STM32_HM_GetYpos>
 80024d6:	0003      	movs	r3, r0
 80024d8:	0019      	movs	r1, r3
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <UserDisplayTask+0x104>)
 80024dc:	2202      	movs	r2, #2
 80024de:	0020      	movs	r0, r4
 80024e0:	f002 fb92 	bl	8004c08 <ILI9341_Draw_Filled_Circle>
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 80024e4:	f003 fdec 	bl	80060c0 <TSC4026_STM32_HM_GetXpos>
 80024e8:	0003      	movs	r3, r0
 80024ea:	001c      	movs	r4, r3
 80024ec:	f003 fdf2 	bl	80060d4 <TSC4026_STM32_HM_GetYpos>
 80024f0:	0003      	movs	r3, r0
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <UserDisplayTask+0x108>)
 80024f4:	0038      	movs	r0, r7
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	0023      	movs	r3, r4
 80024fa:	210f      	movs	r1, #15
 80024fc:	f004 fa9c 	bl	8006a38 <sniprintf>
		   ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 8002500:	0038      	movs	r0, r7
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <UserDisplayTask+0xfc>)
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2302      	movs	r3, #2
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	220a      	movs	r2, #10
 800250e:	21b4      	movs	r1, #180	; 0xb4
 8002510:	f002 fd1c 	bl	8004f4c <ILI9341_Draw_Text>
	   else
	   {
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
	   }

}
 8002514:	e014      	b.n	8002540 <UserDisplayTask+0xe4>
		   ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 8002516:	4814      	ldr	r0, [pc, #80]	; (8002568 <UserDisplayTask+0x10c>)
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <UserDisplayTask+0xfc>)
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	220a      	movs	r2, #10
 8002524:	21c8      	movs	r1, #200	; 0xc8
 8002526:	f002 fd11 	bl	8004f4c <ILI9341_Draw_Text>
}
 800252a:	e009      	b.n	8002540 <UserDisplayTask+0xe4>
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <UserDisplayTask+0x110>)
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <UserDisplayTask+0xfc>)
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	2302      	movs	r3, #2
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	220a      	movs	r2, #10
 800253a:	2164      	movs	r1, #100	; 0x64
 800253c:	f002 fd06 	bl	8004f4c <ILI9341_Draw_Text>
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b005      	add	sp, #20
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	48000400 	.word	0x48000400
 800254c:	080082d8 	.word	0x080082d8
 8002550:	000014a2 	.word	0x000014a2
 8002554:	080082dc 	.word	0x080082dc
 8002558:	0000d8c3 	.word	0x0000d8c3
 800255c:	080082e0 	.word	0x080082e0
 8002560:	0000ffff 	.word	0x0000ffff
 8002564:	080082e8 	.word	0x080082e8
 8002568:	080082f8 	.word	0x080082f8
 800256c:	08008304 	.word	0x08008304

08002570 <UserPollADC>:

void UserPollADC()
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af02      	add	r7, sp, #8
   // if PSU enabled, poll imonitor pin
   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <UserPollADC+0xe8>)
 8002578:	2108      	movs	r1, #8
 800257a:	0018      	movs	r0, r3
 800257c:	f001 fb56 	bl	8003c2c <HAL_GPIO_ReadPin>
 8002580:	0003      	movs	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d148      	bne.n	8002618 <UserPollADC+0xa8>
   {
	   if(HAL_ADC_PollForConversion(&hadc, 1) == HAL_OK)
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <UserPollADC+0xec>)
 8002588:	2101      	movs	r1, #1
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fe32 	bl	80031f4 <HAL_ADC_PollForConversion>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d144      	bne.n	800261e <UserPollADC+0xae>
	   {
		   if(adc_count == ADC_DATA_SIZE)			// calc adc mean, reset adc data + count
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <UserPollADC+0xf0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fdff 	bl	800219c <__aeabi_i2d>
 800259e:	2200      	movs	r2, #0
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <UserPollADC+0xf4>)
 80025a2:	f7fd ff49 	bl	8000438 <__aeabi_dcmpeq>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d025      	beq.n	80025f6 <UserPollADC+0x86>
		   {
			   f_adc_data = (float)adc_data / ADC_DATA_SIZE;
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <UserPollADC+0xf8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fe f882 	bl	80006b8 <__aeabi_ui2f>
 80025b4:	1c03      	adds	r3, r0, #0
 80025b6:	492d      	ldr	r1, [pc, #180]	; (800266c <UserPollADC+0xfc>)
 80025b8:	1c18      	adds	r0, r3, #0
 80025ba:	f7fd ff6b 	bl	8000494 <__aeabi_fdiv>
 80025be:	1c03      	adds	r3, r0, #0
 80025c0:	1c1a      	adds	r2, r3, #0
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <UserPollADC+0x100>)
 80025c4:	601a      	str	r2, [r3, #0]
			   f_adc_data = adc_data / 4095.0;		// convert to decimal
 80025c6:	4b28      	ldr	r3, [pc, #160]	; (8002668 <UserPollADC+0xf8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff fe20 	bl	8002210 <__aeabi_ui2d>
 80025d0:	2200      	movs	r2, #0
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <UserPollADC+0x104>)
 80025d4:	f7fe fbcc 	bl	8000d70 <__aeabi_ddiv>
 80025d8:	0003      	movs	r3, r0
 80025da:	000c      	movs	r4, r1
 80025dc:	0018      	movs	r0, r3
 80025de:	0021      	movs	r1, r4
 80025e0:	f7ff fe9a 	bl	8002318 <__aeabi_d2f>
 80025e4:	1c02      	adds	r2, r0, #0
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <UserPollADC+0x100>)
 80025e8:	601a      	str	r2, [r3, #0]
			   adc_data = 0;						// clear the total
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <UserPollADC+0xf8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
			   adc_count = 0;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <UserPollADC+0xf0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		   }

		   adc_data += HAL_ADC_GetValue(&hadc);		// add next read value to total
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <UserPollADC+0xec>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fe8d 	bl	8003318 <HAL_ADC_GetValue>
 80025fe:	0002      	movs	r2, r0
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <UserPollADC+0xf8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	18d2      	adds	r2, r2, r3
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <UserPollADC+0xf8>)
 8002608:	601a      	str	r2, [r3, #0]
		   adc_count++;
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <UserPollADC+0xf0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <UserPollADC+0xf0>)
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e002      	b.n	800261e <UserPollADC+0xae>
	   }
   }
   else
   {
	   f_adc_data = 0.0;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <UserPollADC+0x100>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
   }

   char imon_string[15];
   snprintf(imon_string, sizeof(imon_string), "%f mA", f_adc_data);
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <UserPollADC+0x100>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c18      	adds	r0, r3, #0
 8002624:	f7ff fe26 	bl	8002274 <__aeabi_f2d>
 8002628:	0003      	movs	r3, r0
 800262a:	000c      	movs	r4, r1
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <UserPollADC+0x108>)
 800262e:	0038      	movs	r0, r7
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	9401      	str	r4, [sp, #4]
 8002634:	210f      	movs	r1, #15
 8002636:	f004 f9ff 	bl	8006a38 <sniprintf>
   ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
 800263a:	0038      	movs	r0, r7
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <UserPollADC+0x10c>)
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	2303      	movs	r3, #3
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	2264      	movs	r2, #100	; 0x64
 8002648:	210a      	movs	r1, #10
 800264a:	f002 fc7f 	bl	8004f4c <ILI9341_Draw_Text>
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b005      	add	sp, #20
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	48000400 	.word	0x48000400
 800265c:	20000218 	.word	0x20000218
 8002660:	20000200 	.word	0x20000200
 8002664:	40240000 	.word	0x40240000
 8002668:	200001fc 	.word	0x200001fc
 800266c:	41200000 	.word	0x41200000
 8002670:	20000204 	.word	0x20000204
 8002674:	40affe00 	.word	0x40affe00
 8002678:	0800830c 	.word	0x0800830c
 800267c:	0000d8c3 	.word	0x0000d8c3

08002680 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	0018      	movs	r0, r3
 800268a:	230c      	movs	r3, #12
 800268c:	001a      	movs	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	f003 fd6c 	bl	800616c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <MX_ADC_Init+0xb0>)
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <MX_ADC_Init+0xb4>)
 8002698:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <MX_ADC_Init+0xb0>)
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0612      	lsls	r2, r2, #24
 80026a0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <MX_ADC_Init+0xb0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <MX_ADC_Init+0xb0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <MX_ADC_Init+0xb0>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_ADC_Init+0xb0>)
 80026b6:	2204      	movs	r2, #4
 80026b8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <MX_ADC_Init+0xb0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_ADC_Init+0xb0>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_ADC_Init+0xb0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_ADC_Init+0xb0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_ADC_Init+0xb0>)
 80026d4:	22c2      	movs	r2, #194	; 0xc2
 80026d6:	32ff      	adds	r2, #255	; 0xff
 80026d8:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_ADC_Init+0xb0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_ADC_Init+0xb0>)
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_ADC_Init+0xb0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_ADC_Init+0xb0>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fbeb 	bl	8002ecc <HAL_ADC_Init>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80026fa:	f000 f980 	bl	80029fe <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	0152      	lsls	r2, r2, #5
 800270a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	0552      	lsls	r2, r2, #21
 8002712:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002714:	1d3a      	adds	r2, r7, #4
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_ADC_Init+0xb0>)
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fe08 	bl	8003330 <HAL_ADC_ConfigChannel>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8002724:	f000 f96b 	bl	80029fe <Error_Handler>
  }

}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000218 	.word	0x20000218
 8002734:	40012400 	.word	0x40012400

08002738 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	2314      	movs	r3, #20
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	0018      	movs	r0, r3
 8002746:	2314      	movs	r3, #20
 8002748:	001a      	movs	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	f003 fd0e 	bl	800616c <memset>
  if(adcHandle->Instance==ADC1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_ADC_MspInit+0x84>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12c      	bne.n	80027b4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0089      	lsls	r1, r1, #2
 8002764:	430a      	orrs	r2, r1
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0289      	lsls	r1, r1, #10
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_ADC_MspInit+0x88>)
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002792:	2114      	movs	r1, #20
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2203      	movs	r2, #3
 800279e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	187a      	adds	r2, r7, r1
 80027a8:	2390      	movs	r3, #144	; 0x90
 80027aa:	05db      	lsls	r3, r3, #23
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f001 f8c4 	bl	800393c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b00a      	add	sp, #40	; 0x28
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012400 	.word	0x40012400
 80027c0:	40021000 	.word	0x40021000

080027c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ca:	240c      	movs	r4, #12
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	0018      	movs	r0, r3
 80027d0:	2314      	movs	r3, #20
 80027d2:	001a      	movs	r2, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	f003 fcc9 	bl	800616c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <MX_GPIO_Init+0x134>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <MX_GPIO_Init+0x134>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0289      	lsls	r1, r1, #10
 80027e4:	430a      	orrs	r2, r1
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <MX_GPIO_Init+0x134>)
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <MX_GPIO_Init+0x134>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <MX_GPIO_Init+0x134>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	0309      	lsls	r1, r1, #12
 8002800:	430a      	orrs	r2, r1
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <MX_GPIO_Init+0x134>)
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	4013      	ands	r3, r2
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <MX_GPIO_Init+0x134>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <MX_GPIO_Init+0x134>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	02c9      	lsls	r1, r1, #11
 800281c:	430a      	orrs	r2, r1
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <MX_GPIO_Init+0x134>)
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	02db      	lsls	r3, r3, #11
 8002828:	4013      	ands	r3, r2
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <MX_GPIO_Init+0x138>)
 8002830:	2200      	movs	r2, #0
 8002832:	2130      	movs	r1, #48	; 0x30
 8002834:	0018      	movs	r0, r3
 8002836:	f001 fa16 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 800283a:	4931      	ldr	r1, [pc, #196]	; (8002900 <MX_GPIO_Init+0x13c>)
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <MX_GPIO_Init+0x140>)
 800283e:	2200      	movs	r2, #0
 8002840:	0018      	movs	r0, r3
 8002842:	f001 fa10 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8002846:	0021      	movs	r1, r4
 8002848:	187b      	adds	r3, r7, r1
 800284a:	2230      	movs	r2, #48	; 0x30
 800284c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	187b      	adds	r3, r7, r1
 8002850:	2201      	movs	r2, #1
 8002852:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	187b      	adds	r3, r7, r1
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800285a:	187b      	adds	r3, r7, r1
 800285c:	2203      	movs	r2, #3
 800285e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	000c      	movs	r4, r1
 8002862:	187b      	adds	r3, r7, r1
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <MX_GPIO_Init+0x138>)
 8002866:	0019      	movs	r1, r3
 8002868:	0010      	movs	r0, r2
 800286a:	f001 f867 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 800286e:	0021      	movs	r1, r4
 8002870:	187b      	adds	r3, r7, r1
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <MX_GPIO_Init+0x144>)
 8002874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2201      	movs	r2, #1
 800287a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2203      	movs	r2, #3
 8002886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	000c      	movs	r4, r1
 800288a:	187b      	adds	r3, r7, r1
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <MX_GPIO_Init+0x140>)
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f001 f853 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 8002896:	0021      	movs	r1, r4
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <MX_GPIO_Init+0x148>)
 80028a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2201      	movs	r2, #1
 80028a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80028aa:	000c      	movs	r4, r1
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <MX_GPIO_Init+0x138>)
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f001 f842 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 80028b8:	0021      	movs	r1, r4
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2208      	movs	r2, #8
 80028be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2201      	movs	r2, #1
 80028c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2202      	movs	r2, #2
 80028ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <MX_GPIO_Init+0x140>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	0010      	movs	r0, r2
 80028da:	f001 f82f 	bl	800393c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2007      	movs	r0, #7
 80028e4:	f000 fff8 	bl	80038d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028e8:	2007      	movs	r0, #7
 80028ea:	f001 f80a 	bl	8003902 <HAL_NVIC_EnableIRQ>

}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b009      	add	sp, #36	; 0x24
 80028f4:	bd90      	pop	{r4, r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	48000800 	.word	0x48000800
 8002900:	00001009 	.word	0x00001009
 8002904:	48000400 	.word	0x48000400
 8002908:	00001001 	.word	0x00001001
 800290c:	10210000 	.word	0x10210000

08002910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002914:	f000 fa54 	bl	8002dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002918:	f000 f826 	bl	8002968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800291c:	f7ff ff52 	bl	80027c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002920:	f000 f872 	bl	8002a08 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002924:	f000 f8ae 	bl	8002a84 <MX_SPI2_Init>
  MX_ADC_Init();
 8002928:	f7ff feaa 	bl	8002680 <MX_ADC_Init>
  MX_TIM17_Init();
 800292c:	f000 f9ce 	bl	8002ccc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  // init ILI9341 library
  ILI9341_Init();
 8002930:	f002 fb7d 	bl	800502e <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002934:	2001      	movs	r0, #1
 8002936:	f002 ffef 	bl	8005918 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(LBLUE);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <main+0x50>)
 800293c:	0018      	movs	r0, r3
 800293e:	f002 fd7f 	bl	8005440 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 8002942:	f003 fa81 	bl	8005e48 <TSC2046_HM_Init>

  // init ADC
  HAL_ADCEx_Calibration_Start(&hadc);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <main+0x54>)
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fe7b 	bl	8003644 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <main+0x54>)
 8002950:	0018      	movs	r0, r3
 8002952:	f000 fbfb 	bl	800314c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UserDisplayTask();
 8002956:	f7ff fd81 	bl	800245c <UserDisplayTask>
	  UserPollADC();
 800295a:	f7ff fe09 	bl	8002570 <UserPollADC>
  {
 800295e:	e7fa      	b.n	8002956 <main+0x46>
 8002960:	00004cf6 	.word	0x00004cf6
 8002964:	20000218 	.word	0x20000218

08002968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b093      	sub	sp, #76	; 0x4c
 800296c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296e:	2414      	movs	r4, #20
 8002970:	193b      	adds	r3, r7, r4
 8002972:	0018      	movs	r0, r3
 8002974:	2334      	movs	r3, #52	; 0x34
 8002976:	001a      	movs	r2, r3
 8002978:	2100      	movs	r1, #0
 800297a:	f003 fbf7 	bl	800616c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	0018      	movs	r0, r3
 8002982:	2310      	movs	r3, #16
 8002984:	001a      	movs	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	f003 fbf0 	bl	800616c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800298c:	0021      	movs	r1, r4
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2202      	movs	r2, #2
 8002992:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2201      	movs	r2, #1
 8002998:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2210      	movs	r2, #16
 800299e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2202      	movs	r2, #2
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0212      	lsls	r2, r2, #8
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0352      	lsls	r2, r2, #13
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 f9b0 	bl	8003d24 <HAL_RCC_OscConfig>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80029c8:	f000 f819 	bl	80029fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	2207      	movs	r2, #7
 80029d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2202      	movs	r2, #2
 80029d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	0018      	movs	r0, r3
 80029ea:	f001 fd21 	bl	8004430 <HAL_RCC_ClockConfig>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029f2:	f000 f804 	bl	80029fe <Error_Handler>
  }
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b013      	add	sp, #76	; 0x4c
 80029fc:	bd90      	pop	{r4, r7, pc}

080029fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <MX_SPI1_Init+0x78>)
 8002a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a14:	2282      	movs	r2, #130	; 0x82
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a22:	22e0      	movs	r2, #224	; 0xe0
 8002a24:	00d2      	lsls	r2, r2, #3
 8002a26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a3e:	2208      	movs	r2, #8
 8002a40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a56:	2207      	movs	r2, #7
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <MX_SPI1_Init+0x74>)
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f001 fe39 	bl	80046e0 <HAL_SPI_Init>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a72:	f7ff ffc4 	bl	80029fe <Error_Handler>
  }

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200002bc 	.word	0x200002bc
 8002a80:	40013000 	.word	0x40013000

08002a84 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <MX_SPI2_Init+0x78>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002a90:	2282      	movs	r2, #130	; 0x82
 8002a92:	0052      	lsls	r2, r2, #1
 8002a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002a9e:	22e0      	movs	r2, #224	; 0xe0
 8002aa0:	00d2      	lsls	r2, r2, #3
 8002aa2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0092      	lsls	r2, r2, #2
 8002ab6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002aba:	2210      	movs	r2, #16
 8002abc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <MX_SPI2_Init+0x74>)
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f001 fdfb 	bl	80046e0 <HAL_SPI_Init>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d001      	beq.n	8002af2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002aee:	f7ff ff86 	bl	80029fe <Error_Handler>
  }

}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000258 	.word	0x20000258
 8002afc:	40003800 	.word	0x40003800

08002b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	231c      	movs	r3, #28
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2314      	movs	r3, #20
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f003 fb2a 	bl	800616c <memset>
  if(spiHandle->Instance==SPI1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <HAL_SPI_MspInit+0x104>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d133      	bne.n	8002b8a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b22:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	0149      	lsls	r1, r1, #5
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	619a      	str	r2, [r3, #24]
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	015b      	lsls	r3, r3, #5
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0289      	lsls	r1, r1, #10
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	4013      	ands	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b5a:	211c      	movs	r1, #28
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	22e0      	movs	r2, #224	; 0xe0
 8002b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	2202      	movs	r2, #2
 8002b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2203      	movs	r2, #3
 8002b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	187a      	adds	r2, r7, r1
 8002b7c:	2390      	movs	r3, #144	; 0x90
 8002b7e:	05db      	lsls	r3, r3, #23
 8002b80:	0011      	movs	r1, r2
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 feda 	bl	800393c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b88:	e037      	b.n	8002bfa <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_SPI_MspInit+0x10c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d132      	bne.n	8002bfa <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	01c9      	lsls	r1, r1, #7
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	61da      	str	r2, [r3, #28]
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	01db      	lsls	r3, r3, #7
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	02c9      	lsls	r1, r1, #11
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	615a      	str	r2, [r3, #20]
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_SPI_MspInit+0x108>)
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	02db      	lsls	r3, r3, #11
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8002bcc:	211c      	movs	r1, #28
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	22e0      	movs	r2, #224	; 0xe0
 8002bd2:	0212      	lsls	r2, r2, #8
 8002bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2202      	movs	r2, #2
 8002bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	187b      	adds	r3, r7, r1
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2203      	movs	r2, #3
 8002be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_SPI_MspInit+0x110>)
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f000 fea1 	bl	800393c <HAL_GPIO_Init>
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b00c      	add	sp, #48	; 0x30
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40013000 	.word	0x40013000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40003800 	.word	0x40003800
 8002c10:	48000400 	.word	0x48000400

08002c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_MspInit+0x44>)
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_MspInit+0x44>)
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_MspInit+0x44>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_MspInit+0x44>)
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_MspInit+0x44>)
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	0549      	lsls	r1, r1, #21
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	61da      	str	r2, [r3, #28]
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_MspInit+0x44>)
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	055b      	lsls	r3, r3, #21
 8002c48:	4013      	ands	r3, r2
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	40021000 	.word	0x40021000

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c84:	f000 f8e4 	bl	8002e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	TSC2046_IM_PENIRQ_EXTI_Handler();
 8002c92:	f003 fa29 	bl	80060e8 <TSC2046_IM_PENIRQ_EXTI_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c96:	2040      	movs	r0, #64	; 0x40
 8002c98:	f001 f81e 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	TSC2046_IM_HardwareManagerLoopHandler();
 8002ca8:	f003 fa26 	bl	80060f8 <TSC2046_IM_HardwareManagerLoopHandler>
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <TIM17_IRQHandler+0x18>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f001 fddc 	bl	800486c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000320 	.word	0x20000320

08002cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cd2:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <MX_TIM17_Init+0x4c>)
 8002cd4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	00d2      	lsls	r2, r2, #3
 8002ce8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <MX_TIM17_Init+0x48>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f001 fd88 	bl	8004814 <HAL_TIM_Base_Init>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002d08:	f7ff fe79 	bl	80029fe <Error_Handler>
  }

}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000320 	.word	0x20000320
 8002d18:	40014800 	.word	0x40014800

08002d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_TIM_Base_MspInit+0x48>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d115      	bne.n	8002d5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_TIM_Base_MspInit+0x4c>)
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_TIM_Base_MspInit+0x4c>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	02c9      	lsls	r1, r1, #11
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_TIM_Base_MspInit+0x4c>)
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	02db      	lsls	r3, r3, #11
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2016      	movs	r0, #22
 8002d50:	f000 fdc2 	bl	80038d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002d54:	2016      	movs	r0, #22
 8002d56:	f000 fdd4 	bl	8003902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40014800 	.word	0x40014800
 8002d68:	40021000 	.word	0x40021000

08002d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490e      	ldr	r1, [pc, #56]	; (8002dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0b      	ldr	r4, [pc, #44]	; (8002db8 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d96:	f7ff ff93 	bl	8002cc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d9a:	f003 f9c3 	bl	8006124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d9e:	f7ff fdb7 	bl	8002910 <main>

08002da2 <LoopForever>:

LoopForever:
    b LoopForever
 8002da2:	e7fe      	b.n	8002da2 <LoopForever>
  ldr   r0, =_estack
 8002da4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002db0:	080088e8 	.word	0x080088e8
  ldr r2, =_sbss
 8002db4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002db8:	2000036c 	.word	0x2000036c

08002dbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC1_COMP_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_Init+0x24>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_Init+0x24>)
 8002dca:	2110      	movs	r1, #16
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 f809 	bl	8002de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd6:	f7ff ff1d 	bl	8002c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40022000 	.word	0x40022000

08002de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_InitTick+0x5c>)
 8002df2:	681c      	ldr	r4, [r3, #0]
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_InitTick+0x60>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	0019      	movs	r1, r3
 8002dfa:	23fa      	movs	r3, #250	; 0xfa
 8002dfc:	0098      	lsls	r0, r3, #2
 8002dfe:	f7fd f995 	bl	800012c <__udivsi3>
 8002e02:	0003      	movs	r3, r0
 8002e04:	0019      	movs	r1, r3
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd f990 	bl	800012c <__udivsi3>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fd87 	bl	8003922 <HAL_SYSTICK_Config>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e00f      	b.n	8002e3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d80b      	bhi.n	8002e3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2301      	movs	r3, #1
 8002e26:	425b      	negs	r3, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fd54 	bl	80038d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_InitTick+0x64>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b003      	add	sp, #12
 8002e42:	bd90      	pop	{r4, r7, pc}
 8002e44:	20000000 	.word	0x20000000
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_IncTick+0x1c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	001a      	movs	r2, r3
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_IncTick+0x20>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	18d2      	adds	r2, r2, r3
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_IncTick+0x20>)
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20000360 	.word	0x20000360

08002e74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <HAL_GetTick+0x10>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	20000360 	.word	0x20000360

08002e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff fff0 	bl	8002e74 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	d005      	beq.n	8002eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_Delay+0x40>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	f7ff ffe0 	bl	8002e74 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8f7      	bhi.n	8002eb0 <HAL_Delay+0x28>
  {
  }
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000008 	.word	0x20000008

08002ecc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e125      	b.n	8003136 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10a      	bne.n	8002f08 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2234      	movs	r2, #52	; 0x34
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff fc18 	bl	8002738 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d000      	beq.n	8002f14 <HAL_ADC_Init+0x48>
 8002f12:	e103      	b.n	800311c <HAL_ADC_Init+0x250>
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d000      	beq.n	8002f20 <HAL_ADC_Init+0x54>
 8002f1e:	e0fd      	b.n	800311c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2204      	movs	r2, #4
 8002f28:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002f2a:	d000      	beq.n	8002f2e <HAL_ADC_Init+0x62>
 8002f2c:	e0f6      	b.n	800311c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4a83      	ldr	r2, [pc, #524]	; (8003140 <HAL_ADC_Init+0x274>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	2202      	movs	r2, #2
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d112      	bne.n	8002f72 <HAL_ADC_Init+0xa6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d009      	beq.n	8002f6e <HAL_ADC_Init+0xa2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	401a      	ands	r2, r3
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0xa6>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_ADC_Init+0xa8>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2218      	movs	r2, #24
 8002f80:	4393      	bics	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	0899      	lsrs	r1, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4964      	ldr	r1, [pc, #400]	; (8003144 <HAL_ADC_Init+0x278>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7e1b      	ldrb	r3, [r3, #24]
 8002fba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e5b      	ldrb	r3, [r3, #25]
 8002fc0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e9b      	ldrb	r3, [r3, #26]
 8002fc8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002fca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d002      	beq.n	8002fda <HAL_ADC_Init+0x10e>
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_Init+0x110>
 8002fda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fdc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002fe2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_Init+0x124>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_Init+0x126>
 8002ff0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002ff2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2124      	movs	r1, #36	; 0x24
 8002ff8:	5c5b      	ldrb	r3, [r3, r1]
 8002ffa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002ffc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7edb      	ldrb	r3, [r3, #27]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d115      	bne.n	8003038 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	7e9b      	ldrb	r3, [r3, #26]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	0252      	lsls	r2, r2, #9
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	e00b      	b.n	8003038 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	2220      	movs	r2, #32
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	2201      	movs	r2, #1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	23c2      	movs	r3, #194	; 0xc2
 800303e:	33ff      	adds	r3, #255	; 0xff
 8003040:	429a      	cmp	r2, r3
 8003042:	d007      	beq.n	8003054 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800304c:	4313      	orrs	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	055b      	lsls	r3, r3, #21
 800306c:	429a      	cmp	r2, r3
 800306e:	d01b      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d017      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2b02      	cmp	r3, #2
 800307e:	d013      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	2b03      	cmp	r3, #3
 8003086:	d00f      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	2b04      	cmp	r3, #4
 800308e:	d00b      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2b05      	cmp	r3, #5
 8003096:	d007      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2b06      	cmp	r3, #6
 800309e:	d003      	beq.n	80030a8 <HAL_ADC_Init+0x1dc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d112      	bne.n	80030ce <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2107      	movs	r1, #7
 80030b4:	438a      	bics	r2, r1
 80030b6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6959      	ldr	r1, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	2207      	movs	r2, #7
 80030c4:	401a      	ands	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_ADC_Init+0x27c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10b      	bne.n	80030f6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	2203      	movs	r2, #3
 80030ea:	4393      	bics	r3, r2
 80030ec:	2201      	movs	r2, #1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030f4:	e01c      	b.n	8003130 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	2212      	movs	r2, #18
 80030fc:	4393      	bics	r3, r2
 80030fe:	2210      	movs	r2, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2201      	movs	r2, #1
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003112:	230f      	movs	r3, #15
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800311a:	e009      	b.n	8003130 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	2210      	movs	r2, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003130:	230f      	movs	r3, #15
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b004      	add	sp, #16
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	fffffefd 	.word	0xfffffefd
 8003144:	fffe0219 	.word	0xfffe0219
 8003148:	833fffe7 	.word	0x833fffe7

0800314c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003154:	230f      	movs	r3, #15
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2204      	movs	r2, #4
 8003164:	4013      	ands	r3, r2
 8003166:	d138      	bne.n	80031da <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2234      	movs	r2, #52	; 0x34
 800316c:	5c9b      	ldrb	r3, [r3, r2]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Start+0x2a>
 8003172:	2302      	movs	r3, #2
 8003174:	e038      	b.n	80031e8 <HAL_ADC_Start+0x9c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2234      	movs	r2, #52	; 0x34
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7e5b      	ldrb	r3, [r3, #25]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d007      	beq.n	8003196 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003186:	230f      	movs	r3, #15
 8003188:	18fc      	adds	r4, r7, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f9dd 	bl	800354c <ADC_Enable>
 8003192:	0003      	movs	r3, r0
 8003194:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003196:	230f      	movs	r3, #15
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d120      	bne.n	80031e2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <HAL_ADC_Start+0xa4>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0052      	lsls	r2, r2, #1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2234      	movs	r2, #52	; 0x34
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	221c      	movs	r2, #28
 80031c6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2104      	movs	r1, #4
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031da:	230f      	movs	r3, #15
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031e2:	230f      	movs	r3, #15
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	781b      	ldrb	r3, [r3, #0]
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b005      	add	sp, #20
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	fffff0fe 	.word	0xfffff0fe

080031f4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d102      	bne.n	800320c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003206:	2308      	movs	r3, #8
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e014      	b.n	8003236 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10b      	bne.n	8003232 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	2220      	movs	r2, #32
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2234      	movs	r2, #52	; 0x34
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003232:	230c      	movs	r3, #12
 8003234:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003236:	f7ff fe1d 	bl	8002e74 <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800323e:	e019      	b.n	8003274 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	d016      	beq.n	8003274 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_ADC_PollForConversion+0x68>
 800324c:	f7ff fe12 	bl	8002e74 <HAL_GetTick>
 8003250:	0002      	movs	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d20b      	bcs.n	8003274 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	2204      	movs	r2, #4
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2234      	movs	r2, #52	; 0x34
 800326c:	2100      	movs	r1, #0
 800326e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e04a      	b.n	800330a <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	d0df      	beq.n	8003240 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	23c0      	movs	r3, #192	; 0xc0
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d12d      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d129      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2208      	movs	r2, #8
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d122      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d110      	bne.n	80032e0 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	210c      	movs	r1, #12
 80032ca:	438a      	bics	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_ADC_PollForConversion+0x120>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	2201      	movs	r2, #1
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
 80032de:	e00b      	b.n	80032f8 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2220      	movs	r2, #32
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	2201      	movs	r2, #1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7e1b      	ldrb	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	220c      	movs	r2, #12
 8003306:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b004      	add	sp, #16
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	fffffefe 	.word	0xfffffefe

08003318 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333a:	230f      	movs	r3, #15
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	055b      	lsls	r3, r3, #21
 800334e:	429a      	cmp	r2, r3
 8003350:	d011      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x46>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00d      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x46>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	2b02      	cmp	r3, #2
 8003360:	d009      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x46>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	2b03      	cmp	r3, #3
 8003368:	d005      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x46>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	2b04      	cmp	r3, #4
 8003370:	d001      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x46>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2234      	movs	r2, #52	; 0x34
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x54>
 8003380:	2302      	movs	r3, #2
 8003382:	e0d0      	b.n	8003526 <HAL_ADC_ConfigChannel+0x1f6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2234      	movs	r2, #52	; 0x34
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2204      	movs	r2, #4
 8003394:	4013      	ands	r3, r2
 8003396:	d000      	beq.n	800339a <HAL_ADC_ConfigChannel+0x6a>
 8003398:	e0b4      	b.n	8003504 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a64      	ldr	r2, [pc, #400]	; (8003530 <HAL_ADC_ConfigChannel+0x200>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x76>
 80033a4:	e082      	b.n	80034ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	055b      	lsls	r3, r3, #21
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d037      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d033      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d02f      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d02b      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d027      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d023      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d01f      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d01b      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2107      	movs	r1, #7
 800340c:	400b      	ands	r3, r1
 800340e:	429a      	cmp	r2, r3
 8003410:	d012      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2107      	movs	r1, #7
 800341e:	438a      	bics	r2, r1
 8003420:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6959      	ldr	r1, [r3, #20]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2207      	movs	r2, #7
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d007      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x120>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b11      	cmp	r3, #17
 8003446:	d003      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x120>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b12      	cmp	r3, #18
 800344e:	d163      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <HAL_ADC_ConfigChannel+0x204>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b10      	cmp	r3, #16
 800345a:	d009      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x140>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b11      	cmp	r3, #17
 8003462:	d102      	bne.n	800346a <HAL_ADC_ConfigChannel+0x13a>
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	03db      	lsls	r3, r3, #15
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x144>
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	045b      	lsls	r3, r3, #17
 800346e:	e001      	b.n	8003474 <HAL_ADC_ConfigChannel+0x144>
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <HAL_ADC_ConfigChannel+0x204>)
 8003476:	430b      	orrs	r3, r1
 8003478:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b10      	cmp	r3, #16
 8003480:	d14a      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_ADC_ConfigChannel+0x208>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	492d      	ldr	r1, [pc, #180]	; (800353c <HAL_ADC_ConfigChannel+0x20c>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7fc fe4f 	bl	800012c <__udivsi3>
 800348e:	0003      	movs	r3, r0
 8003490:	001a      	movs	r2, r3
 8003492:	0013      	movs	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	189b      	adds	r3, r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_ConfigChannel+0x16e>
 80034aa:	e035      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4099      	lsls	r1, r3
 80034ba:	000b      	movs	r3, r1
 80034bc:	43d9      	mvns	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d007      	beq.n	80034de <HAL_ADC_ConfigChannel+0x1ae>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b11      	cmp	r3, #17
 80034d4:	d003      	beq.n	80034de <HAL_ADC_ConfigChannel+0x1ae>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b12      	cmp	r3, #18
 80034dc:	d11c      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_ADC_ConfigChannel+0x204>)
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d007      	beq.n	80034fa <HAL_ADC_ConfigChannel+0x1ca>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b11      	cmp	r3, #17
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x1c6>
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_ADC_ConfigChannel+0x210>)
 80034f4:	e002      	b.n	80034fc <HAL_ADC_ConfigChannel+0x1cc>
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_ADC_ConfigChannel+0x214>)
 80034f8:	e000      	b.n	80034fc <HAL_ADC_ConfigChannel+0x1cc>
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_ADC_ConfigChannel+0x218>)
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <HAL_ADC_ConfigChannel+0x204>)
 80034fe:	400b      	ands	r3, r1
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e009      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	2220      	movs	r2, #32
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003510:	230f      	movs	r3, #15
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2234      	movs	r2, #52	; 0x34
 800351c:	2100      	movs	r1, #0
 800351e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003520:	230f      	movs	r3, #15
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	781b      	ldrb	r3, [r3, #0]
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	00001001 	.word	0x00001001
 8003534:	40012708 	.word	0x40012708
 8003538:	20000000 	.word	0x20000000
 800353c:	000f4240 	.word	0x000f4240
 8003540:	ffbfffff 	.word	0xffbfffff
 8003544:	feffffff 	.word	0xfeffffff
 8003548:	ff7fffff 	.word	0xff7fffff

0800354c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2203      	movs	r2, #3
 8003564:	4013      	ands	r3, r2
 8003566:	2b01      	cmp	r3, #1
 8003568:	d112      	bne.n	8003590 <ADC_Enable+0x44>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d009      	beq.n	800358c <ADC_Enable+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	401a      	ands	r2, r3
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	429a      	cmp	r2, r3
 800358a:	d101      	bne.n	8003590 <ADC_Enable+0x44>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <ADC_Enable+0x46>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d14b      	bne.n	800362e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <ADC_Enable+0xec>)
 800359e:	4013      	ands	r3, r2
 80035a0:	d00d      	beq.n	80035be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	2210      	movs	r2, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2201      	movs	r2, #1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e038      	b.n	8003630 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <ADC_Enable+0xf0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <ADC_Enable+0xf4>)
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fc fda9 	bl	800012c <__udivsi3>
 80035da:	0003      	movs	r3, r0
 80035dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035de:	e002      	b.n	80035e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f9      	bne.n	80035e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ec:	f7ff fc42 	bl	8002e74 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035f4:	e014      	b.n	8003620 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f6:	f7ff fc3d 	bl	8002e74 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d90d      	bls.n	8003620 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	2210      	movs	r2, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2201      	movs	r2, #1
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	4013      	ands	r3, r2
 800362a:	2b01      	cmp	r3, #1
 800362c:	d1e3      	bne.n	80035f6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}
 8003638:	80000017 	.word	0x80000017
 800363c:	20000000 	.word	0x20000000
 8003640:	000f4240 	.word	0x000f4240

08003644 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364c:	2317      	movs	r3, #23
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2234      	movs	r2, #52	; 0x34
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_ADCEx_Calibration_Start+0x26>
 8003666:	2302      	movs	r3, #2
 8003668:	e084      	b.n	8003774 <HAL_ADCEx_Calibration_Start+0x130>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2234      	movs	r2, #52	; 0x34
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2203      	movs	r2, #3
 800367a:	4013      	ands	r3, r2
 800367c:	2b01      	cmp	r3, #1
 800367e:	d112      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0x62>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	2b01      	cmp	r3, #1
 800368c:	d009      	beq.n	80036a2 <HAL_ADCEx_Calibration_Start+0x5e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	401a      	ands	r2, r3
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	429a      	cmp	r2, r3
 80036a0:	d101      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0x62>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0x64>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d152      	bne.n	8003752 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	4a32      	ldr	r2, [pc, #200]	; (800377c <HAL_ADCEx_Calibration_Start+0x138>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	2202      	movs	r2, #2
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2203      	movs	r2, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2103      	movs	r1, #3
 80036d4:	438a      	bics	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	0609      	lsls	r1, r1, #24
 80036e6:	430a      	orrs	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80036ea:	f7ff fbc3 	bl	8002e74 <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036f2:	e014      	b.n	800371e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036f4:	f7ff fbbe 	bl	8002e74 <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d90d      	bls.n	800371e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	2212      	movs	r2, #18
 8003708:	4393      	bics	r3, r2
 800370a:	2210      	movs	r2, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2234      	movs	r2, #52	; 0x34
 8003716:	2100      	movs	r1, #0
 8003718:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e02a      	b.n	8003774 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	0fdb      	lsrs	r3, r3, #31
 8003726:	07da      	lsls	r2, r3, #31
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	429a      	cmp	r2, r3
 800372e:	d0e1      	beq.n	80036f4 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68d9      	ldr	r1, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	430a      	orrs	r2, r1
 800373e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	2203      	movs	r2, #3
 8003746:	4393      	bics	r3, r2
 8003748:	2201      	movs	r2, #1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
 8003750:	e009      	b.n	8003766 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	2220      	movs	r2, #32
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800375e:	2317      	movs	r3, #23
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2234      	movs	r2, #52	; 0x34
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800376e:	2317      	movs	r3, #23
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b006      	add	sp, #24
 800377a:	bd80      	pop	{r7, pc}
 800377c:	fffffefd 	.word	0xfffffefd

08003780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	0002      	movs	r2, r0
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b7f      	cmp	r3, #127	; 0x7f
 8003792:	d809      	bhi.n	80037a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003794:	1dfb      	adds	r3, r7, #7
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	001a      	movs	r2, r3
 800379a:	231f      	movs	r3, #31
 800379c:	401a      	ands	r2, r3
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_EnableIRQ+0x30>)
 80037a0:	2101      	movs	r1, #1
 80037a2:	4091      	lsls	r1, r2
 80037a4:	000a      	movs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
  }
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	0002      	movs	r2, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b7f      	cmp	r3, #127	; 0x7f
 80037c8:	d828      	bhi.n	800381c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ca:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <__NVIC_SetPriority+0xd4>)
 80037cc:	1dfb      	adds	r3, r7, #7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	33c0      	adds	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	589b      	ldr	r3, [r3, r2]
 80037da:	1dfa      	adds	r2, r7, #7
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	0011      	movs	r1, r2
 80037e0:	2203      	movs	r2, #3
 80037e2:	400a      	ands	r2, r1
 80037e4:	00d2      	lsls	r2, r2, #3
 80037e6:	21ff      	movs	r1, #255	; 0xff
 80037e8:	4091      	lsls	r1, r2
 80037ea:	000a      	movs	r2, r1
 80037ec:	43d2      	mvns	r2, r2
 80037ee:	401a      	ands	r2, r3
 80037f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	401a      	ands	r2, r3
 80037fa:	1dfb      	adds	r3, r7, #7
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	0018      	movs	r0, r3
 8003800:	2303      	movs	r3, #3
 8003802:	4003      	ands	r3, r0
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003808:	481f      	ldr	r0, [pc, #124]	; (8003888 <__NVIC_SetPriority+0xd4>)
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b25b      	sxtb	r3, r3
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	430a      	orrs	r2, r1
 8003814:	33c0      	adds	r3, #192	; 0xc0
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800381a:	e031      	b.n	8003880 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <__NVIC_SetPriority+0xd8>)
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	0019      	movs	r1, r3
 8003824:	230f      	movs	r3, #15
 8003826:	400b      	ands	r3, r1
 8003828:	3b08      	subs	r3, #8
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3306      	adds	r3, #6
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	18d3      	adds	r3, r2, r3
 8003832:	3304      	adds	r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1dfa      	adds	r2, r7, #7
 8003838:	7812      	ldrb	r2, [r2, #0]
 800383a:	0011      	movs	r1, r2
 800383c:	2203      	movs	r2, #3
 800383e:	400a      	ands	r2, r1
 8003840:	00d2      	lsls	r2, r2, #3
 8003842:	21ff      	movs	r1, #255	; 0xff
 8003844:	4091      	lsls	r1, r2
 8003846:	000a      	movs	r2, r1
 8003848:	43d2      	mvns	r2, r2
 800384a:	401a      	ands	r2, r3
 800384c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	401a      	ands	r2, r3
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	0018      	movs	r0, r3
 800385c:	2303      	movs	r3, #3
 800385e:	4003      	ands	r3, r0
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <__NVIC_SetPriority+0xd8>)
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	001c      	movs	r4, r3
 800386c:	230f      	movs	r3, #15
 800386e:	4023      	ands	r3, r4
 8003870:	3b08      	subs	r3, #8
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	430a      	orrs	r2, r1
 8003876:	3306      	adds	r3, #6
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	18c3      	adds	r3, r0, r3
 800387c:	3304      	adds	r3, #4
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b003      	add	sp, #12
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <SysTick_Config+0x40>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a2:	2301      	movs	r3, #1
 80038a4:	e010      	b.n	80038c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <SysTick_Config+0x44>)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	3a01      	subs	r2, #1
 80038ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ae:	2301      	movs	r3, #1
 80038b0:	425b      	negs	r3, r3
 80038b2:	2103      	movs	r1, #3
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ff7d 	bl	80037b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <SysTick_Config+0x44>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <SysTick_Config+0x44>)
 80038c2:	2207      	movs	r2, #7
 80038c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	00ffffff 	.word	0x00ffffff
 80038d4:	e000e010 	.word	0xe000e010

080038d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	210f      	movs	r1, #15
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	1c02      	adds	r2, r0, #0
 80038e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff ff5d 	bl	80037b4 <__NVIC_SetPriority>
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	0002      	movs	r2, r0
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390e:	1dfb      	adds	r3, r7, #7
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	0018      	movs	r0, r3
 8003916:	f7ff ff33 	bl	8003780 <__NVIC_EnableIRQ>
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff ffaf 	bl	8003890 <SysTick_Config>
 8003932:	0003      	movs	r3, r0
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e155      	b.n	8003bf8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4091      	lsls	r1, r2
 8003956:	000a      	movs	r2, r1
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d100      	bne.n	8003964 <HAL_GPIO_Init+0x28>
 8003962:	e146      	b.n	8003bf2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x38>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b12      	cmp	r3, #18
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	58d3      	ldr	r3, [r2, r3]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2207      	movs	r2, #7
 8003986:	4013      	ands	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	409a      	lsls	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	43da      	mvns	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2107      	movs	r1, #7
 80039a0:	400b      	ands	r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	409a      	lsls	r2, r3
 80039a6:	0013      	movs	r3, r2
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	0092      	lsls	r2, r2, #2
 80039b8:	6939      	ldr	r1, [r7, #16]
 80039ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	409a      	lsls	r2, r3
 80039ca:	0013      	movs	r3, r2
 80039cc:	43da      	mvns	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2203      	movs	r2, #3
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	409a      	lsls	r2, r3
 80039e2:	0013      	movs	r3, r2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d00b      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d007      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a04:	2b11      	cmp	r3, #17
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b12      	cmp	r3, #18
 8003a0e:	d130      	bne.n	8003a72 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	43da      	mvns	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a46:	2201      	movs	r2, #1
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	0013      	movs	r3, r2
 8003a82:	43da      	mvns	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	055b      	lsls	r3, r3, #21
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <HAL_GPIO_Init+0x174>
 8003aae:	e0a0      	b.n	8003bf2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab0:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <HAL_GPIO_Init+0x2d4>)
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_GPIO_Init+0x2d4>)
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
 8003abc:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <HAL_GPIO_Init+0x2d4>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_GPIO_Init+0x2d8>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	589b      	ldr	r3, [r3, r2]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	4013      	ands	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	2390      	movs	r3, #144	; 0x90
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d019      	beq.n	8003b2a <HAL_GPIO_Init+0x1ee>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a47      	ldr	r2, [pc, #284]	; (8003c18 <HAL_GPIO_Init+0x2dc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_GPIO_Init+0x1ea>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a46      	ldr	r2, [pc, #280]	; (8003c1c <HAL_GPIO_Init+0x2e0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00d      	beq.n	8003b22 <HAL_GPIO_Init+0x1e6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a45      	ldr	r2, [pc, #276]	; (8003c20 <HAL_GPIO_Init+0x2e4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <HAL_GPIO_Init+0x1e2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a44      	ldr	r2, [pc, #272]	; (8003c24 <HAL_GPIO_Init+0x2e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <HAL_GPIO_Init+0x1de>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e008      	b.n	8003b2c <HAL_GPIO_Init+0x1f0>
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	e006      	b.n	8003b2c <HAL_GPIO_Init+0x1f0>
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e004      	b.n	8003b2c <HAL_GPIO_Init+0x1f0>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_Init+0x1f0>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_GPIO_Init+0x1f0>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	2103      	movs	r1, #3
 8003b30:	400a      	ands	r2, r1
 8003b32:	0092      	lsls	r2, r2, #2
 8003b34:	4093      	lsls	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b3c:	4935      	ldr	r1, [pc, #212]	; (8003c14 <HAL_GPIO_Init+0x2d8>)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	3302      	adds	r3, #2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	025b      	lsls	r3, r3, #9
 8003b62:	4013      	ands	r3, r2
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	035b      	lsls	r3, r3, #13
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	039b      	lsls	r3, r3, #14
 8003be0:	4013      	ands	r3, r2
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_GPIO_Init+0x2ec>)
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	40da      	lsrs	r2, r3
 8003c00:	1e13      	subs	r3, r2, #0
 8003c02:	d000      	beq.n	8003c06 <HAL_GPIO_Init+0x2ca>
 8003c04:	e6a2      	b.n	800394c <HAL_GPIO_Init+0x10>
  } 
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b006      	add	sp, #24
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40010000 	.word	0x40010000
 8003c18:	48000400 	.word	0x48000400
 8003c1c:	48000800 	.word	0x48000800
 8003c20:	48000c00 	.word	0x48000c00
 8003c24:	48001000 	.word	0x48001000
 8003c28:	40010400 	.word	0x40010400

08003c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	000a      	movs	r2, r1
 8003c36:	1cbb      	adds	r3, r7, #2
 8003c38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	1cba      	adds	r2, r7, #2
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	4013      	ands	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c46:	230f      	movs	r3, #15
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
  }
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	0008      	movs	r0, r1
 8003c70:	0011      	movs	r1, r2
 8003c72:	1cbb      	adds	r3, r7, #2
 8003c74:	1c02      	adds	r2, r0, #0
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	1c7b      	adds	r3, r7, #1
 8003c7a:	1c0a      	adds	r2, r1, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c7e:	1c7b      	adds	r3, r7, #1
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c86:	1cbb      	adds	r3, r7, #2
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c8e:	e003      	b.n	8003c98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c90:	1cbb      	adds	r3, r7, #2
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	000a      	movs	r2, r1
 8003caa:	1cbb      	adds	r3, r7, #2
 8003cac:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	1cba      	adds	r2, r7, #2
 8003cb4:	8812      	ldrh	r2, [r2, #0]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d005      	beq.n	8003cc6 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cba:	1cbb      	adds	r3, r7, #2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	041a      	lsls	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc4:	e003      	b.n	8003cce <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cc6:	1cbb      	adds	r3, r7, #2
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0002      	movs	r2, r0
 8003ce0:	1dbb      	adds	r3, r7, #6
 8003ce2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	1dba      	adds	r2, r7, #6
 8003cea:	8812      	ldrh	r2, [r2, #0]
 8003cec:	4013      	ands	r3, r2
 8003cee:	d008      	beq.n	8003d02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003cf2:	1dba      	adds	r2, r7, #6
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f807 	bl	8003d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40010400 	.word	0x40010400

08003d10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	0002      	movs	r2, r0
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f000 fb76 	bl	8004424 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d100      	bne.n	8003d44 <HAL_RCC_OscConfig+0x20>
 8003d42:	e08e      	b.n	8003e62 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d44:	4bc5      	ldr	r3, [pc, #788]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	220c      	movs	r2, #12
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d00e      	beq.n	8003d6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d50:	4bc2      	ldr	r3, [pc, #776]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	220c      	movs	r2, #12
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d117      	bne.n	8003d8c <HAL_RCC_OscConfig+0x68>
 8003d5c:	4bbf      	ldr	r3, [pc, #764]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	23c0      	movs	r3, #192	; 0xc0
 8003d62:	025b      	lsls	r3, r3, #9
 8003d64:	401a      	ands	r2, r3
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	025b      	lsls	r3, r3, #9
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6e:	4bbb      	ldr	r3, [pc, #748]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	4013      	ands	r3, r2
 8003d78:	d100      	bne.n	8003d7c <HAL_RCC_OscConfig+0x58>
 8003d7a:	e071      	b.n	8003e60 <HAL_RCC_OscConfig+0x13c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <HAL_RCC_OscConfig+0x62>
 8003d84:	e06c      	b.n	8003e60 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f000 fb4c 	bl	8004424 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x80>
 8003d94:	4bb1      	ldr	r3, [pc, #708]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4bb0      	ldr	r3, [pc, #704]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	0249      	lsls	r1, r1, #9
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e02f      	b.n	8003e04 <HAL_RCC_OscConfig+0xe0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xa2>
 8003dac:	4bab      	ldr	r3, [pc, #684]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4baa      	ldr	r3, [pc, #680]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003db2:	49ab      	ldr	r1, [pc, #684]	; (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4ba8      	ldr	r3, [pc, #672]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4ba7      	ldr	r3, [pc, #668]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dbe:	49a9      	ldr	r1, [pc, #676]	; (8004064 <HAL_RCC_OscConfig+0x340>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e01e      	b.n	8003e04 <HAL_RCC_OscConfig+0xe0>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d10e      	bne.n	8003dec <HAL_RCC_OscConfig+0xc8>
 8003dce:	4ba3      	ldr	r3, [pc, #652]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4ba2      	ldr	r3, [pc, #648]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	02c9      	lsls	r1, r1, #11
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	4b9f      	ldr	r3, [pc, #636]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b9e      	ldr	r3, [pc, #632]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	0249      	lsls	r1, r1, #9
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xe0>
 8003dec:	4b9b      	ldr	r3, [pc, #620]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b9a      	ldr	r3, [pc, #616]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003df2:	499b      	ldr	r1, [pc, #620]	; (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	4b98      	ldr	r3, [pc, #608]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b97      	ldr	r3, [pc, #604]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003dfe:	4999      	ldr	r1, [pc, #612]	; (8004064 <HAL_RCC_OscConfig+0x340>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d014      	beq.n	8003e36 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7ff f832 	bl	8002e74 <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e16:	f7ff f82d 	bl	8002e74 <HAL_GetTick>
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	; 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e2fd      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e28:	4b8c      	ldr	r3, [pc, #560]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	4013      	ands	r3, r2
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0xf2>
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7ff f81d 	bl	8002e74 <HAL_GetTick>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7ff f818 	bl	8002e74 <HAL_GetTick>
 8003e44:	0002      	movs	r2, r0
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	; 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e2e8      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x11c>
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2202      	movs	r2, #2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <HAL_RCC_OscConfig+0x14a>
 8003e6c:	e06c      	b.n	8003f48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e6e:	4b7b      	ldr	r3, [pc, #492]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	220c      	movs	r2, #12
 8003e74:	4013      	ands	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e78:	4b78      	ldr	r3, [pc, #480]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	220c      	movs	r2, #12
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d11f      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x1a0>
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	23c0      	movs	r3, #192	; 0xc0
 8003e8a:	025b      	lsls	r3, r3, #9
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d116      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	4b71      	ldr	r3, [pc, #452]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_OscConfig+0x188>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e2bb      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	22f8      	movs	r2, #248	; 0xf8
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	00da      	lsls	r2, r3, #3
 8003ebc:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	e041      	b.n	8003f48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d024      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ecc:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe ffcc 	bl	8002e74 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fe ffc7 	bl	8002e74 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e297      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d0f1      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b57      	ldr	r3, [pc, #348]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	22f8      	movs	r2, #248	; 0xf8
 8003f04:	4393      	bics	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00da      	lsls	r2, r3, #3
 8003f0e:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e018      	b.n	8003f48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	438a      	bics	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fe ffa7 	bl	8002e74 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe ffa2 	bl	8002e74 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e272      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	d1f1      	bne.n	8003f2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d036      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b40      	ldr	r3, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f60:	2101      	movs	r1, #1
 8003f62:	430a      	orrs	r2, r1
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe ff85 	bl	8002e74 <HAL_GetTick>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe ff80 	bl	8002e74 <HAL_GetTick>
 8003f74:	0002      	movs	r2, r0
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e250      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2202      	movs	r2, #2
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d0f1      	beq.n	8003f70 <HAL_RCC_OscConfig+0x24c>
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	438a      	bics	r2, r1
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe ff6b 	bl	8002e74 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe ff66 	bl	8002e74 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e236      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2202      	movs	r2, #2
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d1f1      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x2a8>
 8003fca:	e0b5      	b.n	8004138 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fcc:	231f      	movs	r3, #31
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	055b      	lsls	r3, r3, #21
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	0549      	lsls	r1, r1, #21
 8003fea:	430a      	orrs	r2, r1
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	055b      	lsls	r3, r3, #21
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_RCC_OscConfig+0x344>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4013      	ands	r3, r2
 800400e:	d11a      	bne.n	8004046 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004010:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_RCC_OscConfig+0x344>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_RCC_OscConfig+0x344>)
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	0049      	lsls	r1, r1, #1
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fe ff29 	bl	8002e74 <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fe ff24 	bl	8002e74 <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1f4      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x344>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4013      	ands	r3, r2
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10e      	bne.n	800406c <HAL_RCC_OscConfig+0x348>
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	4b02      	ldr	r3, [pc, #8]	; (800405c <HAL_RCC_OscConfig+0x338>)
 8004054:	2101      	movs	r1, #1
 8004056:	430a      	orrs	r2, r1
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	e035      	b.n	80040c8 <HAL_RCC_OscConfig+0x3a4>
 800405c:	40021000 	.word	0x40021000
 8004060:	fffeffff 	.word	0xfffeffff
 8004064:	fffbffff 	.word	0xfffbffff
 8004068:	40007000 	.word	0x40007000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x36a>
 8004074:	4bca      	ldr	r3, [pc, #808]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	4bc9      	ldr	r3, [pc, #804]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800407a:	2101      	movs	r1, #1
 800407c:	438a      	bics	r2, r1
 800407e:	621a      	str	r2, [r3, #32]
 8004080:	4bc7      	ldr	r3, [pc, #796]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004082:	6a1a      	ldr	r2, [r3, #32]
 8004084:	4bc6      	ldr	r3, [pc, #792]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004086:	2104      	movs	r1, #4
 8004088:	438a      	bics	r2, r1
 800408a:	621a      	str	r2, [r3, #32]
 800408c:	e01c      	b.n	80040c8 <HAL_RCC_OscConfig+0x3a4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x38c>
 8004096:	4bc2      	ldr	r3, [pc, #776]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	4bc1      	ldr	r3, [pc, #772]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800409c:	2104      	movs	r1, #4
 800409e:	430a      	orrs	r2, r1
 80040a0:	621a      	str	r2, [r3, #32]
 80040a2:	4bbf      	ldr	r3, [pc, #764]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	4bbe      	ldr	r3, [pc, #760]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	430a      	orrs	r2, r1
 80040ac:	621a      	str	r2, [r3, #32]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0x3a4>
 80040b0:	4bbb      	ldr	r3, [pc, #748]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	4bba      	ldr	r3, [pc, #744]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	4bb8      	ldr	r3, [pc, #736]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	4bb7      	ldr	r3, [pc, #732]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040c2:	2104      	movs	r1, #4
 80040c4:	438a      	bics	r2, r1
 80040c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d014      	beq.n	80040fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d0:	f7fe fed0 	bl	8002e74 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	e009      	b.n	80040ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fe fecb 	bl	8002e74 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	4aaf      	ldr	r2, [pc, #700]	; (80043a4 <HAL_RCC_OscConfig+0x680>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e19a      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ee:	4bac      	ldr	r3, [pc, #688]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x3b6>
 80040f8:	e013      	b.n	8004122 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fe febb 	bl	8002e74 <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fe feb6 	bl	8002e74 <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	4aa5      	ldr	r2, [pc, #660]	; (80043a4 <HAL_RCC_OscConfig+0x680>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e185      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4ba1      	ldr	r3, [pc, #644]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	2202      	movs	r2, #2
 800411e:	4013      	ands	r3, r2
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004122:	231f      	movs	r3, #31
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412c:	4b9c      	ldr	r3, [pc, #624]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	4b9b      	ldr	r3, [pc, #620]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004132:	499d      	ldr	r1, [pc, #628]	; (80043a8 <HAL_RCC_OscConfig+0x684>)
 8004134:	400a      	ands	r2, r1
 8004136:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2210      	movs	r2, #16
 800413e:	4013      	ands	r3, r2
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d12a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800414a:	4b95      	ldr	r3, [pc, #596]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800414c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414e:	4b94      	ldr	r3, [pc, #592]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004150:	2104      	movs	r1, #4
 8004152:	430a      	orrs	r2, r1
 8004154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004156:	4b92      	ldr	r3, [pc, #584]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415a:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800415c:	2101      	movs	r1, #1
 800415e:	430a      	orrs	r2, r1
 8004160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe fe87 	bl	8002e74 <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800416c:	f7fe fe82 	bl	8002e74 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e152      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800417e:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d0f1      	beq.n	800416c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004188:	4b85      	ldr	r3, [pc, #532]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	22f8      	movs	r2, #248	; 0xf8
 800418e:	4393      	bics	r3, r2
 8004190:	0019      	movs	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	00da      	lsls	r2, r3, #3
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800419a:	430a      	orrs	r2, r1
 800419c:	635a      	str	r2, [r3, #52]	; 0x34
 800419e:	e034      	b.n	800420a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	3305      	adds	r3, #5
 80041a6:	d111      	bne.n	80041cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80041a8:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ac:	4b7c      	ldr	r3, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041ae:	2104      	movs	r1, #4
 80041b0:	438a      	bics	r2, r1
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041b4:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	22f8      	movs	r2, #248	; 0xf8
 80041ba:	4393      	bics	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	00da      	lsls	r2, r3, #3
 80041c4:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ca:	e01e      	b.n	800420a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041cc:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d0:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041d2:	2104      	movs	r1, #4
 80041d4:	430a      	orrs	r2, r1
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80041d8:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041dc:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80041de:	2101      	movs	r1, #1
 80041e0:	438a      	bics	r2, r1
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fe fe46 	bl	8002e74 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041ee:	f7fe fe41 	bl	8002e74 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e111      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004200:	4b67      	ldr	r3, [pc, #412]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d1f1      	bne.n	80041ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	4013      	ands	r3, r2
 8004212:	d05c      	beq.n	80042ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004214:	4b62      	ldr	r3, [pc, #392]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	220c      	movs	r2, #12
 800421a:	4013      	ands	r3, r2
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d00e      	beq.n	800423e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004220:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	220c      	movs	r2, #12
 8004226:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004228:	2b08      	cmp	r3, #8
 800422a:	d114      	bne.n	8004256 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800422c:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	23c0      	movs	r3, #192	; 0xc0
 8004232:	025b      	lsls	r3, r3, #9
 8004234:	401a      	ands	r2, r3
 8004236:	23c0      	movs	r3, #192	; 0xc0
 8004238:	025b      	lsls	r3, r3, #9
 800423a:	429a      	cmp	r2, r3
 800423c:	d10b      	bne.n	8004256 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800423e:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	025b      	lsls	r3, r3, #9
 8004246:	4013      	ands	r3, r2
 8004248:	d040      	beq.n	80042cc <HAL_RCC_OscConfig+0x5a8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d03c      	beq.n	80042cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0e6      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01b      	beq.n	8004296 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800425e:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004262:	4b4f      	ldr	r3, [pc, #316]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	0249      	lsls	r1, r1, #9
 8004268:	430a      	orrs	r2, r1
 800426a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fe fe02 	bl	8002e74 <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004276:	f7fe fdfd 	bl	8002e74 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0cd      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004288:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	025b      	lsls	r3, r3, #9
 8004290:	4013      	ands	r3, r2
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x552>
 8004294:	e01b      	b.n	80042ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004296:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800429c:	4943      	ldr	r1, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x688>)
 800429e:	400a      	ands	r2, r1
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fe fde7 	bl	8002e74 <HAL_GetTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ac:	f7fe fde2 	bl	8002e74 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0b2      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80042be:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80042c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	025b      	lsls	r3, r3, #9
 80042c6:	4013      	ands	r3, r2
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x588>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5b4>
 80042d6:	e0a4      	b.n	8004422 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d8:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	220c      	movs	r2, #12
 80042de:	4013      	ands	r3, r2
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d100      	bne.n	80042e6 <HAL_RCC_OscConfig+0x5c2>
 80042e4:	e078      	b.n	80043d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d14c      	bne.n	8004388 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 80042f4:	492e      	ldr	r1, [pc, #184]	; (80043b0 <HAL_RCC_OscConfig+0x68c>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fe fdbb 	bl	8002e74 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe fdb6 	bl	8002e74 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e086      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	049b      	lsls	r3, r3, #18
 800431e:	4013      	ands	r3, r2
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004322:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	220f      	movs	r2, #15
 8004328:	4393      	bics	r3, r2
 800432a:	0019      	movs	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004332:	430a      	orrs	r2, r1
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_RCC_OscConfig+0x690>)
 800433c:	4013      	ands	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	431a      	orrs	r2, r3
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	0449      	lsls	r1, r1, #17
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe fd89 	bl	8002e74 <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe fd84 	bl	8002e74 <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e054      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	049b      	lsls	r3, r3, #18
 8004382:	4013      	ands	r3, r2
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x644>
 8004386:	e04c      	b.n	8004422 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_RCC_OscConfig+0x67c>)
 800438e:	4908      	ldr	r1, [pc, #32]	; (80043b0 <HAL_RCC_OscConfig+0x68c>)
 8004390:	400a      	ands	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fd6e 	bl	8002e74 <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x6a6>
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40021000 	.word	0x40021000
 80043a4:	00001388 	.word	0x00001388
 80043a8:	efffffff 	.word	0xefffffff
 80043ac:	fffeffff 	.word	0xfffeffff
 80043b0:	feffffff 	.word	0xfeffffff
 80043b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fd5c 	bl	8002e74 <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e02c      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCC_OscConfig+0x708>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	049b      	lsls	r3, r3, #18
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x694>
 80043d6:	e024      	b.n	8004422 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e01f      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_RCC_OscConfig+0x708>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_RCC_OscConfig+0x708>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	23c0      	movs	r3, #192	; 0xc0
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d10e      	bne.n	800441e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	220f      	movs	r2, #15
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d107      	bne.n	800441e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	23f0      	movs	r3, #240	; 0xf0
 8004412:	039b      	lsls	r3, r3, #14
 8004414:	401a      	ands	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b008      	add	sp, #32
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0bf      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d911      	bls.n	8004476 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	4393      	bics	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	4013      	ands	r3, r2
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0a6      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	d015      	beq.n	80044ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2204      	movs	r2, #4
 8004486:	4013      	ands	r3, r2
 8004488:	d006      	beq.n	8004498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800448a:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 8004490:	21e0      	movs	r1, #224	; 0xe0
 8004492:	00c9      	lsls	r1, r1, #3
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b4d      	ldr	r3, [pc, #308]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	22f0      	movs	r2, #240	; 0xf0
 800449e:	4393      	bics	r3, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4013      	ands	r3, r2
 80044b4:	d04c      	beq.n	8004550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	4013      	ands	r3, r2
 80044c8:	d120      	bne.n	800450c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07a      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	049b      	lsls	r3, r3, #18
 80044de:	4013      	ands	r3, r2
 80044e0:	d114      	bne.n	800450c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06e      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 80044f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	025b      	lsls	r3, r3, #9
 80044f6:	4013      	ands	r3, r2
 80044f8:	d108      	bne.n	800450c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e062      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2202      	movs	r2, #2
 8004504:	4013      	ands	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e05b      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450c:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2203      	movs	r2, #3
 8004512:	4393      	bics	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004520:	f7fe fca8 	bl	8002e74 <HAL_GetTick>
 8004524:	0003      	movs	r3, r0
 8004526:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004528:	e009      	b.n	800453e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452a:	f7fe fca3 	bl	8002e74 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <HAL_RCC_ClockConfig+0x1a4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e042      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	220c      	movs	r2, #12
 8004544:	401a      	ands	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	d1ec      	bne.n	800452a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2201      	movs	r2, #1
 8004556:	4013      	ands	r3, r2
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d211      	bcs.n	8004582 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	4393      	bics	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x19c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2201      	movs	r2, #1
 8004576:	4013      	ands	r3, r2
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e020      	b.n	80045c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2204      	movs	r2, #4
 8004588:	4013      	ands	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <HAL_RCC_ClockConfig+0x1a8>)
 8004592:	4013      	ands	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045a0:	f000 f820 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80045a4:	0001      	movs	r1, r0
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1a0>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	220f      	movs	r2, #15
 80045ae:	4013      	ands	r3, r2
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x1ac>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	000a      	movs	r2, r1
 80045b6:	40da      	lsrs	r2, r3
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1b0>)
 80045ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fe fc13 	bl	8002de8 <HAL_InitTick>
  
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	00001388 	.word	0x00001388
 80045d8:	fffff8ff 	.word	0xfffff8ff
 80045dc:	08008434 	.word	0x08008434
 80045e0:	20000000 	.word	0x20000000

080045e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b08f      	sub	sp, #60	; 0x3c
 80045e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80045ea:	2314      	movs	r3, #20
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <HAL_RCC_GetSysClockFreq+0xe8>)
 80045f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045f2:	c313      	stmia	r3!, {r0, r1, r4}
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	4a35      	ldr	r2, [pc, #212]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80045fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045fe:	c313      	stmia	r3!, {r0, r1, r4}
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004608:	2300      	movs	r3, #0
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
 800460c:	2300      	movs	r3, #0
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
 8004610:	2300      	movs	r3, #0
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004618:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	220c      	movs	r2, #12
 8004622:	4013      	ands	r3, r2
 8004624:	2b08      	cmp	r3, #8
 8004626:	d006      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x52>
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d043      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xd0>
 800462c:	2b04      	cmp	r3, #4
 800462e:	d144      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004634:	e044      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	0c9b      	lsrs	r3, r3, #18
 800463a:	220f      	movs	r2, #15
 800463c:	4013      	ands	r3, r2
 800463e:	2214      	movs	r2, #20
 8004640:	18ba      	adds	r2, r7, r2
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004646:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	220f      	movs	r2, #15
 800464c:	4013      	ands	r3, r2
 800464e:	1d3a      	adds	r2, r7, #4
 8004650:	5cd3      	ldrb	r3, [r2, r3]
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	23c0      	movs	r3, #192	; 0xc0
 8004658:	025b      	lsls	r3, r3, #9
 800465a:	401a      	ands	r2, r3
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	025b      	lsls	r3, r3, #9
 8004660:	429a      	cmp	r2, r3
 8004662:	d109      	bne.n	8004678 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004666:	481c      	ldr	r0, [pc, #112]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004668:	f7fb fd60 	bl	800012c <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	001a      	movs	r2, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	4353      	muls	r3, r2
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e01a      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467a:	23c0      	movs	r3, #192	; 0xc0
 800467c:	025b      	lsls	r3, r3, #9
 800467e:	401a      	ands	r2, r3
 8004680:	23c0      	movs	r3, #192	; 0xc0
 8004682:	025b      	lsls	r3, r3, #9
 8004684:	429a      	cmp	r2, r3
 8004686:	d109      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468a:	4814      	ldr	r0, [pc, #80]	; (80046dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800468c:	f7fb fd4e 	bl	800012c <__udivsi3>
 8004690:	0003      	movs	r3, r0
 8004692:	001a      	movs	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	4353      	muls	r3, r2
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
 800469a:	e008      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800469c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469e:	480e      	ldr	r0, [pc, #56]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80046a0:	f7fb fd44 	bl	800012c <__udivsi3>
 80046a4:	0003      	movs	r3, r0
 80046a6:	001a      	movs	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	4353      	muls	r3, r2
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046b8:	e002      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b00f      	add	sp, #60	; 0x3c
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	08008314 	.word	0x08008314
 80046d0:	08008324 	.word	0x08008324
 80046d4:	40021000 	.word	0x40021000
 80046d8:	007a1200 	.word	0x007a1200
 80046dc:	02dc6c00 	.word	0x02dc6c00

080046e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e08a      	b.n	8004808 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	225d      	movs	r2, #93	; 0x5d
 80046fc:	5c9b      	ldrb	r3, [r3, r2]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	225c      	movs	r2, #92	; 0x5c
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f7fe f9f6 	bl	8002b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	225d      	movs	r2, #93	; 0x5d
 8004718:	2102      	movs	r1, #2
 800471a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2140      	movs	r1, #64	; 0x40
 8004728:	438a      	bics	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	23e0      	movs	r3, #224	; 0xe0
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	429a      	cmp	r2, r3
 8004736:	d902      	bls.n	800473e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e002      	b.n	8004744 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	015b      	lsls	r3, r3, #5
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	23f0      	movs	r3, #240	; 0xf0
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	429a      	cmp	r2, r3
 800474e:	d008      	beq.n	8004762 <HAL_SPI_Init+0x82>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	23e0      	movs	r3, #224	; 0xe0
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	429a      	cmp	r2, r3
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	23e0      	movs	r3, #224	; 0xe0
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	429a      	cmp	r2, r3
 8004774:	d903      	bls.n	800477e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
 800477c:	e002      	b.n	8004784 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	400b      	ands	r3, r1
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	0011      	movs	r1, r2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	2204      	movs	r2, #4
 80047c8:	401a      	ands	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	431a      	orrs	r2, r3
 80047dc:	0011      	movs	r1, r2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4907      	ldr	r1, [pc, #28]	; (8004810 <HAL_SPI_Init+0x130>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	225d      	movs	r2, #93	; 0x5d
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b004      	add	sp, #16
 800480e:	bd80      	pop	{r7, pc}
 8004810:	fffff7ff 	.word	0xfffff7ff

08004814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e01e      	b.n	8004864 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223d      	movs	r2, #61	; 0x3d
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	223c      	movs	r2, #60	; 0x3c
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f7fe fa6d 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	223d      	movs	r2, #61	; 0x3d
 8004846:	2102      	movs	r1, #2
 8004848:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	0019      	movs	r1, r3
 8004854:	0010      	movs	r0, r2
 8004856:	f000 f947 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	223d      	movs	r2, #61	; 0x3d
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d124      	bne.n	80048cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2202      	movs	r2, #2
 800488a:	4013      	ands	r3, r2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d11d      	bne.n	80048cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2203      	movs	r2, #3
 8004896:	4252      	negs	r2, r2
 8004898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2203      	movs	r2, #3
 80048a8:	4013      	ands	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f000 f902 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e007      	b.n	80048c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f8f5 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f901 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2204      	movs	r2, #4
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d125      	bne.n	8004926 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2204      	movs	r2, #4
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d11e      	bne.n	8004926 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2205      	movs	r2, #5
 80048ee:	4252      	negs	r2, r2
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	23c0      	movs	r3, #192	; 0xc0
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4013      	ands	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	0018      	movs	r0, r3
 800490a:	f000 f8d5 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 800490e:	e007      	b.n	8004920 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	0018      	movs	r0, r3
 8004914:	f000 f8c8 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f8d4 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2208      	movs	r2, #8
 800492e:	4013      	ands	r3, r2
 8004930:	2b08      	cmp	r3, #8
 8004932:	d124      	bne.n	800497e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2208      	movs	r2, #8
 800493c:	4013      	ands	r3, r2
 800493e:	2b08      	cmp	r3, #8
 8004940:	d11d      	bne.n	800497e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2209      	movs	r2, #9
 8004948:	4252      	negs	r2, r2
 800494a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2204      	movs	r2, #4
 8004950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2203      	movs	r2, #3
 800495a:	4013      	ands	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f000 f8a9 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 8004966:	e007      	b.n	8004978 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f000 f89c 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	0018      	movs	r0, r3
 8004974:	f000 f8a8 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2210      	movs	r2, #16
 8004986:	4013      	ands	r3, r2
 8004988:	2b10      	cmp	r3, #16
 800498a:	d125      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2210      	movs	r2, #16
 8004994:	4013      	ands	r3, r2
 8004996:	2b10      	cmp	r3, #16
 8004998:	d11e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2211      	movs	r2, #17
 80049a0:	4252      	negs	r2, r2
 80049a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2208      	movs	r2, #8
 80049a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	23c0      	movs	r3, #192	; 0xc0
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4013      	ands	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 f87c 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
 80049c0:	e007      	b.n	80049d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f86f 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f87b 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2201      	movs	r2, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10f      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2202      	movs	r2, #2
 80049fa:	4252      	negs	r2, r2
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f849 	bl	8004a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d10f      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d108      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2281      	movs	r2, #129	; 0x81
 8004a28:	4252      	negs	r2, r2
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f8e2 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d10f      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d108      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2241      	movs	r2, #65	; 0x41
 8004a56:	4252      	negs	r2, r2
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 f83b 	bl	8004ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d10f      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d108      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2221      	movs	r2, #33	; 0x21
 8004a84:	4252      	negs	r2, r2
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 f8ac 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d008      	beq.n	8004b12 <TIM_Base_SetConfig+0x2a>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	05db      	lsls	r3, r3, #23
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x2a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <TIM_Base_SetConfig+0xe8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2270      	movs	r2, #112	; 0x70
 8004b16:	4393      	bics	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d018      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	05db      	lsls	r3, r3, #23
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d013      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <TIM_Base_SetConfig+0xe8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00f      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <TIM_Base_SetConfig+0xec>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <TIM_Base_SetConfig+0xf0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <TIM_Base_SetConfig+0xf4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_Base_SetConfig+0x76>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <TIM_Base_SetConfig+0xf8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d108      	bne.n	8004b70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <TIM_Base_SetConfig+0xfc>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	4393      	bics	r3, r2
 8004b76:	001a      	movs	r2, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <TIM_Base_SetConfig+0xe4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_Base_SetConfig+0xce>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <TIM_Base_SetConfig+0xf0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_Base_SetConfig+0xce>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <TIM_Base_SetConfig+0xf4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_Base_SetConfig+0xce>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <TIM_Base_SetConfig+0xf8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d103      	bne.n	8004bbe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40002000 	.word	0x40002000
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	fffffcff 	.word	0xfffffcff

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	0005      	movs	r5, r0
 8004c10:	000c      	movs	r4, r1
 8004c12:	0010      	movs	r0, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	1dbb      	adds	r3, r7, #6
 8004c18:	1c2a      	adds	r2, r5, #0
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	1c22      	adds	r2, r4, #0
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	1cbb      	adds	r3, r7, #2
 8004c24:	1c02      	adds	r2, r0, #0
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	003b      	movs	r3, r7
 8004c2a:	1c0a      	adds	r2, r1, #0
 8004c2c:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8004c2e:	1cbb      	adds	r3, r7, #2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 8004c38:	1cbb      	adds	r3, r7, #2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2201      	movs	r2, #1
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8004c4c:	e06d      	b.n	8004d2a <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8004c4e:	1dbb      	adds	r3, r7, #6
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e01c      	b.n	8004c94 <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	b298      	uxth	r0, r3
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	b299      	uxth	r1, r3
 8004c6a:	003b      	movs	r3, r7
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	001a      	movs	r2, r3
 8004c70:	f000 fc10 	bl	8005494 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	b298      	uxth	r0, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	1d3a      	adds	r2, r7, #4
 8004c7e:	8812      	ldrh	r2, [r2, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	b299      	uxth	r1, r3
 8004c84:	003b      	movs	r3, r7
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	f000 fc03 	bl	8005494 <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3301      	adds	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	1dbb      	adds	r3, r7, #6
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	18d3      	adds	r3, r2, r3
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	dddb      	ble.n	8004c5a <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8004ca2:	1dbb      	adds	r3, r7, #6
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e01c      	b.n	8004ce8 <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	b298      	uxth	r0, r3
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	b299      	uxth	r1, r3
 8004cbe:	003b      	movs	r3, r7
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	f000 fbe6 	bl	8005494 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	b298      	uxth	r0, r3
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	1d3a      	adds	r2, r7, #4
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	003b      	movs	r3, r7
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	001a      	movs	r2, r3
 8004cde:	f000 fbd9 	bl	8005494 <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	1dbb      	adds	r3, r7, #6
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	dddb      	ble.n	8004cae <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	18d3      	adds	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3302      	adds	r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dd09      	ble.n	8004d2a <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	18d3      	adds	r3, r2, r3
 8004d22:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3302      	adds	r3, #2
 8004d28:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	da8d      	bge.n	8004c4e <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b00a      	add	sp, #40	; 0x28
 8004d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d3c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8004d3c:	b5b0      	push	{r4, r5, r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	0005      	movs	r5, r0
 8004d44:	000c      	movs	r4, r1
 8004d46:	0010      	movs	r0, r2
 8004d48:	0019      	movs	r1, r3
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	1c2a      	adds	r2, r5, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	1c22      	adds	r2, r4, #0
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	1cbb      	adds	r3, r7, #2
 8004d58:	1c02      	adds	r2, r0, #0
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	003b      	movs	r3, r7
 8004d5e:	1c0a      	adds	r2, r1, #0
 8004d60:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8004d62:	2117      	movs	r1, #23
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	1dfa      	adds	r2, r7, #7
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b1f      	cmp	r3, #31
 8004d72:	d803      	bhi.n	8004d7c <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8004d74:	1dfb      	adds	r3, r7, #7
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e005      	b.n	8004d88 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8004d7c:	2217      	movs	r2, #23
 8004d7e:	18bb      	adds	r3, r7, r2
 8004d80:	18ba      	adds	r2, r7, r2
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	3a20      	subs	r2, #32
 8004d86:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004d88:	2314      	movs	r3, #20
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e016      	b.n	8004dc0 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8004d92:	2317      	movs	r3, #23
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	2514      	movs	r5, #20
 8004d9a:	197b      	adds	r3, r7, r5
 8004d9c:	7818      	ldrb	r0, [r3, #0]
 8004d9e:	197b      	adds	r3, r7, r5
 8004da0:	7819      	ldrb	r1, [r3, #0]
 8004da2:	4c69      	ldr	r4, [pc, #420]	; (8004f48 <ILI9341_Draw_Char+0x20c>)
 8004da4:	0013      	movs	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	18e3      	adds	r3, r4, r3
 8004dae:	5c1a      	ldrb	r2, [r3, r0]
 8004db0:	230c      	movs	r3, #12
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004db6:	197b      	adds	r3, r7, r5
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	3201      	adds	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	2314      	movs	r3, #20
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d9e3      	bls.n	8004d92 <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8004dca:	2315      	movs	r3, #21
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e0ae      	b.n	8004f32 <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8004dd4:	2316      	movs	r3, #22
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e09d      	b.n	8004f1a <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8004dde:	2315      	movs	r3, #21
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	220c      	movs	r2, #12
 8004de6:	18ba      	adds	r2, r7, r2
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	001a      	movs	r2, r3
 8004dec:	2316      	movs	r3, #22
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	411a      	asrs	r2, r3
 8004df4:	0013      	movs	r3, r2
 8004df6:	2201      	movs	r2, #1
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d043      	beq.n	8004e84 <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8004dfc:	2328      	movs	r3, #40	; 0x28
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d115      	bne.n	8004e32 <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8004e06:	2315      	movs	r3, #21
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	18d3      	adds	r3, r2, r3
 8004e14:	b298      	uxth	r0, r3
 8004e16:	2316      	movs	r3, #22
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	1cbb      	adds	r3, r7, #2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	b299      	uxth	r1, r3
 8004e26:	003b      	movs	r3, r7
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	f000 fb32 	bl	8005494 <ILI9341_Draw_Pixel>
 8004e30:	e06d      	b.n	8004f0e <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8004e32:	2315      	movs	r3, #21
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2128      	movs	r1, #40	; 0x28
 8004e3c:	187a      	adds	r2, r7, r1
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	4353      	muls	r3, r2
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	1d3b      	adds	r3, r7, #4
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	18d3      	adds	r3, r2, r3
 8004e4a:	b298      	uxth	r0, r3
 8004e4c:	2316      	movs	r3, #22
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	000c      	movs	r4, r1
 8004e56:	187a      	adds	r2, r7, r1
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	4353      	muls	r3, r2
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	1cbb      	adds	r3, r7, #2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	18d3      	adds	r3, r2, r3
 8004e64:	b299      	uxth	r1, r3
 8004e66:	0022      	movs	r2, r4
 8004e68:	193b      	adds	r3, r7, r4
 8004e6a:	881c      	ldrh	r4, [r3, #0]
 8004e6c:	0013      	movs	r3, r2
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	2301      	movs	r3, #1
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	003b      	movs	r3, r7
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	0023      	movs	r3, r4
 8004e7e:	f000 fc7d 	bl	800577c <ILI9341_Draw_Rectangle>
 8004e82:	e044      	b.n	8004f0e <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 8004e84:	2328      	movs	r3, #40	; 0x28
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d116      	bne.n	8004ebc <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8004e8e:	2315      	movs	r3, #21
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	18d3      	adds	r3, r2, r3
 8004e9c:	b298      	uxth	r0, r3
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	1cbb      	adds	r3, r7, #2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	18d3      	adds	r3, r2, r3
 8004eac:	b299      	uxth	r1, r3
 8004eae:	232c      	movs	r3, #44	; 0x2c
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	001a      	movs	r2, r3
 8004eb6:	f000 faed 	bl	8005494 <ILI9341_Draw_Pixel>
 8004eba:	e028      	b.n	8004f0e <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8004ebc:	2315      	movs	r3, #21
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2128      	movs	r1, #40	; 0x28
 8004ec6:	187a      	adds	r2, r7, r1
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	4353      	muls	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	18d3      	adds	r3, r2, r3
 8004ed4:	b298      	uxth	r0, r3
 8004ed6:	2316      	movs	r3, #22
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	000c      	movs	r4, r1
 8004ee0:	187a      	adds	r2, r7, r1
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	4353      	muls	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	1cbb      	adds	r3, r7, #2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	0022      	movs	r2, r4
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	881c      	ldrh	r4, [r3, #0]
 8004ef6:	0013      	movs	r3, r2
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	2301      	movs	r3, #1
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	232c      	movs	r3, #44	; 0x2c
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	0023      	movs	r3, r4
 8004f0a:	f000 fc37 	bl	800577c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8004f0e:	2116      	movs	r1, #22
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	187b      	adds	r3, r7, r1
 8004f16:	3201      	adds	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	2316      	movs	r3, #22
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b07      	cmp	r3, #7
 8004f22:	d800      	bhi.n	8004f26 <ILI9341_Draw_Char+0x1ea>
 8004f24:	e75b      	b.n	8004dde <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 8004f26:	2115      	movs	r1, #21
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	3201      	adds	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	2315      	movs	r3, #21
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d800      	bhi.n	8004f3e <ILI9341_Draw_Char+0x202>
 8004f3c:	e74a      	b.n	8004dd4 <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b006      	add	sp, #24
 8004f44:	bdb0      	pop	{r4, r5, r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	08008444 	.word	0x08008444

08004f4c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	000c      	movs	r4, r1
 8004f56:	0010      	movs	r0, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	250a      	movs	r5, #10
 8004f5c:	197b      	adds	r3, r7, r5
 8004f5e:	1c22      	adds	r2, r4, #0
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	2608      	movs	r6, #8
 8004f64:	19bb      	adds	r3, r7, r6
 8004f66:	1c02      	adds	r2, r0, #0
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	1c0a      	adds	r2, r1, #0
 8004f6e:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8004f70:	197b      	adds	r3, r7, r5
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b298      	uxth	r0, r3
 8004f78:	2320      	movs	r3, #32
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	4694      	mov	ip, r2
 8004f7e:	44bc      	add	ip, r7
 8004f80:	4463      	add	r3, ip
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	2124      	movs	r1, #36	; 0x24
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	18fc      	adds	r4, r7, r3
 8004f8e:	1863      	adds	r3, r4, r1
 8004f90:	881c      	ldrh	r4, [r3, #0]
 8004f92:	19bb      	adds	r3, r7, r6
 8004f94:	8819      	ldrh	r1, [r3, #0]
 8004f96:	0023      	movs	r3, r4
 8004f98:	f000 f974 	bl	8005284 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8004f9c:	197b      	adds	r3, r7, r5
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	3b02      	subs	r3, #2
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4694      	mov	ip, r2
 8004faa:	44bc      	add	ip, r7
 8004fac:	4463      	add	r3, ip
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	2124      	movs	r1, #36	; 0x24
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	185b      	adds	r3, r3, r1
 8004fbc:	881c      	ldrh	r4, [r3, #0]
 8004fbe:	19bb      	adds	r3, r7, r6
 8004fc0:	8819      	ldrh	r1, [r3, #0]
 8004fc2:	0023      	movs	r3, r4
 8004fc4:	f000 f95e 	bl	8005284 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8004fc8:	e029      	b.n	800501e <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	60fa      	str	r2, [r7, #12]
 8004fd0:	7818      	ldrb	r0, [r3, #0]
 8004fd2:	1dbb      	adds	r3, r7, #6
 8004fd4:	881c      	ldrh	r4, [r3, #0]
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	250a      	movs	r5, #10
 8004fde:	197b      	adds	r3, r7, r5
 8004fe0:	8819      	ldrh	r1, [r3, #0]
 8004fe2:	2324      	movs	r3, #36	; 0x24
 8004fe4:	2608      	movs	r6, #8
 8004fe6:	46b4      	mov	ip, r6
 8004fe8:	44bc      	add	ip, r7
 8004fea:	4463      	add	r3, ip
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2620      	movs	r6, #32
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	199b      	adds	r3, r3, r6
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	0023      	movs	r3, r4
 8004ffe:	f7ff fe9d 	bl	8004d3c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8005002:	2308      	movs	r3, #8
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	199b      	adds	r3, r3, r6
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	1c1a      	adds	r2, r3, #0
 800500c:	1892      	adds	r2, r2, r2
 800500e:	18d3      	adds	r3, r2, r3
 8005010:	18db      	adds	r3, r3, r3
 8005012:	b299      	uxth	r1, r3
 8005014:	197b      	adds	r3, r7, r5
 8005016:	197a      	adds	r2, r7, r5
 8005018:	8812      	ldrh	r2, [r2, #0]
 800501a:	188a      	adds	r2, r1, r2
 800501c:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1d1      	bne.n	8004fca <ILI9341_Draw_Text+0x7e>
    }


}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b005      	add	sp, #20
 800502c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800502e <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8005032:	f000 fcc1 	bl	80059b8 <_LCD_Enable>
	ILI9341_SPI_Init();
 8005036:	f000 f909 	bl	800524c <ILI9341_SPI_Init>
	_LCD_Reset();
 800503a:	f000 fccb 	bl	80059d4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800503e:	2001      	movs	r0, #1
 8005040:	f000 fdc8 	bl	8005bd4 <_LCD_SendCommand>
	HAL_Delay(2000);
 8005044:	23fa      	movs	r3, #250	; 0xfa
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	0018      	movs	r0, r3
 800504a:	f7fd ff1d 	bl	8002e88 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800504e:	20cb      	movs	r0, #203	; 0xcb
 8005050:	f000 fdc0 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8005054:	2039      	movs	r0, #57	; 0x39
 8005056:	f000 fdf3 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800505a:	202c      	movs	r0, #44	; 0x2c
 800505c:	f000 fdf0 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x00);
 8005060:	2000      	movs	r0, #0
 8005062:	f000 fded 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x34);
 8005066:	2034      	movs	r0, #52	; 0x34
 8005068:	f000 fdea 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x02);
 800506c:	2002      	movs	r0, #2
 800506e:	f000 fde7 	bl	8005c40 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8005072:	20cf      	movs	r0, #207	; 0xcf
 8005074:	f000 fdae 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8005078:	2000      	movs	r0, #0
 800507a:	f000 fde1 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800507e:	20c1      	movs	r0, #193	; 0xc1
 8005080:	f000 fdde 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x30);
 8005084:	2030      	movs	r0, #48	; 0x30
 8005086:	f000 fddb 	bl	8005c40 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800508a:	20e8      	movs	r0, #232	; 0xe8
 800508c:	f000 fda2 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8005090:	2085      	movs	r0, #133	; 0x85
 8005092:	f000 fdd5 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x00);
 8005096:	2000      	movs	r0, #0
 8005098:	f000 fdd2 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x78);
 800509c:	2078      	movs	r0, #120	; 0x78
 800509e:	f000 fdcf 	bl	8005c40 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80050a2:	20ea      	movs	r0, #234	; 0xea
 80050a4:	f000 fd96 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80050a8:	2000      	movs	r0, #0
 80050aa:	f000 fdc9 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x00);
 80050ae:	2000      	movs	r0, #0
 80050b0:	f000 fdc6 	bl	8005c40 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80050b4:	20ed      	movs	r0, #237	; 0xed
 80050b6:	f000 fd8d 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 80050ba:	2064      	movs	r0, #100	; 0x64
 80050bc:	f000 fdc0 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x03);
 80050c0:	2003      	movs	r0, #3
 80050c2:	f000 fdbd 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x12);
 80050c6:	2012      	movs	r0, #18
 80050c8:	f000 fdba 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x81);
 80050cc:	2081      	movs	r0, #129	; 0x81
 80050ce:	f000 fdb7 	bl	8005c40 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 80050d2:	20f7      	movs	r0, #247	; 0xf7
 80050d4:	f000 fd7e 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 80050d8:	2020      	movs	r0, #32
 80050da:	f000 fdb1 	bl	8005c40 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 80050de:	20c0      	movs	r0, #192	; 0xc0
 80050e0:	f000 fd78 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 80050e4:	2023      	movs	r0, #35	; 0x23
 80050e6:	f000 fdab 	bl	8005c40 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 80050ea:	20c1      	movs	r0, #193	; 0xc1
 80050ec:	f000 fd72 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 80050f0:	2010      	movs	r0, #16
 80050f2:	f000 fda5 	bl	8005c40 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 80050f6:	20c5      	movs	r0, #197	; 0xc5
 80050f8:	f000 fd6c 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80050fc:	203e      	movs	r0, #62	; 0x3e
 80050fe:	f000 fd9f 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x28);
 8005102:	2028      	movs	r0, #40	; 0x28
 8005104:	f000 fd9c 	bl	8005c40 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8005108:	20c7      	movs	r0, #199	; 0xc7
 800510a:	f000 fd63 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800510e:	2086      	movs	r0, #134	; 0x86
 8005110:	f000 fd96 	bl	8005c40 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8005114:	2036      	movs	r0, #54	; 0x36
 8005116:	f000 fd5d 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800511a:	2048      	movs	r0, #72	; 0x48
 800511c:	f000 fd90 	bl	8005c40 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8005120:	203a      	movs	r0, #58	; 0x3a
 8005122:	f000 fd57 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8005126:	2055      	movs	r0, #85	; 0x55
 8005128:	f000 fd8a 	bl	8005c40 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800512c:	20b1      	movs	r0, #177	; 0xb1
 800512e:	f000 fd51 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8005132:	2000      	movs	r0, #0
 8005134:	f000 fd84 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x18);
 8005138:	2018      	movs	r0, #24
 800513a:	f000 fd81 	bl	8005c40 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800513e:	20b6      	movs	r0, #182	; 0xb6
 8005140:	f000 fd48 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8005144:	2008      	movs	r0, #8
 8005146:	f000 fd7b 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x82);
 800514a:	2082      	movs	r0, #130	; 0x82
 800514c:	f000 fd78 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x27);
 8005150:	2027      	movs	r0, #39	; 0x27
 8005152:	f000 fd75 	bl	8005c40 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8005156:	20f2      	movs	r0, #242	; 0xf2
 8005158:	f000 fd3c 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f000 fd6f 	bl	8005c40 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8005162:	2026      	movs	r0, #38	; 0x26
 8005164:	f000 fd36 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8005168:	2001      	movs	r0, #1
 800516a:	f000 fd69 	bl	8005c40 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800516e:	20e0      	movs	r0, #224	; 0xe0
 8005170:	f000 fd30 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8005174:	200f      	movs	r0, #15
 8005176:	f000 fd63 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x31);
 800517a:	2031      	movs	r0, #49	; 0x31
 800517c:	f000 fd60 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8005180:	202b      	movs	r0, #43	; 0x2b
 8005182:	f000 fd5d 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8005186:	200c      	movs	r0, #12
 8005188:	f000 fd5a 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800518c:	200e      	movs	r0, #14
 800518e:	f000 fd57 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x08);
 8005192:	2008      	movs	r0, #8
 8005194:	f000 fd54 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8005198:	204e      	movs	r0, #78	; 0x4e
 800519a:	f000 fd51 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800519e:	20f1      	movs	r0, #241	; 0xf1
 80051a0:	f000 fd4e 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x37);
 80051a4:	2037      	movs	r0, #55	; 0x37
 80051a6:	f000 fd4b 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x07);
 80051aa:	2007      	movs	r0, #7
 80051ac:	f000 fd48 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x10);
 80051b0:	2010      	movs	r0, #16
 80051b2:	f000 fd45 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x03);
 80051b6:	2003      	movs	r0, #3
 80051b8:	f000 fd42 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80051bc:	200e      	movs	r0, #14
 80051be:	f000 fd3f 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x09);
 80051c2:	2009      	movs	r0, #9
 80051c4:	f000 fd3c 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x00);
 80051c8:	2000      	movs	r0, #0
 80051ca:	f000 fd39 	bl	8005c40 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 80051ce:	20e1      	movs	r0, #225	; 0xe1
 80051d0:	f000 fd00 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80051d4:	2000      	movs	r0, #0
 80051d6:	f000 fd33 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80051da:	200e      	movs	r0, #14
 80051dc:	f000 fd30 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x14);
 80051e0:	2014      	movs	r0, #20
 80051e2:	f000 fd2d 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x03);
 80051e6:	2003      	movs	r0, #3
 80051e8:	f000 fd2a 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x11);
 80051ec:	2011      	movs	r0, #17
 80051ee:	f000 fd27 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x07);
 80051f2:	2007      	movs	r0, #7
 80051f4:	f000 fd24 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x31);
 80051f8:	2031      	movs	r0, #49	; 0x31
 80051fa:	f000 fd21 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80051fe:	20c1      	movs	r0, #193	; 0xc1
 8005200:	f000 fd1e 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x48);
 8005204:	2048      	movs	r0, #72	; 0x48
 8005206:	f000 fd1b 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x08);
 800520a:	2008      	movs	r0, #8
 800520c:	f000 fd18 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8005210:	200f      	movs	r0, #15
 8005212:	f000 fd15 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8005216:	200c      	movs	r0, #12
 8005218:	f000 fd12 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x31);
 800521c:	2031      	movs	r0, #49	; 0x31
 800521e:	f000 fd0f 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x36);
 8005222:	2036      	movs	r0, #54	; 0x36
 8005224:	f000 fd0c 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8005228:	200f      	movs	r0, #15
 800522a:	f000 fd09 	bl	8005c40 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800522e:	2011      	movs	r0, #17
 8005230:	f000 fcd0 	bl	8005bd4 <_LCD_SendCommand>
	HAL_Delay(240);
 8005234:	20f0      	movs	r0, #240	; 0xf0
 8005236:	f7fd fe27 	bl	8002e88 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800523a:	2029      	movs	r0, #41	; 0x29
 800523c:	f000 fcca 	bl	8005bd4 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005240:	2000      	movs	r0, #0
 8005242:	f000 fb69 	bl	8005918 <ILI9341_Set_Rotation>
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <ILI9341_SPI_Init+0x30>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2240      	movs	r2, #64	; 0x40
 8005256:	4013      	ands	r3, r2
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d005      	beq.n	8005268 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <ILI9341_SPI_Init+0x30>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <ILI9341_SPI_Init+0x30>)
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <ILI9341_SPI_Init+0x34>)
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <ILI9341_SPI_Init+0x34>)
 800526e:	2110      	movs	r1, #16
 8005270:	438a      	bics	r2, r1
 8005272:	615a      	str	r2, [r3, #20]
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	40013000 	.word	0x40013000
 8005280:	48000800 	.word	0x48000800

08005284 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af02      	add	r7, sp, #8
 800528a:	0005      	movs	r5, r0
 800528c:	000c      	movs	r4, r1
 800528e:	0010      	movs	r0, r2
 8005290:	0019      	movs	r1, r3
 8005292:	1dbb      	adds	r3, r7, #6
 8005294:	1c2a      	adds	r2, r5, #0
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	1c22      	adds	r2, r4, #0
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	1cbb      	adds	r3, r7, #2
 80052a0:	1c02      	adds	r2, r0, #0
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	003b      	movs	r3, r7
 80052a6:	1c0a      	adds	r2, r1, #0
 80052a8:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80052aa:	4b37      	ldr	r3, [pc, #220]	; (8005388 <ILI9341_Draw_Vertical_Line+0x104>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	1dba      	adds	r2, r7, #6
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d300      	bcc.n	80052ba <ILI9341_Draw_Vertical_Line+0x36>
 80052b8:	e062      	b.n	8005380 <ILI9341_Draw_Vertical_Line+0xfc>
 80052ba:	4b34      	ldr	r3, [pc, #208]	; (800538c <ILI9341_Draw_Vertical_Line+0x108>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	1d3a      	adds	r2, r7, #4
 80052c2:	8812      	ldrh	r2, [r2, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d25b      	bcs.n	8005380 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80052c8:	1d3b      	adds	r3, r7, #4
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	1cbb      	adds	r3, r7, #2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	18d3      	adds	r3, r2, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	4a2d      	ldr	r2, [pc, #180]	; (800538c <ILI9341_Draw_Vertical_Line+0x108>)
 80052d6:	8812      	ldrh	r2, [r2, #0]
 80052d8:	b292      	uxth	r2, r2
 80052da:	4293      	cmp	r3, r2
 80052dc:	db07      	blt.n	80052ee <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 80052de:	4b2b      	ldr	r3, [pc, #172]	; (800538c <ILI9341_Draw_Vertical_Line+0x108>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b299      	uxth	r1, r3
 80052e4:	1cbb      	adds	r3, r7, #2
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	8812      	ldrh	r2, [r2, #0]
 80052ea:	1a8a      	subs	r2, r1, r2
 80052ec:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 80052ee:	1d3a      	adds	r2, r7, #4
 80052f0:	1cbb      	adds	r3, r7, #2
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	18d3      	adds	r3, r2, r3
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29c      	uxth	r4, r3
 80052fe:	1dbb      	adds	r3, r7, #6
 8005300:	881a      	ldrh	r2, [r3, #0]
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	8819      	ldrh	r1, [r3, #0]
 8005306:	1dbb      	adds	r3, r7, #6
 8005308:	8818      	ldrh	r0, [r3, #0]
 800530a:	0023      	movs	r3, r4
 800530c:	f000 f840 	bl	8005390 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8005310:	230f      	movs	r3, #15
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8005318:	1cbb      	adds	r3, r7, #2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	4013      	ands	r3, r2
 8005320:	d00e      	beq.n	8005340 <ILI9341_Draw_Vertical_Line+0xbc>
 8005322:	1cbb      	adds	r3, r7, #2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d90a      	bls.n	8005340 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 800532a:	230f      	movs	r3, #15
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8005332:	1cbb      	adds	r3, r7, #2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	b29b      	uxth	r3, r3
 800533a:	1cba      	adds	r2, r7, #2
 800533c:	18db      	adds	r3, r3, r3
 800533e:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8005340:	230f      	movs	r3, #15
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800534a:	1d3a      	adds	r2, r7, #4
 800534c:	1cbb      	adds	r3, r7, #2
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	b299      	uxth	r1, r3
 8005356:	003b      	movs	r3, r7
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	1dbb      	adds	r3, r7, #6
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f898 	bl	8005494 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8005364:	1cbb      	adds	r3, r7, #2
 8005366:	881c      	ldrh	r4, [r3, #0]
 8005368:	003b      	movs	r3, r7
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	8819      	ldrh	r1, [r3, #0]
 8005370:	1dbb      	adds	r3, r7, #6
 8005372:	8818      	ldrh	r0, [r3, #0]
 8005374:	2303      	movs	r3, #3
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	0023      	movs	r3, r4
 800537a:	f000 fb4b 	bl	8005a14 <_LCD_Write_Frame>
 800537e:	e000      	b.n	8005382 <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8005380:	46c0      	nop			; (mov r8, r8)
}
 8005382:	46bd      	mov	sp, r7
 8005384:	b004      	add	sp, #16
 8005386:	bdb0      	pop	{r4, r5, r7, pc}
 8005388:	2000000c 	.word	0x2000000c
 800538c:	2000000a 	.word	0x2000000a

08005390 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8005390:	b5b0      	push	{r4, r5, r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	0005      	movs	r5, r0
 8005398:	000c      	movs	r4, r1
 800539a:	0010      	movs	r0, r2
 800539c:	0019      	movs	r1, r3
 800539e:	1dbb      	adds	r3, r7, #6
 80053a0:	1c2a      	adds	r2, r5, #0
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	1d3b      	adds	r3, r7, #4
 80053a6:	1c22      	adds	r2, r4, #0
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	1cbb      	adds	r3, r7, #2
 80053ac:	1c02      	adds	r2, r0, #0
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	003b      	movs	r3, r7
 80053b2:	1c0a      	adds	r2, r1, #0
 80053b4:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 80053b6:	202a      	movs	r0, #42	; 0x2a
 80053b8:	f000 fc0c 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 80053bc:	1dbb      	adds	r3, r7, #6
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 fc3a 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(sc);
 80053cc:	1dbb      	adds	r3, r7, #6
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	0018      	movs	r0, r3
 80053d4:	f000 fc34 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 80053d8:	1cbb      	adds	r3, r7, #2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	b29b      	uxth	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fc2c 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(ec);
 80053e8:	1cbb      	adds	r3, r7, #2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fc26 	bl	8005c40 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 80053f4:	202b      	movs	r0, #43	; 0x2b
 80053f6:	f000 fbed 	bl	8005bd4 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	b29b      	uxth	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	0018      	movs	r0, r3
 8005406:	f000 fc1b 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(sp);
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	0018      	movs	r0, r3
 8005412:	f000 fc15 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8005416:	003b      	movs	r3, r7
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	b29b      	uxth	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	0018      	movs	r0, r3
 8005422:	f000 fc0d 	bl	8005c40 <_LCD_SendData>
	_LCD_SendData(ep);
 8005426:	003b      	movs	r3, r7
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	0018      	movs	r0, r3
 800542e:	f000 fc07 	bl	8005c40 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8005432:	202c      	movs	r0, #44	; 0x2c
 8005434:	f000 fbce 	bl	8005bd4 <_LCD_SendCommand>
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b002      	add	sp, #8
 800543e:	bdb0      	pop	{r4, r5, r7, pc}

08005440 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af02      	add	r7, sp, #8
 8005446:	0002      	movs	r2, r0
 8005448:	1dbb      	adds	r3, r7, #6
 800544a:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <ILI9341_Fill_Screen+0x4c>)
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29a      	uxth	r2, r3
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <ILI9341_Fill_Screen+0x50>)
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	2100      	movs	r1, #0
 800545a:	2000      	movs	r0, #0
 800545c:	f7ff ff98 	bl	8005390 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <ILI9341_Fill_Screen+0x4c>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	001a      	movs	r2, r3
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <ILI9341_Fill_Screen+0x50>)
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	4353      	muls	r3, r2
 8005470:	0019      	movs	r1, r3
 8005472:	1dbb      	adds	r3, r7, #6
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	2304      	movs	r3, #4
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	000b      	movs	r3, r1
 800547c:	2100      	movs	r1, #0
 800547e:	2000      	movs	r0, #0
 8005480:	f000 fac8 	bl	8005a14 <_LCD_Write_Frame>
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000000c 	.word	0x2000000c
 8005490:	2000000a 	.word	0x2000000a

08005494 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b08f      	sub	sp, #60	; 0x3c
 8005498:	af00      	add	r7, sp, #0
 800549a:	0004      	movs	r4, r0
 800549c:	0008      	movs	r0, r1
 800549e:	0011      	movs	r1, r2
 80054a0:	1dbb      	adds	r3, r7, #6
 80054a2:	1c22      	adds	r2, r4, #0
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	1c02      	adds	r2, r0, #0
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	1cbb      	adds	r3, r7, #2
 80054ae:	1c0a      	adds	r2, r1, #0
 80054b0:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80054b2:	4bae      	ldr	r3, [pc, #696]	; (800576c <ILI9341_Draw_Pixel+0x2d8>)
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	1dba      	adds	r2, r7, #6
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d300      	bcc.n	80054c2 <ILI9341_Draw_Pixel+0x2e>
 80054c0:	e150      	b.n	8005764 <ILI9341_Draw_Pixel+0x2d0>
 80054c2:	4bab      	ldr	r3, [pc, #684]	; (8005770 <ILI9341_Draw_Pixel+0x2dc>)
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	1d3a      	adds	r2, r7, #4
 80054ca:	8812      	ldrh	r2, [r2, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d300      	bcc.n	80054d2 <ILI9341_Draw_Pixel+0x3e>
 80054d0:	e148      	b.n	8005764 <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80054d2:	4ba8      	ldr	r3, [pc, #672]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	4ba7      	ldr	r3, [pc, #668]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80054d8:	2101      	movs	r1, #1
 80054da:	438a      	bics	r2, r1
 80054dc:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80054de:	4ba6      	ldr	r3, [pc, #664]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	4ba5      	ldr	r3, [pc, #660]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80054e4:	2110      	movs	r1, #16
 80054e6:	438a      	bics	r2, r1
 80054e8:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 80054ea:	220a      	movs	r2, #10
 80054ec:	2100      	movs	r1, #0
 80054ee:	202a      	movs	r0, #42	; 0x2a
 80054f0:	f000 fbdc 	bl	8005cac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80054f4:	2300      	movs	r3, #0
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	e008      	b.n	800550c <ILI9341_Draw_Pixel+0x78>
 80054fa:	4b9f      	ldr	r3, [pc, #636]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	4b9e      	ldr	r3, [pc, #632]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005500:	2110      	movs	r1, #16
 8005502:	438a      	bics	r2, r1
 8005504:	615a      	str	r2, [r3, #20]
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	3301      	adds	r3, #1
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	2b02      	cmp	r3, #2
 8005510:	ddf3      	ble.n	80054fa <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005512:	4b98      	ldr	r3, [pc, #608]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	4b97      	ldr	r3, [pc, #604]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 8005518:	2101      	movs	r1, #1
 800551a:	430a      	orrs	r2, r1
 800551c:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800551e:	4b96      	ldr	r3, [pc, #600]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	4b95      	ldr	r3, [pc, #596]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005524:	2110      	movs	r1, #16
 8005526:	430a      	orrs	r2, r1
 8005528:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800552a:	4b93      	ldr	r3, [pc, #588]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	4b92      	ldr	r3, [pc, #584]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005530:	2110      	movs	r1, #16
 8005532:	438a      	bics	r2, r1
 8005534:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8005536:	1dbb      	adds	r3, r7, #6
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	b29b      	uxth	r3, r3
 800553e:	b2da      	uxtb	r2, r3
 8005540:	2114      	movs	r1, #20
 8005542:	187b      	adds	r3, r7, r1
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	187b      	adds	r3, r7, r1
 800554e:	705a      	strb	r2, [r3, #1]
 8005550:	1dbb      	adds	r3, r7, #6
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	121b      	asrs	r3, r3, #8
 8005558:	b2da      	uxtb	r2, r3
 800555a:	187b      	adds	r3, r7, r1
 800555c:	709a      	strb	r2, [r3, #2]
 800555e:	1dbb      	adds	r3, r7, #6
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	3301      	adds	r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	187b      	adds	r3, r7, r1
 800556a:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800556c:	1878      	adds	r0, r7, r1
 800556e:	230a      	movs	r3, #10
 8005570:	2200      	movs	r2, #0
 8005572:	2104      	movs	r1, #4
 8005574:	f000 fbd4 	bl	8005d20 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005578:	2300      	movs	r3, #0
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
 800557c:	e008      	b.n	8005590 <ILI9341_Draw_Pixel+0xfc>
 800557e:	4b7e      	ldr	r3, [pc, #504]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	4b7d      	ldr	r3, [pc, #500]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005584:	2110      	movs	r1, #16
 8005586:	438a      	bics	r2, r1
 8005588:	615a      	str	r2, [r3, #20]
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	3301      	adds	r3, #1
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	2b02      	cmp	r3, #2
 8005594:	ddf3      	ble.n	800557e <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005596:	4b78      	ldr	r3, [pc, #480]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b77      	ldr	r3, [pc, #476]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 800559c:	2110      	movs	r1, #16
 800559e:	430a      	orrs	r2, r1
 80055a0:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80055a2:	4b74      	ldr	r3, [pc, #464]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	4b73      	ldr	r3, [pc, #460]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80055a8:	2101      	movs	r1, #1
 80055aa:	438a      	bics	r2, r1
 80055ac:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80055ae:	4b72      	ldr	r3, [pc, #456]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	4b71      	ldr	r3, [pc, #452]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055b4:	2110      	movs	r1, #16
 80055b6:	438a      	bics	r2, r1
 80055b8:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 80055ba:	220a      	movs	r2, #10
 80055bc:	2100      	movs	r1, #0
 80055be:	202b      	movs	r0, #43	; 0x2b
 80055c0:	f000 fb74 	bl	8005cac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c8:	e008      	b.n	80055dc <ILI9341_Draw_Pixel+0x148>
 80055ca:	4b6b      	ldr	r3, [pc, #428]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b6a      	ldr	r3, [pc, #424]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055d0:	2110      	movs	r1, #16
 80055d2:	438a      	bics	r2, r1
 80055d4:	615a      	str	r2, [r3, #20]
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	3301      	adds	r3, #1
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b02      	cmp	r3, #2
 80055e0:	ddf3      	ble.n	80055ca <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80055e2:	4b64      	ldr	r3, [pc, #400]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80055e8:	2101      	movs	r1, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80055ee:	4b62      	ldr	r3, [pc, #392]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	4b61      	ldr	r3, [pc, #388]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055f4:	2110      	movs	r1, #16
 80055f6:	430a      	orrs	r2, r1
 80055f8:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80055fa:	4b5f      	ldr	r3, [pc, #380]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005600:	2110      	movs	r1, #16
 8005602:	438a      	bics	r2, r1
 8005604:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b29b      	uxth	r3, r3
 800560e:	b2da      	uxtb	r2, r3
 8005610:	2110      	movs	r1, #16
 8005612:	187b      	adds	r3, r7, r1
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	187b      	adds	r3, r7, r1
 800561e:	705a      	strb	r2, [r3, #1]
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	121b      	asrs	r3, r3, #8
 8005628:	b2da      	uxtb	r2, r3
 800562a:	187b      	adds	r3, r7, r1
 800562c:	709a      	strb	r2, [r3, #2]
 800562e:	1d3b      	adds	r3, r7, #4
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	187b      	adds	r3, r7, r1
 800563a:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800563c:	1878      	adds	r0, r7, r1
 800563e:	230a      	movs	r3, #10
 8005640:	2200      	movs	r2, #0
 8005642:	2104      	movs	r1, #4
 8005644:	f000 fb6c 	bl	8005d20 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005648:	2300      	movs	r3, #0
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
 800564c:	e008      	b.n	8005660 <ILI9341_Draw_Pixel+0x1cc>
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	4b49      	ldr	r3, [pc, #292]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005654:	2110      	movs	r1, #16
 8005656:	438a      	bics	r2, r1
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	3301      	adds	r3, #1
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2b02      	cmp	r3, #2
 8005664:	ddf3      	ble.n	800564e <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005666:	4b44      	ldr	r3, [pc, #272]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 800566c:	2110      	movs	r1, #16
 800566e:	430a      	orrs	r2, r1
 8005670:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8005672:	4b40      	ldr	r3, [pc, #256]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	4b3f      	ldr	r3, [pc, #252]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 8005678:	2101      	movs	r1, #1
 800567a:	438a      	bics	r2, r1
 800567c:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800567e:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	4b3d      	ldr	r3, [pc, #244]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005684:	2110      	movs	r1, #16
 8005686:	438a      	bics	r2, r1
 8005688:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800568a:	220a      	movs	r2, #10
 800568c:	2100      	movs	r1, #0
 800568e:	202c      	movs	r0, #44	; 0x2c
 8005690:	f000 fb0c 	bl	8005cac <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005694:	2300      	movs	r3, #0
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e008      	b.n	80056ac <ILI9341_Draw_Pixel+0x218>
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80056a0:	2110      	movs	r1, #16
 80056a2:	438a      	bics	r2, r1
 80056a4:	615a      	str	r2, [r3, #20]
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	3301      	adds	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	ddf3      	ble.n	800569a <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <ILI9341_Draw_Pixel+0x2e0>)
 80056b8:	2101      	movs	r1, #1
 80056ba:	430a      	orrs	r2, r1
 80056bc:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80056c4:	2110      	movs	r1, #16
 80056c6:	430a      	orrs	r2, r1
 80056c8:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80056ca:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 80056d0:	2110      	movs	r1, #16
 80056d2:	438a      	bics	r2, r1
 80056d4:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80056d6:	1cbb      	adds	r3, r7, #2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b29b      	uxth	r3, r3
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	210c      	movs	r1, #12
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	1cbb      	adds	r3, r7, #2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	187b      	adds	r3, r7, r1
 80056ee:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 80056f0:	1878      	adds	r0, r7, r1
 80056f2:	2301      	movs	r3, #1
 80056f4:	2200      	movs	r2, #0
 80056f6:	2102      	movs	r1, #2
 80056f8:	f000 fb12 	bl	8005d20 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	e008      	b.n	8005714 <ILI9341_Draw_Pixel+0x280>
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005708:	2110      	movs	r1, #16
 800570a:	438a      	bics	r2, r1
 800570c:	615a      	str	r2, [r3, #20]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	3301      	adds	r3, #1
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b02      	cmp	r3, #2
 8005718:	ddf3      	ble.n	8005702 <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e008      	b.n	8005732 <ILI9341_Draw_Pixel+0x29e>
 8005720:	4b15      	ldr	r3, [pc, #84]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005726:	2110      	movs	r1, #16
 8005728:	438a      	bics	r2, r1
 800572a:	615a      	str	r2, [r3, #20]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b02      	cmp	r3, #2
 8005736:	ddf3      	ble.n	8005720 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005738:	2300      	movs	r3, #0
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e008      	b.n	8005750 <ILI9341_Draw_Pixel+0x2bc>
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005744:	2110      	movs	r1, #16
 8005746:	438a      	bics	r2, r1
 8005748:	615a      	str	r2, [r3, #20]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3301      	adds	r3, #1
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b02      	cmp	r3, #2
 8005754:	ddf3      	ble.n	800573e <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <ILI9341_Draw_Pixel+0x2e4>)
 800575c:	2110      	movs	r1, #16
 800575e:	430a      	orrs	r2, r1
 8005760:	615a      	str	r2, [r3, #20]
 8005762:	e000      	b.n	8005766 <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005764:	46c0      	nop			; (mov r8, r8)


}
 8005766:	46bd      	mov	sp, r7
 8005768:	b00f      	add	sp, #60	; 0x3c
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	2000000c 	.word	0x2000000c
 8005770:	2000000a 	.word	0x2000000a
 8005774:	48000400 	.word	0x48000400
 8005778:	48000800 	.word	0x48000800

0800577c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800577c:	b5b0      	push	{r4, r5, r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	0005      	movs	r5, r0
 8005784:	000c      	movs	r4, r1
 8005786:	0010      	movs	r0, r2
 8005788:	0019      	movs	r1, r3
 800578a:	1dbb      	adds	r3, r7, #6
 800578c:	1c2a      	adds	r2, r5, #0
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	1c22      	adds	r2, r4, #0
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	1cbb      	adds	r3, r7, #2
 8005798:	1c02      	adds	r2, r0, #0
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	003b      	movs	r3, r7
 800579e:	1c0a      	adds	r2, r1, #0
 80057a0:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80057a2:	4b5b      	ldr	r3, [pc, #364]	; (8005910 <ILI9341_Draw_Rectangle+0x194>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	1dba      	adds	r2, r7, #6
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d300      	bcc.n	80057b2 <ILI9341_Draw_Rectangle+0x36>
 80057b0:	e0a9      	b.n	8005906 <ILI9341_Draw_Rectangle+0x18a>
 80057b2:	4b58      	ldr	r3, [pc, #352]	; (8005914 <ILI9341_Draw_Rectangle+0x198>)
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	1d3a      	adds	r2, r7, #4
 80057ba:	8812      	ldrh	r2, [r2, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d300      	bcc.n	80057c2 <ILI9341_Draw_Rectangle+0x46>
 80057c0:	e0a1      	b.n	8005906 <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 80057c2:	1dbb      	adds	r3, r7, #6
 80057c4:	881a      	ldrh	r2, [r3, #0]
 80057c6:	1cbb      	adds	r3, r7, #2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	18d3      	adds	r3, r2, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	4a50      	ldr	r2, [pc, #320]	; (8005910 <ILI9341_Draw_Rectangle+0x194>)
 80057d0:	8812      	ldrh	r2, [r2, #0]
 80057d2:	b292      	uxth	r2, r2
 80057d4:	4293      	cmp	r3, r2
 80057d6:	db07      	blt.n	80057e8 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 80057d8:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <ILI9341_Draw_Rectangle+0x194>)
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b299      	uxth	r1, r3
 80057de:	1cbb      	adds	r3, r7, #2
 80057e0:	1dba      	adds	r2, r7, #6
 80057e2:	8812      	ldrh	r2, [r2, #0]
 80057e4:	1a8a      	subs	r2, r1, r2
 80057e6:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	003b      	movs	r3, r7
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	18d3      	adds	r3, r2, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4a47      	ldr	r2, [pc, #284]	; (8005914 <ILI9341_Draw_Rectangle+0x198>)
 80057f6:	8812      	ldrh	r2, [r2, #0]
 80057f8:	b292      	uxth	r2, r2
 80057fa:	4293      	cmp	r3, r2
 80057fc:	db07      	blt.n	800580e <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <ILI9341_Draw_Rectangle+0x198>)
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b299      	uxth	r1, r3
 8005804:	003b      	movs	r3, r7
 8005806:	1d3a      	adds	r2, r7, #4
 8005808:	8812      	ldrh	r2, [r2, #0]
 800580a:	1a8a      	subs	r2, r1, r2
 800580c:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800580e:	1dba      	adds	r2, r7, #6
 8005810:	1cbb      	adds	r3, r7, #2
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800581a:	3b01      	subs	r3, #1
 800581c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800581e:	1d3a      	adds	r2, r7, #4
 8005820:	003b      	movs	r3, r7
 8005822:	8812      	ldrh	r2, [r2, #0]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	18d3      	adds	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	8819      	ldrh	r1, [r3, #0]
 8005832:	1dbb      	adds	r3, r7, #6
 8005834:	8818      	ldrh	r0, [r3, #0]
 8005836:	0013      	movs	r3, r2
 8005838:	0022      	movs	r2, r4
 800583a:	f7ff fda9 	bl	8005390 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800583e:	200e      	movs	r0, #14
 8005840:	183b      	adds	r3, r7, r0
 8005842:	003a      	movs	r2, r7
 8005844:	1cb9      	adds	r1, r7, #2
 8005846:	8812      	ldrh	r2, [r2, #0]
 8005848:	8809      	ldrh	r1, [r1, #0]
 800584a:	434a      	muls	r2, r1
 800584c:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 800584e:	230d      	movs	r3, #13
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8005856:	183b      	adds	r3, r7, r0
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	4013      	ands	r3, r2
 800585e:	d010      	beq.n	8005882 <ILI9341_Draw_Rectangle+0x106>
 8005860:	230e      	movs	r3, #14
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d90b      	bls.n	8005882 <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 800586a:	230d      	movs	r3, #13
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8005872:	220e      	movs	r2, #14
 8005874:	18bb      	adds	r3, r7, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	b29b      	uxth	r3, r3
 800587c:	18ba      	adds	r2, r7, r2
 800587e:	18db      	adds	r3, r3, r3
 8005880:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8005882:	230e      	movs	r3, #14
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	881c      	ldrh	r4, [r3, #0]
 8005888:	2320      	movs	r3, #32
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	881a      	ldrh	r2, [r3, #0]
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	8819      	ldrh	r1, [r3, #0]
 8005892:	1dbb      	adds	r3, r7, #6
 8005894:	8818      	ldrh	r0, [r3, #0]
 8005896:	2324      	movs	r3, #36	; 0x24
 8005898:	18fb      	adds	r3, r7, r3
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	0023      	movs	r3, r4
 80058a0:	f000 f8b8 	bl	8005a14 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80058a4:	230d      	movs	r3, #13
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02c      	beq.n	8005908 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80058ae:	1dba      	adds	r2, r7, #6
 80058b0:	1cbb      	adds	r3, r7, #2
 80058b2:	8812      	ldrh	r2, [r2, #0]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	18d3      	adds	r3, r2, r3
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b02      	subs	r3, #2
 80058bc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80058be:	1d3a      	adds	r2, r7, #4
 80058c0:	003b      	movs	r3, r7
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2420      	movs	r4, #32
 80058d0:	193a      	adds	r2, r7, r4
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	0019      	movs	r1, r3
 80058d6:	f7ff fddd 	bl	8005494 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80058da:	1dba      	adds	r2, r7, #6
 80058dc:	1cbb      	adds	r3, r7, #2
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	003b      	movs	r3, r7
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	193a      	adds	r2, r7, r4
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	0019      	movs	r1, r3
 8005900:	f7ff fdc8 	bl	8005494 <ILI9341_Draw_Pixel>
 8005904:	e000      	b.n	8005908 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8005906:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8005908:	46bd      	mov	sp, r7
 800590a:	b004      	add	sp, #16
 800590c:	bdb0      	pop	{r4, r5, r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	2000000c 	.word	0x2000000c
 8005914:	2000000a 	.word	0x2000000a

08005918 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	0002      	movs	r2, r0
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8005924:	240f      	movs	r4, #15
 8005926:	193b      	adds	r3, r7, r4
 8005928:	1dfa      	adds	r2, r7, #7
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 800592e:	2036      	movs	r0, #54	; 0x36
 8005930:	f000 f950 	bl	8005bd4 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8005934:	193b      	adds	r3, r7, r4
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d013      	beq.n	8005964 <ILI9341_Set_Rotation+0x4c>
 800593c:	dc02      	bgt.n	8005944 <ILI9341_Set_Rotation+0x2c>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8005942:	e030      	b.n	80059a6 <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8005944:	2b02      	cmp	r3, #2
 8005946:	d018      	beq.n	800597a <ILI9341_Set_Rotation+0x62>
 8005948:	2b03      	cmp	r3, #3
 800594a:	d021      	beq.n	8005990 <ILI9341_Set_Rotation+0x78>
			break;
 800594c:	e02b      	b.n	80059a6 <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 800594e:	2048      	movs	r0, #72	; 0x48
 8005950:	f000 f976 	bl	8005c40 <_LCD_SendData>
			LCD_WIDTH = 240;
 8005954:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <ILI9341_Set_Rotation+0x98>)
 8005956:	22f0      	movs	r2, #240	; 0xf0
 8005958:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <ILI9341_Set_Rotation+0x9c>)
 800595c:	22a0      	movs	r2, #160	; 0xa0
 800595e:	0052      	lsls	r2, r2, #1
 8005960:	801a      	strh	r2, [r3, #0]
			break;
 8005962:	e020      	b.n	80059a6 <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8005964:	2028      	movs	r0, #40	; 0x28
 8005966:	f000 f96b 	bl	8005c40 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <ILI9341_Set_Rotation+0x98>)
 800596c:	22a0      	movs	r2, #160	; 0xa0
 800596e:	0052      	lsls	r2, r2, #1
 8005970:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <ILI9341_Set_Rotation+0x9c>)
 8005974:	22f0      	movs	r2, #240	; 0xf0
 8005976:	801a      	strh	r2, [r3, #0]
			break;
 8005978:	e015      	b.n	80059a6 <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 800597a:	2088      	movs	r0, #136	; 0x88
 800597c:	f000 f960 	bl	8005c40 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <ILI9341_Set_Rotation+0x98>)
 8005982:	22f0      	movs	r2, #240	; 0xf0
 8005984:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <ILI9341_Set_Rotation+0x9c>)
 8005988:	22a0      	movs	r2, #160	; 0xa0
 800598a:	0052      	lsls	r2, r2, #1
 800598c:	801a      	strh	r2, [r3, #0]
			break;
 800598e:	e00a      	b.n	80059a6 <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8005990:	20e8      	movs	r0, #232	; 0xe8
 8005992:	f000 f955 	bl	8005c40 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <ILI9341_Set_Rotation+0x98>)
 8005998:	22a0      	movs	r2, #160	; 0xa0
 800599a:	0052      	lsls	r2, r2, #1
 800599c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <ILI9341_Set_Rotation+0x9c>)
 80059a0:	22f0      	movs	r2, #240	; 0xf0
 80059a2:	801a      	strh	r2, [r3, #0]
			break;
 80059a4:	46c0      	nop			; (mov r8, r8)
	}
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b005      	add	sp, #20
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	2000000c 	.word	0x2000000c
 80059b4:	2000000a 	.word	0x2000000a

080059b8 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <_LCD_Enable+0x18>)
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <_LCD_Enable+0x18>)
 80059c2:	2120      	movs	r1, #32
 80059c4:	430a      	orrs	r2, r1
 80059c6:	615a      	str	r2, [r3, #20]
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	48000800 	.word	0x48000800

080059d4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <_LCD_Reset+0x3c>)
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <_LCD_Reset+0x3c>)
 80059de:	2120      	movs	r1, #32
 80059e0:	438a      	bics	r2, r1
 80059e2:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80059e4:	20c8      	movs	r0, #200	; 0xc8
 80059e6:	f7fd fa4f 	bl	8002e88 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <_LCD_Reset+0x3c>)
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <_LCD_Reset+0x3c>)
 80059f0:	2110      	movs	r1, #16
 80059f2:	438a      	bics	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80059f6:	20c8      	movs	r0, #200	; 0xc8
 80059f8:	f7fd fa46 	bl	8002e88 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80059fc:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <_LCD_Reset+0x3c>)
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <_LCD_Reset+0x3c>)
 8005a02:	2120      	movs	r1, #32
 8005a04:	430a      	orrs	r2, r1
 8005a06:	615a      	str	r2, [r3, #20]
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	48000800 	.word	0x48000800

08005a14 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8005a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a16:	b095      	sub	sp, #84	; 0x54
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	0006      	movs	r6, r0
 8005a1c:	0008      	movs	r0, r1
 8005a1e:	0011      	movs	r1, r2
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	230e      	movs	r3, #14
 8005a24:	2218      	movs	r2, #24
 8005a26:	4694      	mov	ip, r2
 8005a28:	44bc      	add	ip, r7
 8005a2a:	4463      	add	r3, ip
 8005a2c:	1c32      	adds	r2, r6, #0
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	230c      	movs	r3, #12
 8005a32:	2218      	movs	r2, #24
 8005a34:	4694      	mov	ip, r2
 8005a36:	44bc      	add	ip, r7
 8005a38:	4463      	add	r3, ip
 8005a3a:	1c02      	adds	r2, r0, #0
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	230a      	movs	r3, #10
 8005a40:	2218      	movs	r2, #24
 8005a42:	4694      	mov	ip, r2
 8005a44:	44bc      	add	ip, r7
 8005a46:	4463      	add	r3, ip
 8005a48:	1c0a      	adds	r2, r1, #0
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	466b      	mov	r3, sp
 8005a4e:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <_LCD_Write_Frame+0x1b4>)
 8005a5a:	8812      	ldrh	r2, [r2, #0]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d202      	bcs.n	8005a66 <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	e002      	b.n	8005a6c <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8005a66:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <_LCD_Write_Frame+0x1b4>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	2218      	movs	r2, #24
 8005a70:	4694      	mov	ip, r2
 8005a72:	44bc      	add	ip, r7
 8005a74:	4463      	add	r3, ip
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	231f      	movs	r3, #31
 8005a7e:	2118      	movs	r1, #24
 8005a80:	468c      	mov	ip, r1
 8005a82:	44bc      	add	ip, r7
 8005a84:	4463      	add	r3, ip
 8005a86:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	60fa      	str	r2, [r7, #12]
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	0f52      	lsrs	r2, r2, #29
 8005a9e:	000e      	movs	r6, r1
 8005aa0:	00f6      	lsls	r6, r6, #3
 8005aa2:	617e      	str	r6, [r7, #20]
 8005aa4:	697e      	ldr	r6, [r7, #20]
 8005aa6:	4316      	orrs	r6, r2
 8005aa8:	617e      	str	r6, [r7, #20]
 8005aaa:	0002      	movs	r2, r0
 8005aac:	00d2      	lsls	r2, r2, #3
 8005aae:	613a      	str	r2, [r7, #16]
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	0002      	movs	r2, r0
 8005abc:	0f52      	lsrs	r2, r2, #29
 8005abe:	000e      	movs	r6, r1
 8005ac0:	00f5      	lsls	r5, r6, #3
 8005ac2:	4315      	orrs	r5, r2
 8005ac4:	0002      	movs	r2, r0
 8005ac6:	00d4      	lsls	r4, r2, #3
 8005ac8:	3307      	adds	r3, #7
 8005aca:	08db      	lsrs	r3, r3, #3
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	466a      	mov	r2, sp
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	469d      	mov	sp, r3
 8005ad4:	466b      	mov	r3, sp
 8005ad6:	3300      	adds	r3, #0
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8005ada:	2300      	movs	r3, #0
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ade:	e017      	b.n	8005b10 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8005ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	18d3      	adds	r3, r2, r3
 8005ae6:	221f      	movs	r2, #31
 8005ae8:	2118      	movs	r1, #24
 8005aea:	468c      	mov	ip, r1
 8005aec:	44bc      	add	ip, r7
 8005aee:	4462      	add	r2, ip
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	3301      	adds	r3, #1
 8005af8:	220a      	movs	r2, #10
 8005afa:	2118      	movs	r1, #24
 8005afc:	468c      	mov	ip, r1
 8005afe:	44bc      	add	ip, r7
 8005b00:	4462      	add	r2, ip
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	b2d1      	uxtb	r1, r2
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d3e3      	bcc.n	8005ae0 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8005b2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b30:	f7fa fafc 	bl	800012c <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fa fb7b 	bl	8000238 <__aeabi_uidivmod>
 8005b42:	000b      	movs	r3, r1
 8005b44:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005b46:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <_LCD_Write_Frame+0x1b8>)
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <_LCD_Write_Frame+0x1b8>)
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005b52:	4b1f      	ldr	r3, [pc, #124]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005b58:	2110      	movs	r1, #16
 8005b5a:	438a      	bics	r2, r1
 8005b5c:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00f      	beq.n	8005b84 <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005b64:	2300      	movs	r3, #0
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b68:	e008      	b.n	8005b7c <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8005b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6e:	230a      	movs	r3, #10
 8005b70:	2200      	movs	r2, #0
 8005b72:	f000 f8d5 	bl	8005d20 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	3301      	adds	r3, #1
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3f2      	bcc.n	8005b6a <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8005b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b88:	230a      	movs	r3, #10
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f000 f8c8 	bl	8005d20 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005b90:	2300      	movs	r3, #0
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b94:	e008      	b.n	8005ba8 <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005b9c:	2110      	movs	r1, #16
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	ddf3      	ble.n	8005b96 <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005bae:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <_LCD_Write_Frame+0x1bc>)
 8005bb4:	2110      	movs	r1, #16
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	615a      	str	r2, [r3, #20]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	469d      	mov	sp, r3

}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b015      	add	sp, #84	; 0x54
 8005bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	2000000e 	.word	0x2000000e
 8005bcc:	48000400 	.word	0x48000400
 8005bd0:	48000800 	.word	0x48000800

08005bd4 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	0002      	movs	r2, r0
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005be6:	2110      	movs	r1, #16
 8005be8:	438a      	bics	r2, r1
 8005bea:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8005bec:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <_LCD_SendCommand+0x68>)
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <_LCD_SendCommand+0x68>)
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	438a      	bics	r2, r1
 8005bf6:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8005bf8:	1dfb      	adds	r3, r7, #7
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2100      	movs	r1, #0
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 f853 	bl	8005cac <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e008      	b.n	8005c1e <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005c12:	2110      	movs	r1, #16
 8005c14:	438a      	bics	r2, r1
 8005c16:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	ddf3      	ble.n	8005c0c <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <_LCD_SendCommand+0x64>)
 8005c2a:	2110      	movs	r1, #16
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	615a      	str	r2, [r3, #20]
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b004      	add	sp, #16
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	48000800 	.word	0x48000800
 8005c3c:	48000400 	.word	0x48000400

08005c40 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	0002      	movs	r2, r0
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005c4c:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <_LCD_SendData+0x64>)
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <_LCD_SendData+0x64>)
 8005c52:	2101      	movs	r1, #1
 8005c54:	430a      	orrs	r2, r1
 8005c56:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c5e:	2110      	movs	r1, #16
 8005c60:	438a      	bics	r2, r1
 8005c62:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 f81d 	bl	8005cac <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e008      	b.n	8005c8a <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c7e:	2110      	movs	r1, #16
 8005c80:	438a      	bics	r2, r1
 8005c82:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	ddf3      	ble.n	8005c78 <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <_LCD_SendData+0x68>)
 8005c96:	2110      	movs	r1, #16
 8005c98:	438a      	bics	r2, r1
 8005c9a:	615a      	str	r2, [r3, #20]
}
 8005c9c:	46c0      	nop			; (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b004      	add	sp, #16
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	48000400 	.word	0x48000400
 8005ca8:	48000800 	.word	0x48000800

08005cac <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	0008      	movs	r0, r1
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	1dfb      	adds	r3, r7, #7
 8005cba:	1c22      	adds	r2, r4, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	1dbb      	adds	r3, r7, #6
 8005cc0:	1c02      	adds	r2, r0, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	1d7b      	adds	r3, r7, #5
 8005cc6:	1c0a      	adds	r2, r1, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e003      	b.n	8005cd8 <_SPI_SendByte+0x2c>
   		asm("nop");
 8005cd0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	1dbb      	adds	r3, r7, #6
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	dbf6      	blt.n	8005cd0 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <_SPI_SendByte+0x6c>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d103      	bne.n	8005cf6 <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <_SPI_SendByte+0x70>)
 8005cf0:	1dfb      	adds	r3, r7, #7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	e003      	b.n	8005d04 <_SPI_SendByte+0x58>
   		asm("nop");
 8005cfc:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	1d7b      	adds	r3, r7, #5
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	dbf6      	blt.n	8005cfc <_SPI_SendByte+0x50>

#endif

}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b005      	add	sp, #20
 8005d14:	bd90      	pop	{r4, r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	40013000 	.word	0x40013000
 8005d1c:	4001300c 	.word	0x4001300c

08005d20 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	1dfb      	adds	r3, r7, #7
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	1dbb      	adds	r3, r7, #6
 8005d32:	1c0a      	adds	r2, r1, #0
 8005d34:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
 8005d3a:	e003      	b.n	8005d44 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8005d3c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	1dfb      	adds	r3, r7, #7
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	dbf6      	blt.n	8005d3c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8005d52:	e01d      	b.n	8005d90 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8005d54:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <_SPI_SendByteMultiByte+0xa4>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d117      	bne.n	8005d90 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d90a      	bls.n	8005d7c <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <_SPI_SendByteMultiByte+0xa4>)
 8005d6c:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	3302      	adds	r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3b02      	subs	r3, #2
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	e009      	b.n	8005d90 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <_SPI_SendByteMultiByte+0xa8>)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1de      	bne.n	8005d54 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <_SPI_SendByteMultiByte+0xa4>)
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <_SPI_SendByteMultiByte+0xa4>)
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	438a      	bics	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e003      	b.n	8005db0 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 8005da8:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3301      	adds	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	1dbb      	adds	r3, r7, #6
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	dbf6      	blt.n	8005da8 <_SPI_SendByteMultiByte+0x88>

#endif

}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b008      	add	sp, #32
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	40013000 	.word	0x40013000
 8005dc8:	4001300c 	.word	0x4001300c

08005dcc <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 8005dd0:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <TSC2046_EM_GetTouchScreenState+0x10>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20000208 	.word	0x20000208

08005de0 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	0002      	movs	r2, r0
 8005de8:	1dfb      	adds	r3, r7, #7
 8005dea:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <TSC2046_EM_ProcessEvent+0x4c>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	3300      	adds	r3, #0
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d815      	bhi.n	8005e22 <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 8005df6:	1dfb      	adds	r3, r7, #7
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <TSC2046_EM_ProcessEvent+0x24>
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d007      	beq.n	8005e12 <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 8005e02:	e00d      	b.n	8005e20 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 8005e04:	f000 f81a 	bl	8005e3c <TSC2046_EM_EnableIdleState>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <TSC2046_EM_ProcessEvent+0x4c>)
 8005e0e:	701a      	strb	r2, [r3, #0]
					break;
 8005e10:	e006      	b.n	8005e20 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 8005e12:	f000 f80d 	bl	8005e30 <TSC2046_EM_EnableConversionState>
 8005e16:	0003      	movs	r3, r0
 8005e18:	001a      	movs	r2, r3
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <TSC2046_EM_ProcessEvent+0x4c>)
 8005e1c:	701a      	strb	r2, [r3, #0]
					break;
 8005e1e:	46c0      	nop			; (mov r8, r8)
			break;
 8005e20:	46c0      	nop			; (mov r8, r8)
	}
}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	20000208 	.word	0x20000208

08005e30 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 8005e34:	2301      	movs	r3, #1
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 8005e54:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <TSC2046_HM_Init+0x60>)
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e60:	2101      	movs	r1, #1
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <TSC2046_HM_Init+0x5c>)
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	e00e      	b.n	8005e96 <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <TSC2046_HM_Init+0x64>)
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	0092      	lsls	r2, r2, #2
 8005e7e:	2100      	movs	r1, #0
 8005e80:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <TSC2046_HM_Init+0x64>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	18d3      	adds	r3, r2, r3
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3301      	adds	r3, #1
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dded      	ble.n	8005e78 <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40014800 	.word	0x40014800
 8005ea8:	00000fff 	.word	0x00000fff
 8005eac:	20000364 	.word	0x20000364

08005eb0 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 8005eb6:	1dfb      	adds	r3, r7, #7
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 8005ebc:	f7ff ff86 	bl	8005dcc <TSC2046_EM_GetTouchScreenState>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d138      	bne.n	8005f38 <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 8005ec6:	f000 f8b7 	bl	8006038 <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	e02d      	b.n	8005f2c <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 8005ed0:	f000 f8a2 	bl	8006018 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8005ed4:	20d0      	movs	r0, #208	; 0xd0
 8005ed6:	f000 f8c3 	bl	8006060 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 8005eda:	f000 f8d9 	bl	8006090 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8005ede:	20d0      	movs	r0, #208	; 0xd0
 8005ee0:	f000 f8be 	bl	8006060 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 8005ee4:	f000 f8d4 	bl	8006090 <_SpiReceive16>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	0019      	movs	r1, r3
 8005eec:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <TSC2046_HM_RunConversion+0xa8>)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	1c0a      	adds	r2, r1, #0
 8005ef8:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 8005efa:	f000 f87f 	bl	8005ffc <_SetCsPinHigh>

				_SetCsPinLow();
 8005efe:	f000 f88b 	bl	8006018 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8005f02:	2090      	movs	r0, #144	; 0x90
 8005f04:	f000 f8ac 	bl	8006060 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 8005f08:	f000 f8c2 	bl	8006090 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8005f0c:	2090      	movs	r0, #144	; 0x90
 8005f0e:	f000 f8a7 	bl	8006060 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 8005f12:	f000 f8bd 	bl	8006090 <_SpiReceive16>
 8005f16:	0003      	movs	r3, r0
 8005f18:	0019      	movs	r1, r3
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <TSC2046_HM_RunConversion+0xa8>)
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	0092      	lsls	r2, r2, #2
 8005f20:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 8005f22:	f000 f86b 	bl	8005ffc <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	ddce      	ble.n	8005ed0 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 8005f32:	f000 f813 	bl	8005f5c <TSC2046_HM_ConvertToQVGA>
 8005f36:	e008      	b.n	8005f4a <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <TSC2046_HM_RunConversion+0xa8>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 8005f3e:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <TSC2046_HM_RunConversion+0xa8>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 8005f44:	1dfb      	adds	r3, r7, #7
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005f4a:	1dfb      	adds	r3, r7, #7
 8005f4c:	781b      	ldrb	r3, [r3, #0]

}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b002      	add	sp, #8
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	20000364 	.word	0x20000364

08005f5c <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	22a0      	movs	r2, #160	; 0xa0
 8005f66:	0052      	lsls	r2, r2, #1
 8005f68:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	22f0      	movs	r2, #240	; 0xf0
 8005f6e:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	1dbb      	adds	r3, r7, #6
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	0019      	movs	r1, r3
 8005f7a:	0010      	movs	r0, r2
 8005f7c:	f7fa f8d6 	bl	800012c <__udivsi3>
 8005f80:	0003      	movs	r3, r0
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005f86:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005f8a:	885a      	ldrh	r2, [r3, #2]
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	0019      	movs	r1, r3
 8005f92:	0010      	movs	r0, r2
 8005f94:	f7fa f8ca 	bl	800012c <__udivsi3>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005f9e:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	3b0a      	subs	r3, #10
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005faa:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fae:	885b      	ldrh	r3, [r3, #2]
 8005fb0:	3b0a      	subs	r3, #10
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fb6:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fba:	881c      	ldrh	r4, [r3, #0]
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	2150      	movs	r1, #80	; 0x50
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fa f8b2 	bl	800012c <__udivsi3>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4363      	muls	r3, r4
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fd2:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fd6:	885c      	ldrh	r4, [r3, #2]
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2164      	movs	r1, #100	; 0x64
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7fa f8a4 	bl	800012c <__udivsi3>
 8005fe4:	0003      	movs	r3, r0
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4363      	muls	r3, r4
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	4b02      	ldr	r3, [pc, #8]	; (8005ff8 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005fee:	805a      	strh	r2, [r3, #2]

}
 8005ff0:	46c0      	nop			; (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bd90      	pop	{r4, r7, pc}
 8005ff8:	20000364 	.word	0x20000364

08005ffc <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <_SetCsPinHigh+0x18>)
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <_SetCsPinHigh+0x18>)
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	0149      	lsls	r1, r1, #5
 800600a:	430a      	orrs	r2, r1
 800600c:	615a      	str	r2, [r3, #20]
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	48000400 	.word	0x48000400

08006018 <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <_SetCsPinLow+0x18>)
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	4b03      	ldr	r3, [pc, #12]	; (8006030 <_SetCsPinLow+0x18>)
 8006022:	4904      	ldr	r1, [pc, #16]	; (8006034 <_SetCsPinLow+0x1c>)
 8006024:	400a      	ands	r2, r1
 8006026:	615a      	str	r2, [r3, #20]
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	48000400 	.word	0x48000400
 8006034:	ffffefff 	.word	0xffffefff

08006038 <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <_EnableSPI+0x24>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2240      	movs	r2, #64	; 0x40
 8006042:	4013      	ands	r3, r2
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d005      	beq.n	8006054 <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <_EnableSPI+0x24>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <_EnableSPI+0x24>)
 800604e:	2140      	movs	r1, #64	; 0x40
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
	}

}
 8006054:	46c0      	nop			; (mov r8, r8)
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	40003800 	.word	0x40003800

08006060 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	0002      	movs	r2, r0
 8006068:	1dfb      	adds	r3, r7, #7
 800606a:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <_SpiTransmit8+0x28>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2202      	movs	r2, #2
 8006072:	4013      	ands	r3, r2
 8006074:	2b02      	cmp	r3, #2
 8006076:	d103      	bne.n	8006080 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <_SpiTransmit8+0x2c>)
 800607a:	1dfb      	adds	r3, r7, #7
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	7013      	strb	r3, [r2, #0]
	}
}
 8006080:	46c0      	nop			; (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	b002      	add	sp, #8
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40003800 	.word	0x40003800
 800608c:	4000380c 	.word	0x4000380c

08006090 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 8006096:	1dbb      	adds	r3, r7, #6
 8006098:	2200      	movs	r2, #0
 800609a:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 800609c:	4b07      	ldr	r3, [pc, #28]	; (80060bc <_SpiReceive16+0x2c>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2201      	movs	r2, #1
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d103      	bne.n	80060b0 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <_SpiReceive16+0x2c>)
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	1dbb      	adds	r3, r7, #6
 80060ae:	801a      	strh	r2, [r3, #0]
	}
	return data;
 80060b0:	1dbb      	adds	r3, r7, #6
 80060b2:	881b      	ldrh	r3, [r3, #0]
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40003800 	.word	0x40003800

080060c0 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <TSC4026_STM32_HM_GetXpos+0x10>)
 80060c6:	881b      	ldrh	r3, [r3, #0]
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	20000364 	.word	0x20000364

080060d4 <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 80060d8:	4b02      	ldr	r3, [pc, #8]	; (80060e4 <TSC4026_STM32_HM_GetYpos+0x10>)
 80060da:	885b      	ldrh	r3, [r3, #2]
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	20000364 	.word	0x20000364

080060e8 <TSC2046_IM_PENIRQ_EXTI_Handler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_PENIRQ_EXTI_Handler()
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
//	uint32_t interrupt_time = TSC2046_HW_DEBOUNCE_TIMER->CNT;

//	if( (interrupt_time - touchscreen_last_interrupt_time) > MAX_TOUCHSCREEN_DEBOUNCE_DELAY )
//	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80060ec:	2001      	movs	r0, #1
 80060ee:	f7ff fe77 	bl	8005de0 <TSC2046_EM_ProcessEvent>
//	}
//	touchscreen_last_interrupt_time = interrupt_time;
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <TSC2046_IM_HardwareManagerLoopHandler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_HardwareManagerLoopHandler()
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin) == 0)
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <TSC2046_IM_HardwareManagerLoopHandler+0x28>)
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	0018      	movs	r0, r3
 8006102:	f7fd fd93 	bl	8003c2c <HAL_GPIO_ReadPin>
 8006106:	1e03      	subs	r3, r0, #0
 8006108:	d103      	bne.n	8006112 <TSC2046_IM_HardwareManagerLoopHandler+0x1a>
	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 800610a:	2001      	movs	r0, #1
 800610c:	f7ff fe68 	bl	8005de0 <TSC2046_EM_ProcessEvent>
	}
	else
	{
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
	}
}
 8006110:	e002      	b.n	8006118 <TSC2046_IM_HardwareManagerLoopHandler+0x20>
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
 8006112:	2000      	movs	r0, #0
 8006114:	f7ff fe64 	bl	8005de0 <TSC2046_EM_ProcessEvent>
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	48000800 	.word	0x48000800

08006124 <__libc_init_array>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	2600      	movs	r6, #0
 8006128:	4d0c      	ldr	r5, [pc, #48]	; (800615c <__libc_init_array+0x38>)
 800612a:	4c0d      	ldr	r4, [pc, #52]	; (8006160 <__libc_init_array+0x3c>)
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	42a6      	cmp	r6, r4
 8006132:	d109      	bne.n	8006148 <__libc_init_array+0x24>
 8006134:	2600      	movs	r6, #0
 8006136:	f002 f8c1 	bl	80082bc <_init>
 800613a:	4d0a      	ldr	r5, [pc, #40]	; (8006164 <__libc_init_array+0x40>)
 800613c:	4c0a      	ldr	r4, [pc, #40]	; (8006168 <__libc_init_array+0x44>)
 800613e:	1b64      	subs	r4, r4, r5
 8006140:	10a4      	asrs	r4, r4, #2
 8006142:	42a6      	cmp	r6, r4
 8006144:	d105      	bne.n	8006152 <__libc_init_array+0x2e>
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	00b3      	lsls	r3, r6, #2
 800614a:	58eb      	ldr	r3, [r5, r3]
 800614c:	4798      	blx	r3
 800614e:	3601      	adds	r6, #1
 8006150:	e7ee      	b.n	8006130 <__libc_init_array+0xc>
 8006152:	00b3      	lsls	r3, r6, #2
 8006154:	58eb      	ldr	r3, [r5, r3]
 8006156:	4798      	blx	r3
 8006158:	3601      	adds	r6, #1
 800615a:	e7f2      	b.n	8006142 <__libc_init_array+0x1e>
 800615c:	080088e0 	.word	0x080088e0
 8006160:	080088e0 	.word	0x080088e0
 8006164:	080088e0 	.word	0x080088e0
 8006168:	080088e4 	.word	0x080088e4

0800616c <memset>:
 800616c:	0003      	movs	r3, r0
 800616e:	1812      	adds	r2, r2, r0
 8006170:	4293      	cmp	r3, r2
 8006172:	d100      	bne.n	8006176 <memset+0xa>
 8006174:	4770      	bx	lr
 8006176:	7019      	strb	r1, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	e7f9      	b.n	8006170 <memset+0x4>

0800617c <__cvt>:
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	b08b      	sub	sp, #44	; 0x2c
 8006180:	0014      	movs	r4, r2
 8006182:	1e1d      	subs	r5, r3, #0
 8006184:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006186:	da53      	bge.n	8006230 <__cvt+0xb4>
 8006188:	2480      	movs	r4, #128	; 0x80
 800618a:	0624      	lsls	r4, r4, #24
 800618c:	191b      	adds	r3, r3, r4
 800618e:	001d      	movs	r5, r3
 8006190:	0014      	movs	r4, r2
 8006192:	232d      	movs	r3, #45	; 0x2d
 8006194:	700b      	strb	r3, [r1, #0]
 8006196:	2320      	movs	r3, #32
 8006198:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800619a:	2203      	movs	r2, #3
 800619c:	439e      	bics	r6, r3
 800619e:	2e46      	cmp	r6, #70	; 0x46
 80061a0:	d007      	beq.n	80061b2 <__cvt+0x36>
 80061a2:	0033      	movs	r3, r6
 80061a4:	3b45      	subs	r3, #69	; 0x45
 80061a6:	4259      	negs	r1, r3
 80061a8:	414b      	adcs	r3, r1
 80061aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80061ac:	3a01      	subs	r2, #1
 80061ae:	18cb      	adds	r3, r1, r3
 80061b0:	9310      	str	r3, [sp, #64]	; 0x40
 80061b2:	ab09      	add	r3, sp, #36	; 0x24
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	ab08      	add	r3, sp, #32
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061bc:	9200      	str	r2, [sp, #0]
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061c2:	0022      	movs	r2, r4
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	002b      	movs	r3, r5
 80061c8:	f000 fcee 	bl	8006ba8 <_dtoa_r>
 80061cc:	0007      	movs	r7, r0
 80061ce:	2e47      	cmp	r6, #71	; 0x47
 80061d0:	d102      	bne.n	80061d8 <__cvt+0x5c>
 80061d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	d524      	bpl.n	8006222 <__cvt+0xa6>
 80061d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	2e46      	cmp	r6, #70	; 0x46
 80061e0:	d114      	bne.n	800620c <__cvt+0x90>
 80061e2:	783b      	ldrb	r3, [r7, #0]
 80061e4:	2b30      	cmp	r3, #48	; 0x30
 80061e6:	d10c      	bne.n	8006202 <__cvt+0x86>
 80061e8:	2200      	movs	r2, #0
 80061ea:	2300      	movs	r3, #0
 80061ec:	0020      	movs	r0, r4
 80061ee:	0029      	movs	r1, r5
 80061f0:	f7fa f922 	bl	8000438 <__aeabi_dcmpeq>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d104      	bne.n	8006202 <__cvt+0x86>
 80061f8:	2301      	movs	r3, #1
 80061fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006204:	9a07      	ldr	r2, [sp, #28]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	2200      	movs	r2, #0
 800620e:	2300      	movs	r3, #0
 8006210:	0020      	movs	r0, r4
 8006212:	0029      	movs	r1, r5
 8006214:	f7fa f910 	bl	8000438 <__aeabi_dcmpeq>
 8006218:	2230      	movs	r2, #48	; 0x30
 800621a:	2800      	cmp	r0, #0
 800621c:	d00d      	beq.n	800623a <__cvt+0xbe>
 800621e:	9b07      	ldr	r3, [sp, #28]
 8006220:	9309      	str	r3, [sp, #36]	; 0x24
 8006222:	0038      	movs	r0, r7
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006228:	1bdb      	subs	r3, r3, r7
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	b00b      	add	sp, #44	; 0x2c
 800622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006230:	2300      	movs	r3, #0
 8006232:	e7af      	b.n	8006194 <__cvt+0x18>
 8006234:	1c59      	adds	r1, r3, #1
 8006236:	9109      	str	r1, [sp, #36]	; 0x24
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	9907      	ldr	r1, [sp, #28]
 800623e:	428b      	cmp	r3, r1
 8006240:	d3f8      	bcc.n	8006234 <__cvt+0xb8>
 8006242:	e7ee      	b.n	8006222 <__cvt+0xa6>

08006244 <__exponent>:
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	1c83      	adds	r3, r0, #2
 8006248:	b085      	sub	sp, #20
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	0006      	movs	r6, r0
 800624e:	000c      	movs	r4, r1
 8006250:	7002      	strb	r2, [r0, #0]
 8006252:	232b      	movs	r3, #43	; 0x2b
 8006254:	2900      	cmp	r1, #0
 8006256:	da01      	bge.n	800625c <__exponent+0x18>
 8006258:	232d      	movs	r3, #45	; 0x2d
 800625a:	424c      	negs	r4, r1
 800625c:	7073      	strb	r3, [r6, #1]
 800625e:	2c09      	cmp	r4, #9
 8006260:	dd22      	ble.n	80062a8 <__exponent+0x64>
 8006262:	ab02      	add	r3, sp, #8
 8006264:	1ddd      	adds	r5, r3, #7
 8006266:	0020      	movs	r0, r4
 8006268:	210a      	movs	r1, #10
 800626a:	f7fa f8cf 	bl	800040c <__aeabi_idivmod>
 800626e:	1e6f      	subs	r7, r5, #1
 8006270:	3130      	adds	r1, #48	; 0x30
 8006272:	7039      	strb	r1, [r7, #0]
 8006274:	0020      	movs	r0, r4
 8006276:	210a      	movs	r1, #10
 8006278:	f7f9 ffe2 	bl	8000240 <__divsi3>
 800627c:	0004      	movs	r4, r0
 800627e:	2809      	cmp	r0, #9
 8006280:	dc0b      	bgt.n	800629a <__exponent+0x56>
 8006282:	3d02      	subs	r5, #2
 8006284:	3430      	adds	r4, #48	; 0x30
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	702c      	strb	r4, [r5, #0]
 800628a:	aa02      	add	r2, sp, #8
 800628c:	3207      	adds	r2, #7
 800628e:	0018      	movs	r0, r3
 8006290:	42aa      	cmp	r2, r5
 8006292:	d804      	bhi.n	800629e <__exponent+0x5a>
 8006294:	1b80      	subs	r0, r0, r6
 8006296:	b005      	add	sp, #20
 8006298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800629a:	003d      	movs	r5, r7
 800629c:	e7e3      	b.n	8006266 <__exponent+0x22>
 800629e:	782a      	ldrb	r2, [r5, #0]
 80062a0:	3501      	adds	r5, #1
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	e7f0      	b.n	800628a <__exponent+0x46>
 80062a8:	2330      	movs	r3, #48	; 0x30
 80062aa:	18e4      	adds	r4, r4, r3
 80062ac:	70b3      	strb	r3, [r6, #2]
 80062ae:	1d30      	adds	r0, r6, #4
 80062b0:	70f4      	strb	r4, [r6, #3]
 80062b2:	e7ef      	b.n	8006294 <__exponent+0x50>

080062b4 <_printf_float>:
 80062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b6:	b095      	sub	sp, #84	; 0x54
 80062b8:	000c      	movs	r4, r1
 80062ba:	920a      	str	r2, [sp, #40]	; 0x28
 80062bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80062be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80062c0:	9009      	str	r0, [sp, #36]	; 0x24
 80062c2:	f001 fa51 	bl	8007768 <_localeconv_r>
 80062c6:	6803      	ldr	r3, [r0, #0]
 80062c8:	0018      	movs	r0, r3
 80062ca:	930c      	str	r3, [sp, #48]	; 0x30
 80062cc:	f7f9 ff1c 	bl	8000108 <strlen>
 80062d0:	2300      	movs	r3, #0
 80062d2:	9312      	str	r3, [sp, #72]	; 0x48
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	900e      	str	r0, [sp, #56]	; 0x38
 80062d8:	930d      	str	r3, [sp, #52]	; 0x34
 80062da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062dc:	7e27      	ldrb	r7, [r4, #24]
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	2207      	movs	r2, #7
 80062e2:	05c9      	lsls	r1, r1, #23
 80062e4:	d545      	bpl.n	8006372 <_printf_float+0xbe>
 80062e6:	189b      	adds	r3, r3, r2
 80062e8:	4393      	bics	r3, r2
 80062ea:	001a      	movs	r2, r3
 80062ec:	3208      	adds	r2, #8
 80062ee:	602a      	str	r2, [r5, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	64a2      	str	r2, [r4, #72]	; 0x48
 80062f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80062f8:	2201      	movs	r2, #1
 80062fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80062fc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80062fe:	006b      	lsls	r3, r5, #1
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	930f      	str	r3, [sp, #60]	; 0x3c
 8006304:	4252      	negs	r2, r2
 8006306:	4bac      	ldr	r3, [pc, #688]	; (80065b8 <_printf_float+0x304>)
 8006308:	0030      	movs	r0, r6
 800630a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800630c:	f7fb fef4 	bl	80020f8 <__aeabi_dcmpun>
 8006310:	2800      	cmp	r0, #0
 8006312:	d130      	bne.n	8006376 <_printf_float+0xc2>
 8006314:	2201      	movs	r2, #1
 8006316:	4ba8      	ldr	r3, [pc, #672]	; (80065b8 <_printf_float+0x304>)
 8006318:	4252      	negs	r2, r2
 800631a:	0030      	movs	r0, r6
 800631c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800631e:	f7fa f89b 	bl	8000458 <__aeabi_dcmple>
 8006322:	2800      	cmp	r0, #0
 8006324:	d127      	bne.n	8006376 <_printf_float+0xc2>
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	0030      	movs	r0, r6
 800632c:	0029      	movs	r1, r5
 800632e:	f7fa f889 	bl	8000444 <__aeabi_dcmplt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d003      	beq.n	800633e <_printf_float+0x8a>
 8006336:	0023      	movs	r3, r4
 8006338:	222d      	movs	r2, #45	; 0x2d
 800633a:	3343      	adds	r3, #67	; 0x43
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	4d9f      	ldr	r5, [pc, #636]	; (80065bc <_printf_float+0x308>)
 8006340:	2f47      	cmp	r7, #71	; 0x47
 8006342:	d800      	bhi.n	8006346 <_printf_float+0x92>
 8006344:	4d9e      	ldr	r5, [pc, #632]	; (80065c0 <_printf_float+0x30c>)
 8006346:	2303      	movs	r3, #3
 8006348:	2600      	movs	r6, #0
 800634a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	3301      	adds	r3, #1
 8006350:	439a      	bics	r2, r3
 8006352:	6022      	str	r2, [r4, #0]
 8006354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006356:	aa13      	add	r2, sp, #76	; 0x4c
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	0021      	movs	r1, r4
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006360:	f000 f9f4 	bl	800674c <_printf_common>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d000      	beq.n	800636a <_printf_float+0xb6>
 8006368:	e093      	b.n	8006492 <_printf_float+0x1de>
 800636a:	2001      	movs	r0, #1
 800636c:	4240      	negs	r0, r0
 800636e:	b015      	add	sp, #84	; 0x54
 8006370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006372:	3307      	adds	r3, #7
 8006374:	e7b8      	b.n	80062e8 <_printf_float+0x34>
 8006376:	0032      	movs	r2, r6
 8006378:	002b      	movs	r3, r5
 800637a:	0030      	movs	r0, r6
 800637c:	0029      	movs	r1, r5
 800637e:	f7fb febb 	bl	80020f8 <__aeabi_dcmpun>
 8006382:	2800      	cmp	r0, #0
 8006384:	d004      	beq.n	8006390 <_printf_float+0xdc>
 8006386:	4d8f      	ldr	r5, [pc, #572]	; (80065c4 <_printf_float+0x310>)
 8006388:	2f47      	cmp	r7, #71	; 0x47
 800638a:	d8dc      	bhi.n	8006346 <_printf_float+0x92>
 800638c:	4d8e      	ldr	r5, [pc, #568]	; (80065c8 <_printf_float+0x314>)
 800638e:	e7da      	b.n	8006346 <_printf_float+0x92>
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006394:	6862      	ldr	r2, [r4, #4]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	430b      	orrs	r3, r1
 800639a:	1c51      	adds	r1, r2, #1
 800639c:	d143      	bne.n	8006426 <_printf_float+0x172>
 800639e:	3207      	adds	r2, #7
 80063a0:	6062      	str	r2, [r4, #4]
 80063a2:	aa12      	add	r2, sp, #72	; 0x48
 80063a4:	2100      	movs	r1, #0
 80063a6:	9205      	str	r2, [sp, #20]
 80063a8:	aa11      	add	r2, sp, #68	; 0x44
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	2223      	movs	r2, #35	; 0x23
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	9106      	str	r1, [sp, #24]
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	a908      	add	r1, sp, #32
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	1852      	adds	r2, r2, r1
 80063ba:	9202      	str	r2, [sp, #8]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	0032      	movs	r2, r6
 80063c0:	002b      	movs	r3, r5
 80063c2:	9704      	str	r7, [sp, #16]
 80063c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c6:	f7ff fed9 	bl	800617c <__cvt>
 80063ca:	2320      	movs	r3, #32
 80063cc:	003a      	movs	r2, r7
 80063ce:	0005      	movs	r5, r0
 80063d0:	439a      	bics	r2, r3
 80063d2:	2a47      	cmp	r2, #71	; 0x47
 80063d4:	d107      	bne.n	80063e6 <_printf_float+0x132>
 80063d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063d8:	1cda      	adds	r2, r3, #3
 80063da:	db02      	blt.n	80063e2 <_printf_float+0x12e>
 80063dc:	6862      	ldr	r2, [r4, #4]
 80063de:	4293      	cmp	r3, r2
 80063e0:	dd45      	ble.n	800646e <_printf_float+0x1ba>
 80063e2:	3f02      	subs	r7, #2
 80063e4:	b2ff      	uxtb	r7, r7
 80063e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80063e8:	2f65      	cmp	r7, #101	; 0x65
 80063ea:	d825      	bhi.n	8006438 <_printf_float+0x184>
 80063ec:	0020      	movs	r0, r4
 80063ee:	3901      	subs	r1, #1
 80063f0:	003a      	movs	r2, r7
 80063f2:	3050      	adds	r0, #80	; 0x50
 80063f4:	9111      	str	r1, [sp, #68]	; 0x44
 80063f6:	f7ff ff25 	bl	8006244 <__exponent>
 80063fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063fc:	0006      	movs	r6, r0
 80063fe:	1813      	adds	r3, r2, r0
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	2a01      	cmp	r2, #1
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x158>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d2      	lsls	r2, r2, #31
 800640a:	d501      	bpl.n	8006410 <_printf_float+0x15c>
 800640c:	3301      	adds	r3, #1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2323      	movs	r3, #35	; 0x23
 8006412:	aa08      	add	r2, sp, #32
 8006414:	189b      	adds	r3, r3, r2
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d09b      	beq.n	8006354 <_printf_float+0xa0>
 800641c:	0023      	movs	r3, r4
 800641e:	222d      	movs	r2, #45	; 0x2d
 8006420:	3343      	adds	r3, #67	; 0x43
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e796      	b.n	8006354 <_printf_float+0xa0>
 8006426:	2f67      	cmp	r7, #103	; 0x67
 8006428:	d100      	bne.n	800642c <_printf_float+0x178>
 800642a:	e176      	b.n	800671a <_printf_float+0x466>
 800642c:	2f47      	cmp	r7, #71	; 0x47
 800642e:	d1b8      	bne.n	80063a2 <_printf_float+0xee>
 8006430:	2a00      	cmp	r2, #0
 8006432:	d1b6      	bne.n	80063a2 <_printf_float+0xee>
 8006434:	2201      	movs	r2, #1
 8006436:	e7b3      	b.n	80063a0 <_printf_float+0xec>
 8006438:	2f66      	cmp	r7, #102	; 0x66
 800643a:	d119      	bne.n	8006470 <_printf_float+0x1bc>
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	2900      	cmp	r1, #0
 8006440:	dd0c      	ble.n	800645c <_printf_float+0x1a8>
 8006442:	6121      	str	r1, [r4, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <_printf_float+0x19a>
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	07d2      	lsls	r2, r2, #31
 800644c:	d502      	bpl.n	8006454 <_printf_float+0x1a0>
 800644e:	3301      	adds	r3, #1
 8006450:	185b      	adds	r3, r3, r1
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006456:	2600      	movs	r6, #0
 8006458:	65a3      	str	r3, [r4, #88]	; 0x58
 800645a:	e7d9      	b.n	8006410 <_printf_float+0x15c>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <_printf_float+0x1b4>
 8006460:	2201      	movs	r2, #1
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	4211      	tst	r1, r2
 8006466:	d000      	beq.n	800646a <_printf_float+0x1b6>
 8006468:	1c9a      	adds	r2, r3, #2
 800646a:	6122      	str	r2, [r4, #16]
 800646c:	e7f2      	b.n	8006454 <_printf_float+0x1a0>
 800646e:	2767      	movs	r7, #103	; 0x67
 8006470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006474:	4293      	cmp	r3, r2
 8006476:	db05      	blt.n	8006484 <_printf_float+0x1d0>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	07d2      	lsls	r2, r2, #31
 800647e:	d5e9      	bpl.n	8006454 <_printf_float+0x1a0>
 8006480:	3301      	adds	r3, #1
 8006482:	e7e6      	b.n	8006452 <_printf_float+0x19e>
 8006484:	2101      	movs	r1, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	dc01      	bgt.n	800648e <_printf_float+0x1da>
 800648a:	1849      	adds	r1, r1, r1
 800648c:	1ac9      	subs	r1, r1, r3
 800648e:	1852      	adds	r2, r2, r1
 8006490:	e7eb      	b.n	800646a <_printf_float+0x1b6>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	0553      	lsls	r3, r2, #21
 8006496:	d408      	bmi.n	80064aa <_printf_float+0x1f6>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	002a      	movs	r2, r5
 800649c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800649e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064a2:	47a8      	blx	r5
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d129      	bne.n	80064fc <_printf_float+0x248>
 80064a8:	e75f      	b.n	800636a <_printf_float+0xb6>
 80064aa:	2f65      	cmp	r7, #101	; 0x65
 80064ac:	d800      	bhi.n	80064b0 <_printf_float+0x1fc>
 80064ae:	e0e0      	b.n	8006672 <_printf_float+0x3be>
 80064b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80064b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80064b4:	2200      	movs	r2, #0
 80064b6:	2300      	movs	r3, #0
 80064b8:	f7f9 ffbe 	bl	8000438 <__aeabi_dcmpeq>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d034      	beq.n	800652a <_printf_float+0x276>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4a42      	ldr	r2, [pc, #264]	; (80065cc <_printf_float+0x318>)
 80064c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064ca:	47a8      	blx	r5
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d100      	bne.n	80064d2 <_printf_float+0x21e>
 80064d0:	e74b      	b.n	800636a <_printf_float+0xb6>
 80064d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064d6:	4293      	cmp	r3, r2
 80064d8:	db02      	blt.n	80064e0 <_printf_float+0x22c>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	07db      	lsls	r3, r3, #31
 80064de:	d50d      	bpl.n	80064fc <_printf_float+0x248>
 80064e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ea:	47a8      	blx	r5
 80064ec:	2500      	movs	r5, #0
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d100      	bne.n	80064f4 <_printf_float+0x240>
 80064f2:	e73a      	b.n	800636a <_printf_float+0xb6>
 80064f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064f6:	3b01      	subs	r3, #1
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dc0a      	bgt.n	8006512 <_printf_float+0x25e>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d500      	bpl.n	8006504 <_printf_float+0x250>
 8006502:	e108      	b.n	8006716 <_printf_float+0x462>
 8006504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006506:	68e0      	ldr	r0, [r4, #12]
 8006508:	4298      	cmp	r0, r3
 800650a:	db00      	blt.n	800650e <_printf_float+0x25a>
 800650c:	e72f      	b.n	800636e <_printf_float+0xba>
 800650e:	0018      	movs	r0, r3
 8006510:	e72d      	b.n	800636e <_printf_float+0xba>
 8006512:	0022      	movs	r2, r4
 8006514:	2301      	movs	r3, #1
 8006516:	321a      	adds	r2, #26
 8006518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800651e:	47b0      	blx	r6
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d100      	bne.n	8006526 <_printf_float+0x272>
 8006524:	e721      	b.n	800636a <_printf_float+0xb6>
 8006526:	3501      	adds	r5, #1
 8006528:	e7e4      	b.n	80064f4 <_printf_float+0x240>
 800652a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800652c:	2b00      	cmp	r3, #0
 800652e:	dc2d      	bgt.n	800658c <_printf_float+0x2d8>
 8006530:	2301      	movs	r3, #1
 8006532:	4a26      	ldr	r2, [pc, #152]	; (80065cc <_printf_float+0x318>)
 8006534:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006538:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800653a:	47b0      	blx	r6
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d100      	bne.n	8006542 <_printf_float+0x28e>
 8006540:	e713      	b.n	800636a <_printf_float+0xb6>
 8006542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <_printf_float+0x2a0>
 8006548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <_printf_float+0x2a0>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d5d3      	bpl.n	80064fc <_printf_float+0x248>
 8006554:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800655a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800655c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800655e:	47b0      	blx	r6
 8006560:	2600      	movs	r6, #0
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d100      	bne.n	8006568 <_printf_float+0x2b4>
 8006566:	e700      	b.n	800636a <_printf_float+0xb6>
 8006568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800656a:	425b      	negs	r3, r3
 800656c:	42b3      	cmp	r3, r6
 800656e:	dc01      	bgt.n	8006574 <_printf_float+0x2c0>
 8006570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006572:	e792      	b.n	800649a <_printf_float+0x1e6>
 8006574:	0022      	movs	r2, r4
 8006576:	2301      	movs	r3, #1
 8006578:	321a      	adds	r2, #26
 800657a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800657c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800657e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006580:	47b8      	blx	r7
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d100      	bne.n	8006588 <_printf_float+0x2d4>
 8006586:	e6f0      	b.n	800636a <_printf_float+0xb6>
 8006588:	3601      	adds	r6, #1
 800658a:	e7ed      	b.n	8006568 <_printf_float+0x2b4>
 800658c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800658e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006590:	429f      	cmp	r7, r3
 8006592:	dd00      	ble.n	8006596 <_printf_float+0x2e2>
 8006594:	001f      	movs	r7, r3
 8006596:	2f00      	cmp	r7, #0
 8006598:	dd08      	ble.n	80065ac <_printf_float+0x2f8>
 800659a:	003b      	movs	r3, r7
 800659c:	002a      	movs	r2, r5
 800659e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065a4:	47b0      	blx	r6
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	d100      	bne.n	80065ac <_printf_float+0x2f8>
 80065aa:	e6de      	b.n	800636a <_printf_float+0xb6>
 80065ac:	2300      	movs	r3, #0
 80065ae:	930d      	str	r3, [sp, #52]	; 0x34
 80065b0:	43fb      	mvns	r3, r7
 80065b2:	17db      	asrs	r3, r3, #31
 80065b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b6:	e018      	b.n	80065ea <_printf_float+0x336>
 80065b8:	7fefffff 	.word	0x7fefffff
 80065bc:	08008688 	.word	0x08008688
 80065c0:	08008684 	.word	0x08008684
 80065c4:	08008690 	.word	0x08008690
 80065c8:	0800868c 	.word	0x0800868c
 80065cc:	08008694 	.word	0x08008694
 80065d0:	0022      	movs	r2, r4
 80065d2:	2301      	movs	r3, #1
 80065d4:	321a      	adds	r2, #26
 80065d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065dc:	47b0      	blx	r6
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d100      	bne.n	80065e4 <_printf_float+0x330>
 80065e2:	e6c2      	b.n	800636a <_printf_float+0xb6>
 80065e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e6:	3301      	adds	r3, #1
 80065e8:	930d      	str	r3, [sp, #52]	; 0x34
 80065ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ec:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80065ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065f0:	403b      	ands	r3, r7
 80065f2:	1af3      	subs	r3, r6, r3
 80065f4:	4293      	cmp	r3, r2
 80065f6:	dceb      	bgt.n	80065d0 <_printf_float+0x31c>
 80065f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065fc:	19ad      	adds	r5, r5, r6
 80065fe:	4293      	cmp	r3, r2
 8006600:	db10      	blt.n	8006624 <_printf_float+0x370>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	07db      	lsls	r3, r3, #31
 8006606:	d40d      	bmi.n	8006624 <_printf_float+0x370>
 8006608:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800660a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800660c:	1bbe      	subs	r6, r7, r6
 800660e:	1aff      	subs	r7, r7, r3
 8006610:	42b7      	cmp	r7, r6
 8006612:	dd00      	ble.n	8006616 <_printf_float+0x362>
 8006614:	0037      	movs	r7, r6
 8006616:	2f00      	cmp	r7, #0
 8006618:	dc0d      	bgt.n	8006636 <_printf_float+0x382>
 800661a:	43fe      	mvns	r6, r7
 800661c:	17f3      	asrs	r3, r6, #31
 800661e:	2500      	movs	r5, #0
 8006620:	930c      	str	r3, [sp, #48]	; 0x30
 8006622:	e01c      	b.n	800665e <_printf_float+0x3aa>
 8006624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006628:	990a      	ldr	r1, [sp, #40]	; 0x28
 800662a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800662e:	47b8      	blx	r7
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d1e9      	bne.n	8006608 <_printf_float+0x354>
 8006634:	e699      	b.n	800636a <_printf_float+0xb6>
 8006636:	003b      	movs	r3, r7
 8006638:	002a      	movs	r2, r5
 800663a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800663c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006640:	47a8      	blx	r5
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	d1e9      	bne.n	800661a <_printf_float+0x366>
 8006646:	e690      	b.n	800636a <_printf_float+0xb6>
 8006648:	0022      	movs	r2, r4
 800664a:	2301      	movs	r3, #1
 800664c:	321a      	adds	r2, #26
 800664e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006652:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006654:	47b0      	blx	r6
 8006656:	1c43      	adds	r3, r0, #1
 8006658:	d100      	bne.n	800665c <_printf_float+0x3a8>
 800665a:	e686      	b.n	800636a <_printf_float+0xb6>
 800665c:	3501      	adds	r5, #1
 800665e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006662:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	003a      	movs	r2, r7
 8006668:	400a      	ands	r2, r1
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	42ab      	cmp	r3, r5
 800666e:	dceb      	bgt.n	8006648 <_printf_float+0x394>
 8006670:	e744      	b.n	80064fc <_printf_float+0x248>
 8006672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006674:	2b01      	cmp	r3, #1
 8006676:	dc02      	bgt.n	800667e <_printf_float+0x3ca>
 8006678:	2301      	movs	r3, #1
 800667a:	421a      	tst	r2, r3
 800667c:	d032      	beq.n	80066e4 <_printf_float+0x430>
 800667e:	2301      	movs	r3, #1
 8006680:	002a      	movs	r2, r5
 8006682:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006686:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006688:	47b8      	blx	r7
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	d100      	bne.n	8006690 <_printf_float+0x3dc>
 800668e:	e66c      	b.n	800636a <_printf_float+0xb6>
 8006690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006694:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006698:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800669a:	3501      	adds	r5, #1
 800669c:	47b8      	blx	r7
 800669e:	1c43      	adds	r3, r0, #1
 80066a0:	d100      	bne.n	80066a4 <_printf_float+0x3f0>
 80066a2:	e662      	b.n	800636a <_printf_float+0xb6>
 80066a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066aa:	2200      	movs	r2, #0
 80066ac:	1e5f      	subs	r7, r3, #1
 80066ae:	2300      	movs	r3, #0
 80066b0:	f7f9 fec2 	bl	8000438 <__aeabi_dcmpeq>
 80066b4:	003b      	movs	r3, r7
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d014      	beq.n	80066e4 <_printf_float+0x430>
 80066ba:	2500      	movs	r5, #0
 80066bc:	e00a      	b.n	80066d4 <_printf_float+0x420>
 80066be:	0022      	movs	r2, r4
 80066c0:	2301      	movs	r3, #1
 80066c2:	321a      	adds	r2, #26
 80066c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80066ca:	47b8      	blx	r7
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d100      	bne.n	80066d2 <_printf_float+0x41e>
 80066d0:	e64b      	b.n	800636a <_printf_float+0xb6>
 80066d2:	3501      	adds	r5, #1
 80066d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d6:	3b01      	subs	r3, #1
 80066d8:	42ab      	cmp	r3, r5
 80066da:	dcf0      	bgt.n	80066be <_printf_float+0x40a>
 80066dc:	0022      	movs	r2, r4
 80066de:	0033      	movs	r3, r6
 80066e0:	3250      	adds	r2, #80	; 0x50
 80066e2:	e6db      	b.n	800649c <_printf_float+0x1e8>
 80066e4:	002a      	movs	r2, r5
 80066e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066ec:	47a8      	blx	r5
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	d1f4      	bne.n	80066dc <_printf_float+0x428>
 80066f2:	e63a      	b.n	800636a <_printf_float+0xb6>
 80066f4:	0022      	movs	r2, r4
 80066f6:	2301      	movs	r3, #1
 80066f8:	3219      	adds	r2, #25
 80066fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006700:	47b0      	blx	r6
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d100      	bne.n	8006708 <_printf_float+0x454>
 8006706:	e630      	b.n	800636a <_printf_float+0xb6>
 8006708:	3501      	adds	r5, #1
 800670a:	68e3      	ldr	r3, [r4, #12]
 800670c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	42ab      	cmp	r3, r5
 8006712:	dcef      	bgt.n	80066f4 <_printf_float+0x440>
 8006714:	e6f6      	b.n	8006504 <_printf_float+0x250>
 8006716:	2500      	movs	r5, #0
 8006718:	e7f7      	b.n	800670a <_printf_float+0x456>
 800671a:	2a00      	cmp	r2, #0
 800671c:	d100      	bne.n	8006720 <_printf_float+0x46c>
 800671e:	e689      	b.n	8006434 <_printf_float+0x180>
 8006720:	2100      	movs	r1, #0
 8006722:	9106      	str	r1, [sp, #24]
 8006724:	a912      	add	r1, sp, #72	; 0x48
 8006726:	9105      	str	r1, [sp, #20]
 8006728:	a911      	add	r1, sp, #68	; 0x44
 800672a:	9103      	str	r1, [sp, #12]
 800672c:	2123      	movs	r1, #35	; 0x23
 800672e:	a808      	add	r0, sp, #32
 8006730:	1809      	adds	r1, r1, r0
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	9200      	str	r2, [sp, #0]
 8006738:	002b      	movs	r3, r5
 800673a:	9704      	str	r7, [sp, #16]
 800673c:	9102      	str	r1, [sp, #8]
 800673e:	0032      	movs	r2, r6
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	f7ff fd1b 	bl	800617c <__cvt>
 8006746:	0005      	movs	r5, r0
 8006748:	e645      	b.n	80063d6 <_printf_float+0x122>
 800674a:	46c0      	nop			; (mov r8, r8)

0800674c <_printf_common>:
 800674c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800674e:	0015      	movs	r5, r2
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	688a      	ldr	r2, [r1, #8]
 8006754:	690b      	ldr	r3, [r1, #16]
 8006756:	9000      	str	r0, [sp, #0]
 8006758:	000c      	movs	r4, r1
 800675a:	4293      	cmp	r3, r2
 800675c:	da00      	bge.n	8006760 <_printf_common+0x14>
 800675e:	0013      	movs	r3, r2
 8006760:	0022      	movs	r2, r4
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	3243      	adds	r2, #67	; 0x43
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	2a00      	cmp	r2, #0
 800676a:	d001      	beq.n	8006770 <_printf_common+0x24>
 800676c:	3301      	adds	r3, #1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	069b      	lsls	r3, r3, #26
 8006774:	d502      	bpl.n	800677c <_printf_common+0x30>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	3302      	adds	r3, #2
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	2706      	movs	r7, #6
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	401f      	ands	r7, r3
 8006782:	d027      	beq.n	80067d4 <_printf_common+0x88>
 8006784:	0023      	movs	r3, r4
 8006786:	3343      	adds	r3, #67	; 0x43
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	4193      	sbcs	r3, r2
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	0692      	lsls	r2, r2, #26
 8006792:	d430      	bmi.n	80067f6 <_printf_common+0xaa>
 8006794:	0022      	movs	r2, r4
 8006796:	9901      	ldr	r1, [sp, #4]
 8006798:	3243      	adds	r2, #67	; 0x43
 800679a:	9800      	ldr	r0, [sp, #0]
 800679c:	9e08      	ldr	r6, [sp, #32]
 800679e:	47b0      	blx	r6
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d025      	beq.n	80067f0 <_printf_common+0xa4>
 80067a4:	2306      	movs	r3, #6
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	682a      	ldr	r2, [r5, #0]
 80067aa:	68e1      	ldr	r1, [r4, #12]
 80067ac:	4003      	ands	r3, r0
 80067ae:	2500      	movs	r5, #0
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d103      	bne.n	80067bc <_printf_common+0x70>
 80067b4:	1a8d      	subs	r5, r1, r2
 80067b6:	43eb      	mvns	r3, r5
 80067b8:	17db      	asrs	r3, r3, #31
 80067ba:	401d      	ands	r5, r3
 80067bc:	68a3      	ldr	r3, [r4, #8]
 80067be:	6922      	ldr	r2, [r4, #16]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	dd01      	ble.n	80067c8 <_printf_common+0x7c>
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	18ed      	adds	r5, r5, r3
 80067c8:	2700      	movs	r7, #0
 80067ca:	42bd      	cmp	r5, r7
 80067cc:	d120      	bne.n	8006810 <_printf_common+0xc4>
 80067ce:	2000      	movs	r0, #0
 80067d0:	e010      	b.n	80067f4 <_printf_common+0xa8>
 80067d2:	3701      	adds	r7, #1
 80067d4:	68e3      	ldr	r3, [r4, #12]
 80067d6:	682a      	ldr	r2, [r5, #0]
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	42bb      	cmp	r3, r7
 80067dc:	ddd2      	ble.n	8006784 <_printf_common+0x38>
 80067de:	0022      	movs	r2, r4
 80067e0:	2301      	movs	r3, #1
 80067e2:	3219      	adds	r2, #25
 80067e4:	9901      	ldr	r1, [sp, #4]
 80067e6:	9800      	ldr	r0, [sp, #0]
 80067e8:	9e08      	ldr	r6, [sp, #32]
 80067ea:	47b0      	blx	r6
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d1f0      	bne.n	80067d2 <_printf_common+0x86>
 80067f0:	2001      	movs	r0, #1
 80067f2:	4240      	negs	r0, r0
 80067f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067f6:	2030      	movs	r0, #48	; 0x30
 80067f8:	18e1      	adds	r1, r4, r3
 80067fa:	3143      	adds	r1, #67	; 0x43
 80067fc:	7008      	strb	r0, [r1, #0]
 80067fe:	0021      	movs	r1, r4
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	3145      	adds	r1, #69	; 0x45
 8006804:	7809      	ldrb	r1, [r1, #0]
 8006806:	18a2      	adds	r2, r4, r2
 8006808:	3243      	adds	r2, #67	; 0x43
 800680a:	3302      	adds	r3, #2
 800680c:	7011      	strb	r1, [r2, #0]
 800680e:	e7c1      	b.n	8006794 <_printf_common+0x48>
 8006810:	0022      	movs	r2, r4
 8006812:	2301      	movs	r3, #1
 8006814:	321a      	adds	r2, #26
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	9800      	ldr	r0, [sp, #0]
 800681a:	9e08      	ldr	r6, [sp, #32]
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	d0e6      	beq.n	80067f0 <_printf_common+0xa4>
 8006822:	3701      	adds	r7, #1
 8006824:	e7d1      	b.n	80067ca <_printf_common+0x7e>
	...

08006828 <_printf_i>:
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b089      	sub	sp, #36	; 0x24
 800682c:	9204      	str	r2, [sp, #16]
 800682e:	000a      	movs	r2, r1
 8006830:	3243      	adds	r2, #67	; 0x43
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	9003      	str	r0, [sp, #12]
 8006836:	9202      	str	r2, [sp, #8]
 8006838:	7e0a      	ldrb	r2, [r1, #24]
 800683a:	000c      	movs	r4, r1
 800683c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800683e:	2a6e      	cmp	r2, #110	; 0x6e
 8006840:	d100      	bne.n	8006844 <_printf_i+0x1c>
 8006842:	e086      	b.n	8006952 <_printf_i+0x12a>
 8006844:	d81f      	bhi.n	8006886 <_printf_i+0x5e>
 8006846:	2a63      	cmp	r2, #99	; 0x63
 8006848:	d033      	beq.n	80068b2 <_printf_i+0x8a>
 800684a:	d808      	bhi.n	800685e <_printf_i+0x36>
 800684c:	2a00      	cmp	r2, #0
 800684e:	d100      	bne.n	8006852 <_printf_i+0x2a>
 8006850:	e08c      	b.n	800696c <_printf_i+0x144>
 8006852:	2a58      	cmp	r2, #88	; 0x58
 8006854:	d04d      	beq.n	80068f2 <_printf_i+0xca>
 8006856:	0025      	movs	r5, r4
 8006858:	3542      	adds	r5, #66	; 0x42
 800685a:	702a      	strb	r2, [r5, #0]
 800685c:	e030      	b.n	80068c0 <_printf_i+0x98>
 800685e:	2a64      	cmp	r2, #100	; 0x64
 8006860:	d001      	beq.n	8006866 <_printf_i+0x3e>
 8006862:	2a69      	cmp	r2, #105	; 0x69
 8006864:	d1f7      	bne.n	8006856 <_printf_i+0x2e>
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	6825      	ldr	r5, [r4, #0]
 800686a:	1d0a      	adds	r2, r1, #4
 800686c:	0628      	lsls	r0, r5, #24
 800686e:	d529      	bpl.n	80068c4 <_printf_i+0x9c>
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	2800      	cmp	r0, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0x58>
 8006878:	232d      	movs	r3, #45	; 0x2d
 800687a:	9a02      	ldr	r2, [sp, #8]
 800687c:	4240      	negs	r0, r0
 800687e:	7013      	strb	r3, [r2, #0]
 8006880:	4e6b      	ldr	r6, [pc, #428]	; (8006a30 <_printf_i+0x208>)
 8006882:	270a      	movs	r7, #10
 8006884:	e04f      	b.n	8006926 <_printf_i+0xfe>
 8006886:	2a73      	cmp	r2, #115	; 0x73
 8006888:	d074      	beq.n	8006974 <_printf_i+0x14c>
 800688a:	d808      	bhi.n	800689e <_printf_i+0x76>
 800688c:	2a6f      	cmp	r2, #111	; 0x6f
 800688e:	d01f      	beq.n	80068d0 <_printf_i+0xa8>
 8006890:	2a70      	cmp	r2, #112	; 0x70
 8006892:	d1e0      	bne.n	8006856 <_printf_i+0x2e>
 8006894:	2220      	movs	r2, #32
 8006896:	6809      	ldr	r1, [r1, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	e003      	b.n	80068a6 <_printf_i+0x7e>
 800689e:	2a75      	cmp	r2, #117	; 0x75
 80068a0:	d016      	beq.n	80068d0 <_printf_i+0xa8>
 80068a2:	2a78      	cmp	r2, #120	; 0x78
 80068a4:	d1d7      	bne.n	8006856 <_printf_i+0x2e>
 80068a6:	0022      	movs	r2, r4
 80068a8:	2178      	movs	r1, #120	; 0x78
 80068aa:	3245      	adds	r2, #69	; 0x45
 80068ac:	7011      	strb	r1, [r2, #0]
 80068ae:	4e61      	ldr	r6, [pc, #388]	; (8006a34 <_printf_i+0x20c>)
 80068b0:	e022      	b.n	80068f8 <_printf_i+0xd0>
 80068b2:	0025      	movs	r5, r4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	3542      	adds	r5, #66	; 0x42
 80068b8:	1d11      	adds	r1, r2, #4
 80068ba:	6019      	str	r1, [r3, #0]
 80068bc:	6813      	ldr	r3, [r2, #0]
 80068be:	702b      	strb	r3, [r5, #0]
 80068c0:	2301      	movs	r3, #1
 80068c2:	e065      	b.n	8006990 <_printf_i+0x168>
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	0669      	lsls	r1, r5, #25
 80068ca:	d5d3      	bpl.n	8006874 <_printf_i+0x4c>
 80068cc:	b200      	sxth	r0, r0
 80068ce:	e7d1      	b.n	8006874 <_printf_i+0x4c>
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	6825      	ldr	r5, [r4, #0]
 80068d4:	1d08      	adds	r0, r1, #4
 80068d6:	6018      	str	r0, [r3, #0]
 80068d8:	6808      	ldr	r0, [r1, #0]
 80068da:	062e      	lsls	r6, r5, #24
 80068dc:	d505      	bpl.n	80068ea <_printf_i+0xc2>
 80068de:	4e54      	ldr	r6, [pc, #336]	; (8006a30 <_printf_i+0x208>)
 80068e0:	2708      	movs	r7, #8
 80068e2:	2a6f      	cmp	r2, #111	; 0x6f
 80068e4:	d01b      	beq.n	800691e <_printf_i+0xf6>
 80068e6:	270a      	movs	r7, #10
 80068e8:	e019      	b.n	800691e <_printf_i+0xf6>
 80068ea:	066d      	lsls	r5, r5, #25
 80068ec:	d5f7      	bpl.n	80068de <_printf_i+0xb6>
 80068ee:	b280      	uxth	r0, r0
 80068f0:	e7f5      	b.n	80068de <_printf_i+0xb6>
 80068f2:	3145      	adds	r1, #69	; 0x45
 80068f4:	4e4e      	ldr	r6, [pc, #312]	; (8006a30 <_printf_i+0x208>)
 80068f6:	700a      	strb	r2, [r1, #0]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	1d01      	adds	r1, r0, #4
 80068fe:	6800      	ldr	r0, [r0, #0]
 8006900:	6019      	str	r1, [r3, #0]
 8006902:	0615      	lsls	r5, r2, #24
 8006904:	d521      	bpl.n	800694a <_printf_i+0x122>
 8006906:	07d3      	lsls	r3, r2, #31
 8006908:	d502      	bpl.n	8006910 <_printf_i+0xe8>
 800690a:	2320      	movs	r3, #32
 800690c:	431a      	orrs	r2, r3
 800690e:	6022      	str	r2, [r4, #0]
 8006910:	2710      	movs	r7, #16
 8006912:	2800      	cmp	r0, #0
 8006914:	d103      	bne.n	800691e <_printf_i+0xf6>
 8006916:	2320      	movs	r3, #32
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	439a      	bics	r2, r3
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	0023      	movs	r3, r4
 8006920:	2200      	movs	r2, #0
 8006922:	3343      	adds	r3, #67	; 0x43
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	6863      	ldr	r3, [r4, #4]
 8006928:	60a3      	str	r3, [r4, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	db58      	blt.n	80069e0 <_printf_i+0x1b8>
 800692e:	2204      	movs	r2, #4
 8006930:	6821      	ldr	r1, [r4, #0]
 8006932:	4391      	bics	r1, r2
 8006934:	6021      	str	r1, [r4, #0]
 8006936:	2800      	cmp	r0, #0
 8006938:	d154      	bne.n	80069e4 <_printf_i+0x1bc>
 800693a:	9d02      	ldr	r5, [sp, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05a      	beq.n	80069f6 <_printf_i+0x1ce>
 8006940:	0025      	movs	r5, r4
 8006942:	7833      	ldrb	r3, [r6, #0]
 8006944:	3542      	adds	r5, #66	; 0x42
 8006946:	702b      	strb	r3, [r5, #0]
 8006948:	e055      	b.n	80069f6 <_printf_i+0x1ce>
 800694a:	0655      	lsls	r5, r2, #25
 800694c:	d5db      	bpl.n	8006906 <_printf_i+0xde>
 800694e:	b280      	uxth	r0, r0
 8006950:	e7d9      	b.n	8006906 <_printf_i+0xde>
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	680d      	ldr	r5, [r1, #0]
 8006956:	1d10      	adds	r0, r2, #4
 8006958:	6949      	ldr	r1, [r1, #20]
 800695a:	6018      	str	r0, [r3, #0]
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	062e      	lsls	r6, r5, #24
 8006960:	d501      	bpl.n	8006966 <_printf_i+0x13e>
 8006962:	6019      	str	r1, [r3, #0]
 8006964:	e002      	b.n	800696c <_printf_i+0x144>
 8006966:	066d      	lsls	r5, r5, #25
 8006968:	d5fb      	bpl.n	8006962 <_printf_i+0x13a>
 800696a:	8019      	strh	r1, [r3, #0]
 800696c:	2300      	movs	r3, #0
 800696e:	9d02      	ldr	r5, [sp, #8]
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	e04f      	b.n	8006a14 <_printf_i+0x1ec>
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	1d11      	adds	r1, r2, #4
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	6815      	ldr	r5, [r2, #0]
 800697c:	2100      	movs	r1, #0
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	0028      	movs	r0, r5
 8006982:	f000 ff07 	bl	8007794 <memchr>
 8006986:	2800      	cmp	r0, #0
 8006988:	d001      	beq.n	800698e <_printf_i+0x166>
 800698a:	1b40      	subs	r0, r0, r5
 800698c:	6060      	str	r0, [r4, #4]
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	2300      	movs	r3, #0
 8006994:	9a02      	ldr	r2, [sp, #8]
 8006996:	7013      	strb	r3, [r2, #0]
 8006998:	e03c      	b.n	8006a14 <_printf_i+0x1ec>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	002a      	movs	r2, r5
 800699e:	9904      	ldr	r1, [sp, #16]
 80069a0:	9803      	ldr	r0, [sp, #12]
 80069a2:	9d05      	ldr	r5, [sp, #20]
 80069a4:	47a8      	blx	r5
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d03e      	beq.n	8006a28 <_printf_i+0x200>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	079b      	lsls	r3, r3, #30
 80069ae:	d415      	bmi.n	80069dc <_printf_i+0x1b4>
 80069b0:	9b07      	ldr	r3, [sp, #28]
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	4298      	cmp	r0, r3
 80069b6:	da39      	bge.n	8006a2c <_printf_i+0x204>
 80069b8:	0018      	movs	r0, r3
 80069ba:	e037      	b.n	8006a2c <_printf_i+0x204>
 80069bc:	0022      	movs	r2, r4
 80069be:	2301      	movs	r3, #1
 80069c0:	3219      	adds	r2, #25
 80069c2:	9904      	ldr	r1, [sp, #16]
 80069c4:	9803      	ldr	r0, [sp, #12]
 80069c6:	9e05      	ldr	r6, [sp, #20]
 80069c8:	47b0      	blx	r6
 80069ca:	1c43      	adds	r3, r0, #1
 80069cc:	d02c      	beq.n	8006a28 <_printf_i+0x200>
 80069ce:	3501      	adds	r5, #1
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	9a07      	ldr	r2, [sp, #28]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	42ab      	cmp	r3, r5
 80069d8:	dcf0      	bgt.n	80069bc <_printf_i+0x194>
 80069da:	e7e9      	b.n	80069b0 <_printf_i+0x188>
 80069dc:	2500      	movs	r5, #0
 80069de:	e7f7      	b.n	80069d0 <_printf_i+0x1a8>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0ad      	beq.n	8006940 <_printf_i+0x118>
 80069e4:	9d02      	ldr	r5, [sp, #8]
 80069e6:	0039      	movs	r1, r7
 80069e8:	f7f9 fc26 	bl	8000238 <__aeabi_uidivmod>
 80069ec:	5c73      	ldrb	r3, [r6, r1]
 80069ee:	3d01      	subs	r5, #1
 80069f0:	702b      	strb	r3, [r5, #0]
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1f7      	bne.n	80069e6 <_printf_i+0x1be>
 80069f6:	2f08      	cmp	r7, #8
 80069f8:	d109      	bne.n	8006a0e <_printf_i+0x1e6>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	07db      	lsls	r3, r3, #31
 80069fe:	d506      	bpl.n	8006a0e <_printf_i+0x1e6>
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	6922      	ldr	r2, [r4, #16]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	dc02      	bgt.n	8006a0e <_printf_i+0x1e6>
 8006a08:	2330      	movs	r3, #48	; 0x30
 8006a0a:	3d01      	subs	r5, #1
 8006a0c:	702b      	strb	r3, [r5, #0]
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	1b5b      	subs	r3, r3, r5
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	9b05      	ldr	r3, [sp, #20]
 8006a16:	aa07      	add	r2, sp, #28
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	0021      	movs	r1, r4
 8006a1c:	9b04      	ldr	r3, [sp, #16]
 8006a1e:	9803      	ldr	r0, [sp, #12]
 8006a20:	f7ff fe94 	bl	800674c <_printf_common>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d1b8      	bne.n	800699a <_printf_i+0x172>
 8006a28:	2001      	movs	r0, #1
 8006a2a:	4240      	negs	r0, r0
 8006a2c:	b009      	add	sp, #36	; 0x24
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a30:	08008696 	.word	0x08008696
 8006a34:	080086a7 	.word	0x080086a7

08006a38 <sniprintf>:
 8006a38:	b40c      	push	{r2, r3}
 8006a3a:	b530      	push	{r4, r5, lr}
 8006a3c:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <sniprintf+0x60>)
 8006a3e:	b09d      	sub	sp, #116	; 0x74
 8006a40:	1e0c      	subs	r4, r1, #0
 8006a42:	681d      	ldr	r5, [r3, #0]
 8006a44:	da08      	bge.n	8006a58 <sniprintf+0x20>
 8006a46:	238b      	movs	r3, #139	; 0x8b
 8006a48:	2001      	movs	r0, #1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	4240      	negs	r0, r0
 8006a4e:	b01d      	add	sp, #116	; 0x74
 8006a50:	bc30      	pop	{r4, r5}
 8006a52:	bc08      	pop	{r3}
 8006a54:	b002      	add	sp, #8
 8006a56:	4718      	bx	r3
 8006a58:	2382      	movs	r3, #130	; 0x82
 8006a5a:	a902      	add	r1, sp, #8
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	818b      	strh	r3, [r1, #12]
 8006a60:	2300      	movs	r3, #0
 8006a62:	9002      	str	r0, [sp, #8]
 8006a64:	6108      	str	r0, [r1, #16]
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d000      	beq.n	8006a6c <sniprintf+0x34>
 8006a6a:	1e63      	subs	r3, r4, #1
 8006a6c:	608b      	str	r3, [r1, #8]
 8006a6e:	614b      	str	r3, [r1, #20]
 8006a70:	2301      	movs	r3, #1
 8006a72:	425b      	negs	r3, r3
 8006a74:	81cb      	strh	r3, [r1, #14]
 8006a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a78:	ab21      	add	r3, sp, #132	; 0x84
 8006a7a:	0028      	movs	r0, r5
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	f001 fa9b 	bl	8007fb8 <_svfiprintf_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	da01      	bge.n	8006a8a <sniprintf+0x52>
 8006a86:	238b      	movs	r3, #139	; 0x8b
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d0df      	beq.n	8006a4e <sniprintf+0x16>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9a02      	ldr	r2, [sp, #8]
 8006a92:	7013      	strb	r3, [r2, #0]
 8006a94:	e7db      	b.n	8006a4e <sniprintf+0x16>
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	20000010 	.word	0x20000010

08006a9c <quorem>:
 8006a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9e:	6903      	ldr	r3, [r0, #16]
 8006aa0:	690c      	ldr	r4, [r1, #16]
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	0007      	movs	r7, r0
 8006aa6:	9105      	str	r1, [sp, #20]
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	db65      	blt.n	8006b7a <quorem+0xde>
 8006aae:	000b      	movs	r3, r1
 8006ab0:	3c01      	subs	r4, #1
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	00a5      	lsls	r5, r4, #2
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	195b      	adds	r3, r3, r5
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	0003      	movs	r3, r0
 8006abe:	3314      	adds	r3, #20
 8006ac0:	9302      	str	r3, [sp, #8]
 8006ac2:	195d      	adds	r5, r3, r5
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	6828      	ldr	r0, [r5, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	f7f9 fb2d 	bl	800012c <__udivsi3>
 8006ad2:	9001      	str	r0, [sp, #4]
 8006ad4:	42b0      	cmp	r0, r6
 8006ad6:	d029      	beq.n	8006b2c <quorem+0x90>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	9802      	ldr	r0, [sp, #8]
 8006adc:	469c      	mov	ip, r3
 8006ade:	9606      	str	r6, [sp, #24]
 8006ae0:	4662      	mov	r2, ip
 8006ae2:	ca08      	ldmia	r2!, {r3}
 8006ae4:	4694      	mov	ip, r2
 8006ae6:	9a01      	ldr	r2, [sp, #4]
 8006ae8:	b299      	uxth	r1, r3
 8006aea:	4351      	muls	r1, r2
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	4353      	muls	r3, r2
 8006af0:	1989      	adds	r1, r1, r6
 8006af2:	0c0a      	lsrs	r2, r1, #16
 8006af4:	189b      	adds	r3, r3, r2
 8006af6:	9307      	str	r3, [sp, #28]
 8006af8:	0c1e      	lsrs	r6, r3, #16
 8006afa:	6803      	ldr	r3, [r0, #0]
 8006afc:	b289      	uxth	r1, r1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	9b06      	ldr	r3, [sp, #24]
 8006b02:	18d2      	adds	r2, r2, r3
 8006b04:	6803      	ldr	r3, [r0, #0]
 8006b06:	1a52      	subs	r2, r2, r1
 8006b08:	0c19      	lsrs	r1, r3, #16
 8006b0a:	466b      	mov	r3, sp
 8006b0c:	8b9b      	ldrh	r3, [r3, #28]
 8006b0e:	1acb      	subs	r3, r1, r3
 8006b10:	1411      	asrs	r1, r2, #16
 8006b12:	185b      	adds	r3, r3, r1
 8006b14:	1419      	asrs	r1, r3, #16
 8006b16:	b292      	uxth	r2, r2
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	9106      	str	r1, [sp, #24]
 8006b20:	c004      	stmia	r0!, {r2}
 8006b22:	4563      	cmp	r3, ip
 8006b24:	d2dc      	bcs.n	8006ae0 <quorem+0x44>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02d      	beq.n	8006b88 <quorem+0xec>
 8006b2c:	9905      	ldr	r1, [sp, #20]
 8006b2e:	0038      	movs	r0, r7
 8006b30:	f001 f858 	bl	8007be4 <__mcmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db1f      	blt.n	8006b78 <quorem+0xdc>
 8006b38:	2500      	movs	r5, #0
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	9802      	ldr	r0, [sp, #8]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	9903      	ldr	r1, [sp, #12]
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	6802      	ldr	r2, [r0, #0]
 8006b46:	c908      	ldmia	r1!, {r3}
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	1955      	adds	r5, r2, r5
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	1aaa      	subs	r2, r5, r2
 8006b50:	6805      	ldr	r5, [r0, #0]
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	0c2d      	lsrs	r5, r5, #16
 8006b56:	1aeb      	subs	r3, r5, r3
 8006b58:	1415      	asrs	r5, r2, #16
 8006b5a:	195b      	adds	r3, r3, r5
 8006b5c:	141d      	asrs	r5, r3, #16
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	4313      	orrs	r3, r2
 8006b64:	c008      	stmia	r0!, {r3}
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	d2eb      	bcs.n	8006b44 <quorem+0xa8>
 8006b6c:	9a02      	ldr	r2, [sp, #8]
 8006b6e:	00a3      	lsls	r3, r4, #2
 8006b70:	18d3      	adds	r3, r2, r3
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	d011      	beq.n	8006b9c <quorem+0x100>
 8006b78:	9e01      	ldr	r6, [sp, #4]
 8006b7a:	0030      	movs	r0, r6
 8006b7c:	b009      	add	sp, #36	; 0x24
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <quorem+0xf4>
 8006b86:	3c01      	subs	r4, #1
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	3d04      	subs	r5, #4
 8006b8c:	42ab      	cmp	r3, r5
 8006b8e:	d3f7      	bcc.n	8006b80 <quorem+0xe4>
 8006b90:	613c      	str	r4, [r7, #16]
 8006b92:	e7cb      	b.n	8006b2c <quorem+0x90>
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	d104      	bne.n	8006ba4 <quorem+0x108>
 8006b9a:	3c01      	subs	r4, #1
 8006b9c:	9a02      	ldr	r2, [sp, #8]
 8006b9e:	3b04      	subs	r3, #4
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d3f7      	bcc.n	8006b94 <quorem+0xf8>
 8006ba4:	613c      	str	r4, [r7, #16]
 8006ba6:	e7e7      	b.n	8006b78 <quorem+0xdc>

08006ba8 <_dtoa_r>:
 8006ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006baa:	0016      	movs	r6, r2
 8006bac:	001f      	movs	r7, r3
 8006bae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bb0:	b09b      	sub	sp, #108	; 0x6c
 8006bb2:	9002      	str	r0, [sp, #8]
 8006bb4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006bb6:	9606      	str	r6, [sp, #24]
 8006bb8:	9707      	str	r7, [sp, #28]
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	d108      	bne.n	8006bd0 <_dtoa_r+0x28>
 8006bbe:	2010      	movs	r0, #16
 8006bc0:	f000 fdde 	bl	8007780 <malloc>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	6258      	str	r0, [r3, #36]	; 0x24
 8006bc8:	6044      	str	r4, [r0, #4]
 8006bca:	6084      	str	r4, [r0, #8]
 8006bcc:	6004      	str	r4, [r0, #0]
 8006bce:	60c4      	str	r4, [r0, #12]
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	d00b      	beq.n	8006bf2 <_dtoa_r+0x4a>
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4093      	lsls	r3, r2
 8006be0:	604a      	str	r2, [r1, #4]
 8006be2:	608b      	str	r3, [r1, #8]
 8006be4:	9802      	ldr	r0, [sp, #8]
 8006be6:	f000 fe21 	bl	800782c <_Bfree>
 8006bea:	2200      	movs	r2, #0
 8006bec:	9b02      	ldr	r3, [sp, #8]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	da20      	bge.n	8006c38 <_dtoa_r+0x90>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	007b      	lsls	r3, r7, #1
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	9307      	str	r3, [sp, #28]
 8006c00:	9c07      	ldr	r4, [sp, #28]
 8006c02:	4bb2      	ldr	r3, [pc, #712]	; (8006ecc <_dtoa_r+0x324>)
 8006c04:	0022      	movs	r2, r4
 8006c06:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c08:	401a      	ands	r2, r3
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d117      	bne.n	8006c3e <_dtoa_r+0x96>
 8006c0e:	4bb0      	ldr	r3, [pc, #704]	; (8006ed0 <_dtoa_r+0x328>)
 8006c10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <_dtoa_r+0x7a>
 8006c1a:	0324      	lsls	r4, r4, #12
 8006c1c:	d101      	bne.n	8006c22 <_dtoa_r+0x7a>
 8006c1e:	f000 fd87 	bl	8007730 <_dtoa_r+0xb88>
 8006c22:	4bac      	ldr	r3, [pc, #688]	; (8006ed4 <_dtoa_r+0x32c>)
 8006c24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c26:	9308      	str	r3, [sp, #32]
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d002      	beq.n	8006c32 <_dtoa_r+0x8a>
 8006c2c:	4baa      	ldr	r3, [pc, #680]	; (8006ed8 <_dtoa_r+0x330>)
 8006c2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	9808      	ldr	r0, [sp, #32]
 8006c34:	b01b      	add	sp, #108	; 0x6c
 8006c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c38:	2300      	movs	r3, #0
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	e7e0      	b.n	8006c00 <_dtoa_r+0x58>
 8006c3e:	9e06      	ldr	r6, [sp, #24]
 8006c40:	9f07      	ldr	r7, [sp, #28]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	0030      	movs	r0, r6
 8006c48:	0039      	movs	r1, r7
 8006c4a:	f7f9 fbf5 	bl	8000438 <__aeabi_dcmpeq>
 8006c4e:	1e05      	subs	r5, r0, #0
 8006c50:	d00b      	beq.n	8006c6a <_dtoa_r+0xc2>
 8006c52:	2301      	movs	r3, #1
 8006c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	4ba0      	ldr	r3, [pc, #640]	; (8006edc <_dtoa_r+0x334>)
 8006c5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c5c:	9308      	str	r3, [sp, #32]
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d0e7      	beq.n	8006c32 <_dtoa_r+0x8a>
 8006c62:	4a9f      	ldr	r2, [pc, #636]	; (8006ee0 <_dtoa_r+0x338>)
 8006c64:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006c66:	600a      	str	r2, [r1, #0]
 8006c68:	e7e3      	b.n	8006c32 <_dtoa_r+0x8a>
 8006c6a:	ab18      	add	r3, sp, #96	; 0x60
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	ab19      	add	r3, sp, #100	; 0x64
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	0032      	movs	r2, r6
 8006c74:	003b      	movs	r3, r7
 8006c76:	9802      	ldr	r0, [sp, #8]
 8006c78:	f001 f832 	bl	8007ce0 <__d2b>
 8006c7c:	0063      	lsls	r3, r4, #1
 8006c7e:	9003      	str	r0, [sp, #12]
 8006c80:	0d5b      	lsrs	r3, r3, #21
 8006c82:	d074      	beq.n	8006d6e <_dtoa_r+0x1c6>
 8006c84:	033a      	lsls	r2, r7, #12
 8006c86:	4c97      	ldr	r4, [pc, #604]	; (8006ee4 <_dtoa_r+0x33c>)
 8006c88:	0b12      	lsrs	r2, r2, #12
 8006c8a:	4314      	orrs	r4, r2
 8006c8c:	0021      	movs	r1, r4
 8006c8e:	4a96      	ldr	r2, [pc, #600]	; (8006ee8 <_dtoa_r+0x340>)
 8006c90:	0030      	movs	r0, r6
 8006c92:	9516      	str	r5, [sp, #88]	; 0x58
 8006c94:	189e      	adds	r6, r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b94      	ldr	r3, [pc, #592]	; (8006eec <_dtoa_r+0x344>)
 8006c9a:	f7fa fee5 	bl	8001a68 <__aeabi_dsub>
 8006c9e:	4a94      	ldr	r2, [pc, #592]	; (8006ef0 <_dtoa_r+0x348>)
 8006ca0:	4b94      	ldr	r3, [pc, #592]	; (8006ef4 <_dtoa_r+0x34c>)
 8006ca2:	f7fa fc6f 	bl	8001584 <__aeabi_dmul>
 8006ca6:	4a94      	ldr	r2, [pc, #592]	; (8006ef8 <_dtoa_r+0x350>)
 8006ca8:	4b94      	ldr	r3, [pc, #592]	; (8006efc <_dtoa_r+0x354>)
 8006caa:	f7f9 fd45 	bl	8000738 <__aeabi_dadd>
 8006cae:	0004      	movs	r4, r0
 8006cb0:	0030      	movs	r0, r6
 8006cb2:	000d      	movs	r5, r1
 8006cb4:	f7fb fa72 	bl	800219c <__aeabi_i2d>
 8006cb8:	4a91      	ldr	r2, [pc, #580]	; (8006f00 <_dtoa_r+0x358>)
 8006cba:	4b92      	ldr	r3, [pc, #584]	; (8006f04 <_dtoa_r+0x35c>)
 8006cbc:	f7fa fc62 	bl	8001584 <__aeabi_dmul>
 8006cc0:	0002      	movs	r2, r0
 8006cc2:	000b      	movs	r3, r1
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	f7f9 fd36 	bl	8000738 <__aeabi_dadd>
 8006ccc:	0004      	movs	r4, r0
 8006cce:	000d      	movs	r5, r1
 8006cd0:	f7fb fa2e 	bl	8002130 <__aeabi_d2iz>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	0007      	movs	r7, r0
 8006cd8:	2300      	movs	r3, #0
 8006cda:	0020      	movs	r0, r4
 8006cdc:	0029      	movs	r1, r5
 8006cde:	f7f9 fbb1 	bl	8000444 <__aeabi_dcmplt>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d009      	beq.n	8006cfa <_dtoa_r+0x152>
 8006ce6:	0038      	movs	r0, r7
 8006ce8:	f7fb fa58 	bl	800219c <__aeabi_i2d>
 8006cec:	002b      	movs	r3, r5
 8006cee:	0022      	movs	r2, r4
 8006cf0:	f7f9 fba2 	bl	8000438 <__aeabi_dcmpeq>
 8006cf4:	4243      	negs	r3, r0
 8006cf6:	4158      	adcs	r0, r3
 8006cf8:	1a3f      	subs	r7, r7, r0
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9314      	str	r3, [sp, #80]	; 0x50
 8006cfe:	2f16      	cmp	r7, #22
 8006d00:	d80d      	bhi.n	8006d1e <_dtoa_r+0x176>
 8006d02:	4981      	ldr	r1, [pc, #516]	; (8006f08 <_dtoa_r+0x360>)
 8006d04:	00fb      	lsls	r3, r7, #3
 8006d06:	18c9      	adds	r1, r1, r3
 8006d08:	6808      	ldr	r0, [r1, #0]
 8006d0a:	6849      	ldr	r1, [r1, #4]
 8006d0c:	9a06      	ldr	r2, [sp, #24]
 8006d0e:	9b07      	ldr	r3, [sp, #28]
 8006d10:	f7f9 fbac 	bl	800046c <__aeabi_dcmpgt>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d046      	beq.n	8006da6 <_dtoa_r+0x1fe>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	3f01      	subs	r7, #1
 8006d1c:	9314      	str	r3, [sp, #80]	; 0x50
 8006d1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006d20:	1b9e      	subs	r6, r3, r6
 8006d22:	2300      	movs	r3, #0
 8006d24:	930a      	str	r3, [sp, #40]	; 0x28
 8006d26:	0033      	movs	r3, r6
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	d504      	bpl.n	8006d38 <_dtoa_r+0x190>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	1b9b      	subs	r3, r3, r6
 8006d32:	930a      	str	r3, [sp, #40]	; 0x28
 8006d34:	2300      	movs	r3, #0
 8006d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	db36      	blt.n	8006daa <_dtoa_r+0x202>
 8006d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3e:	9711      	str	r7, [sp, #68]	; 0x44
 8006d40:	19db      	adds	r3, r3, r7
 8006d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d44:	2300      	movs	r3, #0
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d4a:	2401      	movs	r4, #1
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d900      	bls.n	8006d52 <_dtoa_r+0x1aa>
 8006d50:	e084      	b.n	8006e5c <_dtoa_r+0x2b4>
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	dd02      	ble.n	8006d5c <_dtoa_r+0x1b4>
 8006d56:	2400      	movs	r4, #0
 8006d58:	3b04      	subs	r3, #4
 8006d5a:	9320      	str	r3, [sp, #128]	; 0x80
 8006d5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d5e:	1e98      	subs	r0, r3, #2
 8006d60:	2803      	cmp	r0, #3
 8006d62:	d900      	bls.n	8006d66 <_dtoa_r+0x1be>
 8006d64:	e084      	b.n	8006e70 <_dtoa_r+0x2c8>
 8006d66:	f7f9 f9d7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006d6a:	7775      	.short	0x7775
 8006d6c:	6a28      	.short	0x6a28
 8006d6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d72:	189e      	adds	r6, r3, r2
 8006d74:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <_dtoa_r+0x364>)
 8006d76:	18f2      	adds	r2, r6, r3
 8006d78:	2a20      	cmp	r2, #32
 8006d7a:	dd0f      	ble.n	8006d9c <_dtoa_r+0x1f4>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	409c      	lsls	r4, r3
 8006d82:	4b63      	ldr	r3, [pc, #396]	; (8006f10 <_dtoa_r+0x368>)
 8006d84:	9806      	ldr	r0, [sp, #24]
 8006d86:	18f3      	adds	r3, r6, r3
 8006d88:	40d8      	lsrs	r0, r3
 8006d8a:	4320      	orrs	r0, r4
 8006d8c:	f7fb fa40 	bl	8002210 <__aeabi_ui2d>
 8006d90:	2301      	movs	r3, #1
 8006d92:	4c60      	ldr	r4, [pc, #384]	; (8006f14 <_dtoa_r+0x36c>)
 8006d94:	3e01      	subs	r6, #1
 8006d96:	1909      	adds	r1, r1, r4
 8006d98:	9316      	str	r3, [sp, #88]	; 0x58
 8006d9a:	e77c      	b.n	8006c96 <_dtoa_r+0xee>
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	9806      	ldr	r0, [sp, #24]
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	4098      	lsls	r0, r3
 8006da4:	e7f2      	b.n	8006d8c <_dtoa_r+0x1e4>
 8006da6:	9014      	str	r0, [sp, #80]	; 0x50
 8006da8:	e7b9      	b.n	8006d1e <_dtoa_r+0x176>
 8006daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dac:	1bdb      	subs	r3, r3, r7
 8006dae:	930a      	str	r3, [sp, #40]	; 0x28
 8006db0:	427b      	negs	r3, r7
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	2300      	movs	r3, #0
 8006db6:	9311      	str	r3, [sp, #68]	; 0x44
 8006db8:	e7c6      	b.n	8006d48 <_dtoa_r+0x1a0>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8006dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dd59      	ble.n	8006e78 <_dtoa_r+0x2d0>
 8006dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8006dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc8:	9a02      	ldr	r2, [sp, #8]
 8006dca:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8006dcc:	2200      	movs	r2, #0
 8006dce:	606a      	str	r2, [r5, #4]
 8006dd0:	3204      	adds	r2, #4
 8006dd2:	0010      	movs	r0, r2
 8006dd4:	3014      	adds	r0, #20
 8006dd6:	6869      	ldr	r1, [r5, #4]
 8006dd8:	4298      	cmp	r0, r3
 8006dda:	d952      	bls.n	8006e82 <_dtoa_r+0x2da>
 8006ddc:	9802      	ldr	r0, [sp, #8]
 8006dde:	f000 fced 	bl	80077bc <_Balloc>
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	6028      	str	r0, [r5, #0]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	2b0e      	cmp	r3, #14
 8006df0:	d900      	bls.n	8006df4 <_dtoa_r+0x24c>
 8006df2:	e10a      	b.n	800700a <_dtoa_r+0x462>
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d100      	bne.n	8006dfa <_dtoa_r+0x252>
 8006df8:	e107      	b.n	800700a <_dtoa_r+0x462>
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	9c07      	ldr	r4, [sp, #28]
 8006dfe:	9312      	str	r3, [sp, #72]	; 0x48
 8006e00:	9413      	str	r4, [sp, #76]	; 0x4c
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	dc00      	bgt.n	8006e08 <_dtoa_r+0x260>
 8006e06:	e089      	b.n	8006f1c <_dtoa_r+0x374>
 8006e08:	210f      	movs	r1, #15
 8006e0a:	003a      	movs	r2, r7
 8006e0c:	4b3e      	ldr	r3, [pc, #248]	; (8006f08 <_dtoa_r+0x360>)
 8006e0e:	400a      	ands	r2, r1
 8006e10:	00d2      	lsls	r2, r2, #3
 8006e12:	189b      	adds	r3, r3, r2
 8006e14:	681d      	ldr	r5, [r3, #0]
 8006e16:	685e      	ldr	r6, [r3, #4]
 8006e18:	2302      	movs	r3, #2
 8006e1a:	113c      	asrs	r4, r7, #4
 8006e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e1e:	06e3      	lsls	r3, r4, #27
 8006e20:	d50b      	bpl.n	8006e3a <_dtoa_r+0x292>
 8006e22:	4b3d      	ldr	r3, [pc, #244]	; (8006f18 <_dtoa_r+0x370>)
 8006e24:	400c      	ands	r4, r1
 8006e26:	6a1a      	ldr	r2, [r3, #32]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e2e:	f7f9 ff9f 	bl	8000d70 <__aeabi_ddiv>
 8006e32:	2303      	movs	r3, #3
 8006e34:	9006      	str	r0, [sp, #24]
 8006e36:	9107      	str	r1, [sp, #28]
 8006e38:	930e      	str	r3, [sp, #56]	; 0x38
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e03a      	b.n	8006eb4 <_dtoa_r+0x30c>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	930d      	str	r3, [sp, #52]	; 0x34
 8006e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	930c      	str	r3, [sp, #48]	; 0x30
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dcbb      	bgt.n	8006dc8 <_dtoa_r+0x220>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7b9      	b.n	8006dc8 <_dtoa_r+0x220>
 8006e54:	2300      	movs	r3, #0
 8006e56:	e7b1      	b.n	8006dbc <_dtoa_r+0x214>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e7f1      	b.n	8006e40 <_dtoa_r+0x298>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	940d      	str	r4, [sp, #52]	; 0x34
 8006e60:	9320      	str	r3, [sp, #128]	; 0x80
 8006e62:	3b01      	subs	r3, #1
 8006e64:	2200      	movs	r2, #0
 8006e66:	930c      	str	r3, [sp, #48]	; 0x30
 8006e68:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6a:	3313      	adds	r3, #19
 8006e6c:	9221      	str	r2, [sp, #132]	; 0x84
 8006e6e:	e7ab      	b.n	8006dc8 <_dtoa_r+0x220>
 8006e70:	2301      	movs	r3, #1
 8006e72:	930d      	str	r3, [sp, #52]	; 0x34
 8006e74:	3b02      	subs	r3, #2
 8006e76:	e7f5      	b.n	8006e64 <_dtoa_r+0x2bc>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7e:	001a      	movs	r2, r3
 8006e80:	e7f4      	b.n	8006e6c <_dtoa_r+0x2c4>
 8006e82:	3101      	adds	r1, #1
 8006e84:	6069      	str	r1, [r5, #4]
 8006e86:	0052      	lsls	r2, r2, #1
 8006e88:	e7a3      	b.n	8006dd2 <_dtoa_r+0x22a>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	421c      	tst	r4, r3
 8006e8e:	d00e      	beq.n	8006eae <_dtoa_r+0x306>
 8006e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e92:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <_dtoa_r+0x370>)
 8006e94:	3301      	adds	r3, #1
 8006e96:	930e      	str	r3, [sp, #56]	; 0x38
 8006e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e9a:	0028      	movs	r0, r5
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	189b      	adds	r3, r3, r2
 8006ea0:	0031      	movs	r1, r6
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f7fa fb6d 	bl	8001584 <__aeabi_dmul>
 8006eaa:	0005      	movs	r5, r0
 8006eac:	000e      	movs	r6, r1
 8006eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb0:	1064      	asrs	r4, r4, #1
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	9310      	str	r3, [sp, #64]	; 0x40
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	d1e7      	bne.n	8006e8a <_dtoa_r+0x2e2>
 8006eba:	9806      	ldr	r0, [sp, #24]
 8006ebc:	9907      	ldr	r1, [sp, #28]
 8006ebe:	002a      	movs	r2, r5
 8006ec0:	0033      	movs	r3, r6
 8006ec2:	f7f9 ff55 	bl	8000d70 <__aeabi_ddiv>
 8006ec6:	9006      	str	r0, [sp, #24]
 8006ec8:	9107      	str	r1, [sp, #28]
 8006eca:	e042      	b.n	8006f52 <_dtoa_r+0x3aa>
 8006ecc:	7ff00000 	.word	0x7ff00000
 8006ed0:	0000270f 	.word	0x0000270f
 8006ed4:	080086c1 	.word	0x080086c1
 8006ed8:	080086c4 	.word	0x080086c4
 8006edc:	08008694 	.word	0x08008694
 8006ee0:	08008695 	.word	0x08008695
 8006ee4:	3ff00000 	.word	0x3ff00000
 8006ee8:	fffffc01 	.word	0xfffffc01
 8006eec:	3ff80000 	.word	0x3ff80000
 8006ef0:	636f4361 	.word	0x636f4361
 8006ef4:	3fd287a7 	.word	0x3fd287a7
 8006ef8:	8b60c8b3 	.word	0x8b60c8b3
 8006efc:	3fc68a28 	.word	0x3fc68a28
 8006f00:	509f79fb 	.word	0x509f79fb
 8006f04:	3fd34413 	.word	0x3fd34413
 8006f08:	080086f0 	.word	0x080086f0
 8006f0c:	00000432 	.word	0x00000432
 8006f10:	00000412 	.word	0x00000412
 8006f14:	fe100000 	.word	0xfe100000
 8006f18:	080086c8 	.word	0x080086c8
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006f20:	2f00      	cmp	r7, #0
 8006f22:	d016      	beq.n	8006f52 <_dtoa_r+0x3aa>
 8006f24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006f26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f28:	427c      	negs	r4, r7
 8006f2a:	330d      	adds	r3, #13
 8006f2c:	4023      	ands	r3, r4
 8006f2e:	4ace      	ldr	r2, [pc, #824]	; (8007268 <_dtoa_r+0x6c0>)
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	18d3      	adds	r3, r2, r3
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f7fa fb24 	bl	8001584 <__aeabi_dmul>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2601      	movs	r6, #1
 8006f40:	001d      	movs	r5, r3
 8006f42:	9006      	str	r0, [sp, #24]
 8006f44:	9107      	str	r1, [sp, #28]
 8006f46:	1124      	asrs	r4, r4, #4
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	d000      	beq.n	8006f4e <_dtoa_r+0x3a6>
 8006f4c:	e08c      	b.n	8007068 <_dtoa_r+0x4c0>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1b9      	bne.n	8006ec6 <_dtoa_r+0x31e>
 8006f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d100      	bne.n	8006f5a <_dtoa_r+0x3b2>
 8006f58:	e096      	b.n	8007088 <_dtoa_r+0x4e0>
 8006f5a:	9c06      	ldr	r4, [sp, #24]
 8006f5c:	9d07      	ldr	r5, [sp, #28]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4bc2      	ldr	r3, [pc, #776]	; (800726c <_dtoa_r+0x6c4>)
 8006f62:	0020      	movs	r0, r4
 8006f64:	0029      	movs	r1, r5
 8006f66:	f7f9 fa6d 	bl	8000444 <__aeabi_dcmplt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d100      	bne.n	8006f70 <_dtoa_r+0x3c8>
 8006f6e:	e08b      	b.n	8007088 <_dtoa_r+0x4e0>
 8006f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d100      	bne.n	8006f78 <_dtoa_r+0x3d0>
 8006f76:	e087      	b.n	8007088 <_dtoa_r+0x4e0>
 8006f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dd41      	ble.n	8007002 <_dtoa_r+0x45a>
 8006f7e:	4bbc      	ldr	r3, [pc, #752]	; (8007270 <_dtoa_r+0x6c8>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	0020      	movs	r0, r4
 8006f84:	0029      	movs	r1, r5
 8006f86:	f7fa fafd 	bl	8001584 <__aeabi_dmul>
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8c:	9006      	str	r0, [sp, #24]
 8006f8e:	9107      	str	r1, [sp, #28]
 8006f90:	3301      	adds	r3, #1
 8006f92:	930e      	str	r3, [sp, #56]	; 0x38
 8006f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f96:	1e7e      	subs	r6, r7, #1
 8006f98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f9a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f9c:	f7fb f8fe 	bl	800219c <__aeabi_i2d>
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	9b07      	ldr	r3, [sp, #28]
 8006fa4:	f7fa faee 	bl	8001584 <__aeabi_dmul>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4bb2      	ldr	r3, [pc, #712]	; (8007274 <_dtoa_r+0x6cc>)
 8006fac:	f7f9 fbc4 	bl	8000738 <__aeabi_dadd>
 8006fb0:	4ab1      	ldr	r2, [pc, #708]	; (8007278 <_dtoa_r+0x6d0>)
 8006fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8006fb4:	910f      	str	r1, [sp, #60]	; 0x3c
 8006fb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006fb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fba:	4694      	mov	ip, r2
 8006fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fbe:	4463      	add	r3, ip
 8006fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8006fc2:	001d      	movs	r5, r3
 8006fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d161      	bne.n	800708e <_dtoa_r+0x4e6>
 8006fca:	9806      	ldr	r0, [sp, #24]
 8006fcc:	9907      	ldr	r1, [sp, #28]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4baa      	ldr	r3, [pc, #680]	; (800727c <_dtoa_r+0x6d4>)
 8006fd2:	f7fa fd49 	bl	8001a68 <__aeabi_dsub>
 8006fd6:	0022      	movs	r2, r4
 8006fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	9107      	str	r1, [sp, #28]
 8006fde:	f7f9 fa45 	bl	800046c <__aeabi_dcmpgt>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d000      	beq.n	8006fe8 <_dtoa_r+0x440>
 8006fe6:	e2a8      	b.n	800753a <_dtoa_r+0x992>
 8006fe8:	48a5      	ldr	r0, [pc, #660]	; (8007280 <_dtoa_r+0x6d8>)
 8006fea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fec:	4684      	mov	ip, r0
 8006fee:	4461      	add	r1, ip
 8006ff0:	000b      	movs	r3, r1
 8006ff2:	9806      	ldr	r0, [sp, #24]
 8006ff4:	9907      	ldr	r1, [sp, #28]
 8006ff6:	0022      	movs	r2, r4
 8006ff8:	f7f9 fa24 	bl	8000444 <__aeabi_dcmplt>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d000      	beq.n	8007002 <_dtoa_r+0x45a>
 8007000:	e295      	b.n	800752e <_dtoa_r+0x986>
 8007002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007004:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007006:	9306      	str	r3, [sp, #24]
 8007008:	9407      	str	r4, [sp, #28]
 800700a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800700c:	2b00      	cmp	r3, #0
 800700e:	da00      	bge.n	8007012 <_dtoa_r+0x46a>
 8007010:	e15c      	b.n	80072cc <_dtoa_r+0x724>
 8007012:	2f0e      	cmp	r7, #14
 8007014:	dd00      	ble.n	8007018 <_dtoa_r+0x470>
 8007016:	e159      	b.n	80072cc <_dtoa_r+0x724>
 8007018:	4b93      	ldr	r3, [pc, #588]	; (8007268 <_dtoa_r+0x6c0>)
 800701a:	00fa      	lsls	r2, r7, #3
 800701c:	189b      	adds	r3, r3, r2
 800701e:	685c      	ldr	r4, [r3, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	9304      	str	r3, [sp, #16]
 8007024:	9405      	str	r4, [sp, #20]
 8007026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007028:	2b00      	cmp	r3, #0
 800702a:	db00      	blt.n	800702e <_dtoa_r+0x486>
 800702c:	e0d8      	b.n	80071e0 <_dtoa_r+0x638>
 800702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	dd00      	ble.n	8007036 <_dtoa_r+0x48e>
 8007034:	e0d4      	b.n	80071e0 <_dtoa_r+0x638>
 8007036:	d000      	beq.n	800703a <_dtoa_r+0x492>
 8007038:	e27d      	b.n	8007536 <_dtoa_r+0x98e>
 800703a:	9804      	ldr	r0, [sp, #16]
 800703c:	9905      	ldr	r1, [sp, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	4b8e      	ldr	r3, [pc, #568]	; (800727c <_dtoa_r+0x6d4>)
 8007042:	f7fa fa9f 	bl	8001584 <__aeabi_dmul>
 8007046:	9a06      	ldr	r2, [sp, #24]
 8007048:	9b07      	ldr	r3, [sp, #28]
 800704a:	f7f9 fa19 	bl	8000480 <__aeabi_dcmpge>
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	001e      	movs	r6, r3
 8007054:	2800      	cmp	r0, #0
 8007056:	d000      	beq.n	800705a <_dtoa_r+0x4b2>
 8007058:	e24f      	b.n	80074fa <_dtoa_r+0x952>
 800705a:	9b08      	ldr	r3, [sp, #32]
 800705c:	9a08      	ldr	r2, [sp, #32]
 800705e:	1c5d      	adds	r5, r3, #1
 8007060:	2331      	movs	r3, #49	; 0x31
 8007062:	3701      	adds	r7, #1
 8007064:	7013      	strb	r3, [r2, #0]
 8007066:	e24b      	b.n	8007500 <_dtoa_r+0x958>
 8007068:	4234      	tst	r4, r6
 800706a:	d00a      	beq.n	8007082 <_dtoa_r+0x4da>
 800706c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800706e:	4a85      	ldr	r2, [pc, #532]	; (8007284 <_dtoa_r+0x6dc>)
 8007070:	3301      	adds	r3, #1
 8007072:	930e      	str	r3, [sp, #56]	; 0x38
 8007074:	00eb      	lsls	r3, r5, #3
 8007076:	189b      	adds	r3, r3, r2
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f7fa fa82 	bl	8001584 <__aeabi_dmul>
 8007080:	0033      	movs	r3, r6
 8007082:	1064      	asrs	r4, r4, #1
 8007084:	3501      	adds	r5, #1
 8007086:	e75f      	b.n	8006f48 <_dtoa_r+0x3a0>
 8007088:	003e      	movs	r6, r7
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	e784      	b.n	8006f98 <_dtoa_r+0x3f0>
 800708e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007090:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007092:	1e5a      	subs	r2, r3, #1
 8007094:	4b74      	ldr	r3, [pc, #464]	; (8007268 <_dtoa_r+0x6c0>)
 8007096:	00d2      	lsls	r2, r2, #3
 8007098:	189b      	adds	r3, r3, r2
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d049      	beq.n	8007136 <_dtoa_r+0x58e>
 80070a2:	2000      	movs	r0, #0
 80070a4:	4978      	ldr	r1, [pc, #480]	; (8007288 <_dtoa_r+0x6e0>)
 80070a6:	f7f9 fe63 	bl	8000d70 <__aeabi_ddiv>
 80070aa:	002b      	movs	r3, r5
 80070ac:	0022      	movs	r2, r4
 80070ae:	f7fa fcdb 	bl	8001a68 <__aeabi_dsub>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	900e      	str	r0, [sp, #56]	; 0x38
 80070b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80070b8:	9315      	str	r3, [sp, #84]	; 0x54
 80070ba:	9806      	ldr	r0, [sp, #24]
 80070bc:	9907      	ldr	r1, [sp, #28]
 80070be:	f7fb f837 	bl	8002130 <__aeabi_d2iz>
 80070c2:	0004      	movs	r4, r0
 80070c4:	f7fb f86a 	bl	800219c <__aeabi_i2d>
 80070c8:	0002      	movs	r2, r0
 80070ca:	000b      	movs	r3, r1
 80070cc:	9806      	ldr	r0, [sp, #24]
 80070ce:	9907      	ldr	r1, [sp, #28]
 80070d0:	f7fa fcca 	bl	8001a68 <__aeabi_dsub>
 80070d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d6:	3430      	adds	r4, #48	; 0x30
 80070d8:	1c5d      	adds	r5, r3, #1
 80070da:	701c      	strb	r4, [r3, #0]
 80070dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070e0:	9006      	str	r0, [sp, #24]
 80070e2:	9107      	str	r1, [sp, #28]
 80070e4:	f7f9 f9ae 	bl	8000444 <__aeabi_dcmplt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d16c      	bne.n	80071c6 <_dtoa_r+0x61e>
 80070ec:	9a06      	ldr	r2, [sp, #24]
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	2000      	movs	r0, #0
 80070f2:	495e      	ldr	r1, [pc, #376]	; (800726c <_dtoa_r+0x6c4>)
 80070f4:	f7fa fcb8 	bl	8001a68 <__aeabi_dsub>
 80070f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070fc:	f7f9 f9a2 	bl	8000444 <__aeabi_dcmplt>
 8007100:	2800      	cmp	r0, #0
 8007102:	d000      	beq.n	8007106 <_dtoa_r+0x55e>
 8007104:	e0c3      	b.n	800728e <_dtoa_r+0x6e6>
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800710a:	1aeb      	subs	r3, r5, r3
 800710c:	429a      	cmp	r2, r3
 800710e:	dc00      	bgt.n	8007112 <_dtoa_r+0x56a>
 8007110:	e777      	b.n	8007002 <_dtoa_r+0x45a>
 8007112:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007114:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007116:	2200      	movs	r2, #0
 8007118:	4b55      	ldr	r3, [pc, #340]	; (8007270 <_dtoa_r+0x6c8>)
 800711a:	f7fa fa33 	bl	8001584 <__aeabi_dmul>
 800711e:	2200      	movs	r2, #0
 8007120:	900e      	str	r0, [sp, #56]	; 0x38
 8007122:	910f      	str	r1, [sp, #60]	; 0x3c
 8007124:	9806      	ldr	r0, [sp, #24]
 8007126:	9907      	ldr	r1, [sp, #28]
 8007128:	4b51      	ldr	r3, [pc, #324]	; (8007270 <_dtoa_r+0x6c8>)
 800712a:	f7fa fa2b 	bl	8001584 <__aeabi_dmul>
 800712e:	9515      	str	r5, [sp, #84]	; 0x54
 8007130:	9006      	str	r0, [sp, #24]
 8007132:	9107      	str	r1, [sp, #28]
 8007134:	e7c1      	b.n	80070ba <_dtoa_r+0x512>
 8007136:	0020      	movs	r0, r4
 8007138:	0029      	movs	r1, r5
 800713a:	f7fa fa23 	bl	8001584 <__aeabi_dmul>
 800713e:	9c08      	ldr	r4, [sp, #32]
 8007140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007142:	0023      	movs	r3, r4
 8007144:	4694      	mov	ip, r2
 8007146:	900e      	str	r0, [sp, #56]	; 0x38
 8007148:	910f      	str	r1, [sp, #60]	; 0x3c
 800714a:	4463      	add	r3, ip
 800714c:	9315      	str	r3, [sp, #84]	; 0x54
 800714e:	9806      	ldr	r0, [sp, #24]
 8007150:	9907      	ldr	r1, [sp, #28]
 8007152:	f7fa ffed 	bl	8002130 <__aeabi_d2iz>
 8007156:	0005      	movs	r5, r0
 8007158:	f7fb f820 	bl	800219c <__aeabi_i2d>
 800715c:	000b      	movs	r3, r1
 800715e:	0002      	movs	r2, r0
 8007160:	9806      	ldr	r0, [sp, #24]
 8007162:	9907      	ldr	r1, [sp, #28]
 8007164:	f7fa fc80 	bl	8001a68 <__aeabi_dsub>
 8007168:	3530      	adds	r5, #48	; 0x30
 800716a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800716c:	7025      	strb	r5, [r4, #0]
 800716e:	3401      	adds	r4, #1
 8007170:	9006      	str	r0, [sp, #24]
 8007172:	9107      	str	r1, [sp, #28]
 8007174:	42a3      	cmp	r3, r4
 8007176:	d12a      	bne.n	80071ce <_dtoa_r+0x626>
 8007178:	980e      	ldr	r0, [sp, #56]	; 0x38
 800717a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800717c:	9a08      	ldr	r2, [sp, #32]
 800717e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007180:	4694      	mov	ip, r2
 8007182:	4463      	add	r3, ip
 8007184:	2200      	movs	r2, #0
 8007186:	001d      	movs	r5, r3
 8007188:	4b3f      	ldr	r3, [pc, #252]	; (8007288 <_dtoa_r+0x6e0>)
 800718a:	f7f9 fad5 	bl	8000738 <__aeabi_dadd>
 800718e:	0002      	movs	r2, r0
 8007190:	000b      	movs	r3, r1
 8007192:	9806      	ldr	r0, [sp, #24]
 8007194:	9907      	ldr	r1, [sp, #28]
 8007196:	f7f9 f969 	bl	800046c <__aeabi_dcmpgt>
 800719a:	2800      	cmp	r0, #0
 800719c:	d000      	beq.n	80071a0 <_dtoa_r+0x5f8>
 800719e:	e076      	b.n	800728e <_dtoa_r+0x6e6>
 80071a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a4:	2000      	movs	r0, #0
 80071a6:	4938      	ldr	r1, [pc, #224]	; (8007288 <_dtoa_r+0x6e0>)
 80071a8:	f7fa fc5e 	bl	8001a68 <__aeabi_dsub>
 80071ac:	0002      	movs	r2, r0
 80071ae:	000b      	movs	r3, r1
 80071b0:	9806      	ldr	r0, [sp, #24]
 80071b2:	9907      	ldr	r1, [sp, #28]
 80071b4:	f7f9 f946 	bl	8000444 <__aeabi_dcmplt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d100      	bne.n	80071be <_dtoa_r+0x616>
 80071bc:	e721      	b.n	8007002 <_dtoa_r+0x45a>
 80071be:	1e6b      	subs	r3, r5, #1
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	2a30      	cmp	r2, #48	; 0x30
 80071c4:	d001      	beq.n	80071ca <_dtoa_r+0x622>
 80071c6:	0037      	movs	r7, r6
 80071c8:	e03f      	b.n	800724a <_dtoa_r+0x6a2>
 80071ca:	001d      	movs	r5, r3
 80071cc:	e7f7      	b.n	80071be <_dtoa_r+0x616>
 80071ce:	9806      	ldr	r0, [sp, #24]
 80071d0:	9907      	ldr	r1, [sp, #28]
 80071d2:	2200      	movs	r2, #0
 80071d4:	4b26      	ldr	r3, [pc, #152]	; (8007270 <_dtoa_r+0x6c8>)
 80071d6:	f7fa f9d5 	bl	8001584 <__aeabi_dmul>
 80071da:	9006      	str	r0, [sp, #24]
 80071dc:	9107      	str	r1, [sp, #28]
 80071de:	e7b6      	b.n	800714e <_dtoa_r+0x5a6>
 80071e0:	9e08      	ldr	r6, [sp, #32]
 80071e2:	9a04      	ldr	r2, [sp, #16]
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	9806      	ldr	r0, [sp, #24]
 80071e8:	9907      	ldr	r1, [sp, #28]
 80071ea:	f7f9 fdc1 	bl	8000d70 <__aeabi_ddiv>
 80071ee:	f7fa ff9f 	bl	8002130 <__aeabi_d2iz>
 80071f2:	0004      	movs	r4, r0
 80071f4:	f7fa ffd2 	bl	800219c <__aeabi_i2d>
 80071f8:	9a04      	ldr	r2, [sp, #16]
 80071fa:	9b05      	ldr	r3, [sp, #20]
 80071fc:	f7fa f9c2 	bl	8001584 <__aeabi_dmul>
 8007200:	0002      	movs	r2, r0
 8007202:	000b      	movs	r3, r1
 8007204:	9806      	ldr	r0, [sp, #24]
 8007206:	9907      	ldr	r1, [sp, #28]
 8007208:	f7fa fc2e 	bl	8001a68 <__aeabi_dsub>
 800720c:	0023      	movs	r3, r4
 800720e:	3330      	adds	r3, #48	; 0x30
 8007210:	7033      	strb	r3, [r6, #0]
 8007212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007214:	9b08      	ldr	r3, [sp, #32]
 8007216:	1c75      	adds	r5, r6, #1
 8007218:	1aeb      	subs	r3, r5, r3
 800721a:	429a      	cmp	r2, r3
 800721c:	d148      	bne.n	80072b0 <_dtoa_r+0x708>
 800721e:	0002      	movs	r2, r0
 8007220:	000b      	movs	r3, r1
 8007222:	f7f9 fa89 	bl	8000738 <__aeabi_dadd>
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	9006      	str	r0, [sp, #24]
 800722c:	9107      	str	r1, [sp, #28]
 800722e:	f7f9 f91d 	bl	800046c <__aeabi_dcmpgt>
 8007232:	2800      	cmp	r0, #0
 8007234:	d12a      	bne.n	800728c <_dtoa_r+0x6e4>
 8007236:	9a04      	ldr	r2, [sp, #16]
 8007238:	9b05      	ldr	r3, [sp, #20]
 800723a:	9806      	ldr	r0, [sp, #24]
 800723c:	9907      	ldr	r1, [sp, #28]
 800723e:	f7f9 f8fb 	bl	8000438 <__aeabi_dcmpeq>
 8007242:	2800      	cmp	r0, #0
 8007244:	d001      	beq.n	800724a <_dtoa_r+0x6a2>
 8007246:	07e3      	lsls	r3, r4, #31
 8007248:	d420      	bmi.n	800728c <_dtoa_r+0x6e4>
 800724a:	9903      	ldr	r1, [sp, #12]
 800724c:	9802      	ldr	r0, [sp, #8]
 800724e:	f000 faed 	bl	800782c <_Bfree>
 8007252:	2300      	movs	r3, #0
 8007254:	702b      	strb	r3, [r5, #0]
 8007256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007258:	3701      	adds	r7, #1
 800725a:	601f      	str	r7, [r3, #0]
 800725c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800725e:	2b00      	cmp	r3, #0
 8007260:	d100      	bne.n	8007264 <_dtoa_r+0x6bc>
 8007262:	e4e6      	b.n	8006c32 <_dtoa_r+0x8a>
 8007264:	601d      	str	r5, [r3, #0]
 8007266:	e4e4      	b.n	8006c32 <_dtoa_r+0x8a>
 8007268:	080086f0 	.word	0x080086f0
 800726c:	3ff00000 	.word	0x3ff00000
 8007270:	40240000 	.word	0x40240000
 8007274:	401c0000 	.word	0x401c0000
 8007278:	fcc00000 	.word	0xfcc00000
 800727c:	40140000 	.word	0x40140000
 8007280:	7cc00000 	.word	0x7cc00000
 8007284:	080086c8 	.word	0x080086c8
 8007288:	3fe00000 	.word	0x3fe00000
 800728c:	003e      	movs	r6, r7
 800728e:	1e6b      	subs	r3, r5, #1
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	2a39      	cmp	r2, #57	; 0x39
 8007294:	d106      	bne.n	80072a4 <_dtoa_r+0x6fc>
 8007296:	9a08      	ldr	r2, [sp, #32]
 8007298:	429a      	cmp	r2, r3
 800729a:	d107      	bne.n	80072ac <_dtoa_r+0x704>
 800729c:	2330      	movs	r3, #48	; 0x30
 800729e:	7013      	strb	r3, [r2, #0]
 80072a0:	0013      	movs	r3, r2
 80072a2:	3601      	adds	r6, #1
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	3201      	adds	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e78c      	b.n	80071c6 <_dtoa_r+0x61e>
 80072ac:	001d      	movs	r5, r3
 80072ae:	e7ee      	b.n	800728e <_dtoa_r+0x6e6>
 80072b0:	2200      	movs	r2, #0
 80072b2:	4ba4      	ldr	r3, [pc, #656]	; (8007544 <_dtoa_r+0x99c>)
 80072b4:	f7fa f966 	bl	8001584 <__aeabi_dmul>
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	9006      	str	r0, [sp, #24]
 80072be:	9107      	str	r1, [sp, #28]
 80072c0:	002e      	movs	r6, r5
 80072c2:	f7f9 f8b9 	bl	8000438 <__aeabi_dcmpeq>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d08b      	beq.n	80071e2 <_dtoa_r+0x63a>
 80072ca:	e7be      	b.n	800724a <_dtoa_r+0x6a2>
 80072cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d100      	bne.n	80072d4 <_dtoa_r+0x72c>
 80072d2:	e0da      	b.n	800748a <_dtoa_r+0x8e2>
 80072d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072d6:	2a01      	cmp	r2, #1
 80072d8:	dd00      	ble.n	80072dc <_dtoa_r+0x734>
 80072da:	e0bd      	b.n	8007458 <_dtoa_r+0x8b0>
 80072dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d100      	bne.n	80072e4 <_dtoa_r+0x73c>
 80072e2:	e0b5      	b.n	8007450 <_dtoa_r+0x8a8>
 80072e4:	4a98      	ldr	r2, [pc, #608]	; (8007548 <_dtoa_r+0x9a0>)
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	9d04      	ldr	r5, [sp, #16]
 80072ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ee:	2101      	movs	r1, #1
 80072f0:	18d2      	adds	r2, r2, r3
 80072f2:	920a      	str	r2, [sp, #40]	; 0x28
 80072f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072f6:	9802      	ldr	r0, [sp, #8]
 80072f8:	18d3      	adds	r3, r2, r3
 80072fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80072fc:	f000 fb36 	bl	800796c <__i2b>
 8007300:	0006      	movs	r6, r0
 8007302:	2c00      	cmp	r4, #0
 8007304:	dd0e      	ble.n	8007324 <_dtoa_r+0x77c>
 8007306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	dd0b      	ble.n	8007324 <_dtoa_r+0x77c>
 800730c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800730e:	0023      	movs	r3, r4
 8007310:	4294      	cmp	r4, r2
 8007312:	dd00      	ble.n	8007316 <_dtoa_r+0x76e>
 8007314:	0013      	movs	r3, r2
 8007316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007318:	1ae4      	subs	r4, r4, r3
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	920a      	str	r2, [sp, #40]	; 0x28
 800731e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	930b      	str	r3, [sp, #44]	; 0x2c
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01f      	beq.n	800736a <_dtoa_r+0x7c2>
 800732a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800732c:	2b00      	cmp	r3, #0
 800732e:	d100      	bne.n	8007332 <_dtoa_r+0x78a>
 8007330:	e0af      	b.n	8007492 <_dtoa_r+0x8ea>
 8007332:	2d00      	cmp	r5, #0
 8007334:	d011      	beq.n	800735a <_dtoa_r+0x7b2>
 8007336:	0031      	movs	r1, r6
 8007338:	002a      	movs	r2, r5
 800733a:	9802      	ldr	r0, [sp, #8]
 800733c:	f000 fbae 	bl	8007a9c <__pow5mult>
 8007340:	9a03      	ldr	r2, [sp, #12]
 8007342:	0001      	movs	r1, r0
 8007344:	0006      	movs	r6, r0
 8007346:	9802      	ldr	r0, [sp, #8]
 8007348:	f000 fb19 	bl	800797e <__multiply>
 800734c:	9903      	ldr	r1, [sp, #12]
 800734e:	9010      	str	r0, [sp, #64]	; 0x40
 8007350:	9802      	ldr	r0, [sp, #8]
 8007352:	f000 fa6b 	bl	800782c <_Bfree>
 8007356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	1b5a      	subs	r2, r3, r5
 800735e:	d004      	beq.n	800736a <_dtoa_r+0x7c2>
 8007360:	9903      	ldr	r1, [sp, #12]
 8007362:	9802      	ldr	r0, [sp, #8]
 8007364:	f000 fb9a 	bl	8007a9c <__pow5mult>
 8007368:	9003      	str	r0, [sp, #12]
 800736a:	2101      	movs	r1, #1
 800736c:	9802      	ldr	r0, [sp, #8]
 800736e:	f000 fafd 	bl	800796c <__i2b>
 8007372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007374:	9004      	str	r0, [sp, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d100      	bne.n	800737c <_dtoa_r+0x7d4>
 800737a:	e1e3      	b.n	8007744 <_dtoa_r+0xb9c>
 800737c:	001a      	movs	r2, r3
 800737e:	0001      	movs	r1, r0
 8007380:	9802      	ldr	r0, [sp, #8]
 8007382:	f000 fb8b 	bl	8007a9c <__pow5mult>
 8007386:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007388:	9004      	str	r0, [sp, #16]
 800738a:	2b01      	cmp	r3, #1
 800738c:	dd00      	ble.n	8007390 <_dtoa_r+0x7e8>
 800738e:	e082      	b.n	8007496 <_dtoa_r+0x8ee>
 8007390:	2500      	movs	r5, #0
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	42ab      	cmp	r3, r5
 8007396:	d10e      	bne.n	80073b6 <_dtoa_r+0x80e>
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	031b      	lsls	r3, r3, #12
 800739c:	42ab      	cmp	r3, r5
 800739e:	d10a      	bne.n	80073b6 <_dtoa_r+0x80e>
 80073a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	4213      	tst	r3, r2
 80073a6:	d006      	beq.n	80073b6 <_dtoa_r+0x80e>
 80073a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073aa:	3501      	adds	r5, #1
 80073ac:	3301      	adds	r3, #1
 80073ae:	930a      	str	r3, [sp, #40]	; 0x28
 80073b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b2:	3301      	adds	r3, #1
 80073b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073b8:	2001      	movs	r0, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d16c      	bne.n	8007498 <_dtoa_r+0x8f0>
 80073be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c0:	1818      	adds	r0, r3, r0
 80073c2:	231f      	movs	r3, #31
 80073c4:	4018      	ands	r0, r3
 80073c6:	d07e      	beq.n	80074c6 <_dtoa_r+0x91e>
 80073c8:	3301      	adds	r3, #1
 80073ca:	1a1b      	subs	r3, r3, r0
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	dd70      	ble.n	80074b2 <_dtoa_r+0x90a>
 80073d0:	231c      	movs	r3, #28
 80073d2:	1a18      	subs	r0, r3, r0
 80073d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d6:	1824      	adds	r4, r4, r0
 80073d8:	181b      	adds	r3, r3, r0
 80073da:	930a      	str	r3, [sp, #40]	; 0x28
 80073dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073de:	181b      	adds	r3, r3, r0
 80073e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd05      	ble.n	80073f4 <_dtoa_r+0x84c>
 80073e8:	001a      	movs	r2, r3
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	9802      	ldr	r0, [sp, #8]
 80073ee:	f000 fba7 	bl	8007b40 <__lshift>
 80073f2:	9003      	str	r0, [sp, #12]
 80073f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dd05      	ble.n	8007406 <_dtoa_r+0x85e>
 80073fa:	001a      	movs	r2, r3
 80073fc:	9904      	ldr	r1, [sp, #16]
 80073fe:	9802      	ldr	r0, [sp, #8]
 8007400:	f000 fb9e 	bl	8007b40 <__lshift>
 8007404:	9004      	str	r0, [sp, #16]
 8007406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05e      	beq.n	80074ca <_dtoa_r+0x922>
 800740c:	9904      	ldr	r1, [sp, #16]
 800740e:	9803      	ldr	r0, [sp, #12]
 8007410:	f000 fbe8 	bl	8007be4 <__mcmp>
 8007414:	2800      	cmp	r0, #0
 8007416:	da58      	bge.n	80074ca <_dtoa_r+0x922>
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	9903      	ldr	r1, [sp, #12]
 800741e:	9802      	ldr	r0, [sp, #8]
 8007420:	f000 fa1d 	bl	800785e <__multadd>
 8007424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007426:	3f01      	subs	r7, #1
 8007428:	9003      	str	r0, [sp, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d100      	bne.n	8007430 <_dtoa_r+0x888>
 800742e:	e190      	b.n	8007752 <_dtoa_r+0xbaa>
 8007430:	2300      	movs	r3, #0
 8007432:	0031      	movs	r1, r6
 8007434:	220a      	movs	r2, #10
 8007436:	9802      	ldr	r0, [sp, #8]
 8007438:	f000 fa11 	bl	800785e <__multadd>
 800743c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800743e:	0006      	movs	r6, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	dd00      	ble.n	8007446 <_dtoa_r+0x89e>
 8007444:	e088      	b.n	8007558 <_dtoa_r+0x9b0>
 8007446:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007448:	2b02      	cmp	r3, #2
 800744a:	dc00      	bgt.n	800744e <_dtoa_r+0x8a6>
 800744c:	e084      	b.n	8007558 <_dtoa_r+0x9b0>
 800744e:	e044      	b.n	80074da <_dtoa_r+0x932>
 8007450:	2336      	movs	r3, #54	; 0x36
 8007452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	e747      	b.n	80072e8 <_dtoa_r+0x740>
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	1e5d      	subs	r5, r3, #1
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	42ab      	cmp	r3, r5
 8007460:	db08      	blt.n	8007474 <_dtoa_r+0x8cc>
 8007462:	1b5d      	subs	r5, r3, r5
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	da0c      	bge.n	8007484 <_dtoa_r+0x8dc>
 800746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746e:	1a9c      	subs	r4, r3, r2
 8007470:	2300      	movs	r3, #0
 8007472:	e73b      	b.n	80072ec <_dtoa_r+0x744>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	9504      	str	r5, [sp, #16]
 8007478:	1aea      	subs	r2, r5, r3
 800747a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747c:	2500      	movs	r5, #0
 800747e:	189b      	adds	r3, r3, r2
 8007480:	9311      	str	r3, [sp, #68]	; 0x44
 8007482:	e7ef      	b.n	8007464 <_dtoa_r+0x8bc>
 8007484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	e730      	b.n	80072ec <_dtoa_r+0x744>
 800748a:	9d04      	ldr	r5, [sp, #16]
 800748c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800748e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007490:	e737      	b.n	8007302 <_dtoa_r+0x75a>
 8007492:	9a04      	ldr	r2, [sp, #16]
 8007494:	e764      	b.n	8007360 <_dtoa_r+0x7b8>
 8007496:	2500      	movs	r5, #0
 8007498:	9b04      	ldr	r3, [sp, #16]
 800749a:	9a04      	ldr	r2, [sp, #16]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	9310      	str	r3, [sp, #64]	; 0x40
 80074a0:	3303      	adds	r3, #3
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	6858      	ldr	r0, [r3, #4]
 80074a8:	f000 fa17 	bl	80078da <__hi0bits>
 80074ac:	2320      	movs	r3, #32
 80074ae:	1a18      	subs	r0, r3, r0
 80074b0:	e785      	b.n	80073be <_dtoa_r+0x816>
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d095      	beq.n	80073e2 <_dtoa_r+0x83a>
 80074b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b8:	331c      	adds	r3, #28
 80074ba:	18d2      	adds	r2, r2, r3
 80074bc:	920a      	str	r2, [sp, #40]	; 0x28
 80074be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074c0:	18e4      	adds	r4, r4, r3
 80074c2:	18d3      	adds	r3, r2, r3
 80074c4:	e78c      	b.n	80073e0 <_dtoa_r+0x838>
 80074c6:	0003      	movs	r3, r0
 80074c8:	e7f5      	b.n	80074b6 <_dtoa_r+0x90e>
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dc3d      	bgt.n	800754c <_dtoa_r+0x9a4>
 80074d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	dd3a      	ble.n	800754c <_dtoa_r+0x9a4>
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	930c      	str	r3, [sp, #48]	; 0x30
 80074da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <_dtoa_r+0x952>
 80074e0:	9904      	ldr	r1, [sp, #16]
 80074e2:	2205      	movs	r2, #5
 80074e4:	9802      	ldr	r0, [sp, #8]
 80074e6:	f000 f9ba 	bl	800785e <__multadd>
 80074ea:	9004      	str	r0, [sp, #16]
 80074ec:	0001      	movs	r1, r0
 80074ee:	9803      	ldr	r0, [sp, #12]
 80074f0:	f000 fb78 	bl	8007be4 <__mcmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	dd00      	ble.n	80074fa <_dtoa_r+0x952>
 80074f8:	e5af      	b.n	800705a <_dtoa_r+0x4b2>
 80074fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074fc:	9d08      	ldr	r5, [sp, #32]
 80074fe:	43df      	mvns	r7, r3
 8007500:	2300      	movs	r3, #0
 8007502:	9309      	str	r3, [sp, #36]	; 0x24
 8007504:	9904      	ldr	r1, [sp, #16]
 8007506:	9802      	ldr	r0, [sp, #8]
 8007508:	f000 f990 	bl	800782c <_Bfree>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d100      	bne.n	8007512 <_dtoa_r+0x96a>
 8007510:	e69b      	b.n	800724a <_dtoa_r+0x6a2>
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <_dtoa_r+0x97c>
 8007518:	42b3      	cmp	r3, r6
 800751a:	d003      	beq.n	8007524 <_dtoa_r+0x97c>
 800751c:	0019      	movs	r1, r3
 800751e:	9802      	ldr	r0, [sp, #8]
 8007520:	f000 f984 	bl	800782c <_Bfree>
 8007524:	0031      	movs	r1, r6
 8007526:	9802      	ldr	r0, [sp, #8]
 8007528:	f000 f980 	bl	800782c <_Bfree>
 800752c:	e68d      	b.n	800724a <_dtoa_r+0x6a2>
 800752e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	001e      	movs	r6, r3
 8007534:	e7e1      	b.n	80074fa <_dtoa_r+0x952>
 8007536:	2300      	movs	r3, #0
 8007538:	e7fa      	b.n	8007530 <_dtoa_r+0x988>
 800753a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800753c:	0037      	movs	r7, r6
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	001e      	movs	r6, r3
 8007542:	e58a      	b.n	800705a <_dtoa_r+0x4b2>
 8007544:	40240000 	.word	0x40240000
 8007548:	00000433 	.word	0x00000433
 800754c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <_dtoa_r+0x9ac>
 8007552:	e0b2      	b.n	80076ba <_dtoa_r+0xb12>
 8007554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007556:	930c      	str	r3, [sp, #48]	; 0x30
 8007558:	2c00      	cmp	r4, #0
 800755a:	dd05      	ble.n	8007568 <_dtoa_r+0x9c0>
 800755c:	0031      	movs	r1, r6
 800755e:	0022      	movs	r2, r4
 8007560:	9802      	ldr	r0, [sp, #8]
 8007562:	f000 faed 	bl	8007b40 <__lshift>
 8007566:	0006      	movs	r6, r0
 8007568:	0030      	movs	r0, r6
 800756a:	2d00      	cmp	r5, #0
 800756c:	d011      	beq.n	8007592 <_dtoa_r+0x9ea>
 800756e:	6871      	ldr	r1, [r6, #4]
 8007570:	9802      	ldr	r0, [sp, #8]
 8007572:	f000 f923 	bl	80077bc <_Balloc>
 8007576:	0031      	movs	r1, r6
 8007578:	0004      	movs	r4, r0
 800757a:	6933      	ldr	r3, [r6, #16]
 800757c:	310c      	adds	r1, #12
 800757e:	1c9a      	adds	r2, r3, #2
 8007580:	0092      	lsls	r2, r2, #2
 8007582:	300c      	adds	r0, #12
 8007584:	f000 f911 	bl	80077aa <memcpy>
 8007588:	2201      	movs	r2, #1
 800758a:	0021      	movs	r1, r4
 800758c:	9802      	ldr	r0, [sp, #8]
 800758e:	f000 fad7 	bl	8007b40 <__lshift>
 8007592:	9609      	str	r6, [sp, #36]	; 0x24
 8007594:	0006      	movs	r6, r0
 8007596:	9b08      	ldr	r3, [sp, #32]
 8007598:	930a      	str	r3, [sp, #40]	; 0x28
 800759a:	9904      	ldr	r1, [sp, #16]
 800759c:	9803      	ldr	r0, [sp, #12]
 800759e:	f7ff fa7d 	bl	8006a9c <quorem>
 80075a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a4:	900d      	str	r0, [sp, #52]	; 0x34
 80075a6:	0004      	movs	r4, r0
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f000 fb1b 	bl	8007be4 <__mcmp>
 80075ae:	0032      	movs	r2, r6
 80075b0:	9010      	str	r0, [sp, #64]	; 0x40
 80075b2:	9904      	ldr	r1, [sp, #16]
 80075b4:	9802      	ldr	r0, [sp, #8]
 80075b6:	f000 fb2f 	bl	8007c18 <__mdiff>
 80075ba:	2301      	movs	r3, #1
 80075bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80075be:	68c3      	ldr	r3, [r0, #12]
 80075c0:	3430      	adds	r4, #48	; 0x30
 80075c2:	0005      	movs	r5, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <_dtoa_r+0xa2a>
 80075c8:	0001      	movs	r1, r0
 80075ca:	9803      	ldr	r0, [sp, #12]
 80075cc:	f000 fb0a 	bl	8007be4 <__mcmp>
 80075d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80075d2:	0029      	movs	r1, r5
 80075d4:	9802      	ldr	r0, [sp, #8]
 80075d6:	f000 f929 	bl	800782c <_Bfree>
 80075da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075de:	4313      	orrs	r3, r2
 80075e0:	d10e      	bne.n	8007600 <_dtoa_r+0xa58>
 80075e2:	9a06      	ldr	r2, [sp, #24]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4213      	tst	r3, r2
 80075e8:	d10a      	bne.n	8007600 <_dtoa_r+0xa58>
 80075ea:	2c39      	cmp	r4, #57	; 0x39
 80075ec:	d026      	beq.n	800763c <_dtoa_r+0xa94>
 80075ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd01      	ble.n	80075f8 <_dtoa_r+0xa50>
 80075f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80075f6:	3431      	adds	r4, #49	; 0x31
 80075f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fa:	1c5d      	adds	r5, r3, #1
 80075fc:	701c      	strb	r4, [r3, #0]
 80075fe:	e781      	b.n	8007504 <_dtoa_r+0x95c>
 8007600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	db07      	blt.n	8007616 <_dtoa_r+0xa6e>
 8007606:	001d      	movs	r5, r3
 8007608:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800760a:	431d      	orrs	r5, r3
 800760c:	d122      	bne.n	8007654 <_dtoa_r+0xaac>
 800760e:	2301      	movs	r3, #1
 8007610:	9a06      	ldr	r2, [sp, #24]
 8007612:	4213      	tst	r3, r2
 8007614:	d11e      	bne.n	8007654 <_dtoa_r+0xaac>
 8007616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	dded      	ble.n	80075f8 <_dtoa_r+0xa50>
 800761c:	9903      	ldr	r1, [sp, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	9802      	ldr	r0, [sp, #8]
 8007622:	f000 fa8d 	bl	8007b40 <__lshift>
 8007626:	9904      	ldr	r1, [sp, #16]
 8007628:	9003      	str	r0, [sp, #12]
 800762a:	f000 fadb 	bl	8007be4 <__mcmp>
 800762e:	2800      	cmp	r0, #0
 8007630:	dc02      	bgt.n	8007638 <_dtoa_r+0xa90>
 8007632:	d1e1      	bne.n	80075f8 <_dtoa_r+0xa50>
 8007634:	07e3      	lsls	r3, r4, #31
 8007636:	d5df      	bpl.n	80075f8 <_dtoa_r+0xa50>
 8007638:	2c39      	cmp	r4, #57	; 0x39
 800763a:	d1db      	bne.n	80075f4 <_dtoa_r+0xa4c>
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007640:	1c5d      	adds	r5, r3, #1
 8007642:	2339      	movs	r3, #57	; 0x39
 8007644:	7013      	strb	r3, [r2, #0]
 8007646:	1e6b      	subs	r3, r5, #1
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	2a39      	cmp	r2, #57	; 0x39
 800764c:	d067      	beq.n	800771e <_dtoa_r+0xb76>
 800764e:	3201      	adds	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e757      	b.n	8007504 <_dtoa_r+0x95c>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	1c5d      	adds	r5, r3, #1
 8007658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	dd04      	ble.n	8007668 <_dtoa_r+0xac0>
 800765e:	2c39      	cmp	r4, #57	; 0x39
 8007660:	d0ec      	beq.n	800763c <_dtoa_r+0xa94>
 8007662:	3401      	adds	r4, #1
 8007664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007666:	e7c9      	b.n	80075fc <_dtoa_r+0xa54>
 8007668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800766c:	701c      	strb	r4, [r3, #0]
 800766e:	9b08      	ldr	r3, [sp, #32]
 8007670:	1aeb      	subs	r3, r5, r3
 8007672:	4293      	cmp	r3, r2
 8007674:	d03e      	beq.n	80076f4 <_dtoa_r+0xb4c>
 8007676:	2300      	movs	r3, #0
 8007678:	220a      	movs	r2, #10
 800767a:	9903      	ldr	r1, [sp, #12]
 800767c:	9802      	ldr	r0, [sp, #8]
 800767e:	f000 f8ee 	bl	800785e <__multadd>
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	9003      	str	r0, [sp, #12]
 8007686:	42b3      	cmp	r3, r6
 8007688:	d109      	bne.n	800769e <_dtoa_r+0xaf6>
 800768a:	2300      	movs	r3, #0
 800768c:	220a      	movs	r2, #10
 800768e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007690:	9802      	ldr	r0, [sp, #8]
 8007692:	f000 f8e4 	bl	800785e <__multadd>
 8007696:	9009      	str	r0, [sp, #36]	; 0x24
 8007698:	0006      	movs	r6, r0
 800769a:	950a      	str	r5, [sp, #40]	; 0x28
 800769c:	e77d      	b.n	800759a <_dtoa_r+0x9f2>
 800769e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a0:	2300      	movs	r3, #0
 80076a2:	220a      	movs	r2, #10
 80076a4:	9802      	ldr	r0, [sp, #8]
 80076a6:	f000 f8da 	bl	800785e <__multadd>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9009      	str	r0, [sp, #36]	; 0x24
 80076ae:	220a      	movs	r2, #10
 80076b0:	0031      	movs	r1, r6
 80076b2:	9802      	ldr	r0, [sp, #8]
 80076b4:	f000 f8d3 	bl	800785e <__multadd>
 80076b8:	e7ee      	b.n	8007698 <_dtoa_r+0xaf0>
 80076ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076bc:	930c      	str	r3, [sp, #48]	; 0x30
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	9306      	str	r3, [sp, #24]
 80076c2:	9904      	ldr	r1, [sp, #16]
 80076c4:	9803      	ldr	r0, [sp, #12]
 80076c6:	f7ff f9e9 	bl	8006a9c <quorem>
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	3030      	adds	r0, #48	; 0x30
 80076ce:	1c5d      	adds	r5, r3, #1
 80076d0:	7018      	strb	r0, [r3, #0]
 80076d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d4:	9b08      	ldr	r3, [sp, #32]
 80076d6:	0004      	movs	r4, r0
 80076d8:	1aeb      	subs	r3, r5, r3
 80076da:	429a      	cmp	r2, r3
 80076dc:	dd08      	ble.n	80076f0 <_dtoa_r+0xb48>
 80076de:	2300      	movs	r3, #0
 80076e0:	220a      	movs	r2, #10
 80076e2:	9903      	ldr	r1, [sp, #12]
 80076e4:	9802      	ldr	r0, [sp, #8]
 80076e6:	f000 f8ba 	bl	800785e <__multadd>
 80076ea:	9506      	str	r5, [sp, #24]
 80076ec:	9003      	str	r0, [sp, #12]
 80076ee:	e7e8      	b.n	80076c2 <_dtoa_r+0xb1a>
 80076f0:	2300      	movs	r3, #0
 80076f2:	9309      	str	r3, [sp, #36]	; 0x24
 80076f4:	9903      	ldr	r1, [sp, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	9802      	ldr	r0, [sp, #8]
 80076fa:	f000 fa21 	bl	8007b40 <__lshift>
 80076fe:	9904      	ldr	r1, [sp, #16]
 8007700:	9003      	str	r0, [sp, #12]
 8007702:	f000 fa6f 	bl	8007be4 <__mcmp>
 8007706:	2800      	cmp	r0, #0
 8007708:	dc9d      	bgt.n	8007646 <_dtoa_r+0xa9e>
 800770a:	d101      	bne.n	8007710 <_dtoa_r+0xb68>
 800770c:	07e3      	lsls	r3, r4, #31
 800770e:	d49a      	bmi.n	8007646 <_dtoa_r+0xa9e>
 8007710:	1e6b      	subs	r3, r5, #1
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	2a30      	cmp	r2, #48	; 0x30
 8007716:	d000      	beq.n	800771a <_dtoa_r+0xb72>
 8007718:	e6f4      	b.n	8007504 <_dtoa_r+0x95c>
 800771a:	001d      	movs	r5, r3
 800771c:	e7f8      	b.n	8007710 <_dtoa_r+0xb68>
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	429a      	cmp	r2, r3
 8007722:	d103      	bne.n	800772c <_dtoa_r+0xb84>
 8007724:	2331      	movs	r3, #49	; 0x31
 8007726:	3701      	adds	r7, #1
 8007728:	7013      	strb	r3, [r2, #0]
 800772a:	e6eb      	b.n	8007504 <_dtoa_r+0x95c>
 800772c:	001d      	movs	r5, r3
 800772e:	e78a      	b.n	8007646 <_dtoa_r+0xa9e>
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <_dtoa_r+0xbb8>)
 8007732:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <_dtoa_r+0xbbc>)
 8007738:	2a00      	cmp	r2, #0
 800773a:	d001      	beq.n	8007740 <_dtoa_r+0xb98>
 800773c:	f7ff fa77 	bl	8006c2e <_dtoa_r+0x86>
 8007740:	f7ff fa77 	bl	8006c32 <_dtoa_r+0x8a>
 8007744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007746:	2b01      	cmp	r3, #1
 8007748:	dc00      	bgt.n	800774c <_dtoa_r+0xba4>
 800774a:	e621      	b.n	8007390 <_dtoa_r+0x7e8>
 800774c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800774e:	2001      	movs	r0, #1
 8007750:	e635      	b.n	80073be <_dtoa_r+0x816>
 8007752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007754:	2b00      	cmp	r3, #0
 8007756:	dcb2      	bgt.n	80076be <_dtoa_r+0xb16>
 8007758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800775a:	2b02      	cmp	r3, #2
 800775c:	ddaf      	ble.n	80076be <_dtoa_r+0xb16>
 800775e:	e6bc      	b.n	80074da <_dtoa_r+0x932>
 8007760:	080086b8 	.word	0x080086b8
 8007764:	080086c0 	.word	0x080086c0

08007768 <_localeconv_r>:
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <_localeconv_r+0x10>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6a18      	ldr	r0, [r3, #32]
 800776e:	2800      	cmp	r0, #0
 8007770:	d100      	bne.n	8007774 <_localeconv_r+0xc>
 8007772:	4802      	ldr	r0, [pc, #8]	; (800777c <_localeconv_r+0x14>)
 8007774:	30f0      	adds	r0, #240	; 0xf0
 8007776:	4770      	bx	lr
 8007778:	20000010 	.word	0x20000010
 800777c:	20000074 	.word	0x20000074

08007780 <malloc>:
 8007780:	b510      	push	{r4, lr}
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <malloc+0x10>)
 8007784:	0001      	movs	r1, r0
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	f000 fb56 	bl	8007e38 <_malloc_r>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	20000010 	.word	0x20000010

08007794 <memchr>:
 8007794:	b2c9      	uxtb	r1, r1
 8007796:	1882      	adds	r2, r0, r2
 8007798:	4290      	cmp	r0, r2
 800779a:	d101      	bne.n	80077a0 <memchr+0xc>
 800779c:	2000      	movs	r0, #0
 800779e:	4770      	bx	lr
 80077a0:	7803      	ldrb	r3, [r0, #0]
 80077a2:	428b      	cmp	r3, r1
 80077a4:	d0fb      	beq.n	800779e <memchr+0xa>
 80077a6:	3001      	adds	r0, #1
 80077a8:	e7f6      	b.n	8007798 <memchr+0x4>

080077aa <memcpy>:
 80077aa:	2300      	movs	r3, #0
 80077ac:	b510      	push	{r4, lr}
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xa>
 80077b2:	bd10      	pop	{r4, pc}
 80077b4:	5ccc      	ldrb	r4, [r1, r3]
 80077b6:	54c4      	strb	r4, [r0, r3]
 80077b8:	3301      	adds	r3, #1
 80077ba:	e7f8      	b.n	80077ae <memcpy+0x4>

080077bc <_Balloc>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077c0:	0004      	movs	r4, r0
 80077c2:	000d      	movs	r5, r1
 80077c4:	2e00      	cmp	r6, #0
 80077c6:	d107      	bne.n	80077d8 <_Balloc+0x1c>
 80077c8:	2010      	movs	r0, #16
 80077ca:	f7ff ffd9 	bl	8007780 <malloc>
 80077ce:	6260      	str	r0, [r4, #36]	; 0x24
 80077d0:	6046      	str	r6, [r0, #4]
 80077d2:	6086      	str	r6, [r0, #8]
 80077d4:	6006      	str	r6, [r0, #0]
 80077d6:	60c6      	str	r6, [r0, #12]
 80077d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077da:	68f3      	ldr	r3, [r6, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d013      	beq.n	8007808 <_Balloc+0x4c>
 80077e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e2:	00aa      	lsls	r2, r5, #2
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	189b      	adds	r3, r3, r2
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d118      	bne.n	8007820 <_Balloc+0x64>
 80077ee:	2101      	movs	r1, #1
 80077f0:	000e      	movs	r6, r1
 80077f2:	40ae      	lsls	r6, r5
 80077f4:	1d72      	adds	r2, r6, #5
 80077f6:	0092      	lsls	r2, r2, #2
 80077f8:	0020      	movs	r0, r4
 80077fa:	f000 fac5 	bl	8007d88 <_calloc_r>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d00c      	beq.n	800781c <_Balloc+0x60>
 8007802:	6045      	str	r5, [r0, #4]
 8007804:	6086      	str	r6, [r0, #8]
 8007806:	e00d      	b.n	8007824 <_Balloc+0x68>
 8007808:	2221      	movs	r2, #33	; 0x21
 800780a:	2104      	movs	r1, #4
 800780c:	0020      	movs	r0, r4
 800780e:	f000 fabb 	bl	8007d88 <_calloc_r>
 8007812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007814:	60f0      	str	r0, [r6, #12]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e1      	bne.n	80077e0 <_Balloc+0x24>
 800781c:	2000      	movs	r0, #0
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	6802      	ldr	r2, [r0, #0]
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	6103      	str	r3, [r0, #16]
 8007828:	60c3      	str	r3, [r0, #12]
 800782a:	e7f8      	b.n	800781e <_Balloc+0x62>

0800782c <_Bfree>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007830:	0006      	movs	r6, r0
 8007832:	000d      	movs	r5, r1
 8007834:	2c00      	cmp	r4, #0
 8007836:	d107      	bne.n	8007848 <_Bfree+0x1c>
 8007838:	2010      	movs	r0, #16
 800783a:	f7ff ffa1 	bl	8007780 <malloc>
 800783e:	6270      	str	r0, [r6, #36]	; 0x24
 8007840:	6044      	str	r4, [r0, #4]
 8007842:	6084      	str	r4, [r0, #8]
 8007844:	6004      	str	r4, [r0, #0]
 8007846:	60c4      	str	r4, [r0, #12]
 8007848:	2d00      	cmp	r5, #0
 800784a:	d007      	beq.n	800785c <_Bfree+0x30>
 800784c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800784e:	686a      	ldr	r2, [r5, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	0092      	lsls	r2, r2, #2
 8007854:	189b      	adds	r3, r3, r2
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	602a      	str	r2, [r5, #0]
 800785a:	601d      	str	r5, [r3, #0]
 800785c:	bd70      	pop	{r4, r5, r6, pc}

0800785e <__multadd>:
 800785e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007860:	001e      	movs	r6, r3
 8007862:	2314      	movs	r3, #20
 8007864:	469c      	mov	ip, r3
 8007866:	0007      	movs	r7, r0
 8007868:	000c      	movs	r4, r1
 800786a:	2000      	movs	r0, #0
 800786c:	690d      	ldr	r5, [r1, #16]
 800786e:	448c      	add	ip, r1
 8007870:	4663      	mov	r3, ip
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3001      	adds	r0, #1
 8007876:	b299      	uxth	r1, r3
 8007878:	4663      	mov	r3, ip
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4351      	muls	r1, r2
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	4353      	muls	r3, r2
 8007882:	1989      	adds	r1, r1, r6
 8007884:	0c0e      	lsrs	r6, r1, #16
 8007886:	199b      	adds	r3, r3, r6
 8007888:	b289      	uxth	r1, r1
 800788a:	0c1e      	lsrs	r6, r3, #16
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	185b      	adds	r3, r3, r1
 8007890:	4661      	mov	r1, ip
 8007892:	c108      	stmia	r1!, {r3}
 8007894:	468c      	mov	ip, r1
 8007896:	4285      	cmp	r5, r0
 8007898:	dcea      	bgt.n	8007870 <__multadd+0x12>
 800789a:	2e00      	cmp	r6, #0
 800789c:	d01b      	beq.n	80078d6 <__multadd+0x78>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dc12      	bgt.n	80078ca <__multadd+0x6c>
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	0038      	movs	r0, r7
 80078a8:	1c59      	adds	r1, r3, #1
 80078aa:	f7ff ff87 	bl	80077bc <_Balloc>
 80078ae:	0021      	movs	r1, r4
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	9001      	str	r0, [sp, #4]
 80078b4:	1c9a      	adds	r2, r3, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	310c      	adds	r1, #12
 80078ba:	300c      	adds	r0, #12
 80078bc:	f7ff ff75 	bl	80077aa <memcpy>
 80078c0:	0021      	movs	r1, r4
 80078c2:	0038      	movs	r0, r7
 80078c4:	f7ff ffb2 	bl	800782c <_Bfree>
 80078c8:	9c01      	ldr	r4, [sp, #4]
 80078ca:	1d2b      	adds	r3, r5, #4
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	18e3      	adds	r3, r4, r3
 80078d0:	3501      	adds	r5, #1
 80078d2:	605e      	str	r6, [r3, #4]
 80078d4:	6125      	str	r5, [r4, #16]
 80078d6:	0020      	movs	r0, r4
 80078d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080078da <__hi0bits>:
 80078da:	0003      	movs	r3, r0
 80078dc:	0c02      	lsrs	r2, r0, #16
 80078de:	2000      	movs	r0, #0
 80078e0:	4282      	cmp	r2, r0
 80078e2:	d101      	bne.n	80078e8 <__hi0bits+0xe>
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	3010      	adds	r0, #16
 80078e8:	0e1a      	lsrs	r2, r3, #24
 80078ea:	d101      	bne.n	80078f0 <__hi0bits+0x16>
 80078ec:	3008      	adds	r0, #8
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	0f1a      	lsrs	r2, r3, #28
 80078f2:	d101      	bne.n	80078f8 <__hi0bits+0x1e>
 80078f4:	3004      	adds	r0, #4
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	0f9a      	lsrs	r2, r3, #30
 80078fa:	d101      	bne.n	8007900 <__hi0bits+0x26>
 80078fc:	3002      	adds	r0, #2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	db03      	blt.n	800790c <__hi0bits+0x32>
 8007904:	3001      	adds	r0, #1
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	d400      	bmi.n	800790c <__hi0bits+0x32>
 800790a:	2020      	movs	r0, #32
 800790c:	4770      	bx	lr

0800790e <__lo0bits>:
 800790e:	2207      	movs	r2, #7
 8007910:	6803      	ldr	r3, [r0, #0]
 8007912:	b510      	push	{r4, lr}
 8007914:	0001      	movs	r1, r0
 8007916:	401a      	ands	r2, r3
 8007918:	d00d      	beq.n	8007936 <__lo0bits+0x28>
 800791a:	2401      	movs	r4, #1
 800791c:	2000      	movs	r0, #0
 800791e:	4223      	tst	r3, r4
 8007920:	d105      	bne.n	800792e <__lo0bits+0x20>
 8007922:	3002      	adds	r0, #2
 8007924:	4203      	tst	r3, r0
 8007926:	d003      	beq.n	8007930 <__lo0bits+0x22>
 8007928:	40e3      	lsrs	r3, r4
 800792a:	0020      	movs	r0, r4
 800792c:	600b      	str	r3, [r1, #0]
 800792e:	bd10      	pop	{r4, pc}
 8007930:	089b      	lsrs	r3, r3, #2
 8007932:	600b      	str	r3, [r1, #0]
 8007934:	e7fb      	b.n	800792e <__lo0bits+0x20>
 8007936:	b29c      	uxth	r4, r3
 8007938:	0010      	movs	r0, r2
 800793a:	2c00      	cmp	r4, #0
 800793c:	d101      	bne.n	8007942 <__lo0bits+0x34>
 800793e:	2010      	movs	r0, #16
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	b2da      	uxtb	r2, r3
 8007944:	2a00      	cmp	r2, #0
 8007946:	d101      	bne.n	800794c <__lo0bits+0x3e>
 8007948:	3008      	adds	r0, #8
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	071a      	lsls	r2, r3, #28
 800794e:	d101      	bne.n	8007954 <__lo0bits+0x46>
 8007950:	3004      	adds	r0, #4
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	079a      	lsls	r2, r3, #30
 8007956:	d101      	bne.n	800795c <__lo0bits+0x4e>
 8007958:	3002      	adds	r0, #2
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	07da      	lsls	r2, r3, #31
 800795e:	d4e8      	bmi.n	8007932 <__lo0bits+0x24>
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	d001      	beq.n	8007968 <__lo0bits+0x5a>
 8007964:	3001      	adds	r0, #1
 8007966:	e7e4      	b.n	8007932 <__lo0bits+0x24>
 8007968:	2020      	movs	r0, #32
 800796a:	e7e0      	b.n	800792e <__lo0bits+0x20>

0800796c <__i2b>:
 800796c:	b510      	push	{r4, lr}
 800796e:	000c      	movs	r4, r1
 8007970:	2101      	movs	r1, #1
 8007972:	f7ff ff23 	bl	80077bc <_Balloc>
 8007976:	2301      	movs	r3, #1
 8007978:	6144      	str	r4, [r0, #20]
 800797a:	6103      	str	r3, [r0, #16]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__multiply>:
 800797e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007980:	690b      	ldr	r3, [r1, #16]
 8007982:	0014      	movs	r4, r2
 8007984:	6912      	ldr	r2, [r2, #16]
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	000d      	movs	r5, r1
 800798a:	4293      	cmp	r3, r2
 800798c:	da01      	bge.n	8007992 <__multiply+0x14>
 800798e:	0025      	movs	r5, r4
 8007990:	000c      	movs	r4, r1
 8007992:	692f      	ldr	r7, [r5, #16]
 8007994:	6926      	ldr	r6, [r4, #16]
 8007996:	6869      	ldr	r1, [r5, #4]
 8007998:	19bb      	adds	r3, r7, r6
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	68ab      	ldr	r3, [r5, #8]
 800799e:	19ba      	adds	r2, r7, r6
 80079a0:	4293      	cmp	r3, r2
 80079a2:	da00      	bge.n	80079a6 <__multiply+0x28>
 80079a4:	3101      	adds	r1, #1
 80079a6:	f7ff ff09 	bl	80077bc <_Balloc>
 80079aa:	0002      	movs	r2, r0
 80079ac:	19bb      	adds	r3, r7, r6
 80079ae:	3214      	adds	r2, #20
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	18d3      	adds	r3, r2, r3
 80079b4:	469c      	mov	ip, r3
 80079b6:	2100      	movs	r1, #0
 80079b8:	0013      	movs	r3, r2
 80079ba:	9004      	str	r0, [sp, #16]
 80079bc:	4563      	cmp	r3, ip
 80079be:	d31d      	bcc.n	80079fc <__multiply+0x7e>
 80079c0:	3514      	adds	r5, #20
 80079c2:	00bf      	lsls	r7, r7, #2
 80079c4:	19eb      	adds	r3, r5, r7
 80079c6:	3414      	adds	r4, #20
 80079c8:	00b6      	lsls	r6, r6, #2
 80079ca:	9305      	str	r3, [sp, #20]
 80079cc:	19a3      	adds	r3, r4, r6
 80079ce:	9503      	str	r5, [sp, #12]
 80079d0:	9401      	str	r4, [sp, #4]
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	9901      	ldr	r1, [sp, #4]
 80079d8:	4299      	cmp	r1, r3
 80079da:	d311      	bcc.n	8007a00 <__multiply+0x82>
 80079dc:	9b02      	ldr	r3, [sp, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd06      	ble.n	80079f0 <__multiply+0x72>
 80079e2:	2304      	movs	r3, #4
 80079e4:	425b      	negs	r3, r3
 80079e6:	449c      	add	ip, r3
 80079e8:	4663      	mov	r3, ip
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d051      	beq.n	8007a94 <__multiply+0x116>
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	9a02      	ldr	r2, [sp, #8]
 80079f4:	0018      	movs	r0, r3
 80079f6:	611a      	str	r2, [r3, #16]
 80079f8:	b009      	add	sp, #36	; 0x24
 80079fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fc:	c302      	stmia	r3!, {r1}
 80079fe:	e7dd      	b.n	80079bc <__multiply+0x3e>
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b298      	uxth	r0, r3
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d01c      	beq.n	8007a44 <__multiply+0xc6>
 8007a0a:	0015      	movs	r5, r2
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	9f03      	ldr	r7, [sp, #12]
 8007a10:	cf02      	ldmia	r7!, {r1}
 8007a12:	682c      	ldr	r4, [r5, #0]
 8007a14:	b28b      	uxth	r3, r1
 8007a16:	4343      	muls	r3, r0
 8007a18:	0c09      	lsrs	r1, r1, #16
 8007a1a:	4341      	muls	r1, r0
 8007a1c:	b2a4      	uxth	r4, r4
 8007a1e:	191b      	adds	r3, r3, r4
 8007a20:	199b      	adds	r3, r3, r6
 8007a22:	000e      	movs	r6, r1
 8007a24:	6829      	ldr	r1, [r5, #0]
 8007a26:	9506      	str	r5, [sp, #24]
 8007a28:	0c09      	lsrs	r1, r1, #16
 8007a2a:	1871      	adds	r1, r6, r1
 8007a2c:	0c1e      	lsrs	r6, r3, #16
 8007a2e:	1989      	adds	r1, r1, r6
 8007a30:	0c0e      	lsrs	r6, r1, #16
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	0409      	lsls	r1, r1, #16
 8007a36:	430b      	orrs	r3, r1
 8007a38:	c508      	stmia	r5!, {r3}
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	42bb      	cmp	r3, r7
 8007a3e:	d8e7      	bhi.n	8007a10 <__multiply+0x92>
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	605e      	str	r6, [r3, #4]
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	0c1d      	lsrs	r5, r3, #16
 8007a4a:	d01e      	beq.n	8007a8a <__multiply+0x10c>
 8007a4c:	0010      	movs	r0, r2
 8007a4e:	2700      	movs	r7, #0
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	9e03      	ldr	r6, [sp, #12]
 8007a54:	6831      	ldr	r1, [r6, #0]
 8007a56:	6804      	ldr	r4, [r0, #0]
 8007a58:	b289      	uxth	r1, r1
 8007a5a:	4369      	muls	r1, r5
 8007a5c:	0c24      	lsrs	r4, r4, #16
 8007a5e:	1909      	adds	r1, r1, r4
 8007a60:	19c9      	adds	r1, r1, r7
 8007a62:	040f      	lsls	r7, r1, #16
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	433b      	orrs	r3, r7
 8007a68:	6003      	str	r3, [r0, #0]
 8007a6a:	ce80      	ldmia	r6!, {r7}
 8007a6c:	6843      	ldr	r3, [r0, #4]
 8007a6e:	0c3f      	lsrs	r7, r7, #16
 8007a70:	436f      	muls	r7, r5
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	0c09      	lsrs	r1, r1, #16
 8007a78:	185b      	adds	r3, r3, r1
 8007a7a:	9905      	ldr	r1, [sp, #20]
 8007a7c:	9006      	str	r0, [sp, #24]
 8007a7e:	0c1f      	lsrs	r7, r3, #16
 8007a80:	3004      	adds	r0, #4
 8007a82:	42b1      	cmp	r1, r6
 8007a84:	d8e6      	bhi.n	8007a54 <__multiply+0xd6>
 8007a86:	9906      	ldr	r1, [sp, #24]
 8007a88:	604b      	str	r3, [r1, #4]
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	3204      	adds	r2, #4
 8007a8e:	3304      	adds	r3, #4
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	e79f      	b.n	80079d4 <__multiply+0x56>
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	e79f      	b.n	80079dc <__multiply+0x5e>

08007a9c <__pow5mult>:
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	0005      	movs	r5, r0
 8007aa4:	000e      	movs	r6, r1
 8007aa6:	0014      	movs	r4, r2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <__pow5mult+0x22>
 8007aac:	4922      	ldr	r1, [pc, #136]	; (8007b38 <__pow5mult+0x9c>)
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	009a      	lsls	r2, r3, #2
 8007ab2:	5852      	ldr	r2, [r2, r1]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	0031      	movs	r1, r6
 8007ab8:	f7ff fed1 	bl	800785e <__multadd>
 8007abc:	0006      	movs	r6, r0
 8007abe:	10a3      	asrs	r3, r4, #2
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	d036      	beq.n	8007b32 <__pow5mult+0x96>
 8007ac4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	d107      	bne.n	8007ada <__pow5mult+0x3e>
 8007aca:	2010      	movs	r0, #16
 8007acc:	f7ff fe58 	bl	8007780 <malloc>
 8007ad0:	6268      	str	r0, [r5, #36]	; 0x24
 8007ad2:	6044      	str	r4, [r0, #4]
 8007ad4:	6084      	str	r4, [r0, #8]
 8007ad6:	6004      	str	r4, [r0, #0]
 8007ad8:	60c4      	str	r4, [r0, #12]
 8007ada:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007adc:	68bc      	ldr	r4, [r7, #8]
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d107      	bne.n	8007af2 <__pow5mult+0x56>
 8007ae2:	4916      	ldr	r1, [pc, #88]	; (8007b3c <__pow5mult+0xa0>)
 8007ae4:	0028      	movs	r0, r5
 8007ae6:	f7ff ff41 	bl	800796c <__i2b>
 8007aea:	2300      	movs	r3, #0
 8007aec:	0004      	movs	r4, r0
 8007aee:	60b8      	str	r0, [r7, #8]
 8007af0:	6003      	str	r3, [r0, #0]
 8007af2:	2201      	movs	r2, #1
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	4213      	tst	r3, r2
 8007af8:	d00a      	beq.n	8007b10 <__pow5mult+0x74>
 8007afa:	0031      	movs	r1, r6
 8007afc:	0022      	movs	r2, r4
 8007afe:	0028      	movs	r0, r5
 8007b00:	f7ff ff3d 	bl	800797e <__multiply>
 8007b04:	0007      	movs	r7, r0
 8007b06:	0031      	movs	r1, r6
 8007b08:	0028      	movs	r0, r5
 8007b0a:	f7ff fe8f 	bl	800782c <_Bfree>
 8007b0e:	003e      	movs	r6, r7
 8007b10:	9b01      	ldr	r3, [sp, #4]
 8007b12:	105b      	asrs	r3, r3, #1
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	d00c      	beq.n	8007b32 <__pow5mult+0x96>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d107      	bne.n	8007b2e <__pow5mult+0x92>
 8007b1e:	0022      	movs	r2, r4
 8007b20:	0021      	movs	r1, r4
 8007b22:	0028      	movs	r0, r5
 8007b24:	f7ff ff2b 	bl	800797e <__multiply>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6020      	str	r0, [r4, #0]
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	0004      	movs	r4, r0
 8007b30:	e7df      	b.n	8007af2 <__pow5mult+0x56>
 8007b32:	0030      	movs	r0, r6
 8007b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	080087b8 	.word	0x080087b8
 8007b3c:	00000271 	.word	0x00000271

08007b40 <__lshift>:
 8007b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b42:	000d      	movs	r5, r1
 8007b44:	0017      	movs	r7, r2
 8007b46:	692b      	ldr	r3, [r5, #16]
 8007b48:	1154      	asrs	r4, r2, #5
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	18e3      	adds	r3, r4, r3
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	6849      	ldr	r1, [r1, #4]
 8007b56:	68ab      	ldr	r3, [r5, #8]
 8007b58:	9002      	str	r0, [sp, #8]
 8007b5a:	9a00      	ldr	r2, [sp, #0]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	db35      	blt.n	8007bcc <__lshift+0x8c>
 8007b60:	9802      	ldr	r0, [sp, #8]
 8007b62:	f7ff fe2b 	bl	80077bc <_Balloc>
 8007b66:	2300      	movs	r3, #0
 8007b68:	0002      	movs	r2, r0
 8007b6a:	0006      	movs	r6, r0
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	3214      	adds	r2, #20
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	db2e      	blt.n	8007bd2 <__lshift+0x92>
 8007b74:	43e3      	mvns	r3, r4
 8007b76:	17db      	asrs	r3, r3, #31
 8007b78:	401c      	ands	r4, r3
 8007b7a:	002b      	movs	r3, r5
 8007b7c:	00a4      	lsls	r4, r4, #2
 8007b7e:	1914      	adds	r4, r2, r4
 8007b80:	692a      	ldr	r2, [r5, #16]
 8007b82:	3314      	adds	r3, #20
 8007b84:	0092      	lsls	r2, r2, #2
 8007b86:	189a      	adds	r2, r3, r2
 8007b88:	4694      	mov	ip, r2
 8007b8a:	221f      	movs	r2, #31
 8007b8c:	4017      	ands	r7, r2
 8007b8e:	d024      	beq.n	8007bda <__lshift+0x9a>
 8007b90:	3201      	adds	r2, #1
 8007b92:	1bd2      	subs	r2, r2, r7
 8007b94:	9203      	str	r2, [sp, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	6819      	ldr	r1, [r3, #0]
 8007b9a:	0020      	movs	r0, r4
 8007b9c:	40b9      	lsls	r1, r7
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	c404      	stmia	r4!, {r2}
 8007ba2:	cb04      	ldmia	r3!, {r2}
 8007ba4:	9903      	ldr	r1, [sp, #12]
 8007ba6:	40ca      	lsrs	r2, r1
 8007ba8:	459c      	cmp	ip, r3
 8007baa:	d8f5      	bhi.n	8007b98 <__lshift+0x58>
 8007bac:	6042      	str	r2, [r0, #4]
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	d002      	beq.n	8007bb8 <__lshift+0x78>
 8007bb2:	9b01      	ldr	r3, [sp, #4]
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9b00      	ldr	r3, [sp, #0]
 8007bba:	9802      	ldr	r0, [sp, #8]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	6133      	str	r3, [r6, #16]
 8007bc0:	0029      	movs	r1, r5
 8007bc2:	f7ff fe33 	bl	800782c <_Bfree>
 8007bc6:	0030      	movs	r0, r6
 8007bc8:	b005      	add	sp, #20
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bcc:	3101      	adds	r1, #1
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	e7c3      	b.n	8007b5a <__lshift+0x1a>
 8007bd2:	0098      	lsls	r0, r3, #2
 8007bd4:	5011      	str	r1, [r2, r0]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	e7ca      	b.n	8007b70 <__lshift+0x30>
 8007bda:	cb04      	ldmia	r3!, {r2}
 8007bdc:	c404      	stmia	r4!, {r2}
 8007bde:	459c      	cmp	ip, r3
 8007be0:	d8fb      	bhi.n	8007bda <__lshift+0x9a>
 8007be2:	e7e9      	b.n	8007bb8 <__lshift+0x78>

08007be4 <__mcmp>:
 8007be4:	690a      	ldr	r2, [r1, #16]
 8007be6:	6903      	ldr	r3, [r0, #16]
 8007be8:	b530      	push	{r4, r5, lr}
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	d10d      	bne.n	8007c0a <__mcmp+0x26>
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	3014      	adds	r0, #20
 8007bf2:	3114      	adds	r1, #20
 8007bf4:	1884      	adds	r4, r0, r2
 8007bf6:	1889      	adds	r1, r1, r2
 8007bf8:	3c04      	subs	r4, #4
 8007bfa:	3904      	subs	r1, #4
 8007bfc:	6825      	ldr	r5, [r4, #0]
 8007bfe:	680a      	ldr	r2, [r1, #0]
 8007c00:	4295      	cmp	r5, r2
 8007c02:	d004      	beq.n	8007c0e <__mcmp+0x2a>
 8007c04:	2301      	movs	r3, #1
 8007c06:	4295      	cmp	r5, r2
 8007c08:	d304      	bcc.n	8007c14 <__mcmp+0x30>
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	bd30      	pop	{r4, r5, pc}
 8007c0e:	42a0      	cmp	r0, r4
 8007c10:	d3f2      	bcc.n	8007bf8 <__mcmp+0x14>
 8007c12:	e7fa      	b.n	8007c0a <__mcmp+0x26>
 8007c14:	425b      	negs	r3, r3
 8007c16:	e7f8      	b.n	8007c0a <__mcmp+0x26>

08007c18 <__mdiff>:
 8007c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c1a:	000d      	movs	r5, r1
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	0007      	movs	r7, r0
 8007c20:	0011      	movs	r1, r2
 8007c22:	0028      	movs	r0, r5
 8007c24:	0014      	movs	r4, r2
 8007c26:	f7ff ffdd 	bl	8007be4 <__mcmp>
 8007c2a:	1e06      	subs	r6, r0, #0
 8007c2c:	d108      	bne.n	8007c40 <__mdiff+0x28>
 8007c2e:	0001      	movs	r1, r0
 8007c30:	0038      	movs	r0, r7
 8007c32:	f7ff fdc3 	bl	80077bc <_Balloc>
 8007c36:	2301      	movs	r3, #1
 8007c38:	6146      	str	r6, [r0, #20]
 8007c3a:	6103      	str	r3, [r0, #16]
 8007c3c:	b005      	add	sp, #20
 8007c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c40:	2301      	movs	r3, #1
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	2800      	cmp	r0, #0
 8007c46:	db04      	blt.n	8007c52 <__mdiff+0x3a>
 8007c48:	0023      	movs	r3, r4
 8007c4a:	002c      	movs	r4, r5
 8007c4c:	001d      	movs	r5, r3
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	6861      	ldr	r1, [r4, #4]
 8007c54:	0038      	movs	r0, r7
 8007c56:	f7ff fdb1 	bl	80077bc <_Balloc>
 8007c5a:	002f      	movs	r7, r5
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	6926      	ldr	r6, [r4, #16]
 8007c62:	60c3      	str	r3, [r0, #12]
 8007c64:	3414      	adds	r4, #20
 8007c66:	00b3      	lsls	r3, r6, #2
 8007c68:	18e3      	adds	r3, r4, r3
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	692b      	ldr	r3, [r5, #16]
 8007c6e:	3714      	adds	r7, #20
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	0003      	movs	r3, r0
 8007c78:	4694      	mov	ip, r2
 8007c7a:	3314      	adds	r3, #20
 8007c7c:	cc20      	ldmia	r4!, {r5}
 8007c7e:	cf04      	ldmia	r7!, {r2}
 8007c80:	9201      	str	r2, [sp, #4]
 8007c82:	b2aa      	uxth	r2, r5
 8007c84:	4494      	add	ip, r2
 8007c86:	466a      	mov	r2, sp
 8007c88:	4661      	mov	r1, ip
 8007c8a:	8892      	ldrh	r2, [r2, #4]
 8007c8c:	0c2d      	lsrs	r5, r5, #16
 8007c8e:	1a8a      	subs	r2, r1, r2
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	0c09      	lsrs	r1, r1, #16
 8007c94:	1a69      	subs	r1, r5, r1
 8007c96:	1415      	asrs	r5, r2, #16
 8007c98:	1949      	adds	r1, r1, r5
 8007c9a:	140d      	asrs	r5, r1, #16
 8007c9c:	b292      	uxth	r2, r2
 8007c9e:	0409      	lsls	r1, r1, #16
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	9a03      	ldr	r2, [sp, #12]
 8007ca6:	46ac      	mov	ip, r5
 8007ca8:	3304      	adds	r3, #4
 8007caa:	42ba      	cmp	r2, r7
 8007cac:	d8e6      	bhi.n	8007c7c <__mdiff+0x64>
 8007cae:	9902      	ldr	r1, [sp, #8]
 8007cb0:	001a      	movs	r2, r3
 8007cb2:	428c      	cmp	r4, r1
 8007cb4:	d305      	bcc.n	8007cc2 <__mdiff+0xaa>
 8007cb6:	3a04      	subs	r2, #4
 8007cb8:	6813      	ldr	r3, [r2, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <__mdiff+0xc4>
 8007cbe:	6106      	str	r6, [r0, #16]
 8007cc0:	e7bc      	b.n	8007c3c <__mdiff+0x24>
 8007cc2:	cc04      	ldmia	r4!, {r2}
 8007cc4:	b291      	uxth	r1, r2
 8007cc6:	4461      	add	r1, ip
 8007cc8:	140d      	asrs	r5, r1, #16
 8007cca:	0c12      	lsrs	r2, r2, #16
 8007ccc:	1952      	adds	r2, r2, r5
 8007cce:	1415      	asrs	r5, r2, #16
 8007cd0:	b289      	uxth	r1, r1
 8007cd2:	0412      	lsls	r2, r2, #16
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	46ac      	mov	ip, r5
 8007cd8:	c304      	stmia	r3!, {r2}
 8007cda:	e7e8      	b.n	8007cae <__mdiff+0x96>
 8007cdc:	3e01      	subs	r6, #1
 8007cde:	e7ea      	b.n	8007cb6 <__mdiff+0x9e>

08007ce0 <__d2b>:
 8007ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce2:	001d      	movs	r5, r3
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	0014      	movs	r4, r2
 8007ce8:	9f08      	ldr	r7, [sp, #32]
 8007cea:	f7ff fd67 	bl	80077bc <_Balloc>
 8007cee:	032b      	lsls	r3, r5, #12
 8007cf0:	006d      	lsls	r5, r5, #1
 8007cf2:	0006      	movs	r6, r0
 8007cf4:	0b1b      	lsrs	r3, r3, #12
 8007cf6:	0d6d      	lsrs	r5, r5, #21
 8007cf8:	d124      	bne.n	8007d44 <__d2b+0x64>
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d027      	beq.n	8007d50 <__d2b+0x70>
 8007d00:	4668      	mov	r0, sp
 8007d02:	9400      	str	r4, [sp, #0]
 8007d04:	f7ff fe03 	bl	800790e <__lo0bits>
 8007d08:	9c00      	ldr	r4, [sp, #0]
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d01e      	beq.n	8007d4c <__d2b+0x6c>
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	2120      	movs	r1, #32
 8007d12:	001a      	movs	r2, r3
 8007d14:	1a09      	subs	r1, r1, r0
 8007d16:	408a      	lsls	r2, r1
 8007d18:	40c3      	lsrs	r3, r0
 8007d1a:	4322      	orrs	r2, r4
 8007d1c:	6172      	str	r2, [r6, #20]
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9c01      	ldr	r4, [sp, #4]
 8007d22:	61b4      	str	r4, [r6, #24]
 8007d24:	1e63      	subs	r3, r4, #1
 8007d26:	419c      	sbcs	r4, r3
 8007d28:	3401      	adds	r4, #1
 8007d2a:	6134      	str	r4, [r6, #16]
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	d018      	beq.n	8007d62 <__d2b+0x82>
 8007d30:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <__d2b+0x9c>)
 8007d32:	18ed      	adds	r5, r5, r3
 8007d34:	2335      	movs	r3, #53	; 0x35
 8007d36:	182d      	adds	r5, r5, r0
 8007d38:	603d      	str	r5, [r7, #0]
 8007d3a:	1a18      	subs	r0, r3, r0
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	6018      	str	r0, [r3, #0]
 8007d40:	0030      	movs	r0, r6
 8007d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d44:	2280      	movs	r2, #128	; 0x80
 8007d46:	0352      	lsls	r2, r2, #13
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	e7d6      	b.n	8007cfa <__d2b+0x1a>
 8007d4c:	6174      	str	r4, [r6, #20]
 8007d4e:	e7e7      	b.n	8007d20 <__d2b+0x40>
 8007d50:	a801      	add	r0, sp, #4
 8007d52:	f7ff fddc 	bl	800790e <__lo0bits>
 8007d56:	2401      	movs	r4, #1
 8007d58:	9b01      	ldr	r3, [sp, #4]
 8007d5a:	6134      	str	r4, [r6, #16]
 8007d5c:	6173      	str	r3, [r6, #20]
 8007d5e:	3020      	adds	r0, #32
 8007d60:	e7e4      	b.n	8007d2c <__d2b+0x4c>
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <__d2b+0xa0>)
 8007d64:	18c0      	adds	r0, r0, r3
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <__d2b+0xa4>)
 8007d68:	6038      	str	r0, [r7, #0]
 8007d6a:	18e3      	adds	r3, r4, r3
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	18f3      	adds	r3, r6, r3
 8007d70:	6958      	ldr	r0, [r3, #20]
 8007d72:	f7ff fdb2 	bl	80078da <__hi0bits>
 8007d76:	0164      	lsls	r4, r4, #5
 8007d78:	1a20      	subs	r0, r4, r0
 8007d7a:	e7df      	b.n	8007d3c <__d2b+0x5c>
 8007d7c:	fffffbcd 	.word	0xfffffbcd
 8007d80:	fffffbce 	.word	0xfffffbce
 8007d84:	3fffffff 	.word	0x3fffffff

08007d88 <_calloc_r>:
 8007d88:	434a      	muls	r2, r1
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	0011      	movs	r1, r2
 8007d8e:	0014      	movs	r4, r2
 8007d90:	f000 f852 	bl	8007e38 <_malloc_r>
 8007d94:	1e05      	subs	r5, r0, #0
 8007d96:	d003      	beq.n	8007da0 <_calloc_r+0x18>
 8007d98:	0022      	movs	r2, r4
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f7fe f9e6 	bl	800616c <memset>
 8007da0:	0028      	movs	r0, r5
 8007da2:	bd70      	pop	{r4, r5, r6, pc}

08007da4 <_free_r>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	0005      	movs	r5, r0
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d010      	beq.n	8007dce <_free_r+0x2a>
 8007dac:	1f0c      	subs	r4, r1, #4
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da00      	bge.n	8007db6 <_free_r+0x12>
 8007db4:	18e4      	adds	r4, r4, r3
 8007db6:	0028      	movs	r0, r5
 8007db8:	f000 fa33 	bl	8008222 <__malloc_lock>
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <_free_r+0x90>)
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <_free_r+0x2c>
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	6014      	str	r4, [r2, #0]
 8007dc8:	0028      	movs	r0, r5
 8007dca:	f000 fa2b 	bl	8008224 <__malloc_unlock>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d909      	bls.n	8007de8 <_free_r+0x44>
 8007dd4:	6821      	ldr	r1, [r4, #0]
 8007dd6:	1860      	adds	r0, r4, r1
 8007dd8:	4283      	cmp	r3, r0
 8007dda:	d1f3      	bne.n	8007dc4 <_free_r+0x20>
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	1841      	adds	r1, r0, r1
 8007de2:	6021      	str	r1, [r4, #0]
 8007de4:	e7ee      	b.n	8007dc4 <_free_r+0x20>
 8007de6:	0013      	movs	r3, r2
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	d001      	beq.n	8007df2 <_free_r+0x4e>
 8007dee:	42a2      	cmp	r2, r4
 8007df0:	d9f9      	bls.n	8007de6 <_free_r+0x42>
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	1858      	adds	r0, r3, r1
 8007df6:	42a0      	cmp	r0, r4
 8007df8:	d10b      	bne.n	8007e12 <_free_r+0x6e>
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	1809      	adds	r1, r1, r0
 8007dfe:	1858      	adds	r0, r3, r1
 8007e00:	6019      	str	r1, [r3, #0]
 8007e02:	4282      	cmp	r2, r0
 8007e04:	d1e0      	bne.n	8007dc8 <_free_r+0x24>
 8007e06:	6810      	ldr	r0, [r2, #0]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	1841      	adds	r1, r0, r1
 8007e0c:	6019      	str	r1, [r3, #0]
 8007e0e:	605a      	str	r2, [r3, #4]
 8007e10:	e7da      	b.n	8007dc8 <_free_r+0x24>
 8007e12:	42a0      	cmp	r0, r4
 8007e14:	d902      	bls.n	8007e1c <_free_r+0x78>
 8007e16:	230c      	movs	r3, #12
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	e7d5      	b.n	8007dc8 <_free_r+0x24>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	1860      	adds	r0, r4, r1
 8007e20:	4282      	cmp	r2, r0
 8007e22:	d103      	bne.n	8007e2c <_free_r+0x88>
 8007e24:	6810      	ldr	r0, [r2, #0]
 8007e26:	6852      	ldr	r2, [r2, #4]
 8007e28:	1841      	adds	r1, r0, r1
 8007e2a:	6021      	str	r1, [r4, #0]
 8007e2c:	6062      	str	r2, [r4, #4]
 8007e2e:	605c      	str	r4, [r3, #4]
 8007e30:	e7ca      	b.n	8007dc8 <_free_r+0x24>
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	2000020c 	.word	0x2000020c

08007e38 <_malloc_r>:
 8007e38:	2303      	movs	r3, #3
 8007e3a:	b570      	push	{r4, r5, r6, lr}
 8007e3c:	1ccd      	adds	r5, r1, #3
 8007e3e:	439d      	bics	r5, r3
 8007e40:	3508      	adds	r5, #8
 8007e42:	0006      	movs	r6, r0
 8007e44:	2d0c      	cmp	r5, #12
 8007e46:	d21e      	bcs.n	8007e86 <_malloc_r+0x4e>
 8007e48:	250c      	movs	r5, #12
 8007e4a:	42a9      	cmp	r1, r5
 8007e4c:	d81d      	bhi.n	8007e8a <_malloc_r+0x52>
 8007e4e:	0030      	movs	r0, r6
 8007e50:	f000 f9e7 	bl	8008222 <__malloc_lock>
 8007e54:	4a25      	ldr	r2, [pc, #148]	; (8007eec <_malloc_r+0xb4>)
 8007e56:	6814      	ldr	r4, [r2, #0]
 8007e58:	0021      	movs	r1, r4
 8007e5a:	2900      	cmp	r1, #0
 8007e5c:	d119      	bne.n	8007e92 <_malloc_r+0x5a>
 8007e5e:	4c24      	ldr	r4, [pc, #144]	; (8007ef0 <_malloc_r+0xb8>)
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d103      	bne.n	8007e6e <_malloc_r+0x36>
 8007e66:	0030      	movs	r0, r6
 8007e68:	f000 f9a4 	bl	80081b4 <_sbrk_r>
 8007e6c:	6020      	str	r0, [r4, #0]
 8007e6e:	0029      	movs	r1, r5
 8007e70:	0030      	movs	r0, r6
 8007e72:	f000 f99f 	bl	80081b4 <_sbrk_r>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d12b      	bne.n	8007ed2 <_malloc_r+0x9a>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	0030      	movs	r0, r6
 8007e7e:	6033      	str	r3, [r6, #0]
 8007e80:	f000 f9d0 	bl	8008224 <__malloc_unlock>
 8007e84:	e003      	b.n	8007e8e <_malloc_r+0x56>
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	dadf      	bge.n	8007e4a <_malloc_r+0x12>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	2000      	movs	r0, #0
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	680b      	ldr	r3, [r1, #0]
 8007e94:	1b5b      	subs	r3, r3, r5
 8007e96:	d419      	bmi.n	8007ecc <_malloc_r+0x94>
 8007e98:	2b0b      	cmp	r3, #11
 8007e9a:	d903      	bls.n	8007ea4 <_malloc_r+0x6c>
 8007e9c:	600b      	str	r3, [r1, #0]
 8007e9e:	18cc      	adds	r4, r1, r3
 8007ea0:	6025      	str	r5, [r4, #0]
 8007ea2:	e003      	b.n	8007eac <_malloc_r+0x74>
 8007ea4:	684b      	ldr	r3, [r1, #4]
 8007ea6:	428c      	cmp	r4, r1
 8007ea8:	d10d      	bne.n	8007ec6 <_malloc_r+0x8e>
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	0030      	movs	r0, r6
 8007eae:	f000 f9b9 	bl	8008224 <__malloc_unlock>
 8007eb2:	0020      	movs	r0, r4
 8007eb4:	2207      	movs	r2, #7
 8007eb6:	300b      	adds	r0, #11
 8007eb8:	1d23      	adds	r3, r4, #4
 8007eba:	4390      	bics	r0, r2
 8007ebc:	1ac3      	subs	r3, r0, r3
 8007ebe:	d0e7      	beq.n	8007e90 <_malloc_r+0x58>
 8007ec0:	425a      	negs	r2, r3
 8007ec2:	50e2      	str	r2, [r4, r3]
 8007ec4:	e7e4      	b.n	8007e90 <_malloc_r+0x58>
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	000c      	movs	r4, r1
 8007eca:	e7ef      	b.n	8007eac <_malloc_r+0x74>
 8007ecc:	000c      	movs	r4, r1
 8007ece:	6849      	ldr	r1, [r1, #4]
 8007ed0:	e7c3      	b.n	8007e5a <_malloc_r+0x22>
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	1cc4      	adds	r4, r0, #3
 8007ed6:	439c      	bics	r4, r3
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d0e1      	beq.n	8007ea0 <_malloc_r+0x68>
 8007edc:	1a21      	subs	r1, r4, r0
 8007ede:	0030      	movs	r0, r6
 8007ee0:	f000 f968 	bl	80081b4 <_sbrk_r>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d1db      	bne.n	8007ea0 <_malloc_r+0x68>
 8007ee8:	e7c7      	b.n	8007e7a <_malloc_r+0x42>
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	2000020c 	.word	0x2000020c
 8007ef0:	20000210 	.word	0x20000210

08007ef4 <__ssputs_r>:
 8007ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef6:	688e      	ldr	r6, [r1, #8]
 8007ef8:	b085      	sub	sp, #20
 8007efa:	0007      	movs	r7, r0
 8007efc:	000c      	movs	r4, r1
 8007efe:	9203      	str	r2, [sp, #12]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	429e      	cmp	r6, r3
 8007f04:	d83c      	bhi.n	8007f80 <__ssputs_r+0x8c>
 8007f06:	2390      	movs	r3, #144	; 0x90
 8007f08:	898a      	ldrh	r2, [r1, #12]
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	421a      	tst	r2, r3
 8007f0e:	d034      	beq.n	8007f7a <__ssputs_r+0x86>
 8007f10:	2503      	movs	r5, #3
 8007f12:	6909      	ldr	r1, [r1, #16]
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	9302      	str	r3, [sp, #8]
 8007f1a:	6963      	ldr	r3, [r4, #20]
 8007f1c:	9802      	ldr	r0, [sp, #8]
 8007f1e:	435d      	muls	r5, r3
 8007f20:	0feb      	lsrs	r3, r5, #31
 8007f22:	195d      	adds	r5, r3, r5
 8007f24:	9b01      	ldr	r3, [sp, #4]
 8007f26:	106d      	asrs	r5, r5, #1
 8007f28:	3301      	adds	r3, #1
 8007f2a:	181b      	adds	r3, r3, r0
 8007f2c:	42ab      	cmp	r3, r5
 8007f2e:	d900      	bls.n	8007f32 <__ssputs_r+0x3e>
 8007f30:	001d      	movs	r5, r3
 8007f32:	0553      	lsls	r3, r2, #21
 8007f34:	d532      	bpl.n	8007f9c <__ssputs_r+0xa8>
 8007f36:	0029      	movs	r1, r5
 8007f38:	0038      	movs	r0, r7
 8007f3a:	f7ff ff7d 	bl	8007e38 <_malloc_r>
 8007f3e:	1e06      	subs	r6, r0, #0
 8007f40:	d109      	bne.n	8007f56 <__ssputs_r+0x62>
 8007f42:	230c      	movs	r3, #12
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	2340      	movs	r3, #64	; 0x40
 8007f48:	2001      	movs	r0, #1
 8007f4a:	89a2      	ldrh	r2, [r4, #12]
 8007f4c:	4240      	negs	r0, r0
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	b005      	add	sp, #20
 8007f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f56:	9a02      	ldr	r2, [sp, #8]
 8007f58:	6921      	ldr	r1, [r4, #16]
 8007f5a:	f7ff fc26 	bl	80077aa <memcpy>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	4a14      	ldr	r2, [pc, #80]	; (8007fb4 <__ssputs_r+0xc0>)
 8007f62:	401a      	ands	r2, r3
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	4313      	orrs	r3, r2
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	6126      	str	r6, [r4, #16]
 8007f6e:	18f6      	adds	r6, r6, r3
 8007f70:	6026      	str	r6, [r4, #0]
 8007f72:	6165      	str	r5, [r4, #20]
 8007f74:	9e01      	ldr	r6, [sp, #4]
 8007f76:	1aed      	subs	r5, r5, r3
 8007f78:	60a5      	str	r5, [r4, #8]
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	429e      	cmp	r6, r3
 8007f7e:	d900      	bls.n	8007f82 <__ssputs_r+0x8e>
 8007f80:	9e01      	ldr	r6, [sp, #4]
 8007f82:	0032      	movs	r2, r6
 8007f84:	9903      	ldr	r1, [sp, #12]
 8007f86:	6820      	ldr	r0, [r4, #0]
 8007f88:	f000 f938 	bl	80081fc <memmove>
 8007f8c:	68a3      	ldr	r3, [r4, #8]
 8007f8e:	2000      	movs	r0, #0
 8007f90:	1b9b      	subs	r3, r3, r6
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	199e      	adds	r6, r3, r6
 8007f98:	6026      	str	r6, [r4, #0]
 8007f9a:	e7da      	b.n	8007f52 <__ssputs_r+0x5e>
 8007f9c:	002a      	movs	r2, r5
 8007f9e:	0038      	movs	r0, r7
 8007fa0:	f000 f941 	bl	8008226 <_realloc_r>
 8007fa4:	1e06      	subs	r6, r0, #0
 8007fa6:	d1e0      	bne.n	8007f6a <__ssputs_r+0x76>
 8007fa8:	6921      	ldr	r1, [r4, #16]
 8007faa:	0038      	movs	r0, r7
 8007fac:	f7ff fefa 	bl	8007da4 <_free_r>
 8007fb0:	e7c7      	b.n	8007f42 <__ssputs_r+0x4e>
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	fffffb7f 	.word	0xfffffb7f

08007fb8 <_svfiprintf_r>:
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	b0a1      	sub	sp, #132	; 0x84
 8007fbc:	9003      	str	r0, [sp, #12]
 8007fbe:	001d      	movs	r5, r3
 8007fc0:	898b      	ldrh	r3, [r1, #12]
 8007fc2:	000f      	movs	r7, r1
 8007fc4:	0016      	movs	r6, r2
 8007fc6:	061b      	lsls	r3, r3, #24
 8007fc8:	d511      	bpl.n	8007fee <_svfiprintf_r+0x36>
 8007fca:	690b      	ldr	r3, [r1, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10e      	bne.n	8007fee <_svfiprintf_r+0x36>
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	f7ff ff31 	bl	8007e38 <_malloc_r>
 8007fd6:	6038      	str	r0, [r7, #0]
 8007fd8:	6138      	str	r0, [r7, #16]
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d105      	bne.n	8007fea <_svfiprintf_r+0x32>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	9a03      	ldr	r2, [sp, #12]
 8007fe2:	3801      	subs	r0, #1
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	b021      	add	sp, #132	; 0x84
 8007fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	ac08      	add	r4, sp, #32
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	3320      	adds	r3, #32
 8007ff6:	7663      	strb	r3, [r4, #25]
 8007ff8:	3310      	adds	r3, #16
 8007ffa:	76a3      	strb	r3, [r4, #26]
 8007ffc:	9507      	str	r5, [sp, #28]
 8007ffe:	0035      	movs	r5, r6
 8008000:	782b      	ldrb	r3, [r5, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <_svfiprintf_r+0x52>
 8008006:	2b25      	cmp	r3, #37	; 0x25
 8008008:	d146      	bne.n	8008098 <_svfiprintf_r+0xe0>
 800800a:	1bab      	subs	r3, r5, r6
 800800c:	9305      	str	r3, [sp, #20]
 800800e:	d00c      	beq.n	800802a <_svfiprintf_r+0x72>
 8008010:	0032      	movs	r2, r6
 8008012:	0039      	movs	r1, r7
 8008014:	9803      	ldr	r0, [sp, #12]
 8008016:	f7ff ff6d 	bl	8007ef4 <__ssputs_r>
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	d100      	bne.n	8008020 <_svfiprintf_r+0x68>
 800801e:	e0ae      	b.n	800817e <_svfiprintf_r+0x1c6>
 8008020:	6962      	ldr	r2, [r4, #20]
 8008022:	9b05      	ldr	r3, [sp, #20]
 8008024:	4694      	mov	ip, r2
 8008026:	4463      	add	r3, ip
 8008028:	6163      	str	r3, [r4, #20]
 800802a:	782b      	ldrb	r3, [r5, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d100      	bne.n	8008032 <_svfiprintf_r+0x7a>
 8008030:	e0a5      	b.n	800817e <_svfiprintf_r+0x1c6>
 8008032:	2201      	movs	r2, #1
 8008034:	2300      	movs	r3, #0
 8008036:	4252      	negs	r2, r2
 8008038:	6062      	str	r2, [r4, #4]
 800803a:	a904      	add	r1, sp, #16
 800803c:	3254      	adds	r2, #84	; 0x54
 800803e:	1852      	adds	r2, r2, r1
 8008040:	1c6e      	adds	r6, r5, #1
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	60e3      	str	r3, [r4, #12]
 8008046:	60a3      	str	r3, [r4, #8]
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	65a3      	str	r3, [r4, #88]	; 0x58
 800804c:	7831      	ldrb	r1, [r6, #0]
 800804e:	2205      	movs	r2, #5
 8008050:	4853      	ldr	r0, [pc, #332]	; (80081a0 <_svfiprintf_r+0x1e8>)
 8008052:	f7ff fb9f 	bl	8007794 <memchr>
 8008056:	1c75      	adds	r5, r6, #1
 8008058:	2800      	cmp	r0, #0
 800805a:	d11f      	bne.n	800809c <_svfiprintf_r+0xe4>
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	06d3      	lsls	r3, r2, #27
 8008060:	d504      	bpl.n	800806c <_svfiprintf_r+0xb4>
 8008062:	2353      	movs	r3, #83	; 0x53
 8008064:	a904      	add	r1, sp, #16
 8008066:	185b      	adds	r3, r3, r1
 8008068:	2120      	movs	r1, #32
 800806a:	7019      	strb	r1, [r3, #0]
 800806c:	0713      	lsls	r3, r2, #28
 800806e:	d504      	bpl.n	800807a <_svfiprintf_r+0xc2>
 8008070:	2353      	movs	r3, #83	; 0x53
 8008072:	a904      	add	r1, sp, #16
 8008074:	185b      	adds	r3, r3, r1
 8008076:	212b      	movs	r1, #43	; 0x2b
 8008078:	7019      	strb	r1, [r3, #0]
 800807a:	7833      	ldrb	r3, [r6, #0]
 800807c:	2b2a      	cmp	r3, #42	; 0x2a
 800807e:	d016      	beq.n	80080ae <_svfiprintf_r+0xf6>
 8008080:	0035      	movs	r5, r6
 8008082:	2100      	movs	r1, #0
 8008084:	200a      	movs	r0, #10
 8008086:	68e3      	ldr	r3, [r4, #12]
 8008088:	782a      	ldrb	r2, [r5, #0]
 800808a:	1c6e      	adds	r6, r5, #1
 800808c:	3a30      	subs	r2, #48	; 0x30
 800808e:	2a09      	cmp	r2, #9
 8008090:	d94e      	bls.n	8008130 <_svfiprintf_r+0x178>
 8008092:	2900      	cmp	r1, #0
 8008094:	d018      	beq.n	80080c8 <_svfiprintf_r+0x110>
 8008096:	e010      	b.n	80080ba <_svfiprintf_r+0x102>
 8008098:	3501      	adds	r5, #1
 800809a:	e7b1      	b.n	8008000 <_svfiprintf_r+0x48>
 800809c:	4b40      	ldr	r3, [pc, #256]	; (80081a0 <_svfiprintf_r+0x1e8>)
 800809e:	6822      	ldr	r2, [r4, #0]
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	2301      	movs	r3, #1
 80080a4:	4083      	lsls	r3, r0
 80080a6:	4313      	orrs	r3, r2
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	002e      	movs	r6, r5
 80080ac:	e7ce      	b.n	800804c <_svfiprintf_r+0x94>
 80080ae:	9b07      	ldr	r3, [sp, #28]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	9107      	str	r1, [sp, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	db01      	blt.n	80080be <_svfiprintf_r+0x106>
 80080ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80080bc:	e004      	b.n	80080c8 <_svfiprintf_r+0x110>
 80080be:	425b      	negs	r3, r3
 80080c0:	60e3      	str	r3, [r4, #12]
 80080c2:	2302      	movs	r3, #2
 80080c4:	4313      	orrs	r3, r2
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	782b      	ldrb	r3, [r5, #0]
 80080ca:	2b2e      	cmp	r3, #46	; 0x2e
 80080cc:	d10a      	bne.n	80080e4 <_svfiprintf_r+0x12c>
 80080ce:	786b      	ldrb	r3, [r5, #1]
 80080d0:	2b2a      	cmp	r3, #42	; 0x2a
 80080d2:	d135      	bne.n	8008140 <_svfiprintf_r+0x188>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	3502      	adds	r5, #2
 80080d8:	1d1a      	adds	r2, r3, #4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	9207      	str	r2, [sp, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db2b      	blt.n	800813a <_svfiprintf_r+0x182>
 80080e2:	9309      	str	r3, [sp, #36]	; 0x24
 80080e4:	4e2f      	ldr	r6, [pc, #188]	; (80081a4 <_svfiprintf_r+0x1ec>)
 80080e6:	7829      	ldrb	r1, [r5, #0]
 80080e8:	2203      	movs	r2, #3
 80080ea:	0030      	movs	r0, r6
 80080ec:	f7ff fb52 	bl	8007794 <memchr>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d006      	beq.n	8008102 <_svfiprintf_r+0x14a>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	1b80      	subs	r0, r0, r6
 80080f8:	4083      	lsls	r3, r0
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	3501      	adds	r5, #1
 80080fe:	4313      	orrs	r3, r2
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	7829      	ldrb	r1, [r5, #0]
 8008104:	2206      	movs	r2, #6
 8008106:	4828      	ldr	r0, [pc, #160]	; (80081a8 <_svfiprintf_r+0x1f0>)
 8008108:	1c6e      	adds	r6, r5, #1
 800810a:	7621      	strb	r1, [r4, #24]
 800810c:	f7ff fb42 	bl	8007794 <memchr>
 8008110:	2800      	cmp	r0, #0
 8008112:	d03c      	beq.n	800818e <_svfiprintf_r+0x1d6>
 8008114:	4b25      	ldr	r3, [pc, #148]	; (80081ac <_svfiprintf_r+0x1f4>)
 8008116:	2b00      	cmp	r3, #0
 8008118:	d125      	bne.n	8008166 <_svfiprintf_r+0x1ae>
 800811a:	2207      	movs	r2, #7
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	3307      	adds	r3, #7
 8008120:	4393      	bics	r3, r2
 8008122:	3308      	adds	r3, #8
 8008124:	9307      	str	r3, [sp, #28]
 8008126:	6963      	ldr	r3, [r4, #20]
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	189b      	adds	r3, r3, r2
 800812c:	6163      	str	r3, [r4, #20]
 800812e:	e766      	b.n	8007ffe <_svfiprintf_r+0x46>
 8008130:	4343      	muls	r3, r0
 8008132:	2101      	movs	r1, #1
 8008134:	189b      	adds	r3, r3, r2
 8008136:	0035      	movs	r5, r6
 8008138:	e7a6      	b.n	8008088 <_svfiprintf_r+0xd0>
 800813a:	2301      	movs	r3, #1
 800813c:	425b      	negs	r3, r3
 800813e:	e7d0      	b.n	80080e2 <_svfiprintf_r+0x12a>
 8008140:	2300      	movs	r3, #0
 8008142:	200a      	movs	r0, #10
 8008144:	001a      	movs	r2, r3
 8008146:	3501      	adds	r5, #1
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	7829      	ldrb	r1, [r5, #0]
 800814c:	1c6e      	adds	r6, r5, #1
 800814e:	3930      	subs	r1, #48	; 0x30
 8008150:	2909      	cmp	r1, #9
 8008152:	d903      	bls.n	800815c <_svfiprintf_r+0x1a4>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0c5      	beq.n	80080e4 <_svfiprintf_r+0x12c>
 8008158:	9209      	str	r2, [sp, #36]	; 0x24
 800815a:	e7c3      	b.n	80080e4 <_svfiprintf_r+0x12c>
 800815c:	4342      	muls	r2, r0
 800815e:	2301      	movs	r3, #1
 8008160:	1852      	adds	r2, r2, r1
 8008162:	0035      	movs	r5, r6
 8008164:	e7f1      	b.n	800814a <_svfiprintf_r+0x192>
 8008166:	ab07      	add	r3, sp, #28
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	003a      	movs	r2, r7
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <_svfiprintf_r+0x1f8>)
 800816e:	0021      	movs	r1, r4
 8008170:	9803      	ldr	r0, [sp, #12]
 8008172:	f7fe f89f 	bl	80062b4 <_printf_float>
 8008176:	9004      	str	r0, [sp, #16]
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	3301      	adds	r3, #1
 800817c:	d1d3      	bne.n	8008126 <_svfiprintf_r+0x16e>
 800817e:	89bb      	ldrh	r3, [r7, #12]
 8008180:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008182:	065b      	lsls	r3, r3, #25
 8008184:	d400      	bmi.n	8008188 <_svfiprintf_r+0x1d0>
 8008186:	e72e      	b.n	8007fe6 <_svfiprintf_r+0x2e>
 8008188:	2001      	movs	r0, #1
 800818a:	4240      	negs	r0, r0
 800818c:	e72b      	b.n	8007fe6 <_svfiprintf_r+0x2e>
 800818e:	ab07      	add	r3, sp, #28
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	003a      	movs	r2, r7
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <_svfiprintf_r+0x1f8>)
 8008196:	0021      	movs	r1, r4
 8008198:	9803      	ldr	r0, [sp, #12]
 800819a:	f7fe fb45 	bl	8006828 <_printf_i>
 800819e:	e7ea      	b.n	8008176 <_svfiprintf_r+0x1be>
 80081a0:	080087c4 	.word	0x080087c4
 80081a4:	080087ca 	.word	0x080087ca
 80081a8:	080087ce 	.word	0x080087ce
 80081ac:	080062b5 	.word	0x080062b5
 80081b0:	08007ef5 	.word	0x08007ef5

080081b4 <_sbrk_r>:
 80081b4:	2300      	movs	r3, #0
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	4c06      	ldr	r4, [pc, #24]	; (80081d4 <_sbrk_r+0x20>)
 80081ba:	0005      	movs	r5, r0
 80081bc:	0008      	movs	r0, r1
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	f000 f86c 	bl	800829c <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d103      	bne.n	80081d0 <_sbrk_r+0x1c>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d000      	beq.n	80081d0 <_sbrk_r+0x1c>
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	20000368 	.word	0x20000368

080081d8 <__ascii_mbtowc>:
 80081d8:	b082      	sub	sp, #8
 80081da:	2900      	cmp	r1, #0
 80081dc:	d100      	bne.n	80081e0 <__ascii_mbtowc+0x8>
 80081de:	a901      	add	r1, sp, #4
 80081e0:	1e10      	subs	r0, r2, #0
 80081e2:	d006      	beq.n	80081f2 <__ascii_mbtowc+0x1a>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <__ascii_mbtowc+0x1e>
 80081e8:	7813      	ldrb	r3, [r2, #0]
 80081ea:	600b      	str	r3, [r1, #0]
 80081ec:	7810      	ldrb	r0, [r2, #0]
 80081ee:	1e43      	subs	r3, r0, #1
 80081f0:	4198      	sbcs	r0, r3
 80081f2:	b002      	add	sp, #8
 80081f4:	4770      	bx	lr
 80081f6:	2002      	movs	r0, #2
 80081f8:	4240      	negs	r0, r0
 80081fa:	e7fa      	b.n	80081f2 <__ascii_mbtowc+0x1a>

080081fc <memmove>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4288      	cmp	r0, r1
 8008200:	d902      	bls.n	8008208 <memmove+0xc>
 8008202:	188b      	adds	r3, r1, r2
 8008204:	4298      	cmp	r0, r3
 8008206:	d303      	bcc.n	8008210 <memmove+0x14>
 8008208:	2300      	movs	r3, #0
 800820a:	e007      	b.n	800821c <memmove+0x20>
 800820c:	5c8b      	ldrb	r3, [r1, r2]
 800820e:	5483      	strb	r3, [r0, r2]
 8008210:	3a01      	subs	r2, #1
 8008212:	d2fb      	bcs.n	800820c <memmove+0x10>
 8008214:	bd10      	pop	{r4, pc}
 8008216:	5ccc      	ldrb	r4, [r1, r3]
 8008218:	54c4      	strb	r4, [r0, r3]
 800821a:	3301      	adds	r3, #1
 800821c:	429a      	cmp	r2, r3
 800821e:	d1fa      	bne.n	8008216 <memmove+0x1a>
 8008220:	e7f8      	b.n	8008214 <memmove+0x18>

08008222 <__malloc_lock>:
 8008222:	4770      	bx	lr

08008224 <__malloc_unlock>:
 8008224:	4770      	bx	lr

08008226 <_realloc_r>:
 8008226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008228:	0007      	movs	r7, r0
 800822a:	000d      	movs	r5, r1
 800822c:	0016      	movs	r6, r2
 800822e:	2900      	cmp	r1, #0
 8008230:	d105      	bne.n	800823e <_realloc_r+0x18>
 8008232:	0011      	movs	r1, r2
 8008234:	f7ff fe00 	bl	8007e38 <_malloc_r>
 8008238:	0004      	movs	r4, r0
 800823a:	0020      	movs	r0, r4
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823e:	2a00      	cmp	r2, #0
 8008240:	d103      	bne.n	800824a <_realloc_r+0x24>
 8008242:	f7ff fdaf 	bl	8007da4 <_free_r>
 8008246:	0034      	movs	r4, r6
 8008248:	e7f7      	b.n	800823a <_realloc_r+0x14>
 800824a:	f000 f81e 	bl	800828a <_malloc_usable_size_r>
 800824e:	002c      	movs	r4, r5
 8008250:	42b0      	cmp	r0, r6
 8008252:	d2f2      	bcs.n	800823a <_realloc_r+0x14>
 8008254:	0031      	movs	r1, r6
 8008256:	0038      	movs	r0, r7
 8008258:	f7ff fdee 	bl	8007e38 <_malloc_r>
 800825c:	1e04      	subs	r4, r0, #0
 800825e:	d0ec      	beq.n	800823a <_realloc_r+0x14>
 8008260:	0029      	movs	r1, r5
 8008262:	0032      	movs	r2, r6
 8008264:	f7ff faa1 	bl	80077aa <memcpy>
 8008268:	0029      	movs	r1, r5
 800826a:	0038      	movs	r0, r7
 800826c:	f7ff fd9a 	bl	8007da4 <_free_r>
 8008270:	e7e3      	b.n	800823a <_realloc_r+0x14>

08008272 <__ascii_wctomb>:
 8008272:	1e0b      	subs	r3, r1, #0
 8008274:	d004      	beq.n	8008280 <__ascii_wctomb+0xe>
 8008276:	2aff      	cmp	r2, #255	; 0xff
 8008278:	d904      	bls.n	8008284 <__ascii_wctomb+0x12>
 800827a:	238a      	movs	r3, #138	; 0x8a
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	3b8b      	subs	r3, #139	; 0x8b
 8008280:	0018      	movs	r0, r3
 8008282:	4770      	bx	lr
 8008284:	700a      	strb	r2, [r1, #0]
 8008286:	2301      	movs	r3, #1
 8008288:	e7fa      	b.n	8008280 <__ascii_wctomb+0xe>

0800828a <_malloc_usable_size_r>:
 800828a:	1f0b      	subs	r3, r1, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	1f18      	subs	r0, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	da01      	bge.n	8008298 <_malloc_usable_size_r+0xe>
 8008294:	580b      	ldr	r3, [r1, r0]
 8008296:	18c0      	adds	r0, r0, r3
 8008298:	4770      	bx	lr
	...

0800829c <_sbrk>:
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <_sbrk+0x18>)
 800829e:	0002      	movs	r2, r0
 80082a0:	6819      	ldr	r1, [r3, #0]
 80082a2:	2900      	cmp	r1, #0
 80082a4:	d101      	bne.n	80082aa <_sbrk+0xe>
 80082a6:	4904      	ldr	r1, [pc, #16]	; (80082b8 <_sbrk+0x1c>)
 80082a8:	6019      	str	r1, [r3, #0]
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	1882      	adds	r2, r0, r2
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	20000214 	.word	0x20000214
 80082b8:	20000370 	.word	0x20000370

080082bc <_init>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr

080082c8 <_fini>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr
