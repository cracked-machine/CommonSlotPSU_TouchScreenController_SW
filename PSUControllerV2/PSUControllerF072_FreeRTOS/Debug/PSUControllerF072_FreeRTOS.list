
PSUControllerF072_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae6c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800af30  0800af30  0001af30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b610  0800b610  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b610  0800b610  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b610  0800b610  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b614  0800b614  0001b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c14  200001e8  0800b800  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  0800b800  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cd3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003571  00000000  00000000  00035ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00039458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d0  00000000  00000000  0003a700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a509  00000000  00000000  0003b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125cf  00000000  00000000  00055cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008966e  00000000  00000000  000682a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e18  00000000  00000000  000f1994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af14 	.word	0x0800af14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800af14 	.word	0x0800af14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f861 	bl	80014f0 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ffb9 	bl	80013b0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f853 	bl	80014f0 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f849 	bl	80014f0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffdb 	bl	8001428 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffd1 	bl	8001428 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f7ff ffef 	bl	8000480 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 fe5f 	bl	800216c <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 faf4 	bl	8001aa4 <__aeabi_dsub>
 80004bc:	f001 fe56 	bl	800216c <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_fdiv>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	4657      	mov	r7, sl
 80004d4:	464e      	mov	r6, r9
 80004d6:	4645      	mov	r5, r8
 80004d8:	46de      	mov	lr, fp
 80004da:	0244      	lsls	r4, r0, #9
 80004dc:	b5e0      	push	{r5, r6, r7, lr}
 80004de:	0046      	lsls	r6, r0, #1
 80004e0:	4688      	mov	r8, r1
 80004e2:	0a64      	lsrs	r4, r4, #9
 80004e4:	0e36      	lsrs	r6, r6, #24
 80004e6:	0fc7      	lsrs	r7, r0, #31
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d063      	beq.n	80005b4 <__aeabi_fdiv+0xe4>
 80004ec:	2eff      	cmp	r6, #255	; 0xff
 80004ee:	d024      	beq.n	800053a <__aeabi_fdiv+0x6a>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	00e4      	lsls	r4, r4, #3
 80004f4:	04db      	lsls	r3, r3, #19
 80004f6:	431c      	orrs	r4, r3
 80004f8:	2300      	movs	r3, #0
 80004fa:	4699      	mov	r9, r3
 80004fc:	469b      	mov	fp, r3
 80004fe:	3e7f      	subs	r6, #127	; 0x7f
 8000500:	4643      	mov	r3, r8
 8000502:	4642      	mov	r2, r8
 8000504:	025d      	lsls	r5, r3, #9
 8000506:	0fd2      	lsrs	r2, r2, #31
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	0a6d      	lsrs	r5, r5, #9
 800050c:	0e1b      	lsrs	r3, r3, #24
 800050e:	4690      	mov	r8, r2
 8000510:	4692      	mov	sl, r2
 8000512:	d065      	beq.n	80005e0 <__aeabi_fdiv+0x110>
 8000514:	2bff      	cmp	r3, #255	; 0xff
 8000516:	d055      	beq.n	80005c4 <__aeabi_fdiv+0xf4>
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	2100      	movs	r1, #0
 800051c:	00ed      	lsls	r5, r5, #3
 800051e:	04d2      	lsls	r2, r2, #19
 8000520:	3b7f      	subs	r3, #127	; 0x7f
 8000522:	4315      	orrs	r5, r2
 8000524:	1af6      	subs	r6, r6, r3
 8000526:	4643      	mov	r3, r8
 8000528:	464a      	mov	r2, r9
 800052a:	407b      	eors	r3, r7
 800052c:	2a0f      	cmp	r2, #15
 800052e:	d900      	bls.n	8000532 <__aeabi_fdiv+0x62>
 8000530:	e08d      	b.n	800064e <__aeabi_fdiv+0x17e>
 8000532:	486d      	ldr	r0, [pc, #436]	; (80006e8 <__aeabi_fdiv+0x218>)
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	5882      	ldr	r2, [r0, r2]
 8000538:	4697      	mov	pc, r2
 800053a:	2c00      	cmp	r4, #0
 800053c:	d154      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 800053e:	2308      	movs	r3, #8
 8000540:	4699      	mov	r9, r3
 8000542:	3b06      	subs	r3, #6
 8000544:	26ff      	movs	r6, #255	; 0xff
 8000546:	469b      	mov	fp, r3
 8000548:	e7da      	b.n	8000500 <__aeabi_fdiv+0x30>
 800054a:	2500      	movs	r5, #0
 800054c:	4653      	mov	r3, sl
 800054e:	2902      	cmp	r1, #2
 8000550:	d01b      	beq.n	800058a <__aeabi_fdiv+0xba>
 8000552:	2903      	cmp	r1, #3
 8000554:	d100      	bne.n	8000558 <__aeabi_fdiv+0x88>
 8000556:	e0bf      	b.n	80006d8 <__aeabi_fdiv+0x208>
 8000558:	2901      	cmp	r1, #1
 800055a:	d028      	beq.n	80005ae <__aeabi_fdiv+0xde>
 800055c:	0030      	movs	r0, r6
 800055e:	307f      	adds	r0, #127	; 0x7f
 8000560:	2800      	cmp	r0, #0
 8000562:	dd20      	ble.n	80005a6 <__aeabi_fdiv+0xd6>
 8000564:	076a      	lsls	r2, r5, #29
 8000566:	d004      	beq.n	8000572 <__aeabi_fdiv+0xa2>
 8000568:	220f      	movs	r2, #15
 800056a:	402a      	ands	r2, r5
 800056c:	2a04      	cmp	r2, #4
 800056e:	d000      	beq.n	8000572 <__aeabi_fdiv+0xa2>
 8000570:	3504      	adds	r5, #4
 8000572:	012a      	lsls	r2, r5, #4
 8000574:	d503      	bpl.n	800057e <__aeabi_fdiv+0xae>
 8000576:	0030      	movs	r0, r6
 8000578:	4a5c      	ldr	r2, [pc, #368]	; (80006ec <__aeabi_fdiv+0x21c>)
 800057a:	3080      	adds	r0, #128	; 0x80
 800057c:	4015      	ands	r5, r2
 800057e:	28fe      	cmp	r0, #254	; 0xfe
 8000580:	dc03      	bgt.n	800058a <__aeabi_fdiv+0xba>
 8000582:	01ac      	lsls	r4, r5, #6
 8000584:	0a64      	lsrs	r4, r4, #9
 8000586:	b2c2      	uxtb	r2, r0
 8000588:	e001      	b.n	800058e <__aeabi_fdiv+0xbe>
 800058a:	22ff      	movs	r2, #255	; 0xff
 800058c:	2400      	movs	r4, #0
 800058e:	0264      	lsls	r4, r4, #9
 8000590:	05d2      	lsls	r2, r2, #23
 8000592:	0a60      	lsrs	r0, r4, #9
 8000594:	07db      	lsls	r3, r3, #31
 8000596:	4310      	orrs	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	bc3c      	pop	{r2, r3, r4, r5}
 800059c:	4690      	mov	r8, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	46a2      	mov	sl, r4
 80005a2:	46ab      	mov	fp, r5
 80005a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005a6:	2201      	movs	r2, #1
 80005a8:	1a10      	subs	r0, r2, r0
 80005aa:	281b      	cmp	r0, #27
 80005ac:	dd7c      	ble.n	80006a8 <__aeabi_fdiv+0x1d8>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2400      	movs	r4, #0
 80005b2:	e7ec      	b.n	800058e <__aeabi_fdiv+0xbe>
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d11d      	bne.n	80005f4 <__aeabi_fdiv+0x124>
 80005b8:	2304      	movs	r3, #4
 80005ba:	4699      	mov	r9, r3
 80005bc:	3b03      	subs	r3, #3
 80005be:	2600      	movs	r6, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	e79d      	b.n	8000500 <__aeabi_fdiv+0x30>
 80005c4:	3eff      	subs	r6, #255	; 0xff
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d120      	bne.n	800060c <__aeabi_fdiv+0x13c>
 80005ca:	2102      	movs	r1, #2
 80005cc:	4643      	mov	r3, r8
 80005ce:	464a      	mov	r2, r9
 80005d0:	407b      	eors	r3, r7
 80005d2:	430a      	orrs	r2, r1
 80005d4:	2a0f      	cmp	r2, #15
 80005d6:	d8d8      	bhi.n	800058a <__aeabi_fdiv+0xba>
 80005d8:	4845      	ldr	r0, [pc, #276]	; (80006f0 <__aeabi_fdiv+0x220>)
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	5882      	ldr	r2, [r0, r2]
 80005de:	4697      	mov	pc, r2
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d119      	bne.n	8000618 <__aeabi_fdiv+0x148>
 80005e4:	2101      	movs	r1, #1
 80005e6:	e7f1      	b.n	80005cc <__aeabi_fdiv+0xfc>
 80005e8:	230c      	movs	r3, #12
 80005ea:	4699      	mov	r9, r3
 80005ec:	3b09      	subs	r3, #9
 80005ee:	26ff      	movs	r6, #255	; 0xff
 80005f0:	469b      	mov	fp, r3
 80005f2:	e785      	b.n	8000500 <__aeabi_fdiv+0x30>
 80005f4:	0020      	movs	r0, r4
 80005f6:	f001 ff31 	bl	800245c <__clzsi2>
 80005fa:	2676      	movs	r6, #118	; 0x76
 80005fc:	1f43      	subs	r3, r0, #5
 80005fe:	409c      	lsls	r4, r3
 8000600:	2300      	movs	r3, #0
 8000602:	4276      	negs	r6, r6
 8000604:	1a36      	subs	r6, r6, r0
 8000606:	4699      	mov	r9, r3
 8000608:	469b      	mov	fp, r3
 800060a:	e779      	b.n	8000500 <__aeabi_fdiv+0x30>
 800060c:	464a      	mov	r2, r9
 800060e:	2303      	movs	r3, #3
 8000610:	431a      	orrs	r2, r3
 8000612:	4691      	mov	r9, r2
 8000614:	2103      	movs	r1, #3
 8000616:	e786      	b.n	8000526 <__aeabi_fdiv+0x56>
 8000618:	0028      	movs	r0, r5
 800061a:	f001 ff1f 	bl	800245c <__clzsi2>
 800061e:	1f43      	subs	r3, r0, #5
 8000620:	1836      	adds	r6, r6, r0
 8000622:	409d      	lsls	r5, r3
 8000624:	3676      	adds	r6, #118	; 0x76
 8000626:	2100      	movs	r1, #0
 8000628:	e77d      	b.n	8000526 <__aeabi_fdiv+0x56>
 800062a:	2480      	movs	r4, #128	; 0x80
 800062c:	2300      	movs	r3, #0
 800062e:	03e4      	lsls	r4, r4, #15
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	e7ac      	b.n	800058e <__aeabi_fdiv+0xbe>
 8000634:	2500      	movs	r5, #0
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	03db      	lsls	r3, r3, #15
 800063a:	421c      	tst	r4, r3
 800063c:	d028      	beq.n	8000690 <__aeabi_fdiv+0x1c0>
 800063e:	421d      	tst	r5, r3
 8000640:	d126      	bne.n	8000690 <__aeabi_fdiv+0x1c0>
 8000642:	432b      	orrs	r3, r5
 8000644:	025c      	lsls	r4, r3, #9
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	4643      	mov	r3, r8
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e79f      	b.n	800058e <__aeabi_fdiv+0xbe>
 800064e:	0162      	lsls	r2, r4, #5
 8000650:	016c      	lsls	r4, r5, #5
 8000652:	42a2      	cmp	r2, r4
 8000654:	d224      	bcs.n	80006a0 <__aeabi_fdiv+0x1d0>
 8000656:	211b      	movs	r1, #27
 8000658:	2500      	movs	r5, #0
 800065a:	3e01      	subs	r6, #1
 800065c:	2701      	movs	r7, #1
 800065e:	0010      	movs	r0, r2
 8000660:	006d      	lsls	r5, r5, #1
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	2800      	cmp	r0, #0
 8000666:	db01      	blt.n	800066c <__aeabi_fdiv+0x19c>
 8000668:	4294      	cmp	r4, r2
 800066a:	d801      	bhi.n	8000670 <__aeabi_fdiv+0x1a0>
 800066c:	1b12      	subs	r2, r2, r4
 800066e:	433d      	orrs	r5, r7
 8000670:	3901      	subs	r1, #1
 8000672:	2900      	cmp	r1, #0
 8000674:	d1f3      	bne.n	800065e <__aeabi_fdiv+0x18e>
 8000676:	0014      	movs	r4, r2
 8000678:	1e62      	subs	r2, r4, #1
 800067a:	4194      	sbcs	r4, r2
 800067c:	4325      	orrs	r5, r4
 800067e:	e76d      	b.n	800055c <__aeabi_fdiv+0x8c>
 8000680:	46ba      	mov	sl, r7
 8000682:	4659      	mov	r1, fp
 8000684:	0025      	movs	r5, r4
 8000686:	4653      	mov	r3, sl
 8000688:	2902      	cmp	r1, #2
 800068a:	d000      	beq.n	800068e <__aeabi_fdiv+0x1be>
 800068c:	e761      	b.n	8000552 <__aeabi_fdiv+0x82>
 800068e:	e77c      	b.n	800058a <__aeabi_fdiv+0xba>
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	03db      	lsls	r3, r3, #15
 8000694:	431c      	orrs	r4, r3
 8000696:	0264      	lsls	r4, r4, #9
 8000698:	0a64      	lsrs	r4, r4, #9
 800069a:	003b      	movs	r3, r7
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	e776      	b.n	800058e <__aeabi_fdiv+0xbe>
 80006a0:	1b12      	subs	r2, r2, r4
 80006a2:	211a      	movs	r1, #26
 80006a4:	2501      	movs	r5, #1
 80006a6:	e7d9      	b.n	800065c <__aeabi_fdiv+0x18c>
 80006a8:	369e      	adds	r6, #158	; 0x9e
 80006aa:	002a      	movs	r2, r5
 80006ac:	40b5      	lsls	r5, r6
 80006ae:	002c      	movs	r4, r5
 80006b0:	40c2      	lsrs	r2, r0
 80006b2:	1e65      	subs	r5, r4, #1
 80006b4:	41ac      	sbcs	r4, r5
 80006b6:	4314      	orrs	r4, r2
 80006b8:	0762      	lsls	r2, r4, #29
 80006ba:	d004      	beq.n	80006c6 <__aeabi_fdiv+0x1f6>
 80006bc:	220f      	movs	r2, #15
 80006be:	4022      	ands	r2, r4
 80006c0:	2a04      	cmp	r2, #4
 80006c2:	d000      	beq.n	80006c6 <__aeabi_fdiv+0x1f6>
 80006c4:	3404      	adds	r4, #4
 80006c6:	0162      	lsls	r2, r4, #5
 80006c8:	d403      	bmi.n	80006d2 <__aeabi_fdiv+0x202>
 80006ca:	01a4      	lsls	r4, r4, #6
 80006cc:	0a64      	lsrs	r4, r4, #9
 80006ce:	2200      	movs	r2, #0
 80006d0:	e75d      	b.n	800058e <__aeabi_fdiv+0xbe>
 80006d2:	2201      	movs	r2, #1
 80006d4:	2400      	movs	r4, #0
 80006d6:	e75a      	b.n	800058e <__aeabi_fdiv+0xbe>
 80006d8:	2480      	movs	r4, #128	; 0x80
 80006da:	03e4      	lsls	r4, r4, #15
 80006dc:	432c      	orrs	r4, r5
 80006de:	0264      	lsls	r4, r4, #9
 80006e0:	0a64      	lsrs	r4, r4, #9
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	e753      	b.n	800058e <__aeabi_fdiv+0xbe>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	0800b00c 	.word	0x0800b00c
 80006ec:	f7ffffff 	.word	0xf7ffffff
 80006f0:	0800b04c 	.word	0x0800b04c

080006f4 <__aeabi_ui2f>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	1e04      	subs	r4, r0, #0
 80006f8:	d034      	beq.n	8000764 <__aeabi_ui2f+0x70>
 80006fa:	f001 feaf 	bl	800245c <__clzsi2>
 80006fe:	229e      	movs	r2, #158	; 0x9e
 8000700:	1a12      	subs	r2, r2, r0
 8000702:	2a96      	cmp	r2, #150	; 0x96
 8000704:	dc07      	bgt.n	8000716 <__aeabi_ui2f+0x22>
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	2808      	cmp	r0, #8
 800070a:	dd2e      	ble.n	800076a <__aeabi_ui2f+0x76>
 800070c:	3808      	subs	r0, #8
 800070e:	4084      	lsls	r4, r0
 8000710:	0260      	lsls	r0, r4, #9
 8000712:	0a40      	lsrs	r0, r0, #9
 8000714:	e021      	b.n	800075a <__aeabi_ui2f+0x66>
 8000716:	2a99      	cmp	r2, #153	; 0x99
 8000718:	dd09      	ble.n	800072e <__aeabi_ui2f+0x3a>
 800071a:	0003      	movs	r3, r0
 800071c:	0021      	movs	r1, r4
 800071e:	331b      	adds	r3, #27
 8000720:	4099      	lsls	r1, r3
 8000722:	1e4b      	subs	r3, r1, #1
 8000724:	4199      	sbcs	r1, r3
 8000726:	2305      	movs	r3, #5
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	40dc      	lsrs	r4, r3
 800072c:	430c      	orrs	r4, r1
 800072e:	2805      	cmp	r0, #5
 8000730:	dd01      	ble.n	8000736 <__aeabi_ui2f+0x42>
 8000732:	1f43      	subs	r3, r0, #5
 8000734:	409c      	lsls	r4, r3
 8000736:	0023      	movs	r3, r4
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <__aeabi_ui2f+0x7c>)
 800073a:	400b      	ands	r3, r1
 800073c:	0765      	lsls	r5, r4, #29
 800073e:	d009      	beq.n	8000754 <__aeabi_ui2f+0x60>
 8000740:	250f      	movs	r5, #15
 8000742:	402c      	ands	r4, r5
 8000744:	2c04      	cmp	r4, #4
 8000746:	d005      	beq.n	8000754 <__aeabi_ui2f+0x60>
 8000748:	3304      	adds	r3, #4
 800074a:	015c      	lsls	r4, r3, #5
 800074c:	d502      	bpl.n	8000754 <__aeabi_ui2f+0x60>
 800074e:	229f      	movs	r2, #159	; 0x9f
 8000750:	400b      	ands	r3, r1
 8000752:	1a12      	subs	r2, r2, r0
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	0a58      	lsrs	r0, r3, #9
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	0240      	lsls	r0, r0, #9
 800075c:	05d2      	lsls	r2, r2, #23
 800075e:	0a40      	lsrs	r0, r0, #9
 8000760:	4310      	orrs	r0, r2
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	2200      	movs	r2, #0
 8000766:	2000      	movs	r0, #0
 8000768:	e7f7      	b.n	800075a <__aeabi_ui2f+0x66>
 800076a:	0260      	lsls	r0, r4, #9
 800076c:	0a40      	lsrs	r0, r0, #9
 800076e:	e7f4      	b.n	800075a <__aeabi_ui2f+0x66>
 8000770:	fbffffff 	.word	0xfbffffff

08000774 <__aeabi_dadd>:
 8000774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000776:	464f      	mov	r7, r9
 8000778:	4646      	mov	r6, r8
 800077a:	46d6      	mov	lr, sl
 800077c:	000c      	movs	r4, r1
 800077e:	0309      	lsls	r1, r1, #12
 8000780:	b5c0      	push	{r6, r7, lr}
 8000782:	0a49      	lsrs	r1, r1, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	005e      	lsls	r6, r3, #1
 8000788:	4339      	orrs	r1, r7
 800078a:	031f      	lsls	r7, r3, #12
 800078c:	0fdb      	lsrs	r3, r3, #31
 800078e:	469c      	mov	ip, r3
 8000790:	0065      	lsls	r5, r4, #1
 8000792:	0a7b      	lsrs	r3, r7, #9
 8000794:	0f57      	lsrs	r7, r2, #29
 8000796:	431f      	orrs	r7, r3
 8000798:	0d6d      	lsrs	r5, r5, #21
 800079a:	0fe4      	lsrs	r4, r4, #31
 800079c:	0d76      	lsrs	r6, r6, #21
 800079e:	46a1      	mov	r9, r4
 80007a0:	00c0      	lsls	r0, r0, #3
 80007a2:	46b8      	mov	r8, r7
 80007a4:	00d2      	lsls	r2, r2, #3
 80007a6:	1bab      	subs	r3, r5, r6
 80007a8:	4564      	cmp	r4, ip
 80007aa:	d07b      	beq.n	80008a4 <__aeabi_dadd+0x130>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dd5f      	ble.n	8000870 <__aeabi_dadd+0xfc>
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d000      	beq.n	80007b6 <__aeabi_dadd+0x42>
 80007b4:	e0a4      	b.n	8000900 <__aeabi_dadd+0x18c>
 80007b6:	003e      	movs	r6, r7
 80007b8:	4316      	orrs	r6, r2
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x4a>
 80007bc:	e112      	b.n	80009e4 <__aeabi_dadd+0x270>
 80007be:	1e5e      	subs	r6, r3, #1
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x52>
 80007c4:	e19e      	b.n	8000b04 <__aeabi_dadd+0x390>
 80007c6:	1a87      	subs	r7, r0, r2
 80007c8:	4643      	mov	r3, r8
 80007ca:	42b8      	cmp	r0, r7
 80007cc:	4180      	sbcs	r0, r0
 80007ce:	2501      	movs	r5, #1
 80007d0:	1ac9      	subs	r1, r1, r3
 80007d2:	4240      	negs	r0, r0
 80007d4:	1a09      	subs	r1, r1, r0
 80007d6:	020b      	lsls	r3, r1, #8
 80007d8:	d400      	bmi.n	80007dc <__aeabi_dadd+0x68>
 80007da:	e131      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 80007dc:	0249      	lsls	r1, r1, #9
 80007de:	0a4e      	lsrs	r6, r1, #9
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x72>
 80007e4:	e16e      	b.n	8000ac4 <__aeabi_dadd+0x350>
 80007e6:	0030      	movs	r0, r6
 80007e8:	f001 fe38 	bl	800245c <__clzsi2>
 80007ec:	0003      	movs	r3, r0
 80007ee:	3b08      	subs	r3, #8
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dadd+0x82>
 80007f4:	e161      	b.n	8000aba <__aeabi_dadd+0x346>
 80007f6:	2220      	movs	r2, #32
 80007f8:	0039      	movs	r1, r7
 80007fa:	1ad2      	subs	r2, r2, r3
 80007fc:	409e      	lsls	r6, r3
 80007fe:	40d1      	lsrs	r1, r2
 8000800:	409f      	lsls	r7, r3
 8000802:	430e      	orrs	r6, r1
 8000804:	429d      	cmp	r5, r3
 8000806:	dd00      	ble.n	800080a <__aeabi_dadd+0x96>
 8000808:	e151      	b.n	8000aae <__aeabi_dadd+0x33a>
 800080a:	1b5d      	subs	r5, r3, r5
 800080c:	1c6b      	adds	r3, r5, #1
 800080e:	2b1f      	cmp	r3, #31
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0xa0>
 8000812:	e17c      	b.n	8000b0e <__aeabi_dadd+0x39a>
 8000814:	2120      	movs	r1, #32
 8000816:	1ac9      	subs	r1, r1, r3
 8000818:	003d      	movs	r5, r7
 800081a:	0030      	movs	r0, r6
 800081c:	408f      	lsls	r7, r1
 800081e:	4088      	lsls	r0, r1
 8000820:	40dd      	lsrs	r5, r3
 8000822:	1e79      	subs	r1, r7, #1
 8000824:	418f      	sbcs	r7, r1
 8000826:	0031      	movs	r1, r6
 8000828:	2207      	movs	r2, #7
 800082a:	4328      	orrs	r0, r5
 800082c:	40d9      	lsrs	r1, r3
 800082e:	2500      	movs	r5, #0
 8000830:	4307      	orrs	r7, r0
 8000832:	403a      	ands	r2, r7
 8000834:	2a00      	cmp	r2, #0
 8000836:	d009      	beq.n	800084c <__aeabi_dadd+0xd8>
 8000838:	230f      	movs	r3, #15
 800083a:	403b      	ands	r3, r7
 800083c:	2b04      	cmp	r3, #4
 800083e:	d005      	beq.n	800084c <__aeabi_dadd+0xd8>
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	42bb      	cmp	r3, r7
 8000844:	41bf      	sbcs	r7, r7
 8000846:	427f      	negs	r7, r7
 8000848:	19c9      	adds	r1, r1, r7
 800084a:	001f      	movs	r7, r3
 800084c:	020b      	lsls	r3, r1, #8
 800084e:	d400      	bmi.n	8000852 <__aeabi_dadd+0xde>
 8000850:	e226      	b.n	8000ca0 <__aeabi_dadd+0x52c>
 8000852:	1c6a      	adds	r2, r5, #1
 8000854:	4bc6      	ldr	r3, [pc, #792]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000856:	0555      	lsls	r5, r2, #21
 8000858:	0d6d      	lsrs	r5, r5, #21
 800085a:	429a      	cmp	r2, r3
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0xec>
 800085e:	e106      	b.n	8000a6e <__aeabi_dadd+0x2fa>
 8000860:	4ac4      	ldr	r2, [pc, #784]	; (8000b74 <__aeabi_dadd+0x400>)
 8000862:	08ff      	lsrs	r7, r7, #3
 8000864:	400a      	ands	r2, r1
 8000866:	0753      	lsls	r3, r2, #29
 8000868:	0252      	lsls	r2, r2, #9
 800086a:	433b      	orrs	r3, r7
 800086c:	0b12      	lsrs	r2, r2, #12
 800086e:	e08e      	b.n	800098e <__aeabi_dadd+0x21a>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d000      	beq.n	8000876 <__aeabi_dadd+0x102>
 8000874:	e0b8      	b.n	80009e8 <__aeabi_dadd+0x274>
 8000876:	1c6b      	adds	r3, r5, #1
 8000878:	055b      	lsls	r3, r3, #21
 800087a:	0d5b      	lsrs	r3, r3, #21
 800087c:	2b01      	cmp	r3, #1
 800087e:	dc00      	bgt.n	8000882 <__aeabi_dadd+0x10e>
 8000880:	e130      	b.n	8000ae4 <__aeabi_dadd+0x370>
 8000882:	1a87      	subs	r7, r0, r2
 8000884:	4643      	mov	r3, r8
 8000886:	42b8      	cmp	r0, r7
 8000888:	41b6      	sbcs	r6, r6
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	4276      	negs	r6, r6
 800088e:	1b9e      	subs	r6, r3, r6
 8000890:	0233      	lsls	r3, r6, #8
 8000892:	d500      	bpl.n	8000896 <__aeabi_dadd+0x122>
 8000894:	e14c      	b.n	8000b30 <__aeabi_dadd+0x3bc>
 8000896:	003b      	movs	r3, r7
 8000898:	4333      	orrs	r3, r6
 800089a:	d1a1      	bne.n	80007e0 <__aeabi_dadd+0x6c>
 800089c:	2200      	movs	r2, #0
 800089e:	2400      	movs	r4, #0
 80008a0:	2500      	movs	r5, #0
 80008a2:	e070      	b.n	8000986 <__aeabi_dadd+0x212>
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dc00      	bgt.n	80008aa <__aeabi_dadd+0x136>
 80008a8:	e0e5      	b.n	8000a76 <__aeabi_dadd+0x302>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x13c>
 80008ae:	e083      	b.n	80009b8 <__aeabi_dadd+0x244>
 80008b0:	4eaf      	ldr	r6, [pc, #700]	; (8000b70 <__aeabi_dadd+0x3fc>)
 80008b2:	42b5      	cmp	r5, r6
 80008b4:	d060      	beq.n	8000978 <__aeabi_dadd+0x204>
 80008b6:	2680      	movs	r6, #128	; 0x80
 80008b8:	0436      	lsls	r6, r6, #16
 80008ba:	4337      	orrs	r7, r6
 80008bc:	46b8      	mov	r8, r7
 80008be:	2b38      	cmp	r3, #56	; 0x38
 80008c0:	dc00      	bgt.n	80008c4 <__aeabi_dadd+0x150>
 80008c2:	e13e      	b.n	8000b42 <__aeabi_dadd+0x3ce>
 80008c4:	4643      	mov	r3, r8
 80008c6:	4313      	orrs	r3, r2
 80008c8:	001f      	movs	r7, r3
 80008ca:	1e7a      	subs	r2, r7, #1
 80008cc:	4197      	sbcs	r7, r2
 80008ce:	183f      	adds	r7, r7, r0
 80008d0:	4287      	cmp	r7, r0
 80008d2:	4180      	sbcs	r0, r0
 80008d4:	4240      	negs	r0, r0
 80008d6:	1809      	adds	r1, r1, r0
 80008d8:	020b      	lsls	r3, r1, #8
 80008da:	d400      	bmi.n	80008de <__aeabi_dadd+0x16a>
 80008dc:	e0b0      	b.n	8000a40 <__aeabi_dadd+0x2cc>
 80008de:	4ba4      	ldr	r3, [pc, #656]	; (8000b70 <__aeabi_dadd+0x3fc>)
 80008e0:	3501      	adds	r5, #1
 80008e2:	429d      	cmp	r5, r3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x174>
 80008e6:	e0c3      	b.n	8000a70 <__aeabi_dadd+0x2fc>
 80008e8:	4aa2      	ldr	r2, [pc, #648]	; (8000b74 <__aeabi_dadd+0x400>)
 80008ea:	087b      	lsrs	r3, r7, #1
 80008ec:	400a      	ands	r2, r1
 80008ee:	2101      	movs	r1, #1
 80008f0:	400f      	ands	r7, r1
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0851      	lsrs	r1, r2, #1
 80008f6:	07d3      	lsls	r3, r2, #31
 80008f8:	2207      	movs	r2, #7
 80008fa:	431f      	orrs	r7, r3
 80008fc:	403a      	ands	r2, r7
 80008fe:	e799      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000900:	4e9b      	ldr	r6, [pc, #620]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000902:	42b5      	cmp	r5, r6
 8000904:	d038      	beq.n	8000978 <__aeabi_dadd+0x204>
 8000906:	2680      	movs	r6, #128	; 0x80
 8000908:	0436      	lsls	r6, r6, #16
 800090a:	4337      	orrs	r7, r6
 800090c:	46b8      	mov	r8, r7
 800090e:	2b38      	cmp	r3, #56	; 0x38
 8000910:	dd00      	ble.n	8000914 <__aeabi_dadd+0x1a0>
 8000912:	e0dc      	b.n	8000ace <__aeabi_dadd+0x35a>
 8000914:	2b1f      	cmp	r3, #31
 8000916:	dc00      	bgt.n	800091a <__aeabi_dadd+0x1a6>
 8000918:	e130      	b.n	8000b7c <__aeabi_dadd+0x408>
 800091a:	001e      	movs	r6, r3
 800091c:	4647      	mov	r7, r8
 800091e:	3e20      	subs	r6, #32
 8000920:	40f7      	lsrs	r7, r6
 8000922:	46bc      	mov	ip, r7
 8000924:	2b20      	cmp	r3, #32
 8000926:	d004      	beq.n	8000932 <__aeabi_dadd+0x1be>
 8000928:	2640      	movs	r6, #64	; 0x40
 800092a:	1af3      	subs	r3, r6, r3
 800092c:	4646      	mov	r6, r8
 800092e:	409e      	lsls	r6, r3
 8000930:	4332      	orrs	r2, r6
 8000932:	0017      	movs	r7, r2
 8000934:	4663      	mov	r3, ip
 8000936:	1e7a      	subs	r2, r7, #1
 8000938:	4197      	sbcs	r7, r2
 800093a:	431f      	orrs	r7, r3
 800093c:	e0cc      	b.n	8000ad8 <__aeabi_dadd+0x364>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x1d0>
 8000942:	e204      	b.n	8000d4e <__aeabi_dadd+0x5da>
 8000944:	4643      	mov	r3, r8
 8000946:	4313      	orrs	r3, r2
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x1d8>
 800094a:	e159      	b.n	8000c00 <__aeabi_dadd+0x48c>
 800094c:	074b      	lsls	r3, r1, #29
 800094e:	08c0      	lsrs	r0, r0, #3
 8000950:	4318      	orrs	r0, r3
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	08c9      	lsrs	r1, r1, #3
 8000956:	031b      	lsls	r3, r3, #12
 8000958:	4219      	tst	r1, r3
 800095a:	d008      	beq.n	800096e <__aeabi_dadd+0x1fa>
 800095c:	4645      	mov	r5, r8
 800095e:	08ed      	lsrs	r5, r5, #3
 8000960:	421d      	tst	r5, r3
 8000962:	d104      	bne.n	800096e <__aeabi_dadd+0x1fa>
 8000964:	4643      	mov	r3, r8
 8000966:	08d0      	lsrs	r0, r2, #3
 8000968:	0759      	lsls	r1, r3, #29
 800096a:	4308      	orrs	r0, r1
 800096c:	0029      	movs	r1, r5
 800096e:	0f42      	lsrs	r2, r0, #29
 8000970:	00c9      	lsls	r1, r1, #3
 8000972:	4d7f      	ldr	r5, [pc, #508]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000974:	4311      	orrs	r1, r2
 8000976:	00c0      	lsls	r0, r0, #3
 8000978:	074b      	lsls	r3, r1, #29
 800097a:	08ca      	lsrs	r2, r1, #3
 800097c:	497c      	ldr	r1, [pc, #496]	; (8000b70 <__aeabi_dadd+0x3fc>)
 800097e:	08c0      	lsrs	r0, r0, #3
 8000980:	4303      	orrs	r3, r0
 8000982:	428d      	cmp	r5, r1
 8000984:	d068      	beq.n	8000a58 <__aeabi_dadd+0x2e4>
 8000986:	0312      	lsls	r2, r2, #12
 8000988:	056d      	lsls	r5, r5, #21
 800098a:	0b12      	lsrs	r2, r2, #12
 800098c:	0d6d      	lsrs	r5, r5, #21
 800098e:	2100      	movs	r1, #0
 8000990:	0312      	lsls	r2, r2, #12
 8000992:	0018      	movs	r0, r3
 8000994:	0b13      	lsrs	r3, r2, #12
 8000996:	0d0a      	lsrs	r2, r1, #20
 8000998:	0512      	lsls	r2, r2, #20
 800099a:	431a      	orrs	r2, r3
 800099c:	4b76      	ldr	r3, [pc, #472]	; (8000b78 <__aeabi_dadd+0x404>)
 800099e:	052d      	lsls	r5, r5, #20
 80009a0:	4013      	ands	r3, r2
 80009a2:	432b      	orrs	r3, r5
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	07e4      	lsls	r4, r4, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4323      	orrs	r3, r4
 80009ac:	0019      	movs	r1, r3
 80009ae:	bc1c      	pop	{r2, r3, r4}
 80009b0:	4690      	mov	r8, r2
 80009b2:	4699      	mov	r9, r3
 80009b4:	46a2      	mov	sl, r4
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009b8:	003e      	movs	r6, r7
 80009ba:	4316      	orrs	r6, r2
 80009bc:	d012      	beq.n	80009e4 <__aeabi_dadd+0x270>
 80009be:	1e5e      	subs	r6, r3, #1
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_dadd+0x252>
 80009c4:	e100      	b.n	8000bc8 <__aeabi_dadd+0x454>
 80009c6:	1887      	adds	r7, r0, r2
 80009c8:	4287      	cmp	r7, r0
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	4441      	add	r1, r8
 80009ce:	4240      	negs	r0, r0
 80009d0:	1809      	adds	r1, r1, r0
 80009d2:	2501      	movs	r5, #1
 80009d4:	020b      	lsls	r3, r1, #8
 80009d6:	d533      	bpl.n	8000a40 <__aeabi_dadd+0x2cc>
 80009d8:	2502      	movs	r5, #2
 80009da:	e785      	b.n	80008e8 <__aeabi_dadd+0x174>
 80009dc:	4664      	mov	r4, ip
 80009de:	0033      	movs	r3, r6
 80009e0:	4641      	mov	r1, r8
 80009e2:	0010      	movs	r0, r2
 80009e4:	001d      	movs	r5, r3
 80009e6:	e7c7      	b.n	8000978 <__aeabi_dadd+0x204>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d000      	beq.n	80009ee <__aeabi_dadd+0x27a>
 80009ec:	e0da      	b.n	8000ba4 <__aeabi_dadd+0x430>
 80009ee:	000c      	movs	r4, r1
 80009f0:	4304      	orrs	r4, r0
 80009f2:	d0f3      	beq.n	80009dc <__aeabi_dadd+0x268>
 80009f4:	1c5c      	adds	r4, r3, #1
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x286>
 80009f8:	e19f      	b.n	8000d3a <__aeabi_dadd+0x5c6>
 80009fa:	4c5d      	ldr	r4, [pc, #372]	; (8000b70 <__aeabi_dadd+0x3fc>)
 80009fc:	42a6      	cmp	r6, r4
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x28e>
 8000a00:	e12f      	b.n	8000c62 <__aeabi_dadd+0x4ee>
 8000a02:	43db      	mvns	r3, r3
 8000a04:	2b38      	cmp	r3, #56	; 0x38
 8000a06:	dd00      	ble.n	8000a0a <__aeabi_dadd+0x296>
 8000a08:	e166      	b.n	8000cd8 <__aeabi_dadd+0x564>
 8000a0a:	2b1f      	cmp	r3, #31
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dadd+0x29c>
 8000a0e:	e183      	b.n	8000d18 <__aeabi_dadd+0x5a4>
 8000a10:	2420      	movs	r4, #32
 8000a12:	0005      	movs	r5, r0
 8000a14:	1ae4      	subs	r4, r4, r3
 8000a16:	000f      	movs	r7, r1
 8000a18:	40dd      	lsrs	r5, r3
 8000a1a:	40d9      	lsrs	r1, r3
 8000a1c:	40a0      	lsls	r0, r4
 8000a1e:	4643      	mov	r3, r8
 8000a20:	40a7      	lsls	r7, r4
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	1e44      	subs	r4, r0, #1
 8000a26:	41a0      	sbcs	r0, r4
 8000a28:	4698      	mov	r8, r3
 8000a2a:	432f      	orrs	r7, r5
 8000a2c:	4338      	orrs	r0, r7
 8000a2e:	1a17      	subs	r7, r2, r0
 8000a30:	42ba      	cmp	r2, r7
 8000a32:	4192      	sbcs	r2, r2
 8000a34:	4643      	mov	r3, r8
 8000a36:	4252      	negs	r2, r2
 8000a38:	1a99      	subs	r1, r3, r2
 8000a3a:	4664      	mov	r4, ip
 8000a3c:	0035      	movs	r5, r6
 8000a3e:	e6ca      	b.n	80007d6 <__aeabi_dadd+0x62>
 8000a40:	2207      	movs	r2, #7
 8000a42:	403a      	ands	r2, r7
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d000      	beq.n	8000a4a <__aeabi_dadd+0x2d6>
 8000a48:	e6f6      	b.n	8000838 <__aeabi_dadd+0xc4>
 8000a4a:	074b      	lsls	r3, r1, #29
 8000a4c:	08ca      	lsrs	r2, r1, #3
 8000a4e:	4948      	ldr	r1, [pc, #288]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000a50:	08ff      	lsrs	r7, r7, #3
 8000a52:	433b      	orrs	r3, r7
 8000a54:	428d      	cmp	r5, r1
 8000a56:	d196      	bne.n	8000986 <__aeabi_dadd+0x212>
 8000a58:	0019      	movs	r1, r3
 8000a5a:	4311      	orrs	r1, r2
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x2ec>
 8000a5e:	e19e      	b.n	8000d9e <__aeabi_dadd+0x62a>
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0309      	lsls	r1, r1, #12
 8000a64:	430a      	orrs	r2, r1
 8000a66:	0312      	lsls	r2, r2, #12
 8000a68:	0b12      	lsrs	r2, r2, #12
 8000a6a:	4d41      	ldr	r5, [pc, #260]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000a6c:	e78f      	b.n	800098e <__aeabi_dadd+0x21a>
 8000a6e:	0015      	movs	r5, r2
 8000a70:	2200      	movs	r2, #0
 8000a72:	2300      	movs	r3, #0
 8000a74:	e78b      	b.n	800098e <__aeabi_dadd+0x21a>
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_dadd+0x308>
 8000a7a:	e0c7      	b.n	8000c0c <__aeabi_dadd+0x498>
 8000a7c:	1c6b      	adds	r3, r5, #1
 8000a7e:	055f      	lsls	r7, r3, #21
 8000a80:	0d7f      	lsrs	r7, r7, #21
 8000a82:	2f01      	cmp	r7, #1
 8000a84:	dc00      	bgt.n	8000a88 <__aeabi_dadd+0x314>
 8000a86:	e0f1      	b.n	8000c6c <__aeabi_dadd+0x4f8>
 8000a88:	4d39      	ldr	r5, [pc, #228]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000a8a:	42ab      	cmp	r3, r5
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x31c>
 8000a8e:	e0b9      	b.n	8000c04 <__aeabi_dadd+0x490>
 8000a90:	1885      	adds	r5, r0, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	4285      	cmp	r5, r0
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	4442      	add	r2, r8
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	1851      	adds	r1, r2, r1
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	07cf      	lsls	r7, r1, #31
 8000aa2:	086d      	lsrs	r5, r5, #1
 8000aa4:	432f      	orrs	r7, r5
 8000aa6:	0849      	lsrs	r1, r1, #1
 8000aa8:	403a      	ands	r2, r7
 8000aaa:	001d      	movs	r5, r3
 8000aac:	e6c2      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000aae:	2207      	movs	r2, #7
 8000ab0:	4930      	ldr	r1, [pc, #192]	; (8000b74 <__aeabi_dadd+0x400>)
 8000ab2:	1aed      	subs	r5, r5, r3
 8000ab4:	4031      	ands	r1, r6
 8000ab6:	403a      	ands	r2, r7
 8000ab8:	e6bc      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000aba:	003e      	movs	r6, r7
 8000abc:	3828      	subs	r0, #40	; 0x28
 8000abe:	4086      	lsls	r6, r0
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	e69f      	b.n	8000804 <__aeabi_dadd+0x90>
 8000ac4:	0038      	movs	r0, r7
 8000ac6:	f001 fcc9 	bl	800245c <__clzsi2>
 8000aca:	3020      	adds	r0, #32
 8000acc:	e68e      	b.n	80007ec <__aeabi_dadd+0x78>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	001f      	movs	r7, r3
 8000ad4:	1e7a      	subs	r2, r7, #1
 8000ad6:	4197      	sbcs	r7, r2
 8000ad8:	1bc7      	subs	r7, r0, r7
 8000ada:	42b8      	cmp	r0, r7
 8000adc:	4180      	sbcs	r0, r0
 8000ade:	4240      	negs	r0, r0
 8000ae0:	1a09      	subs	r1, r1, r0
 8000ae2:	e678      	b.n	80007d6 <__aeabi_dadd+0x62>
 8000ae4:	000e      	movs	r6, r1
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	4306      	orrs	r6, r0
 8000aea:	4313      	orrs	r3, r2
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d161      	bne.n	8000bb4 <__aeabi_dadd+0x440>
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dadd+0x382>
 8000af4:	e0f4      	b.n	8000ce0 <__aeabi_dadd+0x56c>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x388>
 8000afa:	e11b      	b.n	8000d34 <__aeabi_dadd+0x5c0>
 8000afc:	4664      	mov	r4, ip
 8000afe:	0039      	movs	r1, r7
 8000b00:	0010      	movs	r0, r2
 8000b02:	e739      	b.n	8000978 <__aeabi_dadd+0x204>
 8000b04:	4f1a      	ldr	r7, [pc, #104]	; (8000b70 <__aeabi_dadd+0x3fc>)
 8000b06:	42bb      	cmp	r3, r7
 8000b08:	d07a      	beq.n	8000c00 <__aeabi_dadd+0x48c>
 8000b0a:	0033      	movs	r3, r6
 8000b0c:	e6ff      	b.n	800090e <__aeabi_dadd+0x19a>
 8000b0e:	0030      	movs	r0, r6
 8000b10:	3d1f      	subs	r5, #31
 8000b12:	40e8      	lsrs	r0, r5
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	d003      	beq.n	8000b20 <__aeabi_dadd+0x3ac>
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	1acb      	subs	r3, r1, r3
 8000b1c:	409e      	lsls	r6, r3
 8000b1e:	4337      	orrs	r7, r6
 8000b20:	1e7b      	subs	r3, r7, #1
 8000b22:	419f      	sbcs	r7, r3
 8000b24:	2207      	movs	r2, #7
 8000b26:	4307      	orrs	r7, r0
 8000b28:	403a      	ands	r2, r7
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	e789      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000b30:	1a17      	subs	r7, r2, r0
 8000b32:	4643      	mov	r3, r8
 8000b34:	42ba      	cmp	r2, r7
 8000b36:	41b6      	sbcs	r6, r6
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	4276      	negs	r6, r6
 8000b3c:	1b8e      	subs	r6, r1, r6
 8000b3e:	4664      	mov	r4, ip
 8000b40:	e64e      	b.n	80007e0 <__aeabi_dadd+0x6c>
 8000b42:	2b1f      	cmp	r3, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x3d4>
 8000b46:	e0ad      	b.n	8000ca4 <__aeabi_dadd+0x530>
 8000b48:	2620      	movs	r6, #32
 8000b4a:	4647      	mov	r7, r8
 8000b4c:	1af6      	subs	r6, r6, r3
 8000b4e:	40b7      	lsls	r7, r6
 8000b50:	46b9      	mov	r9, r7
 8000b52:	0017      	movs	r7, r2
 8000b54:	46b2      	mov	sl, r6
 8000b56:	40df      	lsrs	r7, r3
 8000b58:	464e      	mov	r6, r9
 8000b5a:	433e      	orrs	r6, r7
 8000b5c:	0037      	movs	r7, r6
 8000b5e:	4656      	mov	r6, sl
 8000b60:	40b2      	lsls	r2, r6
 8000b62:	1e56      	subs	r6, r2, #1
 8000b64:	41b2      	sbcs	r2, r6
 8000b66:	4317      	orrs	r7, r2
 8000b68:	4642      	mov	r2, r8
 8000b6a:	40da      	lsrs	r2, r3
 8000b6c:	1889      	adds	r1, r1, r2
 8000b6e:	e6ae      	b.n	80008ce <__aeabi_dadd+0x15a>
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	ff7fffff 	.word	0xff7fffff
 8000b78:	800fffff 	.word	0x800fffff
 8000b7c:	2620      	movs	r6, #32
 8000b7e:	4647      	mov	r7, r8
 8000b80:	1af6      	subs	r6, r6, r3
 8000b82:	40b7      	lsls	r7, r6
 8000b84:	46b9      	mov	r9, r7
 8000b86:	0017      	movs	r7, r2
 8000b88:	46b2      	mov	sl, r6
 8000b8a:	40df      	lsrs	r7, r3
 8000b8c:	464e      	mov	r6, r9
 8000b8e:	433e      	orrs	r6, r7
 8000b90:	0037      	movs	r7, r6
 8000b92:	4656      	mov	r6, sl
 8000b94:	40b2      	lsls	r2, r6
 8000b96:	1e56      	subs	r6, r2, #1
 8000b98:	41b2      	sbcs	r2, r6
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	40da      	lsrs	r2, r3
 8000ba0:	1a89      	subs	r1, r1, r2
 8000ba2:	e799      	b.n	8000ad8 <__aeabi_dadd+0x364>
 8000ba4:	4c7f      	ldr	r4, [pc, #508]	; (8000da4 <__aeabi_dadd+0x630>)
 8000ba6:	42a6      	cmp	r6, r4
 8000ba8:	d05b      	beq.n	8000c62 <__aeabi_dadd+0x4ee>
 8000baa:	2480      	movs	r4, #128	; 0x80
 8000bac:	0424      	lsls	r4, r4, #16
 8000bae:	425b      	negs	r3, r3
 8000bb0:	4321      	orrs	r1, r4
 8000bb2:	e727      	b.n	8000a04 <__aeabi_dadd+0x290>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d10c      	bne.n	8000bd2 <__aeabi_dadd+0x45e>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x44a>
 8000bbc:	e0cb      	b.n	8000d56 <__aeabi_dadd+0x5e2>
 8000bbe:	4664      	mov	r4, ip
 8000bc0:	0039      	movs	r1, r7
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	4d77      	ldr	r5, [pc, #476]	; (8000da4 <__aeabi_dadd+0x630>)
 8000bc6:	e6d7      	b.n	8000978 <__aeabi_dadd+0x204>
 8000bc8:	4f76      	ldr	r7, [pc, #472]	; (8000da4 <__aeabi_dadd+0x630>)
 8000bca:	42bb      	cmp	r3, r7
 8000bcc:	d018      	beq.n	8000c00 <__aeabi_dadd+0x48c>
 8000bce:	0033      	movs	r3, r6
 8000bd0:	e675      	b.n	80008be <__aeabi_dadd+0x14a>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d014      	beq.n	8000c00 <__aeabi_dadd+0x48c>
 8000bd6:	074b      	lsls	r3, r1, #29
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	4318      	orrs	r0, r3
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	08c9      	lsrs	r1, r1, #3
 8000be0:	031b      	lsls	r3, r3, #12
 8000be2:	4219      	tst	r1, r3
 8000be4:	d007      	beq.n	8000bf6 <__aeabi_dadd+0x482>
 8000be6:	08fc      	lsrs	r4, r7, #3
 8000be8:	421c      	tst	r4, r3
 8000bea:	d104      	bne.n	8000bf6 <__aeabi_dadd+0x482>
 8000bec:	0779      	lsls	r1, r7, #29
 8000bee:	08d0      	lsrs	r0, r2, #3
 8000bf0:	4308      	orrs	r0, r1
 8000bf2:	46e1      	mov	r9, ip
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	464c      	mov	r4, r9
 8000bf8:	0f42      	lsrs	r2, r0, #29
 8000bfa:	00c9      	lsls	r1, r1, #3
 8000bfc:	4311      	orrs	r1, r2
 8000bfe:	00c0      	lsls	r0, r0, #3
 8000c00:	4d68      	ldr	r5, [pc, #416]	; (8000da4 <__aeabi_dadd+0x630>)
 8000c02:	e6b9      	b.n	8000978 <__aeabi_dadd+0x204>
 8000c04:	001d      	movs	r5, r3
 8000c06:	2200      	movs	r2, #0
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e6c0      	b.n	800098e <__aeabi_dadd+0x21a>
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d15b      	bne.n	8000cc8 <__aeabi_dadd+0x554>
 8000c10:	000d      	movs	r5, r1
 8000c12:	4305      	orrs	r5, r0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x4a4>
 8000c16:	e6e2      	b.n	80009de <__aeabi_dadd+0x26a>
 8000c18:	1c5d      	adds	r5, r3, #1
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x4aa>
 8000c1c:	e0b0      	b.n	8000d80 <__aeabi_dadd+0x60c>
 8000c1e:	4d61      	ldr	r5, [pc, #388]	; (8000da4 <__aeabi_dadd+0x630>)
 8000c20:	42ae      	cmp	r6, r5
 8000c22:	d01f      	beq.n	8000c64 <__aeabi_dadd+0x4f0>
 8000c24:	43db      	mvns	r3, r3
 8000c26:	2b38      	cmp	r3, #56	; 0x38
 8000c28:	dc71      	bgt.n	8000d0e <__aeabi_dadd+0x59a>
 8000c2a:	2b1f      	cmp	r3, #31
 8000c2c:	dd00      	ble.n	8000c30 <__aeabi_dadd+0x4bc>
 8000c2e:	e096      	b.n	8000d5e <__aeabi_dadd+0x5ea>
 8000c30:	2520      	movs	r5, #32
 8000c32:	000f      	movs	r7, r1
 8000c34:	1aed      	subs	r5, r5, r3
 8000c36:	40af      	lsls	r7, r5
 8000c38:	46b9      	mov	r9, r7
 8000c3a:	0007      	movs	r7, r0
 8000c3c:	46aa      	mov	sl, r5
 8000c3e:	40df      	lsrs	r7, r3
 8000c40:	464d      	mov	r5, r9
 8000c42:	433d      	orrs	r5, r7
 8000c44:	002f      	movs	r7, r5
 8000c46:	4655      	mov	r5, sl
 8000c48:	40a8      	lsls	r0, r5
 8000c4a:	40d9      	lsrs	r1, r3
 8000c4c:	1e45      	subs	r5, r0, #1
 8000c4e:	41a8      	sbcs	r0, r5
 8000c50:	4488      	add	r8, r1
 8000c52:	4307      	orrs	r7, r0
 8000c54:	18bf      	adds	r7, r7, r2
 8000c56:	4297      	cmp	r7, r2
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	4251      	negs	r1, r2
 8000c5c:	4441      	add	r1, r8
 8000c5e:	0035      	movs	r5, r6
 8000c60:	e63a      	b.n	80008d8 <__aeabi_dadd+0x164>
 8000c62:	4664      	mov	r4, ip
 8000c64:	0035      	movs	r5, r6
 8000c66:	4641      	mov	r1, r8
 8000c68:	0010      	movs	r0, r2
 8000c6a:	e685      	b.n	8000978 <__aeabi_dadd+0x204>
 8000c6c:	000b      	movs	r3, r1
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d000      	beq.n	8000c76 <__aeabi_dadd+0x502>
 8000c74:	e663      	b.n	800093e <__aeabi_dadd+0x1ca>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f5      	beq.n	8000c66 <__aeabi_dadd+0x4f2>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x50e>
 8000c80:	e67a      	b.n	8000978 <__aeabi_dadd+0x204>
 8000c82:	1887      	adds	r7, r0, r2
 8000c84:	4287      	cmp	r7, r0
 8000c86:	4180      	sbcs	r0, r0
 8000c88:	2207      	movs	r2, #7
 8000c8a:	4441      	add	r1, r8
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	1809      	adds	r1, r1, r0
 8000c90:	403a      	ands	r2, r7
 8000c92:	020b      	lsls	r3, r1, #8
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_dadd+0x524>
 8000c96:	e6d5      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000c98:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <__aeabi_dadd+0x634>)
 8000c9a:	3501      	adds	r5, #1
 8000c9c:	4019      	ands	r1, r3
 8000c9e:	e5c9      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000ca0:	0038      	movs	r0, r7
 8000ca2:	e669      	b.n	8000978 <__aeabi_dadd+0x204>
 8000ca4:	001e      	movs	r6, r3
 8000ca6:	4647      	mov	r7, r8
 8000ca8:	3e20      	subs	r6, #32
 8000caa:	40f7      	lsrs	r7, r6
 8000cac:	46bc      	mov	ip, r7
 8000cae:	2b20      	cmp	r3, #32
 8000cb0:	d004      	beq.n	8000cbc <__aeabi_dadd+0x548>
 8000cb2:	2640      	movs	r6, #64	; 0x40
 8000cb4:	1af3      	subs	r3, r6, r3
 8000cb6:	4646      	mov	r6, r8
 8000cb8:	409e      	lsls	r6, r3
 8000cba:	4332      	orrs	r2, r6
 8000cbc:	0017      	movs	r7, r2
 8000cbe:	4663      	mov	r3, ip
 8000cc0:	1e7a      	subs	r2, r7, #1
 8000cc2:	4197      	sbcs	r7, r2
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	e602      	b.n	80008ce <__aeabi_dadd+0x15a>
 8000cc8:	4d36      	ldr	r5, [pc, #216]	; (8000da4 <__aeabi_dadd+0x630>)
 8000cca:	42ae      	cmp	r6, r5
 8000ccc:	d0ca      	beq.n	8000c64 <__aeabi_dadd+0x4f0>
 8000cce:	2580      	movs	r5, #128	; 0x80
 8000cd0:	042d      	lsls	r5, r5, #16
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	4329      	orrs	r1, r5
 8000cd6:	e7a6      	b.n	8000c26 <__aeabi_dadd+0x4b2>
 8000cd8:	4308      	orrs	r0, r1
 8000cda:	1e41      	subs	r1, r0, #1
 8000cdc:	4188      	sbcs	r0, r1
 8000cde:	e6a6      	b.n	8000a2e <__aeabi_dadd+0x2ba>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x572>
 8000ce4:	e648      	b.n	8000978 <__aeabi_dadd+0x204>
 8000ce6:	1a87      	subs	r7, r0, r2
 8000ce8:	4643      	mov	r3, r8
 8000cea:	42b8      	cmp	r0, r7
 8000cec:	41b6      	sbcs	r6, r6
 8000cee:	1acb      	subs	r3, r1, r3
 8000cf0:	4276      	negs	r6, r6
 8000cf2:	1b9e      	subs	r6, r3, r6
 8000cf4:	0233      	lsls	r3, r6, #8
 8000cf6:	d54b      	bpl.n	8000d90 <__aeabi_dadd+0x61c>
 8000cf8:	1a17      	subs	r7, r2, r0
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	42ba      	cmp	r2, r7
 8000cfe:	4192      	sbcs	r2, r2
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	4252      	negs	r2, r2
 8000d04:	1a89      	subs	r1, r1, r2
 8000d06:	2207      	movs	r2, #7
 8000d08:	4664      	mov	r4, ip
 8000d0a:	403a      	ands	r2, r7
 8000d0c:	e592      	b.n	8000834 <__aeabi_dadd+0xc0>
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	000f      	movs	r7, r1
 8000d12:	1e79      	subs	r1, r7, #1
 8000d14:	418f      	sbcs	r7, r1
 8000d16:	e79d      	b.n	8000c54 <__aeabi_dadd+0x4e0>
 8000d18:	001c      	movs	r4, r3
 8000d1a:	000f      	movs	r7, r1
 8000d1c:	3c20      	subs	r4, #32
 8000d1e:	40e7      	lsrs	r7, r4
 8000d20:	2b20      	cmp	r3, #32
 8000d22:	d003      	beq.n	8000d2c <__aeabi_dadd+0x5b8>
 8000d24:	2440      	movs	r4, #64	; 0x40
 8000d26:	1ae3      	subs	r3, r4, r3
 8000d28:	4099      	lsls	r1, r3
 8000d2a:	4308      	orrs	r0, r1
 8000d2c:	1e41      	subs	r1, r0, #1
 8000d2e:	4188      	sbcs	r0, r1
 8000d30:	4338      	orrs	r0, r7
 8000d32:	e67c      	b.n	8000a2e <__aeabi_dadd+0x2ba>
 8000d34:	2200      	movs	r2, #0
 8000d36:	2400      	movs	r4, #0
 8000d38:	e625      	b.n	8000986 <__aeabi_dadd+0x212>
 8000d3a:	1a17      	subs	r7, r2, r0
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	42ba      	cmp	r2, r7
 8000d40:	4192      	sbcs	r2, r2
 8000d42:	1a59      	subs	r1, r3, r1
 8000d44:	4252      	negs	r2, r2
 8000d46:	1a89      	subs	r1, r1, r2
 8000d48:	4664      	mov	r4, ip
 8000d4a:	0035      	movs	r5, r6
 8000d4c:	e543      	b.n	80007d6 <__aeabi_dadd+0x62>
 8000d4e:	4641      	mov	r1, r8
 8000d50:	0010      	movs	r0, r2
 8000d52:	4d14      	ldr	r5, [pc, #80]	; (8000da4 <__aeabi_dadd+0x630>)
 8000d54:	e610      	b.n	8000978 <__aeabi_dadd+0x204>
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	2400      	movs	r4, #0
 8000d5a:	0312      	lsls	r2, r2, #12
 8000d5c:	e680      	b.n	8000a60 <__aeabi_dadd+0x2ec>
 8000d5e:	001d      	movs	r5, r3
 8000d60:	000f      	movs	r7, r1
 8000d62:	3d20      	subs	r5, #32
 8000d64:	40ef      	lsrs	r7, r5
 8000d66:	46bc      	mov	ip, r7
 8000d68:	2b20      	cmp	r3, #32
 8000d6a:	d003      	beq.n	8000d74 <__aeabi_dadd+0x600>
 8000d6c:	2540      	movs	r5, #64	; 0x40
 8000d6e:	1aeb      	subs	r3, r5, r3
 8000d70:	4099      	lsls	r1, r3
 8000d72:	4308      	orrs	r0, r1
 8000d74:	0007      	movs	r7, r0
 8000d76:	4663      	mov	r3, ip
 8000d78:	1e78      	subs	r0, r7, #1
 8000d7a:	4187      	sbcs	r7, r0
 8000d7c:	431f      	orrs	r7, r3
 8000d7e:	e769      	b.n	8000c54 <__aeabi_dadd+0x4e0>
 8000d80:	1887      	adds	r7, r0, r2
 8000d82:	4297      	cmp	r7, r2
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4441      	add	r1, r8
 8000d88:	425b      	negs	r3, r3
 8000d8a:	18c9      	adds	r1, r1, r3
 8000d8c:	0035      	movs	r5, r6
 8000d8e:	e5a3      	b.n	80008d8 <__aeabi_dadd+0x164>
 8000d90:	003b      	movs	r3, r7
 8000d92:	4333      	orrs	r3, r6
 8000d94:	d0ce      	beq.n	8000d34 <__aeabi_dadd+0x5c0>
 8000d96:	2207      	movs	r2, #7
 8000d98:	0031      	movs	r1, r6
 8000d9a:	403a      	ands	r2, r7
 8000d9c:	e652      	b.n	8000a44 <__aeabi_dadd+0x2d0>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	001a      	movs	r2, r3
 8000da2:	e5f4      	b.n	800098e <__aeabi_dadd+0x21a>
 8000da4:	000007ff 	.word	0x000007ff
 8000da8:	ff7fffff 	.word	0xff7fffff

08000dac <__aeabi_ddiv>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	4657      	mov	r7, sl
 8000db0:	46de      	mov	lr, fp
 8000db2:	464e      	mov	r6, r9
 8000db4:	4645      	mov	r5, r8
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	4683      	mov	fp, r0
 8000dba:	0007      	movs	r7, r0
 8000dbc:	030e      	lsls	r6, r1, #12
 8000dbe:	0048      	lsls	r0, r1, #1
 8000dc0:	b085      	sub	sp, #20
 8000dc2:	4692      	mov	sl, r2
 8000dc4:	001c      	movs	r4, r3
 8000dc6:	0b36      	lsrs	r6, r6, #12
 8000dc8:	0d40      	lsrs	r0, r0, #21
 8000dca:	0fcd      	lsrs	r5, r1, #31
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0x26>
 8000dd0:	e09d      	b.n	8000f0e <__aeabi_ddiv+0x162>
 8000dd2:	4b95      	ldr	r3, [pc, #596]	; (8001028 <__aeabi_ddiv+0x27c>)
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d039      	beq.n	8000e4c <__aeabi_ddiv+0xa0>
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	00f6      	lsls	r6, r6, #3
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	431e      	orrs	r6, r3
 8000de0:	4a92      	ldr	r2, [pc, #584]	; (800102c <__aeabi_ddiv+0x280>)
 8000de2:	0f7b      	lsrs	r3, r7, #29
 8000de4:	4333      	orrs	r3, r6
 8000de6:	4699      	mov	r9, r3
 8000de8:	4694      	mov	ip, r2
 8000dea:	0003      	movs	r3, r0
 8000dec:	4463      	add	r3, ip
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	00ff      	lsls	r7, r7, #3
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	0323      	lsls	r3, r4, #12
 8000dfa:	0b1b      	lsrs	r3, r3, #12
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	0063      	lsls	r3, r4, #1
 8000e00:	0fe4      	lsrs	r4, r4, #31
 8000e02:	4652      	mov	r2, sl
 8000e04:	0d5b      	lsrs	r3, r3, #21
 8000e06:	9401      	str	r4, [sp, #4]
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x60>
 8000e0a:	e0b3      	b.n	8000f74 <__aeabi_ddiv+0x1c8>
 8000e0c:	4986      	ldr	r1, [pc, #536]	; (8001028 <__aeabi_ddiv+0x27c>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x68>
 8000e12:	e09e      	b.n	8000f52 <__aeabi_ddiv+0x1a6>
 8000e14:	4642      	mov	r2, r8
 8000e16:	00d1      	lsls	r1, r2, #3
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	0412      	lsls	r2, r2, #16
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	4651      	mov	r1, sl
 8000e20:	0f49      	lsrs	r1, r1, #29
 8000e22:	4311      	orrs	r1, r2
 8000e24:	468b      	mov	fp, r1
 8000e26:	4981      	ldr	r1, [pc, #516]	; (800102c <__aeabi_ddiv+0x280>)
 8000e28:	4652      	mov	r2, sl
 8000e2a:	468c      	mov	ip, r1
 8000e2c:	9900      	ldr	r1, [sp, #0]
 8000e2e:	4463      	add	r3, ip
 8000e30:	1acb      	subs	r3, r1, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	002b      	movs	r3, r5
 8000e3a:	4063      	eors	r3, r4
 8000e3c:	469a      	mov	sl, r3
 8000e3e:	2e0f      	cmp	r6, #15
 8000e40:	d900      	bls.n	8000e44 <__aeabi_ddiv+0x98>
 8000e42:	e105      	b.n	8001050 <__aeabi_ddiv+0x2a4>
 8000e44:	4b7a      	ldr	r3, [pc, #488]	; (8001030 <__aeabi_ddiv+0x284>)
 8000e46:	00b6      	lsls	r6, r6, #2
 8000e48:	599b      	ldr	r3, [r3, r6]
 8000e4a:	469f      	mov	pc, r3
 8000e4c:	465b      	mov	r3, fp
 8000e4e:	4333      	orrs	r3, r6
 8000e50:	4699      	mov	r9, r3
 8000e52:	d000      	beq.n	8000e56 <__aeabi_ddiv+0xaa>
 8000e54:	e0b8      	b.n	8000fc8 <__aeabi_ddiv+0x21c>
 8000e56:	2302      	movs	r3, #2
 8000e58:	2608      	movs	r6, #8
 8000e5a:	2700      	movs	r7, #0
 8000e5c:	9000      	str	r0, [sp, #0]
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	e7ca      	b.n	8000df8 <__aeabi_ddiv+0x4c>
 8000e62:	46cb      	mov	fp, r9
 8000e64:	003a      	movs	r2, r7
 8000e66:	9902      	ldr	r1, [sp, #8]
 8000e68:	9501      	str	r5, [sp, #4]
 8000e6a:	9b01      	ldr	r3, [sp, #4]
 8000e6c:	469a      	mov	sl, r3
 8000e6e:	2902      	cmp	r1, #2
 8000e70:	d027      	beq.n	8000ec2 <__aeabi_ddiv+0x116>
 8000e72:	2903      	cmp	r1, #3
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0xcc>
 8000e76:	e280      	b.n	800137a <__aeabi_ddiv+0x5ce>
 8000e78:	2901      	cmp	r1, #1
 8000e7a:	d044      	beq.n	8000f06 <__aeabi_ddiv+0x15a>
 8000e7c:	496d      	ldr	r1, [pc, #436]	; (8001034 <__aeabi_ddiv+0x288>)
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	468c      	mov	ip, r1
 8000e82:	4463      	add	r3, ip
 8000e84:	001c      	movs	r4, r3
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	dd38      	ble.n	8000efc <__aeabi_ddiv+0x150>
 8000e8a:	0753      	lsls	r3, r2, #29
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_ddiv+0xe4>
 8000e8e:	e213      	b.n	80012b8 <__aeabi_ddiv+0x50c>
 8000e90:	08d2      	lsrs	r2, r2, #3
 8000e92:	465b      	mov	r3, fp
 8000e94:	01db      	lsls	r3, r3, #7
 8000e96:	d509      	bpl.n	8000eac <__aeabi_ddiv+0x100>
 8000e98:	4659      	mov	r1, fp
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <__aeabi_ddiv+0x28c>)
 8000e9c:	4019      	ands	r1, r3
 8000e9e:	468b      	mov	fp, r1
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	00c9      	lsls	r1, r1, #3
 8000ea4:	468c      	mov	ip, r1
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	4463      	add	r3, ip
 8000eaa:	001c      	movs	r4, r3
 8000eac:	4b63      	ldr	r3, [pc, #396]	; (800103c <__aeabi_ddiv+0x290>)
 8000eae:	429c      	cmp	r4, r3
 8000eb0:	dc07      	bgt.n	8000ec2 <__aeabi_ddiv+0x116>
 8000eb2:	465b      	mov	r3, fp
 8000eb4:	0564      	lsls	r4, r4, #21
 8000eb6:	075f      	lsls	r7, r3, #29
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	0b1b      	lsrs	r3, r3, #12
 8000ebe:	0d62      	lsrs	r2, r4, #21
 8000ec0:	e002      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	4a58      	ldr	r2, [pc, #352]	; (8001028 <__aeabi_ddiv+0x27c>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	031b      	lsls	r3, r3, #12
 8000ecc:	0b1c      	lsrs	r4, r3, #12
 8000ece:	0d0b      	lsrs	r3, r1, #20
 8000ed0:	051b      	lsls	r3, r3, #20
 8000ed2:	4323      	orrs	r3, r4
 8000ed4:	0514      	lsls	r4, r2, #20
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	; (8001040 <__aeabi_ddiv+0x294>)
 8000ed8:	0038      	movs	r0, r7
 8000eda:	4013      	ands	r3, r2
 8000edc:	431c      	orrs	r4, r3
 8000ede:	4653      	mov	r3, sl
 8000ee0:	0064      	lsls	r4, r4, #1
 8000ee2:	07db      	lsls	r3, r3, #31
 8000ee4:	0864      	lsrs	r4, r4, #1
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	0021      	movs	r1, r4
 8000eea:	b005      	add	sp, #20
 8000eec:	bc3c      	pop	{r2, r3, r4, r5}
 8000eee:	4690      	mov	r8, r2
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	46a2      	mov	sl, r4
 8000ef4:	46ab      	mov	fp, r5
 8000ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4252      	negs	r2, r2
 8000efc:	2301      	movs	r3, #1
 8000efe:	1b1b      	subs	r3, r3, r4
 8000f00:	2b38      	cmp	r3, #56	; 0x38
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_ddiv+0x15a>
 8000f04:	e1ad      	b.n	8001262 <__aeabi_ddiv+0x4b6>
 8000f06:	2200      	movs	r2, #0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	e7dc      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 8000f0e:	465b      	mov	r3, fp
 8000f10:	4333      	orrs	r3, r6
 8000f12:	4699      	mov	r9, r3
 8000f14:	d05e      	beq.n	8000fd4 <__aeabi_ddiv+0x228>
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_ddiv+0x170>
 8000f1a:	e18a      	b.n	8001232 <__aeabi_ddiv+0x486>
 8000f1c:	0030      	movs	r0, r6
 8000f1e:	f001 fa9d 	bl	800245c <__clzsi2>
 8000f22:	0003      	movs	r3, r0
 8000f24:	3b0b      	subs	r3, #11
 8000f26:	2b1c      	cmp	r3, #28
 8000f28:	dd00      	ble.n	8000f2c <__aeabi_ddiv+0x180>
 8000f2a:	e17b      	b.n	8001224 <__aeabi_ddiv+0x478>
 8000f2c:	221d      	movs	r2, #29
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	465a      	mov	r2, fp
 8000f32:	0001      	movs	r1, r0
 8000f34:	40da      	lsrs	r2, r3
 8000f36:	3908      	subs	r1, #8
 8000f38:	408e      	lsls	r6, r1
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	465f      	mov	r7, fp
 8000f3e:	4333      	orrs	r3, r6
 8000f40:	4699      	mov	r9, r3
 8000f42:	408f      	lsls	r7, r1
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <__aeabi_ddiv+0x298>)
 8000f46:	2600      	movs	r6, #0
 8000f48:	1a1b      	subs	r3, r3, r0
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	e752      	b.n	8000df8 <__aeabi_ddiv+0x4c>
 8000f52:	4641      	mov	r1, r8
 8000f54:	4653      	mov	r3, sl
 8000f56:	430b      	orrs	r3, r1
 8000f58:	493b      	ldr	r1, [pc, #236]	; (8001048 <__aeabi_ddiv+0x29c>)
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	468c      	mov	ip, r1
 8000f5e:	9b00      	ldr	r3, [sp, #0]
 8000f60:	4463      	add	r3, ip
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	465b      	mov	r3, fp
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d13b      	bne.n	8000fe2 <__aeabi_ddiv+0x236>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	2102      	movs	r1, #2
 8000f72:	e761      	b.n	8000e38 <__aeabi_ddiv+0x8c>
 8000f74:	4643      	mov	r3, r8
 8000f76:	4313      	orrs	r3, r2
 8000f78:	469b      	mov	fp, r3
 8000f7a:	d037      	beq.n	8000fec <__aeabi_ddiv+0x240>
 8000f7c:	4643      	mov	r3, r8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x1d8>
 8000f82:	e162      	b.n	800124a <__aeabi_ddiv+0x49e>
 8000f84:	4640      	mov	r0, r8
 8000f86:	f001 fa69 	bl	800245c <__clzsi2>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	3b0b      	subs	r3, #11
 8000f8e:	2b1c      	cmp	r3, #28
 8000f90:	dd00      	ble.n	8000f94 <__aeabi_ddiv+0x1e8>
 8000f92:	e153      	b.n	800123c <__aeabi_ddiv+0x490>
 8000f94:	0002      	movs	r2, r0
 8000f96:	4641      	mov	r1, r8
 8000f98:	3a08      	subs	r2, #8
 8000f9a:	4091      	lsls	r1, r2
 8000f9c:	4688      	mov	r8, r1
 8000f9e:	211d      	movs	r1, #29
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	4651      	mov	r1, sl
 8000fa4:	40d9      	lsrs	r1, r3
 8000fa6:	000b      	movs	r3, r1
 8000fa8:	4641      	mov	r1, r8
 8000faa:	430b      	orrs	r3, r1
 8000fac:	469b      	mov	fp, r3
 8000fae:	4653      	mov	r3, sl
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	9b00      	ldr	r3, [sp, #0]
 8000fb6:	4925      	ldr	r1, [pc, #148]	; (800104c <__aeabi_ddiv+0x2a0>)
 8000fb8:	469c      	mov	ip, r3
 8000fba:	4460      	add	r0, ip
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	468c      	mov	ip, r1
 8000fc0:	4463      	add	r3, ip
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e737      	b.n	8000e38 <__aeabi_ddiv+0x8c>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	46b1      	mov	r9, r6
 8000fcc:	9000      	str	r0, [sp, #0]
 8000fce:	260c      	movs	r6, #12
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	e711      	b.n	8000df8 <__aeabi_ddiv+0x4c>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	2604      	movs	r6, #4
 8000fdc:	2700      	movs	r7, #0
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	e70a      	b.n	8000df8 <__aeabi_ddiv+0x4c>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	46c3      	mov	fp, r8
 8000fe6:	431e      	orrs	r6, r3
 8000fe8:	2103      	movs	r1, #3
 8000fea:	e725      	b.n	8000e38 <__aeabi_ddiv+0x8c>
 8000fec:	3301      	adds	r3, #1
 8000fee:	431e      	orrs	r6, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	e720      	b.n	8000e38 <__aeabi_ddiv+0x8c>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	469a      	mov	sl, r3
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	031b      	lsls	r3, r3, #12
 8001000:	4a09      	ldr	r2, [pc, #36]	; (8001028 <__aeabi_ddiv+0x27c>)
 8001002:	e761      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	4649      	mov	r1, r9
 8001008:	031b      	lsls	r3, r3, #12
 800100a:	4219      	tst	r1, r3
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x264>
 800100e:	e0e2      	b.n	80011d6 <__aeabi_ddiv+0x42a>
 8001010:	4659      	mov	r1, fp
 8001012:	4219      	tst	r1, r3
 8001014:	d000      	beq.n	8001018 <__aeabi_ddiv+0x26c>
 8001016:	e0de      	b.n	80011d6 <__aeabi_ddiv+0x42a>
 8001018:	430b      	orrs	r3, r1
 800101a:	031b      	lsls	r3, r3, #12
 800101c:	0017      	movs	r7, r2
 800101e:	0b1b      	lsrs	r3, r3, #12
 8001020:	46a2      	mov	sl, r4
 8001022:	4a01      	ldr	r2, [pc, #4]	; (8001028 <__aeabi_ddiv+0x27c>)
 8001024:	e750      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	000007ff 	.word	0x000007ff
 800102c:	fffffc01 	.word	0xfffffc01
 8001030:	0800b08c 	.word	0x0800b08c
 8001034:	000003ff 	.word	0x000003ff
 8001038:	feffffff 	.word	0xfeffffff
 800103c:	000007fe 	.word	0x000007fe
 8001040:	800fffff 	.word	0x800fffff
 8001044:	fffffc0d 	.word	0xfffffc0d
 8001048:	fffff801 	.word	0xfffff801
 800104c:	000003f3 	.word	0x000003f3
 8001050:	45d9      	cmp	r9, fp
 8001052:	d900      	bls.n	8001056 <__aeabi_ddiv+0x2aa>
 8001054:	e0cb      	b.n	80011ee <__aeabi_ddiv+0x442>
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0x2ae>
 8001058:	e0c6      	b.n	80011e8 <__aeabi_ddiv+0x43c>
 800105a:	003c      	movs	r4, r7
 800105c:	4648      	mov	r0, r9
 800105e:	2700      	movs	r7, #0
 8001060:	9b00      	ldr	r3, [sp, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	465b      	mov	r3, fp
 8001068:	0e16      	lsrs	r6, r2, #24
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	431e      	orrs	r6, r3
 800106e:	0213      	lsls	r3, r2, #8
 8001070:	4698      	mov	r8, r3
 8001072:	0433      	lsls	r3, r6, #16
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	4699      	mov	r9, r3
 8001078:	0c31      	lsrs	r1, r6, #16
 800107a:	9101      	str	r1, [sp, #4]
 800107c:	f7ff f8dc 	bl	8000238 <__aeabi_uidivmod>
 8001080:	464a      	mov	r2, r9
 8001082:	4342      	muls	r2, r0
 8001084:	040b      	lsls	r3, r1, #16
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	0005      	movs	r5, r0
 800108a:	4319      	orrs	r1, r3
 800108c:	428a      	cmp	r2, r1
 800108e:	d907      	bls.n	80010a0 <__aeabi_ddiv+0x2f4>
 8001090:	1989      	adds	r1, r1, r6
 8001092:	3d01      	subs	r5, #1
 8001094:	428e      	cmp	r6, r1
 8001096:	d803      	bhi.n	80010a0 <__aeabi_ddiv+0x2f4>
 8001098:	428a      	cmp	r2, r1
 800109a:	d901      	bls.n	80010a0 <__aeabi_ddiv+0x2f4>
 800109c:	1e85      	subs	r5, r0, #2
 800109e:	1989      	adds	r1, r1, r6
 80010a0:	1a88      	subs	r0, r1, r2
 80010a2:	9901      	ldr	r1, [sp, #4]
 80010a4:	f7ff f8c8 	bl	8000238 <__aeabi_uidivmod>
 80010a8:	0409      	lsls	r1, r1, #16
 80010aa:	468c      	mov	ip, r1
 80010ac:	464a      	mov	r2, r9
 80010ae:	0421      	lsls	r1, r4, #16
 80010b0:	4664      	mov	r4, ip
 80010b2:	4342      	muls	r2, r0
 80010b4:	0c09      	lsrs	r1, r1, #16
 80010b6:	0003      	movs	r3, r0
 80010b8:	4321      	orrs	r1, r4
 80010ba:	428a      	cmp	r2, r1
 80010bc:	d904      	bls.n	80010c8 <__aeabi_ddiv+0x31c>
 80010be:	1989      	adds	r1, r1, r6
 80010c0:	3b01      	subs	r3, #1
 80010c2:	428e      	cmp	r6, r1
 80010c4:	d800      	bhi.n	80010c8 <__aeabi_ddiv+0x31c>
 80010c6:	e0f1      	b.n	80012ac <__aeabi_ddiv+0x500>
 80010c8:	042d      	lsls	r5, r5, #16
 80010ca:	431d      	orrs	r5, r3
 80010cc:	46ab      	mov	fp, r5
 80010ce:	4643      	mov	r3, r8
 80010d0:	1a89      	subs	r1, r1, r2
 80010d2:	4642      	mov	r2, r8
 80010d4:	0c28      	lsrs	r0, r5, #16
 80010d6:	0412      	lsls	r2, r2, #16
 80010d8:	0c1d      	lsrs	r5, r3, #16
 80010da:	465b      	mov	r3, fp
 80010dc:	0c14      	lsrs	r4, r2, #16
 80010de:	0022      	movs	r2, r4
 80010e0:	041b      	lsls	r3, r3, #16
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	435a      	muls	r2, r3
 80010e6:	9403      	str	r4, [sp, #12]
 80010e8:	436b      	muls	r3, r5
 80010ea:	4344      	muls	r4, r0
 80010ec:	9502      	str	r5, [sp, #8]
 80010ee:	4368      	muls	r0, r5
 80010f0:	191b      	adds	r3, r3, r4
 80010f2:	0c15      	lsrs	r5, r2, #16
 80010f4:	18eb      	adds	r3, r5, r3
 80010f6:	429c      	cmp	r4, r3
 80010f8:	d903      	bls.n	8001102 <__aeabi_ddiv+0x356>
 80010fa:	2480      	movs	r4, #128	; 0x80
 80010fc:	0264      	lsls	r4, r4, #9
 80010fe:	46a4      	mov	ip, r4
 8001100:	4460      	add	r0, ip
 8001102:	0c1c      	lsrs	r4, r3, #16
 8001104:	0415      	lsls	r5, r2, #16
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	0c2d      	lsrs	r5, r5, #16
 800110a:	1820      	adds	r0, r4, r0
 800110c:	195d      	adds	r5, r3, r5
 800110e:	4281      	cmp	r1, r0
 8001110:	d377      	bcc.n	8001202 <__aeabi_ddiv+0x456>
 8001112:	d073      	beq.n	80011fc <__aeabi_ddiv+0x450>
 8001114:	1a0c      	subs	r4, r1, r0
 8001116:	4aa2      	ldr	r2, [pc, #648]	; (80013a0 <__aeabi_ddiv+0x5f4>)
 8001118:	1b7d      	subs	r5, r7, r5
 800111a:	42af      	cmp	r7, r5
 800111c:	41bf      	sbcs	r7, r7
 800111e:	4694      	mov	ip, r2
 8001120:	9b00      	ldr	r3, [sp, #0]
 8001122:	427f      	negs	r7, r7
 8001124:	4463      	add	r3, ip
 8001126:	1be0      	subs	r0, r4, r7
 8001128:	001c      	movs	r4, r3
 800112a:	4286      	cmp	r6, r0
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x384>
 800112e:	e0db      	b.n	80012e8 <__aeabi_ddiv+0x53c>
 8001130:	9901      	ldr	r1, [sp, #4]
 8001132:	f7ff f881 	bl	8000238 <__aeabi_uidivmod>
 8001136:	464a      	mov	r2, r9
 8001138:	4342      	muls	r2, r0
 800113a:	040b      	lsls	r3, r1, #16
 800113c:	0c29      	lsrs	r1, r5, #16
 800113e:	0007      	movs	r7, r0
 8001140:	4319      	orrs	r1, r3
 8001142:	428a      	cmp	r2, r1
 8001144:	d907      	bls.n	8001156 <__aeabi_ddiv+0x3aa>
 8001146:	1989      	adds	r1, r1, r6
 8001148:	3f01      	subs	r7, #1
 800114a:	428e      	cmp	r6, r1
 800114c:	d803      	bhi.n	8001156 <__aeabi_ddiv+0x3aa>
 800114e:	428a      	cmp	r2, r1
 8001150:	d901      	bls.n	8001156 <__aeabi_ddiv+0x3aa>
 8001152:	1e87      	subs	r7, r0, #2
 8001154:	1989      	adds	r1, r1, r6
 8001156:	1a88      	subs	r0, r1, r2
 8001158:	9901      	ldr	r1, [sp, #4]
 800115a:	f7ff f86d 	bl	8000238 <__aeabi_uidivmod>
 800115e:	0409      	lsls	r1, r1, #16
 8001160:	464a      	mov	r2, r9
 8001162:	4689      	mov	r9, r1
 8001164:	0429      	lsls	r1, r5, #16
 8001166:	464d      	mov	r5, r9
 8001168:	4342      	muls	r2, r0
 800116a:	0c09      	lsrs	r1, r1, #16
 800116c:	0003      	movs	r3, r0
 800116e:	4329      	orrs	r1, r5
 8001170:	428a      	cmp	r2, r1
 8001172:	d907      	bls.n	8001184 <__aeabi_ddiv+0x3d8>
 8001174:	1989      	adds	r1, r1, r6
 8001176:	3b01      	subs	r3, #1
 8001178:	428e      	cmp	r6, r1
 800117a:	d803      	bhi.n	8001184 <__aeabi_ddiv+0x3d8>
 800117c:	428a      	cmp	r2, r1
 800117e:	d901      	bls.n	8001184 <__aeabi_ddiv+0x3d8>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	1989      	adds	r1, r1, r6
 8001184:	043f      	lsls	r7, r7, #16
 8001186:	1a89      	subs	r1, r1, r2
 8001188:	003a      	movs	r2, r7
 800118a:	9f03      	ldr	r7, [sp, #12]
 800118c:	431a      	orrs	r2, r3
 800118e:	0038      	movs	r0, r7
 8001190:	0413      	lsls	r3, r2, #16
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	4358      	muls	r0, r3
 8001196:	4681      	mov	r9, r0
 8001198:	9802      	ldr	r0, [sp, #8]
 800119a:	0c15      	lsrs	r5, r2, #16
 800119c:	436f      	muls	r7, r5
 800119e:	4343      	muls	r3, r0
 80011a0:	4345      	muls	r5, r0
 80011a2:	4648      	mov	r0, r9
 80011a4:	0c00      	lsrs	r0, r0, #16
 80011a6:	4684      	mov	ip, r0
 80011a8:	19db      	adds	r3, r3, r7
 80011aa:	4463      	add	r3, ip
 80011ac:	429f      	cmp	r7, r3
 80011ae:	d903      	bls.n	80011b8 <__aeabi_ddiv+0x40c>
 80011b0:	2080      	movs	r0, #128	; 0x80
 80011b2:	0240      	lsls	r0, r0, #9
 80011b4:	4684      	mov	ip, r0
 80011b6:	4465      	add	r5, ip
 80011b8:	4648      	mov	r0, r9
 80011ba:	0c1f      	lsrs	r7, r3, #16
 80011bc:	0400      	lsls	r0, r0, #16
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	0c00      	lsrs	r0, r0, #16
 80011c2:	197d      	adds	r5, r7, r5
 80011c4:	1818      	adds	r0, r3, r0
 80011c6:	42a9      	cmp	r1, r5
 80011c8:	d200      	bcs.n	80011cc <__aeabi_ddiv+0x420>
 80011ca:	e084      	b.n	80012d6 <__aeabi_ddiv+0x52a>
 80011cc:	d100      	bne.n	80011d0 <__aeabi_ddiv+0x424>
 80011ce:	e07f      	b.n	80012d0 <__aeabi_ddiv+0x524>
 80011d0:	2301      	movs	r3, #1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	e657      	b.n	8000e86 <__aeabi_ddiv+0xda>
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	464a      	mov	r2, r9
 80011da:	031b      	lsls	r3, r3, #12
 80011dc:	4313      	orrs	r3, r2
 80011de:	031b      	lsls	r3, r3, #12
 80011e0:	0b1b      	lsrs	r3, r3, #12
 80011e2:	46aa      	mov	sl, r5
 80011e4:	4a6f      	ldr	r2, [pc, #444]	; (80013a4 <__aeabi_ddiv+0x5f8>)
 80011e6:	e66f      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 80011e8:	42ba      	cmp	r2, r7
 80011ea:	d900      	bls.n	80011ee <__aeabi_ddiv+0x442>
 80011ec:	e735      	b.n	800105a <__aeabi_ddiv+0x2ae>
 80011ee:	464b      	mov	r3, r9
 80011f0:	07dc      	lsls	r4, r3, #31
 80011f2:	0858      	lsrs	r0, r3, #1
 80011f4:	087b      	lsrs	r3, r7, #1
 80011f6:	431c      	orrs	r4, r3
 80011f8:	07ff      	lsls	r7, r7, #31
 80011fa:	e734      	b.n	8001066 <__aeabi_ddiv+0x2ba>
 80011fc:	2400      	movs	r4, #0
 80011fe:	42af      	cmp	r7, r5
 8001200:	d289      	bcs.n	8001116 <__aeabi_ddiv+0x36a>
 8001202:	4447      	add	r7, r8
 8001204:	4547      	cmp	r7, r8
 8001206:	41a4      	sbcs	r4, r4
 8001208:	465b      	mov	r3, fp
 800120a:	4264      	negs	r4, r4
 800120c:	19a4      	adds	r4, r4, r6
 800120e:	1864      	adds	r4, r4, r1
 8001210:	3b01      	subs	r3, #1
 8001212:	42a6      	cmp	r6, r4
 8001214:	d21e      	bcs.n	8001254 <__aeabi_ddiv+0x4a8>
 8001216:	42a0      	cmp	r0, r4
 8001218:	d86d      	bhi.n	80012f6 <__aeabi_ddiv+0x54a>
 800121a:	d100      	bne.n	800121e <__aeabi_ddiv+0x472>
 800121c:	e0b6      	b.n	800138c <__aeabi_ddiv+0x5e0>
 800121e:	1a24      	subs	r4, r4, r0
 8001220:	469b      	mov	fp, r3
 8001222:	e778      	b.n	8001116 <__aeabi_ddiv+0x36a>
 8001224:	0003      	movs	r3, r0
 8001226:	465a      	mov	r2, fp
 8001228:	3b28      	subs	r3, #40	; 0x28
 800122a:	409a      	lsls	r2, r3
 800122c:	2700      	movs	r7, #0
 800122e:	4691      	mov	r9, r2
 8001230:	e688      	b.n	8000f44 <__aeabi_ddiv+0x198>
 8001232:	4658      	mov	r0, fp
 8001234:	f001 f912 	bl	800245c <__clzsi2>
 8001238:	3020      	adds	r0, #32
 800123a:	e672      	b.n	8000f22 <__aeabi_ddiv+0x176>
 800123c:	0003      	movs	r3, r0
 800123e:	4652      	mov	r2, sl
 8001240:	3b28      	subs	r3, #40	; 0x28
 8001242:	409a      	lsls	r2, r3
 8001244:	4693      	mov	fp, r2
 8001246:	2200      	movs	r2, #0
 8001248:	e6b4      	b.n	8000fb4 <__aeabi_ddiv+0x208>
 800124a:	4650      	mov	r0, sl
 800124c:	f001 f906 	bl	800245c <__clzsi2>
 8001250:	3020      	adds	r0, #32
 8001252:	e69a      	b.n	8000f8a <__aeabi_ddiv+0x1de>
 8001254:	42a6      	cmp	r6, r4
 8001256:	d1e2      	bne.n	800121e <__aeabi_ddiv+0x472>
 8001258:	45b8      	cmp	r8, r7
 800125a:	d9dc      	bls.n	8001216 <__aeabi_ddiv+0x46a>
 800125c:	1a34      	subs	r4, r6, r0
 800125e:	469b      	mov	fp, r3
 8001260:	e759      	b.n	8001116 <__aeabi_ddiv+0x36a>
 8001262:	2b1f      	cmp	r3, #31
 8001264:	dc65      	bgt.n	8001332 <__aeabi_ddiv+0x586>
 8001266:	4c50      	ldr	r4, [pc, #320]	; (80013a8 <__aeabi_ddiv+0x5fc>)
 8001268:	9900      	ldr	r1, [sp, #0]
 800126a:	46a4      	mov	ip, r4
 800126c:	465c      	mov	r4, fp
 800126e:	4461      	add	r1, ip
 8001270:	0008      	movs	r0, r1
 8001272:	408c      	lsls	r4, r1
 8001274:	0011      	movs	r1, r2
 8001276:	4082      	lsls	r2, r0
 8001278:	40d9      	lsrs	r1, r3
 800127a:	1e50      	subs	r0, r2, #1
 800127c:	4182      	sbcs	r2, r0
 800127e:	430c      	orrs	r4, r1
 8001280:	4314      	orrs	r4, r2
 8001282:	465a      	mov	r2, fp
 8001284:	40da      	lsrs	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	0762      	lsls	r2, r4, #29
 800128a:	d009      	beq.n	80012a0 <__aeabi_ddiv+0x4f4>
 800128c:	220f      	movs	r2, #15
 800128e:	4022      	ands	r2, r4
 8001290:	2a04      	cmp	r2, #4
 8001292:	d005      	beq.n	80012a0 <__aeabi_ddiv+0x4f4>
 8001294:	0022      	movs	r2, r4
 8001296:	1d14      	adds	r4, r2, #4
 8001298:	4294      	cmp	r4, r2
 800129a:	4189      	sbcs	r1, r1
 800129c:	4249      	negs	r1, r1
 800129e:	185b      	adds	r3, r3, r1
 80012a0:	021a      	lsls	r2, r3, #8
 80012a2:	d562      	bpl.n	800136a <__aeabi_ddiv+0x5be>
 80012a4:	2201      	movs	r2, #1
 80012a6:	2300      	movs	r3, #0
 80012a8:	2700      	movs	r7, #0
 80012aa:	e60d      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d800      	bhi.n	80012b2 <__aeabi_ddiv+0x506>
 80012b0:	e70a      	b.n	80010c8 <__aeabi_ddiv+0x31c>
 80012b2:	1e83      	subs	r3, r0, #2
 80012b4:	1989      	adds	r1, r1, r6
 80012b6:	e707      	b.n	80010c8 <__aeabi_ddiv+0x31c>
 80012b8:	230f      	movs	r3, #15
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x516>
 80012c0:	e5e6      	b.n	8000e90 <__aeabi_ddiv+0xe4>
 80012c2:	1d17      	adds	r7, r2, #4
 80012c4:	4297      	cmp	r7, r2
 80012c6:	4192      	sbcs	r2, r2
 80012c8:	4253      	negs	r3, r2
 80012ca:	449b      	add	fp, r3
 80012cc:	08fa      	lsrs	r2, r7, #3
 80012ce:	e5e0      	b.n	8000e92 <__aeabi_ddiv+0xe6>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	d100      	bne.n	80012d6 <__aeabi_ddiv+0x52a>
 80012d4:	e5d7      	b.n	8000e86 <__aeabi_ddiv+0xda>
 80012d6:	1871      	adds	r1, r6, r1
 80012d8:	1e53      	subs	r3, r2, #1
 80012da:	42b1      	cmp	r1, r6
 80012dc:	d327      	bcc.n	800132e <__aeabi_ddiv+0x582>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d315      	bcc.n	800130e <__aeabi_ddiv+0x562>
 80012e2:	d058      	beq.n	8001396 <__aeabi_ddiv+0x5ea>
 80012e4:	001a      	movs	r2, r3
 80012e6:	e773      	b.n	80011d0 <__aeabi_ddiv+0x424>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x542>
 80012ec:	e604      	b.n	8000ef8 <__aeabi_ddiv+0x14c>
 80012ee:	2301      	movs	r3, #1
 80012f0:	2200      	movs	r2, #0
 80012f2:	449b      	add	fp, r3
 80012f4:	e5cd      	b.n	8000e92 <__aeabi_ddiv+0xe6>
 80012f6:	2302      	movs	r3, #2
 80012f8:	4447      	add	r7, r8
 80012fa:	4547      	cmp	r7, r8
 80012fc:	4189      	sbcs	r1, r1
 80012fe:	425b      	negs	r3, r3
 8001300:	469c      	mov	ip, r3
 8001302:	4249      	negs	r1, r1
 8001304:	1989      	adds	r1, r1, r6
 8001306:	190c      	adds	r4, r1, r4
 8001308:	44e3      	add	fp, ip
 800130a:	1a24      	subs	r4, r4, r0
 800130c:	e703      	b.n	8001116 <__aeabi_ddiv+0x36a>
 800130e:	4643      	mov	r3, r8
 8001310:	005f      	lsls	r7, r3, #1
 8001312:	4547      	cmp	r7, r8
 8001314:	419b      	sbcs	r3, r3
 8001316:	46b8      	mov	r8, r7
 8001318:	425b      	negs	r3, r3
 800131a:	199e      	adds	r6, r3, r6
 800131c:	3a02      	subs	r2, #2
 800131e:	1989      	adds	r1, r1, r6
 8001320:	42a9      	cmp	r1, r5
 8001322:	d000      	beq.n	8001326 <__aeabi_ddiv+0x57a>
 8001324:	e754      	b.n	80011d0 <__aeabi_ddiv+0x424>
 8001326:	4540      	cmp	r0, r8
 8001328:	d000      	beq.n	800132c <__aeabi_ddiv+0x580>
 800132a:	e751      	b.n	80011d0 <__aeabi_ddiv+0x424>
 800132c:	e5ab      	b.n	8000e86 <__aeabi_ddiv+0xda>
 800132e:	001a      	movs	r2, r3
 8001330:	e7f6      	b.n	8001320 <__aeabi_ddiv+0x574>
 8001332:	211f      	movs	r1, #31
 8001334:	465f      	mov	r7, fp
 8001336:	4249      	negs	r1, r1
 8001338:	1b0c      	subs	r4, r1, r4
 800133a:	40e7      	lsrs	r7, r4
 800133c:	2b20      	cmp	r3, #32
 800133e:	d007      	beq.n	8001350 <__aeabi_ddiv+0x5a4>
 8001340:	491a      	ldr	r1, [pc, #104]	; (80013ac <__aeabi_ddiv+0x600>)
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	468c      	mov	ip, r1
 8001346:	4463      	add	r3, ip
 8001348:	0018      	movs	r0, r3
 800134a:	465b      	mov	r3, fp
 800134c:	4083      	lsls	r3, r0
 800134e:	431a      	orrs	r2, r3
 8001350:	1e50      	subs	r0, r2, #1
 8001352:	4182      	sbcs	r2, r0
 8001354:	433a      	orrs	r2, r7
 8001356:	2707      	movs	r7, #7
 8001358:	2300      	movs	r3, #0
 800135a:	4017      	ands	r7, r2
 800135c:	d009      	beq.n	8001372 <__aeabi_ddiv+0x5c6>
 800135e:	210f      	movs	r1, #15
 8001360:	2300      	movs	r3, #0
 8001362:	4011      	ands	r1, r2
 8001364:	0014      	movs	r4, r2
 8001366:	2904      	cmp	r1, #4
 8001368:	d195      	bne.n	8001296 <__aeabi_ddiv+0x4ea>
 800136a:	0022      	movs	r2, r4
 800136c:	075f      	lsls	r7, r3, #29
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	0b1b      	lsrs	r3, r3, #12
 8001372:	08d2      	lsrs	r2, r2, #3
 8001374:	4317      	orrs	r7, r2
 8001376:	2200      	movs	r2, #0
 8001378:	e5a6      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	4659      	mov	r1, fp
 800137e:	031b      	lsls	r3, r3, #12
 8001380:	430b      	orrs	r3, r1
 8001382:	031b      	lsls	r3, r3, #12
 8001384:	0017      	movs	r7, r2
 8001386:	0b1b      	lsrs	r3, r3, #12
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <__aeabi_ddiv+0x5f8>)
 800138a:	e59d      	b.n	8000ec8 <__aeabi_ddiv+0x11c>
 800138c:	42bd      	cmp	r5, r7
 800138e:	d8b2      	bhi.n	80012f6 <__aeabi_ddiv+0x54a>
 8001390:	469b      	mov	fp, r3
 8001392:	2400      	movs	r4, #0
 8001394:	e6bf      	b.n	8001116 <__aeabi_ddiv+0x36a>
 8001396:	4580      	cmp	r8, r0
 8001398:	d3b9      	bcc.n	800130e <__aeabi_ddiv+0x562>
 800139a:	001a      	movs	r2, r3
 800139c:	e7c3      	b.n	8001326 <__aeabi_ddiv+0x57a>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	000003ff 	.word	0x000003ff
 80013a4:	000007ff 	.word	0x000007ff
 80013a8:	0000041e 	.word	0x0000041e
 80013ac:	0000043e 	.word	0x0000043e

080013b0 <__eqdf2>:
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	464f      	mov	r7, r9
 80013b4:	4646      	mov	r6, r8
 80013b6:	46d6      	mov	lr, sl
 80013b8:	4684      	mov	ip, r0
 80013ba:	b5c0      	push	{r6, r7, lr}
 80013bc:	4680      	mov	r8, r0
 80013be:	4e19      	ldr	r6, [pc, #100]	; (8001424 <__eqdf2+0x74>)
 80013c0:	0318      	lsls	r0, r3, #12
 80013c2:	030f      	lsls	r7, r1, #12
 80013c4:	004d      	lsls	r5, r1, #1
 80013c6:	0b00      	lsrs	r0, r0, #12
 80013c8:	005c      	lsls	r4, r3, #1
 80013ca:	4682      	mov	sl, r0
 80013cc:	0b3f      	lsrs	r7, r7, #12
 80013ce:	0d6d      	lsrs	r5, r5, #21
 80013d0:	0fc9      	lsrs	r1, r1, #31
 80013d2:	4691      	mov	r9, r2
 80013d4:	0d64      	lsrs	r4, r4, #21
 80013d6:	0fdb      	lsrs	r3, r3, #31
 80013d8:	2001      	movs	r0, #1
 80013da:	42b5      	cmp	r5, r6
 80013dc:	d00a      	beq.n	80013f4 <__eqdf2+0x44>
 80013de:	42b4      	cmp	r4, r6
 80013e0:	d003      	beq.n	80013ea <__eqdf2+0x3a>
 80013e2:	42a5      	cmp	r5, r4
 80013e4:	d101      	bne.n	80013ea <__eqdf2+0x3a>
 80013e6:	4557      	cmp	r7, sl
 80013e8:	d00c      	beq.n	8001404 <__eqdf2+0x54>
 80013ea:	bc1c      	pop	{r2, r3, r4}
 80013ec:	4690      	mov	r8, r2
 80013ee:	4699      	mov	r9, r3
 80013f0:	46a2      	mov	sl, r4
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	4666      	mov	r6, ip
 80013f6:	433e      	orrs	r6, r7
 80013f8:	d1f7      	bne.n	80013ea <__eqdf2+0x3a>
 80013fa:	42ac      	cmp	r4, r5
 80013fc:	d1f5      	bne.n	80013ea <__eqdf2+0x3a>
 80013fe:	4654      	mov	r4, sl
 8001400:	4314      	orrs	r4, r2
 8001402:	d1f2      	bne.n	80013ea <__eqdf2+0x3a>
 8001404:	2001      	movs	r0, #1
 8001406:	45c8      	cmp	r8, r9
 8001408:	d1ef      	bne.n	80013ea <__eqdf2+0x3a>
 800140a:	4299      	cmp	r1, r3
 800140c:	d007      	beq.n	800141e <__eqdf2+0x6e>
 800140e:	2d00      	cmp	r5, #0
 8001410:	d1eb      	bne.n	80013ea <__eqdf2+0x3a>
 8001412:	4663      	mov	r3, ip
 8001414:	431f      	orrs	r7, r3
 8001416:	0038      	movs	r0, r7
 8001418:	1e47      	subs	r7, r0, #1
 800141a:	41b8      	sbcs	r0, r7
 800141c:	e7e5      	b.n	80013ea <__eqdf2+0x3a>
 800141e:	2000      	movs	r0, #0
 8001420:	e7e3      	b.n	80013ea <__eqdf2+0x3a>
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	000007ff 	.word	0x000007ff

08001428 <__gedf2>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	464f      	mov	r7, r9
 800142c:	4646      	mov	r6, r8
 800142e:	46d6      	mov	lr, sl
 8001430:	004d      	lsls	r5, r1, #1
 8001432:	b5c0      	push	{r6, r7, lr}
 8001434:	030e      	lsls	r6, r1, #12
 8001436:	0fc9      	lsrs	r1, r1, #31
 8001438:	468a      	mov	sl, r1
 800143a:	492c      	ldr	r1, [pc, #176]	; (80014ec <__gedf2+0xc4>)
 800143c:	031f      	lsls	r7, r3, #12
 800143e:	005c      	lsls	r4, r3, #1
 8001440:	4680      	mov	r8, r0
 8001442:	0b36      	lsrs	r6, r6, #12
 8001444:	0d6d      	lsrs	r5, r5, #21
 8001446:	4691      	mov	r9, r2
 8001448:	0b3f      	lsrs	r7, r7, #12
 800144a:	0d64      	lsrs	r4, r4, #21
 800144c:	0fdb      	lsrs	r3, r3, #31
 800144e:	428d      	cmp	r5, r1
 8001450:	d01e      	beq.n	8001490 <__gedf2+0x68>
 8001452:	428c      	cmp	r4, r1
 8001454:	d016      	beq.n	8001484 <__gedf2+0x5c>
 8001456:	2d00      	cmp	r5, #0
 8001458:	d11e      	bne.n	8001498 <__gedf2+0x70>
 800145a:	4330      	orrs	r0, r6
 800145c:	4684      	mov	ip, r0
 800145e:	2c00      	cmp	r4, #0
 8001460:	d101      	bne.n	8001466 <__gedf2+0x3e>
 8001462:	433a      	orrs	r2, r7
 8001464:	d023      	beq.n	80014ae <__gedf2+0x86>
 8001466:	4662      	mov	r2, ip
 8001468:	2a00      	cmp	r2, #0
 800146a:	d01a      	beq.n	80014a2 <__gedf2+0x7a>
 800146c:	459a      	cmp	sl, r3
 800146e:	d029      	beq.n	80014c4 <__gedf2+0x9c>
 8001470:	4651      	mov	r1, sl
 8001472:	2002      	movs	r0, #2
 8001474:	3901      	subs	r1, #1
 8001476:	4008      	ands	r0, r1
 8001478:	3801      	subs	r0, #1
 800147a:	bc1c      	pop	{r2, r3, r4}
 800147c:	4690      	mov	r8, r2
 800147e:	4699      	mov	r9, r3
 8001480:	46a2      	mov	sl, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0039      	movs	r1, r7
 8001486:	4311      	orrs	r1, r2
 8001488:	d0e5      	beq.n	8001456 <__gedf2+0x2e>
 800148a:	2002      	movs	r0, #2
 800148c:	4240      	negs	r0, r0
 800148e:	e7f4      	b.n	800147a <__gedf2+0x52>
 8001490:	4330      	orrs	r0, r6
 8001492:	d1fa      	bne.n	800148a <__gedf2+0x62>
 8001494:	42ac      	cmp	r4, r5
 8001496:	d00f      	beq.n	80014b8 <__gedf2+0x90>
 8001498:	2c00      	cmp	r4, #0
 800149a:	d10f      	bne.n	80014bc <__gedf2+0x94>
 800149c:	433a      	orrs	r2, r7
 800149e:	d0e7      	beq.n	8001470 <__gedf2+0x48>
 80014a0:	e00c      	b.n	80014bc <__gedf2+0x94>
 80014a2:	2201      	movs	r2, #1
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4393      	bics	r3, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	3001      	adds	r0, #1
 80014ac:	e7e5      	b.n	800147a <__gedf2+0x52>
 80014ae:	4663      	mov	r3, ip
 80014b0:	2000      	movs	r0, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0e1      	beq.n	800147a <__gedf2+0x52>
 80014b6:	e7db      	b.n	8001470 <__gedf2+0x48>
 80014b8:	433a      	orrs	r2, r7
 80014ba:	d1e6      	bne.n	800148a <__gedf2+0x62>
 80014bc:	459a      	cmp	sl, r3
 80014be:	d1d7      	bne.n	8001470 <__gedf2+0x48>
 80014c0:	42a5      	cmp	r5, r4
 80014c2:	dcd5      	bgt.n	8001470 <__gedf2+0x48>
 80014c4:	42a5      	cmp	r5, r4
 80014c6:	db05      	blt.n	80014d4 <__gedf2+0xac>
 80014c8:	42be      	cmp	r6, r7
 80014ca:	d8d1      	bhi.n	8001470 <__gedf2+0x48>
 80014cc:	d008      	beq.n	80014e0 <__gedf2+0xb8>
 80014ce:	2000      	movs	r0, #0
 80014d0:	42be      	cmp	r6, r7
 80014d2:	d2d2      	bcs.n	800147a <__gedf2+0x52>
 80014d4:	4650      	mov	r0, sl
 80014d6:	2301      	movs	r3, #1
 80014d8:	3801      	subs	r0, #1
 80014da:	4398      	bics	r0, r3
 80014dc:	3001      	adds	r0, #1
 80014de:	e7cc      	b.n	800147a <__gedf2+0x52>
 80014e0:	45c8      	cmp	r8, r9
 80014e2:	d8c5      	bhi.n	8001470 <__gedf2+0x48>
 80014e4:	2000      	movs	r0, #0
 80014e6:	45c8      	cmp	r8, r9
 80014e8:	d3f4      	bcc.n	80014d4 <__gedf2+0xac>
 80014ea:	e7c6      	b.n	800147a <__gedf2+0x52>
 80014ec:	000007ff 	.word	0x000007ff

080014f0 <__ledf2>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	464f      	mov	r7, r9
 80014f4:	4646      	mov	r6, r8
 80014f6:	46d6      	mov	lr, sl
 80014f8:	004d      	lsls	r5, r1, #1
 80014fa:	b5c0      	push	{r6, r7, lr}
 80014fc:	030e      	lsls	r6, r1, #12
 80014fe:	0fc9      	lsrs	r1, r1, #31
 8001500:	468a      	mov	sl, r1
 8001502:	492e      	ldr	r1, [pc, #184]	; (80015bc <__ledf2+0xcc>)
 8001504:	031f      	lsls	r7, r3, #12
 8001506:	005c      	lsls	r4, r3, #1
 8001508:	4680      	mov	r8, r0
 800150a:	0b36      	lsrs	r6, r6, #12
 800150c:	0d6d      	lsrs	r5, r5, #21
 800150e:	4691      	mov	r9, r2
 8001510:	0b3f      	lsrs	r7, r7, #12
 8001512:	0d64      	lsrs	r4, r4, #21
 8001514:	0fdb      	lsrs	r3, r3, #31
 8001516:	428d      	cmp	r5, r1
 8001518:	d018      	beq.n	800154c <__ledf2+0x5c>
 800151a:	428c      	cmp	r4, r1
 800151c:	d011      	beq.n	8001542 <__ledf2+0x52>
 800151e:	2d00      	cmp	r5, #0
 8001520:	d118      	bne.n	8001554 <__ledf2+0x64>
 8001522:	4330      	orrs	r0, r6
 8001524:	4684      	mov	ip, r0
 8001526:	2c00      	cmp	r4, #0
 8001528:	d11e      	bne.n	8001568 <__ledf2+0x78>
 800152a:	433a      	orrs	r2, r7
 800152c:	d11c      	bne.n	8001568 <__ledf2+0x78>
 800152e:	4663      	mov	r3, ip
 8001530:	2000      	movs	r0, #0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d030      	beq.n	8001598 <__ledf2+0xa8>
 8001536:	4651      	mov	r1, sl
 8001538:	2002      	movs	r0, #2
 800153a:	3901      	subs	r1, #1
 800153c:	4008      	ands	r0, r1
 800153e:	3801      	subs	r0, #1
 8001540:	e02a      	b.n	8001598 <__ledf2+0xa8>
 8001542:	0039      	movs	r1, r7
 8001544:	4311      	orrs	r1, r2
 8001546:	d0ea      	beq.n	800151e <__ledf2+0x2e>
 8001548:	2002      	movs	r0, #2
 800154a:	e025      	b.n	8001598 <__ledf2+0xa8>
 800154c:	4330      	orrs	r0, r6
 800154e:	d1fb      	bne.n	8001548 <__ledf2+0x58>
 8001550:	42ac      	cmp	r4, r5
 8001552:	d026      	beq.n	80015a2 <__ledf2+0xb2>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d126      	bne.n	80015a6 <__ledf2+0xb6>
 8001558:	433a      	orrs	r2, r7
 800155a:	d124      	bne.n	80015a6 <__ledf2+0xb6>
 800155c:	4651      	mov	r1, sl
 800155e:	2002      	movs	r0, #2
 8001560:	3901      	subs	r1, #1
 8001562:	4008      	ands	r0, r1
 8001564:	3801      	subs	r0, #1
 8001566:	e017      	b.n	8001598 <__ledf2+0xa8>
 8001568:	4662      	mov	r2, ip
 800156a:	2a00      	cmp	r2, #0
 800156c:	d00f      	beq.n	800158e <__ledf2+0x9e>
 800156e:	459a      	cmp	sl, r3
 8001570:	d1e1      	bne.n	8001536 <__ledf2+0x46>
 8001572:	42a5      	cmp	r5, r4
 8001574:	db05      	blt.n	8001582 <__ledf2+0x92>
 8001576:	42be      	cmp	r6, r7
 8001578:	d8dd      	bhi.n	8001536 <__ledf2+0x46>
 800157a:	d019      	beq.n	80015b0 <__ledf2+0xc0>
 800157c:	2000      	movs	r0, #0
 800157e:	42be      	cmp	r6, r7
 8001580:	d20a      	bcs.n	8001598 <__ledf2+0xa8>
 8001582:	4650      	mov	r0, sl
 8001584:	2301      	movs	r3, #1
 8001586:	3801      	subs	r0, #1
 8001588:	4398      	bics	r0, r3
 800158a:	3001      	adds	r0, #1
 800158c:	e004      	b.n	8001598 <__ledf2+0xa8>
 800158e:	2201      	movs	r2, #1
 8001590:	3b01      	subs	r3, #1
 8001592:	4393      	bics	r3, r2
 8001594:	0018      	movs	r0, r3
 8001596:	3001      	adds	r0, #1
 8001598:	bc1c      	pop	{r2, r3, r4}
 800159a:	4690      	mov	r8, r2
 800159c:	4699      	mov	r9, r3
 800159e:	46a2      	mov	sl, r4
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	433a      	orrs	r2, r7
 80015a4:	d1d0      	bne.n	8001548 <__ledf2+0x58>
 80015a6:	459a      	cmp	sl, r3
 80015a8:	d1c5      	bne.n	8001536 <__ledf2+0x46>
 80015aa:	42a5      	cmp	r5, r4
 80015ac:	dcc3      	bgt.n	8001536 <__ledf2+0x46>
 80015ae:	e7e0      	b.n	8001572 <__ledf2+0x82>
 80015b0:	45c8      	cmp	r8, r9
 80015b2:	d8c0      	bhi.n	8001536 <__ledf2+0x46>
 80015b4:	2000      	movs	r0, #0
 80015b6:	45c8      	cmp	r8, r9
 80015b8:	d3e3      	bcc.n	8001582 <__ledf2+0x92>
 80015ba:	e7ed      	b.n	8001598 <__ledf2+0xa8>
 80015bc:	000007ff 	.word	0x000007ff

080015c0 <__aeabi_dmul>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	4657      	mov	r7, sl
 80015c4:	46de      	mov	lr, fp
 80015c6:	464e      	mov	r6, r9
 80015c8:	4645      	mov	r5, r8
 80015ca:	b5e0      	push	{r5, r6, r7, lr}
 80015cc:	4683      	mov	fp, r0
 80015ce:	0006      	movs	r6, r0
 80015d0:	030f      	lsls	r7, r1, #12
 80015d2:	0048      	lsls	r0, r1, #1
 80015d4:	b087      	sub	sp, #28
 80015d6:	4692      	mov	sl, r2
 80015d8:	001d      	movs	r5, r3
 80015da:	0b3f      	lsrs	r7, r7, #12
 80015dc:	0d40      	lsrs	r0, r0, #21
 80015de:	0fcc      	lsrs	r4, r1, #31
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x26>
 80015e4:	e06f      	b.n	80016c6 <__aeabi_dmul+0x106>
 80015e6:	4bde      	ldr	r3, [pc, #888]	; (8001960 <__aeabi_dmul+0x3a0>)
 80015e8:	4298      	cmp	r0, r3
 80015ea:	d038      	beq.n	800165e <__aeabi_dmul+0x9e>
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	00ff      	lsls	r7, r7, #3
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	431f      	orrs	r7, r3
 80015f4:	0f73      	lsrs	r3, r6, #29
 80015f6:	433b      	orrs	r3, r7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	4bda      	ldr	r3, [pc, #872]	; (8001964 <__aeabi_dmul+0x3a4>)
 80015fc:	2700      	movs	r7, #0
 80015fe:	4699      	mov	r9, r3
 8001600:	2300      	movs	r3, #0
 8001602:	469b      	mov	fp, r3
 8001604:	00f6      	lsls	r6, r6, #3
 8001606:	4481      	add	r9, r0
 8001608:	032b      	lsls	r3, r5, #12
 800160a:	0069      	lsls	r1, r5, #1
 800160c:	0b1b      	lsrs	r3, r3, #12
 800160e:	4652      	mov	r2, sl
 8001610:	4698      	mov	r8, r3
 8001612:	0d49      	lsrs	r1, r1, #21
 8001614:	0fed      	lsrs	r5, r5, #31
 8001616:	2900      	cmp	r1, #0
 8001618:	d100      	bne.n	800161c <__aeabi_dmul+0x5c>
 800161a:	e085      	b.n	8001728 <__aeabi_dmul+0x168>
 800161c:	4bd0      	ldr	r3, [pc, #832]	; (8001960 <__aeabi_dmul+0x3a0>)
 800161e:	4299      	cmp	r1, r3
 8001620:	d100      	bne.n	8001624 <__aeabi_dmul+0x64>
 8001622:	e073      	b.n	800170c <__aeabi_dmul+0x14c>
 8001624:	4643      	mov	r3, r8
 8001626:	00da      	lsls	r2, r3, #3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	4313      	orrs	r3, r2
 800162e:	4652      	mov	r2, sl
 8001630:	48cc      	ldr	r0, [pc, #816]	; (8001964 <__aeabi_dmul+0x3a4>)
 8001632:	0f52      	lsrs	r2, r2, #29
 8001634:	4684      	mov	ip, r0
 8001636:	4313      	orrs	r3, r2
 8001638:	4652      	mov	r2, sl
 800163a:	2000      	movs	r0, #0
 800163c:	4461      	add	r1, ip
 800163e:	00d2      	lsls	r2, r2, #3
 8001640:	4489      	add	r9, r1
 8001642:	0021      	movs	r1, r4
 8001644:	4069      	eors	r1, r5
 8001646:	9100      	str	r1, [sp, #0]
 8001648:	468c      	mov	ip, r1
 800164a:	2101      	movs	r1, #1
 800164c:	4449      	add	r1, r9
 800164e:	468a      	mov	sl, r1
 8001650:	2f0f      	cmp	r7, #15
 8001652:	d900      	bls.n	8001656 <__aeabi_dmul+0x96>
 8001654:	e090      	b.n	8001778 <__aeabi_dmul+0x1b8>
 8001656:	49c4      	ldr	r1, [pc, #784]	; (8001968 <__aeabi_dmul+0x3a8>)
 8001658:	00bf      	lsls	r7, r7, #2
 800165a:	59cf      	ldr	r7, [r1, r7]
 800165c:	46bf      	mov	pc, r7
 800165e:	465b      	mov	r3, fp
 8001660:	433b      	orrs	r3, r7
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	d000      	beq.n	8001668 <__aeabi_dmul+0xa8>
 8001666:	e16a      	b.n	800193e <__aeabi_dmul+0x37e>
 8001668:	2302      	movs	r3, #2
 800166a:	2708      	movs	r7, #8
 800166c:	2600      	movs	r6, #0
 800166e:	4681      	mov	r9, r0
 8001670:	469b      	mov	fp, r3
 8001672:	e7c9      	b.n	8001608 <__aeabi_dmul+0x48>
 8001674:	0032      	movs	r2, r6
 8001676:	4658      	mov	r0, fp
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	4661      	mov	r1, ip
 800167c:	9100      	str	r1, [sp, #0]
 800167e:	2802      	cmp	r0, #2
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0xc4>
 8001682:	e075      	b.n	8001770 <__aeabi_dmul+0x1b0>
 8001684:	2803      	cmp	r0, #3
 8001686:	d100      	bne.n	800168a <__aeabi_dmul+0xca>
 8001688:	e1fe      	b.n	8001a88 <__aeabi_dmul+0x4c8>
 800168a:	2801      	cmp	r0, #1
 800168c:	d000      	beq.n	8001690 <__aeabi_dmul+0xd0>
 800168e:	e12c      	b.n	80018ea <__aeabi_dmul+0x32a>
 8001690:	2300      	movs	r3, #0
 8001692:	2700      	movs	r7, #0
 8001694:	2600      	movs	r6, #0
 8001696:	2500      	movs	r5, #0
 8001698:	033f      	lsls	r7, r7, #12
 800169a:	0d2a      	lsrs	r2, r5, #20
 800169c:	0b3f      	lsrs	r7, r7, #12
 800169e:	48b3      	ldr	r0, [pc, #716]	; (800196c <__aeabi_dmul+0x3ac>)
 80016a0:	0512      	lsls	r2, r2, #20
 80016a2:	433a      	orrs	r2, r7
 80016a4:	4002      	ands	r2, r0
 80016a6:	051b      	lsls	r3, r3, #20
 80016a8:	4313      	orrs	r3, r2
 80016aa:	9a00      	ldr	r2, [sp, #0]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	07d1      	lsls	r1, r2, #31
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	430b      	orrs	r3, r1
 80016b4:	0030      	movs	r0, r6
 80016b6:	0019      	movs	r1, r3
 80016b8:	b007      	add	sp, #28
 80016ba:	bc3c      	pop	{r2, r3, r4, r5}
 80016bc:	4690      	mov	r8, r2
 80016be:	4699      	mov	r9, r3
 80016c0:	46a2      	mov	sl, r4
 80016c2:	46ab      	mov	fp, r5
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	465b      	mov	r3, fp
 80016c8:	433b      	orrs	r3, r7
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x110>
 80016ce:	e12f      	b.n	8001930 <__aeabi_dmul+0x370>
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dmul+0x116>
 80016d4:	e1a5      	b.n	8001a22 <__aeabi_dmul+0x462>
 80016d6:	0038      	movs	r0, r7
 80016d8:	f000 fec0 	bl	800245c <__clzsi2>
 80016dc:	0003      	movs	r3, r0
 80016de:	3b0b      	subs	r3, #11
 80016e0:	2b1c      	cmp	r3, #28
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dmul+0x126>
 80016e4:	e196      	b.n	8001a14 <__aeabi_dmul+0x454>
 80016e6:	221d      	movs	r2, #29
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	465a      	mov	r2, fp
 80016ec:	0001      	movs	r1, r0
 80016ee:	40da      	lsrs	r2, r3
 80016f0:	465e      	mov	r6, fp
 80016f2:	3908      	subs	r1, #8
 80016f4:	408f      	lsls	r7, r1
 80016f6:	0013      	movs	r3, r2
 80016f8:	408e      	lsls	r6, r1
 80016fa:	433b      	orrs	r3, r7
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	4b9c      	ldr	r3, [pc, #624]	; (8001970 <__aeabi_dmul+0x3b0>)
 8001700:	2700      	movs	r7, #0
 8001702:	1a1b      	subs	r3, r3, r0
 8001704:	4699      	mov	r9, r3
 8001706:	2300      	movs	r3, #0
 8001708:	469b      	mov	fp, r3
 800170a:	e77d      	b.n	8001608 <__aeabi_dmul+0x48>
 800170c:	4641      	mov	r1, r8
 800170e:	4653      	mov	r3, sl
 8001710:	430b      	orrs	r3, r1
 8001712:	4993      	ldr	r1, [pc, #588]	; (8001960 <__aeabi_dmul+0x3a0>)
 8001714:	468c      	mov	ip, r1
 8001716:	44e1      	add	r9, ip
 8001718:	2b00      	cmp	r3, #0
 800171a:	d000      	beq.n	800171e <__aeabi_dmul+0x15e>
 800171c:	e11a      	b.n	8001954 <__aeabi_dmul+0x394>
 800171e:	2202      	movs	r2, #2
 8001720:	2002      	movs	r0, #2
 8001722:	4317      	orrs	r7, r2
 8001724:	2200      	movs	r2, #0
 8001726:	e78c      	b.n	8001642 <__aeabi_dmul+0x82>
 8001728:	4313      	orrs	r3, r2
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x16e>
 800172c:	e10d      	b.n	800194a <__aeabi_dmul+0x38a>
 800172e:	4643      	mov	r3, r8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x176>
 8001734:	e181      	b.n	8001a3a <__aeabi_dmul+0x47a>
 8001736:	4640      	mov	r0, r8
 8001738:	f000 fe90 	bl	800245c <__clzsi2>
 800173c:	0002      	movs	r2, r0
 800173e:	3a0b      	subs	r2, #11
 8001740:	2a1c      	cmp	r2, #28
 8001742:	dd00      	ble.n	8001746 <__aeabi_dmul+0x186>
 8001744:	e172      	b.n	8001a2c <__aeabi_dmul+0x46c>
 8001746:	0001      	movs	r1, r0
 8001748:	4643      	mov	r3, r8
 800174a:	3908      	subs	r1, #8
 800174c:	408b      	lsls	r3, r1
 800174e:	4698      	mov	r8, r3
 8001750:	231d      	movs	r3, #29
 8001752:	1a9a      	subs	r2, r3, r2
 8001754:	4653      	mov	r3, sl
 8001756:	40d3      	lsrs	r3, r2
 8001758:	001a      	movs	r2, r3
 800175a:	4643      	mov	r3, r8
 800175c:	4313      	orrs	r3, r2
 800175e:	4652      	mov	r2, sl
 8001760:	408a      	lsls	r2, r1
 8001762:	4649      	mov	r1, r9
 8001764:	1a08      	subs	r0, r1, r0
 8001766:	4982      	ldr	r1, [pc, #520]	; (8001970 <__aeabi_dmul+0x3b0>)
 8001768:	4689      	mov	r9, r1
 800176a:	4481      	add	r9, r0
 800176c:	2000      	movs	r0, #0
 800176e:	e768      	b.n	8001642 <__aeabi_dmul+0x82>
 8001770:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <__aeabi_dmul+0x3a0>)
 8001772:	2700      	movs	r7, #0
 8001774:	2600      	movs	r6, #0
 8001776:	e78e      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001778:	0c14      	lsrs	r4, r2, #16
 800177a:	0412      	lsls	r2, r2, #16
 800177c:	0c12      	lsrs	r2, r2, #16
 800177e:	0011      	movs	r1, r2
 8001780:	0c37      	lsrs	r7, r6, #16
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	0c35      	lsrs	r5, r6, #16
 8001786:	4379      	muls	r1, r7
 8001788:	0028      	movs	r0, r5
 800178a:	468c      	mov	ip, r1
 800178c:	002e      	movs	r6, r5
 800178e:	4360      	muls	r0, r4
 8001790:	4460      	add	r0, ip
 8001792:	4683      	mov	fp, r0
 8001794:	4356      	muls	r6, r2
 8001796:	0021      	movs	r1, r4
 8001798:	0c30      	lsrs	r0, r6, #16
 800179a:	4680      	mov	r8, r0
 800179c:	4658      	mov	r0, fp
 800179e:	4379      	muls	r1, r7
 80017a0:	4440      	add	r0, r8
 80017a2:	9102      	str	r1, [sp, #8]
 80017a4:	4584      	cmp	ip, r0
 80017a6:	d906      	bls.n	80017b6 <__aeabi_dmul+0x1f6>
 80017a8:	4688      	mov	r8, r1
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0249      	lsls	r1, r1, #9
 80017ae:	468c      	mov	ip, r1
 80017b0:	44e0      	add	r8, ip
 80017b2:	4641      	mov	r1, r8
 80017b4:	9102      	str	r1, [sp, #8]
 80017b6:	0436      	lsls	r6, r6, #16
 80017b8:	0c01      	lsrs	r1, r0, #16
 80017ba:	0c36      	lsrs	r6, r6, #16
 80017bc:	0400      	lsls	r0, r0, #16
 80017be:	468b      	mov	fp, r1
 80017c0:	1981      	adds	r1, r0, r6
 80017c2:	0c1e      	lsrs	r6, r3, #16
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	9103      	str	r1, [sp, #12]
 80017ca:	0019      	movs	r1, r3
 80017cc:	4379      	muls	r1, r7
 80017ce:	468c      	mov	ip, r1
 80017d0:	0028      	movs	r0, r5
 80017d2:	4375      	muls	r5, r6
 80017d4:	4465      	add	r5, ip
 80017d6:	46a8      	mov	r8, r5
 80017d8:	4358      	muls	r0, r3
 80017da:	0c05      	lsrs	r5, r0, #16
 80017dc:	4445      	add	r5, r8
 80017de:	4377      	muls	r7, r6
 80017e0:	42a9      	cmp	r1, r5
 80017e2:	d903      	bls.n	80017ec <__aeabi_dmul+0x22c>
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0249      	lsls	r1, r1, #9
 80017e8:	468c      	mov	ip, r1
 80017ea:	4467      	add	r7, ip
 80017ec:	0c29      	lsrs	r1, r5, #16
 80017ee:	468c      	mov	ip, r1
 80017f0:	0039      	movs	r1, r7
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	042d      	lsls	r5, r5, #16
 80017f8:	182d      	adds	r5, r5, r0
 80017fa:	4461      	add	r1, ip
 80017fc:	44ab      	add	fp, r5
 80017fe:	9105      	str	r1, [sp, #20]
 8001800:	4659      	mov	r1, fp
 8001802:	9104      	str	r1, [sp, #16]
 8001804:	9901      	ldr	r1, [sp, #4]
 8001806:	040f      	lsls	r7, r1, #16
 8001808:	0c3f      	lsrs	r7, r7, #16
 800180a:	0c08      	lsrs	r0, r1, #16
 800180c:	0039      	movs	r1, r7
 800180e:	4351      	muls	r1, r2
 8001810:	4342      	muls	r2, r0
 8001812:	4690      	mov	r8, r2
 8001814:	0002      	movs	r2, r0
 8001816:	468c      	mov	ip, r1
 8001818:	0c09      	lsrs	r1, r1, #16
 800181a:	468b      	mov	fp, r1
 800181c:	4362      	muls	r2, r4
 800181e:	437c      	muls	r4, r7
 8001820:	4444      	add	r4, r8
 8001822:	445c      	add	r4, fp
 8001824:	45a0      	cmp	r8, r4
 8001826:	d903      	bls.n	8001830 <__aeabi_dmul+0x270>
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0249      	lsls	r1, r1, #9
 800182c:	4688      	mov	r8, r1
 800182e:	4442      	add	r2, r8
 8001830:	0c21      	lsrs	r1, r4, #16
 8001832:	4688      	mov	r8, r1
 8001834:	4661      	mov	r1, ip
 8001836:	0409      	lsls	r1, r1, #16
 8001838:	0c09      	lsrs	r1, r1, #16
 800183a:	468c      	mov	ip, r1
 800183c:	0039      	movs	r1, r7
 800183e:	4359      	muls	r1, r3
 8001840:	4343      	muls	r3, r0
 8001842:	4370      	muls	r0, r6
 8001844:	437e      	muls	r6, r7
 8001846:	0c0f      	lsrs	r7, r1, #16
 8001848:	18f6      	adds	r6, r6, r3
 800184a:	0424      	lsls	r4, r4, #16
 800184c:	19be      	adds	r6, r7, r6
 800184e:	4464      	add	r4, ip
 8001850:	4442      	add	r2, r8
 8001852:	468c      	mov	ip, r1
 8001854:	42b3      	cmp	r3, r6
 8001856:	d903      	bls.n	8001860 <__aeabi_dmul+0x2a0>
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	4698      	mov	r8, r3
 800185e:	4440      	add	r0, r8
 8001860:	9b02      	ldr	r3, [sp, #8]
 8001862:	4661      	mov	r1, ip
 8001864:	4698      	mov	r8, r3
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	0437      	lsls	r7, r6, #16
 800186a:	4443      	add	r3, r8
 800186c:	469b      	mov	fp, r3
 800186e:	45ab      	cmp	fp, r5
 8001870:	41ad      	sbcs	r5, r5
 8001872:	426b      	negs	r3, r5
 8001874:	040d      	lsls	r5, r1, #16
 8001876:	9905      	ldr	r1, [sp, #20]
 8001878:	0c2d      	lsrs	r5, r5, #16
 800187a:	468c      	mov	ip, r1
 800187c:	197f      	adds	r7, r7, r5
 800187e:	4467      	add	r7, ip
 8001880:	18fd      	adds	r5, r7, r3
 8001882:	46a8      	mov	r8, r5
 8001884:	465d      	mov	r5, fp
 8001886:	192d      	adds	r5, r5, r4
 8001888:	42a5      	cmp	r5, r4
 800188a:	41a4      	sbcs	r4, r4
 800188c:	4693      	mov	fp, r2
 800188e:	4264      	negs	r4, r4
 8001890:	46a4      	mov	ip, r4
 8001892:	44c3      	add	fp, r8
 8001894:	44dc      	add	ip, fp
 8001896:	428f      	cmp	r7, r1
 8001898:	41bf      	sbcs	r7, r7
 800189a:	4598      	cmp	r8, r3
 800189c:	419b      	sbcs	r3, r3
 800189e:	4593      	cmp	fp, r2
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	45a4      	cmp	ip, r4
 80018a4:	41a4      	sbcs	r4, r4
 80018a6:	425b      	negs	r3, r3
 80018a8:	427f      	negs	r7, r7
 80018aa:	431f      	orrs	r7, r3
 80018ac:	0c36      	lsrs	r6, r6, #16
 80018ae:	4252      	negs	r2, r2
 80018b0:	4264      	negs	r4, r4
 80018b2:	19bf      	adds	r7, r7, r6
 80018b4:	4322      	orrs	r2, r4
 80018b6:	18bf      	adds	r7, r7, r2
 80018b8:	4662      	mov	r2, ip
 80018ba:	1838      	adds	r0, r7, r0
 80018bc:	0243      	lsls	r3, r0, #9
 80018be:	0dd2      	lsrs	r2, r2, #23
 80018c0:	9903      	ldr	r1, [sp, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	026a      	lsls	r2, r5, #9
 80018c6:	430a      	orrs	r2, r1
 80018c8:	1e50      	subs	r0, r2, #1
 80018ca:	4182      	sbcs	r2, r0
 80018cc:	4661      	mov	r1, ip
 80018ce:	0ded      	lsrs	r5, r5, #23
 80018d0:	432a      	orrs	r2, r5
 80018d2:	024e      	lsls	r6, r1, #9
 80018d4:	4332      	orrs	r2, r6
 80018d6:	01d9      	lsls	r1, r3, #7
 80018d8:	d400      	bmi.n	80018dc <__aeabi_dmul+0x31c>
 80018da:	e0b3      	b.n	8001a44 <__aeabi_dmul+0x484>
 80018dc:	2601      	movs	r6, #1
 80018de:	0850      	lsrs	r0, r2, #1
 80018e0:	4032      	ands	r2, r6
 80018e2:	4302      	orrs	r2, r0
 80018e4:	07de      	lsls	r6, r3, #31
 80018e6:	4332      	orrs	r2, r6
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	4c22      	ldr	r4, [pc, #136]	; (8001974 <__aeabi_dmul+0x3b4>)
 80018ec:	4454      	add	r4, sl
 80018ee:	2c00      	cmp	r4, #0
 80018f0:	dd62      	ble.n	80019b8 <__aeabi_dmul+0x3f8>
 80018f2:	0751      	lsls	r1, r2, #29
 80018f4:	d009      	beq.n	800190a <__aeabi_dmul+0x34a>
 80018f6:	200f      	movs	r0, #15
 80018f8:	4010      	ands	r0, r2
 80018fa:	2804      	cmp	r0, #4
 80018fc:	d005      	beq.n	800190a <__aeabi_dmul+0x34a>
 80018fe:	1d10      	adds	r0, r2, #4
 8001900:	4290      	cmp	r0, r2
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	189b      	adds	r3, r3, r2
 8001908:	0002      	movs	r2, r0
 800190a:	01d9      	lsls	r1, r3, #7
 800190c:	d504      	bpl.n	8001918 <__aeabi_dmul+0x358>
 800190e:	2480      	movs	r4, #128	; 0x80
 8001910:	4819      	ldr	r0, [pc, #100]	; (8001978 <__aeabi_dmul+0x3b8>)
 8001912:	00e4      	lsls	r4, r4, #3
 8001914:	4003      	ands	r3, r0
 8001916:	4454      	add	r4, sl
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <__aeabi_dmul+0x3bc>)
 800191a:	4284      	cmp	r4, r0
 800191c:	dd00      	ble.n	8001920 <__aeabi_dmul+0x360>
 800191e:	e727      	b.n	8001770 <__aeabi_dmul+0x1b0>
 8001920:	075e      	lsls	r6, r3, #29
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	08d2      	lsrs	r2, r2, #3
 8001926:	0b1f      	lsrs	r7, r3, #12
 8001928:	0563      	lsls	r3, r4, #21
 800192a:	4316      	orrs	r6, r2
 800192c:	0d5b      	lsrs	r3, r3, #21
 800192e:	e6b2      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001930:	2300      	movs	r3, #0
 8001932:	4699      	mov	r9, r3
 8001934:	3301      	adds	r3, #1
 8001936:	2704      	movs	r7, #4
 8001938:	2600      	movs	r6, #0
 800193a:	469b      	mov	fp, r3
 800193c:	e664      	b.n	8001608 <__aeabi_dmul+0x48>
 800193e:	2303      	movs	r3, #3
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	4681      	mov	r9, r0
 8001944:	270c      	movs	r7, #12
 8001946:	469b      	mov	fp, r3
 8001948:	e65e      	b.n	8001608 <__aeabi_dmul+0x48>
 800194a:	2201      	movs	r2, #1
 800194c:	2001      	movs	r0, #1
 800194e:	4317      	orrs	r7, r2
 8001950:	2200      	movs	r2, #0
 8001952:	e676      	b.n	8001642 <__aeabi_dmul+0x82>
 8001954:	2303      	movs	r3, #3
 8001956:	2003      	movs	r0, #3
 8001958:	431f      	orrs	r7, r3
 800195a:	4643      	mov	r3, r8
 800195c:	e671      	b.n	8001642 <__aeabi_dmul+0x82>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	000007ff 	.word	0x000007ff
 8001964:	fffffc01 	.word	0xfffffc01
 8001968:	0800b0cc 	.word	0x0800b0cc
 800196c:	800fffff 	.word	0x800fffff
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	000003ff 	.word	0x000003ff
 8001978:	feffffff 	.word	0xfeffffff
 800197c:	000007fe 	.word	0x000007fe
 8001980:	2300      	movs	r3, #0
 8001982:	2780      	movs	r7, #128	; 0x80
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	033f      	lsls	r7, r7, #12
 8001988:	2600      	movs	r6, #0
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <__aeabi_dmul+0x4d8>)
 800198c:	e683      	b.n	8001696 <__aeabi_dmul+0xd6>
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	0032      	movs	r2, r6
 8001992:	46a4      	mov	ip, r4
 8001994:	4658      	mov	r0, fp
 8001996:	e670      	b.n	800167a <__aeabi_dmul+0xba>
 8001998:	46ac      	mov	ip, r5
 800199a:	e66e      	b.n	800167a <__aeabi_dmul+0xba>
 800199c:	2780      	movs	r7, #128	; 0x80
 800199e:	9901      	ldr	r1, [sp, #4]
 80019a0:	033f      	lsls	r7, r7, #12
 80019a2:	4239      	tst	r1, r7
 80019a4:	d02d      	beq.n	8001a02 <__aeabi_dmul+0x442>
 80019a6:	423b      	tst	r3, r7
 80019a8:	d12b      	bne.n	8001a02 <__aeabi_dmul+0x442>
 80019aa:	431f      	orrs	r7, r3
 80019ac:	033f      	lsls	r7, r7, #12
 80019ae:	0b3f      	lsrs	r7, r7, #12
 80019b0:	9500      	str	r5, [sp, #0]
 80019b2:	0016      	movs	r6, r2
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <__aeabi_dmul+0x4d8>)
 80019b6:	e66e      	b.n	8001696 <__aeabi_dmul+0xd6>
 80019b8:	2501      	movs	r5, #1
 80019ba:	1b2d      	subs	r5, r5, r4
 80019bc:	2d38      	cmp	r5, #56	; 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dmul+0x402>
 80019c0:	e666      	b.n	8001690 <__aeabi_dmul+0xd0>
 80019c2:	2d1f      	cmp	r5, #31
 80019c4:	dc40      	bgt.n	8001a48 <__aeabi_dmul+0x488>
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <__aeabi_dmul+0x4dc>)
 80019c8:	001c      	movs	r4, r3
 80019ca:	4450      	add	r0, sl
 80019cc:	0016      	movs	r6, r2
 80019ce:	4082      	lsls	r2, r0
 80019d0:	4084      	lsls	r4, r0
 80019d2:	40ee      	lsrs	r6, r5
 80019d4:	1e50      	subs	r0, r2, #1
 80019d6:	4182      	sbcs	r2, r0
 80019d8:	4334      	orrs	r4, r6
 80019da:	4314      	orrs	r4, r2
 80019dc:	40eb      	lsrs	r3, r5
 80019de:	0762      	lsls	r2, r4, #29
 80019e0:	d009      	beq.n	80019f6 <__aeabi_dmul+0x436>
 80019e2:	220f      	movs	r2, #15
 80019e4:	4022      	ands	r2, r4
 80019e6:	2a04      	cmp	r2, #4
 80019e8:	d005      	beq.n	80019f6 <__aeabi_dmul+0x436>
 80019ea:	0022      	movs	r2, r4
 80019ec:	1d14      	adds	r4, r2, #4
 80019ee:	4294      	cmp	r4, r2
 80019f0:	4180      	sbcs	r0, r0
 80019f2:	4240      	negs	r0, r0
 80019f4:	181b      	adds	r3, r3, r0
 80019f6:	021a      	lsls	r2, r3, #8
 80019f8:	d53e      	bpl.n	8001a78 <__aeabi_dmul+0x4b8>
 80019fa:	2301      	movs	r3, #1
 80019fc:	2700      	movs	r7, #0
 80019fe:	2600      	movs	r6, #0
 8001a00:	e649      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001a02:	2780      	movs	r7, #128	; 0x80
 8001a04:	9b01      	ldr	r3, [sp, #4]
 8001a06:	033f      	lsls	r7, r7, #12
 8001a08:	431f      	orrs	r7, r3
 8001a0a:	033f      	lsls	r7, r7, #12
 8001a0c:	0b3f      	lsrs	r7, r7, #12
 8001a0e:	9400      	str	r4, [sp, #0]
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <__aeabi_dmul+0x4d8>)
 8001a12:	e640      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001a14:	0003      	movs	r3, r0
 8001a16:	465a      	mov	r2, fp
 8001a18:	3b28      	subs	r3, #40	; 0x28
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	9201      	str	r2, [sp, #4]
 8001a20:	e66d      	b.n	80016fe <__aeabi_dmul+0x13e>
 8001a22:	4658      	mov	r0, fp
 8001a24:	f000 fd1a 	bl	800245c <__clzsi2>
 8001a28:	3020      	adds	r0, #32
 8001a2a:	e657      	b.n	80016dc <__aeabi_dmul+0x11c>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	4652      	mov	r2, sl
 8001a30:	3b28      	subs	r3, #40	; 0x28
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	e693      	b.n	8001762 <__aeabi_dmul+0x1a2>
 8001a3a:	4650      	mov	r0, sl
 8001a3c:	f000 fd0e 	bl	800245c <__clzsi2>
 8001a40:	3020      	adds	r0, #32
 8001a42:	e67b      	b.n	800173c <__aeabi_dmul+0x17c>
 8001a44:	46ca      	mov	sl, r9
 8001a46:	e750      	b.n	80018ea <__aeabi_dmul+0x32a>
 8001a48:	201f      	movs	r0, #31
 8001a4a:	001e      	movs	r6, r3
 8001a4c:	4240      	negs	r0, r0
 8001a4e:	1b04      	subs	r4, r0, r4
 8001a50:	40e6      	lsrs	r6, r4
 8001a52:	2d20      	cmp	r5, #32
 8001a54:	d003      	beq.n	8001a5e <__aeabi_dmul+0x49e>
 8001a56:	4c12      	ldr	r4, [pc, #72]	; (8001aa0 <__aeabi_dmul+0x4e0>)
 8001a58:	4454      	add	r4, sl
 8001a5a:	40a3      	lsls	r3, r4
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	1e50      	subs	r0, r2, #1
 8001a60:	4182      	sbcs	r2, r0
 8001a62:	4332      	orrs	r2, r6
 8001a64:	2607      	movs	r6, #7
 8001a66:	2700      	movs	r7, #0
 8001a68:	4016      	ands	r6, r2
 8001a6a:	d009      	beq.n	8001a80 <__aeabi_dmul+0x4c0>
 8001a6c:	200f      	movs	r0, #15
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4010      	ands	r0, r2
 8001a72:	0014      	movs	r4, r2
 8001a74:	2804      	cmp	r0, #4
 8001a76:	d1b9      	bne.n	80019ec <__aeabi_dmul+0x42c>
 8001a78:	0022      	movs	r2, r4
 8001a7a:	075e      	lsls	r6, r3, #29
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	0b1f      	lsrs	r7, r3, #12
 8001a80:	08d2      	lsrs	r2, r2, #3
 8001a82:	4316      	orrs	r6, r2
 8001a84:	2300      	movs	r3, #0
 8001a86:	e606      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001a88:	2780      	movs	r7, #128	; 0x80
 8001a8a:	033f      	lsls	r7, r7, #12
 8001a8c:	431f      	orrs	r7, r3
 8001a8e:	033f      	lsls	r7, r7, #12
 8001a90:	0b3f      	lsrs	r7, r7, #12
 8001a92:	0016      	movs	r6, r2
 8001a94:	4b00      	ldr	r3, [pc, #0]	; (8001a98 <__aeabi_dmul+0x4d8>)
 8001a96:	e5fe      	b.n	8001696 <__aeabi_dmul+0xd6>
 8001a98:	000007ff 	.word	0x000007ff
 8001a9c:	0000041e 	.word	0x0000041e
 8001aa0:	0000043e 	.word	0x0000043e

08001aa4 <__aeabi_dsub>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	4657      	mov	r7, sl
 8001aa8:	464e      	mov	r6, r9
 8001aaa:	4645      	mov	r5, r8
 8001aac:	46de      	mov	lr, fp
 8001aae:	000c      	movs	r4, r1
 8001ab0:	0309      	lsls	r1, r1, #12
 8001ab2:	b5e0      	push	{r5, r6, r7, lr}
 8001ab4:	0a49      	lsrs	r1, r1, #9
 8001ab6:	0f46      	lsrs	r6, r0, #29
 8001ab8:	005f      	lsls	r7, r3, #1
 8001aba:	4331      	orrs	r1, r6
 8001abc:	031e      	lsls	r6, r3, #12
 8001abe:	0fdb      	lsrs	r3, r3, #31
 8001ac0:	0a76      	lsrs	r6, r6, #9
 8001ac2:	469b      	mov	fp, r3
 8001ac4:	0f53      	lsrs	r3, r2, #29
 8001ac6:	4333      	orrs	r3, r6
 8001ac8:	4ec8      	ldr	r6, [pc, #800]	; (8001dec <__aeabi_dsub+0x348>)
 8001aca:	0065      	lsls	r5, r4, #1
 8001acc:	00c0      	lsls	r0, r0, #3
 8001ace:	0fe4      	lsrs	r4, r4, #31
 8001ad0:	00d2      	lsls	r2, r2, #3
 8001ad2:	0d6d      	lsrs	r5, r5, #21
 8001ad4:	46a2      	mov	sl, r4
 8001ad6:	4681      	mov	r9, r0
 8001ad8:	0d7f      	lsrs	r7, r7, #21
 8001ada:	469c      	mov	ip, r3
 8001adc:	4690      	mov	r8, r2
 8001ade:	42b7      	cmp	r7, r6
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x40>
 8001ae2:	e0b9      	b.n	8001c58 <__aeabi_dsub+0x1b4>
 8001ae4:	465b      	mov	r3, fp
 8001ae6:	2601      	movs	r6, #1
 8001ae8:	4073      	eors	r3, r6
 8001aea:	469b      	mov	fp, r3
 8001aec:	1bee      	subs	r6, r5, r7
 8001aee:	45a3      	cmp	fp, r4
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x50>
 8001af2:	e083      	b.n	8001bfc <__aeabi_dsub+0x158>
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	dd63      	ble.n	8001bc0 <__aeabi_dsub+0x11c>
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x5a>
 8001afc:	e0b1      	b.n	8001c62 <__aeabi_dsub+0x1be>
 8001afe:	4663      	mov	r3, ip
 8001b00:	4313      	orrs	r3, r2
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x62>
 8001b04:	e123      	b.n	8001d4e <__aeabi_dsub+0x2aa>
 8001b06:	1e73      	subs	r3, r6, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x6a>
 8001b0c:	e1ba      	b.n	8001e84 <__aeabi_dsub+0x3e0>
 8001b0e:	1a86      	subs	r6, r0, r2
 8001b10:	4663      	mov	r3, ip
 8001b12:	42b0      	cmp	r0, r6
 8001b14:	4180      	sbcs	r0, r0
 8001b16:	2501      	movs	r5, #1
 8001b18:	1ac9      	subs	r1, r1, r3
 8001b1a:	4240      	negs	r0, r0
 8001b1c:	1a09      	subs	r1, r1, r0
 8001b1e:	020b      	lsls	r3, r1, #8
 8001b20:	d400      	bmi.n	8001b24 <__aeabi_dsub+0x80>
 8001b22:	e147      	b.n	8001db4 <__aeabi_dsub+0x310>
 8001b24:	0249      	lsls	r1, r1, #9
 8001b26:	0a4b      	lsrs	r3, r1, #9
 8001b28:	4698      	mov	r8, r3
 8001b2a:	4643      	mov	r3, r8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x8e>
 8001b30:	e189      	b.n	8001e46 <__aeabi_dsub+0x3a2>
 8001b32:	4640      	mov	r0, r8
 8001b34:	f000 fc92 	bl	800245c <__clzsi2>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	3b08      	subs	r3, #8
 8001b3c:	2b1f      	cmp	r3, #31
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dsub+0x9e>
 8001b40:	e17c      	b.n	8001e3c <__aeabi_dsub+0x398>
 8001b42:	2220      	movs	r2, #32
 8001b44:	0030      	movs	r0, r6
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4641      	mov	r1, r8
 8001b4a:	40d0      	lsrs	r0, r2
 8001b4c:	4099      	lsls	r1, r3
 8001b4e:	0002      	movs	r2, r0
 8001b50:	409e      	lsls	r6, r3
 8001b52:	430a      	orrs	r2, r1
 8001b54:	429d      	cmp	r5, r3
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dsub+0xb6>
 8001b58:	e16a      	b.n	8001e30 <__aeabi_dsub+0x38c>
 8001b5a:	1b5d      	subs	r5, r3, r5
 8001b5c:	1c6b      	adds	r3, r5, #1
 8001b5e:	2b1f      	cmp	r3, #31
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dsub+0xc0>
 8001b62:	e194      	b.n	8001e8e <__aeabi_dsub+0x3ea>
 8001b64:	2120      	movs	r1, #32
 8001b66:	0010      	movs	r0, r2
 8001b68:	0035      	movs	r5, r6
 8001b6a:	1ac9      	subs	r1, r1, r3
 8001b6c:	408e      	lsls	r6, r1
 8001b6e:	40da      	lsrs	r2, r3
 8001b70:	4088      	lsls	r0, r1
 8001b72:	40dd      	lsrs	r5, r3
 8001b74:	1e71      	subs	r1, r6, #1
 8001b76:	418e      	sbcs	r6, r1
 8001b78:	0011      	movs	r1, r2
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	4328      	orrs	r0, r5
 8001b7e:	2500      	movs	r5, #0
 8001b80:	4306      	orrs	r6, r0
 8001b82:	4032      	ands	r2, r6
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d009      	beq.n	8001b9c <__aeabi_dsub+0xf8>
 8001b88:	230f      	movs	r3, #15
 8001b8a:	4033      	ands	r3, r6
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d005      	beq.n	8001b9c <__aeabi_dsub+0xf8>
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	42b3      	cmp	r3, r6
 8001b94:	41b6      	sbcs	r6, r6
 8001b96:	4276      	negs	r6, r6
 8001b98:	1989      	adds	r1, r1, r6
 8001b9a:	001e      	movs	r6, r3
 8001b9c:	020b      	lsls	r3, r1, #8
 8001b9e:	d400      	bmi.n	8001ba2 <__aeabi_dsub+0xfe>
 8001ba0:	e23d      	b.n	800201e <__aeabi_dsub+0x57a>
 8001ba2:	1c6a      	adds	r2, r5, #1
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <__aeabi_dsub+0x348>)
 8001ba6:	0555      	lsls	r5, r2, #21
 8001ba8:	0d6d      	lsrs	r5, r5, #21
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x10c>
 8001bae:	e119      	b.n	8001de4 <__aeabi_dsub+0x340>
 8001bb0:	4a8f      	ldr	r2, [pc, #572]	; (8001df0 <__aeabi_dsub+0x34c>)
 8001bb2:	08f6      	lsrs	r6, r6, #3
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	0757      	lsls	r7, r2, #29
 8001bb8:	0252      	lsls	r2, r2, #9
 8001bba:	4337      	orrs	r7, r6
 8001bbc:	0b12      	lsrs	r2, r2, #12
 8001bbe:	e09b      	b.n	8001cf8 <__aeabi_dsub+0x254>
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x122>
 8001bc4:	e0c5      	b.n	8001d52 <__aeabi_dsub+0x2ae>
 8001bc6:	1c6e      	adds	r6, r5, #1
 8001bc8:	0576      	lsls	r6, r6, #21
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	2e01      	cmp	r6, #1
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dsub+0x12e>
 8001bd0:	e148      	b.n	8001e64 <__aeabi_dsub+0x3c0>
 8001bd2:	4667      	mov	r7, ip
 8001bd4:	1a86      	subs	r6, r0, r2
 8001bd6:	1bcb      	subs	r3, r1, r7
 8001bd8:	42b0      	cmp	r0, r6
 8001bda:	41bf      	sbcs	r7, r7
 8001bdc:	427f      	negs	r7, r7
 8001bde:	46b8      	mov	r8, r7
 8001be0:	001f      	movs	r7, r3
 8001be2:	4643      	mov	r3, r8
 8001be4:	1aff      	subs	r7, r7, r3
 8001be6:	003b      	movs	r3, r7
 8001be8:	46b8      	mov	r8, r7
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	d500      	bpl.n	8001bf0 <__aeabi_dsub+0x14c>
 8001bee:	e15f      	b.n	8001eb0 <__aeabi_dsub+0x40c>
 8001bf0:	4337      	orrs	r7, r6
 8001bf2:	d19a      	bne.n	8001b2a <__aeabi_dsub+0x86>
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	e079      	b.n	8001cf0 <__aeabi_dsub+0x24c>
 8001bfc:	2e00      	cmp	r6, #0
 8001bfe:	dc00      	bgt.n	8001c02 <__aeabi_dsub+0x15e>
 8001c00:	e0fa      	b.n	8001df8 <__aeabi_dsub+0x354>
 8001c02:	2f00      	cmp	r7, #0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x164>
 8001c06:	e08d      	b.n	8001d24 <__aeabi_dsub+0x280>
 8001c08:	4b78      	ldr	r3, [pc, #480]	; (8001dec <__aeabi_dsub+0x348>)
 8001c0a:	429d      	cmp	r5, r3
 8001c0c:	d067      	beq.n	8001cde <__aeabi_dsub+0x23a>
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	4667      	mov	r7, ip
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	431f      	orrs	r7, r3
 8001c16:	46bc      	mov	ip, r7
 8001c18:	2e38      	cmp	r6, #56	; 0x38
 8001c1a:	dc00      	bgt.n	8001c1e <__aeabi_dsub+0x17a>
 8001c1c:	e152      	b.n	8001ec4 <__aeabi_dsub+0x420>
 8001c1e:	4663      	mov	r3, ip
 8001c20:	4313      	orrs	r3, r2
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	4193      	sbcs	r3, r2
 8001c26:	181e      	adds	r6, r3, r0
 8001c28:	4286      	cmp	r6, r0
 8001c2a:	4180      	sbcs	r0, r0
 8001c2c:	4240      	negs	r0, r0
 8001c2e:	1809      	adds	r1, r1, r0
 8001c30:	020b      	lsls	r3, r1, #8
 8001c32:	d400      	bmi.n	8001c36 <__aeabi_dsub+0x192>
 8001c34:	e0be      	b.n	8001db4 <__aeabi_dsub+0x310>
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <__aeabi_dsub+0x348>)
 8001c38:	3501      	adds	r5, #1
 8001c3a:	429d      	cmp	r5, r3
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x19c>
 8001c3e:	e0d2      	b.n	8001de6 <__aeabi_dsub+0x342>
 8001c40:	4a6b      	ldr	r2, [pc, #428]	; (8001df0 <__aeabi_dsub+0x34c>)
 8001c42:	0873      	lsrs	r3, r6, #1
 8001c44:	400a      	ands	r2, r1
 8001c46:	2101      	movs	r1, #1
 8001c48:	400e      	ands	r6, r1
 8001c4a:	431e      	orrs	r6, r3
 8001c4c:	0851      	lsrs	r1, r2, #1
 8001c4e:	07d3      	lsls	r3, r2, #31
 8001c50:	2207      	movs	r2, #7
 8001c52:	431e      	orrs	r6, r3
 8001c54:	4032      	ands	r2, r6
 8001c56:	e795      	b.n	8001b84 <__aeabi_dsub+0xe0>
 8001c58:	001e      	movs	r6, r3
 8001c5a:	4316      	orrs	r6, r2
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dsub+0x1bc>
 8001c5e:	e745      	b.n	8001aec <__aeabi_dsub+0x48>
 8001c60:	e740      	b.n	8001ae4 <__aeabi_dsub+0x40>
 8001c62:	4b62      	ldr	r3, [pc, #392]	; (8001dec <__aeabi_dsub+0x348>)
 8001c64:	429d      	cmp	r5, r3
 8001c66:	d03a      	beq.n	8001cde <__aeabi_dsub+0x23a>
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	4667      	mov	r7, ip
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431f      	orrs	r7, r3
 8001c70:	46bc      	mov	ip, r7
 8001c72:	2e38      	cmp	r6, #56	; 0x38
 8001c74:	dd00      	ble.n	8001c78 <__aeabi_dsub+0x1d4>
 8001c76:	e0eb      	b.n	8001e50 <__aeabi_dsub+0x3ac>
 8001c78:	2e1f      	cmp	r6, #31
 8001c7a:	dc00      	bgt.n	8001c7e <__aeabi_dsub+0x1da>
 8001c7c:	e13a      	b.n	8001ef4 <__aeabi_dsub+0x450>
 8001c7e:	0033      	movs	r3, r6
 8001c80:	4667      	mov	r7, ip
 8001c82:	3b20      	subs	r3, #32
 8001c84:	40df      	lsrs	r7, r3
 8001c86:	003b      	movs	r3, r7
 8001c88:	2e20      	cmp	r6, #32
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dsub+0x1f4>
 8001c8c:	2740      	movs	r7, #64	; 0x40
 8001c8e:	1bbf      	subs	r7, r7, r6
 8001c90:	4666      	mov	r6, ip
 8001c92:	40be      	lsls	r6, r7
 8001c94:	4332      	orrs	r2, r6
 8001c96:	4690      	mov	r8, r2
 8001c98:	4646      	mov	r6, r8
 8001c9a:	1e72      	subs	r2, r6, #1
 8001c9c:	4196      	sbcs	r6, r2
 8001c9e:	4333      	orrs	r3, r6
 8001ca0:	e0da      	b.n	8001e58 <__aeabi_dsub+0x3b4>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x204>
 8001ca6:	e214      	b.n	80020d2 <__aeabi_dsub+0x62e>
 8001ca8:	4663      	mov	r3, ip
 8001caa:	4313      	orrs	r3, r2
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x20c>
 8001cae:	e168      	b.n	8001f82 <__aeabi_dsub+0x4de>
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	074e      	lsls	r6, r1, #29
 8001cb4:	08c0      	lsrs	r0, r0, #3
 8001cb6:	08c9      	lsrs	r1, r1, #3
 8001cb8:	031b      	lsls	r3, r3, #12
 8001cba:	4306      	orrs	r6, r0
 8001cbc:	4219      	tst	r1, r3
 8001cbe:	d008      	beq.n	8001cd2 <__aeabi_dsub+0x22e>
 8001cc0:	4660      	mov	r0, ip
 8001cc2:	08c0      	lsrs	r0, r0, #3
 8001cc4:	4218      	tst	r0, r3
 8001cc6:	d104      	bne.n	8001cd2 <__aeabi_dsub+0x22e>
 8001cc8:	4663      	mov	r3, ip
 8001cca:	0001      	movs	r1, r0
 8001ccc:	08d2      	lsrs	r2, r2, #3
 8001cce:	075e      	lsls	r6, r3, #29
 8001cd0:	4316      	orrs	r6, r2
 8001cd2:	00f3      	lsls	r3, r6, #3
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	00c9      	lsls	r1, r1, #3
 8001cd8:	0f72      	lsrs	r2, r6, #29
 8001cda:	4d44      	ldr	r5, [pc, #272]	; (8001dec <__aeabi_dsub+0x348>)
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	464b      	mov	r3, r9
 8001ce0:	08de      	lsrs	r6, r3, #3
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <__aeabi_dsub+0x348>)
 8001ce4:	074f      	lsls	r7, r1, #29
 8001ce6:	4337      	orrs	r7, r6
 8001ce8:	08ca      	lsrs	r2, r1, #3
 8001cea:	429d      	cmp	r5, r3
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x24c>
 8001cee:	e06e      	b.n	8001dce <__aeabi_dsub+0x32a>
 8001cf0:	0312      	lsls	r2, r2, #12
 8001cf2:	056d      	lsls	r5, r5, #21
 8001cf4:	0b12      	lsrs	r2, r2, #12
 8001cf6:	0d6d      	lsrs	r5, r5, #21
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	0312      	lsls	r2, r2, #12
 8001cfc:	0b13      	lsrs	r3, r2, #12
 8001cfe:	0d0a      	lsrs	r2, r1, #20
 8001d00:	0512      	lsls	r2, r2, #20
 8001d02:	431a      	orrs	r2, r3
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <__aeabi_dsub+0x350>)
 8001d06:	052d      	lsls	r5, r5, #20
 8001d08:	4013      	ands	r3, r2
 8001d0a:	432b      	orrs	r3, r5
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	07e4      	lsls	r4, r4, #31
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	4323      	orrs	r3, r4
 8001d14:	0038      	movs	r0, r7
 8001d16:	0019      	movs	r1, r3
 8001d18:	bc3c      	pop	{r2, r3, r4, r5}
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	46a2      	mov	sl, r4
 8001d20:	46ab      	mov	fp, r5
 8001d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d24:	4663      	mov	r3, ip
 8001d26:	4313      	orrs	r3, r2
 8001d28:	d011      	beq.n	8001d4e <__aeabi_dsub+0x2aa>
 8001d2a:	1e73      	subs	r3, r6, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x28e>
 8001d30:	e107      	b.n	8001f42 <__aeabi_dsub+0x49e>
 8001d32:	1886      	adds	r6, r0, r2
 8001d34:	4286      	cmp	r6, r0
 8001d36:	4180      	sbcs	r0, r0
 8001d38:	4461      	add	r1, ip
 8001d3a:	4240      	negs	r0, r0
 8001d3c:	1809      	adds	r1, r1, r0
 8001d3e:	2501      	movs	r5, #1
 8001d40:	020b      	lsls	r3, r1, #8
 8001d42:	d537      	bpl.n	8001db4 <__aeabi_dsub+0x310>
 8001d44:	2502      	movs	r5, #2
 8001d46:	e77b      	b.n	8001c40 <__aeabi_dsub+0x19c>
 8001d48:	003e      	movs	r6, r7
 8001d4a:	4661      	mov	r1, ip
 8001d4c:	4691      	mov	r9, r2
 8001d4e:	0035      	movs	r5, r6
 8001d50:	e7c5      	b.n	8001cde <__aeabi_dsub+0x23a>
 8001d52:	465c      	mov	r4, fp
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2b6>
 8001d58:	e0e1      	b.n	8001f1e <__aeabi_dsub+0x47a>
 8001d5a:	000b      	movs	r3, r1
 8001d5c:	4303      	orrs	r3, r0
 8001d5e:	d0f3      	beq.n	8001d48 <__aeabi_dsub+0x2a4>
 8001d60:	1c73      	adds	r3, r6, #1
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x2c2>
 8001d64:	e1ac      	b.n	80020c0 <__aeabi_dsub+0x61c>
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <__aeabi_dsub+0x348>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x2ca>
 8001d6c:	e13a      	b.n	8001fe4 <__aeabi_dsub+0x540>
 8001d6e:	43f3      	mvns	r3, r6
 8001d70:	2b38      	cmp	r3, #56	; 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x2d2>
 8001d74:	e16f      	b.n	8002056 <__aeabi_dsub+0x5b2>
 8001d76:	2b1f      	cmp	r3, #31
 8001d78:	dd00      	ble.n	8001d7c <__aeabi_dsub+0x2d8>
 8001d7a:	e18c      	b.n	8002096 <__aeabi_dsub+0x5f2>
 8001d7c:	2520      	movs	r5, #32
 8001d7e:	000e      	movs	r6, r1
 8001d80:	1aed      	subs	r5, r5, r3
 8001d82:	40ae      	lsls	r6, r5
 8001d84:	46b0      	mov	r8, r6
 8001d86:	0006      	movs	r6, r0
 8001d88:	46aa      	mov	sl, r5
 8001d8a:	40de      	lsrs	r6, r3
 8001d8c:	4645      	mov	r5, r8
 8001d8e:	4335      	orrs	r5, r6
 8001d90:	002e      	movs	r6, r5
 8001d92:	4655      	mov	r5, sl
 8001d94:	40d9      	lsrs	r1, r3
 8001d96:	40a8      	lsls	r0, r5
 8001d98:	4663      	mov	r3, ip
 8001d9a:	1e45      	subs	r5, r0, #1
 8001d9c:	41a8      	sbcs	r0, r5
 8001d9e:	1a5b      	subs	r3, r3, r1
 8001da0:	469c      	mov	ip, r3
 8001da2:	4330      	orrs	r0, r6
 8001da4:	1a16      	subs	r6, r2, r0
 8001da6:	42b2      	cmp	r2, r6
 8001da8:	4192      	sbcs	r2, r2
 8001daa:	4663      	mov	r3, ip
 8001dac:	4252      	negs	r2, r2
 8001dae:	1a99      	subs	r1, r3, r2
 8001db0:	003d      	movs	r5, r7
 8001db2:	e6b4      	b.n	8001b1e <__aeabi_dsub+0x7a>
 8001db4:	2207      	movs	r2, #7
 8001db6:	4032      	ands	r2, r6
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	d000      	beq.n	8001dbe <__aeabi_dsub+0x31a>
 8001dbc:	e6e4      	b.n	8001b88 <__aeabi_dsub+0xe4>
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <__aeabi_dsub+0x348>)
 8001dc0:	08f6      	lsrs	r6, r6, #3
 8001dc2:	074f      	lsls	r7, r1, #29
 8001dc4:	4337      	orrs	r7, r6
 8001dc6:	08ca      	lsrs	r2, r1, #3
 8001dc8:	429d      	cmp	r5, r3
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x32a>
 8001dcc:	e790      	b.n	8001cf0 <__aeabi_dsub+0x24c>
 8001dce:	003b      	movs	r3, r7
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x332>
 8001dd4:	e1a6      	b.n	8002124 <__aeabi_dsub+0x680>
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	031b      	lsls	r3, r3, #12
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	0312      	lsls	r2, r2, #12
 8001dde:	0b12      	lsrs	r2, r2, #12
 8001de0:	4d02      	ldr	r5, [pc, #8]	; (8001dec <__aeabi_dsub+0x348>)
 8001de2:	e789      	b.n	8001cf8 <__aeabi_dsub+0x254>
 8001de4:	0015      	movs	r5, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	2700      	movs	r7, #0
 8001dea:	e785      	b.n	8001cf8 <__aeabi_dsub+0x254>
 8001dec:	000007ff 	.word	0x000007ff
 8001df0:	ff7fffff 	.word	0xff7fffff
 8001df4:	800fffff 	.word	0x800fffff
 8001df8:	2e00      	cmp	r6, #0
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_dsub+0x35a>
 8001dfc:	e0c7      	b.n	8001f8e <__aeabi_dsub+0x4ea>
 8001dfe:	1c6b      	adds	r3, r5, #1
 8001e00:	055e      	lsls	r6, r3, #21
 8001e02:	0d76      	lsrs	r6, r6, #21
 8001e04:	2e01      	cmp	r6, #1
 8001e06:	dc00      	bgt.n	8001e0a <__aeabi_dsub+0x366>
 8001e08:	e0f0      	b.n	8001fec <__aeabi_dsub+0x548>
 8001e0a:	4dc8      	ldr	r5, [pc, #800]	; (800212c <__aeabi_dsub+0x688>)
 8001e0c:	42ab      	cmp	r3, r5
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x36e>
 8001e10:	e0b9      	b.n	8001f86 <__aeabi_dsub+0x4e2>
 8001e12:	1885      	adds	r5, r0, r2
 8001e14:	000a      	movs	r2, r1
 8001e16:	4285      	cmp	r5, r0
 8001e18:	4189      	sbcs	r1, r1
 8001e1a:	4462      	add	r2, ip
 8001e1c:	4249      	negs	r1, r1
 8001e1e:	1851      	adds	r1, r2, r1
 8001e20:	2207      	movs	r2, #7
 8001e22:	07ce      	lsls	r6, r1, #31
 8001e24:	086d      	lsrs	r5, r5, #1
 8001e26:	432e      	orrs	r6, r5
 8001e28:	0849      	lsrs	r1, r1, #1
 8001e2a:	4032      	ands	r2, r6
 8001e2c:	001d      	movs	r5, r3
 8001e2e:	e6a9      	b.n	8001b84 <__aeabi_dsub+0xe0>
 8001e30:	49bf      	ldr	r1, [pc, #764]	; (8002130 <__aeabi_dsub+0x68c>)
 8001e32:	1aed      	subs	r5, r5, r3
 8001e34:	4011      	ands	r1, r2
 8001e36:	2207      	movs	r2, #7
 8001e38:	4032      	ands	r2, r6
 8001e3a:	e6a3      	b.n	8001b84 <__aeabi_dsub+0xe0>
 8001e3c:	0032      	movs	r2, r6
 8001e3e:	3828      	subs	r0, #40	; 0x28
 8001e40:	4082      	lsls	r2, r0
 8001e42:	2600      	movs	r6, #0
 8001e44:	e686      	b.n	8001b54 <__aeabi_dsub+0xb0>
 8001e46:	0030      	movs	r0, r6
 8001e48:	f000 fb08 	bl	800245c <__clzsi2>
 8001e4c:	3020      	adds	r0, #32
 8001e4e:	e673      	b.n	8001b38 <__aeabi_dsub+0x94>
 8001e50:	4663      	mov	r3, ip
 8001e52:	4313      	orrs	r3, r2
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	4193      	sbcs	r3, r2
 8001e58:	1ac6      	subs	r6, r0, r3
 8001e5a:	42b0      	cmp	r0, r6
 8001e5c:	4180      	sbcs	r0, r0
 8001e5e:	4240      	negs	r0, r0
 8001e60:	1a09      	subs	r1, r1, r0
 8001e62:	e65c      	b.n	8001b1e <__aeabi_dsub+0x7a>
 8001e64:	000e      	movs	r6, r1
 8001e66:	4667      	mov	r7, ip
 8001e68:	4306      	orrs	r6, r0
 8001e6a:	4317      	orrs	r7, r2
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d15e      	bne.n	8001f2e <__aeabi_dsub+0x48a>
 8001e70:	2e00      	cmp	r6, #0
 8001e72:	d000      	beq.n	8001e76 <__aeabi_dsub+0x3d2>
 8001e74:	e0f3      	b.n	800205e <__aeabi_dsub+0x5ba>
 8001e76:	2f00      	cmp	r7, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x3d8>
 8001e7a:	e11e      	b.n	80020ba <__aeabi_dsub+0x616>
 8001e7c:	465c      	mov	r4, fp
 8001e7e:	4661      	mov	r1, ip
 8001e80:	4691      	mov	r9, r2
 8001e82:	e72c      	b.n	8001cde <__aeabi_dsub+0x23a>
 8001e84:	4fa9      	ldr	r7, [pc, #676]	; (800212c <__aeabi_dsub+0x688>)
 8001e86:	42be      	cmp	r6, r7
 8001e88:	d07b      	beq.n	8001f82 <__aeabi_dsub+0x4de>
 8001e8a:	001e      	movs	r6, r3
 8001e8c:	e6f1      	b.n	8001c72 <__aeabi_dsub+0x1ce>
 8001e8e:	0010      	movs	r0, r2
 8001e90:	3d1f      	subs	r5, #31
 8001e92:	40e8      	lsrs	r0, r5
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d003      	beq.n	8001ea0 <__aeabi_dsub+0x3fc>
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	1acb      	subs	r3, r1, r3
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	4316      	orrs	r6, r2
 8001ea0:	1e73      	subs	r3, r6, #1
 8001ea2:	419e      	sbcs	r6, r3
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4306      	orrs	r6, r0
 8001ea8:	4032      	ands	r2, r6
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2500      	movs	r5, #0
 8001eae:	e783      	b.n	8001db8 <__aeabi_dsub+0x314>
 8001eb0:	1a16      	subs	r6, r2, r0
 8001eb2:	4663      	mov	r3, ip
 8001eb4:	42b2      	cmp	r2, r6
 8001eb6:	4180      	sbcs	r0, r0
 8001eb8:	1a59      	subs	r1, r3, r1
 8001eba:	4240      	negs	r0, r0
 8001ebc:	1a0b      	subs	r3, r1, r0
 8001ebe:	4698      	mov	r8, r3
 8001ec0:	465c      	mov	r4, fp
 8001ec2:	e632      	b.n	8001b2a <__aeabi_dsub+0x86>
 8001ec4:	2e1f      	cmp	r6, #31
 8001ec6:	dd00      	ble.n	8001eca <__aeabi_dsub+0x426>
 8001ec8:	e0ab      	b.n	8002022 <__aeabi_dsub+0x57e>
 8001eca:	2720      	movs	r7, #32
 8001ecc:	1bbb      	subs	r3, r7, r6
 8001ece:	469a      	mov	sl, r3
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	4657      	mov	r7, sl
 8001ed4:	40bb      	lsls	r3, r7
 8001ed6:	4699      	mov	r9, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	464f      	mov	r7, r9
 8001edc:	40f3      	lsrs	r3, r6
 8001ede:	431f      	orrs	r7, r3
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	4657      	mov	r7, sl
 8001ee4:	40ba      	lsls	r2, r7
 8001ee6:	1e57      	subs	r7, r2, #1
 8001ee8:	41ba      	sbcs	r2, r7
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4662      	mov	r2, ip
 8001eee:	40f2      	lsrs	r2, r6
 8001ef0:	1889      	adds	r1, r1, r2
 8001ef2:	e698      	b.n	8001c26 <__aeabi_dsub+0x182>
 8001ef4:	2720      	movs	r7, #32
 8001ef6:	1bbb      	subs	r3, r7, r6
 8001ef8:	469a      	mov	sl, r3
 8001efa:	4663      	mov	r3, ip
 8001efc:	4657      	mov	r7, sl
 8001efe:	40bb      	lsls	r3, r7
 8001f00:	4699      	mov	r9, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	464f      	mov	r7, r9
 8001f06:	40f3      	lsrs	r3, r6
 8001f08:	431f      	orrs	r7, r3
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	4657      	mov	r7, sl
 8001f0e:	40ba      	lsls	r2, r7
 8001f10:	1e57      	subs	r7, r2, #1
 8001f12:	41ba      	sbcs	r2, r7
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4662      	mov	r2, ip
 8001f18:	40f2      	lsrs	r2, r6
 8001f1a:	1a89      	subs	r1, r1, r2
 8001f1c:	e79c      	b.n	8001e58 <__aeabi_dsub+0x3b4>
 8001f1e:	4b83      	ldr	r3, [pc, #524]	; (800212c <__aeabi_dsub+0x688>)
 8001f20:	429f      	cmp	r7, r3
 8001f22:	d05f      	beq.n	8001fe4 <__aeabi_dsub+0x540>
 8001f24:	2580      	movs	r5, #128	; 0x80
 8001f26:	042d      	lsls	r5, r5, #16
 8001f28:	4273      	negs	r3, r6
 8001f2a:	4329      	orrs	r1, r5
 8001f2c:	e720      	b.n	8001d70 <__aeabi_dsub+0x2cc>
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d10c      	bne.n	8001f4c <__aeabi_dsub+0x4a8>
 8001f32:	2f00      	cmp	r7, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x494>
 8001f36:	e0d0      	b.n	80020da <__aeabi_dsub+0x636>
 8001f38:	465c      	mov	r4, fp
 8001f3a:	4661      	mov	r1, ip
 8001f3c:	4691      	mov	r9, r2
 8001f3e:	4d7b      	ldr	r5, [pc, #492]	; (800212c <__aeabi_dsub+0x688>)
 8001f40:	e6cd      	b.n	8001cde <__aeabi_dsub+0x23a>
 8001f42:	4f7a      	ldr	r7, [pc, #488]	; (800212c <__aeabi_dsub+0x688>)
 8001f44:	42be      	cmp	r6, r7
 8001f46:	d01c      	beq.n	8001f82 <__aeabi_dsub+0x4de>
 8001f48:	001e      	movs	r6, r3
 8001f4a:	e665      	b.n	8001c18 <__aeabi_dsub+0x174>
 8001f4c:	2f00      	cmp	r7, #0
 8001f4e:	d018      	beq.n	8001f82 <__aeabi_dsub+0x4de>
 8001f50:	08c0      	lsrs	r0, r0, #3
 8001f52:	074e      	lsls	r6, r1, #29
 8001f54:	4306      	orrs	r6, r0
 8001f56:	2080      	movs	r0, #128	; 0x80
 8001f58:	08c9      	lsrs	r1, r1, #3
 8001f5a:	0300      	lsls	r0, r0, #12
 8001f5c:	4201      	tst	r1, r0
 8001f5e:	d008      	beq.n	8001f72 <__aeabi_dsub+0x4ce>
 8001f60:	4663      	mov	r3, ip
 8001f62:	08dc      	lsrs	r4, r3, #3
 8001f64:	4204      	tst	r4, r0
 8001f66:	d104      	bne.n	8001f72 <__aeabi_dsub+0x4ce>
 8001f68:	0021      	movs	r1, r4
 8001f6a:	46da      	mov	sl, fp
 8001f6c:	08d2      	lsrs	r2, r2, #3
 8001f6e:	075e      	lsls	r6, r3, #29
 8001f70:	4316      	orrs	r6, r2
 8001f72:	00f3      	lsls	r3, r6, #3
 8001f74:	4699      	mov	r9, r3
 8001f76:	2401      	movs	r4, #1
 8001f78:	4653      	mov	r3, sl
 8001f7a:	00c9      	lsls	r1, r1, #3
 8001f7c:	0f72      	lsrs	r2, r6, #29
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	401c      	ands	r4, r3
 8001f82:	4d6a      	ldr	r5, [pc, #424]	; (800212c <__aeabi_dsub+0x688>)
 8001f84:	e6ab      	b.n	8001cde <__aeabi_dsub+0x23a>
 8001f86:	001d      	movs	r5, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2700      	movs	r7, #0
 8001f8c:	e6b4      	b.n	8001cf8 <__aeabi_dsub+0x254>
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	d159      	bne.n	8002046 <__aeabi_dsub+0x5a2>
 8001f92:	000b      	movs	r3, r1
 8001f94:	4303      	orrs	r3, r0
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x4f6>
 8001f98:	e6d6      	b.n	8001d48 <__aeabi_dsub+0x2a4>
 8001f9a:	1c73      	adds	r3, r6, #1
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x4fc>
 8001f9e:	e0b2      	b.n	8002106 <__aeabi_dsub+0x662>
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <__aeabi_dsub+0x688>)
 8001fa2:	429f      	cmp	r7, r3
 8001fa4:	d01e      	beq.n	8001fe4 <__aeabi_dsub+0x540>
 8001fa6:	43f3      	mvns	r3, r6
 8001fa8:	2b38      	cmp	r3, #56	; 0x38
 8001faa:	dc6f      	bgt.n	800208c <__aeabi_dsub+0x5e8>
 8001fac:	2b1f      	cmp	r3, #31
 8001fae:	dd00      	ble.n	8001fb2 <__aeabi_dsub+0x50e>
 8001fb0:	e097      	b.n	80020e2 <__aeabi_dsub+0x63e>
 8001fb2:	2520      	movs	r5, #32
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	1aed      	subs	r5, r5, r3
 8001fb8:	40ae      	lsls	r6, r5
 8001fba:	46b0      	mov	r8, r6
 8001fbc:	0006      	movs	r6, r0
 8001fbe:	46aa      	mov	sl, r5
 8001fc0:	40de      	lsrs	r6, r3
 8001fc2:	4645      	mov	r5, r8
 8001fc4:	4335      	orrs	r5, r6
 8001fc6:	002e      	movs	r6, r5
 8001fc8:	4655      	mov	r5, sl
 8001fca:	40a8      	lsls	r0, r5
 8001fcc:	40d9      	lsrs	r1, r3
 8001fce:	1e45      	subs	r5, r0, #1
 8001fd0:	41a8      	sbcs	r0, r5
 8001fd2:	448c      	add	ip, r1
 8001fd4:	4306      	orrs	r6, r0
 8001fd6:	18b6      	adds	r6, r6, r2
 8001fd8:	4296      	cmp	r6, r2
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4251      	negs	r1, r2
 8001fde:	4461      	add	r1, ip
 8001fe0:	003d      	movs	r5, r7
 8001fe2:	e625      	b.n	8001c30 <__aeabi_dsub+0x18c>
 8001fe4:	003d      	movs	r5, r7
 8001fe6:	4661      	mov	r1, ip
 8001fe8:	4691      	mov	r9, r2
 8001fea:	e678      	b.n	8001cde <__aeabi_dsub+0x23a>
 8001fec:	000b      	movs	r3, r1
 8001fee:	4303      	orrs	r3, r0
 8001ff0:	2d00      	cmp	r5, #0
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x552>
 8001ff4:	e655      	b.n	8001ca2 <__aeabi_dsub+0x1fe>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f5      	beq.n	8001fe6 <__aeabi_dsub+0x542>
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x55e>
 8002000:	e66d      	b.n	8001cde <__aeabi_dsub+0x23a>
 8002002:	1886      	adds	r6, r0, r2
 8002004:	4286      	cmp	r6, r0
 8002006:	4180      	sbcs	r0, r0
 8002008:	4461      	add	r1, ip
 800200a:	4240      	negs	r0, r0
 800200c:	1809      	adds	r1, r1, r0
 800200e:	2200      	movs	r2, #0
 8002010:	020b      	lsls	r3, r1, #8
 8002012:	d400      	bmi.n	8002016 <__aeabi_dsub+0x572>
 8002014:	e6d0      	b.n	8001db8 <__aeabi_dsub+0x314>
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <__aeabi_dsub+0x68c>)
 8002018:	3501      	adds	r5, #1
 800201a:	4019      	ands	r1, r3
 800201c:	e5b2      	b.n	8001b84 <__aeabi_dsub+0xe0>
 800201e:	46b1      	mov	r9, r6
 8002020:	e65d      	b.n	8001cde <__aeabi_dsub+0x23a>
 8002022:	0033      	movs	r3, r6
 8002024:	4667      	mov	r7, ip
 8002026:	3b20      	subs	r3, #32
 8002028:	40df      	lsrs	r7, r3
 800202a:	003b      	movs	r3, r7
 800202c:	2e20      	cmp	r6, #32
 800202e:	d005      	beq.n	800203c <__aeabi_dsub+0x598>
 8002030:	2740      	movs	r7, #64	; 0x40
 8002032:	1bbf      	subs	r7, r7, r6
 8002034:	4666      	mov	r6, ip
 8002036:	40be      	lsls	r6, r7
 8002038:	4332      	orrs	r2, r6
 800203a:	4690      	mov	r8, r2
 800203c:	4646      	mov	r6, r8
 800203e:	1e72      	subs	r2, r6, #1
 8002040:	4196      	sbcs	r6, r2
 8002042:	4333      	orrs	r3, r6
 8002044:	e5ef      	b.n	8001c26 <__aeabi_dsub+0x182>
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <__aeabi_dsub+0x688>)
 8002048:	429f      	cmp	r7, r3
 800204a:	d0cb      	beq.n	8001fe4 <__aeabi_dsub+0x540>
 800204c:	2580      	movs	r5, #128	; 0x80
 800204e:	042d      	lsls	r5, r5, #16
 8002050:	4273      	negs	r3, r6
 8002052:	4329      	orrs	r1, r5
 8002054:	e7a8      	b.n	8001fa8 <__aeabi_dsub+0x504>
 8002056:	4308      	orrs	r0, r1
 8002058:	1e41      	subs	r1, r0, #1
 800205a:	4188      	sbcs	r0, r1
 800205c:	e6a2      	b.n	8001da4 <__aeabi_dsub+0x300>
 800205e:	2f00      	cmp	r7, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x5c0>
 8002062:	e63c      	b.n	8001cde <__aeabi_dsub+0x23a>
 8002064:	4663      	mov	r3, ip
 8002066:	1a86      	subs	r6, r0, r2
 8002068:	1acf      	subs	r7, r1, r3
 800206a:	42b0      	cmp	r0, r6
 800206c:	419b      	sbcs	r3, r3
 800206e:	425b      	negs	r3, r3
 8002070:	1afb      	subs	r3, r7, r3
 8002072:	4698      	mov	r8, r3
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	d54e      	bpl.n	8002116 <__aeabi_dsub+0x672>
 8002078:	1a16      	subs	r6, r2, r0
 800207a:	4663      	mov	r3, ip
 800207c:	42b2      	cmp	r2, r6
 800207e:	4192      	sbcs	r2, r2
 8002080:	1a59      	subs	r1, r3, r1
 8002082:	4252      	negs	r2, r2
 8002084:	1a89      	subs	r1, r1, r2
 8002086:	465c      	mov	r4, fp
 8002088:	2200      	movs	r2, #0
 800208a:	e57b      	b.n	8001b84 <__aeabi_dsub+0xe0>
 800208c:	4301      	orrs	r1, r0
 800208e:	000e      	movs	r6, r1
 8002090:	1e71      	subs	r1, r6, #1
 8002092:	418e      	sbcs	r6, r1
 8002094:	e79f      	b.n	8001fd6 <__aeabi_dsub+0x532>
 8002096:	001d      	movs	r5, r3
 8002098:	000e      	movs	r6, r1
 800209a:	3d20      	subs	r5, #32
 800209c:	40ee      	lsrs	r6, r5
 800209e:	46b0      	mov	r8, r6
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d004      	beq.n	80020ae <__aeabi_dsub+0x60a>
 80020a4:	2540      	movs	r5, #64	; 0x40
 80020a6:	1aeb      	subs	r3, r5, r3
 80020a8:	4099      	lsls	r1, r3
 80020aa:	4308      	orrs	r0, r1
 80020ac:	4681      	mov	r9, r0
 80020ae:	4648      	mov	r0, r9
 80020b0:	4643      	mov	r3, r8
 80020b2:	1e41      	subs	r1, r0, #1
 80020b4:	4188      	sbcs	r0, r1
 80020b6:	4318      	orrs	r0, r3
 80020b8:	e674      	b.n	8001da4 <__aeabi_dsub+0x300>
 80020ba:	2200      	movs	r2, #0
 80020bc:	2400      	movs	r4, #0
 80020be:	e617      	b.n	8001cf0 <__aeabi_dsub+0x24c>
 80020c0:	1a16      	subs	r6, r2, r0
 80020c2:	4663      	mov	r3, ip
 80020c4:	42b2      	cmp	r2, r6
 80020c6:	4192      	sbcs	r2, r2
 80020c8:	1a59      	subs	r1, r3, r1
 80020ca:	4252      	negs	r2, r2
 80020cc:	1a89      	subs	r1, r1, r2
 80020ce:	003d      	movs	r5, r7
 80020d0:	e525      	b.n	8001b1e <__aeabi_dsub+0x7a>
 80020d2:	4661      	mov	r1, ip
 80020d4:	4691      	mov	r9, r2
 80020d6:	4d15      	ldr	r5, [pc, #84]	; (800212c <__aeabi_dsub+0x688>)
 80020d8:	e601      	b.n	8001cde <__aeabi_dsub+0x23a>
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	2400      	movs	r4, #0
 80020de:	0312      	lsls	r2, r2, #12
 80020e0:	e679      	b.n	8001dd6 <__aeabi_dsub+0x332>
 80020e2:	001d      	movs	r5, r3
 80020e4:	000e      	movs	r6, r1
 80020e6:	3d20      	subs	r5, #32
 80020e8:	40ee      	lsrs	r6, r5
 80020ea:	46b0      	mov	r8, r6
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d004      	beq.n	80020fa <__aeabi_dsub+0x656>
 80020f0:	2540      	movs	r5, #64	; 0x40
 80020f2:	1aeb      	subs	r3, r5, r3
 80020f4:	4099      	lsls	r1, r3
 80020f6:	4308      	orrs	r0, r1
 80020f8:	4681      	mov	r9, r0
 80020fa:	464e      	mov	r6, r9
 80020fc:	4643      	mov	r3, r8
 80020fe:	1e71      	subs	r1, r6, #1
 8002100:	418e      	sbcs	r6, r1
 8002102:	431e      	orrs	r6, r3
 8002104:	e767      	b.n	8001fd6 <__aeabi_dsub+0x532>
 8002106:	1886      	adds	r6, r0, r2
 8002108:	4296      	cmp	r6, r2
 800210a:	419b      	sbcs	r3, r3
 800210c:	4461      	add	r1, ip
 800210e:	425b      	negs	r3, r3
 8002110:	18c9      	adds	r1, r1, r3
 8002112:	003d      	movs	r5, r7
 8002114:	e58c      	b.n	8001c30 <__aeabi_dsub+0x18c>
 8002116:	4647      	mov	r7, r8
 8002118:	4337      	orrs	r7, r6
 800211a:	d0ce      	beq.n	80020ba <__aeabi_dsub+0x616>
 800211c:	2207      	movs	r2, #7
 800211e:	4641      	mov	r1, r8
 8002120:	4032      	ands	r2, r6
 8002122:	e649      	b.n	8001db8 <__aeabi_dsub+0x314>
 8002124:	2700      	movs	r7, #0
 8002126:	003a      	movs	r2, r7
 8002128:	e5e6      	b.n	8001cf8 <__aeabi_dsub+0x254>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff
 8002130:	ff7fffff 	.word	0xff7fffff

08002134 <__aeabi_dcmpun>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4e0c      	ldr	r6, [pc, #48]	; (8002168 <__aeabi_dcmpun+0x34>)
 8002138:	030d      	lsls	r5, r1, #12
 800213a:	031c      	lsls	r4, r3, #12
 800213c:	0049      	lsls	r1, r1, #1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	0b2d      	lsrs	r5, r5, #12
 8002142:	0d49      	lsrs	r1, r1, #21
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	42b1      	cmp	r1, r6
 800214a:	d008      	beq.n	800215e <__aeabi_dcmpun+0x2a>
 800214c:	4906      	ldr	r1, [pc, #24]	; (8002168 <__aeabi_dcmpun+0x34>)
 800214e:	2000      	movs	r0, #0
 8002150:	428b      	cmp	r3, r1
 8002152:	d103      	bne.n	800215c <__aeabi_dcmpun+0x28>
 8002154:	4314      	orrs	r4, r2
 8002156:	0020      	movs	r0, r4
 8002158:	1e44      	subs	r4, r0, #1
 800215a:	41a0      	sbcs	r0, r4
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	4305      	orrs	r5, r0
 8002160:	2001      	movs	r0, #1
 8002162:	2d00      	cmp	r5, #0
 8002164:	d1fa      	bne.n	800215c <__aeabi_dcmpun+0x28>
 8002166:	e7f1      	b.n	800214c <__aeabi_dcmpun+0x18>
 8002168:	000007ff 	.word	0x000007ff

0800216c <__aeabi_d2iz>:
 800216c:	b530      	push	{r4, r5, lr}
 800216e:	4d14      	ldr	r5, [pc, #80]	; (80021c0 <__aeabi_d2iz+0x54>)
 8002170:	030a      	lsls	r2, r1, #12
 8002172:	004b      	lsls	r3, r1, #1
 8002174:	0b12      	lsrs	r2, r2, #12
 8002176:	0d5b      	lsrs	r3, r3, #21
 8002178:	0fc9      	lsrs	r1, r1, #31
 800217a:	2400      	movs	r4, #0
 800217c:	42ab      	cmp	r3, r5
 800217e:	dd11      	ble.n	80021a4 <__aeabi_d2iz+0x38>
 8002180:	4c10      	ldr	r4, [pc, #64]	; (80021c4 <__aeabi_d2iz+0x58>)
 8002182:	42a3      	cmp	r3, r4
 8002184:	dc10      	bgt.n	80021a8 <__aeabi_d2iz+0x3c>
 8002186:	2480      	movs	r4, #128	; 0x80
 8002188:	0364      	lsls	r4, r4, #13
 800218a:	4322      	orrs	r2, r4
 800218c:	4c0e      	ldr	r4, [pc, #56]	; (80021c8 <__aeabi_d2iz+0x5c>)
 800218e:	1ae4      	subs	r4, r4, r3
 8002190:	2c1f      	cmp	r4, #31
 8002192:	dd0c      	ble.n	80021ae <__aeabi_d2iz+0x42>
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <__aeabi_d2iz+0x60>)
 8002196:	1ac3      	subs	r3, r0, r3
 8002198:	40da      	lsrs	r2, r3
 800219a:	0013      	movs	r3, r2
 800219c:	425c      	negs	r4, r3
 800219e:	2900      	cmp	r1, #0
 80021a0:	d100      	bne.n	80021a4 <__aeabi_d2iz+0x38>
 80021a2:	001c      	movs	r4, r3
 80021a4:	0020      	movs	r0, r4
 80021a6:	bd30      	pop	{r4, r5, pc}
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <__aeabi_d2iz+0x64>)
 80021aa:	18cc      	adds	r4, r1, r3
 80021ac:	e7fa      	b.n	80021a4 <__aeabi_d2iz+0x38>
 80021ae:	4d09      	ldr	r5, [pc, #36]	; (80021d4 <__aeabi_d2iz+0x68>)
 80021b0:	40e0      	lsrs	r0, r4
 80021b2:	46ac      	mov	ip, r5
 80021b4:	4463      	add	r3, ip
 80021b6:	409a      	lsls	r2, r3
 80021b8:	0013      	movs	r3, r2
 80021ba:	4303      	orrs	r3, r0
 80021bc:	e7ee      	b.n	800219c <__aeabi_d2iz+0x30>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000003fe 	.word	0x000003fe
 80021c4:	0000041d 	.word	0x0000041d
 80021c8:	00000433 	.word	0x00000433
 80021cc:	00000413 	.word	0x00000413
 80021d0:	7fffffff 	.word	0x7fffffff
 80021d4:	fffffbed 	.word	0xfffffbed

080021d8 <__aeabi_i2d>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2800      	cmp	r0, #0
 80021dc:	d02d      	beq.n	800223a <__aeabi_i2d+0x62>
 80021de:	17c3      	asrs	r3, r0, #31
 80021e0:	18c5      	adds	r5, r0, r3
 80021e2:	405d      	eors	r5, r3
 80021e4:	0fc4      	lsrs	r4, r0, #31
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f938 	bl	800245c <__clzsi2>
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <__aeabi_i2d+0x6c>)
 80021ee:	1a1b      	subs	r3, r3, r0
 80021f0:	055b      	lsls	r3, r3, #21
 80021f2:	0d5b      	lsrs	r3, r3, #21
 80021f4:	280a      	cmp	r0, #10
 80021f6:	dd15      	ble.n	8002224 <__aeabi_i2d+0x4c>
 80021f8:	380b      	subs	r0, #11
 80021fa:	4085      	lsls	r5, r0
 80021fc:	2200      	movs	r2, #0
 80021fe:	032d      	lsls	r5, r5, #12
 8002200:	0b2d      	lsrs	r5, r5, #12
 8002202:	2100      	movs	r1, #0
 8002204:	0010      	movs	r0, r2
 8002206:	032d      	lsls	r5, r5, #12
 8002208:	0d0a      	lsrs	r2, r1, #20
 800220a:	0b2d      	lsrs	r5, r5, #12
 800220c:	0512      	lsls	r2, r2, #20
 800220e:	432a      	orrs	r2, r5
 8002210:	4d0d      	ldr	r5, [pc, #52]	; (8002248 <__aeabi_i2d+0x70>)
 8002212:	051b      	lsls	r3, r3, #20
 8002214:	402a      	ands	r2, r5
 8002216:	4313      	orrs	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	07e4      	lsls	r4, r4, #31
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	4323      	orrs	r3, r4
 8002220:	0019      	movs	r1, r3
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	0002      	movs	r2, r0
 8002226:	0029      	movs	r1, r5
 8002228:	3215      	adds	r2, #21
 800222a:	4091      	lsls	r1, r2
 800222c:	000a      	movs	r2, r1
 800222e:	210b      	movs	r1, #11
 8002230:	1a08      	subs	r0, r1, r0
 8002232:	40c5      	lsrs	r5, r0
 8002234:	032d      	lsls	r5, r5, #12
 8002236:	0b2d      	lsrs	r5, r5, #12
 8002238:	e7e3      	b.n	8002202 <__aeabi_i2d+0x2a>
 800223a:	2400      	movs	r4, #0
 800223c:	2300      	movs	r3, #0
 800223e:	2500      	movs	r5, #0
 8002240:	2200      	movs	r2, #0
 8002242:	e7de      	b.n	8002202 <__aeabi_i2d+0x2a>
 8002244:	0000041e 	.word	0x0000041e
 8002248:	800fffff 	.word	0x800fffff

0800224c <__aeabi_ui2d>:
 800224c:	b510      	push	{r4, lr}
 800224e:	1e04      	subs	r4, r0, #0
 8002250:	d025      	beq.n	800229e <__aeabi_ui2d+0x52>
 8002252:	f000 f903 	bl	800245c <__clzsi2>
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <__aeabi_ui2d+0x5c>)
 8002258:	1a1b      	subs	r3, r3, r0
 800225a:	055b      	lsls	r3, r3, #21
 800225c:	0d5b      	lsrs	r3, r3, #21
 800225e:	280a      	cmp	r0, #10
 8002260:	dd12      	ble.n	8002288 <__aeabi_ui2d+0x3c>
 8002262:	380b      	subs	r0, #11
 8002264:	4084      	lsls	r4, r0
 8002266:	2200      	movs	r2, #0
 8002268:	0324      	lsls	r4, r4, #12
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	2100      	movs	r1, #0
 800226e:	0010      	movs	r0, r2
 8002270:	0324      	lsls	r4, r4, #12
 8002272:	0d0a      	lsrs	r2, r1, #20
 8002274:	0b24      	lsrs	r4, r4, #12
 8002276:	0512      	lsls	r2, r2, #20
 8002278:	4322      	orrs	r2, r4
 800227a:	4c0c      	ldr	r4, [pc, #48]	; (80022ac <__aeabi_ui2d+0x60>)
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	4022      	ands	r2, r4
 8002280:	4313      	orrs	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	0859      	lsrs	r1, r3, #1
 8002286:	bd10      	pop	{r4, pc}
 8002288:	0002      	movs	r2, r0
 800228a:	0021      	movs	r1, r4
 800228c:	3215      	adds	r2, #21
 800228e:	4091      	lsls	r1, r2
 8002290:	000a      	movs	r2, r1
 8002292:	210b      	movs	r1, #11
 8002294:	1a08      	subs	r0, r1, r0
 8002296:	40c4      	lsrs	r4, r0
 8002298:	0324      	lsls	r4, r4, #12
 800229a:	0b24      	lsrs	r4, r4, #12
 800229c:	e7e6      	b.n	800226c <__aeabi_ui2d+0x20>
 800229e:	2300      	movs	r3, #0
 80022a0:	2400      	movs	r4, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7e2      	b.n	800226c <__aeabi_ui2d+0x20>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	0000041e 	.word	0x0000041e
 80022ac:	800fffff 	.word	0x800fffff

080022b0 <__aeabi_f2d>:
 80022b0:	0041      	lsls	r1, r0, #1
 80022b2:	0e09      	lsrs	r1, r1, #24
 80022b4:	1c4b      	adds	r3, r1, #1
 80022b6:	b570      	push	{r4, r5, r6, lr}
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	0246      	lsls	r6, r0, #9
 80022bc:	0a75      	lsrs	r5, r6, #9
 80022be:	0fc4      	lsrs	r4, r0, #31
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	dd14      	ble.n	80022ee <__aeabi_f2d+0x3e>
 80022c4:	23e0      	movs	r3, #224	; 0xe0
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	076d      	lsls	r5, r5, #29
 80022ca:	0b36      	lsrs	r6, r6, #12
 80022cc:	18cb      	adds	r3, r1, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	0d0a      	lsrs	r2, r1, #20
 80022d2:	0028      	movs	r0, r5
 80022d4:	0512      	lsls	r2, r2, #20
 80022d6:	4d1c      	ldr	r5, [pc, #112]	; (8002348 <__aeabi_f2d+0x98>)
 80022d8:	4332      	orrs	r2, r6
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	402a      	ands	r2, r5
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	07e4      	lsls	r4, r4, #31
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	4323      	orrs	r3, r4
 80022ea:	0019      	movs	r1, r3
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d114      	bne.n	800231c <__aeabi_f2d+0x6c>
 80022f2:	2d00      	cmp	r5, #0
 80022f4:	d01e      	beq.n	8002334 <__aeabi_f2d+0x84>
 80022f6:	0028      	movs	r0, r5
 80022f8:	f000 f8b0 	bl	800245c <__clzsi2>
 80022fc:	280a      	cmp	r0, #10
 80022fe:	dc1c      	bgt.n	800233a <__aeabi_f2d+0x8a>
 8002300:	230b      	movs	r3, #11
 8002302:	002a      	movs	r2, r5
 8002304:	1a1b      	subs	r3, r3, r0
 8002306:	40da      	lsrs	r2, r3
 8002308:	0003      	movs	r3, r0
 800230a:	3315      	adds	r3, #21
 800230c:	409d      	lsls	r5, r3
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <__aeabi_f2d+0x9c>)
 8002310:	0312      	lsls	r2, r2, #12
 8002312:	1a1b      	subs	r3, r3, r0
 8002314:	055b      	lsls	r3, r3, #21
 8002316:	0b16      	lsrs	r6, r2, #12
 8002318:	0d5b      	lsrs	r3, r3, #21
 800231a:	e7d8      	b.n	80022ce <__aeabi_f2d+0x1e>
 800231c:	2d00      	cmp	r5, #0
 800231e:	d006      	beq.n	800232e <__aeabi_f2d+0x7e>
 8002320:	0b32      	lsrs	r2, r6, #12
 8002322:	2680      	movs	r6, #128	; 0x80
 8002324:	0336      	lsls	r6, r6, #12
 8002326:	076d      	lsls	r5, r5, #29
 8002328:	4316      	orrs	r6, r2
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <__aeabi_f2d+0xa0>)
 800232c:	e7cf      	b.n	80022ce <__aeabi_f2d+0x1e>
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <__aeabi_f2d+0xa0>)
 8002330:	2600      	movs	r6, #0
 8002332:	e7cc      	b.n	80022ce <__aeabi_f2d+0x1e>
 8002334:	2300      	movs	r3, #0
 8002336:	2600      	movs	r6, #0
 8002338:	e7c9      	b.n	80022ce <__aeabi_f2d+0x1e>
 800233a:	0003      	movs	r3, r0
 800233c:	002a      	movs	r2, r5
 800233e:	3b0b      	subs	r3, #11
 8002340:	409a      	lsls	r2, r3
 8002342:	2500      	movs	r5, #0
 8002344:	e7e3      	b.n	800230e <__aeabi_f2d+0x5e>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	800fffff 	.word	0x800fffff
 800234c:	00000389 	.word	0x00000389
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2f>:
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	004c      	lsls	r4, r1, #1
 8002358:	0d64      	lsrs	r4, r4, #21
 800235a:	030b      	lsls	r3, r1, #12
 800235c:	1c62      	adds	r2, r4, #1
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	0f46      	lsrs	r6, r0, #29
 8002362:	0552      	lsls	r2, r2, #21
 8002364:	0fc9      	lsrs	r1, r1, #31
 8002366:	431e      	orrs	r6, r3
 8002368:	00c5      	lsls	r5, r0, #3
 800236a:	0d52      	lsrs	r2, r2, #21
 800236c:	2a01      	cmp	r2, #1
 800236e:	dd29      	ble.n	80023c4 <__aeabi_d2f+0x70>
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <__aeabi_d2f+0xfc>)
 8002372:	18e7      	adds	r7, r4, r3
 8002374:	2ffe      	cmp	r7, #254	; 0xfe
 8002376:	dc1c      	bgt.n	80023b2 <__aeabi_d2f+0x5e>
 8002378:	2f00      	cmp	r7, #0
 800237a:	dd3b      	ble.n	80023f4 <__aeabi_d2f+0xa0>
 800237c:	0180      	lsls	r0, r0, #6
 800237e:	1e43      	subs	r3, r0, #1
 8002380:	4198      	sbcs	r0, r3
 8002382:	2207      	movs	r2, #7
 8002384:	00f3      	lsls	r3, r6, #3
 8002386:	0f6d      	lsrs	r5, r5, #29
 8002388:	4303      	orrs	r3, r0
 800238a:	432b      	orrs	r3, r5
 800238c:	401a      	ands	r2, r3
 800238e:	2a00      	cmp	r2, #0
 8002390:	d004      	beq.n	800239c <__aeabi_d2f+0x48>
 8002392:	220f      	movs	r2, #15
 8002394:	401a      	ands	r2, r3
 8002396:	2a04      	cmp	r2, #4
 8002398:	d000      	beq.n	800239c <__aeabi_d2f+0x48>
 800239a:	3304      	adds	r3, #4
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	04d2      	lsls	r2, r2, #19
 80023a0:	401a      	ands	r2, r3
 80023a2:	d024      	beq.n	80023ee <__aeabi_d2f+0x9a>
 80023a4:	3701      	adds	r7, #1
 80023a6:	b2fa      	uxtb	r2, r7
 80023a8:	2fff      	cmp	r7, #255	; 0xff
 80023aa:	d002      	beq.n	80023b2 <__aeabi_d2f+0x5e>
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	0a58      	lsrs	r0, r3, #9
 80023b0:	e001      	b.n	80023b6 <__aeabi_d2f+0x62>
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	2000      	movs	r0, #0
 80023b6:	0240      	lsls	r0, r0, #9
 80023b8:	05d2      	lsls	r2, r2, #23
 80023ba:	0a40      	lsrs	r0, r0, #9
 80023bc:	07c9      	lsls	r1, r1, #31
 80023be:	4310      	orrs	r0, r2
 80023c0:	4308      	orrs	r0, r1
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c4:	4335      	orrs	r5, r6
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d104      	bne.n	80023d4 <__aeabi_d2f+0x80>
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d10a      	bne.n	80023e4 <__aeabi_d2f+0x90>
 80023ce:	2200      	movs	r2, #0
 80023d0:	2000      	movs	r0, #0
 80023d2:	e7f0      	b.n	80023b6 <__aeabi_d2f+0x62>
 80023d4:	2d00      	cmp	r5, #0
 80023d6:	d0ec      	beq.n	80023b2 <__aeabi_d2f+0x5e>
 80023d8:	2080      	movs	r0, #128	; 0x80
 80023da:	03c0      	lsls	r0, r0, #15
 80023dc:	4330      	orrs	r0, r6
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	e7e9      	b.n	80023b6 <__aeabi_d2f+0x62>
 80023e2:	2400      	movs	r4, #0
 80023e4:	2300      	movs	r3, #0
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	0a58      	lsrs	r0, r3, #9
 80023ea:	b2e2      	uxtb	r2, r4
 80023ec:	e7e3      	b.n	80023b6 <__aeabi_d2f+0x62>
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	003c      	movs	r4, r7
 80023f2:	e7f8      	b.n	80023e6 <__aeabi_d2f+0x92>
 80023f4:	003b      	movs	r3, r7
 80023f6:	3317      	adds	r3, #23
 80023f8:	dbf3      	blt.n	80023e2 <__aeabi_d2f+0x8e>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	4333      	orrs	r3, r6
 8002400:	261e      	movs	r6, #30
 8002402:	1bf6      	subs	r6, r6, r7
 8002404:	2e1f      	cmp	r6, #31
 8002406:	dd14      	ble.n	8002432 <__aeabi_d2f+0xde>
 8002408:	2202      	movs	r2, #2
 800240a:	4252      	negs	r2, r2
 800240c:	1bd7      	subs	r7, r2, r7
 800240e:	001a      	movs	r2, r3
 8002410:	40fa      	lsrs	r2, r7
 8002412:	0017      	movs	r7, r2
 8002414:	2e20      	cmp	r6, #32
 8002416:	d004      	beq.n	8002422 <__aeabi_d2f+0xce>
 8002418:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <__aeabi_d2f+0x100>)
 800241a:	4694      	mov	ip, r2
 800241c:	4464      	add	r4, ip
 800241e:	40a3      	lsls	r3, r4
 8002420:	431d      	orrs	r5, r3
 8002422:	002b      	movs	r3, r5
 8002424:	1e5d      	subs	r5, r3, #1
 8002426:	41ab      	sbcs	r3, r5
 8002428:	2207      	movs	r2, #7
 800242a:	433b      	orrs	r3, r7
 800242c:	401a      	ands	r2, r3
 800242e:	2700      	movs	r7, #0
 8002430:	e7ad      	b.n	800238e <__aeabi_d2f+0x3a>
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <__aeabi_d2f+0x104>)
 8002434:	0028      	movs	r0, r5
 8002436:	18a2      	adds	r2, r4, r2
 8002438:	4095      	lsls	r5, r2
 800243a:	4093      	lsls	r3, r2
 800243c:	1e6c      	subs	r4, r5, #1
 800243e:	41a5      	sbcs	r5, r4
 8002440:	40f0      	lsrs	r0, r6
 8002442:	2207      	movs	r2, #7
 8002444:	432b      	orrs	r3, r5
 8002446:	4303      	orrs	r3, r0
 8002448:	401a      	ands	r2, r3
 800244a:	2700      	movs	r7, #0
 800244c:	e79f      	b.n	800238e <__aeabi_d2f+0x3a>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	fffffc80 	.word	0xfffffc80
 8002454:	fffffca2 	.word	0xfffffca2
 8002458:	fffffc82 	.word	0xfffffc82

0800245c <__clzsi2>:
 800245c:	211c      	movs	r1, #28
 800245e:	2301      	movs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	4298      	cmp	r0, r3
 8002464:	d301      	bcc.n	800246a <__clzsi2+0xe>
 8002466:	0c00      	lsrs	r0, r0, #16
 8002468:	3910      	subs	r1, #16
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	4298      	cmp	r0, r3
 800246e:	d301      	bcc.n	8002474 <__clzsi2+0x18>
 8002470:	0a00      	lsrs	r0, r0, #8
 8002472:	3908      	subs	r1, #8
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	4298      	cmp	r0, r3
 8002478:	d301      	bcc.n	800247e <__clzsi2+0x22>
 800247a:	0900      	lsrs	r0, r0, #4
 800247c:	3904      	subs	r1, #4
 800247e:	a202      	add	r2, pc, #8	; (adr r2, 8002488 <__clzsi2+0x2c>)
 8002480:	5c10      	ldrb	r0, [r2, r0]
 8002482:	1840      	adds	r0, r0, r1
 8002484:	4770      	bx	lr
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	02020304 	.word	0x02020304
 800248c:	01010101 	.word	0x01010101
	...

08002498 <UserDisplayTask>:




void UserDisplayTask()
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b087      	sub	sp, #28
 800249c:	af02      	add	r7, sp, #8

	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <UserDisplayTask+0xec>)
 80024a0:	2108      	movs	r1, #8
 80024a2:	0018      	movs	r0, r3
 80024a4:	f001 fc9c 	bl	8003de0 <HAL_GPIO_ReadPin>
 80024a8:	0003      	movs	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10a      	bne.n	80024c4 <UserDisplayTask+0x2c>
	   {
		   ILI9341_Draw_Text("ON ", 10, 50, BLACK, 3, GREEN);
 80024ae:	4836      	ldr	r0, [pc, #216]	; (8002588 <UserDisplayTask+0xf0>)
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <UserDisplayTask+0xf4>)
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2303      	movs	r3, #3
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	2232      	movs	r2, #50	; 0x32
 80024bc:	210a      	movs	r1, #10
 80024be:	f003 fe21 	bl	8006104 <ILI9341_Draw_Text>
 80024c2:	e009      	b.n	80024d8 <UserDisplayTask+0x40>
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 10, 50, BLACK, 3, RED);
 80024c4:	4832      	ldr	r0, [pc, #200]	; (8002590 <UserDisplayTask+0xf8>)
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <UserDisplayTask+0xfc>)
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2303      	movs	r3, #3
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2232      	movs	r2, #50	; 0x32
 80024d2:	210a      	movs	r1, #10
 80024d4:	f003 fe16 	bl	8006104 <ILI9341_Draw_Text>
	   }

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
 80024d8:	f004 fd54 	bl	8006f84 <TSC2046_EM_GetTouchScreenState>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d043      	beq.n	8002568 <UserDisplayTask+0xd0>
	   {
		 ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 80024e0:	482d      	ldr	r0, [pc, #180]	; (8002598 <UserDisplayTask+0x100>)
 80024e2:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <UserDisplayTask+0xfc>)
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	2302      	movs	r3, #2
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	220a      	movs	r2, #10
 80024ee:	2164      	movs	r1, #100	; 0x64
 80024f0:	f003 fe08 	bl	8006104 <ILI9341_Draw_Text>
		 HAL_GPIO_TogglePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin);
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <UserDisplayTask+0xec>)
 80024f6:	2108      	movs	r1, #8
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 fcab 	bl	8003e54 <HAL_GPIO_TogglePin>

		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 80024fe:	f004 fdb3 	bl	8007068 <TSC2046_HM_RunConversion>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d125      	bne.n	8002552 <UserDisplayTask+0xba>
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 8002506:	f004 feb7 	bl	8007278 <TSC4026_STM32_HM_GetXpos>
 800250a:	0003      	movs	r3, r0
 800250c:	001c      	movs	r4, r3
 800250e:	f004 febd 	bl	800728c <TSC4026_STM32_HM_GetYpos>
 8002512:	0003      	movs	r3, r0
 8002514:	0019      	movs	r1, r3
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <UserDisplayTask+0x104>)
 8002518:	2202      	movs	r2, #2
 800251a:	0020      	movs	r0, r4
 800251c:	f003 fc50 	bl	8005dc0 <ILI9341_Draw_Filled_Circle>
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 8002520:	f004 feaa 	bl	8007278 <TSC4026_STM32_HM_GetXpos>
 8002524:	0003      	movs	r3, r0
 8002526:	001c      	movs	r4, r3
 8002528:	f004 feb0 	bl	800728c <TSC4026_STM32_HM_GetYpos>
 800252c:	0003      	movs	r3, r0
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <UserDisplayTask+0x108>)
 8002530:	0038      	movs	r0, r7
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	0023      	movs	r3, r4
 8002536:	210f      	movs	r1, #15
 8002538:	f005 fd6c 	bl	8008014 <sniprintf>
		   ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 800253c:	0038      	movs	r0, r7
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <UserDisplayTask+0xfc>)
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2302      	movs	r3, #2
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2300      	movs	r3, #0
 8002548:	220a      	movs	r2, #10
 800254a:	21b4      	movs	r1, #180	; 0xb4
 800254c:	f003 fdda 	bl	8006104 <ILI9341_Draw_Text>
	   else
	   {
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
	   }

}
 8002550:	e014      	b.n	800257c <UserDisplayTask+0xe4>
		   ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 8002552:	4814      	ldr	r0, [pc, #80]	; (80025a4 <UserDisplayTask+0x10c>)
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <UserDisplayTask+0xfc>)
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	2302      	movs	r3, #2
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2300      	movs	r3, #0
 800255e:	220a      	movs	r2, #10
 8002560:	21c8      	movs	r1, #200	; 0xc8
 8002562:	f003 fdcf 	bl	8006104 <ILI9341_Draw_Text>
}
 8002566:	e009      	b.n	800257c <UserDisplayTask+0xe4>
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 8002568:	480f      	ldr	r0, [pc, #60]	; (80025a8 <UserDisplayTask+0x110>)
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <UserDisplayTask+0xfc>)
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	2302      	movs	r3, #2
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2300      	movs	r3, #0
 8002574:	220a      	movs	r2, #10
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	f003 fdc4 	bl	8006104 <ILI9341_Draw_Text>
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b005      	add	sp, #20
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	48000400 	.word	0x48000400
 8002588:	0800af30 	.word	0x0800af30
 800258c:	000014a2 	.word	0x000014a2
 8002590:	0800af34 	.word	0x0800af34
 8002594:	0000d8c3 	.word	0x0000d8c3
 8002598:	0800af38 	.word	0x0800af38
 800259c:	0000ffff 	.word	0x0000ffff
 80025a0:	0800af40 	.word	0x0800af40
 80025a4:	0800af50 	.word	0x0800af50
 80025a8:	0800af5c 	.word	0x0800af5c

080025ac <UserPollADC>:

void UserPollADC()
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af02      	add	r7, sp, #8


		// if PSU enabled, poll imonitor pin
		if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <UserPollADC+0xd4>)
 80025b4:	2108      	movs	r1, #8
 80025b6:	0018      	movs	r0, r3
 80025b8:	f001 fc12 	bl	8003de0 <HAL_GPIO_ReadPin>
 80025bc:	0003      	movs	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d140      	bne.n	8002644 <UserPollADC+0x98>
		{
		   if(HAL_ADC_PollForConversion(&hadc, 1) == HAL_OK)
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <UserPollADC+0xd8>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 feee 	bl	80033a8 <HAL_ADC_PollForConversion>
 80025cc:	1e03      	subs	r3, r0, #0
 80025ce:	d13c      	bne.n	800264a <UserPollADC+0x9e>
		   {
			   if(adc_count == ADC_DATA_SIZE)			// calc adc mean, reset adc data + count
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <UserPollADC+0xdc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff fdff 	bl	80021d8 <__aeabi_i2d>
 80025da:	2200      	movs	r2, #0
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <UserPollADC+0xe0>)
 80025de:	f7fd ff2b 	bl	8000438 <__aeabi_dcmpeq>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d01d      	beq.n	8002622 <UserPollADC+0x76>
			   {

#ifdef USE_FLOAT
				   final_adc_data = (float)adc_data / ADC_DATA_SIZE;
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <UserPollADC+0xe4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fe f882 	bl	80006f4 <__aeabi_ui2f>
 80025f0:	1c03      	adds	r3, r0, #0
 80025f2:	4928      	ldr	r1, [pc, #160]	; (8002694 <UserPollADC+0xe8>)
 80025f4:	1c18      	adds	r0, r3, #0
 80025f6:	f7fd ff6b 	bl	80004d0 <__aeabi_fdiv>
 80025fa:	1c03      	adds	r3, r0, #0
 80025fc:	1c1a      	adds	r2, r3, #0
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <UserPollADC+0xec>)
 8002600:	601a      	str	r2, [r3, #0]
				   final_adc_data = final_adc_data/4095.0;		// convert to decimal
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <UserPollADC+0xec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4925      	ldr	r1, [pc, #148]	; (800269c <UserPollADC+0xf0>)
 8002608:	1c18      	adds	r0, r3, #0
 800260a:	f7fd ff61 	bl	80004d0 <__aeabi_fdiv>
 800260e:	1c03      	adds	r3, r0, #0
 8002610:	1c1a      	adds	r2, r3, #0
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <UserPollADC+0xec>)
 8002614:	601a      	str	r2, [r3, #0]
#else
				   final_adc_data = adc_data / ADC_DATA_SIZE;

#endif
				   adc_data = 0;						// clear the total
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <UserPollADC+0xe4>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
				   adc_count = 0;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <UserPollADC+0xdc>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
			   }

			   adc_data += HAL_ADC_GetValue(&hadc);		// add next read value to total
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <UserPollADC+0xd8>)
 8002624:	0018      	movs	r0, r3
 8002626:	f000 ff51 	bl	80034cc <HAL_ADC_GetValue>
 800262a:	0002      	movs	r2, r0
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <UserPollADC+0xe4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	18d2      	adds	r2, r2, r3
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <UserPollADC+0xe4>)
 8002634:	601a      	str	r2, [r3, #0]
			   adc_count++;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <UserPollADC+0xdc>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <UserPollADC+0xdc>)
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e002      	b.n	800264a <UserPollADC+0x9e>
		   }
		}
		else
		{
			final_adc_data = 0;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <UserPollADC+0xec>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
		}

#ifdef USE_FLOAT
		char imon_string[12];
		sprintf(imon_string, "%f mV", final_adc_data);
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <UserPollADC+0xec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1c18      	adds	r0, r3, #0
 8002650:	f7ff fe2e 	bl	80022b0 <__aeabi_f2d>
 8002654:	0003      	movs	r3, r0
 8002656:	000c      	movs	r4, r1
 8002658:	4911      	ldr	r1, [pc, #68]	; (80026a0 <UserPollADC+0xf4>)
 800265a:	1d38      	adds	r0, r7, #4
 800265c:	001a      	movs	r2, r3
 800265e:	0023      	movs	r3, r4
 8002660:	f005 fd0a 	bl	8008078 <siprintf>
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
 8002664:	1d38      	adds	r0, r7, #4
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <UserPollADC+0xf8>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2303      	movs	r3, #3
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2264      	movs	r2, #100	; 0x64
 8002672:	210a      	movs	r1, #10
 8002674:	f003 fd46 	bl	8006104 <ILI9341_Draw_Text>
		snprintf(imon_string, sizeof(imon_string), "%lu mV", final_adc_data);
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
#endif


}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b005      	add	sp, #20
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	48000400 	.word	0x48000400
 8002684:	200005a0 	.word	0x200005a0
 8002688:	2000020c 	.word	0x2000020c
 800268c:	40080000 	.word	0x40080000
 8002690:	20000208 	.word	0x20000208
 8002694:	40400000 	.word	0x40400000
 8002698:	20000204 	.word	0x20000204
 800269c:	457ff000 	.word	0x457ff000
 80026a0:	0800af64 	.word	0x0800af64
 80026a4:	0000d8c3 	.word	0x0000d8c3

080026a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	0018      	movs	r0, r3
 80026b2:	230c      	movs	r3, #12
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f004 fe43 	bl	8007342 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80026bc:	4b26      	ldr	r3, [pc, #152]	; (8002758 <MX_ADC_Init+0xb0>)
 80026be:	4a27      	ldr	r2, [pc, #156]	; (800275c <MX_ADC_Init+0xb4>)
 80026c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <MX_ADC_Init+0xb0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <MX_ADC_Init+0xb0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <MX_ADC_Init+0xb0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <MX_ADC_Init+0xb0>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <MX_ADC_Init+0xb0>)
 80026dc:	2204      	movs	r2, #4
 80026de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <MX_ADC_Init+0xb0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <MX_ADC_Init+0xb0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <MX_ADC_Init+0xb0>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <MX_ADC_Init+0xb0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <MX_ADC_Init+0xb0>)
 80026fa:	22c2      	movs	r2, #194	; 0xc2
 80026fc:	32ff      	adds	r2, #255	; 0xff
 80026fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <MX_ADC_Init+0xb0>)
 8002702:	2200      	movs	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_ADC_Init+0xb0>)
 8002708:	2224      	movs	r2, #36	; 0x24
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <MX_ADC_Init+0xb0>)
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <MX_ADC_Init+0xb0>)
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fcb2 	bl	8003080 <HAL_ADC_Init>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002720:	f000 fa19 	bl	8002b56 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0152      	lsls	r2, r2, #5
 8002730:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0552      	lsls	r2, r2, #21
 8002738:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800273a:	1d3a      	adds	r2, r7, #4
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_ADC_Init+0xb0>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fecf 	bl	80034e4 <HAL_ADC_ConfigChannel>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800274a:	f000 fa04 	bl	8002b56 <Error_Handler>
  }

}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	200005a0 	.word	0x200005a0
 800275c:	40012400 	.word	0x40012400

08002760 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	2314      	movs	r3, #20
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	0018      	movs	r0, r3
 800276e:	2314      	movs	r3, #20
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f004 fde5 	bl	8007342 <memset>
  if(adcHandle->Instance==ADC1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_ADC_MspInit+0x84>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12c      	bne.n	80027dc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0089      	lsls	r1, r1, #2
 800278c:	430a      	orrs	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0289      	lsls	r1, r1, #10
 80027a8:	430a      	orrs	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_ADC_MspInit+0x88>)
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ba:	2114      	movs	r1, #20
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2203      	movs	r2, #3
 80027c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	187a      	adds	r2, r7, r1
 80027d0:	2390      	movs	r3, #144	; 0x90
 80027d2:	05db      	lsls	r3, r3, #23
 80027d4:	0011      	movs	r1, r2
 80027d6:	0018      	movs	r0, r3
 80027d8:	f001 f98a 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b00a      	add	sp, #40	; 0x28
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40012400 	.word	0x40012400
 80027e8:	40021000 	.word	0x40021000

080027ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a06      	ldr	r2, [pc, #24]	; (8002814 <vApplicationGetIdleTaskMemory+0x28>)
 80027fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <vApplicationGetIdleTaskMemory+0x2c>)
 8002802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000210 	.word	0x20000210
 8002818:	20000264 	.word	0x20000264

0800281c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b096      	sub	sp, #88	; 0x58
 8002820:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8002822:	213c      	movs	r1, #60	; 0x3c
 8002824:	187b      	adds	r3, r7, r1
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <MX_FREERTOS_Init+0x74>)
 8002828:	ca31      	ldmia	r2!, {r0, r4, r5}
 800282a:	c331      	stmia	r3!, {r0, r4, r5}
 800282c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800282e:	c331      	stmia	r3!, {r0, r4, r5}
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2100      	movs	r1, #0
 8002838:	0018      	movs	r0, r3
 800283a:	f002 faee 	bl	8004e1a <osThreadCreate>
 800283e:	0002      	movs	r2, r0
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MX_FREERTOS_Init+0x78>)
 8002842:	601a      	str	r2, [r3, #0]

  /* definition and creation of PollADCTask */
  osThreadStaticDef(PollADCTask, StartPollADCTask, osPriorityLow, 0, 128, PollADCTaskBuffer, &PollADCTaskControlBlock);
 8002844:	2120      	movs	r1, #32
 8002846:	187b      	adds	r3, r7, r1
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <MX_FREERTOS_Init+0x7c>)
 800284a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800284c:	c331      	stmia	r3!, {r0, r4, r5}
 800284e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002850:	c331      	stmia	r3!, {r0, r4, r5}
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	601a      	str	r2, [r3, #0]
  PollADCTaskHandle = osThreadCreate(osThread(PollADCTask), NULL);
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2100      	movs	r1, #0
 800285a:	0018      	movs	r0, r3
 800285c:	f002 fadd 	bl	8004e1a <osThreadCreate>
 8002860:	0002      	movs	r2, r0
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_FREERTOS_Init+0x80>)
 8002864:	601a      	str	r2, [r3, #0]

  /* definition and creation of DisplayTask */
  osThreadStaticDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 128, DIsplayTaskBuffer, &DIsplayTaskControlBlock);
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <MX_FREERTOS_Init+0x84>)
 800286a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800286c:	c313      	stmia	r3!, {r0, r1, r4}
 800286e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002870:	c313      	stmia	r3!, {r0, r1, r4}
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	601a      	str	r2, [r3, #0]
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2100      	movs	r1, #0
 800287a:	0018      	movs	r0, r3
 800287c:	f002 facd 	bl	8004e1a <osThreadCreate>
 8002880:	0002      	movs	r2, r0
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_FREERTOS_Init+0x88>)
 8002884:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b016      	add	sp, #88	; 0x58
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	0800af78 	.word	0x0800af78
 8002894:	200005e0 	.word	0x200005e0
 8002898:	0800afa0 	.word	0x0800afa0
 800289c:	20000c90 	.word	0x20000c90
 80028a0:	0800afc8 	.word	0x0800afc8
 80028a4:	20000c8c 	.word	0x20000c8c

080028a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]


	while(1)
	{

		osThreadSuspend(PollADCTaskHandle);
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <StartDefaultTask+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 faea 	bl	8004e8e <osThreadSuspend>
		osThreadResume(DisplayTaskHandle);
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <StartDefaultTask+0x44>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0018      	movs	r0, r3
 80028c0:	f002 faf2 	bl	8004ea8 <osThreadResume>

		osDelay(3000);
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <StartDefaultTask+0x48>)
 80028c6:	0018      	movs	r0, r3
 80028c8:	f002 facd 	bl	8004e66 <osDelay>

		osThreadSuspend(DisplayTaskHandle);
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <StartDefaultTask+0x44>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f002 fadc 	bl	8004e8e <osThreadSuspend>
		osThreadResume(PollADCTaskHandle);
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <StartDefaultTask+0x40>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	f002 fae4 	bl	8004ea8 <osThreadResume>

		osDelay(150);
 80028e0:	2096      	movs	r0, #150	; 0x96
 80028e2:	f002 fac0 	bl	8004e66 <osDelay>
		osThreadSuspend(PollADCTaskHandle);
 80028e6:	e7e3      	b.n	80028b0 <StartDefaultTask+0x8>
 80028e8:	20000c90 	.word	0x20000c90
 80028ec:	20000c8c 	.word	0x20000c8c
 80028f0:	00000bb8 	.word	0x00000bb8

080028f4 <StartPollADCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPollADCTask */
void StartPollADCTask(void const * argument)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPollADCTask */
	while(1)
	{
		UserPollADC();
 80028fc:	f7ff fe56 	bl	80025ac <UserPollADC>
 8002900:	e7fc      	b.n	80028fc <StartPollADCTask+0x8>

08002902 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	while(1)
	{
		UserDisplayTask();
 800290a:	f7ff fdc5 	bl	8002498 <UserDisplayTask>
 800290e:	e7fc      	b.n	800290a <StartDisplayTask+0x8>

08002910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	240c      	movs	r4, #12
 8002918:	193b      	adds	r3, r7, r4
 800291a:	0018      	movs	r0, r3
 800291c:	2314      	movs	r3, #20
 800291e:	001a      	movs	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	f004 fd0e 	bl	8007342 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <MX_GPIO_Init+0x134>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0289      	lsls	r1, r1, #10
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	0309      	lsls	r1, r1, #12
 800294c:	430a      	orrs	r2, r1
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	4013      	ands	r3, r2
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_GPIO_Init+0x134>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	02c9      	lsls	r1, r1, #11
 8002968:	430a      	orrs	r2, r1
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <MX_GPIO_Init+0x134>)
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	02db      	lsls	r3, r3, #11
 8002974:	4013      	ands	r3, r2
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <MX_GPIO_Init+0x138>)
 800297c:	2200      	movs	r2, #0
 800297e:	2130      	movs	r1, #48	; 0x30
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fa4a 	bl	8003e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 8002986:	4931      	ldr	r1, [pc, #196]	; (8002a4c <MX_GPIO_Init+0x13c>)
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <MX_GPIO_Init+0x140>)
 800298a:	2200      	movs	r2, #0
 800298c:	0018      	movs	r0, r3
 800298e:	f001 fa44 	bl	8003e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 8002992:	0021      	movs	r1, r4
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2230      	movs	r2, #48	; 0x30
 8002998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2201      	movs	r2, #1
 800299e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2203      	movs	r2, #3
 80029aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	000c      	movs	r4, r1
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <MX_GPIO_Init+0x138>)
 80029b2:	0019      	movs	r1, r3
 80029b4:	0010      	movs	r0, r2
 80029b6:	f001 f89b 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 80029ba:	0021      	movs	r1, r4
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <MX_GPIO_Init+0x144>)
 80029c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2201      	movs	r2, #1
 80029c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2203      	movs	r2, #3
 80029d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	000c      	movs	r4, r1
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <MX_GPIO_Init+0x140>)
 80029da:	0019      	movs	r1, r3
 80029dc:	0010      	movs	r0, r2
 80029de:	f001 f887 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 80029e2:	0021      	movs	r1, r4
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <MX_GPIO_Init+0x148>)
 80029ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	2201      	movs	r2, #1
 80029f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80029f6:	000c      	movs	r4, r1
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <MX_GPIO_Init+0x138>)
 80029fc:	0019      	movs	r1, r3
 80029fe:	0010      	movs	r0, r2
 8002a00:	f001 f876 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 8002a04:	0021      	movs	r1, r4
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	2208      	movs	r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2201      	movs	r2, #1
 8002a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2202      	movs	r2, #2
 8002a16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <MX_GPIO_Init+0x140>)
 8002a22:	0019      	movs	r1, r3
 8002a24:	0010      	movs	r0, r2
 8002a26:	f001 f863 	bl	8003af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2007      	movs	r0, #7
 8002a30:	f001 f82c 	bl	8003a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a34:	2007      	movs	r0, #7
 8002a36:	f001 f83e 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b009      	add	sp, #36	; 0x24
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40021000 	.word	0x40021000
 8002a48:	48000800 	.word	0x48000800
 8002a4c:	00001009 	.word	0x00001009
 8002a50:	48000400 	.word	0x48000400
 8002a54:	00001001 	.word	0x00001001
 8002a58:	10210000 	.word	0x10210000

08002a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a60:	f000 fa88 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a64:	f000 f826 	bl	8002ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a68:	f7ff ff52 	bl	8002910 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002a6c:	f000 f878 	bl	8002b60 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a70:	f000 f8b4 	bl	8002bdc <MX_SPI2_Init>
  MX_TIM17_Init();
 8002a74:	f000 fa04 	bl	8002e80 <MX_TIM17_Init>
  MX_ADC_Init();
 8002a78:	f7ff fe16 	bl	80026a8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // init ILI9341 library
  ILI9341_Init();
 8002a7c:	f003 fbb3 	bl	80061e6 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f004 f825 	bl	8006ad0 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(LBLUE);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <main+0x50>)
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f003 fdb5 	bl	80065f8 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 8002a8e:	f004 fab7 	bl	8007000 <TSC2046_HM_Init>


  HAL_ADCEx_Calibration_Start(&hadc);
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <main+0x54>)
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 feaf 	bl	80037f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <main+0x54>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fc2f 	bl	8003300 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002aa2:	f7ff febb 	bl	800281c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002aa6:	f002 f9b0 	bl	8004e0a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <main+0x4e>
 8002aac:	00004cf6 	.word	0x00004cf6
 8002ab0:	200005a0 	.word	0x200005a0

08002ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b093      	sub	sp, #76	; 0x4c
 8002ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aba:	2414      	movs	r4, #20
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	0018      	movs	r0, r3
 8002ac0:	2334      	movs	r3, #52	; 0x34
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f004 fc3c 	bl	8007342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	0018      	movs	r0, r3
 8002ace:	2310      	movs	r3, #16
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f004 fc35 	bl	8007342 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002ad8:	0021      	movs	r1, r4
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2212      	movs	r2, #18
 8002ade:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2201      	movs	r2, #1
 8002aea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2210      	movs	r2, #16
 8002af0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	2210      	movs	r2, #16
 8002af6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2202      	movs	r2, #2
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0212      	lsls	r2, r2, #8
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	0352      	lsls	r2, r2, #13
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f001 f9de 	bl	8003ed8 <HAL_RCC_OscConfig>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d001      	beq.n	8002b24 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002b20:	f000 f819 	bl	8002b56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2207      	movs	r2, #7
 8002b28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	0018      	movs	r0, r3
 8002b42:	f001 fd4f 	bl	80045e4 <HAL_RCC_ClockConfig>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d001      	beq.n	8002b4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b4a:	f000 f804 	bl	8002b56 <Error_Handler>
  }
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b013      	add	sp, #76	; 0x4c
 8002b54:	bd90      	pop	{r4, r7, pc}

08002b56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <MX_SPI1_Init+0x78>)
 8002b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b6c:	2282      	movs	r2, #130	; 0x82
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b7a:	22e0      	movs	r2, #224	; 0xe0
 8002b7c:	00d2      	lsls	r2, r2, #3
 8002b7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	0092      	lsls	r2, r2, #2
 8002b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b96:	2208      	movs	r2, #8
 8002b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bae:	2207      	movs	r2, #7
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <MX_SPI1_Init+0x74>)
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f001 fe67 	bl	8004894 <HAL_SPI_Init>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bca:	f7ff ffc4 	bl	8002b56 <Error_Handler>
  }

}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000d4c 	.word	0x20000d4c
 8002bd8:	40013000 	.word	0x40013000

08002bdc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <MX_SPI2_Init+0x78>)
 8002be4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002be8:	2282      	movs	r2, #130	; 0x82
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002bf6:	22e0      	movs	r2, #224	; 0xe0
 8002bf8:	00d2      	lsls	r2, r2, #3
 8002bfa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c12:	2210      	movs	r2, #16
 8002c14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <MX_SPI2_Init+0x74>)
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f001 fe29 	bl	8004894 <HAL_SPI_Init>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c46:	f7ff ff86 	bl	8002b56 <Error_Handler>
  }

}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000ce8 	.word	0x20000ce8
 8002c54:	40003800 	.word	0x40003800

08002c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	231c      	movs	r3, #28
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	0018      	movs	r0, r3
 8002c66:	2314      	movs	r3, #20
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f004 fb69 	bl	8007342 <memset>
  if(spiHandle->Instance==SPI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_SPI_MspInit+0x104>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d133      	bne.n	8002ce2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0149      	lsls	r1, r1, #5
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
 8002c88:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	4b32      	ldr	r3, [pc, #200]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	0289      	lsls	r1, r1, #10
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cb2:	211c      	movs	r1, #28
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	22e0      	movs	r2, #224	; 0xe0
 8002cb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2203      	movs	r2, #3
 8002cca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	187a      	adds	r2, r7, r1
 8002cd4:	2390      	movs	r3, #144	; 0x90
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 ff08 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002ce0:	e037      	b.n	8002d52 <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_SPI_MspInit+0x10c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d132      	bne.n	8002d52 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	01c9      	lsls	r1, r1, #7
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	01db      	lsls	r3, r3, #7
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	02c9      	lsls	r1, r1, #11
 8002d12:	430a      	orrs	r2, r1
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_SPI_MspInit+0x108>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	02db      	lsls	r3, r3, #11
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8002d24:	211c      	movs	r1, #28
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	22e0      	movs	r2, #224	; 0xe0
 8002d2a:	0212      	lsls	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2202      	movs	r2, #2
 8002d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d46:	187b      	adds	r3, r7, r1
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_SPI_MspInit+0x110>)
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	f000 fecf 	bl	8003af0 <HAL_GPIO_Init>
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b00c      	add	sp, #48	; 0x30
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	40013000 	.word	0x40013000
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40003800 	.word	0x40003800
 8002d68:	48000400 	.word	0x48000400

08002d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_MspInit+0x50>)
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_MspInit+0x50>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_MspInit+0x50>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_MspInit+0x50>)
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_MspInit+0x50>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0549      	lsls	r1, r1, #21
 8002d94:	430a      	orrs	r2, r1
 8002d96:	61da      	str	r2, [r3, #28]
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_MspInit+0x50>)
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	055b      	lsls	r3, r3, #21
 8002da0:	4013      	ands	r3, r2
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002da6:	2302      	movs	r3, #2
 8002da8:	425b      	negs	r3, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	2103      	movs	r1, #3
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fe6c 	bl	8003a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd4:	f000 f916 	bl	8003004 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dd8:	f002 fe4e 	bl	8005a78 <xTaskGetSchedulerState>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002de2:	f002 ffb1 	bl	8005d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	TSC2046_IM_PENIRQ_EXTI_Handler();
 8002df0:	f004 fa56 	bl	80072a0 <TSC2046_IM_PENIRQ_EXTI_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002df4:	2040      	movs	r0, #64	; 0x40
 8002df6:	f001 f849 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	TSC2046_IM_HardwareManagerLoopHandler();
 8002e04:	f004 fa54 	bl	80072b0 <TSC2046_IM_HardwareManagerLoopHandler>
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <TIM17_IRQHandler+0x18>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f001 fe08 	bl	8004a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	20000db0 	.word	0x20000db0

08002e1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x50>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <_sbrk+0x16>
		heap_end = &end;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <_sbrk+0x50>)
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <_sbrk+0x54>)
 8002e30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <_sbrk+0x50>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <_sbrk+0x50>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	466a      	mov	r2, sp
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d907      	bls.n	8002e56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e46:	f004 fa49 	bl	80072dc <__errno>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	e006      	b.n	8002e64 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <_sbrk+0x50>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	18d2      	adds	r2, r2, r3
 8002e5e:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <_sbrk+0x50>)
 8002e60:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000464 	.word	0x20000464
 8002e70:	20000e00 	.word	0x20000e00

08002e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002e86:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <MX_TIM17_Init+0x4c>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	00d2      	lsls	r2, r2, #3
 8002e9c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <MX_TIM17_Init+0x48>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f001 fd88 	bl	80049c8 <HAL_TIM_Base_Init>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002ebc:	f7ff fe4b 	bl	8002b56 <Error_Handler>
  }

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	20000db0 	.word	0x20000db0
 8002ecc:	40014800 	.word	0x40014800

08002ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_TIM_Base_MspInit+0x48>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d115      	bne.n	8002f0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	02c9      	lsls	r1, r1, #11
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	02db      	lsls	r3, r3, #11
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	2016      	movs	r0, #22
 8002f04:	f000 fdc2 	bl	8003a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002f08:	2016      	movs	r0, #22
 8002f0a:	f000 fdd4 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40014800 	.word	0x40014800
 8002f1c:	40021000 	.word	0x40021000

08002f20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f20:	480d      	ldr	r0, [pc, #52]	; (8002f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f26:	490e      	ldr	r1, [pc, #56]	; (8002f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <LoopForever+0xe>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f2c:	e002      	b.n	8002f34 <LoopCopyDataInit>

08002f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f32:	3304      	adds	r3, #4

08002f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f38:	d3f9      	bcc.n	8002f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f3c:	4c0b      	ldr	r4, [pc, #44]	; (8002f6c <LoopForever+0x16>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f40:	e001      	b.n	8002f46 <LoopFillZerobss>

08002f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f44:	3204      	adds	r2, #4

08002f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f48:	d3fb      	bcc.n	8002f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f4a:	f7ff ff93 	bl	8002e74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f4e:	f004 f9cb 	bl	80072e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f52:	f7ff fd83 	bl	8002a5c <main>

08002f56 <LoopForever>:

LoopForever:
    b LoopForever
 8002f56:	e7fe      	b.n	8002f56 <LoopForever>
  ldr   r0, =_estack
 8002f58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f64:	0800b618 	.word	0x0800b618
  ldr r2, =_sbss
 8002f68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f6c:	20000dfc 	.word	0x20000dfc

08002f70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_COMP_IRQHandler>
	...

08002f74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <HAL_Init+0x24>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_Init+0x24>)
 8002f7e:	2110      	movs	r1, #16
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f809 	bl	8002f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f8a:	f7ff feef 	bl	8002d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	40022000 	.word	0x40022000

08002f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_InitTick+0x5c>)
 8002fa6:	681c      	ldr	r4, [r3, #0]
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_InitTick+0x60>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	0019      	movs	r1, r3
 8002fae:	23fa      	movs	r3, #250	; 0xfa
 8002fb0:	0098      	lsls	r0, r3, #2
 8002fb2:	f7fd f8bb 	bl	800012c <__udivsi3>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fd f8b6 	bl	800012c <__udivsi3>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 fd87 	bl	8003ad6 <HAL_SYSTICK_Config>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e00f      	b.n	8002ff0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d80b      	bhi.n	8002fee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	425b      	negs	r3, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fd54 	bl	8003a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_InitTick+0x64>)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b003      	add	sp, #12
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000008 	.word	0x20000008
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_IncTick+0x1c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	001a      	movs	r2, r3
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_IncTick+0x20>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	18d2      	adds	r2, r2, r3
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_IncTick+0x20>)
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	20000008 	.word	0x20000008
 8003024:	20000df0 	.word	0x20000df0

08003028 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  return uwTick;
 800302c:	4b02      	ldr	r3, [pc, #8]	; (8003038 <HAL_GetTick+0x10>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000df0 	.word	0x20000df0

0800303c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff fff0 	bl	8003028 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3301      	adds	r3, #1
 8003054:	d005      	beq.n	8003062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_Delay+0x40>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	001a      	movs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	189b      	adds	r3, r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	f7ff ffe0 	bl	8003028 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d8f7      	bhi.n	8003064 <HAL_Delay+0x28>
  {
  }
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b004      	add	sp, #16
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000008 	.word	0x20000008

08003080 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	230f      	movs	r3, #15
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e125      	b.n	80032ea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2234      	movs	r2, #52	; 0x34
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fb52 	bl	8002760 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2210      	movs	r2, #16
 80030c2:	4013      	ands	r3, r2
 80030c4:	d000      	beq.n	80030c8 <HAL_ADC_Init+0x48>
 80030c6:	e103      	b.n	80032d0 <HAL_ADC_Init+0x250>
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <HAL_ADC_Init+0x54>
 80030d2:	e0fd      	b.n	80032d0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80030de:	d000      	beq.n	80030e2 <HAL_ADC_Init+0x62>
 80030e0:	e0f6      	b.n	80032d0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_ADC_Init+0x274>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	2202      	movs	r2, #2
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d112      	bne.n	8003126 <HAL_ADC_Init+0xa6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	4013      	ands	r3, r2
 800310a:	2b01      	cmp	r3, #1
 800310c:	d009      	beq.n	8003122 <HAL_ADC_Init+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	401a      	ands	r2, r3
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	429a      	cmp	r2, r3
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Init+0xa6>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_ADC_Init+0xa8>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d116      	bne.n	800315a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2218      	movs	r2, #24
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	0899      	lsrs	r1, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4964      	ldr	r1, [pc, #400]	; (80032f8 <HAL_ADC_Init+0x278>)
 8003166:	400a      	ands	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7e1b      	ldrb	r3, [r3, #24]
 800316e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7e5b      	ldrb	r3, [r3, #25]
 8003174:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003176:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e9b      	ldrb	r3, [r3, #26]
 800317c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800317e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	2b01      	cmp	r3, #1
 8003186:	d002      	beq.n	800318e <HAL_ADC_Init+0x10e>
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	015b      	lsls	r3, r3, #5
 800318c:	e000      	b.n	8003190 <HAL_ADC_Init+0x110>
 800318e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003190:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003196:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_Init+0x124>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e000      	b.n	80031a6 <HAL_ADC_Init+0x126>
 80031a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80031a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2124      	movs	r1, #36	; 0x24
 80031ac:	5c5b      	ldrb	r3, [r3, r1]
 80031ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7edb      	ldrb	r3, [r3, #27]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d115      	bne.n	80031ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e9b      	ldrb	r3, [r3, #26]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0252      	lsls	r2, r2, #9
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2220      	movs	r2, #32
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2201      	movs	r2, #1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	23c2      	movs	r3, #194	; 0xc2
 80031f2:	33ff      	adds	r3, #255	; 0xff
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d007      	beq.n	8003208 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003200:	4313      	orrs	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	055b      	lsls	r3, r3, #21
 8003220:	429a      	cmp	r2, r3
 8003222:	d01b      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d017      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	2b02      	cmp	r3, #2
 8003232:	d013      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2b03      	cmp	r3, #3
 800323a:	d00f      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2b04      	cmp	r3, #4
 8003242:	d00b      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2b05      	cmp	r3, #5
 800324a:	d007      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	2b06      	cmp	r3, #6
 8003252:	d003      	beq.n	800325c <HAL_ADC_Init+0x1dc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2b07      	cmp	r3, #7
 800325a:	d112      	bne.n	8003282 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2107      	movs	r1, #7
 8003268:	438a      	bics	r2, r1
 800326a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6959      	ldr	r1, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	2207      	movs	r2, #7
 8003278:	401a      	ands	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_ADC_Init+0x27c>)
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d10b      	bne.n	80032aa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	2203      	movs	r2, #3
 800329e:	4393      	bics	r3, r2
 80032a0:	2201      	movs	r2, #1
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032a8:	e01c      	b.n	80032e4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	2212      	movs	r2, #18
 80032b0:	4393      	bics	r3, r2
 80032b2:	2210      	movs	r2, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	2201      	movs	r2, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80032c6:	230f      	movs	r3, #15
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032ce:	e009      	b.n	80032e4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2210      	movs	r2, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80032dc:	230f      	movs	r3, #15
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	fffffefd 	.word	0xfffffefd
 80032f8:	fffe0219 	.word	0xfffe0219
 80032fc:	833fffe7 	.word	0x833fffe7

08003300 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003308:	230f      	movs	r3, #15
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2204      	movs	r2, #4
 8003318:	4013      	ands	r3, r2
 800331a:	d138      	bne.n	800338e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2234      	movs	r2, #52	; 0x34
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADC_Start+0x2a>
 8003326:	2302      	movs	r3, #2
 8003328:	e038      	b.n	800339c <HAL_ADC_Start+0x9c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2234      	movs	r2, #52	; 0x34
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7e5b      	ldrb	r3, [r3, #25]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d007      	beq.n	800334a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800333a:	230f      	movs	r3, #15
 800333c:	18fc      	adds	r4, r7, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 f9dd 	bl	8003700 <ADC_Enable>
 8003346:	0003      	movs	r3, r0
 8003348:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800334a:	230f      	movs	r3, #15
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d120      	bne.n	8003396 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <HAL_ADC_Start+0xa4>)
 800335a:	4013      	ands	r3, r2
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	0052      	lsls	r2, r2, #1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2234      	movs	r2, #52	; 0x34
 8003370:	2100      	movs	r1, #0
 8003372:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	221c      	movs	r2, #28
 800337a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2104      	movs	r1, #4
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	e003      	b.n	8003396 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800338e:	230f      	movs	r3, #15
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b005      	add	sp, #20
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	fffff0fe 	.word	0xfffff0fe

080033a8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d102      	bne.n	80033c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80033ba:	2308      	movs	r3, #8
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e014      	b.n	80033ea <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10b      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	2220      	movs	r2, #32
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2234      	movs	r2, #52	; 0x34
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06b      	b.n	80034be <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80033e6:	230c      	movs	r3, #12
 80033e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80033ea:	f7ff fe1d 	bl	8003028 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033f2:	e019      	b.n	8003428 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	d016      	beq.n	8003428 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_ADC_PollForConversion+0x68>
 8003400:	f7ff fe12 	bl	8003028 <HAL_GetTick>
 8003404:	0002      	movs	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d20b      	bcs.n	8003428 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2204      	movs	r2, #4
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2234      	movs	r2, #52	; 0x34
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e04a      	b.n	80034be <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	d0df      	beq.n	80033f4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	23c0      	movs	r3, #192	; 0xc0
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d12d      	bne.n	80034ac <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003454:	2b00      	cmp	r3, #0
 8003456:	d129      	bne.n	80034ac <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2208      	movs	r2, #8
 8003460:	4013      	ands	r3, r2
 8003462:	2b08      	cmp	r3, #8
 8003464:	d122      	bne.n	80034ac <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2204      	movs	r2, #4
 800346e:	4013      	ands	r3, r2
 8003470:	d110      	bne.n	8003494 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	210c      	movs	r1, #12
 800347e:	438a      	bics	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_ADC_PollForConversion+0x120>)
 8003488:	4013      	ands	r3, r2
 800348a:	2201      	movs	r2, #1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
 8003492:	e00b      	b.n	80034ac <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2220      	movs	r2, #32
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	2201      	movs	r2, #1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	220c      	movs	r2, #12
 80034ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	0018      	movs	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	fffffefe 	.word	0xfffffefe

080034cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b002      	add	sp, #8
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ee:	230f      	movs	r3, #15
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	055b      	lsls	r3, r3, #21
 8003502:	429a      	cmp	r2, r3
 8003504:	d011      	beq.n	800352a <HAL_ADC_ConfigChannel+0x46>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00d      	beq.n	800352a <HAL_ADC_ConfigChannel+0x46>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2b02      	cmp	r3, #2
 8003514:	d009      	beq.n	800352a <HAL_ADC_ConfigChannel+0x46>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2b03      	cmp	r3, #3
 800351c:	d005      	beq.n	800352a <HAL_ADC_ConfigChannel+0x46>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	2b04      	cmp	r3, #4
 8003524:	d001      	beq.n	800352a <HAL_ADC_ConfigChannel+0x46>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2234      	movs	r2, #52	; 0x34
 800352e:	5c9b      	ldrb	r3, [r3, r2]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x54>
 8003534:	2302      	movs	r3, #2
 8003536:	e0d0      	b.n	80036da <HAL_ADC_ConfigChannel+0x1f6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2234      	movs	r2, #52	; 0x34
 800353c:	2101      	movs	r1, #1
 800353e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d000      	beq.n	800354e <HAL_ADC_ConfigChannel+0x6a>
 800354c:	e0b4      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a64      	ldr	r2, [pc, #400]	; (80036e4 <HAL_ADC_ConfigChannel+0x200>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <HAL_ADC_ConfigChannel+0x76>
 8003558:	e082      	b.n	8003660 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	409a      	lsls	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	055b      	lsls	r3, r3, #21
 8003578:	429a      	cmp	r2, r3
 800357a:	d037      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d033      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	2b02      	cmp	r3, #2
 800358a:	d02f      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b03      	cmp	r3, #3
 8003592:	d02b      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b04      	cmp	r3, #4
 800359a:	d027      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d023      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d01f      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b07      	cmp	r3, #7
 80035b2:	d01b      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2107      	movs	r1, #7
 80035c0:	400b      	ands	r3, r1
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d012      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2107      	movs	r1, #7
 80035d2:	438a      	bics	r2, r1
 80035d4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6959      	ldr	r1, [r3, #20]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2207      	movs	r2, #7
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x120>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d003      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x120>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b12      	cmp	r3, #18
 8003602:	d163      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003604:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_ADC_ConfigChannel+0x204>)
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d009      	beq.n	8003624 <HAL_ADC_ConfigChannel+0x140>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b11      	cmp	r3, #17
 8003616:	d102      	bne.n	800361e <HAL_ADC_ConfigChannel+0x13a>
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	03db      	lsls	r3, r3, #15
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x144>
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	045b      	lsls	r3, r3, #17
 8003622:	e001      	b.n	8003628 <HAL_ADC_ConfigChannel+0x144>
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	4a2f      	ldr	r2, [pc, #188]	; (80036e8 <HAL_ADC_ConfigChannel+0x204>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b10      	cmp	r3, #16
 8003634:	d14a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_ADC_ConfigChannel+0x208>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	492d      	ldr	r1, [pc, #180]	; (80036f0 <HAL_ADC_ConfigChannel+0x20c>)
 800363c:	0018      	movs	r0, r3
 800363e:	f7fc fd75 	bl	800012c <__udivsi3>
 8003642:	0003      	movs	r3, r0
 8003644:	001a      	movs	r2, r3
 8003646:	0013      	movs	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	189b      	adds	r3, r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003650:	e002      	b.n	8003658 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x16e>
 800365e:	e035      	b.n	80036cc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	4099      	lsls	r1, r3
 800366e:	000b      	movs	r3, r1
 8003670:	43d9      	mvns	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	400a      	ands	r2, r1
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d007      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x1ae>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b11      	cmp	r3, #17
 8003688:	d003      	beq.n	8003692 <HAL_ADC_ConfigChannel+0x1ae>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b12      	cmp	r3, #18
 8003690:	d11c      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_ADC_ConfigChannel+0x204>)
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d007      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x1ca>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b11      	cmp	r3, #17
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x1c6>
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_ADC_ConfigChannel+0x210>)
 80036a8:	e002      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x1cc>
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_ADC_ConfigChannel+0x214>)
 80036ac:	e000      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x1cc>
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_ADC_ConfigChannel+0x218>)
 80036b0:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_ADC_ConfigChannel+0x204>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e009      	b.n	80036cc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2220      	movs	r2, #32
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80036c4:	230f      	movs	r3, #15
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2234      	movs	r2, #52	; 0x34
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036d4:	230f      	movs	r3, #15
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b004      	add	sp, #16
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	00001001 	.word	0x00001001
 80036e8:	40012708 	.word	0x40012708
 80036ec:	20000000 	.word	0x20000000
 80036f0:	000f4240 	.word	0x000f4240
 80036f4:	ffbfffff 	.word	0xffbfffff
 80036f8:	feffffff 	.word	0xfeffffff
 80036fc:	ff7fffff 	.word	0xff7fffff

08003700 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	2b01      	cmp	r3, #1
 800371c:	d112      	bne.n	8003744 <ADC_Enable+0x44>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	4013      	ands	r3, r2
 8003728:	2b01      	cmp	r3, #1
 800372a:	d009      	beq.n	8003740 <ADC_Enable+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	401a      	ands	r2, r3
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	429a      	cmp	r2, r3
 800373e:	d101      	bne.n	8003744 <ADC_Enable+0x44>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <ADC_Enable+0x46>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14b      	bne.n	80037e2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <ADC_Enable+0xec>)
 8003752:	4013      	ands	r3, r2
 8003754:	d00d      	beq.n	8003772 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	2210      	movs	r2, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2201      	movs	r2, #1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e038      	b.n	80037e4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <ADC_Enable+0xf0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <ADC_Enable+0xf4>)
 8003788:	0018      	movs	r0, r3
 800378a:	f7fc fccf 	bl	800012c <__udivsi3>
 800378e:	0003      	movs	r3, r0
 8003790:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003792:	e002      	b.n	800379a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3b01      	subs	r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f9      	bne.n	8003794 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a0:	f7ff fc42 	bl	8003028 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037a8:	e014      	b.n	80037d4 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037aa:	f7ff fc3d 	bl	8003028 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d90d      	bls.n	80037d4 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	2210      	movs	r2, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	2201      	movs	r2, #1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e007      	b.n	80037e4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d1e3      	bne.n	80037aa <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	80000017 	.word	0x80000017
 80037f0:	20000000 	.word	0x20000000
 80037f4:	000f4240 	.word	0x000f4240

080037f8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003800:	2317      	movs	r3, #23
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2234      	movs	r2, #52	; 0x34
 8003814:	5c9b      	ldrb	r3, [r3, r2]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_ADCEx_Calibration_Start+0x26>
 800381a:	2302      	movs	r3, #2
 800381c:	e084      	b.n	8003928 <HAL_ADCEx_Calibration_Start+0x130>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2234      	movs	r2, #52	; 0x34
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	2b01      	cmp	r3, #1
 8003832:	d112      	bne.n	800385a <HAL_ADCEx_Calibration_Start+0x62>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	2b01      	cmp	r3, #1
 8003840:	d009      	beq.n	8003856 <HAL_ADCEx_Calibration_Start+0x5e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	401a      	ands	r2, r3
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	429a      	cmp	r2, r3
 8003854:	d101      	bne.n	800385a <HAL_ADCEx_Calibration_Start+0x62>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_ADCEx_Calibration_Start+0x64>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d152      	bne.n	8003906 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_ADCEx_Calibration_Start+0x138>)
 8003866:	4013      	ands	r3, r2
 8003868:	2202      	movs	r2, #2
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2203      	movs	r2, #3
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2103      	movs	r1, #3
 8003888:	438a      	bics	r2, r1
 800388a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0609      	lsls	r1, r1, #24
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800389e:	f7ff fbc3 	bl	8003028 <HAL_GetTick>
 80038a2:	0003      	movs	r3, r0
 80038a4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80038a6:	e014      	b.n	80038d2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80038a8:	f7ff fbbe 	bl	8003028 <HAL_GetTick>
 80038ac:	0002      	movs	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d90d      	bls.n	80038d2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	2212      	movs	r2, #18
 80038bc:	4393      	bics	r3, r2
 80038be:	2210      	movs	r2, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2234      	movs	r2, #52	; 0x34
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e02a      	b.n	8003928 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	0fdb      	lsrs	r3, r3, #31
 80038da:	07da      	lsls	r2, r3, #31
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d0e1      	beq.n	80038a8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68d9      	ldr	r1, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	2203      	movs	r2, #3
 80038fa:	4393      	bics	r3, r2
 80038fc:	2201      	movs	r2, #1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
 8003904:	e009      	b.n	800391a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	2220      	movs	r2, #32
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003912:	2317      	movs	r3, #23
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2234      	movs	r2, #52	; 0x34
 800391e:	2100      	movs	r1, #0
 8003920:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003922:	2317      	movs	r3, #23
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781b      	ldrb	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b006      	add	sp, #24
 800392e:	bd80      	pop	{r7, pc}
 8003930:	fffffefd 	.word	0xfffffefd

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003940:	1dfb      	adds	r3, r7, #7
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b7f      	cmp	r3, #127	; 0x7f
 8003946:	d809      	bhi.n	800395c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	001a      	movs	r2, r3
 800394e:	231f      	movs	r3, #31
 8003950:	401a      	ands	r2, r3
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_EnableIRQ+0x30>)
 8003954:	2101      	movs	r1, #1
 8003956:	4091      	lsls	r1, r2
 8003958:	000a      	movs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  }
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	0002      	movs	r2, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b7f      	cmp	r3, #127	; 0x7f
 800397c:	d828      	bhi.n	80039d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b25b      	sxtb	r3, r3
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	33c0      	adds	r3, #192	; 0xc0
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	1dfa      	adds	r2, r7, #7
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	0011      	movs	r1, r2
 8003994:	2203      	movs	r2, #3
 8003996:	400a      	ands	r2, r1
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	4091      	lsls	r1, r2
 800399e:	000a      	movs	r2, r1
 80039a0:	43d2      	mvns	r2, r2
 80039a2:	401a      	ands	r2, r3
 80039a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	401a      	ands	r2, r3
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	4003      	ands	r3, r0
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	481f      	ldr	r0, [pc, #124]	; (8003a3c <__NVIC_SetPriority+0xd4>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	430a      	orrs	r2, r1
 80039c8:	33c0      	adds	r3, #192	; 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ce:	e031      	b.n	8003a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	0019      	movs	r1, r3
 80039d8:	230f      	movs	r3, #15
 80039da:	400b      	ands	r3, r1
 80039dc:	3b08      	subs	r3, #8
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3306      	adds	r3, #6
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	3304      	adds	r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1dfa      	adds	r2, r7, #7
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	0011      	movs	r1, r2
 80039f0:	2203      	movs	r2, #3
 80039f2:	400a      	ands	r2, r1
 80039f4:	00d2      	lsls	r2, r2, #3
 80039f6:	21ff      	movs	r1, #255	; 0xff
 80039f8:	4091      	lsls	r1, r2
 80039fa:	000a      	movs	r2, r1
 80039fc:	43d2      	mvns	r2, r2
 80039fe:	401a      	ands	r2, r3
 8003a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	401a      	ands	r2, r3
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	2303      	movs	r3, #3
 8003a12:	4003      	ands	r3, r0
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a18:	4809      	ldr	r0, [pc, #36]	; (8003a40 <__NVIC_SetPriority+0xd8>)
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	001c      	movs	r4, r3
 8003a20:	230f      	movs	r3, #15
 8003a22:	4023      	ands	r3, r4
 8003a24:	3b08      	subs	r3, #8
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	3306      	adds	r3, #6
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	18c3      	adds	r3, r0, r3
 8003a30:	3304      	adds	r3, #4
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <SysTick_Config+0x40>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e010      	b.n	8003a7c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <SysTick_Config+0x44>)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	2301      	movs	r3, #1
 8003a64:	425b      	negs	r3, r3
 8003a66:	2103      	movs	r1, #3
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff ff7d 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <SysTick_Config+0x44>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <SysTick_Config+0x44>)
 8003a76:	2207      	movs	r2, #7
 8003a78:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	00ffffff 	.word	0x00ffffff
 8003a88:	e000e010 	.word	0xe000e010

08003a8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	210f      	movs	r1, #15
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	1c02      	adds	r2, r0, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	0002      	movs	r2, r0
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff ff33 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ffaf 	bl	8003a44 <SysTick_Config>
 8003ae6:	0003      	movs	r3, r0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	e155      	b.n	8003dac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4091      	lsls	r1, r2
 8003b0a:	000a      	movs	r2, r1
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d100      	bne.n	8003b18 <HAL_GPIO_Init+0x28>
 8003b16:	e146      	b.n	8003da6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x38>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b12      	cmp	r3, #18
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	58d3      	ldr	r3, [r2, r3]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2207      	movs	r2, #7
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	409a      	lsls	r2, r3
 8003b42:	0013      	movs	r3, r2
 8003b44:	43da      	mvns	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2107      	movs	r1, #7
 8003b54:	400b      	ands	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	6939      	ldr	r1, [r7, #16]
 8003b6e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	0013      	movs	r3, r2
 8003b80:	43da      	mvns	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	0013      	movs	r3, r2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d00b      	beq.n	8003bc4 <HAL_GPIO_Init+0xd4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bb8:	2b11      	cmp	r3, #17
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d130      	bne.n	8003c26 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	0013      	movs	r3, r2
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	0013      	movs	r3, r2
 8003c02:	43da      	mvns	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	2201      	movs	r2, #1
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
 8003c18:	0013      	movs	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	409a      	lsls	r2, r3
 8003c34:	0013      	movs	r3, r2
 8003c36:	43da      	mvns	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	055b      	lsls	r3, r3, #21
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d100      	bne.n	8003c64 <HAL_GPIO_Init+0x174>
 8003c62:	e0a0      	b.n	8003da6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c64:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <HAL_GPIO_Init+0x2d4>)
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_GPIO_Init+0x2d4>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	619a      	str	r2, [r3, #24]
 8003c70:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <HAL_GPIO_Init+0x2d4>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2201      	movs	r2, #1
 8003c76:	4013      	ands	r3, r2
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_GPIO_Init+0x2d8>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	589b      	ldr	r3, [r3, r2]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	4013      	ands	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	409a      	lsls	r2, r3
 8003c96:	0013      	movs	r3, r2
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	2390      	movs	r3, #144	; 0x90
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x1ee>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a47      	ldr	r2, [pc, #284]	; (8003dcc <HAL_GPIO_Init+0x2dc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x1ea>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a46      	ldr	r2, [pc, #280]	; (8003dd0 <HAL_GPIO_Init+0x2e0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x1e6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a45      	ldr	r2, [pc, #276]	; (8003dd4 <HAL_GPIO_Init+0x2e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x1e2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a44      	ldr	r2, [pc, #272]	; (8003dd8 <HAL_GPIO_Init+0x2e8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x1de>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e008      	b.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e004      	b.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x1f0>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	2103      	movs	r1, #3
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	4093      	lsls	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cf0:	4935      	ldr	r1, [pc, #212]	; (8003dc8 <HAL_GPIO_Init+0x2d8>)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	025b      	lsls	r3, r3, #9
 8003d16:	4013      	ands	r3, r2
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003d28:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	4013      	ands	r3, r2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	035b      	lsls	r3, r3, #13
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	039b      	lsls	r3, r3, #14
 8003d94:	4013      	ands	r3, r2
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_GPIO_Init+0x2ec>)
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3301      	adds	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	40da      	lsrs	r2, r3
 8003db4:	1e13      	subs	r3, r2, #0
 8003db6:	d000      	beq.n	8003dba <HAL_GPIO_Init+0x2ca>
 8003db8:	e6a2      	b.n	8003b00 <HAL_GPIO_Init+0x10>
  } 
}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b006      	add	sp, #24
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	48000400 	.word	0x48000400
 8003dd0:	48000800 	.word	0x48000800
 8003dd4:	48000c00 	.word	0x48000c00
 8003dd8:	48001000 	.word	0x48001000
 8003ddc:	40010400 	.word	0x40010400

08003de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	000a      	movs	r2, r1
 8003dea:	1cbb      	adds	r3, r7, #2
 8003dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	1cba      	adds	r2, r7, #2
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	4013      	ands	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e04:	230f      	movs	r3, #15
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
  }
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	0008      	movs	r0, r1
 8003e24:	0011      	movs	r1, r2
 8003e26:	1cbb      	adds	r3, r7, #2
 8003e28:	1c02      	adds	r2, r0, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	1c7b      	adds	r3, r7, #1
 8003e2e:	1c0a      	adds	r2, r1, #0
 8003e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e32:	1c7b      	adds	r3, r7, #1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e3a:	1cbb      	adds	r3, r7, #2
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e42:	e003      	b.n	8003e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e44:	1cbb      	adds	r3, r7, #2
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	000a      	movs	r2, r1
 8003e5e:	1cbb      	adds	r3, r7, #2
 8003e60:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	1cba      	adds	r2, r7, #2
 8003e68:	8812      	ldrh	r2, [r2, #0]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d005      	beq.n	8003e7a <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e6e:	1cbb      	adds	r3, r7, #2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	041a      	lsls	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003e78:	e003      	b.n	8003e82 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e7a:	1cbb      	adds	r3, r7, #2
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	619a      	str	r2, [r3, #24]
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b002      	add	sp, #8
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	0002      	movs	r2, r0
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	1dba      	adds	r2, r7, #6
 8003e9e:	8812      	ldrh	r2, [r2, #0]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d008      	beq.n	8003eb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ea6:	1dba      	adds	r2, r7, #6
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eac:	1dbb      	adds	r3, r7, #6
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f807 	bl	8003ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b002      	add	sp, #8
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	0002      	movs	r2, r0
 8003ecc:	1dbb      	adds	r3, r7, #6
 8003ece:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f000 fb76 	bl	80045d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x20>
 8003ef6:	e08e      	b.n	8004016 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ef8:	4bc5      	ldr	r3, [pc, #788]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	220c      	movs	r2, #12
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00e      	beq.n	8003f22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	4bc2      	ldr	r3, [pc, #776]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	220c      	movs	r2, #12
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d117      	bne.n	8003f40 <HAL_RCC_OscConfig+0x68>
 8003f10:	4bbf      	ldr	r3, [pc, #764]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	23c0      	movs	r3, #192	; 0xc0
 8003f16:	025b      	lsls	r3, r3, #9
 8003f18:	401a      	ands	r2, r3
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	025b      	lsls	r3, r3, #9
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d10e      	bne.n	8003f40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f22:	4bbb      	ldr	r3, [pc, #748]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	029b      	lsls	r3, r3, #10
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d100      	bne.n	8003f30 <HAL_RCC_OscConfig+0x58>
 8003f2e:	e071      	b.n	8004014 <HAL_RCC_OscConfig+0x13c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d000      	beq.n	8003f3a <HAL_RCC_OscConfig+0x62>
 8003f38:	e06c      	b.n	8004014 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f000 fb4c 	bl	80045d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x80>
 8003f48:	4bb1      	ldr	r3, [pc, #708]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4bb0      	ldr	r3, [pc, #704]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0249      	lsls	r1, r1, #9
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e02f      	b.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10c      	bne.n	8003f7a <HAL_RCC_OscConfig+0xa2>
 8003f60:	4bab      	ldr	r3, [pc, #684]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4baa      	ldr	r3, [pc, #680]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f66:	49ab      	ldr	r1, [pc, #684]	; (8004214 <HAL_RCC_OscConfig+0x33c>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4ba8      	ldr	r3, [pc, #672]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4ba7      	ldr	r3, [pc, #668]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f72:	49a9      	ldr	r1, [pc, #676]	; (8004218 <HAL_RCC_OscConfig+0x340>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e01e      	b.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d10e      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xc8>
 8003f82:	4ba3      	ldr	r3, [pc, #652]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4ba2      	ldr	r3, [pc, #648]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	02c9      	lsls	r1, r1, #11
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	4b9f      	ldr	r3, [pc, #636]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b9e      	ldr	r3, [pc, #632]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	0249      	lsls	r1, r1, #9
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
 8003fa0:	4b9b      	ldr	r3, [pc, #620]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b9a      	ldr	r3, [pc, #616]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003fa6:	499b      	ldr	r1, [pc, #620]	; (8004214 <HAL_RCC_OscConfig+0x33c>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	4b98      	ldr	r3, [pc, #608]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b97      	ldr	r3, [pc, #604]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003fb2:	4999      	ldr	r1, [pc, #612]	; (8004218 <HAL_RCC_OscConfig+0x340>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d014      	beq.n	8003fea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff f832 	bl	8003028 <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fca:	f7ff f82d 	bl	8003028 <HAL_GetTick>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	; 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e2fd      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fdc:	4b8c      	ldr	r3, [pc, #560]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0xf2>
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7ff f81d 	bl	8003028 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7ff f818 	bl	8003028 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e2e8      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b82      	ldr	r3, [pc, #520]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x11c>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x14a>
 8004020:	e06c      	b.n	80040fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004022:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	220c      	movs	r2, #12
 8004028:	4013      	ands	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800402c:	4b78      	ldr	r3, [pc, #480]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	220c      	movs	r2, #12
 8004032:	4013      	ands	r3, r2
 8004034:	2b08      	cmp	r3, #8
 8004036:	d11f      	bne.n	8004078 <HAL_RCC_OscConfig+0x1a0>
 8004038:	4b75      	ldr	r3, [pc, #468]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	23c0      	movs	r3, #192	; 0xc0
 800403e:	025b      	lsls	r3, r3, #9
 8004040:	401a      	ands	r2, r3
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	429a      	cmp	r2, r3
 8004048:	d116      	bne.n	8004078 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404a:	4b71      	ldr	r3, [pc, #452]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x188>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e2bb      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	22f8      	movs	r2, #248	; 0xf8
 8004066:	4393      	bics	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	00da      	lsls	r2, r3, #3
 8004070:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	e041      	b.n	80040fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d024      	beq.n	80040ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004080:	4b63      	ldr	r3, [pc, #396]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b62      	ldr	r3, [pc, #392]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004086:	2101      	movs	r1, #1
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe ffcc 	bl	8003028 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004096:	f7fe ffc7 	bl	8003028 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e297      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	4b59      	ldr	r3, [pc, #356]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2202      	movs	r2, #2
 80040ae:	4013      	ands	r3, r2
 80040b0:	d0f1      	beq.n	8004096 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b57      	ldr	r3, [pc, #348]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	22f8      	movs	r2, #248	; 0xf8
 80040b8:	4393      	bics	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	00da      	lsls	r2, r3, #3
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e018      	b.n	80040fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ca:	4b51      	ldr	r3, [pc, #324]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b50      	ldr	r3, [pc, #320]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	438a      	bics	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fe ffa7 	bl	8003028 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fe ffa2 	bl	8003028 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e272      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d1f1      	bne.n	80040e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2208      	movs	r2, #8
 8004102:	4013      	ands	r3, r2
 8004104:	d036      	beq.n	8004174 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d019      	beq.n	8004142 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410e:	4b40      	ldr	r3, [pc, #256]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004114:	2101      	movs	r1, #1
 8004116:	430a      	orrs	r2, r1
 8004118:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe ff85 	bl	8003028 <HAL_GetTick>
 800411e:	0003      	movs	r3, r0
 8004120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004124:	f7fe ff80 	bl	8003028 <HAL_GetTick>
 8004128:	0002      	movs	r2, r0
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e250      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d0f1      	beq.n	8004124 <HAL_RCC_OscConfig+0x24c>
 8004140:	e018      	b.n	8004174 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004142:	4b33      	ldr	r3, [pc, #204]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004146:	4b32      	ldr	r3, [pc, #200]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004148:	2101      	movs	r1, #1
 800414a:	438a      	bics	r2, r1
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fe ff6b 	bl	8003028 <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fe ff66 	bl	8003028 <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e236      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2202      	movs	r2, #2
 8004170:	4013      	ands	r3, r2
 8004172:	d1f1      	bne.n	8004158 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2204      	movs	r2, #4
 800417a:	4013      	ands	r3, r2
 800417c:	d100      	bne.n	8004180 <HAL_RCC_OscConfig+0x2a8>
 800417e:	e0b5      	b.n	80042ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	055b      	lsls	r3, r3, #21
 8004190:	4013      	ands	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	0549      	lsls	r1, r1, #21
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
 80041a2:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	055b      	lsls	r3, r3, #21
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041b0:	231f      	movs	r3, #31
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_RCC_OscConfig+0x344>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	d11a      	bne.n	80041fa <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_RCC_OscConfig+0x344>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_OscConfig+0x344>)
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	0049      	lsls	r1, r1, #1
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fe ff29 	bl	8003028 <HAL_GetTick>
 80041d6:	0003      	movs	r3, r0
 80041d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fe ff24 	bl	8003028 <HAL_GetTick>
 80041e0:	0002      	movs	r2, r0
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1f4      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_OscConfig+0x344>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4013      	ands	r3, r2
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10e      	bne.n	8004220 <HAL_RCC_OscConfig+0x348>
 8004202:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	4b02      	ldr	r3, [pc, #8]	; (8004210 <HAL_RCC_OscConfig+0x338>)
 8004208:	2101      	movs	r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	621a      	str	r2, [r3, #32]
 800420e:	e035      	b.n	800427c <HAL_RCC_OscConfig+0x3a4>
 8004210:	40021000 	.word	0x40021000
 8004214:	fffeffff 	.word	0xfffeffff
 8004218:	fffbffff 	.word	0xfffbffff
 800421c:	40007000 	.word	0x40007000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_OscConfig+0x36a>
 8004228:	4bca      	ldr	r3, [pc, #808]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	4bc9      	ldr	r3, [pc, #804]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800422e:	2101      	movs	r1, #1
 8004230:	438a      	bics	r2, r1
 8004232:	621a      	str	r2, [r3, #32]
 8004234:	4bc7      	ldr	r3, [pc, #796]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	4bc6      	ldr	r3, [pc, #792]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800423a:	2104      	movs	r1, #4
 800423c:	438a      	bics	r2, r1
 800423e:	621a      	str	r2, [r3, #32]
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x3a4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x38c>
 800424a:	4bc2      	ldr	r3, [pc, #776]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	4bc1      	ldr	r3, [pc, #772]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004250:	2104      	movs	r1, #4
 8004252:	430a      	orrs	r2, r1
 8004254:	621a      	str	r2, [r3, #32]
 8004256:	4bbf      	ldr	r3, [pc, #764]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004258:	6a1a      	ldr	r2, [r3, #32]
 800425a:	4bbe      	ldr	r3, [pc, #760]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800425c:	2101      	movs	r1, #1
 800425e:	430a      	orrs	r2, r1
 8004260:	621a      	str	r2, [r3, #32]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x3a4>
 8004264:	4bbb      	ldr	r3, [pc, #748]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	4bba      	ldr	r3, [pc, #744]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800426a:	2101      	movs	r1, #1
 800426c:	438a      	bics	r2, r1
 800426e:	621a      	str	r2, [r3, #32]
 8004270:	4bb8      	ldr	r3, [pc, #736]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	4bb7      	ldr	r3, [pc, #732]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004276:	2104      	movs	r1, #4
 8004278:	438a      	bics	r2, r1
 800427a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d014      	beq.n	80042ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004284:	f7fe fed0 	bl	8003028 <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	e009      	b.n	80042a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fe fecb 	bl	8003028 <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	4aaf      	ldr	r2, [pc, #700]	; (8004558 <HAL_RCC_OscConfig+0x680>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e19a      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	4bac      	ldr	r3, [pc, #688]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x3b6>
 80042ac:	e013      	b.n	80042d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ae:	f7fe febb 	bl	8003028 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b6:	e009      	b.n	80042cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe feb6 	bl	8003028 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	4aa5      	ldr	r2, [pc, #660]	; (8004558 <HAL_RCC_OscConfig+0x680>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e185      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042cc:	4ba1      	ldr	r3, [pc, #644]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	2202      	movs	r2, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d6:	231f      	movs	r3, #31
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b9c      	ldr	r3, [pc, #624]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	4b9b      	ldr	r3, [pc, #620]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80042e6:	499d      	ldr	r1, [pc, #628]	; (800455c <HAL_RCC_OscConfig+0x684>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	4013      	ands	r3, r2
 80042f4:	d063      	beq.n	80043be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d12a      	bne.n	8004354 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042fe:	4b95      	ldr	r3, [pc, #596]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	4b94      	ldr	r3, [pc, #592]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004304:	2104      	movs	r1, #4
 8004306:	430a      	orrs	r2, r1
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800430a:	4b92      	ldr	r3, [pc, #584]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430e:	4b91      	ldr	r3, [pc, #580]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004310:	2101      	movs	r1, #1
 8004312:	430a      	orrs	r2, r1
 8004314:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004316:	f7fe fe87 	bl	8003028 <HAL_GetTick>
 800431a:	0003      	movs	r3, r0
 800431c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004320:	f7fe fe82 	bl	8003028 <HAL_GetTick>
 8004324:	0002      	movs	r2, r0
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e152      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	d0f1      	beq.n	8004320 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800433c:	4b85      	ldr	r3, [pc, #532]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	22f8      	movs	r2, #248	; 0xf8
 8004342:	4393      	bics	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800434e:	430a      	orrs	r2, r1
 8004350:	635a      	str	r2, [r3, #52]	; 0x34
 8004352:	e034      	b.n	80043be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	3305      	adds	r3, #5
 800435a:	d111      	bne.n	8004380 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800435c:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800435e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004360:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004362:	2104      	movs	r1, #4
 8004364:	438a      	bics	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004368:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	22f8      	movs	r2, #248	; 0xf8
 800436e:	4393      	bics	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	00da      	lsls	r2, r3, #3
 8004378:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800437a:	430a      	orrs	r2, r1
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
 800437e:	e01e      	b.n	80043be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004380:	4b74      	ldr	r3, [pc, #464]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004384:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004386:	2104      	movs	r1, #4
 8004388:	430a      	orrs	r2, r1
 800438a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800438c:	4b71      	ldr	r3, [pc, #452]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004392:	2101      	movs	r1, #1
 8004394:	438a      	bics	r2, r1
 8004396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe fe46 	bl	8003028 <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043a2:	f7fe fe41 	bl	8003028 <HAL_GetTick>
 80043a6:	0002      	movs	r2, r0
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e111      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043b4:	4b67      	ldr	r3, [pc, #412]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	2202      	movs	r2, #2
 80043ba:	4013      	ands	r3, r2
 80043bc:	d1f1      	bne.n	80043a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2220      	movs	r2, #32
 80043c4:	4013      	ands	r3, r2
 80043c6:	d05c      	beq.n	8004482 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80043c8:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	220c      	movs	r2, #12
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d00e      	beq.n	80043f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80043d4:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	220c      	movs	r2, #12
 80043da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d114      	bne.n	800440a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80043e0:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	23c0      	movs	r3, #192	; 0xc0
 80043e6:	025b      	lsls	r3, r3, #9
 80043e8:	401a      	ands	r2, r3
 80043ea:	23c0      	movs	r3, #192	; 0xc0
 80043ec:	025b      	lsls	r3, r3, #9
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10b      	bne.n	800440a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80043f2:	4b58      	ldr	r3, [pc, #352]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80043f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	4013      	ands	r3, r2
 80043fc:	d040      	beq.n	8004480 <HAL_RCC_OscConfig+0x5a8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d03c      	beq.n	8004480 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0e6      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01b      	beq.n	800444a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004416:	4b4f      	ldr	r3, [pc, #316]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	0249      	lsls	r1, r1, #9
 800441c:	430a      	orrs	r2, r1
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe fe02 	bl	8003028 <HAL_GetTick>
 8004424:	0003      	movs	r3, r0
 8004426:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800442a:	f7fe fdfd 	bl	8003028 <HAL_GetTick>
 800442e:	0002      	movs	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0cd      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800443c:	4b45      	ldr	r3, [pc, #276]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	025b      	lsls	r3, r3, #9
 8004444:	4013      	ands	r3, r2
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x552>
 8004448:	e01b      	b.n	8004482 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800444a:	4b42      	ldr	r3, [pc, #264]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800444c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004450:	4943      	ldr	r1, [pc, #268]	; (8004560 <HAL_RCC_OscConfig+0x688>)
 8004452:	400a      	ands	r2, r1
 8004454:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe fde7 	bl	8003028 <HAL_GetTick>
 800445a:	0003      	movs	r3, r0
 800445c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004460:	f7fe fde2 	bl	8003028 <HAL_GetTick>
 8004464:	0002      	movs	r2, r0
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0b2      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004472:	4b38      	ldr	r3, [pc, #224]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	025b      	lsls	r3, r3, #9
 800447a:	4013      	ands	r3, r2
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x588>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004480:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d100      	bne.n	800448c <HAL_RCC_OscConfig+0x5b4>
 800448a:	e0a4      	b.n	80045d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448c:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	220c      	movs	r2, #12
 8004492:	4013      	ands	r3, r2
 8004494:	2b08      	cmp	r3, #8
 8004496:	d100      	bne.n	800449a <HAL_RCC_OscConfig+0x5c2>
 8004498:	e078      	b.n	800458c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d14c      	bne.n	800453c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044a8:	492e      	ldr	r1, [pc, #184]	; (8004564 <HAL_RCC_OscConfig+0x68c>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fdbb 	bl	8003028 <HAL_GetTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fe fdb6 	bl	8003028 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e086      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	049b      	lsls	r3, r3, #18
 80044d2:	4013      	ands	r3, r2
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	220f      	movs	r2, #15
 80044dc:	4393      	bics	r3, r2
 80044de:	0019      	movs	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_RCC_OscConfig+0x690>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	431a      	orrs	r2, r3
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	0449      	lsls	r1, r1, #17
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fe fd89 	bl	8003028 <HAL_GetTick>
 8004516:	0003      	movs	r3, r0
 8004518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451c:	f7fe fd84 	bl	8003028 <HAL_GetTick>
 8004520:	0002      	movs	r2, r0
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e054      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	049b      	lsls	r3, r3, #18
 8004536:	4013      	ands	r3, r2
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x644>
 800453a:	e04c      	b.n	80045d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCC_OscConfig+0x67c>)
 8004542:	4908      	ldr	r1, [pc, #32]	; (8004564 <HAL_RCC_OscConfig+0x68c>)
 8004544:	400a      	ands	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe fd6e 	bl	8003028 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004550:	e015      	b.n	800457e <HAL_RCC_OscConfig+0x6a6>
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	40021000 	.word	0x40021000
 8004558:	00001388 	.word	0x00001388
 800455c:	efffffff 	.word	0xefffffff
 8004560:	fffeffff 	.word	0xfffeffff
 8004564:	feffffff 	.word	0xfeffffff
 8004568:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fe fd5c 	bl	8003028 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e02c      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_RCC_OscConfig+0x708>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	049b      	lsls	r3, r3, #18
 8004586:	4013      	ands	r3, r2
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x694>
 800458a:	e024      	b.n	80045d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e01f      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_OscConfig+0x708>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_RCC_OscConfig+0x708>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	23c0      	movs	r3, #192	; 0xc0
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	401a      	ands	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d10e      	bne.n	80045d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	220f      	movs	r2, #15
 80045b8:	401a      	ands	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	23f0      	movs	r3, #240	; 0xf0
 80045c6:	039b      	lsls	r3, r3, #14
 80045c8:	401a      	ands	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b008      	add	sp, #32
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000

080045e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0bf      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d911      	bls.n	800462a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	4393      	bics	r3, r2
 800460e:	0019      	movs	r1, r3
 8004610:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	4013      	ands	r3, r2
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d001      	beq.n	800462a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0a6      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d015      	beq.n	8004660 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2204      	movs	r2, #4
 800463a:	4013      	ands	r3, r2
 800463c:	d006      	beq.n	800464c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	4b50      	ldr	r3, [pc, #320]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 8004644:	21e0      	movs	r1, #224	; 0xe0
 8004646:	00c9      	lsls	r1, r1, #3
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b4d      	ldr	r3, [pc, #308]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	22f0      	movs	r2, #240	; 0xf0
 8004652:	4393      	bics	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	4013      	ands	r3, r2
 8004668:	d04c      	beq.n	8004704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	4013      	ands	r3, r2
 800467c:	d120      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07a      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	049b      	lsls	r3, r3, #18
 8004692:	4013      	ands	r3, r2
 8004694:	d114      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06e      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	025b      	lsls	r3, r3, #9
 80046aa:	4013      	ands	r3, r2
 80046ac:	d108      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e062      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2202      	movs	r2, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e05b      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2203      	movs	r2, #3
 80046c6:	4393      	bics	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fe fca8 	bl	8003028 <HAL_GetTick>
 80046d8:	0003      	movs	r3, r0
 80046da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046dc:	e009      	b.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046de:	f7fe fca3 	bl	8003028 <HAL_GetTick>
 80046e2:	0002      	movs	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	4a27      	ldr	r2, [pc, #156]	; (8004788 <HAL_RCC_ClockConfig+0x1a4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e042      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	220c      	movs	r2, #12
 80046f8:	401a      	ands	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1ec      	bne.n	80046de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d211      	bcs.n	8004736 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	4393      	bics	r3, r2
 800471a:	0019      	movs	r1, r3
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_RCC_ClockConfig+0x19c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	4013      	ands	r3, r2
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d001      	beq.n	8004736 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e020      	b.n	8004778 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2204      	movs	r2, #4
 800473c:	4013      	ands	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <HAL_RCC_ClockConfig+0x1a8>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004754:	f000 f820 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004758:	0001      	movs	r1, r0
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x1a0>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	220f      	movs	r2, #15
 8004762:	4013      	ands	r3, r2
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x1ac>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	000a      	movs	r2, r1
 800476a:	40da      	lsrs	r2, r3
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1b0>)
 800476e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004770:	2000      	movs	r0, #0
 8004772:	f7fe fc13 	bl	8002f9c <HAL_InitTick>
  
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b004      	add	sp, #16
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40022000 	.word	0x40022000
 8004784:	40021000 	.word	0x40021000
 8004788:	00001388 	.word	0x00001388
 800478c:	fffff8ff 	.word	0xfffff8ff
 8004790:	0800b10c 	.word	0x0800b10c
 8004794:	20000000 	.word	0x20000000

08004798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b08f      	sub	sp, #60	; 0x3c
 800479c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800479e:	2314      	movs	r3, #20
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <HAL_RCC_GetSysClockFreq+0xe8>)
 80047a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047a6:	c313      	stmia	r3!, {r0, r1, r4}
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_RCC_GetSysClockFreq+0xec>)
 80047b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047b2:	c313      	stmia	r3!, {r0, r1, r4}
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c0:	2300      	movs	r3, #0
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <HAL_RCC_GetSysClockFreq+0xf0>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	220c      	movs	r2, #12
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d006      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x52>
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d043      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0xd0>
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d144      	bne.n	800486e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047e4:	4b29      	ldr	r3, [pc, #164]	; (800488c <HAL_RCC_GetSysClockFreq+0xf4>)
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047e8:	e044      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	220f      	movs	r2, #15
 80047f0:	4013      	ands	r3, r2
 80047f2:	2214      	movs	r2, #20
 80047f4:	18ba      	adds	r2, r7, r2
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCC_GetSysClockFreq+0xf0>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	220f      	movs	r2, #15
 8004800:	4013      	ands	r3, r2
 8004802:	1d3a      	adds	r2, r7, #4
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480a:	23c0      	movs	r3, #192	; 0xc0
 800480c:	025b      	lsls	r3, r3, #9
 800480e:	401a      	ands	r2, r3
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	429a      	cmp	r2, r3
 8004816:	d109      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481a:	481c      	ldr	r0, [pc, #112]	; (800488c <HAL_RCC_GetSysClockFreq+0xf4>)
 800481c:	f7fb fc86 	bl	800012c <__udivsi3>
 8004820:	0003      	movs	r3, r0
 8004822:	001a      	movs	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	4353      	muls	r3, r2
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	e01a      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	23c0      	movs	r3, #192	; 0xc0
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	401a      	ands	r2, r3
 8004834:	23c0      	movs	r3, #192	; 0xc0
 8004836:	025b      	lsls	r3, r3, #9
 8004838:	429a      	cmp	r2, r3
 800483a:	d109      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800483c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483e:	4814      	ldr	r0, [pc, #80]	; (8004890 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004840:	f7fb fc74 	bl	800012c <__udivsi3>
 8004844:	0003      	movs	r3, r0
 8004846:	001a      	movs	r2, r3
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	4353      	muls	r3, r2
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e008      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004852:	480e      	ldr	r0, [pc, #56]	; (800488c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004854:	f7fb fc6a 	bl	800012c <__udivsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	001a      	movs	r2, r3
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	4353      	muls	r3, r2
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004866:	e005      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_GetSysClockFreq+0xf8>)
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800486c:	e002      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004872:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b00f      	add	sp, #60	; 0x3c
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	0800afe4 	.word	0x0800afe4
 8004884:	0800aff4 	.word	0x0800aff4
 8004888:	40021000 	.word	0x40021000
 800488c:	007a1200 	.word	0x007a1200
 8004890:	02dc6c00 	.word	0x02dc6c00

08004894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e08a      	b.n	80049bc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	225d      	movs	r2, #93	; 0x5d
 80048b0:	5c9b      	ldrb	r3, [r3, r2]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	225c      	movs	r2, #92	; 0x5c
 80048bc:	2100      	movs	r1, #0
 80048be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0018      	movs	r0, r3
 80048c4:	f7fe f9c8 	bl	8002c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	225d      	movs	r2, #93	; 0x5d
 80048cc:	2102      	movs	r1, #2
 80048ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2140      	movs	r1, #64	; 0x40
 80048dc:	438a      	bics	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	23e0      	movs	r3, #224	; 0xe0
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d902      	bls.n	80048f2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e002      	b.n	80048f8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	015b      	lsls	r3, r3, #5
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	23f0      	movs	r3, #240	; 0xf0
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	429a      	cmp	r2, r3
 8004902:	d008      	beq.n	8004916 <HAL_SPI_Init+0x82>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	23e0      	movs	r3, #224	; 0xe0
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	23e0      	movs	r3, #224	; 0xe0
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
 8004930:	e002      	b.n	8004938 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	400b      	ands	r3, r1
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	431a      	orrs	r2, r3
 8004966:	0011      	movs	r1, r2
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	2204      	movs	r2, #4
 800497c:	401a      	ands	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	431a      	orrs	r2, r3
 8004990:	0011      	movs	r1, r2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4907      	ldr	r1, [pc, #28]	; (80049c4 <HAL_SPI_Init+0x130>)
 80049a8:	400a      	ands	r2, r1
 80049aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	225d      	movs	r2, #93	; 0x5d
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b004      	add	sp, #16
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	fffff7ff 	.word	0xfffff7ff

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e01e      	b.n	8004a18 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	223d      	movs	r2, #61	; 0x3d
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	223c      	movs	r2, #60	; 0x3c
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fe fa6d 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	223d      	movs	r2, #61	; 0x3d
 80049fa:	2102      	movs	r1, #2
 80049fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	0019      	movs	r1, r3
 8004a08:	0010      	movs	r0, r2
 8004a0a:	f000 f947 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	223d      	movs	r2, #61	; 0x3d
 8004a12:	2101      	movs	r1, #1
 8004a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d124      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d11d      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2203      	movs	r2, #3
 8004a4a:	4252      	negs	r2, r2
 8004a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 f902 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004a68:	e007      	b.n	8004a7a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f8f5 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f901 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2204      	movs	r2, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d125      	bne.n	8004ada <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2204      	movs	r2, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11e      	bne.n	8004ada <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2205      	movs	r2, #5
 8004aa2:	4252      	negs	r2, r2
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	23c0      	movs	r3, #192	; 0xc0
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 f8d5 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f8c8 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f000 f8d4 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d124      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2208      	movs	r2, #8
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11d      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2209      	movs	r2, #9
 8004afc:	4252      	negs	r2, r2
 8004afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2204      	movs	r2, #4
 8004b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f8a9 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f89c 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 f8a8 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d125      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2210      	movs	r2, #16
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d11e      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2211      	movs	r2, #17
 8004b54:	4252      	negs	r2, r2
 8004b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	23c0      	movs	r3, #192	; 0xc0
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f87c 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004b74:	e007      	b.n	8004b86 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 f86f 	bl	8004c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 f87b 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2201      	movs	r2, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10f      	bne.n	8004bba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d108      	bne.n	8004bba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2202      	movs	r2, #2
 8004bae:	4252      	negs	r2, r2
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f000 f849 	bl	8004c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d10f      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d108      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2281      	movs	r2, #129	; 0x81
 8004bdc:	4252      	negs	r2, r2
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	0018      	movs	r0, r3
 8004be4:	f000 f8e2 	bl	8004dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d10f      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d108      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2241      	movs	r2, #65	; 0x41
 8004c0a:	4252      	negs	r2, r2
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f83b 	bl	8004c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d10f      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d108      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2221      	movs	r2, #33	; 0x21
 8004c38:	4252      	negs	r2, r2
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f8ac 	bl	8004d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d008      	beq.n	8004cc6 <TIM_Base_SetConfig+0x2a>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x2a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2270      	movs	r2, #112	; 0x70
 8004cca:	4393      	bics	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	05db      	lsls	r3, r3, #23
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <TIM_Base_SetConfig+0xec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <TIM_Base_SetConfig+0xf0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <TIM_Base_SetConfig+0xf4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0x76>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <TIM_Base_SetConfig+0xf8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_Base_SetConfig+0xfc>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	4393      	bics	r3, r2
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <TIM_Base_SetConfig+0xf0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <TIM_Base_SetConfig+0xf4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0xce>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <TIM_Base_SetConfig+0xf8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d103      	bne.n	8004d72 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	615a      	str	r2, [r3, #20]
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40002000 	.word	0x40002000
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800
 8004d98:	fffffcff 	.word	0xfffffcff

08004d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	1dbb      	adds	r3, r7, #6
 8004dc6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dcc:	1dbb      	adds	r3, r7, #6
 8004dce:	2200      	movs	r2, #0
 8004dd0:	5e9b      	ldrsh	r3, [r3, r2]
 8004dd2:	2b84      	cmp	r3, #132	; 0x84
 8004dd4:	d006      	beq.n	8004de4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004dd6:	1dbb      	adds	r3, r7, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	5e9a      	ldrsh	r2, [r3, r2]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	18d3      	adds	r3, r2, r3
 8004de0:	3303      	adds	r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b004      	add	sp, #16
 8004dec:	bd80      	pop	{r7, pc}

08004dee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df4:	f3ef 8305 	mrs	r3, IPSR
 8004df8:	607b      	str	r3, [r7, #4]
  return(result);
 8004dfa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	4193      	sbcs	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e0e:	f000 fb99 	bl	8005544 <vTaskStartScheduler>
  
  return osOK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1c:	b089      	sub	sp, #36	; 0x24
 8004e1e:	af04      	add	r7, sp, #16
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685c      	ldr	r4, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681d      	ldr	r5, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691e      	ldr	r6, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2208      	movs	r2, #8
 8004e34:	5e9b      	ldrsh	r3, [r3, r2]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7ff ffc0 	bl	8004dbc <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	9302      	str	r3, [sp, #8]
 8004e48:	9201      	str	r2, [sp, #4]
 8004e4a:	9000      	str	r0, [sp, #0]
 8004e4c:	000b      	movs	r3, r1
 8004e4e:	0032      	movs	r2, r6
 8004e50:	0029      	movs	r1, r5
 8004e52:	0020      	movs	r0, r4
 8004e54:	f000 f8f1 	bl	800503a <xTaskCreateStatic>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b005      	add	sp, #20
 8004e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <osDelay+0x16>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e000      	b.n	8004e7e <osDelay+0x18>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 f9f8 	bl	8005274 <vTaskDelay>
  
  return osOK;
 8004e84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 fa11 	bl	80052c0 <vTaskSuspend>
  
  return osOK;
 8004e9e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8004eb0:	f7ff ff9d 	bl	8004dee <inHandlerMode>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d00b      	beq.n	8004ed0 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 fae4 	bl	8005488 <xTaskResumeFromISR>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d108      	bne.n	8004ed8 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <osThreadResume+0x3c>)
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	0552      	lsls	r2, r2, #21
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e003      	b.n	8004ed8 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 fa8a 	bl	80053ec <vTaskResume>
  }
  return osOK;
 8004ed8:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	4252      	negs	r2, r2
 8004f00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3308      	adds	r3, #8
 8004f06:	001a      	movs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	001a      	movs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b002      	add	sp, #8
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b002      	add	sp, #8
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3301      	adds	r3, #1
 8004f92:	d103      	bne.n	8004f9c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e00c      	b.n	8004fb6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e002      	b.n	8004faa <vListInsert+0x2c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d2f6      	bcs.n	8004fa4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b004      	add	sp, #16
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6892      	ldr	r2, [r2, #8]
 8005000:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6852      	ldr	r2, [r2, #4]
 800500a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d103      	bne.n	800501e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}

0800503a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800503a:	b590      	push	{r4, r7, lr}
 800503c:	b08d      	sub	sp, #52	; 0x34
 800503e:	af04      	add	r7, sp, #16
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <xTaskCreateStatic+0x18>
 800504e:	b672      	cpsid	i
 8005050:	e7fe      	b.n	8005050 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <xTaskCreateStatic+0x22>
 8005058:	b672      	cpsid	i
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505c:	2354      	movs	r3, #84	; 0x54
 800505e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b54      	cmp	r3, #84	; 0x54
 8005064:	d001      	beq.n	800506a <xTaskCreateStatic+0x30>
 8005066:	b672      	cpsid	i
 8005068:	e7fe      	b.n	8005068 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01c      	beq.n	80050aa <xTaskCreateStatic+0x70>
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d019      	beq.n	80050aa <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005080:	683c      	ldr	r4, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	2300      	movs	r3, #0
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	9302      	str	r3, [sp, #8]
 8005090:	2318      	movs	r3, #24
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	0023      	movs	r3, r4
 800509c:	f000 f80c 	bl	80050b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f882 	bl	80051ac <prvAddNewTaskToReadyList>
 80050a8:	e001      	b.n	80050ae <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ae:	69bb      	ldr	r3, [r7, #24]
	}
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b009      	add	sp, #36	; 0x24
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4936      	ldr	r1, [pc, #216]	; (80051a8 <prvInitialiseNewTask+0xf0>)
 80050ce:	468c      	mov	ip, r1
 80050d0:	4463      	add	r3, ip
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	18d3      	adds	r3, r2, r3
 80050d6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2207      	movs	r2, #7
 80050dc:	4393      	bics	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2207      	movs	r2, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	d001      	beq.n	80050ec <prvInitialiseNewTask+0x34>
 80050e8:	b672      	cpsid	i
 80050ea:	e7fe      	b.n	80050ea <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e013      	b.n	800511a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	18d3      	adds	r3, r2, r3
 80050f8:	7818      	ldrb	r0, [r3, #0]
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	2134      	movs	r1, #52	; 0x34
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	185b      	adds	r3, r3, r1
 8005104:	1c02      	adds	r2, r0, #0
 8005106:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d006      	beq.n	8005122 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d9e8      	bls.n	80050f2 <prvInitialiseNewTask+0x3a>
 8005120:	e000      	b.n	8005124 <prvInitialiseNewTask+0x6c>
		{
			break;
 8005122:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	2243      	movs	r2, #67	; 0x43
 8005128:	2100      	movs	r1, #0
 800512a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b06      	cmp	r3, #6
 8005130:	d901      	bls.n	8005136 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005132:	2306      	movs	r3, #6
 8005134:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2200      	movs	r2, #0
 8005146:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	3304      	adds	r3, #4
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff fee9 	bl	8004f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	3318      	adds	r3, #24
 8005156:	0018      	movs	r0, r3
 8005158:	f7ff fee4 	bl	8004f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2207      	movs	r2, #7
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	2200      	movs	r2, #0
 8005176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2250      	movs	r2, #80	; 0x50
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	0018      	movs	r0, r3
 8005188:	f000 fce6 	bl	8005b58 <pxPortInitialiseStack>
 800518c:	0002      	movs	r2, r0
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b006      	add	sp, #24
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	3fffffff 	.word	0x3fffffff

080051ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051b4:	f000 fd6c 	bl	8005c90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <prvAddNewTaskToReadyList+0xb0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <prvAddNewTaskToReadyList+0xb0>)
 80051c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <prvAddNewTaskToReadyList+0xb4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051ca:	4b25      	ldr	r3, [pc, #148]	; (8005260 <prvAddNewTaskToReadyList+0xb4>)
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <prvAddNewTaskToReadyList+0xb0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d110      	bne.n	80051fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051d8:	f000 fbb0 	bl	800593c <prvInitialiseTaskLists>
 80051dc:	e00d      	b.n	80051fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051de:	4b21      	ldr	r3, [pc, #132]	; (8005264 <prvAddNewTaskToReadyList+0xb8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051e6:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <prvAddNewTaskToReadyList+0xb4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d802      	bhi.n	80051fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051f4:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <prvAddNewTaskToReadyList+0xb4>)
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051fa:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <prvAddNewTaskToReadyList+0xbc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <prvAddNewTaskToReadyList+0xbc>)
 8005202:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b18      	ldr	r3, [pc, #96]	; (800526c <prvAddNewTaskToReadyList+0xc0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <prvAddNewTaskToReadyList+0x6c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <prvAddNewTaskToReadyList+0xc0>)
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	0013      	movs	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	189b      	adds	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <prvAddNewTaskToReadyList+0xc4>)
 8005226:	189a      	adds	r2, r3, r2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	0019      	movs	r1, r3
 800522e:	0010      	movs	r0, r2
 8005230:	f7ff fe83 	bl	8004f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005234:	f000 fd3e 	bl	8005cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvAddNewTaskToReadyList+0xb8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <prvAddNewTaskToReadyList+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	429a      	cmp	r2, r3
 800524c:	d201      	bcs.n	8005252 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800524e:	f000 fd0f 	bl	8005c70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b002      	add	sp, #8
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	20000568 	.word	0x20000568
 8005260:	20000468 	.word	0x20000468
 8005264:	20000574 	.word	0x20000574
 8005268:	20000584 	.word	0x20000584
 800526c:	20000570 	.word	0x20000570
 8005270:	2000046c 	.word	0x2000046c

08005274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <vTaskDelay+0x48>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <vTaskDelay+0x1e>
 800528e:	b672      	cpsid	i
 8005290:	e7fe      	b.n	8005290 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005292:	f000 f9a5 	bl	80055e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2100      	movs	r1, #0
 800529a:	0018      	movs	r0, r3
 800529c:	f000 fc08 	bl	8005ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052a0:	f000 f9aa 	bl	80055f8 <xTaskResumeAll>
 80052a4:	0003      	movs	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80052ae:	f000 fcdf 	bl	8005c70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b004      	add	sp, #16
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	20000590 	.word	0x20000590

080052c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80052c8:	f000 fce2 	bl	8005c90 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <vTaskSuspend+0x18>
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <vTaskSuspend+0xb8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	e000      	b.n	80052da <vTaskSuspend+0x1a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3304      	adds	r3, #4
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7ff fe82 	bl	8004fea <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3318      	adds	r3, #24
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff fe79 	bl	8004fea <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1d1a      	adds	r2, r3, #4
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <vTaskSuspend+0xbc>)
 80052fe:	0011      	movs	r1, r2
 8005300:	0018      	movs	r0, r3
 8005302:	f7ff fe1a 	bl	8004f3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2250      	movs	r2, #80	; 0x50
 800530a:	5c9b      	ldrb	r3, [r3, r2]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d103      	bne.n	800531a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2250      	movs	r2, #80	; 0x50
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800531a:	f000 fccb 	bl	8005cb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <vTaskSuspend+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005326:	f000 fcb3 	bl	8005c90 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800532a:	f000 fb81 	bl	8005a30 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800532e:	f000 fcc1 	bl	8005cb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <vTaskSuspend+0xb8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	429a      	cmp	r2, r3
 800533a:	d118      	bne.n	800536e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <vTaskSuspend+0xc0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <vTaskSuspend+0xc4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <vTaskSuspend+0x90>
 800534c:	b672      	cpsid	i
 800534e:	e7fe      	b.n	800534e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8005350:	f000 fc8e 	bl	8005c70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005354:	e00b      	b.n	800536e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <vTaskSuspend+0xbc>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <vTaskSuspend+0xc8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d103      	bne.n	800536a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <vTaskSuspend+0xb8>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
	}
 8005368:	e001      	b.n	800536e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800536a:	f000 fa85 	bl	8005878 <vTaskSwitchContext>
	}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b004      	add	sp, #16
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	20000468 	.word	0x20000468
 800537c:	20000554 	.word	0x20000554
 8005380:	20000574 	.word	0x20000574
 8005384:	20000590 	.word	0x20000590
 8005388:	20000568 	.word	0x20000568

0800538c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <prvTaskIsTaskSuspended+0x1a>
 80053a2:	b672      	cpsid	i
 80053a4:	e7fe      	b.n	80053a4 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <prvTaskIsTaskSuspended+0x58>)
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d101      	bne.n	80053b4 <prvTaskIsTaskSuspended+0x28>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <prvTaskIsTaskSuspended+0x2a>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <prvTaskIsTaskSuspended+0x5c>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d00a      	beq.n	80053da <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <prvTaskIsTaskSuspended+0x44>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <prvTaskIsTaskSuspended+0x46>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80053d6:	2301      	movs	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053da:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	b004      	add	sp, #16
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000554 	.word	0x20000554
 80053e8:	20000528 	.word	0x20000528

080053ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <vTaskResume+0x16>
 80053fe:	b672      	cpsid	i
 8005400:	e7fe      	b.n	8005400 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d034      	beq.n	8005472 <vTaskResume+0x86>
 8005408:	4b1c      	ldr	r3, [pc, #112]	; (800547c <vTaskResume+0x90>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	429a      	cmp	r2, r3
 8005410:	d02f      	beq.n	8005472 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8005412:	f000 fc3d 	bl	8005c90 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	0018      	movs	r0, r3
 800541a:	f7ff ffb7 	bl	800538c <prvTaskIsTaskSuspended>
 800541e:	1e03      	subs	r3, r0, #0
 8005420:	d025      	beq.n	800546e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3304      	adds	r3, #4
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff fddf 	bl	8004fea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	4b13      	ldr	r3, [pc, #76]	; (8005480 <vTaskResume+0x94>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d903      	bls.n	8005440 <vTaskResume+0x54>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <vTaskResume+0x94>)
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	0013      	movs	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	189b      	adds	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <vTaskResume+0x98>)
 800544e:	189a      	adds	r2, r3, r2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3304      	adds	r3, #4
 8005454:	0019      	movs	r1, r3
 8005456:	0010      	movs	r0, r2
 8005458:	f7ff fd6f 	bl	8004f3a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <vTaskResume+0x90>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	429a      	cmp	r2, r3
 8005468:	d301      	bcc.n	800546e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800546a:	f000 fc01 	bl	8005c70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800546e:	f000 fc21 	bl	8005cb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	b004      	add	sp, #16
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	20000468 	.word	0x20000468
 8005480:	20000570 	.word	0x20000570
 8005484:	2000046c 	.word	0x2000046c

08005488 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <xTaskResumeFromISR+0x1a>
 800549e:	b672      	cpsid	i
 80054a0:	e7fe      	b.n	80054a0 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054a2:	f000 fc1f 	bl	8005ce4 <ulSetInterruptMaskFromISR>
 80054a6:	0003      	movs	r3, r0
 80054a8:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7ff ff6d 	bl	800538c <prvTaskIsTaskSuspended>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d032      	beq.n	800551c <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <xTaskResumeFromISR+0xa8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d126      	bne.n	800550c <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <xTaskResumeFromISR+0xac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d301      	bcc.n	80054d0 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	3304      	adds	r3, #4
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7ff fd88 	bl	8004fea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4b16      	ldr	r3, [pc, #88]	; (8005538 <xTaskResumeFromISR+0xb0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d903      	bls.n	80054ee <xTaskResumeFromISR+0x66>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <xTaskResumeFromISR+0xb0>)
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	0013      	movs	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <xTaskResumeFromISR+0xb4>)
 80054fc:	189a      	adds	r2, r3, r2
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3304      	adds	r3, #4
 8005502:	0019      	movs	r1, r3
 8005504:	0010      	movs	r0, r2
 8005506:	f7ff fd18 	bl	8004f3a <vListInsertEnd>
 800550a:	e007      	b.n	800551c <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	3318      	adds	r3, #24
 8005510:	001a      	movs	r2, r3
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <xTaskResumeFromISR+0xb8>)
 8005514:	0011      	movs	r1, r2
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fd0f 	bl	8004f3a <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 fbe6 	bl	8005cf0 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8005524:	697b      	ldr	r3, [r7, #20]
	}
 8005526:	0018      	movs	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	b006      	add	sp, #24
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	20000590 	.word	0x20000590
 8005534:	20000468 	.word	0x20000468
 8005538:	20000570 	.word	0x20000570
 800553c:	2000046c 	.word	0x2000046c
 8005540:	20000528 	.word	0x20000528

08005544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005552:	003a      	movs	r2, r7
 8005554:	1d39      	adds	r1, r7, #4
 8005556:	2308      	movs	r3, #8
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	0018      	movs	r0, r3
 800555c:	f7fd f946 	bl	80027ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005560:	683c      	ldr	r4, [r7, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4918      	ldr	r1, [pc, #96]	; (80055c8 <vTaskStartScheduler+0x84>)
 8005568:	4818      	ldr	r0, [pc, #96]	; (80055cc <vTaskStartScheduler+0x88>)
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	0022      	movs	r2, r4
 8005576:	f7ff fd60 	bl	800503a <xTaskCreateStatic>
 800557a:	0002      	movs	r2, r0
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <vTaskStartScheduler+0x8c>)
 800557e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <vTaskStartScheduler+0x8c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005588:	2301      	movs	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e001      	b.n	8005592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d10d      	bne.n	80055b4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005598:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <vTaskStartScheduler+0x90>)
 800559c:	2201      	movs	r2, #1
 800559e:	4252      	negs	r2, r2
 80055a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <vTaskStartScheduler+0x94>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <vTaskStartScheduler+0x98>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ae:	f000 fb3b 	bl	8005c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055b2:	e004      	b.n	80055be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	d101      	bne.n	80055be <vTaskStartScheduler+0x7a>
 80055ba:	b672      	cpsid	i
 80055bc:	e7fe      	b.n	80055bc <vTaskStartScheduler+0x78>
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b005      	add	sp, #20
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	0800b004 	.word	0x0800b004
 80055cc:	0800591d 	.word	0x0800591d
 80055d0:	2000058c 	.word	0x2000058c
 80055d4:	20000588 	.word	0x20000588
 80055d8:	20000574 	.word	0x20000574
 80055dc:	2000056c 	.word	0x2000056c

080055e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055e4:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <vTaskSuspendAll+0x14>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <vTaskSuspendAll+0x14>)
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000590 	.word	0x20000590

080055f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005606:	4b3a      	ldr	r3, [pc, #232]	; (80056f0 <xTaskResumeAll+0xf8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xTaskResumeAll+0x1a>
 800560e:	b672      	cpsid	i
 8005610:	e7fe      	b.n	8005610 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005612:	f000 fb3d 	bl	8005c90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005616:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <xTaskResumeAll+0xf8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <xTaskResumeAll+0xf8>)
 800561e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005620:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <xTaskResumeAll+0xf8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15b      	bne.n	80056e0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005628:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <xTaskResumeAll+0xfc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d057      	beq.n	80056e0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005630:	e02f      	b.n	8005692 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005632:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <xTaskResumeAll+0x100>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3318      	adds	r3, #24
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fcd3 	bl	8004fea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3304      	adds	r3, #4
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff fcce 	bl	8004fea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <xTaskResumeAll+0x104>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <xTaskResumeAll+0x6a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <xTaskResumeAll+0x104>)
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005666:	0013      	movs	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	189b      	adds	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a24      	ldr	r2, [pc, #144]	; (8005700 <xTaskResumeAll+0x108>)
 8005670:	189a      	adds	r2, r3, r2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3304      	adds	r3, #4
 8005676:	0019      	movs	r1, r3
 8005678:	0010      	movs	r0, r2
 800567a:	f7ff fc5e 	bl	8004f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <xTaskResumeAll+0x10c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	429a      	cmp	r2, r3
 800568a:	d302      	bcc.n	8005692 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <xTaskResumeAll+0x110>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <xTaskResumeAll+0x100>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1cb      	bne.n	8005632 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056a0:	f000 f9c6 	bl	8005a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056a4:	4b19      	ldr	r3, [pc, #100]	; (800570c <xTaskResumeAll+0x114>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00f      	beq.n	80056d0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056b0:	f000 f82e 	bl	8005710 <xTaskIncrementTick>
 80056b4:	1e03      	subs	r3, r0, #0
 80056b6:	d002      	beq.n	80056be <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <xTaskResumeAll+0x110>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f2      	bne.n	80056b0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <xTaskResumeAll+0x114>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <xTaskResumeAll+0x110>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056dc:	f000 fac8 	bl	8005c70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e0:	f000 fae8 	bl	8005cb4 <vPortExitCritical>

	return xAlreadyYielded;
 80056e4:	68bb      	ldr	r3, [r7, #8]
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	20000590 	.word	0x20000590
 80056f4:	20000568 	.word	0x20000568
 80056f8:	20000528 	.word	0x20000528
 80056fc:	20000570 	.word	0x20000570
 8005700:	2000046c 	.word	0x2000046c
 8005704:	20000468 	.word	0x20000468
 8005708:	2000057c 	.word	0x2000057c
 800570c:	20000578 	.word	0x20000578

08005710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571a:	4b4c      	ldr	r3, [pc, #304]	; (800584c <xTaskIncrementTick+0x13c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d000      	beq.n	8005724 <xTaskIncrementTick+0x14>
 8005722:	e083      	b.n	800582c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005724:	4b4a      	ldr	r3, [pc, #296]	; (8005850 <xTaskIncrementTick+0x140>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800572c:	4b48      	ldr	r3, [pc, #288]	; (8005850 <xTaskIncrementTick+0x140>)
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d117      	bne.n	8005768 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005738:	4b46      	ldr	r3, [pc, #280]	; (8005854 <xTaskIncrementTick+0x144>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <xTaskIncrementTick+0x36>
 8005742:	b672      	cpsid	i
 8005744:	e7fe      	b.n	8005744 <xTaskIncrementTick+0x34>
 8005746:	4b43      	ldr	r3, [pc, #268]	; (8005854 <xTaskIncrementTick+0x144>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	4b42      	ldr	r3, [pc, #264]	; (8005858 <xTaskIncrementTick+0x148>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b40      	ldr	r3, [pc, #256]	; (8005854 <xTaskIncrementTick+0x144>)
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	4b40      	ldr	r3, [pc, #256]	; (8005858 <xTaskIncrementTick+0x148>)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <xTaskIncrementTick+0x14c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	4b3e      	ldr	r3, [pc, #248]	; (800585c <xTaskIncrementTick+0x14c>)
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f000 f964 	bl	8005a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005768:	4b3d      	ldr	r3, [pc, #244]	; (8005860 <xTaskIncrementTick+0x150>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d34e      	bcc.n	8005810 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005772:	4b38      	ldr	r3, [pc, #224]	; (8005854 <xTaskIncrementTick+0x144>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <xTaskIncrementTick+0x70>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <xTaskIncrementTick+0x72>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <xTaskIncrementTick+0x150>)
 8005788:	2201      	movs	r2, #1
 800578a:	4252      	negs	r2, r2
 800578c:	601a      	str	r2, [r3, #0]
					break;
 800578e:	e03f      	b.n	8005810 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005790:	4b30      	ldr	r3, [pc, #192]	; (8005854 <xTaskIncrementTick+0x144>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d203      	bcs.n	80057b0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057a8:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <xTaskIncrementTick+0x150>)
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
						break;
 80057ae:	e02f      	b.n	8005810 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	3304      	adds	r3, #4
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff fc18 	bl	8004fea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3318      	adds	r3, #24
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7ff fc0f 	bl	8004fea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <xTaskIncrementTick+0x154>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d903      	bls.n	80057e0 <xTaskIncrementTick+0xd0>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <xTaskIncrementTick+0x154>)
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	0013      	movs	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <xTaskIncrementTick+0x158>)
 80057ee:	189a      	adds	r2, r3, r2
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	3304      	adds	r3, #4
 80057f4:	0019      	movs	r1, r3
 80057f6:	0010      	movs	r0, r2
 80057f8:	f7ff fb9f 	bl	8004f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <xTaskIncrementTick+0x15c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	429a      	cmp	r2, r3
 8005808:	d3b3      	bcc.n	8005772 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800580e:	e7b0      	b.n	8005772 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <xTaskIncrementTick+0x15c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	4914      	ldr	r1, [pc, #80]	; (8005868 <xTaskIncrementTick+0x158>)
 8005818:	0013      	movs	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	189b      	adds	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	585b      	ldr	r3, [r3, r1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d907      	bls.n	8005836 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e004      	b.n	8005836 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <xTaskIncrementTick+0x160>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <xTaskIncrementTick+0x160>)
 8005834:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <xTaskIncrementTick+0x164>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b006      	add	sp, #24
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000590 	.word	0x20000590
 8005850:	2000056c 	.word	0x2000056c
 8005854:	20000520 	.word	0x20000520
 8005858:	20000524 	.word	0x20000524
 800585c:	20000580 	.word	0x20000580
 8005860:	20000588 	.word	0x20000588
 8005864:	20000570 	.word	0x20000570
 8005868:	2000046c 	.word	0x2000046c
 800586c:	20000468 	.word	0x20000468
 8005870:	20000578 	.word	0x20000578
 8005874:	2000057c 	.word	0x2000057c

08005878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800587e:	4b22      	ldr	r3, [pc, #136]	; (8005908 <vTaskSwitchContext+0x90>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <vTaskSwitchContext+0x94>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800588c:	e037      	b.n	80058fe <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <vTaskSwitchContext+0x94>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <vTaskSwitchContext+0x98>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	e007      	b.n	80058ac <vTaskSwitchContext+0x34>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <vTaskSwitchContext+0x2e>
 80058a2:	b672      	cpsid	i
 80058a4:	e7fe      	b.n	80058a4 <vTaskSwitchContext+0x2c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	4919      	ldr	r1, [pc, #100]	; (8005914 <vTaskSwitchContext+0x9c>)
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	0013      	movs	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	189b      	adds	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	585b      	ldr	r3, [r3, r1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ee      	beq.n	800589c <vTaskSwitchContext+0x24>
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	0013      	movs	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a12      	ldr	r2, [pc, #72]	; (8005914 <vTaskSwitchContext+0x9c>)
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	603b      	str	r3, [r7, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d104      	bne.n	80058ee <vTaskSwitchContext+0x76>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <vTaskSwitchContext+0xa0>)
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <vTaskSwitchContext+0x98>)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	20000590 	.word	0x20000590
 800590c:	2000057c 	.word	0x2000057c
 8005910:	20000570 	.word	0x20000570
 8005914:	2000046c 	.word	0x2000046c
 8005918:	20000468 	.word	0x20000468

0800591c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005924:	f000 f84e 	bl	80059c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <prvIdleTask+0x1c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d9f9      	bls.n	8005924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005930:	f000 f99e 	bl	8005c70 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005934:	e7f6      	b.n	8005924 <prvIdleTask+0x8>
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	2000046c 	.word	0x2000046c

0800593c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e00c      	b.n	8005962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	0013      	movs	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	189b      	adds	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <prvInitialiseTaskLists+0x68>)
 8005954:	189b      	adds	r3, r3, r2
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fac6 	bl	8004ee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3301      	adds	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d9ef      	bls.n	8005948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <prvInitialiseTaskLists+0x6c>)
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff fabc 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <prvInitialiseTaskLists+0x70>)
 8005972:	0018      	movs	r0, r3
 8005974:	f7ff fab8 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <prvInitialiseTaskLists+0x74>)
 800597a:	0018      	movs	r0, r3
 800597c:	f7ff fab4 	bl	8004ee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <prvInitialiseTaskLists+0x78>)
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff fab0 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <prvInitialiseTaskLists+0x7c>)
 800598a:	0018      	movs	r0, r3
 800598c:	f7ff faac 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <prvInitialiseTaskLists+0x80>)
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <prvInitialiseTaskLists+0x6c>)
 8005994:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvInitialiseTaskLists+0x84>)
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <prvInitialiseTaskLists+0x70>)
 800599a:	601a      	str	r2, [r3, #0]
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000046c 	.word	0x2000046c
 80059a8:	200004f8 	.word	0x200004f8
 80059ac:	2000050c 	.word	0x2000050c
 80059b0:	20000528 	.word	0x20000528
 80059b4:	2000053c 	.word	0x2000053c
 80059b8:	20000554 	.word	0x20000554
 80059bc:	20000520 	.word	0x20000520
 80059c0:	20000524 	.word	0x20000524

080059c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ca:	e01a      	b.n	8005a02 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80059cc:	f000 f960 	bl	8005c90 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <prvCheckTasksWaitingTermination+0x50>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff fb04 	bl	8004fea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80059f6:	f000 f95d 	bl	8005cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 f80f 	bl	8005a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e0      	bne.n	80059cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b002      	add	sp, #8
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	2000053c 	.word	0x2000053c
 8005a18:	20000568 	.word	0x20000568
 8005a1c:	20000550 	.word	0x20000550

08005a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <prvResetNextTaskUnblockTime+0x40>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <prvResetNextTaskUnblockTime+0x14>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <prvResetNextTaskUnblockTime+0x16>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvResetNextTaskUnblockTime+0x44>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4252      	negs	r2, r2
 8005a50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a52:	e008      	b.n	8005a66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <prvResetNextTaskUnblockTime+0x40>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <prvResetNextTaskUnblockTime+0x44>)
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	20000520 	.word	0x20000520
 8005a74:	20000588 	.word	0x20000588

08005a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <xTaskGetSchedulerState+0x30>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a86:	2301      	movs	r3, #1
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e008      	b.n	8005a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <xTaskGetSchedulerState+0x34>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a94:	2302      	movs	r3, #2
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e001      	b.n	8005a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a9e:	687b      	ldr	r3, [r7, #4]
	}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b002      	add	sp, #8
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000574 	.word	0x20000574
 8005aac:	20000590 	.word	0x20000590

08005ab0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aba:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x90>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff fa8f 	bl	8004fea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	d10b      	bne.n	8005aea <prvAddCurrentTaskToDelayedList+0x3a>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	1d1a      	adds	r2, r3, #4
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ae0:	0011      	movs	r1, r2
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7ff fa29 	bl	8004f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae8:	e026      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	18d3      	adds	r3, r2, r3
 8005af0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d209      	bcs.n	8005b16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	0010      	movs	r0, r2
 8005b10:	f7ff fa35 	bl	8004f7e <vListInsert>
}
 8005b14:	e010      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	0019      	movs	r1, r3
 8005b22:	0010      	movs	r0, r2
 8005b24:	f7ff fa2b 	bl	8004f7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d202      	bcs.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	601a      	str	r2, [r3, #0]
}
 8005b38:	46c0      	nop			; (mov r8, r8)
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b004      	add	sp, #16
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000056c 	.word	0x2000056c
 8005b44:	20000468 	.word	0x20000468
 8005b48:	20000554 	.word	0x20000554
 8005b4c:	20000524 	.word	0x20000524
 8005b50:	20000520 	.word	0x20000520
 8005b54:	20000588 	.word	0x20000588

08005b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b04      	subs	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	0452      	lsls	r2, r2, #17
 8005b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b04      	subs	r3, #4
 8005b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <pxPortInitialiseStack+0x50>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b14      	subs	r3, #20
 8005b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3b20      	subs	r3, #32
 8005b9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	08005bad 	.word	0x08005bad

08005bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bb6:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <prvTaskExitError+0x28>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	d001      	beq.n	8005bc2 <prvTaskExitError+0x16>
 8005bbe:	b672      	cpsid	i
 8005bc0:	e7fe      	b.n	8005bc0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005bc2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0fc      	beq.n	8005bc6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bcc:	46c0      	nop			; (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2000000c 	.word	0x2000000c

08005bd8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005bf0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <pxCurrentTCBConst2>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	3020      	adds	r0, #32
 8005bf8:	f380 8809 	msr	PSP, r0
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f380 8814 	msr	CONTROL, r0
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005c08:	46ae      	mov	lr, r5
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	bc04      	pop	{r2}
 8005c0e:	b662      	cpsie	i
 8005c10:	4718      	bx	r3
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46c0      	nop			; (mov r8, r8)

08005c20 <pxCurrentTCBConst2>:
 8005c20:	20000468 	.word	0x20000468
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46c0      	nop			; (mov r8, r8)

08005c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c32:	21ff      	movs	r1, #255	; 0xff
 8005c34:	0409      	lsls	r1, r1, #16
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <xPortStartScheduler+0x40>)
 8005c40:	21ff      	movs	r1, #255	; 0xff
 8005c42:	0609      	lsls	r1, r1, #24
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005c48:	f000 f898 	bl	8005d7c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <xPortStartScheduler+0x44>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005c52:	f7ff ffcd 	bl	8005bf0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c56:	f7ff fe0f 	bl	8005878 <vTaskSwitchContext>
	prvTaskExitError();
 8005c5a:	f7ff ffa7 	bl	8005bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	e000ed20 	.word	0xe000ed20
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <vPortYield+0x1c>)
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	0552      	lsls	r2, r2, #21
 8005c7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c80:	f3bf 8f6f 	isb	sy
}
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005c94:	b672      	cpsid	i
    uxCriticalNesting++;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vPortEnterCritical+0x20>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <vPortEnterCritical+0x20>)
 8005c9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005ca0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ca4:	f3bf 8f6f 	isb	sy
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	2000000c 	.word	0x2000000c

08005cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <vPortExitCritical+0x10>
 8005cc0:	b672      	cpsid	i
 8005cc2:	e7fe      	b.n	8005cc2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005ccc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <vPortExitCritical+0x2c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d100      	bne.n	8005cd8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005cd6:	b662      	cpsie	i
    }
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	2000000c 	.word	0x2000000c

08005ce4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005ce4:	f3ef 8010 	mrs	r0, PRIMASK
 8005ce8:	b672      	cpsid	i
 8005cea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	0018      	movs	r0, r3

08005cf0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005cf0:	f380 8810 	msr	PRIMASK, r0
 8005cf4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
	...

08005d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d00:	f3ef 8009 	mrs	r0, PSP
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <pxCurrentTCBConst>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	3820      	subs	r0, #32
 8005d0a:	6010      	str	r0, [r2, #0]
 8005d0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d0e:	4644      	mov	r4, r8
 8005d10:	464d      	mov	r5, r9
 8005d12:	4656      	mov	r6, sl
 8005d14:	465f      	mov	r7, fp
 8005d16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d18:	b508      	push	{r3, lr}
 8005d1a:	b672      	cpsid	i
 8005d1c:	f7ff fdac 	bl	8005878 <vTaskSwitchContext>
 8005d20:	b662      	cpsie	i
 8005d22:	bc0c      	pop	{r2, r3}
 8005d24:	6811      	ldr	r1, [r2, #0]
 8005d26:	6808      	ldr	r0, [r1, #0]
 8005d28:	3010      	adds	r0, #16
 8005d2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d2c:	46a0      	mov	r8, r4
 8005d2e:	46a9      	mov	r9, r5
 8005d30:	46b2      	mov	sl, r6
 8005d32:	46bb      	mov	fp, r7
 8005d34:	f380 8809 	msr	PSP, r0
 8005d38:	3820      	subs	r0, #32
 8005d3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d3c:	4718      	bx	r3
 8005d3e:	46c0      	nop			; (mov r8, r8)

08005d40 <pxCurrentTCBConst>:
 8005d40:	20000468 	.word	0x20000468
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	46c0      	nop			; (mov r8, r8)

08005d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d4e:	f7ff ffc9 	bl	8005ce4 <ulSetInterruptMaskFromISR>
 8005d52:	0003      	movs	r3, r0
 8005d54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d56:	f7ff fcdb 	bl	8005710 <xTaskIncrementTick>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d003      	beq.n	8005d66 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <xPortSysTickHandler+0x30>)
 8005d60:	2280      	movs	r2, #128	; 0x80
 8005d62:	0552      	lsls	r2, r2, #21
 8005d64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7ff ffc1 	bl	8005cf0 <vClearInterruptMaskFromISR>
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b002      	add	sp, #8
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <prvSetupTimerInterrupt+0x34>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <prvSetupTimerInterrupt+0x38>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <prvSetupTimerInterrupt+0x3c>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	23fa      	movs	r3, #250	; 0xfa
 8005d92:	0099      	lsls	r1, r3, #2
 8005d94:	0010      	movs	r0, r2
 8005d96:	f7fa f9c9 	bl	800012c <__udivsi3>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <prvSetupTimerInterrupt+0x40>)
 8005da0:	3a01      	subs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <prvSetupTimerInterrupt+0x34>)
 8005da6:	2207      	movs	r2, #7
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000e010 	.word	0xe000e010
 8005db4:	e000e018 	.word	0xe000e018
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	e000e014 	.word	0xe000e014

08005dc0 <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8005dc0:	b5b0      	push	{r4, r5, r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	0005      	movs	r5, r0
 8005dc8:	000c      	movs	r4, r1
 8005dca:	0010      	movs	r0, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	1dbb      	adds	r3, r7, #6
 8005dd0:	1c2a      	adds	r2, r5, #0
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	1c22      	adds	r2, r4, #0
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	1cbb      	adds	r3, r7, #2
 8005ddc:	1c02      	adds	r2, r0, #0
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	003b      	movs	r3, r7
 8005de2:	1c0a      	adds	r2, r1, #0
 8005de4:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8005de6:	1cbb      	adds	r3, r7, #2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 8005df0:	1cbb      	adds	r3, r7, #2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	2201      	movs	r2, #1
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8005e04:	e06d      	b.n	8005ee2 <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8005e06:	1dbb      	adds	r3, r7, #6
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e01c      	b.n	8005e4c <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	b298      	uxth	r0, r3
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	18d3      	adds	r3, r2, r3
 8005e20:	b299      	uxth	r1, r3
 8005e22:	003b      	movs	r3, r7
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	001a      	movs	r2, r3
 8005e28:	f000 fc10 	bl	800664c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	b298      	uxth	r0, r3
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	1d3a      	adds	r2, r7, #4
 8005e36:	8812      	ldrh	r2, [r2, #0]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	b299      	uxth	r1, r3
 8005e3c:	003b      	movs	r3, r7
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	001a      	movs	r2, r3
 8005e42:	f000 fc03 	bl	800664c <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	881a      	ldrh	r2, [r3, #0]
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	dddb      	ble.n	8005e12 <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8005e5a:	1dbb      	adds	r3, r7, #6
 8005e5c:	881a      	ldrh	r2, [r3, #0]
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e01c      	b.n	8005ea0 <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	b298      	uxth	r0, r3
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	18d3      	adds	r3, r2, r3
 8005e74:	b299      	uxth	r1, r3
 8005e76:	003b      	movs	r3, r7
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	f000 fbe6 	bl	800664c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	b298      	uxth	r0, r3
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	1d3a      	adds	r2, r7, #4
 8005e8a:	8812      	ldrh	r2, [r2, #0]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	003b      	movs	r3, r7
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	001a      	movs	r2, r3
 8005e96:	f000 fbd9 	bl	800664c <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	1dbb      	adds	r3, r7, #6
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	dddb      	ble.n	8005e66 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	18d3      	adds	r3, r2, r3
 8005eba:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	005a      	lsls	r2, r3, #1
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd09      	ble.n	8005ee2 <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	18d3      	adds	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	da8d      	bge.n	8005e06 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b00a      	add	sp, #40	; 0x28
 8005ef0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ef4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8005ef4:	b5b0      	push	{r4, r5, r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	0005      	movs	r5, r0
 8005efc:	000c      	movs	r4, r1
 8005efe:	0010      	movs	r0, r2
 8005f00:	0019      	movs	r1, r3
 8005f02:	1dfb      	adds	r3, r7, #7
 8005f04:	1c2a      	adds	r2, r5, #0
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	1c22      	adds	r2, r4, #0
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	1cbb      	adds	r3, r7, #2
 8005f10:	1c02      	adds	r2, r0, #0
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	003b      	movs	r3, r7
 8005f16:	1c0a      	adds	r2, r1, #0
 8005f18:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8005f1a:	2117      	movs	r1, #23
 8005f1c:	187b      	adds	r3, r7, r1
 8005f1e:	1dfa      	adds	r2, r7, #7
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b1f      	cmp	r3, #31
 8005f2a:	d803      	bhi.n	8005f34 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8005f2c:	1dfb      	adds	r3, r7, #7
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e005      	b.n	8005f40 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8005f34:	2217      	movs	r2, #23
 8005f36:	18bb      	adds	r3, r7, r2
 8005f38:	18ba      	adds	r2, r7, r2
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	3a20      	subs	r2, #32
 8005f3e:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005f40:	2314      	movs	r3, #20
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	e016      	b.n	8005f78 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8005f4a:	2317      	movs	r3, #23
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	2514      	movs	r5, #20
 8005f52:	197b      	adds	r3, r7, r5
 8005f54:	7818      	ldrb	r0, [r3, #0]
 8005f56:	197b      	adds	r3, r7, r5
 8005f58:	7819      	ldrb	r1, [r3, #0]
 8005f5a:	4c69      	ldr	r4, [pc, #420]	; (8006100 <ILI9341_Draw_Char+0x20c>)
 8005f5c:	0013      	movs	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	18e3      	adds	r3, r4, r3
 8005f66:	5c1a      	ldrb	r2, [r3, r0]
 8005f68:	230c      	movs	r3, #12
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005f6e:	197b      	adds	r3, r7, r5
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	197b      	adds	r3, r7, r5
 8005f74:	3201      	adds	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	2314      	movs	r3, #20
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d9e3      	bls.n	8005f4a <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8005f82:	2315      	movs	r3, #21
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e0ae      	b.n	80060ea <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8005f8c:	2316      	movs	r3, #22
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e09d      	b.n	80060d2 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8005f96:	2315      	movs	r3, #21
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	220c      	movs	r2, #12
 8005f9e:	18ba      	adds	r2, r7, r2
 8005fa0:	5cd3      	ldrb	r3, [r2, r3]
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	2316      	movs	r3, #22
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	411a      	asrs	r2, r3
 8005fac:	0013      	movs	r3, r2
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d043      	beq.n	800603c <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8005fb4:	2328      	movs	r3, #40	; 0x28
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d115      	bne.n	8005fea <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8005fbe:	2315      	movs	r3, #21
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	18d3      	adds	r3, r2, r3
 8005fcc:	b298      	uxth	r0, r3
 8005fce:	2316      	movs	r3, #22
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	1cbb      	adds	r3, r7, #2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	18d3      	adds	r3, r2, r3
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	003b      	movs	r3, r7
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	001a      	movs	r2, r3
 8005fe4:	f000 fb32 	bl	800664c <ILI9341_Draw_Pixel>
 8005fe8:	e06d      	b.n	80060c6 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8005fea:	2315      	movs	r3, #21
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2128      	movs	r1, #40	; 0x28
 8005ff4:	187a      	adds	r2, r7, r1
 8005ff6:	8812      	ldrh	r2, [r2, #0]
 8005ff8:	4353      	muls	r3, r2
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	1d3b      	adds	r3, r7, #4
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	b298      	uxth	r0, r3
 8006004:	2316      	movs	r3, #22
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	000c      	movs	r4, r1
 800600e:	187a      	adds	r2, r7, r1
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	4353      	muls	r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	1cbb      	adds	r3, r7, #2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	18d3      	adds	r3, r2, r3
 800601c:	b299      	uxth	r1, r3
 800601e:	0022      	movs	r2, r4
 8006020:	193b      	adds	r3, r7, r4
 8006022:	881c      	ldrh	r4, [r3, #0]
 8006024:	0013      	movs	r3, r2
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	2301      	movs	r3, #1
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	003b      	movs	r3, r7
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	0023      	movs	r3, r4
 8006036:	f000 fc7d 	bl	8006934 <ILI9341_Draw_Rectangle>
 800603a:	e044      	b.n	80060c6 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 800603c:	2328      	movs	r3, #40	; 0x28
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d116      	bne.n	8006074 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8006046:	2315      	movs	r3, #21
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b29a      	uxth	r2, r3
 800604e:	1d3b      	adds	r3, r7, #4
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	b298      	uxth	r0, r3
 8006056:	2316      	movs	r3, #22
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b29a      	uxth	r2, r3
 800605e:	1cbb      	adds	r3, r7, #2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	18d3      	adds	r3, r2, r3
 8006064:	b299      	uxth	r1, r3
 8006066:	232c      	movs	r3, #44	; 0x2c
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	001a      	movs	r2, r3
 800606e:	f000 faed 	bl	800664c <ILI9341_Draw_Pixel>
 8006072:	e028      	b.n	80060c6 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8006074:	2315      	movs	r3, #21
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	2128      	movs	r1, #40	; 0x28
 800607e:	187a      	adds	r2, r7, r1
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	4353      	muls	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	18d3      	adds	r3, r2, r3
 800608c:	b298      	uxth	r0, r3
 800608e:	2316      	movs	r3, #22
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	000c      	movs	r4, r1
 8006098:	187a      	adds	r2, r7, r1
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	4353      	muls	r3, r2
 800609e:	b29a      	uxth	r2, r3
 80060a0:	1cbb      	adds	r3, r7, #2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	18d3      	adds	r3, r2, r3
 80060a6:	b299      	uxth	r1, r3
 80060a8:	0022      	movs	r2, r4
 80060aa:	193b      	adds	r3, r7, r4
 80060ac:	881c      	ldrh	r4, [r3, #0]
 80060ae:	0013      	movs	r3, r2
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	2301      	movs	r3, #1
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	232c      	movs	r3, #44	; 0x2c
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	0023      	movs	r3, r4
 80060c2:	f000 fc37 	bl	8006934 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80060c6:	2116      	movs	r1, #22
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	187b      	adds	r3, r7, r1
 80060ce:	3201      	adds	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	2316      	movs	r3, #22
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b07      	cmp	r3, #7
 80060da:	d800      	bhi.n	80060de <ILI9341_Draw_Char+0x1ea>
 80060dc:	e75b      	b.n	8005f96 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 80060de:	2115      	movs	r1, #21
 80060e0:	187b      	adds	r3, r7, r1
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	187b      	adds	r3, r7, r1
 80060e6:	3201      	adds	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	2315      	movs	r3, #21
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b05      	cmp	r3, #5
 80060f2:	d800      	bhi.n	80060f6 <ILI9341_Draw_Char+0x202>
 80060f4:	e74a      	b.n	8005f8c <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b006      	add	sp, #24
 80060fc:	bdb0      	pop	{r4, r5, r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	0800b11c 	.word	0x0800b11c

08006104 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8006104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006106:	b087      	sub	sp, #28
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	000c      	movs	r4, r1
 800610e:	0010      	movs	r0, r2
 8006110:	0019      	movs	r1, r3
 8006112:	250a      	movs	r5, #10
 8006114:	197b      	adds	r3, r7, r5
 8006116:	1c22      	adds	r2, r4, #0
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	2608      	movs	r6, #8
 800611c:	19bb      	adds	r3, r7, r6
 800611e:	1c02      	adds	r2, r0, #0
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	1dbb      	adds	r3, r7, #6
 8006124:	1c0a      	adds	r2, r1, #0
 8006126:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8006128:	197b      	adds	r3, r7, r5
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	b298      	uxth	r0, r3
 8006130:	2320      	movs	r3, #32
 8006132:	2208      	movs	r2, #8
 8006134:	4694      	mov	ip, r2
 8006136:	44bc      	add	ip, r7
 8006138:	4463      	add	r3, ip
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	b29a      	uxth	r2, r3
 8006140:	2124      	movs	r1, #36	; 0x24
 8006142:	2308      	movs	r3, #8
 8006144:	18fc      	adds	r4, r7, r3
 8006146:	1863      	adds	r3, r4, r1
 8006148:	881c      	ldrh	r4, [r3, #0]
 800614a:	19bb      	adds	r3, r7, r6
 800614c:	8819      	ldrh	r1, [r3, #0]
 800614e:	0023      	movs	r3, r4
 8006150:	f000 f974 	bl	800643c <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8006154:	197b      	adds	r3, r7, r5
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	3b02      	subs	r3, #2
 800615a:	b298      	uxth	r0, r3
 800615c:	2320      	movs	r3, #32
 800615e:	2208      	movs	r2, #8
 8006160:	4694      	mov	ip, r2
 8006162:	44bc      	add	ip, r7
 8006164:	4463      	add	r3, ip
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	b29a      	uxth	r2, r3
 800616c:	2124      	movs	r1, #36	; 0x24
 800616e:	2308      	movs	r3, #8
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	185b      	adds	r3, r3, r1
 8006174:	881c      	ldrh	r4, [r3, #0]
 8006176:	19bb      	adds	r3, r7, r6
 8006178:	8819      	ldrh	r1, [r3, #0]
 800617a:	0023      	movs	r3, r4
 800617c:	f000 f95e 	bl	800643c <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8006180:	e029      	b.n	80061d6 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	60fa      	str	r2, [r7, #12]
 8006188:	7818      	ldrb	r0, [r3, #0]
 800618a:	1dbb      	adds	r3, r7, #6
 800618c:	881c      	ldrh	r4, [r3, #0]
 800618e:	2308      	movs	r3, #8
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	250a      	movs	r5, #10
 8006196:	197b      	adds	r3, r7, r5
 8006198:	8819      	ldrh	r1, [r3, #0]
 800619a:	2324      	movs	r3, #36	; 0x24
 800619c:	2608      	movs	r6, #8
 800619e:	46b4      	mov	ip, r6
 80061a0:	44bc      	add	ip, r7
 80061a2:	4463      	add	r3, ip
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	2620      	movs	r6, #32
 80061aa:	2308      	movs	r3, #8
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	199b      	adds	r3, r3, r6
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	0023      	movs	r3, r4
 80061b6:	f7ff fe9d 	bl	8005ef4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80061ba:	2308      	movs	r3, #8
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	199b      	adds	r3, r3, r6
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	1c1a      	adds	r2, r3, #0
 80061c4:	1892      	adds	r2, r2, r2
 80061c6:	18d3      	adds	r3, r2, r3
 80061c8:	18db      	adds	r3, r3, r3
 80061ca:	b299      	uxth	r1, r3
 80061cc:	197b      	adds	r3, r7, r5
 80061ce:	197a      	adds	r2, r7, r5
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	188a      	adds	r2, r1, r2
 80061d4:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1d1      	bne.n	8006182 <ILI9341_Draw_Text+0x7e>
    }


}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b005      	add	sp, #20
 80061e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061e6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80061ea:	f000 fcc1 	bl	8006b70 <_LCD_Enable>
	ILI9341_SPI_Init();
 80061ee:	f000 f909 	bl	8006404 <ILI9341_SPI_Init>
	_LCD_Reset();
 80061f2:	f000 fccb 	bl	8006b8c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80061f6:	2001      	movs	r0, #1
 80061f8:	f000 fdc8 	bl	8006d8c <_LCD_SendCommand>
	HAL_Delay(2000);
 80061fc:	23fa      	movs	r3, #250	; 0xfa
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	0018      	movs	r0, r3
 8006202:	f7fc ff1b 	bl	800303c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8006206:	20cb      	movs	r0, #203	; 0xcb
 8006208:	f000 fdc0 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800620c:	2039      	movs	r0, #57	; 0x39
 800620e:	f000 fdf3 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8006212:	202c      	movs	r0, #44	; 0x2c
 8006214:	f000 fdf0 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006218:	2000      	movs	r0, #0
 800621a:	f000 fded 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x34);
 800621e:	2034      	movs	r0, #52	; 0x34
 8006220:	f000 fdea 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x02);
 8006224:	2002      	movs	r0, #2
 8006226:	f000 fde7 	bl	8006df8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800622a:	20cf      	movs	r0, #207	; 0xcf
 800622c:	f000 fdae 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006230:	2000      	movs	r0, #0
 8006232:	f000 fde1 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8006236:	20c1      	movs	r0, #193	; 0xc1
 8006238:	f000 fdde 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x30);
 800623c:	2030      	movs	r0, #48	; 0x30
 800623e:	f000 fddb 	bl	8006df8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8006242:	20e8      	movs	r0, #232	; 0xe8
 8006244:	f000 fda2 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8006248:	2085      	movs	r0, #133	; 0x85
 800624a:	f000 fdd5 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800624e:	2000      	movs	r0, #0
 8006250:	f000 fdd2 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x78);
 8006254:	2078      	movs	r0, #120	; 0x78
 8006256:	f000 fdcf 	bl	8006df8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800625a:	20ea      	movs	r0, #234	; 0xea
 800625c:	f000 fd96 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006260:	2000      	movs	r0, #0
 8006262:	f000 fdc9 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006266:	2000      	movs	r0, #0
 8006268:	f000 fdc6 	bl	8006df8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800626c:	20ed      	movs	r0, #237	; 0xed
 800626e:	f000 fd8d 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8006272:	2064      	movs	r0, #100	; 0x64
 8006274:	f000 fdc0 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x03);
 8006278:	2003      	movs	r0, #3
 800627a:	f000 fdbd 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x12);
 800627e:	2012      	movs	r0, #18
 8006280:	f000 fdba 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x81);
 8006284:	2081      	movs	r0, #129	; 0x81
 8006286:	f000 fdb7 	bl	8006df8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800628a:	20f7      	movs	r0, #247	; 0xf7
 800628c:	f000 fd7e 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8006290:	2020      	movs	r0, #32
 8006292:	f000 fdb1 	bl	8006df8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8006296:	20c0      	movs	r0, #192	; 0xc0
 8006298:	f000 fd78 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800629c:	2023      	movs	r0, #35	; 0x23
 800629e:	f000 fdab 	bl	8006df8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 80062a2:	20c1      	movs	r0, #193	; 0xc1
 80062a4:	f000 fd72 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 80062a8:	2010      	movs	r0, #16
 80062aa:	f000 fda5 	bl	8006df8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 80062ae:	20c5      	movs	r0, #197	; 0xc5
 80062b0:	f000 fd6c 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80062b4:	203e      	movs	r0, #62	; 0x3e
 80062b6:	f000 fd9f 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x28);
 80062ba:	2028      	movs	r0, #40	; 0x28
 80062bc:	f000 fd9c 	bl	8006df8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 80062c0:	20c7      	movs	r0, #199	; 0xc7
 80062c2:	f000 fd63 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80062c6:	2086      	movs	r0, #134	; 0x86
 80062c8:	f000 fd96 	bl	8006df8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80062cc:	2036      	movs	r0, #54	; 0x36
 80062ce:	f000 fd5d 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80062d2:	2048      	movs	r0, #72	; 0x48
 80062d4:	f000 fd90 	bl	8006df8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80062d8:	203a      	movs	r0, #58	; 0x3a
 80062da:	f000 fd57 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80062de:	2055      	movs	r0, #85	; 0x55
 80062e0:	f000 fd8a 	bl	8006df8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80062e4:	20b1      	movs	r0, #177	; 0xb1
 80062e6:	f000 fd51 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80062ea:	2000      	movs	r0, #0
 80062ec:	f000 fd84 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x18);
 80062f0:	2018      	movs	r0, #24
 80062f2:	f000 fd81 	bl	8006df8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 80062f6:	20b6      	movs	r0, #182	; 0xb6
 80062f8:	f000 fd48 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 80062fc:	2008      	movs	r0, #8
 80062fe:	f000 fd7b 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x82);
 8006302:	2082      	movs	r0, #130	; 0x82
 8006304:	f000 fd78 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x27);
 8006308:	2027      	movs	r0, #39	; 0x27
 800630a:	f000 fd75 	bl	8006df8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800630e:	20f2      	movs	r0, #242	; 0xf2
 8006310:	f000 fd3c 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006314:	2000      	movs	r0, #0
 8006316:	f000 fd6f 	bl	8006df8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800631a:	2026      	movs	r0, #38	; 0x26
 800631c:	f000 fd36 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8006320:	2001      	movs	r0, #1
 8006322:	f000 fd69 	bl	8006df8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8006326:	20e0      	movs	r0, #224	; 0xe0
 8006328:	f000 fd30 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800632c:	200f      	movs	r0, #15
 800632e:	f000 fd63 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x31);
 8006332:	2031      	movs	r0, #49	; 0x31
 8006334:	f000 fd60 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8006338:	202b      	movs	r0, #43	; 0x2b
 800633a:	f000 fd5d 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800633e:	200c      	movs	r0, #12
 8006340:	f000 fd5a 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006344:	200e      	movs	r0, #14
 8006346:	f000 fd57 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800634a:	2008      	movs	r0, #8
 800634c:	f000 fd54 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8006350:	204e      	movs	r0, #78	; 0x4e
 8006352:	f000 fd51 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8006356:	20f1      	movs	r0, #241	; 0xf1
 8006358:	f000 fd4e 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x37);
 800635c:	2037      	movs	r0, #55	; 0x37
 800635e:	f000 fd4b 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x07);
 8006362:	2007      	movs	r0, #7
 8006364:	f000 fd48 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x10);
 8006368:	2010      	movs	r0, #16
 800636a:	f000 fd45 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800636e:	2003      	movs	r0, #3
 8006370:	f000 fd42 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006374:	200e      	movs	r0, #14
 8006376:	f000 fd3f 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x09);
 800637a:	2009      	movs	r0, #9
 800637c:	f000 fd3c 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006380:	2000      	movs	r0, #0
 8006382:	f000 fd39 	bl	8006df8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8006386:	20e1      	movs	r0, #225	; 0xe1
 8006388:	f000 fd00 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800638c:	2000      	movs	r0, #0
 800638e:	f000 fd33 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006392:	200e      	movs	r0, #14
 8006394:	f000 fd30 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x14);
 8006398:	2014      	movs	r0, #20
 800639a:	f000 fd2d 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800639e:	2003      	movs	r0, #3
 80063a0:	f000 fd2a 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x11);
 80063a4:	2011      	movs	r0, #17
 80063a6:	f000 fd27 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x07);
 80063aa:	2007      	movs	r0, #7
 80063ac:	f000 fd24 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x31);
 80063b0:	2031      	movs	r0, #49	; 0x31
 80063b2:	f000 fd21 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80063b6:	20c1      	movs	r0, #193	; 0xc1
 80063b8:	f000 fd1e 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x48);
 80063bc:	2048      	movs	r0, #72	; 0x48
 80063be:	f000 fd1b 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x08);
 80063c2:	2008      	movs	r0, #8
 80063c4:	f000 fd18 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80063c8:	200f      	movs	r0, #15
 80063ca:	f000 fd15 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80063ce:	200c      	movs	r0, #12
 80063d0:	f000 fd12 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x31);
 80063d4:	2031      	movs	r0, #49	; 0x31
 80063d6:	f000 fd0f 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x36);
 80063da:	2036      	movs	r0, #54	; 0x36
 80063dc:	f000 fd0c 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80063e0:	200f      	movs	r0, #15
 80063e2:	f000 fd09 	bl	8006df8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80063e6:	2011      	movs	r0, #17
 80063e8:	f000 fcd0 	bl	8006d8c <_LCD_SendCommand>
	HAL_Delay(240);
 80063ec:	20f0      	movs	r0, #240	; 0xf0
 80063ee:	f7fc fe25 	bl	800303c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 80063f2:	2029      	movs	r0, #41	; 0x29
 80063f4:	f000 fcca 	bl	8006d8c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80063f8:	2000      	movs	r0, #0
 80063fa:	f000 fb69 	bl	8006ad0 <ILI9341_Set_Rotation>
}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <ILI9341_SPI_Init+0x30>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2240      	movs	r2, #64	; 0x40
 800640e:	4013      	ands	r3, r2
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d005      	beq.n	8006420 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <ILI9341_SPI_Init+0x30>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <ILI9341_SPI_Init+0x30>)
 800641a:	2140      	movs	r1, #64	; 0x40
 800641c:	430a      	orrs	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <ILI9341_SPI_Init+0x34>)
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <ILI9341_SPI_Init+0x34>)
 8006426:	2110      	movs	r1, #16
 8006428:	438a      	bics	r2, r1
 800642a:	615a      	str	r2, [r3, #20]
}
 800642c:	46c0      	nop			; (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	40013000 	.word	0x40013000
 8006438:	48000800 	.word	0x48000800

0800643c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af02      	add	r7, sp, #8
 8006442:	0005      	movs	r5, r0
 8006444:	000c      	movs	r4, r1
 8006446:	0010      	movs	r0, r2
 8006448:	0019      	movs	r1, r3
 800644a:	1dbb      	adds	r3, r7, #6
 800644c:	1c2a      	adds	r2, r5, #0
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	1c22      	adds	r2, r4, #0
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	1cbb      	adds	r3, r7, #2
 8006458:	1c02      	adds	r2, r0, #0
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	003b      	movs	r3, r7
 800645e:	1c0a      	adds	r2, r1, #0
 8006460:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <ILI9341_Draw_Vertical_Line+0x104>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	1dba      	adds	r2, r7, #6
 800646a:	8812      	ldrh	r2, [r2, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d300      	bcc.n	8006472 <ILI9341_Draw_Vertical_Line+0x36>
 8006470:	e062      	b.n	8006538 <ILI9341_Draw_Vertical_Line+0xfc>
 8006472:	4b34      	ldr	r3, [pc, #208]	; (8006544 <ILI9341_Draw_Vertical_Line+0x108>)
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	1d3a      	adds	r2, r7, #4
 800647a:	8812      	ldrh	r2, [r2, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d25b      	bcs.n	8006538 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	1cbb      	adds	r3, r7, #2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	18d3      	adds	r3, r2, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <ILI9341_Draw_Vertical_Line+0x108>)
 800648e:	8812      	ldrh	r2, [r2, #0]
 8006490:	b292      	uxth	r2, r2
 8006492:	4293      	cmp	r3, r2
 8006494:	db07      	blt.n	80064a6 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8006496:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <ILI9341_Draw_Vertical_Line+0x108>)
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b299      	uxth	r1, r3
 800649c:	1cbb      	adds	r3, r7, #2
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	8812      	ldrh	r2, [r2, #0]
 80064a2:	1a8a      	subs	r2, r1, r2
 80064a4:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 80064a6:	1d3a      	adds	r2, r7, #4
 80064a8:	1cbb      	adds	r3, r7, #2
 80064aa:	8812      	ldrh	r2, [r2, #0]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	18d3      	adds	r3, r2, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29c      	uxth	r4, r3
 80064b6:	1dbb      	adds	r3, r7, #6
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	8819      	ldrh	r1, [r3, #0]
 80064be:	1dbb      	adds	r3, r7, #6
 80064c0:	8818      	ldrh	r0, [r3, #0]
 80064c2:	0023      	movs	r3, r4
 80064c4:	f000 f840 	bl	8006548 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 80064c8:	230f      	movs	r3, #15
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 80064d0:	1cbb      	adds	r3, r7, #2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	4013      	ands	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <ILI9341_Draw_Vertical_Line+0xbc>
 80064da:	1cbb      	adds	r3, r7, #2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d90a      	bls.n	80064f8 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 80064e2:	230f      	movs	r3, #15
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 80064ea:	1cbb      	adds	r3, r7, #2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1cba      	adds	r2, r7, #2
 80064f4:	18db      	adds	r3, r3, r3
 80064f6:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 80064f8:	230f      	movs	r3, #15
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00c      	beq.n	800651c <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8006502:	1d3a      	adds	r2, r7, #4
 8006504:	1cbb      	adds	r3, r7, #2
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	18d3      	adds	r3, r2, r3
 800650c:	b299      	uxth	r1, r3
 800650e:	003b      	movs	r3, r7
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	1dbb      	adds	r3, r7, #6
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	0018      	movs	r0, r3
 8006518:	f000 f898 	bl	800664c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800651c:	1cbb      	adds	r3, r7, #2
 800651e:	881c      	ldrh	r4, [r3, #0]
 8006520:	003b      	movs	r3, r7
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	8819      	ldrh	r1, [r3, #0]
 8006528:	1dbb      	adds	r3, r7, #6
 800652a:	8818      	ldrh	r0, [r3, #0]
 800652c:	2303      	movs	r3, #3
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	0023      	movs	r3, r4
 8006532:	f000 fb4b 	bl	8006bcc <_LCD_Write_Frame>
 8006536:	e000      	b.n	800653a <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8006538:	46c0      	nop			; (mov r8, r8)
}
 800653a:	46bd      	mov	sp, r7
 800653c:	b004      	add	sp, #16
 800653e:	bdb0      	pop	{r4, r5, r7, pc}
 8006540:	20000012 	.word	0x20000012
 8006544:	20000010 	.word	0x20000010

08006548 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8006548:	b5b0      	push	{r4, r5, r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	0005      	movs	r5, r0
 8006550:	000c      	movs	r4, r1
 8006552:	0010      	movs	r0, r2
 8006554:	0019      	movs	r1, r3
 8006556:	1dbb      	adds	r3, r7, #6
 8006558:	1c2a      	adds	r2, r5, #0
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	1c22      	adds	r2, r4, #0
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	1cbb      	adds	r3, r7, #2
 8006564:	1c02      	adds	r2, r0, #0
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	003b      	movs	r3, r7
 800656a:	1c0a      	adds	r2, r1, #0
 800656c:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800656e:	202a      	movs	r0, #42	; 0x2a
 8006570:	f000 fc0c 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8006574:	1dbb      	adds	r3, r7, #6
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	b29b      	uxth	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	0018      	movs	r0, r3
 8006580:	f000 fc3a 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(sc);
 8006584:	1dbb      	adds	r3, r7, #6
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	0018      	movs	r0, r3
 800658c:	f000 fc34 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8006590:	1cbb      	adds	r3, r7, #2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	0a1b      	lsrs	r3, r3, #8
 8006596:	b29b      	uxth	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	0018      	movs	r0, r3
 800659c:	f000 fc2c 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(ec);
 80065a0:	1cbb      	adds	r3, r7, #2
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	0018      	movs	r0, r3
 80065a8:	f000 fc26 	bl	8006df8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 80065ac:	202b      	movs	r0, #43	; 0x2b
 80065ae:	f000 fbed 	bl	8006d8c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fc1b 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(sp);
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 fc15 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 80065ce:	003b      	movs	r3, r7
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	0018      	movs	r0, r3
 80065da:	f000 fc0d 	bl	8006df8 <_LCD_SendData>
	_LCD_SendData(ep);
 80065de:	003b      	movs	r3, r7
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 fc07 	bl	8006df8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 80065ea:	202c      	movs	r0, #44	; 0x2c
 80065ec:	f000 fbce 	bl	8006d8c <_LCD_SendCommand>
}
 80065f0:	46c0      	nop			; (mov r8, r8)
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b002      	add	sp, #8
 80065f6:	bdb0      	pop	{r4, r5, r7, pc}

080065f8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	0002      	movs	r2, r0
 8006600:	1dbb      	adds	r3, r7, #6
 8006602:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <ILI9341_Fill_Screen+0x4c>)
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29a      	uxth	r2, r3
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <ILI9341_Fill_Screen+0x50>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	2100      	movs	r1, #0
 8006612:	2000      	movs	r0, #0
 8006614:	f7ff ff98 	bl	8006548 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <ILI9341_Fill_Screen+0x4c>)
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	001a      	movs	r2, r3
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <ILI9341_Fill_Screen+0x50>)
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	4353      	muls	r3, r2
 8006628:	0019      	movs	r1, r3
 800662a:	1dbb      	adds	r3, r7, #6
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	2304      	movs	r3, #4
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	000b      	movs	r3, r1
 8006634:	2100      	movs	r1, #0
 8006636:	2000      	movs	r0, #0
 8006638:	f000 fac8 	bl	8006bcc <_LCD_Write_Frame>
}
 800663c:	46c0      	nop			; (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000012 	.word	0x20000012
 8006648:	20000010 	.word	0x20000010

0800664c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b08f      	sub	sp, #60	; 0x3c
 8006650:	af00      	add	r7, sp, #0
 8006652:	0004      	movs	r4, r0
 8006654:	0008      	movs	r0, r1
 8006656:	0011      	movs	r1, r2
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	1c22      	adds	r2, r4, #0
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	1c02      	adds	r2, r0, #0
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	1cbb      	adds	r3, r7, #2
 8006666:	1c0a      	adds	r2, r1, #0
 8006668:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800666a:	4bae      	ldr	r3, [pc, #696]	; (8006924 <ILI9341_Draw_Pixel+0x2d8>)
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	1dba      	adds	r2, r7, #6
 8006672:	8812      	ldrh	r2, [r2, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d300      	bcc.n	800667a <ILI9341_Draw_Pixel+0x2e>
 8006678:	e150      	b.n	800691c <ILI9341_Draw_Pixel+0x2d0>
 800667a:	4bab      	ldr	r3, [pc, #684]	; (8006928 <ILI9341_Draw_Pixel+0x2dc>)
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	1d3a      	adds	r2, r7, #4
 8006682:	8812      	ldrh	r2, [r2, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d300      	bcc.n	800668a <ILI9341_Draw_Pixel+0x3e>
 8006688:	e148      	b.n	800691c <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800668a:	4ba8      	ldr	r3, [pc, #672]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	4ba7      	ldr	r3, [pc, #668]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 8006690:	2101      	movs	r1, #1
 8006692:	438a      	bics	r2, r1
 8006694:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006696:	4ba6      	ldr	r3, [pc, #664]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	4ba5      	ldr	r3, [pc, #660]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800669c:	2110      	movs	r1, #16
 800669e:	438a      	bics	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 80066a2:	220a      	movs	r2, #10
 80066a4:	2100      	movs	r1, #0
 80066a6:	202a      	movs	r0, #42	; 0x2a
 80066a8:	f000 fbdc 	bl	8006e64 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80066ac:	2300      	movs	r3, #0
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	e008      	b.n	80066c4 <ILI9341_Draw_Pixel+0x78>
 80066b2:	4b9f      	ldr	r3, [pc, #636]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	4b9e      	ldr	r3, [pc, #632]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066b8:	2110      	movs	r1, #16
 80066ba:	438a      	bics	r2, r1
 80066bc:	615a      	str	r2, [r3, #20]
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	3301      	adds	r3, #1
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	ddf3      	ble.n	80066b2 <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80066ca:	4b98      	ldr	r3, [pc, #608]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	4b97      	ldr	r3, [pc, #604]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 80066d0:	2101      	movs	r1, #1
 80066d2:	430a      	orrs	r2, r1
 80066d4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80066d6:	4b96      	ldr	r3, [pc, #600]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	4b95      	ldr	r3, [pc, #596]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066dc:	2110      	movs	r1, #16
 80066de:	430a      	orrs	r2, r1
 80066e0:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80066e2:	4b93      	ldr	r3, [pc, #588]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	4b92      	ldr	r3, [pc, #584]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80066e8:	2110      	movs	r1, #16
 80066ea:	438a      	bics	r2, r1
 80066ec:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	2114      	movs	r1, #20
 80066fa:	187b      	adds	r3, r7, r1
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	187b      	adds	r3, r7, r1
 8006706:	705a      	strb	r2, [r3, #1]
 8006708:	1dbb      	adds	r3, r7, #6
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	121b      	asrs	r3, r3, #8
 8006710:	b2da      	uxtb	r2, r3
 8006712:	187b      	adds	r3, r7, r1
 8006714:	709a      	strb	r2, [r3, #2]
 8006716:	1dbb      	adds	r3, r7, #6
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	3301      	adds	r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	187b      	adds	r3, r7, r1
 8006722:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8006724:	1878      	adds	r0, r7, r1
 8006726:	230a      	movs	r3, #10
 8006728:	2200      	movs	r2, #0
 800672a:	2104      	movs	r1, #4
 800672c:	f000 fbd4 	bl	8006ed8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006730:	2300      	movs	r3, #0
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
 8006734:	e008      	b.n	8006748 <ILI9341_Draw_Pixel+0xfc>
 8006736:	4b7e      	ldr	r3, [pc, #504]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	4b7d      	ldr	r3, [pc, #500]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800673c:	2110      	movs	r1, #16
 800673e:	438a      	bics	r2, r1
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	3301      	adds	r3, #1
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	2b02      	cmp	r3, #2
 800674c:	ddf3      	ble.n	8006736 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800674e:	4b78      	ldr	r3, [pc, #480]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	4b77      	ldr	r3, [pc, #476]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006754:	2110      	movs	r1, #16
 8006756:	430a      	orrs	r2, r1
 8006758:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800675a:	4b74      	ldr	r3, [pc, #464]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	4b73      	ldr	r3, [pc, #460]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 8006760:	2101      	movs	r1, #1
 8006762:	438a      	bics	r2, r1
 8006764:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006766:	4b72      	ldr	r3, [pc, #456]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	4b71      	ldr	r3, [pc, #452]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800676c:	2110      	movs	r1, #16
 800676e:	438a      	bics	r2, r1
 8006770:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8006772:	220a      	movs	r2, #10
 8006774:	2100      	movs	r1, #0
 8006776:	202b      	movs	r0, #43	; 0x2b
 8006778:	f000 fb74 	bl	8006e64 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006780:	e008      	b.n	8006794 <ILI9341_Draw_Pixel+0x148>
 8006782:	4b6b      	ldr	r3, [pc, #428]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	4b6a      	ldr	r3, [pc, #424]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006788:	2110      	movs	r1, #16
 800678a:	438a      	bics	r2, r1
 800678c:	615a      	str	r2, [r3, #20]
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	3301      	adds	r3, #1
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b02      	cmp	r3, #2
 8006798:	ddf3      	ble.n	8006782 <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800679a:	4b64      	ldr	r3, [pc, #400]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	4b63      	ldr	r3, [pc, #396]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 80067a0:	2101      	movs	r1, #1
 80067a2:	430a      	orrs	r2, r1
 80067a4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80067a6:	4b62      	ldr	r3, [pc, #392]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	4b61      	ldr	r3, [pc, #388]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80067ac:	2110      	movs	r1, #16
 80067ae:	430a      	orrs	r2, r1
 80067b0:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80067b2:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	4b5e      	ldr	r3, [pc, #376]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80067b8:	2110      	movs	r1, #16
 80067ba:	438a      	bics	r2, r1
 80067bc:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	2110      	movs	r1, #16
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	187b      	adds	r3, r7, r1
 80067d6:	705a      	strb	r2, [r3, #1]
 80067d8:	1d3b      	adds	r3, r7, #4
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	121b      	asrs	r3, r3, #8
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	187b      	adds	r3, r7, r1
 80067e4:	709a      	strb	r2, [r3, #2]
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	187b      	adds	r3, r7, r1
 80067f2:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 80067f4:	1878      	adds	r0, r7, r1
 80067f6:	230a      	movs	r3, #10
 80067f8:	2200      	movs	r2, #0
 80067fa:	2104      	movs	r1, #4
 80067fc:	f000 fb6c 	bl	8006ed8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006800:	2300      	movs	r3, #0
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	e008      	b.n	8006818 <ILI9341_Draw_Pixel+0x1cc>
 8006806:	4b4a      	ldr	r3, [pc, #296]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	4b49      	ldr	r3, [pc, #292]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800680c:	2110      	movs	r1, #16
 800680e:	438a      	bics	r2, r1
 8006810:	615a      	str	r2, [r3, #20]
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	3301      	adds	r3, #1
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	2b02      	cmp	r3, #2
 800681c:	ddf3      	ble.n	8006806 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800681e:	4b44      	ldr	r3, [pc, #272]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	4b43      	ldr	r3, [pc, #268]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006824:	2110      	movs	r1, #16
 8006826:	430a      	orrs	r2, r1
 8006828:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800682a:	4b40      	ldr	r3, [pc, #256]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 8006830:	2101      	movs	r1, #1
 8006832:	438a      	bics	r2, r1
 8006834:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006836:	4b3e      	ldr	r3, [pc, #248]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	4b3d      	ldr	r3, [pc, #244]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800683c:	2110      	movs	r1, #16
 800683e:	438a      	bics	r2, r1
 8006840:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8006842:	220a      	movs	r2, #10
 8006844:	2100      	movs	r1, #0
 8006846:	202c      	movs	r0, #44	; 0x2c
 8006848:	f000 fb0c 	bl	8006e64 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800684c:	2300      	movs	r3, #0
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
 8006850:	e008      	b.n	8006864 <ILI9341_Draw_Pixel+0x218>
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006858:	2110      	movs	r1, #16
 800685a:	438a      	bics	r2, r1
 800685c:	615a      	str	r2, [r3, #20]
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	3301      	adds	r3, #1
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	2b02      	cmp	r3, #2
 8006868:	ddf3      	ble.n	8006852 <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800686a:	4b30      	ldr	r3, [pc, #192]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <ILI9341_Draw_Pixel+0x2e0>)
 8006870:	2101      	movs	r1, #1
 8006872:	430a      	orrs	r2, r1
 8006874:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8006876:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006878:	695a      	ldr	r2, [r3, #20]
 800687a:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 800687c:	2110      	movs	r1, #16
 800687e:	430a      	orrs	r2, r1
 8006880:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006888:	2110      	movs	r1, #16
 800688a:	438a      	bics	r2, r1
 800688c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800688e:	1cbb      	adds	r3, r7, #2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	b2da      	uxtb	r2, r3
 8006898:	210c      	movs	r1, #12
 800689a:	187b      	adds	r3, r7, r1
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	1cbb      	adds	r3, r7, #2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 80068a8:	1878      	adds	r0, r7, r1
 80068aa:	2301      	movs	r3, #1
 80068ac:	2200      	movs	r2, #0
 80068ae:	2102      	movs	r1, #2
 80068b0:	f000 fb12 	bl	8006ed8 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80068b4:	2300      	movs	r3, #0
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	e008      	b.n	80068cc <ILI9341_Draw_Pixel+0x280>
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	4b1c      	ldr	r3, [pc, #112]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068c0:	2110      	movs	r1, #16
 80068c2:	438a      	bics	r2, r1
 80068c4:	615a      	str	r2, [r3, #20]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	ddf3      	ble.n	80068ba <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	e008      	b.n	80068ea <ILI9341_Draw_Pixel+0x29e>
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068de:	2110      	movs	r1, #16
 80068e0:	438a      	bics	r2, r1
 80068e2:	615a      	str	r2, [r3, #20]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	3301      	adds	r3, #1
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	ddf3      	ble.n	80068d8 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e008      	b.n	8006908 <ILI9341_Draw_Pixel+0x2bc>
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 80068fc:	2110      	movs	r1, #16
 80068fe:	438a      	bics	r2, r1
 8006900:	615a      	str	r2, [r3, #20]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	3301      	adds	r3, #1
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b02      	cmp	r3, #2
 800690c:	ddf3      	ble.n	80068f6 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	4b07      	ldr	r3, [pc, #28]	; (8006930 <ILI9341_Draw_Pixel+0x2e4>)
 8006914:	2110      	movs	r1, #16
 8006916:	430a      	orrs	r2, r1
 8006918:	615a      	str	r2, [r3, #20]
 800691a:	e000      	b.n	800691e <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800691c:	46c0      	nop			; (mov r8, r8)


}
 800691e:	46bd      	mov	sp, r7
 8006920:	b00f      	add	sp, #60	; 0x3c
 8006922:	bd90      	pop	{r4, r7, pc}
 8006924:	20000012 	.word	0x20000012
 8006928:	20000010 	.word	0x20000010
 800692c:	48000400 	.word	0x48000400
 8006930:	48000800 	.word	0x48000800

08006934 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8006934:	b5b0      	push	{r4, r5, r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af02      	add	r7, sp, #8
 800693a:	0005      	movs	r5, r0
 800693c:	000c      	movs	r4, r1
 800693e:	0010      	movs	r0, r2
 8006940:	0019      	movs	r1, r3
 8006942:	1dbb      	adds	r3, r7, #6
 8006944:	1c2a      	adds	r2, r5, #0
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	1d3b      	adds	r3, r7, #4
 800694a:	1c22      	adds	r2, r4, #0
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	1cbb      	adds	r3, r7, #2
 8006950:	1c02      	adds	r2, r0, #0
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	003b      	movs	r3, r7
 8006956:	1c0a      	adds	r2, r1, #0
 8006958:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800695a:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <ILI9341_Draw_Rectangle+0x194>)
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	1dba      	adds	r2, r7, #6
 8006962:	8812      	ldrh	r2, [r2, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d300      	bcc.n	800696a <ILI9341_Draw_Rectangle+0x36>
 8006968:	e0a9      	b.n	8006abe <ILI9341_Draw_Rectangle+0x18a>
 800696a:	4b58      	ldr	r3, [pc, #352]	; (8006acc <ILI9341_Draw_Rectangle+0x198>)
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	1d3a      	adds	r2, r7, #4
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d300      	bcc.n	800697a <ILI9341_Draw_Rectangle+0x46>
 8006978:	e0a1      	b.n	8006abe <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 800697a:	1dbb      	adds	r3, r7, #6
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	1cbb      	adds	r3, r7, #2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	18d3      	adds	r3, r2, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	4a50      	ldr	r2, [pc, #320]	; (8006ac8 <ILI9341_Draw_Rectangle+0x194>)
 8006988:	8812      	ldrh	r2, [r2, #0]
 800698a:	b292      	uxth	r2, r2
 800698c:	4293      	cmp	r3, r2
 800698e:	db07      	blt.n	80069a0 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8006990:	4b4d      	ldr	r3, [pc, #308]	; (8006ac8 <ILI9341_Draw_Rectangle+0x194>)
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b299      	uxth	r1, r3
 8006996:	1cbb      	adds	r3, r7, #2
 8006998:	1dba      	adds	r2, r7, #6
 800699a:	8812      	ldrh	r2, [r2, #0]
 800699c:	1a8a      	subs	r2, r1, r2
 800699e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	881a      	ldrh	r2, [r3, #0]
 80069a4:	003b      	movs	r3, r7
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	18d3      	adds	r3, r2, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	4a47      	ldr	r2, [pc, #284]	; (8006acc <ILI9341_Draw_Rectangle+0x198>)
 80069ae:	8812      	ldrh	r2, [r2, #0]
 80069b0:	b292      	uxth	r2, r2
 80069b2:	4293      	cmp	r3, r2
 80069b4:	db07      	blt.n	80069c6 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 80069b6:	4b45      	ldr	r3, [pc, #276]	; (8006acc <ILI9341_Draw_Rectangle+0x198>)
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b299      	uxth	r1, r3
 80069bc:	003b      	movs	r3, r7
 80069be:	1d3a      	adds	r2, r7, #4
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	1a8a      	subs	r2, r1, r2
 80069c4:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 80069c6:	1dba      	adds	r2, r7, #6
 80069c8:	1cbb      	adds	r3, r7, #2
 80069ca:	8812      	ldrh	r2, [r2, #0]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80069d6:	1d3a      	adds	r2, r7, #4
 80069d8:	003b      	movs	r3, r7
 80069da:	8812      	ldrh	r2, [r2, #0]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	18d3      	adds	r3, r2, r3
 80069e0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	8819      	ldrh	r1, [r3, #0]
 80069ea:	1dbb      	adds	r3, r7, #6
 80069ec:	8818      	ldrh	r0, [r3, #0]
 80069ee:	0013      	movs	r3, r2
 80069f0:	0022      	movs	r2, r4
 80069f2:	f7ff fda9 	bl	8006548 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80069f6:	200e      	movs	r0, #14
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	003a      	movs	r2, r7
 80069fc:	1cb9      	adds	r1, r7, #2
 80069fe:	8812      	ldrh	r2, [r2, #0]
 8006a00:	8809      	ldrh	r1, [r1, #0]
 8006a02:	434a      	muls	r2, r1
 8006a04:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8006a06:	230d      	movs	r3, #13
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8006a0e:	183b      	adds	r3, r7, r0
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	4013      	ands	r3, r2
 8006a16:	d010      	beq.n	8006a3a <ILI9341_Draw_Rectangle+0x106>
 8006a18:	230e      	movs	r3, #14
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d90b      	bls.n	8006a3a <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 8006a22:	230d      	movs	r3, #13
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8006a2a:	220e      	movs	r2, #14
 8006a2c:	18bb      	adds	r3, r7, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	18ba      	adds	r2, r7, r2
 8006a36:	18db      	adds	r3, r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8006a3a:	230e      	movs	r3, #14
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	881c      	ldrh	r4, [r3, #0]
 8006a40:	2320      	movs	r3, #32
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	8819      	ldrh	r1, [r3, #0]
 8006a4a:	1dbb      	adds	r3, r7, #6
 8006a4c:	8818      	ldrh	r0, [r3, #0]
 8006a4e:	2324      	movs	r3, #36	; 0x24
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	0023      	movs	r3, r4
 8006a58:	f000 f8b8 	bl	8006bcc <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8006a5c:	230d      	movs	r3, #13
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d02c      	beq.n	8006ac0 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8006a66:	1dba      	adds	r2, r7, #6
 8006a68:	1cbb      	adds	r3, r7, #2
 8006a6a:	8812      	ldrh	r2, [r2, #0]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	18d3      	adds	r3, r2, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b02      	subs	r3, #2
 8006a74:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	003b      	movs	r3, r7
 8006a7a:	8812      	ldrh	r2, [r2, #0]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	18d3      	adds	r3, r2, r3
 8006a80:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2420      	movs	r4, #32
 8006a88:	193a      	adds	r2, r7, r4
 8006a8a:	8812      	ldrh	r2, [r2, #0]
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	f7ff fddd 	bl	800664c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8006a92:	1dba      	adds	r2, r7, #6
 8006a94:	1cbb      	adds	r3, r7, #2
 8006a96:	8812      	ldrh	r2, [r2, #0]
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	18d3      	adds	r3, r2, r3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8006aa2:	1d3a      	adds	r2, r7, #4
 8006aa4:	003b      	movs	r3, r7
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	18d3      	adds	r3, r2, r3
 8006aac:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	193a      	adds	r2, r7, r4
 8006ab4:	8812      	ldrh	r2, [r2, #0]
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	f7ff fdc8 	bl	800664c <ILI9341_Draw_Pixel>
 8006abc:	e000      	b.n	8006ac0 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8006abe:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b004      	add	sp, #16
 8006ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	20000012 	.word	0x20000012
 8006acc:	20000010 	.word	0x20000010

08006ad0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	1dfb      	adds	r3, r7, #7
 8006ada:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8006adc:	240f      	movs	r4, #15
 8006ade:	193b      	adds	r3, r7, r4
 8006ae0:	1dfa      	adds	r2, r7, #7
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8006ae6:	2036      	movs	r0, #54	; 0x36
 8006ae8:	f000 f950 	bl	8006d8c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8006aec:	193b      	adds	r3, r7, r4
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d013      	beq.n	8006b1c <ILI9341_Set_Rotation+0x4c>
 8006af4:	dc02      	bgt.n	8006afc <ILI9341_Set_Rotation+0x2c>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8006afa:	e030      	b.n	8006b5e <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d018      	beq.n	8006b32 <ILI9341_Set_Rotation+0x62>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d021      	beq.n	8006b48 <ILI9341_Set_Rotation+0x78>
			break;
 8006b04:	e02b      	b.n	8006b5e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8006b06:	2048      	movs	r0, #72	; 0x48
 8006b08:	f000 f976 	bl	8006df8 <_LCD_SendData>
			LCD_WIDTH = 240;
 8006b0c:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <ILI9341_Set_Rotation+0x98>)
 8006b0e:	22f0      	movs	r2, #240	; 0xf0
 8006b10:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006b12:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <ILI9341_Set_Rotation+0x9c>)
 8006b14:	22a0      	movs	r2, #160	; 0xa0
 8006b16:	0052      	lsls	r2, r2, #1
 8006b18:	801a      	strh	r2, [r3, #0]
			break;
 8006b1a:	e020      	b.n	8006b5e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8006b1c:	2028      	movs	r0, #40	; 0x28
 8006b1e:	f000 f96b 	bl	8006df8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <ILI9341_Set_Rotation+0x98>)
 8006b24:	22a0      	movs	r2, #160	; 0xa0
 8006b26:	0052      	lsls	r2, r2, #1
 8006b28:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <ILI9341_Set_Rotation+0x9c>)
 8006b2c:	22f0      	movs	r2, #240	; 0xf0
 8006b2e:	801a      	strh	r2, [r3, #0]
			break;
 8006b30:	e015      	b.n	8006b5e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 8006b32:	2088      	movs	r0, #136	; 0x88
 8006b34:	f000 f960 	bl	8006df8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <ILI9341_Set_Rotation+0x98>)
 8006b3a:	22f0      	movs	r2, #240	; 0xf0
 8006b3c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <ILI9341_Set_Rotation+0x9c>)
 8006b40:	22a0      	movs	r2, #160	; 0xa0
 8006b42:	0052      	lsls	r2, r2, #1
 8006b44:	801a      	strh	r2, [r3, #0]
			break;
 8006b46:	e00a      	b.n	8006b5e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8006b48:	20e8      	movs	r0, #232	; 0xe8
 8006b4a:	f000 f955 	bl	8006df8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8006b4e:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <ILI9341_Set_Rotation+0x98>)
 8006b50:	22a0      	movs	r2, #160	; 0xa0
 8006b52:	0052      	lsls	r2, r2, #1
 8006b54:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <ILI9341_Set_Rotation+0x9c>)
 8006b58:	22f0      	movs	r2, #240	; 0xf0
 8006b5a:	801a      	strh	r2, [r3, #0]
			break;
 8006b5c:	46c0      	nop			; (mov r8, r8)
	}
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b005      	add	sp, #20
 8006b64:	bd90      	pop	{r4, r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	20000012 	.word	0x20000012
 8006b6c:	20000010 	.word	0x20000010

08006b70 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <_LCD_Enable+0x18>)
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <_LCD_Enable+0x18>)
 8006b7a:	2120      	movs	r1, #32
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	615a      	str	r2, [r3, #20]
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	48000800 	.word	0x48000800

08006b8c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006b96:	2120      	movs	r1, #32
 8006b98:	438a      	bics	r2, r1
 8006b9a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8006b9c:	20c8      	movs	r0, #200	; 0xc8
 8006b9e:	f7fc fa4d 	bl	800303c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006ba8:	2110      	movs	r1, #16
 8006baa:	438a      	bics	r2, r1
 8006bac:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8006bae:	20c8      	movs	r0, #200	; 0xc8
 8006bb0:	f7fc fa44 	bl	800303c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <_LCD_Reset+0x3c>)
 8006bba:	2120      	movs	r1, #32
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	615a      	str	r2, [r3, #20]
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	48000800 	.word	0x48000800

08006bcc <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bce:	b095      	sub	sp, #84	; 0x54
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	0006      	movs	r6, r0
 8006bd4:	0008      	movs	r0, r1
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	230e      	movs	r3, #14
 8006bdc:	2218      	movs	r2, #24
 8006bde:	4694      	mov	ip, r2
 8006be0:	44bc      	add	ip, r7
 8006be2:	4463      	add	r3, ip
 8006be4:	1c32      	adds	r2, r6, #0
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	230c      	movs	r3, #12
 8006bea:	2218      	movs	r2, #24
 8006bec:	4694      	mov	ip, r2
 8006bee:	44bc      	add	ip, r7
 8006bf0:	4463      	add	r3, ip
 8006bf2:	1c02      	adds	r2, r0, #0
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	2218      	movs	r2, #24
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	44bc      	add	ip, r7
 8006bfe:	4463      	add	r3, ip
 8006c00:	1c0a      	adds	r2, r1, #0
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	466b      	mov	r3, sp
 8006c06:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4a5b      	ldr	r2, [pc, #364]	; (8006d80 <_LCD_Write_Frame+0x1b4>)
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d202      	bcs.n	8006c1e <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1c:	e002      	b.n	8006c24 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8006c1e:	4b58      	ldr	r3, [pc, #352]	; (8006d80 <_LCD_Write_Frame+0x1b4>)
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8006c24:	230a      	movs	r3, #10
 8006c26:	2218      	movs	r2, #24
 8006c28:	4694      	mov	ip, r2
 8006c2a:	44bc      	add	ip, r7
 8006c2c:	4463      	add	r3, ip
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	231f      	movs	r3, #31
 8006c36:	2118      	movs	r1, #24
 8006c38:	468c      	mov	ip, r1
 8006c3a:	44bc      	add	ip, r7
 8006c3c:	4463      	add	r3, ip
 8006c3e:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8006c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c42:	001a      	movs	r2, r3
 8006c44:	3a01      	subs	r2, #1
 8006c46:	633a      	str	r2, [r7, #48]	; 0x30
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	60fa      	str	r2, [r7, #12]
 8006c4e:	68b8      	ldr	r0, [r7, #8]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	0002      	movs	r2, r0
 8006c54:	0f52      	lsrs	r2, r2, #29
 8006c56:	000e      	movs	r6, r1
 8006c58:	00f6      	lsls	r6, r6, #3
 8006c5a:	617e      	str	r6, [r7, #20]
 8006c5c:	697e      	ldr	r6, [r7, #20]
 8006c5e:	4316      	orrs	r6, r2
 8006c60:	617e      	str	r6, [r7, #20]
 8006c62:	0002      	movs	r2, r0
 8006c64:	00d2      	lsls	r2, r2, #3
 8006c66:	613a      	str	r2, [r7, #16]
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	6838      	ldr	r0, [r7, #0]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	0002      	movs	r2, r0
 8006c74:	0f52      	lsrs	r2, r2, #29
 8006c76:	000e      	movs	r6, r1
 8006c78:	00f5      	lsls	r5, r6, #3
 8006c7a:	4315      	orrs	r5, r2
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	00d4      	lsls	r4, r2, #3
 8006c80:	3307      	adds	r3, #7
 8006c82:	08db      	lsrs	r3, r3, #3
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	466a      	mov	r2, sp
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	469d      	mov	sp, r3
 8006c8c:	466b      	mov	r3, sp
 8006c8e:	3300      	adds	r3, #0
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8006c92:	2300      	movs	r3, #0
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c96:	e017      	b.n	8006cc8 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8006c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9c:	18d3      	adds	r3, r2, r3
 8006c9e:	221f      	movs	r2, #31
 8006ca0:	2118      	movs	r1, #24
 8006ca2:	468c      	mov	ip, r1
 8006ca4:	44bc      	add	ip, r7
 8006ca6:	4462      	add	r2, ip
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8006cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cae:	3301      	adds	r3, #1
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2118      	movs	r1, #24
 8006cb4:	468c      	mov	ip, r1
 8006cb6:	44bc      	add	ip, r7
 8006cb8:	4462      	add	r2, ip
 8006cba:	8812      	ldrh	r2, [r2, #0]
 8006cbc:	b2d1      	uxtb	r1, r2
 8006cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8006cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d3e3      	bcc.n	8006c98 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8006ce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce8:	f7f9 fa20 	bl	800012c <__udivsi3>
 8006cec:	0003      	movs	r3, r0
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7f9 fa9f 	bl	8000238 <__aeabi_uidivmod>
 8006cfa:	000b      	movs	r3, r1
 8006cfc:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8006cfe:	4b21      	ldr	r3, [pc, #132]	; (8006d84 <_LCD_Write_Frame+0x1b8>)
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	4b20      	ldr	r3, [pc, #128]	; (8006d84 <_LCD_Write_Frame+0x1b8>)
 8006d04:	2101      	movs	r1, #1
 8006d06:	430a      	orrs	r2, r1
 8006d08:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d10:	2110      	movs	r1, #16
 8006d12:	438a      	bics	r2, r1
 8006d14:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00f      	beq.n	8006d3c <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	e008      	b.n	8006d34 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8006d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d26:	230a      	movs	r3, #10
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f000 f8d5 	bl	8006ed8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	3301      	adds	r3, #1
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d3f2      	bcc.n	8006d22 <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8006d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d40:	230a      	movs	r3, #10
 8006d42:	2200      	movs	r2, #0
 8006d44:	f000 f8c8 	bl	8006ed8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4c:	e008      	b.n	8006d60 <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d54:	2110      	movs	r1, #16
 8006d56:	438a      	bics	r2, r1
 8006d58:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	ddf3      	ble.n	8006d4e <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <_LCD_Write_Frame+0x1bc>)
 8006d6c:	2110      	movs	r1, #16
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	615a      	str	r2, [r3, #20]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	469d      	mov	sp, r3

}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	b015      	add	sp, #84	; 0x54
 8006d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	20000014 	.word	0x20000014
 8006d84:	48000400 	.word	0x48000400
 8006d88:	48000800 	.word	0x48000800

08006d8c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	0002      	movs	r2, r0
 8006d94:	1dfb      	adds	r3, r7, #7
 8006d96:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006d98:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006d9e:	2110      	movs	r1, #16
 8006da0:	438a      	bics	r2, r1
 8006da2:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <_LCD_SendCommand+0x68>)
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <_LCD_SendCommand+0x68>)
 8006daa:	2101      	movs	r1, #1
 8006dac:	438a      	bics	r2, r1
 8006dae:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8006db0:	1dfb      	adds	r3, r7, #7
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 f853 	bl	8006e64 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e008      	b.n	8006dd6 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006dc6:	695a      	ldr	r2, [r3, #20]
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006dca:	2110      	movs	r1, #16
 8006dcc:	438a      	bics	r2, r1
 8006dce:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	ddf3      	ble.n	8006dc4 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <_LCD_SendCommand+0x64>)
 8006de2:	2110      	movs	r1, #16
 8006de4:	430a      	orrs	r2, r1
 8006de6:	615a      	str	r2, [r3, #20]
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b004      	add	sp, #16
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	48000800 	.word	0x48000800
 8006df4:	48000400 	.word	0x48000400

08006df8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	0002      	movs	r2, r0
 8006e00:	1dfb      	adds	r3, r7, #7
 8006e02:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8006e04:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <_LCD_SendData+0x64>)
 8006e06:	695a      	ldr	r2, [r3, #20]
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <_LCD_SendData+0x64>)
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006e10:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <_LCD_SendData+0x68>)
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <_LCD_SendData+0x68>)
 8006e16:	2110      	movs	r1, #16
 8006e18:	438a      	bics	r2, r1
 8006e1a:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8006e1c:	1dfb      	adds	r3, r7, #7
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	0018      	movs	r0, r3
 8006e26:	f000 f81d 	bl	8006e64 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e008      	b.n	8006e42 <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <_LCD_SendData+0x68>)
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <_LCD_SendData+0x68>)
 8006e36:	2110      	movs	r1, #16
 8006e38:	438a      	bics	r2, r1
 8006e3a:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	ddf3      	ble.n	8006e30 <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006e48:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <_LCD_SendData+0x68>)
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <_LCD_SendData+0x68>)
 8006e4e:	2110      	movs	r1, #16
 8006e50:	438a      	bics	r2, r1
 8006e52:	615a      	str	r2, [r3, #20]
}
 8006e54:	46c0      	nop			; (mov r8, r8)
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b004      	add	sp, #16
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	48000400 	.word	0x48000400
 8006e60:	48000800 	.word	0x48000800

08006e64 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8006e64:	b590      	push	{r4, r7, lr}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	0004      	movs	r4, r0
 8006e6c:	0008      	movs	r0, r1
 8006e6e:	0011      	movs	r1, r2
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	1c22      	adds	r2, r4, #0
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	1dbb      	adds	r3, r7, #6
 8006e78:	1c02      	adds	r2, r0, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	1d7b      	adds	r3, r7, #5
 8006e7e:	1c0a      	adds	r2, r1, #0
 8006e80:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e003      	b.n	8006e90 <_SPI_SendByte+0x2c>
   		asm("nop");
 8006e88:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	1dbb      	adds	r3, r7, #6
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	dbf6      	blt.n	8006e88 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <_SPI_SendByte+0x6c>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d103      	bne.n	8006eae <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8006ea6:	4a0b      	ldr	r2, [pc, #44]	; (8006ed4 <_SPI_SendByte+0x70>)
 8006ea8:	1dfb      	adds	r3, r7, #7
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	e003      	b.n	8006ebc <_SPI_SendByte+0x58>
   		asm("nop");
 8006eb4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	1d7b      	adds	r3, r7, #5
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	dbf6      	blt.n	8006eb4 <_SPI_SendByte+0x50>

#endif

}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	b005      	add	sp, #20
 8006ecc:	bd90      	pop	{r4, r7, pc}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	40013000 	.word	0x40013000
 8006ed4:	4001300c 	.word	0x4001300c

08006ed8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	1dfb      	adds	r3, r7, #7
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	1dbb      	adds	r3, r7, #6
 8006eea:	1c0a      	adds	r2, r1, #0
 8006eec:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e003      	b.n	8006efc <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8006ef4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	1dfb      	adds	r3, r7, #7
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	dbf6      	blt.n	8006ef4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8006f0a:	e01d      	b.n	8006f48 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <_SPI_SendByteMultiByte+0xa4>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2202      	movs	r2, #2
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d117      	bne.n	8006f48 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d90a      	bls.n	8006f34 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	881a      	ldrh	r2, [r3, #0]
 8006f22:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <_SPI_SendByteMultiByte+0xa4>)
 8006f24:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	3302      	adds	r3, #2
 8006f2a:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	3b02      	subs	r3, #2
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	e009      	b.n	8006f48 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8006f34:	4a12      	ldr	r2, [pc, #72]	; (8006f80 <_SPI_SendByteMultiByte+0xa8>)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1de      	bne.n	8006f0c <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <_SPI_SendByteMultiByte+0xa4>)
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <_SPI_SendByteMultiByte+0xa4>)
 8006f54:	2140      	movs	r1, #64	; 0x40
 8006f56:	438a      	bics	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e003      	b.n	8006f68 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 8006f60:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	3301      	adds	r3, #1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	1dbb      	adds	r3, r7, #6
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	dbf6      	blt.n	8006f60 <_SPI_SendByteMultiByte+0x88>

#endif

}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b008      	add	sp, #32
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	40013000 	.word	0x40013000
 8006f80:	4001300c 	.word	0x4001300c

08006f84 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <TSC2046_EM_GetTouchScreenState+0x10>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	20000594 	.word	0x20000594

08006f98 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	0002      	movs	r2, r0
 8006fa0:	1dfb      	adds	r3, r7, #7
 8006fa2:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <TSC2046_EM_ProcessEvent+0x4c>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	3300      	adds	r3, #0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d815      	bhi.n	8006fda <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 8006fae:	1dfb      	adds	r3, r7, #7
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <TSC2046_EM_ProcessEvent+0x24>
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d007      	beq.n	8006fca <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 8006fba:	e00d      	b.n	8006fd8 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 8006fbc:	f000 f81a 	bl	8006ff4 <TSC2046_EM_EnableIdleState>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	001a      	movs	r2, r3
 8006fc4:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <TSC2046_EM_ProcessEvent+0x4c>)
 8006fc6:	701a      	strb	r2, [r3, #0]
					break;
 8006fc8:	e006      	b.n	8006fd8 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 8006fca:	f000 f80d 	bl	8006fe8 <TSC2046_EM_EnableConversionState>
 8006fce:	0003      	movs	r3, r0
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <TSC2046_EM_ProcessEvent+0x4c>)
 8006fd4:	701a      	strb	r2, [r3, #0]
					break;
 8006fd6:	46c0      	nop			; (mov r8, r8)
			break;
 8006fd8:	46c0      	nop			; (mov r8, r8)
	}
}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b002      	add	sp, #8
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	20000594 	.word	0x20000594

08006fe8 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 8006fec:	2301      	movs	r3, #1
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <TSC2046_HM_Init+0x5c>)
 8007008:	2200      	movs	r2, #0
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 800700c:	4b13      	ldr	r3, [pc, #76]	; (800705c <TSC2046_HM_Init+0x5c>)
 800700e:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TSC2046_HM_Init+0x60>)
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <TSC2046_HM_Init+0x5c>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b11      	ldr	r3, [pc, #68]	; (800705c <TSC2046_HM_Init+0x5c>)
 8007018:	2101      	movs	r1, #1
 800701a:	430a      	orrs	r2, r1
 800701c:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <TSC2046_HM_Init+0x5c>)
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	4b0e      	ldr	r3, [pc, #56]	; (800705c <TSC2046_HM_Init+0x5c>)
 8007024:	2101      	movs	r1, #1
 8007026:	430a      	orrs	r2, r1
 8007028:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 800702a:	2300      	movs	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	e00e      	b.n	800704e <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <TSC2046_HM_Init+0x64>)
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	0092      	lsls	r2, r2, #2
 8007036:	2100      	movs	r1, #0
 8007038:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 800703a:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <TSC2046_HM_Init+0x64>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	18d3      	adds	r3, r2, r3
 8007042:	3302      	adds	r3, #2
 8007044:	2200      	movs	r2, #0
 8007046:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	dded      	ble.n	8007030 <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 8007054:	46c0      	nop			; (mov r8, r8)
 8007056:	46bd      	mov	sp, r7
 8007058:	b002      	add	sp, #8
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40014800 	.word	0x40014800
 8007060:	00000fff 	.word	0x00000fff
 8007064:	20000df4 	.word	0x20000df4

08007068 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 8007074:	f7ff ff86 	bl	8006f84 <TSC2046_EM_GetTouchScreenState>
 8007078:	0003      	movs	r3, r0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d138      	bne.n	80070f0 <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 800707e:	f000 f8b7 	bl	80071f0 <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8007082:	2300      	movs	r3, #0
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	e02d      	b.n	80070e4 <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 8007088:	f000 f8a2 	bl	80071d0 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 800708c:	20d0      	movs	r0, #208	; 0xd0
 800708e:	f000 f8c3 	bl	8007218 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 8007092:	f000 f8d9 	bl	8007248 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8007096:	20d0      	movs	r0, #208	; 0xd0
 8007098:	f000 f8be 	bl	8007218 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 800709c:	f000 f8d4 	bl	8007248 <_SpiReceive16>
 80070a0:	0003      	movs	r3, r0
 80070a2:	0019      	movs	r1, r3
 80070a4:	4a1a      	ldr	r2, [pc, #104]	; (8007110 <TSC2046_HM_RunConversion+0xa8>)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	18d3      	adds	r3, r2, r3
 80070ac:	3302      	adds	r3, #2
 80070ae:	1c0a      	adds	r2, r1, #0
 80070b0:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80070b2:	f000 f87f 	bl	80071b4 <_SetCsPinHigh>

				_SetCsPinLow();
 80070b6:	f000 f88b 	bl	80071d0 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80070ba:	2090      	movs	r0, #144	; 0x90
 80070bc:	f000 f8ac 	bl	8007218 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 80070c0:	f000 f8c2 	bl	8007248 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80070c4:	2090      	movs	r0, #144	; 0x90
 80070c6:	f000 f8a7 	bl	8007218 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 80070ca:	f000 f8bd 	bl	8007248 <_SpiReceive16>
 80070ce:	0003      	movs	r3, r0
 80070d0:	0019      	movs	r1, r3
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <TSC2046_HM_RunConversion+0xa8>)
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80070da:	f000 f86b 	bl	80071b4 <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	3301      	adds	r3, #1
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	ddce      	ble.n	8007088 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 80070ea:	f000 f813 	bl	8007114 <TSC2046_HM_ConvertToQVGA>
 80070ee:	e008      	b.n	8007102 <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <TSC2046_HM_RunConversion+0xa8>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 80070f6:	4b06      	ldr	r3, [pc, #24]	; (8007110 <TSC2046_HM_RunConversion+0xa8>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 80070fc:	1dfb      	adds	r3, r7, #7
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8007102:	1dfb      	adds	r3, r7, #7
 8007104:	781b      	ldrb	r3, [r3, #0]

}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b002      	add	sp, #8
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	20000df4 	.word	0x20000df4

08007114 <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 800711a:	1dbb      	adds	r3, r7, #6
 800711c:	22a0      	movs	r2, #160	; 0xa0
 800711e:	0052      	lsls	r2, r2, #1
 8007120:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	22f0      	movs	r2, #240	; 0xf0
 8007126:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8007128:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800712a:	881a      	ldrh	r2, [r3, #0]
 800712c:	1dbb      	adds	r3, r7, #6
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	0019      	movs	r1, r3
 8007132:	0010      	movs	r0, r2
 8007134:	f7f8 fffa 	bl	800012c <__udivsi3>
 8007138:	0003      	movs	r3, r0
 800713a:	b29a      	uxth	r2, r3
 800713c:	4b1c      	ldr	r3, [pc, #112]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800713e:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 8007140:	4b1b      	ldr	r3, [pc, #108]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007142:	885a      	ldrh	r2, [r3, #2]
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	0019      	movs	r1, r3
 800714a:	0010      	movs	r0, r2
 800714c:	f7f8 ffee 	bl	800012c <__udivsi3>
 8007150:	0003      	movs	r3, r0
 8007152:	b29a      	uxth	r2, r3
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007156:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	3b0a      	subs	r3, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007162:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007166:	885b      	ldrh	r3, [r3, #2]
 8007168:	3b0a      	subs	r3, #10
 800716a:	b29a      	uxth	r2, r3
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800716e:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007172:	881c      	ldrh	r4, [r3, #0]
 8007174:	1dbb      	adds	r3, r7, #6
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	2150      	movs	r1, #80	; 0x50
 800717a:	0018      	movs	r0, r3
 800717c:	f7f8 ffd6 	bl	800012c <__udivsi3>
 8007180:	0003      	movs	r3, r0
 8007182:	b29b      	uxth	r3, r3
 8007184:	4363      	muls	r3, r4
 8007186:	b29a      	uxth	r2, r3
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800718a:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 800718c:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800718e:	885c      	ldrh	r4, [r3, #2]
 8007190:	1d3b      	adds	r3, r7, #4
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	2164      	movs	r1, #100	; 0x64
 8007196:	0018      	movs	r0, r3
 8007198:	f7f8 ffc8 	bl	800012c <__udivsi3>
 800719c:	0003      	movs	r3, r0
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4363      	muls	r3, r4
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 80071a6:	805a      	strh	r2, [r3, #2]

}
 80071a8:	46c0      	nop			; (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b003      	add	sp, #12
 80071ae:	bd90      	pop	{r4, r7, pc}
 80071b0:	20000df4 	.word	0x20000df4

080071b4 <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <_SetCsPinHigh+0x18>)
 80071ba:	695a      	ldr	r2, [r3, #20]
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <_SetCsPinHigh+0x18>)
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	0149      	lsls	r1, r1, #5
 80071c2:	430a      	orrs	r2, r1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	48000400 	.word	0x48000400

080071d0 <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <_SetCsPinLow+0x18>)
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <_SetCsPinLow+0x18>)
 80071da:	4904      	ldr	r1, [pc, #16]	; (80071ec <_SetCsPinLow+0x1c>)
 80071dc:	400a      	ands	r2, r1
 80071de:	615a      	str	r2, [r3, #20]
}
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	48000400 	.word	0x48000400
 80071ec:	ffffefff 	.word	0xffffefff

080071f0 <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <_EnableSPI+0x24>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2240      	movs	r2, #64	; 0x40
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d005      	beq.n	800720c <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <_EnableSPI+0x24>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <_EnableSPI+0x24>)
 8007206:	2140      	movs	r1, #64	; 0x40
 8007208:	430a      	orrs	r2, r1
 800720a:	601a      	str	r2, [r3, #0]
	}

}
 800720c:	46c0      	nop			; (mov r8, r8)
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	40003800 	.word	0x40003800

08007218 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	0002      	movs	r2, r0
 8007220:	1dfb      	adds	r3, r7, #7
 8007222:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <_SpiTransmit8+0x28>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2202      	movs	r2, #2
 800722a:	4013      	ands	r3, r2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d103      	bne.n	8007238 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 8007230:	4a04      	ldr	r2, [pc, #16]	; (8007244 <_SpiTransmit8+0x2c>)
 8007232:	1dfb      	adds	r3, r7, #7
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	7013      	strb	r3, [r2, #0]
	}
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b002      	add	sp, #8
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40003800 	.word	0x40003800
 8007244:	4000380c 	.word	0x4000380c

08007248 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800724e:	1dbb      	adds	r3, r7, #6
 8007250:	2200      	movs	r2, #0
 8007252:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <_SpiReceive16+0x2c>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2201      	movs	r2, #1
 800725a:	4013      	ands	r3, r2
 800725c:	2b01      	cmp	r3, #1
 800725e:	d103      	bne.n	8007268 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <_SpiReceive16+0x2c>)
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	1dbb      	adds	r3, r7, #6
 8007266:	801a      	strh	r2, [r3, #0]
	}
	return data;
 8007268:	1dbb      	adds	r3, r7, #6
 800726a:	881b      	ldrh	r3, [r3, #0]
}
 800726c:	0018      	movs	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	b002      	add	sp, #8
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40003800 	.word	0x40003800

08007278 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <TSC4026_STM32_HM_GetXpos+0x10>)
 800727e:	881b      	ldrh	r3, [r3, #0]
}
 8007280:	0018      	movs	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000df4 	.word	0x20000df4

0800728c <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <TSC4026_STM32_HM_GetYpos+0x10>)
 8007292:	885b      	ldrh	r3, [r3, #2]
}
 8007294:	0018      	movs	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	20000df4 	.word	0x20000df4

080072a0 <TSC2046_IM_PENIRQ_EXTI_Handler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_PENIRQ_EXTI_Handler()
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
//	uint32_t interrupt_time = TSC2046_HW_DEBOUNCE_TIMER->CNT;

//	if( (interrupt_time - touchscreen_last_interrupt_time) > MAX_TOUCHSCREEN_DEBOUNCE_DELAY )
//	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7ff fe77 	bl	8006f98 <TSC2046_EM_ProcessEvent>
//	}
//	touchscreen_last_interrupt_time = interrupt_time;
}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <TSC2046_IM_HardwareManagerLoopHandler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_HardwareManagerLoopHandler()
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin) == 0)
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <TSC2046_IM_HardwareManagerLoopHandler+0x28>)
 80072b6:	2140      	movs	r1, #64	; 0x40
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7fc fd91 	bl	8003de0 <HAL_GPIO_ReadPin>
 80072be:	1e03      	subs	r3, r0, #0
 80072c0:	d103      	bne.n	80072ca <TSC2046_IM_HardwareManagerLoopHandler+0x1a>
	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80072c2:	2001      	movs	r0, #1
 80072c4:	f7ff fe68 	bl	8006f98 <TSC2046_EM_ProcessEvent>
	}
	else
	{
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
	}
}
 80072c8:	e002      	b.n	80072d0 <TSC2046_IM_HardwareManagerLoopHandler+0x20>
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7ff fe64 	bl	8006f98 <TSC2046_EM_ProcessEvent>
}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	48000800 	.word	0x48000800

080072dc <__errno>:
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <__errno+0x8>)
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	4770      	bx	lr
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	20000018 	.word	0x20000018

080072e8 <__libc_init_array>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	2600      	movs	r6, #0
 80072ec:	4d0c      	ldr	r5, [pc, #48]	; (8007320 <__libc_init_array+0x38>)
 80072ee:	4c0d      	ldr	r4, [pc, #52]	; (8007324 <__libc_init_array+0x3c>)
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	42a6      	cmp	r6, r4
 80072f6:	d109      	bne.n	800730c <__libc_init_array+0x24>
 80072f8:	2600      	movs	r6, #0
 80072fa:	f003 fe0b 	bl	800af14 <_init>
 80072fe:	4d0a      	ldr	r5, [pc, #40]	; (8007328 <__libc_init_array+0x40>)
 8007300:	4c0a      	ldr	r4, [pc, #40]	; (800732c <__libc_init_array+0x44>)
 8007302:	1b64      	subs	r4, r4, r5
 8007304:	10a4      	asrs	r4, r4, #2
 8007306:	42a6      	cmp	r6, r4
 8007308:	d105      	bne.n	8007316 <__libc_init_array+0x2e>
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	00b3      	lsls	r3, r6, #2
 800730e:	58eb      	ldr	r3, [r5, r3]
 8007310:	4798      	blx	r3
 8007312:	3601      	adds	r6, #1
 8007314:	e7ee      	b.n	80072f4 <__libc_init_array+0xc>
 8007316:	00b3      	lsls	r3, r6, #2
 8007318:	58eb      	ldr	r3, [r5, r3]
 800731a:	4798      	blx	r3
 800731c:	3601      	adds	r6, #1
 800731e:	e7f2      	b.n	8007306 <__libc_init_array+0x1e>
 8007320:	0800b610 	.word	0x0800b610
 8007324:	0800b610 	.word	0x0800b610
 8007328:	0800b610 	.word	0x0800b610
 800732c:	0800b614 	.word	0x0800b614

08007330 <memcpy>:
 8007330:	2300      	movs	r3, #0
 8007332:	b510      	push	{r4, lr}
 8007334:	429a      	cmp	r2, r3
 8007336:	d100      	bne.n	800733a <memcpy+0xa>
 8007338:	bd10      	pop	{r4, pc}
 800733a:	5ccc      	ldrb	r4, [r1, r3]
 800733c:	54c4      	strb	r4, [r0, r3]
 800733e:	3301      	adds	r3, #1
 8007340:	e7f8      	b.n	8007334 <memcpy+0x4>

08007342 <memset>:
 8007342:	0003      	movs	r3, r0
 8007344:	1812      	adds	r2, r2, r0
 8007346:	4293      	cmp	r3, r2
 8007348:	d100      	bne.n	800734c <memset+0xa>
 800734a:	4770      	bx	lr
 800734c:	7019      	strb	r1, [r3, #0]
 800734e:	3301      	adds	r3, #1
 8007350:	e7f9      	b.n	8007346 <memset+0x4>

08007352 <__cvt>:
 8007352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007354:	b08b      	sub	sp, #44	; 0x2c
 8007356:	0014      	movs	r4, r2
 8007358:	1e1d      	subs	r5, r3, #0
 800735a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800735c:	da53      	bge.n	8007406 <__cvt+0xb4>
 800735e:	2480      	movs	r4, #128	; 0x80
 8007360:	0624      	lsls	r4, r4, #24
 8007362:	191b      	adds	r3, r3, r4
 8007364:	001d      	movs	r5, r3
 8007366:	0014      	movs	r4, r2
 8007368:	232d      	movs	r3, #45	; 0x2d
 800736a:	700b      	strb	r3, [r1, #0]
 800736c:	2320      	movs	r3, #32
 800736e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007370:	2203      	movs	r2, #3
 8007372:	439e      	bics	r6, r3
 8007374:	2e46      	cmp	r6, #70	; 0x46
 8007376:	d007      	beq.n	8007388 <__cvt+0x36>
 8007378:	0033      	movs	r3, r6
 800737a:	3b45      	subs	r3, #69	; 0x45
 800737c:	4259      	negs	r1, r3
 800737e:	414b      	adcs	r3, r1
 8007380:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007382:	3a01      	subs	r2, #1
 8007384:	18cb      	adds	r3, r1, r3
 8007386:	9310      	str	r3, [sp, #64]	; 0x40
 8007388:	ab09      	add	r3, sp, #36	; 0x24
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	ab08      	add	r3, sp, #32
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007392:	9200      	str	r2, [sp, #0]
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007398:	0022      	movs	r2, r4
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	002b      	movs	r3, r5
 800739e:	f001 fdf1 	bl	8008f84 <_dtoa_r>
 80073a2:	0007      	movs	r7, r0
 80073a4:	2e47      	cmp	r6, #71	; 0x47
 80073a6:	d102      	bne.n	80073ae <__cvt+0x5c>
 80073a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d524      	bpl.n	80073f8 <__cvt+0xa6>
 80073ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	2e46      	cmp	r6, #70	; 0x46
 80073b6:	d114      	bne.n	80073e2 <__cvt+0x90>
 80073b8:	783b      	ldrb	r3, [r7, #0]
 80073ba:	2b30      	cmp	r3, #48	; 0x30
 80073bc:	d10c      	bne.n	80073d8 <__cvt+0x86>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	0020      	movs	r0, r4
 80073c4:	0029      	movs	r1, r5
 80073c6:	f7f9 f837 	bl	8000438 <__aeabi_dcmpeq>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d104      	bne.n	80073d8 <__cvt+0x86>
 80073ce:	2301      	movs	r3, #1
 80073d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073da:	9a07      	ldr	r2, [sp, #28]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	9307      	str	r3, [sp, #28]
 80073e2:	2200      	movs	r2, #0
 80073e4:	2300      	movs	r3, #0
 80073e6:	0020      	movs	r0, r4
 80073e8:	0029      	movs	r1, r5
 80073ea:	f7f9 f825 	bl	8000438 <__aeabi_dcmpeq>
 80073ee:	2230      	movs	r2, #48	; 0x30
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d00d      	beq.n	8007410 <__cvt+0xbe>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	9309      	str	r3, [sp, #36]	; 0x24
 80073f8:	0038      	movs	r0, r7
 80073fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073fe:	1bdb      	subs	r3, r3, r7
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	b00b      	add	sp, #44	; 0x2c
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	2300      	movs	r3, #0
 8007408:	e7af      	b.n	800736a <__cvt+0x18>
 800740a:	1c59      	adds	r1, r3, #1
 800740c:	9109      	str	r1, [sp, #36]	; 0x24
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	9907      	ldr	r1, [sp, #28]
 8007414:	428b      	cmp	r3, r1
 8007416:	d3f8      	bcc.n	800740a <__cvt+0xb8>
 8007418:	e7ee      	b.n	80073f8 <__cvt+0xa6>

0800741a <__exponent>:
 800741a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741c:	1c83      	adds	r3, r0, #2
 800741e:	b085      	sub	sp, #20
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	0006      	movs	r6, r0
 8007424:	000c      	movs	r4, r1
 8007426:	7002      	strb	r2, [r0, #0]
 8007428:	232b      	movs	r3, #43	; 0x2b
 800742a:	2900      	cmp	r1, #0
 800742c:	da01      	bge.n	8007432 <__exponent+0x18>
 800742e:	232d      	movs	r3, #45	; 0x2d
 8007430:	424c      	negs	r4, r1
 8007432:	7073      	strb	r3, [r6, #1]
 8007434:	2c09      	cmp	r4, #9
 8007436:	dd22      	ble.n	800747e <__exponent+0x64>
 8007438:	ab02      	add	r3, sp, #8
 800743a:	1ddd      	adds	r5, r3, #7
 800743c:	0020      	movs	r0, r4
 800743e:	210a      	movs	r1, #10
 8007440:	f7f8 ffe4 	bl	800040c <__aeabi_idivmod>
 8007444:	1e6f      	subs	r7, r5, #1
 8007446:	3130      	adds	r1, #48	; 0x30
 8007448:	7039      	strb	r1, [r7, #0]
 800744a:	0020      	movs	r0, r4
 800744c:	210a      	movs	r1, #10
 800744e:	f7f8 fef7 	bl	8000240 <__divsi3>
 8007452:	0004      	movs	r4, r0
 8007454:	2809      	cmp	r0, #9
 8007456:	dc0b      	bgt.n	8007470 <__exponent+0x56>
 8007458:	3d02      	subs	r5, #2
 800745a:	3430      	adds	r4, #48	; 0x30
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	702c      	strb	r4, [r5, #0]
 8007460:	aa02      	add	r2, sp, #8
 8007462:	3207      	adds	r2, #7
 8007464:	0018      	movs	r0, r3
 8007466:	42aa      	cmp	r2, r5
 8007468:	d804      	bhi.n	8007474 <__exponent+0x5a>
 800746a:	1b80      	subs	r0, r0, r6
 800746c:	b005      	add	sp, #20
 800746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007470:	003d      	movs	r5, r7
 8007472:	e7e3      	b.n	800743c <__exponent+0x22>
 8007474:	782a      	ldrb	r2, [r5, #0]
 8007476:	3501      	adds	r5, #1
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	e7f0      	b.n	8007460 <__exponent+0x46>
 800747e:	2330      	movs	r3, #48	; 0x30
 8007480:	18e4      	adds	r4, r4, r3
 8007482:	70b3      	strb	r3, [r6, #2]
 8007484:	1d30      	adds	r0, r6, #4
 8007486:	70f4      	strb	r4, [r6, #3]
 8007488:	e7ef      	b.n	800746a <__exponent+0x50>
	...

0800748c <_printf_float>:
 800748c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748e:	b095      	sub	sp, #84	; 0x54
 8007490:	000c      	movs	r4, r1
 8007492:	920a      	str	r2, [sp, #40]	; 0x28
 8007494:	930b      	str	r3, [sp, #44]	; 0x2c
 8007496:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007498:	9009      	str	r0, [sp, #36]	; 0x24
 800749a:	f002 fe89 	bl	800a1b0 <_localeconv_r>
 800749e:	6803      	ldr	r3, [r0, #0]
 80074a0:	0018      	movs	r0, r3
 80074a2:	930c      	str	r3, [sp, #48]	; 0x30
 80074a4:	f7f8 fe30 	bl	8000108 <strlen>
 80074a8:	2300      	movs	r3, #0
 80074aa:	9312      	str	r3, [sp, #72]	; 0x48
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	900e      	str	r0, [sp, #56]	; 0x38
 80074b0:	930d      	str	r3, [sp, #52]	; 0x34
 80074b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80074b4:	7e27      	ldrb	r7, [r4, #24]
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	2207      	movs	r2, #7
 80074ba:	05c9      	lsls	r1, r1, #23
 80074bc:	d545      	bpl.n	800754a <_printf_float+0xbe>
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	4393      	bics	r3, r2
 80074c2:	001a      	movs	r2, r3
 80074c4:	3208      	adds	r2, #8
 80074c6:	602a      	str	r2, [r5, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	64a2      	str	r2, [r4, #72]	; 0x48
 80074ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 80074d0:	2201      	movs	r2, #1
 80074d2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80074d4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80074d6:	006b      	lsls	r3, r5, #1
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	930f      	str	r3, [sp, #60]	; 0x3c
 80074dc:	4252      	negs	r2, r2
 80074de:	4bac      	ldr	r3, [pc, #688]	; (8007790 <_printf_float+0x304>)
 80074e0:	0030      	movs	r0, r6
 80074e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074e4:	f7fa fe26 	bl	8002134 <__aeabi_dcmpun>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d130      	bne.n	800754e <_printf_float+0xc2>
 80074ec:	2201      	movs	r2, #1
 80074ee:	4ba8      	ldr	r3, [pc, #672]	; (8007790 <_printf_float+0x304>)
 80074f0:	4252      	negs	r2, r2
 80074f2:	0030      	movs	r0, r6
 80074f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074f6:	f7f8 ffaf 	bl	8000458 <__aeabi_dcmple>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d127      	bne.n	800754e <_printf_float+0xc2>
 80074fe:	2200      	movs	r2, #0
 8007500:	2300      	movs	r3, #0
 8007502:	0030      	movs	r0, r6
 8007504:	0029      	movs	r1, r5
 8007506:	f7f8 ff9d 	bl	8000444 <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	d003      	beq.n	8007516 <_printf_float+0x8a>
 800750e:	0023      	movs	r3, r4
 8007510:	222d      	movs	r2, #45	; 0x2d
 8007512:	3343      	adds	r3, #67	; 0x43
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	4d9f      	ldr	r5, [pc, #636]	; (8007794 <_printf_float+0x308>)
 8007518:	2f47      	cmp	r7, #71	; 0x47
 800751a:	d800      	bhi.n	800751e <_printf_float+0x92>
 800751c:	4d9e      	ldr	r5, [pc, #632]	; (8007798 <_printf_float+0x30c>)
 800751e:	2303      	movs	r3, #3
 8007520:	2600      	movs	r6, #0
 8007522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	3301      	adds	r3, #1
 8007528:	439a      	bics	r2, r3
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752e:	aa13      	add	r2, sp, #76	; 0x4c
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	0021      	movs	r1, r4
 8007534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007538:	f000 f9f4 	bl	8007924 <_printf_common>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d000      	beq.n	8007542 <_printf_float+0xb6>
 8007540:	e093      	b.n	800766a <_printf_float+0x1de>
 8007542:	2001      	movs	r0, #1
 8007544:	4240      	negs	r0, r0
 8007546:	b015      	add	sp, #84	; 0x54
 8007548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754a:	3307      	adds	r3, #7
 800754c:	e7b8      	b.n	80074c0 <_printf_float+0x34>
 800754e:	0032      	movs	r2, r6
 8007550:	002b      	movs	r3, r5
 8007552:	0030      	movs	r0, r6
 8007554:	0029      	movs	r1, r5
 8007556:	f7fa fded 	bl	8002134 <__aeabi_dcmpun>
 800755a:	2800      	cmp	r0, #0
 800755c:	d004      	beq.n	8007568 <_printf_float+0xdc>
 800755e:	4d8f      	ldr	r5, [pc, #572]	; (800779c <_printf_float+0x310>)
 8007560:	2f47      	cmp	r7, #71	; 0x47
 8007562:	d8dc      	bhi.n	800751e <_printf_float+0x92>
 8007564:	4d8e      	ldr	r5, [pc, #568]	; (80077a0 <_printf_float+0x314>)
 8007566:	e7da      	b.n	800751e <_printf_float+0x92>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800756c:	6862      	ldr	r2, [r4, #4]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	430b      	orrs	r3, r1
 8007572:	1c51      	adds	r1, r2, #1
 8007574:	d143      	bne.n	80075fe <_printf_float+0x172>
 8007576:	3207      	adds	r2, #7
 8007578:	6062      	str	r2, [r4, #4]
 800757a:	aa12      	add	r2, sp, #72	; 0x48
 800757c:	2100      	movs	r1, #0
 800757e:	9205      	str	r2, [sp, #20]
 8007580:	aa11      	add	r2, sp, #68	; 0x44
 8007582:	9203      	str	r2, [sp, #12]
 8007584:	2223      	movs	r2, #35	; 0x23
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	9106      	str	r1, [sp, #24]
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	a908      	add	r1, sp, #32
 800758e:	6863      	ldr	r3, [r4, #4]
 8007590:	1852      	adds	r2, r2, r1
 8007592:	9202      	str	r2, [sp, #8]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	0032      	movs	r2, r6
 8007598:	002b      	movs	r3, r5
 800759a:	9704      	str	r7, [sp, #16]
 800759c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800759e:	f7ff fed8 	bl	8007352 <__cvt>
 80075a2:	2320      	movs	r3, #32
 80075a4:	003a      	movs	r2, r7
 80075a6:	0005      	movs	r5, r0
 80075a8:	439a      	bics	r2, r3
 80075aa:	2a47      	cmp	r2, #71	; 0x47
 80075ac:	d107      	bne.n	80075be <_printf_float+0x132>
 80075ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b0:	1cda      	adds	r2, r3, #3
 80075b2:	db02      	blt.n	80075ba <_printf_float+0x12e>
 80075b4:	6862      	ldr	r2, [r4, #4]
 80075b6:	4293      	cmp	r3, r2
 80075b8:	dd45      	ble.n	8007646 <_printf_float+0x1ba>
 80075ba:	3f02      	subs	r7, #2
 80075bc:	b2ff      	uxtb	r7, r7
 80075be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075c0:	2f65      	cmp	r7, #101	; 0x65
 80075c2:	d825      	bhi.n	8007610 <_printf_float+0x184>
 80075c4:	0020      	movs	r0, r4
 80075c6:	3901      	subs	r1, #1
 80075c8:	003a      	movs	r2, r7
 80075ca:	3050      	adds	r0, #80	; 0x50
 80075cc:	9111      	str	r1, [sp, #68]	; 0x44
 80075ce:	f7ff ff24 	bl	800741a <__exponent>
 80075d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075d4:	0006      	movs	r6, r0
 80075d6:	1813      	adds	r3, r2, r0
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2a01      	cmp	r2, #1
 80075dc:	dc02      	bgt.n	80075e4 <_printf_float+0x158>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	07d2      	lsls	r2, r2, #31
 80075e2:	d501      	bpl.n	80075e8 <_printf_float+0x15c>
 80075e4:	3301      	adds	r3, #1
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2323      	movs	r3, #35	; 0x23
 80075ea:	aa08      	add	r2, sp, #32
 80075ec:	189b      	adds	r3, r3, r2
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d09b      	beq.n	800752c <_printf_float+0xa0>
 80075f4:	0023      	movs	r3, r4
 80075f6:	222d      	movs	r2, #45	; 0x2d
 80075f8:	3343      	adds	r3, #67	; 0x43
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e796      	b.n	800752c <_printf_float+0xa0>
 80075fe:	2f67      	cmp	r7, #103	; 0x67
 8007600:	d100      	bne.n	8007604 <_printf_float+0x178>
 8007602:	e176      	b.n	80078f2 <_printf_float+0x466>
 8007604:	2f47      	cmp	r7, #71	; 0x47
 8007606:	d1b8      	bne.n	800757a <_printf_float+0xee>
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1b6      	bne.n	800757a <_printf_float+0xee>
 800760c:	2201      	movs	r2, #1
 800760e:	e7b3      	b.n	8007578 <_printf_float+0xec>
 8007610:	2f66      	cmp	r7, #102	; 0x66
 8007612:	d119      	bne.n	8007648 <_printf_float+0x1bc>
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	2900      	cmp	r1, #0
 8007618:	dd0c      	ble.n	8007634 <_printf_float+0x1a8>
 800761a:	6121      	str	r1, [r4, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <_printf_float+0x19a>
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	07d2      	lsls	r2, r2, #31
 8007624:	d502      	bpl.n	800762c <_printf_float+0x1a0>
 8007626:	3301      	adds	r3, #1
 8007628:	185b      	adds	r3, r3, r1
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800762e:	2600      	movs	r6, #0
 8007630:	65a3      	str	r3, [r4, #88]	; 0x58
 8007632:	e7d9      	b.n	80075e8 <_printf_float+0x15c>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <_printf_float+0x1b4>
 8007638:	2201      	movs	r2, #1
 800763a:	6821      	ldr	r1, [r4, #0]
 800763c:	4211      	tst	r1, r2
 800763e:	d000      	beq.n	8007642 <_printf_float+0x1b6>
 8007640:	1c9a      	adds	r2, r3, #2
 8007642:	6122      	str	r2, [r4, #16]
 8007644:	e7f2      	b.n	800762c <_printf_float+0x1a0>
 8007646:	2767      	movs	r7, #103	; 0x67
 8007648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800764a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800764c:	4293      	cmp	r3, r2
 800764e:	db05      	blt.n	800765c <_printf_float+0x1d0>
 8007650:	6822      	ldr	r2, [r4, #0]
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	07d2      	lsls	r2, r2, #31
 8007656:	d5e9      	bpl.n	800762c <_printf_float+0x1a0>
 8007658:	3301      	adds	r3, #1
 800765a:	e7e6      	b.n	800762a <_printf_float+0x19e>
 800765c:	2101      	movs	r1, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	dc01      	bgt.n	8007666 <_printf_float+0x1da>
 8007662:	1849      	adds	r1, r1, r1
 8007664:	1ac9      	subs	r1, r1, r3
 8007666:	1852      	adds	r2, r2, r1
 8007668:	e7eb      	b.n	8007642 <_printf_float+0x1b6>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	0553      	lsls	r3, r2, #21
 800766e:	d408      	bmi.n	8007682 <_printf_float+0x1f6>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	002a      	movs	r2, r5
 8007674:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007678:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800767a:	47a8      	blx	r5
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d129      	bne.n	80076d4 <_printf_float+0x248>
 8007680:	e75f      	b.n	8007542 <_printf_float+0xb6>
 8007682:	2f65      	cmp	r7, #101	; 0x65
 8007684:	d800      	bhi.n	8007688 <_printf_float+0x1fc>
 8007686:	e0e0      	b.n	800784a <_printf_float+0x3be>
 8007688:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800768a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	f7f8 fed2 	bl	8000438 <__aeabi_dcmpeq>
 8007694:	2800      	cmp	r0, #0
 8007696:	d034      	beq.n	8007702 <_printf_float+0x276>
 8007698:	2301      	movs	r3, #1
 800769a:	4a42      	ldr	r2, [pc, #264]	; (80077a4 <_printf_float+0x318>)
 800769c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800769e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80076a2:	47a8      	blx	r5
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d100      	bne.n	80076aa <_printf_float+0x21e>
 80076a8:	e74b      	b.n	8007542 <_printf_float+0xb6>
 80076aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ae:	4293      	cmp	r3, r2
 80076b0:	db02      	blt.n	80076b8 <_printf_float+0x22c>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07db      	lsls	r3, r3, #31
 80076b6:	d50d      	bpl.n	80076d4 <_printf_float+0x248>
 80076b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80076ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c2:	47a8      	blx	r5
 80076c4:	2500      	movs	r5, #0
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d100      	bne.n	80076cc <_printf_float+0x240>
 80076ca:	e73a      	b.n	8007542 <_printf_float+0xb6>
 80076cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ce:	3b01      	subs	r3, #1
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dc0a      	bgt.n	80076ea <_printf_float+0x25e>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	079b      	lsls	r3, r3, #30
 80076d8:	d500      	bpl.n	80076dc <_printf_float+0x250>
 80076da:	e108      	b.n	80078ee <_printf_float+0x462>
 80076dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076de:	68e0      	ldr	r0, [r4, #12]
 80076e0:	4298      	cmp	r0, r3
 80076e2:	db00      	blt.n	80076e6 <_printf_float+0x25a>
 80076e4:	e72f      	b.n	8007546 <_printf_float+0xba>
 80076e6:	0018      	movs	r0, r3
 80076e8:	e72d      	b.n	8007546 <_printf_float+0xba>
 80076ea:	0022      	movs	r2, r4
 80076ec:	2301      	movs	r3, #1
 80076ee:	321a      	adds	r2, #26
 80076f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80076f6:	47b0      	blx	r6
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d100      	bne.n	80076fe <_printf_float+0x272>
 80076fc:	e721      	b.n	8007542 <_printf_float+0xb6>
 80076fe:	3501      	adds	r5, #1
 8007700:	e7e4      	b.n	80076cc <_printf_float+0x240>
 8007702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc2d      	bgt.n	8007764 <_printf_float+0x2d8>
 8007708:	2301      	movs	r3, #1
 800770a:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <_printf_float+0x318>)
 800770c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800770e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007710:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007712:	47b0      	blx	r6
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d100      	bne.n	800771a <_printf_float+0x28e>
 8007718:	e713      	b.n	8007542 <_printf_float+0xb6>
 800771a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <_printf_float+0x2a0>
 8007720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <_printf_float+0x2a0>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	07db      	lsls	r3, r3, #31
 800772a:	d5d3      	bpl.n	80076d4 <_printf_float+0x248>
 800772c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800772e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007732:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007736:	47b0      	blx	r6
 8007738:	2600      	movs	r6, #0
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d100      	bne.n	8007740 <_printf_float+0x2b4>
 800773e:	e700      	b.n	8007542 <_printf_float+0xb6>
 8007740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007742:	425b      	negs	r3, r3
 8007744:	42b3      	cmp	r3, r6
 8007746:	dc01      	bgt.n	800774c <_printf_float+0x2c0>
 8007748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800774a:	e792      	b.n	8007672 <_printf_float+0x1e6>
 800774c:	0022      	movs	r2, r4
 800774e:	2301      	movs	r3, #1
 8007750:	321a      	adds	r2, #26
 8007752:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007756:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007758:	47b8      	blx	r7
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d100      	bne.n	8007760 <_printf_float+0x2d4>
 800775e:	e6f0      	b.n	8007542 <_printf_float+0xb6>
 8007760:	3601      	adds	r6, #1
 8007762:	e7ed      	b.n	8007740 <_printf_float+0x2b4>
 8007764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007766:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007768:	429f      	cmp	r7, r3
 800776a:	dd00      	ble.n	800776e <_printf_float+0x2e2>
 800776c:	001f      	movs	r7, r3
 800776e:	2f00      	cmp	r7, #0
 8007770:	dd08      	ble.n	8007784 <_printf_float+0x2f8>
 8007772:	003b      	movs	r3, r7
 8007774:	002a      	movs	r2, r5
 8007776:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800777c:	47b0      	blx	r6
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d100      	bne.n	8007784 <_printf_float+0x2f8>
 8007782:	e6de      	b.n	8007542 <_printf_float+0xb6>
 8007784:	2300      	movs	r3, #0
 8007786:	930d      	str	r3, [sp, #52]	; 0x34
 8007788:	43fb      	mvns	r3, r7
 800778a:	17db      	asrs	r3, r3, #31
 800778c:	930f      	str	r3, [sp, #60]	; 0x3c
 800778e:	e018      	b.n	80077c2 <_printf_float+0x336>
 8007790:	7fefffff 	.word	0x7fefffff
 8007794:	0800b360 	.word	0x0800b360
 8007798:	0800b35c 	.word	0x0800b35c
 800779c:	0800b368 	.word	0x0800b368
 80077a0:	0800b364 	.word	0x0800b364
 80077a4:	0800b36c 	.word	0x0800b36c
 80077a8:	0022      	movs	r2, r4
 80077aa:	2301      	movs	r3, #1
 80077ac:	321a      	adds	r2, #26
 80077ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80077b4:	47b0      	blx	r6
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d100      	bne.n	80077bc <_printf_float+0x330>
 80077ba:	e6c2      	b.n	8007542 <_printf_float+0xb6>
 80077bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077be:	3301      	adds	r3, #1
 80077c0:	930d      	str	r3, [sp, #52]	; 0x34
 80077c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80077c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c8:	403b      	ands	r3, r7
 80077ca:	1af3      	subs	r3, r6, r3
 80077cc:	4293      	cmp	r3, r2
 80077ce:	dceb      	bgt.n	80077a8 <_printf_float+0x31c>
 80077d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077d4:	19ad      	adds	r5, r5, r6
 80077d6:	4293      	cmp	r3, r2
 80077d8:	db10      	blt.n	80077fc <_printf_float+0x370>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	07db      	lsls	r3, r3, #31
 80077de:	d40d      	bmi.n	80077fc <_printf_float+0x370>
 80077e0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80077e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e4:	1bbe      	subs	r6, r7, r6
 80077e6:	1aff      	subs	r7, r7, r3
 80077e8:	42b7      	cmp	r7, r6
 80077ea:	dd00      	ble.n	80077ee <_printf_float+0x362>
 80077ec:	0037      	movs	r7, r6
 80077ee:	2f00      	cmp	r7, #0
 80077f0:	dc0d      	bgt.n	800780e <_printf_float+0x382>
 80077f2:	43fe      	mvns	r6, r7
 80077f4:	17f3      	asrs	r3, r6, #31
 80077f6:	2500      	movs	r5, #0
 80077f8:	930c      	str	r3, [sp, #48]	; 0x30
 80077fa:	e01c      	b.n	8007836 <_printf_float+0x3aa>
 80077fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007800:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007804:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007806:	47b8      	blx	r7
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d1e9      	bne.n	80077e0 <_printf_float+0x354>
 800780c:	e699      	b.n	8007542 <_printf_float+0xb6>
 800780e:	003b      	movs	r3, r7
 8007810:	002a      	movs	r2, r5
 8007812:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007816:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007818:	47a8      	blx	r5
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d1e9      	bne.n	80077f2 <_printf_float+0x366>
 800781e:	e690      	b.n	8007542 <_printf_float+0xb6>
 8007820:	0022      	movs	r2, r4
 8007822:	2301      	movs	r3, #1
 8007824:	321a      	adds	r2, #26
 8007826:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800782c:	47b0      	blx	r6
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	d100      	bne.n	8007834 <_printf_float+0x3a8>
 8007832:	e686      	b.n	8007542 <_printf_float+0xb6>
 8007834:	3501      	adds	r5, #1
 8007836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	003a      	movs	r2, r7
 8007840:	400a      	ands	r2, r1
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dceb      	bgt.n	8007820 <_printf_float+0x394>
 8007848:	e744      	b.n	80076d4 <_printf_float+0x248>
 800784a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784c:	2b01      	cmp	r3, #1
 800784e:	dc02      	bgt.n	8007856 <_printf_float+0x3ca>
 8007850:	2301      	movs	r3, #1
 8007852:	421a      	tst	r2, r3
 8007854:	d032      	beq.n	80078bc <_printf_float+0x430>
 8007856:	2301      	movs	r3, #1
 8007858:	002a      	movs	r2, r5
 800785a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800785c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800785e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007860:	47b8      	blx	r7
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d100      	bne.n	8007868 <_printf_float+0x3dc>
 8007866:	e66c      	b.n	8007542 <_printf_float+0xb6>
 8007868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800786a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800786e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007870:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007872:	3501      	adds	r5, #1
 8007874:	47b8      	blx	r7
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	d100      	bne.n	800787c <_printf_float+0x3f0>
 800787a:	e662      	b.n	8007542 <_printf_float+0xb6>
 800787c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800787e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007882:	2200      	movs	r2, #0
 8007884:	1e5f      	subs	r7, r3, #1
 8007886:	2300      	movs	r3, #0
 8007888:	f7f8 fdd6 	bl	8000438 <__aeabi_dcmpeq>
 800788c:	003b      	movs	r3, r7
 800788e:	2800      	cmp	r0, #0
 8007890:	d014      	beq.n	80078bc <_printf_float+0x430>
 8007892:	2500      	movs	r5, #0
 8007894:	e00a      	b.n	80078ac <_printf_float+0x420>
 8007896:	0022      	movs	r2, r4
 8007898:	2301      	movs	r3, #1
 800789a:	321a      	adds	r2, #26
 800789c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800789e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80078a2:	47b8      	blx	r7
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d100      	bne.n	80078aa <_printf_float+0x41e>
 80078a8:	e64b      	b.n	8007542 <_printf_float+0xb6>
 80078aa:	3501      	adds	r5, #1
 80078ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078ae:	3b01      	subs	r3, #1
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	dcf0      	bgt.n	8007896 <_printf_float+0x40a>
 80078b4:	0022      	movs	r2, r4
 80078b6:	0033      	movs	r3, r6
 80078b8:	3250      	adds	r2, #80	; 0x50
 80078ba:	e6db      	b.n	8007674 <_printf_float+0x1e8>
 80078bc:	002a      	movs	r2, r5
 80078be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078c4:	47a8      	blx	r5
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	d1f4      	bne.n	80078b4 <_printf_float+0x428>
 80078ca:	e63a      	b.n	8007542 <_printf_float+0xb6>
 80078cc:	0022      	movs	r2, r4
 80078ce:	2301      	movs	r3, #1
 80078d0:	3219      	adds	r2, #25
 80078d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078d8:	47b0      	blx	r6
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d100      	bne.n	80078e0 <_printf_float+0x454>
 80078de:	e630      	b.n	8007542 <_printf_float+0xb6>
 80078e0:	3501      	adds	r5, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dcef      	bgt.n	80078cc <_printf_float+0x440>
 80078ec:	e6f6      	b.n	80076dc <_printf_float+0x250>
 80078ee:	2500      	movs	r5, #0
 80078f0:	e7f7      	b.n	80078e2 <_printf_float+0x456>
 80078f2:	2a00      	cmp	r2, #0
 80078f4:	d100      	bne.n	80078f8 <_printf_float+0x46c>
 80078f6:	e689      	b.n	800760c <_printf_float+0x180>
 80078f8:	2100      	movs	r1, #0
 80078fa:	9106      	str	r1, [sp, #24]
 80078fc:	a912      	add	r1, sp, #72	; 0x48
 80078fe:	9105      	str	r1, [sp, #20]
 8007900:	a911      	add	r1, sp, #68	; 0x44
 8007902:	9103      	str	r1, [sp, #12]
 8007904:	2123      	movs	r1, #35	; 0x23
 8007906:	a808      	add	r0, sp, #32
 8007908:	1809      	adds	r1, r1, r0
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	9200      	str	r2, [sp, #0]
 8007910:	002b      	movs	r3, r5
 8007912:	9704      	str	r7, [sp, #16]
 8007914:	9102      	str	r1, [sp, #8]
 8007916:	0032      	movs	r2, r6
 8007918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800791a:	f7ff fd1a 	bl	8007352 <__cvt>
 800791e:	0005      	movs	r5, r0
 8007920:	e645      	b.n	80075ae <_printf_float+0x122>
 8007922:	46c0      	nop			; (mov r8, r8)

08007924 <_printf_common>:
 8007924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007926:	0015      	movs	r5, r2
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	688a      	ldr	r2, [r1, #8]
 800792c:	690b      	ldr	r3, [r1, #16]
 800792e:	9000      	str	r0, [sp, #0]
 8007930:	000c      	movs	r4, r1
 8007932:	4293      	cmp	r3, r2
 8007934:	da00      	bge.n	8007938 <_printf_common+0x14>
 8007936:	0013      	movs	r3, r2
 8007938:	0022      	movs	r2, r4
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	3243      	adds	r2, #67	; 0x43
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	2a00      	cmp	r2, #0
 8007942:	d001      	beq.n	8007948 <_printf_common+0x24>
 8007944:	3301      	adds	r3, #1
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	069b      	lsls	r3, r3, #26
 800794c:	d502      	bpl.n	8007954 <_printf_common+0x30>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	3302      	adds	r3, #2
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	2706      	movs	r7, #6
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	401f      	ands	r7, r3
 800795a:	d027      	beq.n	80079ac <_printf_common+0x88>
 800795c:	0023      	movs	r3, r4
 800795e:	3343      	adds	r3, #67	; 0x43
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	1e5a      	subs	r2, r3, #1
 8007964:	4193      	sbcs	r3, r2
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d430      	bmi.n	80079ce <_printf_common+0xaa>
 800796c:	0022      	movs	r2, r4
 800796e:	9901      	ldr	r1, [sp, #4]
 8007970:	3243      	adds	r2, #67	; 0x43
 8007972:	9800      	ldr	r0, [sp, #0]
 8007974:	9e08      	ldr	r6, [sp, #32]
 8007976:	47b0      	blx	r6
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d025      	beq.n	80079c8 <_printf_common+0xa4>
 800797c:	2306      	movs	r3, #6
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	682a      	ldr	r2, [r5, #0]
 8007982:	68e1      	ldr	r1, [r4, #12]
 8007984:	4003      	ands	r3, r0
 8007986:	2500      	movs	r5, #0
 8007988:	2b04      	cmp	r3, #4
 800798a:	d103      	bne.n	8007994 <_printf_common+0x70>
 800798c:	1a8d      	subs	r5, r1, r2
 800798e:	43eb      	mvns	r3, r5
 8007990:	17db      	asrs	r3, r3, #31
 8007992:	401d      	ands	r5, r3
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6922      	ldr	r2, [r4, #16]
 8007998:	4293      	cmp	r3, r2
 800799a:	dd01      	ble.n	80079a0 <_printf_common+0x7c>
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	18ed      	adds	r5, r5, r3
 80079a0:	2700      	movs	r7, #0
 80079a2:	42bd      	cmp	r5, r7
 80079a4:	d120      	bne.n	80079e8 <_printf_common+0xc4>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e010      	b.n	80079cc <_printf_common+0xa8>
 80079aa:	3701      	adds	r7, #1
 80079ac:	68e3      	ldr	r3, [r4, #12]
 80079ae:	682a      	ldr	r2, [r5, #0]
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	42bb      	cmp	r3, r7
 80079b4:	ddd2      	ble.n	800795c <_printf_common+0x38>
 80079b6:	0022      	movs	r2, r4
 80079b8:	2301      	movs	r3, #1
 80079ba:	3219      	adds	r2, #25
 80079bc:	9901      	ldr	r1, [sp, #4]
 80079be:	9800      	ldr	r0, [sp, #0]
 80079c0:	9e08      	ldr	r6, [sp, #32]
 80079c2:	47b0      	blx	r6
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d1f0      	bne.n	80079aa <_printf_common+0x86>
 80079c8:	2001      	movs	r0, #1
 80079ca:	4240      	negs	r0, r0
 80079cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079ce:	2030      	movs	r0, #48	; 0x30
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	3143      	adds	r1, #67	; 0x43
 80079d4:	7008      	strb	r0, [r1, #0]
 80079d6:	0021      	movs	r1, r4
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	3145      	adds	r1, #69	; 0x45
 80079dc:	7809      	ldrb	r1, [r1, #0]
 80079de:	18a2      	adds	r2, r4, r2
 80079e0:	3243      	adds	r2, #67	; 0x43
 80079e2:	3302      	adds	r3, #2
 80079e4:	7011      	strb	r1, [r2, #0]
 80079e6:	e7c1      	b.n	800796c <_printf_common+0x48>
 80079e8:	0022      	movs	r2, r4
 80079ea:	2301      	movs	r3, #1
 80079ec:	321a      	adds	r2, #26
 80079ee:	9901      	ldr	r1, [sp, #4]
 80079f0:	9800      	ldr	r0, [sp, #0]
 80079f2:	9e08      	ldr	r6, [sp, #32]
 80079f4:	47b0      	blx	r6
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	d0e6      	beq.n	80079c8 <_printf_common+0xa4>
 80079fa:	3701      	adds	r7, #1
 80079fc:	e7d1      	b.n	80079a2 <_printf_common+0x7e>
	...

08007a00 <_printf_i>:
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	9204      	str	r2, [sp, #16]
 8007a06:	000a      	movs	r2, r1
 8007a08:	3243      	adds	r2, #67	; 0x43
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	9003      	str	r0, [sp, #12]
 8007a0e:	9202      	str	r2, [sp, #8]
 8007a10:	7e0a      	ldrb	r2, [r1, #24]
 8007a12:	000c      	movs	r4, r1
 8007a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a16:	2a6e      	cmp	r2, #110	; 0x6e
 8007a18:	d100      	bne.n	8007a1c <_printf_i+0x1c>
 8007a1a:	e086      	b.n	8007b2a <_printf_i+0x12a>
 8007a1c:	d81f      	bhi.n	8007a5e <_printf_i+0x5e>
 8007a1e:	2a63      	cmp	r2, #99	; 0x63
 8007a20:	d033      	beq.n	8007a8a <_printf_i+0x8a>
 8007a22:	d808      	bhi.n	8007a36 <_printf_i+0x36>
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d100      	bne.n	8007a2a <_printf_i+0x2a>
 8007a28:	e08c      	b.n	8007b44 <_printf_i+0x144>
 8007a2a:	2a58      	cmp	r2, #88	; 0x58
 8007a2c:	d04d      	beq.n	8007aca <_printf_i+0xca>
 8007a2e:	0025      	movs	r5, r4
 8007a30:	3542      	adds	r5, #66	; 0x42
 8007a32:	702a      	strb	r2, [r5, #0]
 8007a34:	e030      	b.n	8007a98 <_printf_i+0x98>
 8007a36:	2a64      	cmp	r2, #100	; 0x64
 8007a38:	d001      	beq.n	8007a3e <_printf_i+0x3e>
 8007a3a:	2a69      	cmp	r2, #105	; 0x69
 8007a3c:	d1f7      	bne.n	8007a2e <_printf_i+0x2e>
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6825      	ldr	r5, [r4, #0]
 8007a42:	1d0a      	adds	r2, r1, #4
 8007a44:	0628      	lsls	r0, r5, #24
 8007a46:	d529      	bpl.n	8007a9c <_printf_i+0x9c>
 8007a48:	6808      	ldr	r0, [r1, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	da03      	bge.n	8007a58 <_printf_i+0x58>
 8007a50:	232d      	movs	r3, #45	; 0x2d
 8007a52:	9a02      	ldr	r2, [sp, #8]
 8007a54:	4240      	negs	r0, r0
 8007a56:	7013      	strb	r3, [r2, #0]
 8007a58:	4e6b      	ldr	r6, [pc, #428]	; (8007c08 <_printf_i+0x208>)
 8007a5a:	270a      	movs	r7, #10
 8007a5c:	e04f      	b.n	8007afe <_printf_i+0xfe>
 8007a5e:	2a73      	cmp	r2, #115	; 0x73
 8007a60:	d074      	beq.n	8007b4c <_printf_i+0x14c>
 8007a62:	d808      	bhi.n	8007a76 <_printf_i+0x76>
 8007a64:	2a6f      	cmp	r2, #111	; 0x6f
 8007a66:	d01f      	beq.n	8007aa8 <_printf_i+0xa8>
 8007a68:	2a70      	cmp	r2, #112	; 0x70
 8007a6a:	d1e0      	bne.n	8007a2e <_printf_i+0x2e>
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	6809      	ldr	r1, [r1, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	e003      	b.n	8007a7e <_printf_i+0x7e>
 8007a76:	2a75      	cmp	r2, #117	; 0x75
 8007a78:	d016      	beq.n	8007aa8 <_printf_i+0xa8>
 8007a7a:	2a78      	cmp	r2, #120	; 0x78
 8007a7c:	d1d7      	bne.n	8007a2e <_printf_i+0x2e>
 8007a7e:	0022      	movs	r2, r4
 8007a80:	2178      	movs	r1, #120	; 0x78
 8007a82:	3245      	adds	r2, #69	; 0x45
 8007a84:	7011      	strb	r1, [r2, #0]
 8007a86:	4e61      	ldr	r6, [pc, #388]	; (8007c0c <_printf_i+0x20c>)
 8007a88:	e022      	b.n	8007ad0 <_printf_i+0xd0>
 8007a8a:	0025      	movs	r5, r4
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	3542      	adds	r5, #66	; 0x42
 8007a90:	1d11      	adds	r1, r2, #4
 8007a92:	6019      	str	r1, [r3, #0]
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	702b      	strb	r3, [r5, #0]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e065      	b.n	8007b68 <_printf_i+0x168>
 8007a9c:	6808      	ldr	r0, [r1, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	0669      	lsls	r1, r5, #25
 8007aa2:	d5d3      	bpl.n	8007a4c <_printf_i+0x4c>
 8007aa4:	b200      	sxth	r0, r0
 8007aa6:	e7d1      	b.n	8007a4c <_printf_i+0x4c>
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	6825      	ldr	r5, [r4, #0]
 8007aac:	1d08      	adds	r0, r1, #4
 8007aae:	6018      	str	r0, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	062e      	lsls	r6, r5, #24
 8007ab4:	d505      	bpl.n	8007ac2 <_printf_i+0xc2>
 8007ab6:	4e54      	ldr	r6, [pc, #336]	; (8007c08 <_printf_i+0x208>)
 8007ab8:	2708      	movs	r7, #8
 8007aba:	2a6f      	cmp	r2, #111	; 0x6f
 8007abc:	d01b      	beq.n	8007af6 <_printf_i+0xf6>
 8007abe:	270a      	movs	r7, #10
 8007ac0:	e019      	b.n	8007af6 <_printf_i+0xf6>
 8007ac2:	066d      	lsls	r5, r5, #25
 8007ac4:	d5f7      	bpl.n	8007ab6 <_printf_i+0xb6>
 8007ac6:	b280      	uxth	r0, r0
 8007ac8:	e7f5      	b.n	8007ab6 <_printf_i+0xb6>
 8007aca:	3145      	adds	r1, #69	; 0x45
 8007acc:	4e4e      	ldr	r6, [pc, #312]	; (8007c08 <_printf_i+0x208>)
 8007ace:	700a      	strb	r2, [r1, #0]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	1d01      	adds	r1, r0, #4
 8007ad6:	6800      	ldr	r0, [r0, #0]
 8007ad8:	6019      	str	r1, [r3, #0]
 8007ada:	0615      	lsls	r5, r2, #24
 8007adc:	d521      	bpl.n	8007b22 <_printf_i+0x122>
 8007ade:	07d3      	lsls	r3, r2, #31
 8007ae0:	d502      	bpl.n	8007ae8 <_printf_i+0xe8>
 8007ae2:	2320      	movs	r3, #32
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	6022      	str	r2, [r4, #0]
 8007ae8:	2710      	movs	r7, #16
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d103      	bne.n	8007af6 <_printf_i+0xf6>
 8007aee:	2320      	movs	r3, #32
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	439a      	bics	r2, r3
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	0023      	movs	r3, r4
 8007af8:	2200      	movs	r2, #0
 8007afa:	3343      	adds	r3, #67	; 0x43
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db58      	blt.n	8007bb8 <_printf_i+0x1b8>
 8007b06:	2204      	movs	r2, #4
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	4391      	bics	r1, r2
 8007b0c:	6021      	str	r1, [r4, #0]
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d154      	bne.n	8007bbc <_printf_i+0x1bc>
 8007b12:	9d02      	ldr	r5, [sp, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05a      	beq.n	8007bce <_printf_i+0x1ce>
 8007b18:	0025      	movs	r5, r4
 8007b1a:	7833      	ldrb	r3, [r6, #0]
 8007b1c:	3542      	adds	r5, #66	; 0x42
 8007b1e:	702b      	strb	r3, [r5, #0]
 8007b20:	e055      	b.n	8007bce <_printf_i+0x1ce>
 8007b22:	0655      	lsls	r5, r2, #25
 8007b24:	d5db      	bpl.n	8007ade <_printf_i+0xde>
 8007b26:	b280      	uxth	r0, r0
 8007b28:	e7d9      	b.n	8007ade <_printf_i+0xde>
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	680d      	ldr	r5, [r1, #0]
 8007b2e:	1d10      	adds	r0, r2, #4
 8007b30:	6949      	ldr	r1, [r1, #20]
 8007b32:	6018      	str	r0, [r3, #0]
 8007b34:	6813      	ldr	r3, [r2, #0]
 8007b36:	062e      	lsls	r6, r5, #24
 8007b38:	d501      	bpl.n	8007b3e <_printf_i+0x13e>
 8007b3a:	6019      	str	r1, [r3, #0]
 8007b3c:	e002      	b.n	8007b44 <_printf_i+0x144>
 8007b3e:	066d      	lsls	r5, r5, #25
 8007b40:	d5fb      	bpl.n	8007b3a <_printf_i+0x13a>
 8007b42:	8019      	strh	r1, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	9d02      	ldr	r5, [sp, #8]
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	e04f      	b.n	8007bec <_printf_i+0x1ec>
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	1d11      	adds	r1, r2, #4
 8007b50:	6019      	str	r1, [r3, #0]
 8007b52:	6815      	ldr	r5, [r2, #0]
 8007b54:	2100      	movs	r1, #0
 8007b56:	6862      	ldr	r2, [r4, #4]
 8007b58:	0028      	movs	r0, r5
 8007b5a:	f002 fb51 	bl	800a200 <memchr>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d001      	beq.n	8007b66 <_printf_i+0x166>
 8007b62:	1b40      	subs	r0, r0, r5
 8007b64:	6060      	str	r0, [r4, #4]
 8007b66:	6863      	ldr	r3, [r4, #4]
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9a02      	ldr	r2, [sp, #8]
 8007b6e:	7013      	strb	r3, [r2, #0]
 8007b70:	e03c      	b.n	8007bec <_printf_i+0x1ec>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	002a      	movs	r2, r5
 8007b76:	9904      	ldr	r1, [sp, #16]
 8007b78:	9803      	ldr	r0, [sp, #12]
 8007b7a:	9d05      	ldr	r5, [sp, #20]
 8007b7c:	47a8      	blx	r5
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d03e      	beq.n	8007c00 <_printf_i+0x200>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	079b      	lsls	r3, r3, #30
 8007b86:	d415      	bmi.n	8007bb4 <_printf_i+0x1b4>
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	68e0      	ldr	r0, [r4, #12]
 8007b8c:	4298      	cmp	r0, r3
 8007b8e:	da39      	bge.n	8007c04 <_printf_i+0x204>
 8007b90:	0018      	movs	r0, r3
 8007b92:	e037      	b.n	8007c04 <_printf_i+0x204>
 8007b94:	0022      	movs	r2, r4
 8007b96:	2301      	movs	r3, #1
 8007b98:	3219      	adds	r2, #25
 8007b9a:	9904      	ldr	r1, [sp, #16]
 8007b9c:	9803      	ldr	r0, [sp, #12]
 8007b9e:	9e05      	ldr	r6, [sp, #20]
 8007ba0:	47b0      	blx	r6
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d02c      	beq.n	8007c00 <_printf_i+0x200>
 8007ba6:	3501      	adds	r5, #1
 8007ba8:	68e3      	ldr	r3, [r4, #12]
 8007baa:	9a07      	ldr	r2, [sp, #28]
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	42ab      	cmp	r3, r5
 8007bb0:	dcf0      	bgt.n	8007b94 <_printf_i+0x194>
 8007bb2:	e7e9      	b.n	8007b88 <_printf_i+0x188>
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	e7f7      	b.n	8007ba8 <_printf_i+0x1a8>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0ad      	beq.n	8007b18 <_printf_i+0x118>
 8007bbc:	9d02      	ldr	r5, [sp, #8]
 8007bbe:	0039      	movs	r1, r7
 8007bc0:	f7f8 fb3a 	bl	8000238 <__aeabi_uidivmod>
 8007bc4:	5c73      	ldrb	r3, [r6, r1]
 8007bc6:	3d01      	subs	r5, #1
 8007bc8:	702b      	strb	r3, [r5, #0]
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1f7      	bne.n	8007bbe <_printf_i+0x1be>
 8007bce:	2f08      	cmp	r7, #8
 8007bd0:	d109      	bne.n	8007be6 <_printf_i+0x1e6>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	07db      	lsls	r3, r3, #31
 8007bd6:	d506      	bpl.n	8007be6 <_printf_i+0x1e6>
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	6922      	ldr	r2, [r4, #16]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	dc02      	bgt.n	8007be6 <_printf_i+0x1e6>
 8007be0:	2330      	movs	r3, #48	; 0x30
 8007be2:	3d01      	subs	r5, #1
 8007be4:	702b      	strb	r3, [r5, #0]
 8007be6:	9b02      	ldr	r3, [sp, #8]
 8007be8:	1b5b      	subs	r3, r3, r5
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	aa07      	add	r2, sp, #28
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	0021      	movs	r1, r4
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	9803      	ldr	r0, [sp, #12]
 8007bf8:	f7ff fe94 	bl	8007924 <_printf_common>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d1b8      	bne.n	8007b72 <_printf_i+0x172>
 8007c00:	2001      	movs	r0, #1
 8007c02:	4240      	negs	r0, r0
 8007c04:	b009      	add	sp, #36	; 0x24
 8007c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c08:	0800b36e 	.word	0x0800b36e
 8007c0c:	0800b37f 	.word	0x0800b37f

08007c10 <_scanf_float>:
 8007c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c12:	b08b      	sub	sp, #44	; 0x2c
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	9200      	str	r2, [sp, #0]
 8007c18:	2000      	movs	r0, #0
 8007c1a:	22ae      	movs	r2, #174	; 0xae
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	688b      	ldr	r3, [r1, #8]
 8007c20:	000e      	movs	r6, r1
 8007c22:	1e59      	subs	r1, r3, #1
 8007c24:	0052      	lsls	r2, r2, #1
 8007c26:	9004      	str	r0, [sp, #16]
 8007c28:	4291      	cmp	r1, r2
 8007c2a:	d905      	bls.n	8007c38 <_scanf_float+0x28>
 8007c2c:	3b5e      	subs	r3, #94	; 0x5e
 8007c2e:	3bff      	subs	r3, #255	; 0xff
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	235e      	movs	r3, #94	; 0x5e
 8007c34:	33ff      	adds	r3, #255	; 0xff
 8007c36:	60b3      	str	r3, [r6, #8]
 8007c38:	23f0      	movs	r3, #240	; 0xf0
 8007c3a:	6832      	ldr	r2, [r6, #0]
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	0033      	movs	r3, r6
 8007c44:	2700      	movs	r7, #0
 8007c46:	331c      	adds	r3, #28
 8007c48:	001d      	movs	r5, r3
 8007c4a:	003c      	movs	r4, r7
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	9708      	str	r7, [sp, #32]
 8007c50:	9707      	str	r7, [sp, #28]
 8007c52:	9701      	str	r7, [sp, #4]
 8007c54:	9706      	str	r7, [sp, #24]
 8007c56:	68b2      	ldr	r2, [r6, #8]
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	d013      	beq.n	8007c84 <_scanf_float+0x74>
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b49      	cmp	r3, #73	; 0x49
 8007c66:	d100      	bne.n	8007c6a <_scanf_float+0x5a>
 8007c68:	e07c      	b.n	8007d64 <_scanf_float+0x154>
 8007c6a:	d854      	bhi.n	8007d16 <_scanf_float+0x106>
 8007c6c:	2b39      	cmp	r3, #57	; 0x39
 8007c6e:	d847      	bhi.n	8007d00 <_scanf_float+0xf0>
 8007c70:	2b31      	cmp	r3, #49	; 0x31
 8007c72:	d300      	bcc.n	8007c76 <_scanf_float+0x66>
 8007c74:	e094      	b.n	8007da0 <_scanf_float+0x190>
 8007c76:	2b2d      	cmp	r3, #45	; 0x2d
 8007c78:	d100      	bne.n	8007c7c <_scanf_float+0x6c>
 8007c7a:	e09c      	b.n	8007db6 <_scanf_float+0x1a6>
 8007c7c:	d817      	bhi.n	8007cae <_scanf_float+0x9e>
 8007c7e:	2b2b      	cmp	r3, #43	; 0x2b
 8007c80:	d100      	bne.n	8007c84 <_scanf_float+0x74>
 8007c82:	e098      	b.n	8007db6 <_scanf_float+0x1a6>
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <_scanf_float+0x82>
 8007c8a:	6832      	ldr	r2, [r6, #0]
 8007c8c:	4b9b      	ldr	r3, [pc, #620]	; (8007efc <_scanf_float+0x2ec>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	6033      	str	r3, [r6, #0]
 8007c92:	3c01      	subs	r4, #1
 8007c94:	2c01      	cmp	r4, #1
 8007c96:	d900      	bls.n	8007c9a <_scanf_float+0x8a>
 8007c98:	e0ee      	b.n	8007e78 <_scanf_float+0x268>
 8007c9a:	24be      	movs	r4, #190	; 0xbe
 8007c9c:	0064      	lsls	r4, r4, #1
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	429d      	cmp	r5, r3
 8007ca2:	d900      	bls.n	8007ca6 <_scanf_float+0x96>
 8007ca4:	e0de      	b.n	8007e64 <_scanf_float+0x254>
 8007ca6:	2701      	movs	r7, #1
 8007ca8:	0038      	movs	r0, r7
 8007caa:	b00b      	add	sp, #44	; 0x2c
 8007cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cae:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb0:	d100      	bne.n	8007cb4 <_scanf_float+0xa4>
 8007cb2:	e0a2      	b.n	8007dfa <_scanf_float+0x1ea>
 8007cb4:	2b30      	cmp	r3, #48	; 0x30
 8007cb6:	d1e5      	bne.n	8007c84 <_scanf_float+0x74>
 8007cb8:	6831      	ldr	r1, [r6, #0]
 8007cba:	05c8      	lsls	r0, r1, #23
 8007cbc:	d570      	bpl.n	8007da0 <_scanf_float+0x190>
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	4399      	bics	r1, r3
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	6031      	str	r1, [r6, #0]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <_scanf_float+0xc8>
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	60b2      	str	r2, [r6, #8]
 8007cd8:	68b3      	ldr	r3, [r6, #8]
 8007cda:	9a00      	ldr	r2, [sp, #0]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60b3      	str	r3, [r6, #8]
 8007ce0:	6933      	ldr	r3, [r6, #16]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	6133      	str	r3, [r6, #16]
 8007ce6:	9b00      	ldr	r3, [sp, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	9309      	str	r3, [sp, #36]	; 0x24
 8007cec:	3b01      	subs	r3, #1
 8007cee:	6053      	str	r3, [r2, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc00      	bgt.n	8007cf6 <_scanf_float+0xe6>
 8007cf4:	e0ac      	b.n	8007e50 <_scanf_float+0x240>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	e7aa      	b.n	8007c56 <_scanf_float+0x46>
 8007d00:	2b45      	cmp	r3, #69	; 0x45
 8007d02:	d100      	bne.n	8007d06 <_scanf_float+0xf6>
 8007d04:	e083      	b.n	8007e0e <_scanf_float+0x1fe>
 8007d06:	2b46      	cmp	r3, #70	; 0x46
 8007d08:	d06d      	beq.n	8007de6 <_scanf_float+0x1d6>
 8007d0a:	2b41      	cmp	r3, #65	; 0x41
 8007d0c:	d1ba      	bne.n	8007c84 <_scanf_float+0x74>
 8007d0e:	2c01      	cmp	r4, #1
 8007d10:	d1b8      	bne.n	8007c84 <_scanf_float+0x74>
 8007d12:	2402      	movs	r4, #2
 8007d14:	e04c      	b.n	8007db0 <_scanf_float+0x1a0>
 8007d16:	2b65      	cmp	r3, #101	; 0x65
 8007d18:	d079      	beq.n	8007e0e <_scanf_float+0x1fe>
 8007d1a:	d81b      	bhi.n	8007d54 <_scanf_float+0x144>
 8007d1c:	2b54      	cmp	r3, #84	; 0x54
 8007d1e:	d067      	beq.n	8007df0 <_scanf_float+0x1e0>
 8007d20:	d813      	bhi.n	8007d4a <_scanf_float+0x13a>
 8007d22:	2b4e      	cmp	r3, #78	; 0x4e
 8007d24:	d1ae      	bne.n	8007c84 <_scanf_float+0x74>
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d14c      	bne.n	8007dc4 <_scanf_float+0x1b4>
 8007d2a:	9a01      	ldr	r2, [sp, #4]
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d14b      	bne.n	8007dc8 <_scanf_float+0x1b8>
 8007d30:	21e0      	movs	r1, #224	; 0xe0
 8007d32:	20e0      	movs	r0, #224	; 0xe0
 8007d34:	6832      	ldr	r2, [r6, #0]
 8007d36:	00c9      	lsls	r1, r1, #3
 8007d38:	4011      	ands	r1, r2
 8007d3a:	00c0      	lsls	r0, r0, #3
 8007d3c:	4281      	cmp	r1, r0
 8007d3e:	d143      	bne.n	8007dc8 <_scanf_float+0x1b8>
 8007d40:	496f      	ldr	r1, [pc, #444]	; (8007f00 <_scanf_float+0x2f0>)
 8007d42:	3401      	adds	r4, #1
 8007d44:	400a      	ands	r2, r1
 8007d46:	6032      	str	r2, [r6, #0]
 8007d48:	e032      	b.n	8007db0 <_scanf_float+0x1a0>
 8007d4a:	2b59      	cmp	r3, #89	; 0x59
 8007d4c:	d023      	beq.n	8007d96 <_scanf_float+0x186>
 8007d4e:	2b61      	cmp	r3, #97	; 0x61
 8007d50:	d0dd      	beq.n	8007d0e <_scanf_float+0xfe>
 8007d52:	e797      	b.n	8007c84 <_scanf_float+0x74>
 8007d54:	2b6e      	cmp	r3, #110	; 0x6e
 8007d56:	d0e6      	beq.n	8007d26 <_scanf_float+0x116>
 8007d58:	d818      	bhi.n	8007d8c <_scanf_float+0x17c>
 8007d5a:	2b66      	cmp	r3, #102	; 0x66
 8007d5c:	d043      	beq.n	8007de6 <_scanf_float+0x1d6>
 8007d5e:	2b69      	cmp	r3, #105	; 0x69
 8007d60:	d000      	beq.n	8007d64 <_scanf_float+0x154>
 8007d62:	e78f      	b.n	8007c84 <_scanf_float+0x74>
 8007d64:	2f00      	cmp	r7, #0
 8007d66:	d137      	bne.n	8007dd8 <_scanf_float+0x1c8>
 8007d68:	9a01      	ldr	r2, [sp, #4]
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	d000      	beq.n	8007d70 <_scanf_float+0x160>
 8007d6e:	e78c      	b.n	8007c8a <_scanf_float+0x7a>
 8007d70:	21e0      	movs	r1, #224	; 0xe0
 8007d72:	20e0      	movs	r0, #224	; 0xe0
 8007d74:	6832      	ldr	r2, [r6, #0]
 8007d76:	00c9      	lsls	r1, r1, #3
 8007d78:	4011      	ands	r1, r2
 8007d7a:	00c0      	lsls	r0, r0, #3
 8007d7c:	4281      	cmp	r1, r0
 8007d7e:	d000      	beq.n	8007d82 <_scanf_float+0x172>
 8007d80:	e787      	b.n	8007c92 <_scanf_float+0x82>
 8007d82:	495f      	ldr	r1, [pc, #380]	; (8007f00 <_scanf_float+0x2f0>)
 8007d84:	3701      	adds	r7, #1
 8007d86:	400a      	ands	r2, r1
 8007d88:	6032      	str	r2, [r6, #0]
 8007d8a:	e011      	b.n	8007db0 <_scanf_float+0x1a0>
 8007d8c:	2b74      	cmp	r3, #116	; 0x74
 8007d8e:	d02f      	beq.n	8007df0 <_scanf_float+0x1e0>
 8007d90:	2b79      	cmp	r3, #121	; 0x79
 8007d92:	d000      	beq.n	8007d96 <_scanf_float+0x186>
 8007d94:	e776      	b.n	8007c84 <_scanf_float+0x74>
 8007d96:	2f07      	cmp	r7, #7
 8007d98:	d000      	beq.n	8007d9c <_scanf_float+0x18c>
 8007d9a:	e773      	b.n	8007c84 <_scanf_float+0x74>
 8007d9c:	2708      	movs	r7, #8
 8007d9e:	e007      	b.n	8007db0 <_scanf_float+0x1a0>
 8007da0:	19e2      	adds	r2, r4, r7
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	d000      	beq.n	8007da8 <_scanf_float+0x198>
 8007da6:	e76d      	b.n	8007c84 <_scanf_float+0x74>
 8007da8:	4a56      	ldr	r2, [pc, #344]	; (8007f04 <_scanf_float+0x2f4>)
 8007daa:	6831      	ldr	r1, [r6, #0]
 8007dac:	400a      	ands	r2, r1
 8007dae:	6032      	str	r2, [r6, #0]
 8007db0:	702b      	strb	r3, [r5, #0]
 8007db2:	3501      	adds	r5, #1
 8007db4:	e790      	b.n	8007cd8 <_scanf_float+0xc8>
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	420a      	tst	r2, r1
 8007dbc:	d100      	bne.n	8007dc0 <_scanf_float+0x1b0>
 8007dbe:	e761      	b.n	8007c84 <_scanf_float+0x74>
 8007dc0:	438a      	bics	r2, r1
 8007dc2:	e7f4      	b.n	8007dae <_scanf_float+0x19e>
 8007dc4:	2c02      	cmp	r4, #2
 8007dc6:	d041      	beq.n	8007e4c <_scanf_float+0x23c>
 8007dc8:	2f01      	cmp	r7, #1
 8007dca:	d002      	beq.n	8007dd2 <_scanf_float+0x1c2>
 8007dcc:	2f04      	cmp	r7, #4
 8007dce:	d000      	beq.n	8007dd2 <_scanf_float+0x1c2>
 8007dd0:	e758      	b.n	8007c84 <_scanf_float+0x74>
 8007dd2:	3701      	adds	r7, #1
 8007dd4:	b2ff      	uxtb	r7, r7
 8007dd6:	e7eb      	b.n	8007db0 <_scanf_float+0x1a0>
 8007dd8:	2102      	movs	r1, #2
 8007dda:	1efa      	subs	r2, r7, #3
 8007ddc:	438a      	bics	r2, r1
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d0f6      	beq.n	8007dd2 <_scanf_float+0x1c2>
 8007de4:	e74e      	b.n	8007c84 <_scanf_float+0x74>
 8007de6:	2f02      	cmp	r7, #2
 8007de8:	d000      	beq.n	8007dec <_scanf_float+0x1dc>
 8007dea:	e74b      	b.n	8007c84 <_scanf_float+0x74>
 8007dec:	2703      	movs	r7, #3
 8007dee:	e7df      	b.n	8007db0 <_scanf_float+0x1a0>
 8007df0:	2f06      	cmp	r7, #6
 8007df2:	d000      	beq.n	8007df6 <_scanf_float+0x1e6>
 8007df4:	e746      	b.n	8007c84 <_scanf_float+0x74>
 8007df6:	2707      	movs	r7, #7
 8007df8:	e7da      	b.n	8007db0 <_scanf_float+0x1a0>
 8007dfa:	6832      	ldr	r2, [r6, #0]
 8007dfc:	0591      	lsls	r1, r2, #22
 8007dfe:	d400      	bmi.n	8007e02 <_scanf_float+0x1f2>
 8007e00:	e740      	b.n	8007c84 <_scanf_float+0x74>
 8007e02:	4941      	ldr	r1, [pc, #260]	; (8007f08 <_scanf_float+0x2f8>)
 8007e04:	400a      	ands	r2, r1
 8007e06:	6032      	str	r2, [r6, #0]
 8007e08:	9a01      	ldr	r2, [sp, #4]
 8007e0a:	9206      	str	r2, [sp, #24]
 8007e0c:	e7d0      	b.n	8007db0 <_scanf_float+0x1a0>
 8007e0e:	21a0      	movs	r1, #160	; 0xa0
 8007e10:	2080      	movs	r0, #128	; 0x80
 8007e12:	6832      	ldr	r2, [r6, #0]
 8007e14:	00c9      	lsls	r1, r1, #3
 8007e16:	4011      	ands	r1, r2
 8007e18:	00c0      	lsls	r0, r0, #3
 8007e1a:	4281      	cmp	r1, r0
 8007e1c:	d006      	beq.n	8007e2c <_scanf_float+0x21c>
 8007e1e:	4202      	tst	r2, r0
 8007e20:	d100      	bne.n	8007e24 <_scanf_float+0x214>
 8007e22:	e72f      	b.n	8007c84 <_scanf_float+0x74>
 8007e24:	9901      	ldr	r1, [sp, #4]
 8007e26:	2900      	cmp	r1, #0
 8007e28:	d100      	bne.n	8007e2c <_scanf_float+0x21c>
 8007e2a:	e732      	b.n	8007c92 <_scanf_float+0x82>
 8007e2c:	0591      	lsls	r1, r2, #22
 8007e2e:	d404      	bmi.n	8007e3a <_scanf_float+0x22a>
 8007e30:	9901      	ldr	r1, [sp, #4]
 8007e32:	9806      	ldr	r0, [sp, #24]
 8007e34:	9508      	str	r5, [sp, #32]
 8007e36:	1a09      	subs	r1, r1, r0
 8007e38:	9107      	str	r1, [sp, #28]
 8007e3a:	4931      	ldr	r1, [pc, #196]	; (8007f00 <_scanf_float+0x2f0>)
 8007e3c:	400a      	ands	r2, r1
 8007e3e:	21c0      	movs	r1, #192	; 0xc0
 8007e40:	0049      	lsls	r1, r1, #1
 8007e42:	430a      	orrs	r2, r1
 8007e44:	6032      	str	r2, [r6, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	9201      	str	r2, [sp, #4]
 8007e4a:	e7b1      	b.n	8007db0 <_scanf_float+0x1a0>
 8007e4c:	2403      	movs	r4, #3
 8007e4e:	e7af      	b.n	8007db0 <_scanf_float+0x1a0>
 8007e50:	23c0      	movs	r3, #192	; 0xc0
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	58f3      	ldr	r3, [r6, r3]
 8007e56:	9900      	ldr	r1, [sp, #0]
 8007e58:	9802      	ldr	r0, [sp, #8]
 8007e5a:	4798      	blx	r3
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d100      	bne.n	8007e62 <_scanf_float+0x252>
 8007e60:	e6f9      	b.n	8007c56 <_scanf_float+0x46>
 8007e62:	e70f      	b.n	8007c84 <_scanf_float+0x74>
 8007e64:	3d01      	subs	r5, #1
 8007e66:	5933      	ldr	r3, [r6, r4]
 8007e68:	7829      	ldrb	r1, [r5, #0]
 8007e6a:	9a00      	ldr	r2, [sp, #0]
 8007e6c:	9802      	ldr	r0, [sp, #8]
 8007e6e:	4798      	blx	r3
 8007e70:	6933      	ldr	r3, [r6, #16]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	6133      	str	r3, [r6, #16]
 8007e76:	e712      	b.n	8007c9e <_scanf_float+0x8e>
 8007e78:	1e7b      	subs	r3, r7, #1
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d826      	bhi.n	8007ecc <_scanf_float+0x2bc>
 8007e7e:	2f02      	cmp	r7, #2
 8007e80:	d839      	bhi.n	8007ef6 <_scanf_float+0x2e6>
 8007e82:	24be      	movs	r4, #190	; 0xbe
 8007e84:	0064      	lsls	r4, r4, #1
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	d800      	bhi.n	8007e8e <_scanf_float+0x27e>
 8007e8c:	e70b      	b.n	8007ca6 <_scanf_float+0x96>
 8007e8e:	3d01      	subs	r5, #1
 8007e90:	5933      	ldr	r3, [r6, r4]
 8007e92:	7829      	ldrb	r1, [r5, #0]
 8007e94:	9a00      	ldr	r2, [sp, #0]
 8007e96:	9802      	ldr	r0, [sp, #8]
 8007e98:	4798      	blx	r3
 8007e9a:	6933      	ldr	r3, [r6, #16]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	6133      	str	r3, [r6, #16]
 8007ea0:	e7f1      	b.n	8007e86 <_scanf_float+0x276>
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	9a00      	ldr	r2, [sp, #0]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	7819      	ldrb	r1, [r3, #0]
 8007eac:	23be      	movs	r3, #190	; 0xbe
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	58f3      	ldr	r3, [r6, r3]
 8007eb2:	9802      	ldr	r0, [sp, #8]
 8007eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb6:	4798      	blx	r3
 8007eb8:	6933      	ldr	r3, [r6, #16]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6133      	str	r3, [r6, #16]
 8007ebe:	3c01      	subs	r4, #1
 8007ec0:	b2e4      	uxtb	r4, r4
 8007ec2:	2c02      	cmp	r4, #2
 8007ec4:	d1ed      	bne.n	8007ea2 <_scanf_float+0x292>
 8007ec6:	3f03      	subs	r7, #3
 8007ec8:	b2ff      	uxtb	r7, r7
 8007eca:	1bed      	subs	r5, r5, r7
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	05da      	lsls	r2, r3, #23
 8007ed0:	d537      	bpl.n	8007f42 <_scanf_float+0x332>
 8007ed2:	055b      	lsls	r3, r3, #21
 8007ed4:	d51a      	bpl.n	8007f0c <_scanf_float+0x2fc>
 8007ed6:	24be      	movs	r4, #190	; 0xbe
 8007ed8:	0064      	lsls	r4, r4, #1
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	429d      	cmp	r5, r3
 8007ede:	d800      	bhi.n	8007ee2 <_scanf_float+0x2d2>
 8007ee0:	e6e1      	b.n	8007ca6 <_scanf_float+0x96>
 8007ee2:	3d01      	subs	r5, #1
 8007ee4:	5933      	ldr	r3, [r6, r4]
 8007ee6:	7829      	ldrb	r1, [r5, #0]
 8007ee8:	9a00      	ldr	r2, [sp, #0]
 8007eea:	9802      	ldr	r0, [sp, #8]
 8007eec:	4798      	blx	r3
 8007eee:	6933      	ldr	r3, [r6, #16]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	6133      	str	r3, [r6, #16]
 8007ef4:	e7f1      	b.n	8007eda <_scanf_float+0x2ca>
 8007ef6:	003c      	movs	r4, r7
 8007ef8:	9504      	str	r5, [sp, #16]
 8007efa:	e7e0      	b.n	8007ebe <_scanf_float+0x2ae>
 8007efc:	fffffeff 	.word	0xfffffeff
 8007f00:	fffff87f 	.word	0xfffff87f
 8007f04:	fffffe7f 	.word	0xfffffe7f
 8007f08:	fffffd7f 	.word	0xfffffd7f
 8007f0c:	6933      	ldr	r3, [r6, #16]
 8007f0e:	1e6c      	subs	r4, r5, #1
 8007f10:	7821      	ldrb	r1, [r4, #0]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	6133      	str	r3, [r6, #16]
 8007f16:	2965      	cmp	r1, #101	; 0x65
 8007f18:	d00c      	beq.n	8007f34 <_scanf_float+0x324>
 8007f1a:	2945      	cmp	r1, #69	; 0x45
 8007f1c:	d00a      	beq.n	8007f34 <_scanf_float+0x324>
 8007f1e:	23be      	movs	r3, #190	; 0xbe
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	58f3      	ldr	r3, [r6, r3]
 8007f24:	9a00      	ldr	r2, [sp, #0]
 8007f26:	9802      	ldr	r0, [sp, #8]
 8007f28:	4798      	blx	r3
 8007f2a:	6933      	ldr	r3, [r6, #16]
 8007f2c:	1eac      	subs	r4, r5, #2
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	7821      	ldrb	r1, [r4, #0]
 8007f32:	6133      	str	r3, [r6, #16]
 8007f34:	23be      	movs	r3, #190	; 0xbe
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	58f3      	ldr	r3, [r6, r3]
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	9802      	ldr	r0, [sp, #8]
 8007f3e:	4798      	blx	r3
 8007f40:	0025      	movs	r5, r4
 8007f42:	2710      	movs	r7, #16
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	401f      	ands	r7, r3
 8007f48:	d15b      	bne.n	8008002 <_scanf_float+0x3f2>
 8007f4a:	23c0      	movs	r3, #192	; 0xc0
 8007f4c:	702f      	strb	r7, [r5, #0]
 8007f4e:	6832      	ldr	r2, [r6, #0]
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4013      	ands	r3, r2
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	00d2      	lsls	r2, r2, #3
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d11b      	bne.n	8007f94 <_scanf_float+0x384>
 8007f5c:	9a06      	ldr	r2, [sp, #24]
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	425a      	negs	r2, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d122      	bne.n	8007fae <_scanf_float+0x39e>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	9903      	ldr	r1, [sp, #12]
 8007f6c:	9802      	ldr	r0, [sp, #8]
 8007f6e:	f000 fee3 	bl	8008d38 <_strtod_r>
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	0004      	movs	r4, r0
 8007f76:	6830      	ldr	r0, [r6, #0]
 8007f78:	000d      	movs	r5, r1
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	0782      	lsls	r2, r0, #30
 8007f7e:	d523      	bpl.n	8007fc8 <_scanf_float+0x3b8>
 8007f80:	1d1a      	adds	r2, r3, #4
 8007f82:	9905      	ldr	r1, [sp, #20]
 8007f84:	600a      	str	r2, [r1, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	601c      	str	r4, [r3, #0]
 8007f8a:	605d      	str	r5, [r3, #4]
 8007f8c:	68f3      	ldr	r3, [r6, #12]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60f3      	str	r3, [r6, #12]
 8007f92:	e689      	b.n	8007ca8 <_scanf_float+0x98>
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0e6      	beq.n	8007f68 <_scanf_float+0x358>
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	003a      	movs	r2, r7
 8007f9e:	1c59      	adds	r1, r3, #1
 8007fa0:	9802      	ldr	r0, [sp, #8]
 8007fa2:	230a      	movs	r3, #10
 8007fa4:	f000 ff58 	bl	8008e58 <_strtol_r>
 8007fa8:	9b07      	ldr	r3, [sp, #28]
 8007faa:	9d08      	ldr	r5, [sp, #32]
 8007fac:	1ac2      	subs	r2, r0, r3
 8007fae:	0033      	movs	r3, r6
 8007fb0:	3370      	adds	r3, #112	; 0x70
 8007fb2:	33ff      	adds	r3, #255	; 0xff
 8007fb4:	429d      	cmp	r5, r3
 8007fb6:	d302      	bcc.n	8007fbe <_scanf_float+0x3ae>
 8007fb8:	0035      	movs	r5, r6
 8007fba:	356f      	adds	r5, #111	; 0x6f
 8007fbc:	35ff      	adds	r5, #255	; 0xff
 8007fbe:	4912      	ldr	r1, [pc, #72]	; (8008008 <_scanf_float+0x3f8>)
 8007fc0:	0028      	movs	r0, r5
 8007fc2:	f000 f859 	bl	8008078 <siprintf>
 8007fc6:	e7cf      	b.n	8007f68 <_scanf_float+0x358>
 8007fc8:	2104      	movs	r1, #4
 8007fca:	4008      	ands	r0, r1
 8007fcc:	1d1a      	adds	r2, r3, #4
 8007fce:	9001      	str	r0, [sp, #4]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d1d6      	bne.n	8007f82 <_scanf_float+0x372>
 8007fd4:	9905      	ldr	r1, [sp, #20]
 8007fd6:	0020      	movs	r0, r4
 8007fd8:	600a      	str	r2, [r1, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	0022      	movs	r2, r4
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	0029      	movs	r1, r5
 8007fe2:	002b      	movs	r3, r5
 8007fe4:	f7fa f8a6 	bl	8002134 <__aeabi_dcmpun>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d005      	beq.n	8007ff8 <_scanf_float+0x3e8>
 8007fec:	9801      	ldr	r0, [sp, #4]
 8007fee:	f000 f80d 	bl	800800c <nanf>
 8007ff2:	9b00      	ldr	r3, [sp, #0]
 8007ff4:	6018      	str	r0, [r3, #0]
 8007ff6:	e7c9      	b.n	8007f8c <_scanf_float+0x37c>
 8007ff8:	0020      	movs	r0, r4
 8007ffa:	0029      	movs	r1, r5
 8007ffc:	f7fa f9aa 	bl	8002354 <__aeabi_d2f>
 8008000:	e7f7      	b.n	8007ff2 <_scanf_float+0x3e2>
 8008002:	2700      	movs	r7, #0
 8008004:	e650      	b.n	8007ca8 <_scanf_float+0x98>
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	0800b390 	.word	0x0800b390

0800800c <nanf>:
 800800c:	4800      	ldr	r0, [pc, #0]	; (8008010 <nanf+0x4>)
 800800e:	4770      	bx	lr
 8008010:	7fc00000 	.word	0x7fc00000

08008014 <sniprintf>:
 8008014:	b40c      	push	{r2, r3}
 8008016:	b530      	push	{r4, r5, lr}
 8008018:	4b16      	ldr	r3, [pc, #88]	; (8008074 <sniprintf+0x60>)
 800801a:	b09d      	sub	sp, #116	; 0x74
 800801c:	1e0c      	subs	r4, r1, #0
 800801e:	681d      	ldr	r5, [r3, #0]
 8008020:	da08      	bge.n	8008034 <sniprintf+0x20>
 8008022:	238b      	movs	r3, #139	; 0x8b
 8008024:	2001      	movs	r0, #1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	4240      	negs	r0, r0
 800802a:	b01d      	add	sp, #116	; 0x74
 800802c:	bc30      	pop	{r4, r5}
 800802e:	bc08      	pop	{r3}
 8008030:	b002      	add	sp, #8
 8008032:	4718      	bx	r3
 8008034:	2382      	movs	r3, #130	; 0x82
 8008036:	a902      	add	r1, sp, #8
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	818b      	strh	r3, [r1, #12]
 800803c:	2300      	movs	r3, #0
 800803e:	9002      	str	r0, [sp, #8]
 8008040:	6108      	str	r0, [r1, #16]
 8008042:	429c      	cmp	r4, r3
 8008044:	d000      	beq.n	8008048 <sniprintf+0x34>
 8008046:	1e63      	subs	r3, r4, #1
 8008048:	608b      	str	r3, [r1, #8]
 800804a:	614b      	str	r3, [r1, #20]
 800804c:	2301      	movs	r3, #1
 800804e:	425b      	negs	r3, r3
 8008050:	81cb      	strh	r3, [r1, #14]
 8008052:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008054:	ab21      	add	r3, sp, #132	; 0x84
 8008056:	0028      	movs	r0, r5
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	f002 fdeb 	bl	800ac34 <_svfiprintf_r>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	da01      	bge.n	8008066 <sniprintf+0x52>
 8008062:	238b      	movs	r3, #139	; 0x8b
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	2c00      	cmp	r4, #0
 8008068:	d0df      	beq.n	800802a <sniprintf+0x16>
 800806a:	2300      	movs	r3, #0
 800806c:	9a02      	ldr	r2, [sp, #8]
 800806e:	7013      	strb	r3, [r2, #0]
 8008070:	e7db      	b.n	800802a <sniprintf+0x16>
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	20000018 	.word	0x20000018

08008078 <siprintf>:
 8008078:	b40e      	push	{r1, r2, r3}
 800807a:	b500      	push	{lr}
 800807c:	490b      	ldr	r1, [pc, #44]	; (80080ac <siprintf+0x34>)
 800807e:	b09c      	sub	sp, #112	; 0x70
 8008080:	ab1d      	add	r3, sp, #116	; 0x74
 8008082:	9002      	str	r0, [sp, #8]
 8008084:	9006      	str	r0, [sp, #24]
 8008086:	9107      	str	r1, [sp, #28]
 8008088:	9104      	str	r1, [sp, #16]
 800808a:	4809      	ldr	r0, [pc, #36]	; (80080b0 <siprintf+0x38>)
 800808c:	4909      	ldr	r1, [pc, #36]	; (80080b4 <siprintf+0x3c>)
 800808e:	cb04      	ldmia	r3!, {r2}
 8008090:	9105      	str	r1, [sp, #20]
 8008092:	6800      	ldr	r0, [r0, #0]
 8008094:	a902      	add	r1, sp, #8
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	f002 fdcc 	bl	800ac34 <_svfiprintf_r>
 800809c:	2300      	movs	r3, #0
 800809e:	9a02      	ldr	r2, [sp, #8]
 80080a0:	7013      	strb	r3, [r2, #0]
 80080a2:	b01c      	add	sp, #112	; 0x70
 80080a4:	bc08      	pop	{r3}
 80080a6:	b003      	add	sp, #12
 80080a8:	4718      	bx	r3
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	7fffffff 	.word	0x7fffffff
 80080b0:	20000018 	.word	0x20000018
 80080b4:	ffff0208 	.word	0xffff0208

080080b8 <sulp>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	0016      	movs	r6, r2
 80080bc:	000d      	movs	r5, r1
 80080be:	f002 fb7b 	bl	800a7b8 <__ulp>
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	d00d      	beq.n	80080e2 <sulp+0x2a>
 80080c6:	236b      	movs	r3, #107	; 0x6b
 80080c8:	006a      	lsls	r2, r5, #1
 80080ca:	0d52      	lsrs	r2, r2, #21
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dd07      	ble.n	80080e2 <sulp+0x2a>
 80080d2:	2400      	movs	r4, #0
 80080d4:	4a03      	ldr	r2, [pc, #12]	; (80080e4 <sulp+0x2c>)
 80080d6:	051b      	lsls	r3, r3, #20
 80080d8:	189d      	adds	r5, r3, r2
 80080da:	002b      	movs	r3, r5
 80080dc:	0022      	movs	r2, r4
 80080de:	f7f9 fa6f 	bl	80015c0 <__aeabi_dmul>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	3ff00000 	.word	0x3ff00000

080080e8 <_strtod_l>:
 80080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ea:	b0a7      	sub	sp, #156	; 0x9c
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9004      	str	r0, [sp, #16]
 80080f2:	9807      	ldr	r0, [sp, #28]
 80080f4:	9322      	str	r3, [sp, #136]	; 0x88
 80080f6:	9106      	str	r1, [sp, #24]
 80080f8:	921d      	str	r2, [sp, #116]	; 0x74
 80080fa:	f002 f857 	bl	800a1ac <__localeconv_l>
 80080fe:	0005      	movs	r5, r0
 8008100:	6800      	ldr	r0, [r0, #0]
 8008102:	f7f8 f801 	bl	8000108 <strlen>
 8008106:	2600      	movs	r6, #0
 8008108:	2700      	movs	r7, #0
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	9005      	str	r0, [sp, #20]
 800810e:	9321      	str	r3, [sp, #132]	; 0x84
 8008110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	2a0d      	cmp	r2, #13
 8008116:	d839      	bhi.n	800818c <_strtod_l+0xa4>
 8008118:	2a09      	cmp	r2, #9
 800811a:	d23d      	bcs.n	8008198 <_strtod_l+0xb0>
 800811c:	2a00      	cmp	r2, #0
 800811e:	d044      	beq.n	80081aa <_strtod_l+0xc2>
 8008120:	2300      	movs	r3, #0
 8008122:	9313      	str	r3, [sp, #76]	; 0x4c
 8008124:	2200      	movs	r2, #0
 8008126:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8008128:	920c      	str	r2, [sp, #48]	; 0x30
 800812a:	7823      	ldrb	r3, [r4, #0]
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d000      	beq.n	8008132 <_strtod_l+0x4a>
 8008130:	e07e      	b.n	8008230 <_strtod_l+0x148>
 8008132:	7863      	ldrb	r3, [r4, #1]
 8008134:	2b58      	cmp	r3, #88	; 0x58
 8008136:	d002      	beq.n	800813e <_strtod_l+0x56>
 8008138:	2b78      	cmp	r3, #120	; 0x78
 800813a:	d000      	beq.n	800813e <_strtod_l+0x56>
 800813c:	e06e      	b.n	800821c <_strtod_l+0x134>
 800813e:	9b07      	ldr	r3, [sp, #28]
 8008140:	4a96      	ldr	r2, [pc, #600]	; (800839c <_strtod_l+0x2b4>)
 8008142:	9302      	str	r3, [sp, #8]
 8008144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008146:	a921      	add	r1, sp, #132	; 0x84
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	ab22      	add	r3, sp, #136	; 0x88
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	9804      	ldr	r0, [sp, #16]
 8008150:	ab23      	add	r3, sp, #140	; 0x8c
 8008152:	f001 fd40 	bl	8009bd6 <__gethex>
 8008156:	2507      	movs	r5, #7
 8008158:	9005      	str	r0, [sp, #20]
 800815a:	4005      	ands	r5, r0
 800815c:	d005      	beq.n	800816a <_strtod_l+0x82>
 800815e:	2d06      	cmp	r5, #6
 8008160:	d12f      	bne.n	80081c2 <_strtod_l+0xda>
 8008162:	2300      	movs	r3, #0
 8008164:	3401      	adds	r4, #1
 8008166:	9421      	str	r4, [sp, #132]	; 0x84
 8008168:	9313      	str	r3, [sp, #76]	; 0x4c
 800816a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <_strtod_l+0x8e>
 8008170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008172:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01d      	beq.n	80081b8 <_strtod_l+0xd0>
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	0032      	movs	r2, r6
 8008180:	061b      	lsls	r3, r3, #24
 8008182:	18fb      	adds	r3, r7, r3
 8008184:	0010      	movs	r0, r2
 8008186:	0019      	movs	r1, r3
 8008188:	b027      	add	sp, #156	; 0x9c
 800818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818c:	2a2b      	cmp	r2, #43	; 0x2b
 800818e:	d016      	beq.n	80081be <_strtod_l+0xd6>
 8008190:	2a2d      	cmp	r2, #45	; 0x2d
 8008192:	d003      	beq.n	800819c <_strtod_l+0xb4>
 8008194:	2a20      	cmp	r2, #32
 8008196:	d1c3      	bne.n	8008120 <_strtod_l+0x38>
 8008198:	3301      	adds	r3, #1
 800819a:	e7b8      	b.n	800810e <_strtod_l+0x26>
 800819c:	2201      	movs	r2, #1
 800819e:	9213      	str	r2, [sp, #76]	; 0x4c
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	9221      	str	r2, [sp, #132]	; 0x84
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1bc      	bne.n	8008124 <_strtod_l+0x3c>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	9321      	str	r3, [sp, #132]	; 0x84
 80081ae:	2300      	movs	r3, #0
 80081b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80081b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1db      	bne.n	8008170 <_strtod_l+0x88>
 80081b8:	0032      	movs	r2, r6
 80081ba:	003b      	movs	r3, r7
 80081bc:	e7e2      	b.n	8008184 <_strtod_l+0x9c>
 80081be:	2200      	movs	r2, #0
 80081c0:	e7ed      	b.n	800819e <_strtod_l+0xb6>
 80081c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d007      	beq.n	80081d8 <_strtod_l+0xf0>
 80081c8:	2135      	movs	r1, #53	; 0x35
 80081ca:	a824      	add	r0, sp, #144	; 0x90
 80081cc:	f002 fbe1 	bl	800a992 <__copybits>
 80081d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081d2:	9804      	ldr	r0, [sp, #16]
 80081d4:	f002 f857 	bl	800a286 <_Bfree>
 80081d8:	1e68      	subs	r0, r5, #1
 80081da:	2804      	cmp	r0, #4
 80081dc:	d806      	bhi.n	80081ec <_strtod_l+0x104>
 80081de:	f7f7 ff9b 	bl	8000118 <__gnu_thumb1_case_uqi>
 80081e2:	030c      	.short	0x030c
 80081e4:	1917      	.short	0x1917
 80081e6:	0c          	.byte	0x0c
 80081e7:	00          	.byte	0x00
 80081e8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80081ea:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80081ec:	9b05      	ldr	r3, [sp, #20]
 80081ee:	071b      	lsls	r3, r3, #28
 80081f0:	d5bb      	bpl.n	800816a <_strtod_l+0x82>
 80081f2:	2380      	movs	r3, #128	; 0x80
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	431f      	orrs	r7, r3
 80081f8:	e7b7      	b.n	800816a <_strtod_l+0x82>
 80081fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80081fc:	4a68      	ldr	r2, [pc, #416]	; (80083a0 <_strtod_l+0x2b8>)
 80081fe:	4969      	ldr	r1, [pc, #420]	; (80083a4 <_strtod_l+0x2bc>)
 8008200:	401a      	ands	r2, r3
 8008202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008204:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008206:	185b      	adds	r3, r3, r1
 8008208:	051b      	lsls	r3, r3, #20
 800820a:	431a      	orrs	r2, r3
 800820c:	0017      	movs	r7, r2
 800820e:	e7ed      	b.n	80081ec <_strtod_l+0x104>
 8008210:	4f65      	ldr	r7, [pc, #404]	; (80083a8 <_strtod_l+0x2c0>)
 8008212:	e7eb      	b.n	80081ec <_strtod_l+0x104>
 8008214:	2601      	movs	r6, #1
 8008216:	4f65      	ldr	r7, [pc, #404]	; (80083ac <_strtod_l+0x2c4>)
 8008218:	4276      	negs	r6, r6
 800821a:	e7e7      	b.n	80081ec <_strtod_l+0x104>
 800821c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	9221      	str	r2, [sp, #132]	; 0x84
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b30      	cmp	r3, #48	; 0x30
 8008226:	d0f9      	beq.n	800821c <_strtod_l+0x134>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d09e      	beq.n	800816a <_strtod_l+0x82>
 800822c:	2301      	movs	r3, #1
 800822e:	930c      	str	r3, [sp, #48]	; 0x30
 8008230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008232:	220a      	movs	r2, #10
 8008234:	9312      	str	r3, [sp, #72]	; 0x48
 8008236:	2300      	movs	r3, #0
 8008238:	930b      	str	r3, [sp, #44]	; 0x2c
 800823a:	9308      	str	r3, [sp, #32]
 800823c:	930a      	str	r3, [sp, #40]	; 0x28
 800823e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008240:	7804      	ldrb	r4, [r0, #0]
 8008242:	0023      	movs	r3, r4
 8008244:	3b30      	subs	r3, #48	; 0x30
 8008246:	b2d9      	uxtb	r1, r3
 8008248:	2909      	cmp	r1, #9
 800824a:	d934      	bls.n	80082b6 <_strtod_l+0x1ce>
 800824c:	9a05      	ldr	r2, [sp, #20]
 800824e:	6829      	ldr	r1, [r5, #0]
 8008250:	f002 fe00 	bl	800ae54 <strncmp>
 8008254:	2800      	cmp	r0, #0
 8008256:	d040      	beq.n	80082da <_strtod_l+0x1f2>
 8008258:	2000      	movs	r0, #0
 800825a:	0023      	movs	r3, r4
 800825c:	4684      	mov	ip, r0
 800825e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008260:	9007      	str	r0, [sp, #28]
 8008262:	9205      	str	r2, [sp, #20]
 8008264:	2220      	movs	r2, #32
 8008266:	0019      	movs	r1, r3
 8008268:	4391      	bics	r1, r2
 800826a:	000a      	movs	r2, r1
 800826c:	2100      	movs	r1, #0
 800826e:	2a45      	cmp	r2, #69	; 0x45
 8008270:	d000      	beq.n	8008274 <_strtod_l+0x18c>
 8008272:	e0bf      	b.n	80083f4 <_strtod_l+0x30c>
 8008274:	9b05      	ldr	r3, [sp, #20]
 8008276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008278:	4303      	orrs	r3, r0
 800827a:	4313      	orrs	r3, r2
 800827c:	428b      	cmp	r3, r1
 800827e:	d094      	beq.n	80081aa <_strtod_l+0xc2>
 8008280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008282:	9306      	str	r3, [sp, #24]
 8008284:	3301      	adds	r3, #1
 8008286:	9321      	str	r3, [sp, #132]	; 0x84
 8008288:	9b06      	ldr	r3, [sp, #24]
 800828a:	785b      	ldrb	r3, [r3, #1]
 800828c:	2b2b      	cmp	r3, #43	; 0x2b
 800828e:	d100      	bne.n	8008292 <_strtod_l+0x1aa>
 8008290:	e082      	b.n	8008398 <_strtod_l+0x2b0>
 8008292:	000c      	movs	r4, r1
 8008294:	2b2d      	cmp	r3, #45	; 0x2d
 8008296:	d105      	bne.n	80082a4 <_strtod_l+0x1bc>
 8008298:	2401      	movs	r4, #1
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	3302      	adds	r3, #2
 800829e:	9321      	str	r3, [sp, #132]	; 0x84
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	789b      	ldrb	r3, [r3, #2]
 80082a4:	001a      	movs	r2, r3
 80082a6:	3a30      	subs	r2, #48	; 0x30
 80082a8:	2a09      	cmp	r2, #9
 80082aa:	d800      	bhi.n	80082ae <_strtod_l+0x1c6>
 80082ac:	e084      	b.n	80083b8 <_strtod_l+0x2d0>
 80082ae:	9a06      	ldr	r2, [sp, #24]
 80082b0:	2100      	movs	r1, #0
 80082b2:	9221      	str	r2, [sp, #132]	; 0x84
 80082b4:	e09e      	b.n	80083f4 <_strtod_l+0x30c>
 80082b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082b8:	2908      	cmp	r1, #8
 80082ba:	dc09      	bgt.n	80082d0 <_strtod_l+0x1e8>
 80082bc:	9908      	ldr	r1, [sp, #32]
 80082be:	4351      	muls	r1, r2
 80082c0:	18cb      	adds	r3, r1, r3
 80082c2:	9308      	str	r3, [sp, #32]
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	3001      	adds	r0, #1
 80082c8:	3301      	adds	r3, #1
 80082ca:	930a      	str	r3, [sp, #40]	; 0x28
 80082cc:	9021      	str	r0, [sp, #132]	; 0x84
 80082ce:	e7b6      	b.n	800823e <_strtod_l+0x156>
 80082d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082d2:	4351      	muls	r1, r2
 80082d4:	18cb      	adds	r3, r1, r3
 80082d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d8:	e7f4      	b.n	80082c4 <_strtod_l+0x1dc>
 80082da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082dc:	9b05      	ldr	r3, [sp, #20]
 80082de:	4694      	mov	ip, r2
 80082e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082e2:	4463      	add	r3, ip
 80082e4:	9321      	str	r3, [sp, #132]	; 0x84
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d036      	beq.n	800835a <_strtod_l+0x272>
 80082ec:	4684      	mov	ip, r0
 80082ee:	9205      	str	r2, [sp, #20]
 80082f0:	001a      	movs	r2, r3
 80082f2:	3a30      	subs	r2, #48	; 0x30
 80082f4:	2a09      	cmp	r2, #9
 80082f6:	d912      	bls.n	800831e <_strtod_l+0x236>
 80082f8:	2201      	movs	r2, #1
 80082fa:	9207      	str	r2, [sp, #28]
 80082fc:	e7b2      	b.n	8008264 <_strtod_l+0x17c>
 80082fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008300:	3001      	adds	r0, #1
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	9221      	str	r2, [sp, #132]	; 0x84
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	d0f8      	beq.n	80082fe <_strtod_l+0x216>
 800830c:	001a      	movs	r2, r3
 800830e:	3a31      	subs	r2, #49	; 0x31
 8008310:	2a08      	cmp	r2, #8
 8008312:	d83c      	bhi.n	800838e <_strtod_l+0x2a6>
 8008314:	4684      	mov	ip, r0
 8008316:	2000      	movs	r0, #0
 8008318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800831a:	9005      	str	r0, [sp, #20]
 800831c:	9212      	str	r2, [sp, #72]	; 0x48
 800831e:	3b30      	subs	r3, #48	; 0x30
 8008320:	1c42      	adds	r2, r0, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d013      	beq.n	800834e <_strtod_l+0x266>
 8008326:	210a      	movs	r1, #10
 8008328:	4494      	add	ip, r2
 800832a:	9a05      	ldr	r2, [sp, #20]
 800832c:	1885      	adds	r5, r0, r2
 800832e:	42aa      	cmp	r2, r5
 8008330:	d115      	bne.n	800835e <_strtod_l+0x276>
 8008332:	9905      	ldr	r1, [sp, #20]
 8008334:	9a05      	ldr	r2, [sp, #20]
 8008336:	3101      	adds	r1, #1
 8008338:	1809      	adds	r1, r1, r0
 800833a:	1812      	adds	r2, r2, r0
 800833c:	9105      	str	r1, [sp, #20]
 800833e:	2a08      	cmp	r2, #8
 8008340:	dc1b      	bgt.n	800837a <_strtod_l+0x292>
 8008342:	220a      	movs	r2, #10
 8008344:	9908      	ldr	r1, [sp, #32]
 8008346:	434a      	muls	r2, r1
 8008348:	189b      	adds	r3, r3, r2
 800834a:	2200      	movs	r2, #0
 800834c:	9308      	str	r3, [sp, #32]
 800834e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008350:	0010      	movs	r0, r2
 8008352:	1c59      	adds	r1, r3, #1
 8008354:	9121      	str	r1, [sp, #132]	; 0x84
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	e7ca      	b.n	80082f0 <_strtod_l+0x208>
 800835a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800835c:	e7d4      	b.n	8008308 <_strtod_l+0x220>
 800835e:	1c54      	adds	r4, r2, #1
 8008360:	2a08      	cmp	r2, #8
 8008362:	dc04      	bgt.n	800836e <_strtod_l+0x286>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	434a      	muls	r2, r1
 8008368:	9208      	str	r2, [sp, #32]
 800836a:	0022      	movs	r2, r4
 800836c:	e7df      	b.n	800832e <_strtod_l+0x246>
 800836e:	2c10      	cmp	r4, #16
 8008370:	dcfb      	bgt.n	800836a <_strtod_l+0x282>
 8008372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008374:	434a      	muls	r2, r1
 8008376:	920b      	str	r2, [sp, #44]	; 0x2c
 8008378:	e7f7      	b.n	800836a <_strtod_l+0x282>
 800837a:	9905      	ldr	r1, [sp, #20]
 800837c:	2200      	movs	r2, #0
 800837e:	2910      	cmp	r1, #16
 8008380:	dce5      	bgt.n	800834e <_strtod_l+0x266>
 8008382:	210a      	movs	r1, #10
 8008384:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008386:	4341      	muls	r1, r0
 8008388:	185b      	adds	r3, r3, r1
 800838a:	930b      	str	r3, [sp, #44]	; 0x2c
 800838c:	e7df      	b.n	800834e <_strtod_l+0x266>
 800838e:	2200      	movs	r2, #0
 8008390:	4694      	mov	ip, r2
 8008392:	9205      	str	r2, [sp, #20]
 8008394:	3201      	adds	r2, #1
 8008396:	e7b0      	b.n	80082fa <_strtod_l+0x212>
 8008398:	000c      	movs	r4, r1
 800839a:	e77e      	b.n	800829a <_strtod_l+0x1b2>
 800839c:	0800b398 	.word	0x0800b398
 80083a0:	ffefffff 	.word	0xffefffff
 80083a4:	00000433 	.word	0x00000433
 80083a8:	7ff00000 	.word	0x7ff00000
 80083ac:	7fffffff 	.word	0x7fffffff
 80083b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	9221      	str	r2, [sp, #132]	; 0x84
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b30      	cmp	r3, #48	; 0x30
 80083ba:	d0f9      	beq.n	80083b0 <_strtod_l+0x2c8>
 80083bc:	001a      	movs	r2, r3
 80083be:	3a31      	subs	r2, #49	; 0x31
 80083c0:	2100      	movs	r1, #0
 80083c2:	2a08      	cmp	r2, #8
 80083c4:	d816      	bhi.n	80083f4 <_strtod_l+0x30c>
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80083ca:	930e      	str	r3, [sp, #56]	; 0x38
 80083cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	9121      	str	r1, [sp, #132]	; 0x84
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	001a      	movs	r2, r3
 80083d6:	3a30      	subs	r2, #48	; 0x30
 80083d8:	2a09      	cmp	r2, #9
 80083da:	d932      	bls.n	8008442 <_strtod_l+0x35a>
 80083dc:	1b4a      	subs	r2, r1, r5
 80083de:	4dad      	ldr	r5, [pc, #692]	; (8008694 <_strtod_l+0x5ac>)
 80083e0:	0029      	movs	r1, r5
 80083e2:	2a08      	cmp	r2, #8
 80083e4:	dc03      	bgt.n	80083ee <_strtod_l+0x306>
 80083e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083e8:	42a9      	cmp	r1, r5
 80083ea:	dd00      	ble.n	80083ee <_strtod_l+0x306>
 80083ec:	0029      	movs	r1, r5
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	d000      	beq.n	80083f4 <_strtod_l+0x30c>
 80083f2:	4249      	negs	r1, r1
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	d149      	bne.n	800848e <_strtod_l+0x3a6>
 80083fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083fc:	4310      	orrs	r0, r2
 80083fe:	d000      	beq.n	8008402 <_strtod_l+0x31a>
 8008400:	e6b3      	b.n	800816a <_strtod_l+0x82>
 8008402:	9a07      	ldr	r2, [sp, #28]
 8008404:	2a00      	cmp	r2, #0
 8008406:	d000      	beq.n	800840a <_strtod_l+0x322>
 8008408:	e6cf      	b.n	80081aa <_strtod_l+0xc2>
 800840a:	2b4e      	cmp	r3, #78	; 0x4e
 800840c:	d025      	beq.n	800845a <_strtod_l+0x372>
 800840e:	dc1f      	bgt.n	8008450 <_strtod_l+0x368>
 8008410:	2b49      	cmp	r3, #73	; 0x49
 8008412:	d000      	beq.n	8008416 <_strtod_l+0x32e>
 8008414:	e6c9      	b.n	80081aa <_strtod_l+0xc2>
 8008416:	49a0      	ldr	r1, [pc, #640]	; (8008698 <_strtod_l+0x5b0>)
 8008418:	a821      	add	r0, sp, #132	; 0x84
 800841a:	f001 fe19 	bl	800a050 <__match>
 800841e:	2800      	cmp	r0, #0
 8008420:	d100      	bne.n	8008424 <_strtod_l+0x33c>
 8008422:	e6c2      	b.n	80081aa <_strtod_l+0xc2>
 8008424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008426:	499d      	ldr	r1, [pc, #628]	; (800869c <_strtod_l+0x5b4>)
 8008428:	3b01      	subs	r3, #1
 800842a:	a821      	add	r0, sp, #132	; 0x84
 800842c:	9321      	str	r3, [sp, #132]	; 0x84
 800842e:	f001 fe0f 	bl	800a050 <__match>
 8008432:	2800      	cmp	r0, #0
 8008434:	d102      	bne.n	800843c <_strtod_l+0x354>
 8008436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008438:	3301      	adds	r3, #1
 800843a:	9321      	str	r3, [sp, #132]	; 0x84
 800843c:	4f98      	ldr	r7, [pc, #608]	; (80086a0 <_strtod_l+0x5b8>)
 800843e:	2600      	movs	r6, #0
 8008440:	e693      	b.n	800816a <_strtod_l+0x82>
 8008442:	220a      	movs	r2, #10
 8008444:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008446:	434a      	muls	r2, r1
 8008448:	18d2      	adds	r2, r2, r3
 800844a:	3a30      	subs	r2, #48	; 0x30
 800844c:	920e      	str	r2, [sp, #56]	; 0x38
 800844e:	e7bd      	b.n	80083cc <_strtod_l+0x2e4>
 8008450:	2b69      	cmp	r3, #105	; 0x69
 8008452:	d0e0      	beq.n	8008416 <_strtod_l+0x32e>
 8008454:	2b6e      	cmp	r3, #110	; 0x6e
 8008456:	d000      	beq.n	800845a <_strtod_l+0x372>
 8008458:	e6a7      	b.n	80081aa <_strtod_l+0xc2>
 800845a:	4992      	ldr	r1, [pc, #584]	; (80086a4 <_strtod_l+0x5bc>)
 800845c:	a821      	add	r0, sp, #132	; 0x84
 800845e:	f001 fdf7 	bl	800a050 <__match>
 8008462:	2800      	cmp	r0, #0
 8008464:	d100      	bne.n	8008468 <_strtod_l+0x380>
 8008466:	e6a0      	b.n	80081aa <_strtod_l+0xc2>
 8008468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b28      	cmp	r3, #40	; 0x28
 800846e:	d10c      	bne.n	800848a <_strtod_l+0x3a2>
 8008470:	aa24      	add	r2, sp, #144	; 0x90
 8008472:	498d      	ldr	r1, [pc, #564]	; (80086a8 <_strtod_l+0x5c0>)
 8008474:	a821      	add	r0, sp, #132	; 0x84
 8008476:	f001 fdff 	bl	800a078 <__hexnan>
 800847a:	2805      	cmp	r0, #5
 800847c:	d105      	bne.n	800848a <_strtod_l+0x3a2>
 800847e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008480:	4a87      	ldr	r2, [pc, #540]	; (80086a0 <_strtod_l+0x5b8>)
 8008482:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8008484:	431a      	orrs	r2, r3
 8008486:	0017      	movs	r7, r2
 8008488:	e66f      	b.n	800816a <_strtod_l+0x82>
 800848a:	4f88      	ldr	r7, [pc, #544]	; (80086ac <_strtod_l+0x5c4>)
 800848c:	e7d7      	b.n	800843e <_strtod_l+0x356>
 800848e:	4663      	mov	r3, ip
 8008490:	1acb      	subs	r3, r1, r3
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <_strtod_l+0x3b6>
 800849a:	9b05      	ldr	r3, [sp, #20]
 800849c:	930a      	str	r3, [sp, #40]	; 0x28
 800849e:	9c05      	ldr	r4, [sp, #20]
 80084a0:	2c10      	cmp	r4, #16
 80084a2:	dd00      	ble.n	80084a6 <_strtod_l+0x3be>
 80084a4:	2410      	movs	r4, #16
 80084a6:	9808      	ldr	r0, [sp, #32]
 80084a8:	f7f9 fed0 	bl	800224c <__aeabi_ui2d>
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	0006      	movs	r6, r0
 80084b0:	000f      	movs	r7, r1
 80084b2:	2b09      	cmp	r3, #9
 80084b4:	dc15      	bgt.n	80084e2 <_strtod_l+0x3fa>
 80084b6:	9b07      	ldr	r3, [sp, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d100      	bne.n	80084be <_strtod_l+0x3d6>
 80084bc:	e655      	b.n	800816a <_strtod_l+0x82>
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc00      	bgt.n	80084c6 <_strtod_l+0x3de>
 80084c4:	e07d      	b.n	80085c2 <_strtod_l+0x4da>
 80084c6:	2b16      	cmp	r3, #22
 80084c8:	dc62      	bgt.n	8008590 <_strtod_l+0x4a8>
 80084ca:	00dc      	lsls	r4, r3, #3
 80084cc:	4b78      	ldr	r3, [pc, #480]	; (80086b0 <_strtod_l+0x5c8>)
 80084ce:	0032      	movs	r2, r6
 80084d0:	1919      	adds	r1, r3, r4
 80084d2:	003b      	movs	r3, r7
 80084d4:	6808      	ldr	r0, [r1, #0]
 80084d6:	6849      	ldr	r1, [r1, #4]
 80084d8:	f7f9 f872 	bl	80015c0 <__aeabi_dmul>
 80084dc:	0006      	movs	r6, r0
 80084de:	000f      	movs	r7, r1
 80084e0:	e643      	b.n	800816a <_strtod_l+0x82>
 80084e2:	0022      	movs	r2, r4
 80084e4:	4b72      	ldr	r3, [pc, #456]	; (80086b0 <_strtod_l+0x5c8>)
 80084e6:	3a09      	subs	r2, #9
 80084e8:	00d2      	lsls	r2, r2, #3
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f7f9 f866 	bl	80015c0 <__aeabi_dmul>
 80084f4:	0006      	movs	r6, r0
 80084f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084f8:	000f      	movs	r7, r1
 80084fa:	f7f9 fea7 	bl	800224c <__aeabi_ui2d>
 80084fe:	000b      	movs	r3, r1
 8008500:	0002      	movs	r2, r0
 8008502:	0039      	movs	r1, r7
 8008504:	0030      	movs	r0, r6
 8008506:	f7f8 f935 	bl	8000774 <__aeabi_dadd>
 800850a:	9b05      	ldr	r3, [sp, #20]
 800850c:	0006      	movs	r6, r0
 800850e:	000f      	movs	r7, r1
 8008510:	2b0f      	cmp	r3, #15
 8008512:	ddd0      	ble.n	80084b6 <_strtod_l+0x3ce>
 8008514:	9b05      	ldr	r3, [sp, #20]
 8008516:	1b1c      	subs	r4, r3, r4
 8008518:	9b07      	ldr	r3, [sp, #28]
 800851a:	18e4      	adds	r4, r4, r3
 800851c:	2c00      	cmp	r4, #0
 800851e:	dc00      	bgt.n	8008522 <_strtod_l+0x43a>
 8008520:	e094      	b.n	800864c <_strtod_l+0x564>
 8008522:	230f      	movs	r3, #15
 8008524:	4023      	ands	r3, r4
 8008526:	d00a      	beq.n	800853e <_strtod_l+0x456>
 8008528:	4961      	ldr	r1, [pc, #388]	; (80086b0 <_strtod_l+0x5c8>)
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	18c9      	adds	r1, r1, r3
 800852e:	0032      	movs	r2, r6
 8008530:	6808      	ldr	r0, [r1, #0]
 8008532:	6849      	ldr	r1, [r1, #4]
 8008534:	003b      	movs	r3, r7
 8008536:	f7f9 f843 	bl	80015c0 <__aeabi_dmul>
 800853a:	0006      	movs	r6, r0
 800853c:	000f      	movs	r7, r1
 800853e:	230f      	movs	r3, #15
 8008540:	439c      	bics	r4, r3
 8008542:	d06e      	beq.n	8008622 <_strtod_l+0x53a>
 8008544:	3326      	adds	r3, #38	; 0x26
 8008546:	33ff      	adds	r3, #255	; 0xff
 8008548:	429c      	cmp	r4, r3
 800854a:	dd48      	ble.n	80085de <_strtod_l+0x4f6>
 800854c:	2400      	movs	r4, #0
 800854e:	9405      	str	r4, [sp, #20]
 8008550:	940b      	str	r4, [sp, #44]	; 0x2c
 8008552:	940a      	str	r4, [sp, #40]	; 0x28
 8008554:	2322      	movs	r3, #34	; 0x22
 8008556:	2600      	movs	r6, #0
 8008558:	9a04      	ldr	r2, [sp, #16]
 800855a:	4f51      	ldr	r7, [pc, #324]	; (80086a0 <_strtod_l+0x5b8>)
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008560:	42b3      	cmp	r3, r6
 8008562:	d100      	bne.n	8008566 <_strtod_l+0x47e>
 8008564:	e601      	b.n	800816a <_strtod_l+0x82>
 8008566:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008568:	9804      	ldr	r0, [sp, #16]
 800856a:	f001 fe8c 	bl	800a286 <_Bfree>
 800856e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008570:	9804      	ldr	r0, [sp, #16]
 8008572:	f001 fe88 	bl	800a286 <_Bfree>
 8008576:	9905      	ldr	r1, [sp, #20]
 8008578:	9804      	ldr	r0, [sp, #16]
 800857a:	f001 fe84 	bl	800a286 <_Bfree>
 800857e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008580:	9804      	ldr	r0, [sp, #16]
 8008582:	f001 fe80 	bl	800a286 <_Bfree>
 8008586:	0021      	movs	r1, r4
 8008588:	9804      	ldr	r0, [sp, #16]
 800858a:	f001 fe7c 	bl	800a286 <_Bfree>
 800858e:	e5ec      	b.n	800816a <_strtod_l+0x82>
 8008590:	2325      	movs	r3, #37	; 0x25
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	9a07      	ldr	r2, [sp, #28]
 8008598:	4293      	cmp	r3, r2
 800859a:	dbbb      	blt.n	8008514 <_strtod_l+0x42c>
 800859c:	230f      	movs	r3, #15
 800859e:	9a05      	ldr	r2, [sp, #20]
 80085a0:	4c43      	ldr	r4, [pc, #268]	; (80086b0 <_strtod_l+0x5c8>)
 80085a2:	1a9d      	subs	r5, r3, r2
 80085a4:	00e9      	lsls	r1, r5, #3
 80085a6:	1861      	adds	r1, r4, r1
 80085a8:	0032      	movs	r2, r6
 80085aa:	6808      	ldr	r0, [r1, #0]
 80085ac:	6849      	ldr	r1, [r1, #4]
 80085ae:	003b      	movs	r3, r7
 80085b0:	f7f9 f806 	bl	80015c0 <__aeabi_dmul>
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	1b5e      	subs	r6, r3, r5
 80085b8:	00f6      	lsls	r6, r6, #3
 80085ba:	19a6      	adds	r6, r4, r6
 80085bc:	6832      	ldr	r2, [r6, #0]
 80085be:	6873      	ldr	r3, [r6, #4]
 80085c0:	e78a      	b.n	80084d8 <_strtod_l+0x3f0>
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	3316      	adds	r3, #22
 80085c6:	dba5      	blt.n	8008514 <_strtod_l+0x42c>
 80085c8:	9b07      	ldr	r3, [sp, #28]
 80085ca:	0030      	movs	r0, r6
 80085cc:	00da      	lsls	r2, r3, #3
 80085ce:	4b38      	ldr	r3, [pc, #224]	; (80086b0 <_strtod_l+0x5c8>)
 80085d0:	0039      	movs	r1, r7
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f7f8 fbe8 	bl	8000dac <__aeabi_ddiv>
 80085dc:	e77e      	b.n	80084dc <_strtod_l+0x3f4>
 80085de:	2300      	movs	r3, #0
 80085e0:	0030      	movs	r0, r6
 80085e2:	0039      	movs	r1, r7
 80085e4:	001d      	movs	r5, r3
 80085e6:	1124      	asrs	r4, r4, #4
 80085e8:	2c01      	cmp	r4, #1
 80085ea:	dc1d      	bgt.n	8008628 <_strtod_l+0x540>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <_strtod_l+0x50c>
 80085f0:	0006      	movs	r6, r0
 80085f2:	000f      	movs	r7, r1
 80085f4:	4b2f      	ldr	r3, [pc, #188]	; (80086b4 <_strtod_l+0x5cc>)
 80085f6:	00ed      	lsls	r5, r5, #3
 80085f8:	18ff      	adds	r7, r7, r3
 80085fa:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <_strtod_l+0x5d0>)
 80085fc:	0032      	movs	r2, r6
 80085fe:	195d      	adds	r5, r3, r5
 8008600:	6828      	ldr	r0, [r5, #0]
 8008602:	6869      	ldr	r1, [r5, #4]
 8008604:	003b      	movs	r3, r7
 8008606:	f7f8 ffdb 	bl	80015c0 <__aeabi_dmul>
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <_strtod_l+0x5b8>)
 800860c:	4a2b      	ldr	r2, [pc, #172]	; (80086bc <_strtod_l+0x5d4>)
 800860e:	0006      	movs	r6, r0
 8008610:	400b      	ands	r3, r1
 8008612:	4293      	cmp	r3, r2
 8008614:	d89a      	bhi.n	800854c <_strtod_l+0x464>
 8008616:	4a2a      	ldr	r2, [pc, #168]	; (80086c0 <_strtod_l+0x5d8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d913      	bls.n	8008644 <_strtod_l+0x55c>
 800861c:	2601      	movs	r6, #1
 800861e:	4f29      	ldr	r7, [pc, #164]	; (80086c4 <_strtod_l+0x5dc>)
 8008620:	4276      	negs	r6, r6
 8008622:	2300      	movs	r3, #0
 8008624:	9306      	str	r3, [sp, #24]
 8008626:	e07b      	b.n	8008720 <_strtod_l+0x638>
 8008628:	2201      	movs	r2, #1
 800862a:	4214      	tst	r4, r2
 800862c:	d007      	beq.n	800863e <_strtod_l+0x556>
 800862e:	4a22      	ldr	r2, [pc, #136]	; (80086b8 <_strtod_l+0x5d0>)
 8008630:	00eb      	lsls	r3, r5, #3
 8008632:	189b      	adds	r3, r3, r2
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f7f8 ffc2 	bl	80015c0 <__aeabi_dmul>
 800863c:	2301      	movs	r3, #1
 800863e:	3501      	adds	r5, #1
 8008640:	1064      	asrs	r4, r4, #1
 8008642:	e7d1      	b.n	80085e8 <_strtod_l+0x500>
 8008644:	23d4      	movs	r3, #212	; 0xd4
 8008646:	049b      	lsls	r3, r3, #18
 8008648:	18cf      	adds	r7, r1, r3
 800864a:	e7ea      	b.n	8008622 <_strtod_l+0x53a>
 800864c:	2c00      	cmp	r4, #0
 800864e:	d0e8      	beq.n	8008622 <_strtod_l+0x53a>
 8008650:	230f      	movs	r3, #15
 8008652:	4264      	negs	r4, r4
 8008654:	4023      	ands	r3, r4
 8008656:	d00a      	beq.n	800866e <_strtod_l+0x586>
 8008658:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <_strtod_l+0x5c8>)
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	18d3      	adds	r3, r2, r3
 800865e:	0030      	movs	r0, r6
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	0039      	movs	r1, r7
 8008666:	f7f8 fba1 	bl	8000dac <__aeabi_ddiv>
 800866a:	0006      	movs	r6, r0
 800866c:	000f      	movs	r7, r1
 800866e:	1124      	asrs	r4, r4, #4
 8008670:	d0d7      	beq.n	8008622 <_strtod_l+0x53a>
 8008672:	2c1f      	cmp	r4, #31
 8008674:	dd28      	ble.n	80086c8 <_strtod_l+0x5e0>
 8008676:	2400      	movs	r4, #0
 8008678:	9405      	str	r4, [sp, #20]
 800867a:	940b      	str	r4, [sp, #44]	; 0x2c
 800867c:	940a      	str	r4, [sp, #40]	; 0x28
 800867e:	2322      	movs	r3, #34	; 0x22
 8008680:	9a04      	ldr	r2, [sp, #16]
 8008682:	2600      	movs	r6, #0
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008688:	2700      	movs	r7, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d000      	beq.n	8008690 <_strtod_l+0x5a8>
 800868e:	e76a      	b.n	8008566 <_strtod_l+0x47e>
 8008690:	e56b      	b.n	800816a <_strtod_l+0x82>
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	00004e1f 	.word	0x00004e1f
 8008698:	0800b361 	.word	0x0800b361
 800869c:	0800b3eb 	.word	0x0800b3eb
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	0800b369 	.word	0x0800b369
 80086a8:	0800b3ac 	.word	0x0800b3ac
 80086ac:	fff80000 	.word	0xfff80000
 80086b0:	0800b428 	.word	0x0800b428
 80086b4:	fcb00000 	.word	0xfcb00000
 80086b8:	0800b400 	.word	0x0800b400
 80086bc:	7ca00000 	.word	0x7ca00000
 80086c0:	7c900000 	.word	0x7c900000
 80086c4:	7fefffff 	.word	0x7fefffff
 80086c8:	2310      	movs	r3, #16
 80086ca:	4023      	ands	r3, r4
 80086cc:	9306      	str	r3, [sp, #24]
 80086ce:	d001      	beq.n	80086d4 <_strtod_l+0x5ec>
 80086d0:	236a      	movs	r3, #106	; 0x6a
 80086d2:	9306      	str	r3, [sp, #24]
 80086d4:	2300      	movs	r3, #0
 80086d6:	0030      	movs	r0, r6
 80086d8:	0039      	movs	r1, r7
 80086da:	001d      	movs	r5, r3
 80086dc:	2c00      	cmp	r4, #0
 80086de:	dd00      	ble.n	80086e2 <_strtod_l+0x5fa>
 80086e0:	e10e      	b.n	8008900 <_strtod_l+0x818>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <_strtod_l+0x602>
 80086e6:	0006      	movs	r6, r0
 80086e8:	000f      	movs	r7, r1
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00f      	beq.n	8008710 <_strtod_l+0x628>
 80086f0:	236b      	movs	r3, #107	; 0x6b
 80086f2:	0079      	lsls	r1, r7, #1
 80086f4:	0d49      	lsrs	r1, r1, #21
 80086f6:	003a      	movs	r2, r7
 80086f8:	1a5b      	subs	r3, r3, r1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd08      	ble.n	8008710 <_strtod_l+0x628>
 80086fe:	2b1f      	cmp	r3, #31
 8008700:	dc00      	bgt.n	8008704 <_strtod_l+0x61c>
 8008702:	e112      	b.n	800892a <_strtod_l+0x842>
 8008704:	2600      	movs	r6, #0
 8008706:	2b34      	cmp	r3, #52	; 0x34
 8008708:	dc00      	bgt.n	800870c <_strtod_l+0x624>
 800870a:	e107      	b.n	800891c <_strtod_l+0x834>
 800870c:	27dc      	movs	r7, #220	; 0xdc
 800870e:	04bf      	lsls	r7, r7, #18
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	0030      	movs	r0, r6
 8008716:	0039      	movs	r1, r7
 8008718:	f7f7 fe8e 	bl	8000438 <__aeabi_dcmpeq>
 800871c:	2800      	cmp	r0, #0
 800871e:	d1aa      	bne.n	8008676 <_strtod_l+0x58e>
 8008720:	9b08      	ldr	r3, [sp, #32]
 8008722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008728:	9b05      	ldr	r3, [sp, #20]
 800872a:	9804      	ldr	r0, [sp, #16]
 800872c:	f001 fe02 	bl	800a334 <__s2b>
 8008730:	900b      	str	r0, [sp, #44]	; 0x2c
 8008732:	2800      	cmp	r0, #0
 8008734:	d100      	bne.n	8008738 <_strtod_l+0x650>
 8008736:	e709      	b.n	800854c <_strtod_l+0x464>
 8008738:	9b07      	ldr	r3, [sp, #28]
 800873a:	9a07      	ldr	r2, [sp, #28]
 800873c:	17db      	asrs	r3, r3, #31
 800873e:	4252      	negs	r2, r2
 8008740:	4013      	ands	r3, r2
 8008742:	9315      	str	r3, [sp, #84]	; 0x54
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	2400      	movs	r4, #0
 8008748:	43db      	mvns	r3, r3
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	17db      	asrs	r3, r3, #31
 800874e:	401a      	ands	r2, r3
 8008750:	921c      	str	r2, [sp, #112]	; 0x70
 8008752:	9405      	str	r4, [sp, #20]
 8008754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008756:	9804      	ldr	r0, [sp, #16]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	f001 fd5c 	bl	800a216 <_Balloc>
 800875e:	900a      	str	r0, [sp, #40]	; 0x28
 8008760:	2800      	cmp	r0, #0
 8008762:	d100      	bne.n	8008766 <_strtod_l+0x67e>
 8008764:	e6f6      	b.n	8008554 <_strtod_l+0x46c>
 8008766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	310c      	adds	r1, #12
 800876e:	1c9a      	adds	r2, r3, #2
 8008770:	0092      	lsls	r2, r2, #2
 8008772:	300c      	adds	r0, #12
 8008774:	9308      	str	r3, [sp, #32]
 8008776:	f7fe fddb 	bl	8007330 <memcpy>
 800877a:	ab24      	add	r3, sp, #144	; 0x90
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	ab23      	add	r3, sp, #140	; 0x8c
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	0032      	movs	r2, r6
 8008784:	003b      	movs	r3, r7
 8008786:	9804      	ldr	r0, [sp, #16]
 8008788:	960e      	str	r6, [sp, #56]	; 0x38
 800878a:	970f      	str	r7, [sp, #60]	; 0x3c
 800878c:	f002 f886 	bl	800a89c <__d2b>
 8008790:	9022      	str	r0, [sp, #136]	; 0x88
 8008792:	2800      	cmp	r0, #0
 8008794:	d100      	bne.n	8008798 <_strtod_l+0x6b0>
 8008796:	e6dd      	b.n	8008554 <_strtod_l+0x46c>
 8008798:	2101      	movs	r1, #1
 800879a:	9804      	ldr	r0, [sp, #16]
 800879c:	f001 fe51 	bl	800a442 <__i2b>
 80087a0:	9005      	str	r0, [sp, #20]
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d100      	bne.n	80087a8 <_strtod_l+0x6c0>
 80087a6:	e6d5      	b.n	8008554 <_strtod_l+0x46c>
 80087a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da00      	bge.n	80087b0 <_strtod_l+0x6c8>
 80087ae:	e0c1      	b.n	8008934 <_strtod_l+0x84c>
 80087b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087b2:	189d      	adds	r5, r3, r2
 80087b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80087b6:	4694      	mov	ip, r2
 80087b8:	9906      	ldr	r1, [sp, #24]
 80087ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087bc:	1a5b      	subs	r3, r3, r1
 80087be:	2136      	movs	r1, #54	; 0x36
 80087c0:	189b      	adds	r3, r3, r2
 80087c2:	1a8a      	subs	r2, r1, r2
 80087c4:	49b2      	ldr	r1, [pc, #712]	; (8008a90 <_strtod_l+0x9a8>)
 80087c6:	3b01      	subs	r3, #1
 80087c8:	2001      	movs	r0, #1
 80087ca:	428b      	cmp	r3, r1
 80087cc:	db00      	blt.n	80087d0 <_strtod_l+0x6e8>
 80087ce:	e0bd      	b.n	800894c <_strtod_l+0x864>
 80087d0:	1ac9      	subs	r1, r1, r3
 80087d2:	1a52      	subs	r2, r2, r1
 80087d4:	291f      	cmp	r1, #31
 80087d6:	dd00      	ble.n	80087da <_strtod_l+0x6f2>
 80087d8:	e0b1      	b.n	800893e <_strtod_l+0x856>
 80087da:	4088      	lsls	r0, r1
 80087dc:	2300      	movs	r3, #0
 80087de:	9014      	str	r0, [sp, #80]	; 0x50
 80087e0:	9310      	str	r3, [sp, #64]	; 0x40
 80087e2:	18ab      	adds	r3, r5, r2
 80087e4:	9308      	str	r3, [sp, #32]
 80087e6:	0013      	movs	r3, r2
 80087e8:	9a06      	ldr	r2, [sp, #24]
 80087ea:	4463      	add	r3, ip
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	9a08      	ldr	r2, [sp, #32]
 80087f0:	930c      	str	r3, [sp, #48]	; 0x30
 80087f2:	002b      	movs	r3, r5
 80087f4:	4295      	cmp	r5, r2
 80087f6:	dd00      	ble.n	80087fa <_strtod_l+0x712>
 80087f8:	0013      	movs	r3, r2
 80087fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087fc:	4293      	cmp	r3, r2
 80087fe:	dd00      	ble.n	8008802 <_strtod_l+0x71a>
 8008800:	0013      	movs	r3, r2
 8008802:	2b00      	cmp	r3, #0
 8008804:	dd06      	ble.n	8008814 <_strtod_l+0x72c>
 8008806:	9a08      	ldr	r2, [sp, #32]
 8008808:	1aed      	subs	r5, r5, r3
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	9208      	str	r2, [sp, #32]
 800880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	920c      	str	r2, [sp, #48]	; 0x30
 8008814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008816:	2b00      	cmp	r3, #0
 8008818:	d017      	beq.n	800884a <_strtod_l+0x762>
 800881a:	001a      	movs	r2, r3
 800881c:	9905      	ldr	r1, [sp, #20]
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	f001 fea8 	bl	800a574 <__pow5mult>
 8008824:	9005      	str	r0, [sp, #20]
 8008826:	2800      	cmp	r0, #0
 8008828:	d100      	bne.n	800882c <_strtod_l+0x744>
 800882a:	e693      	b.n	8008554 <_strtod_l+0x46c>
 800882c:	0001      	movs	r1, r0
 800882e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008830:	9804      	ldr	r0, [sp, #16]
 8008832:	f001 fe0f 	bl	800a454 <__multiply>
 8008836:	9012      	str	r0, [sp, #72]	; 0x48
 8008838:	2800      	cmp	r0, #0
 800883a:	d100      	bne.n	800883e <_strtod_l+0x756>
 800883c:	e68a      	b.n	8008554 <_strtod_l+0x46c>
 800883e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008840:	9804      	ldr	r0, [sp, #16]
 8008842:	f001 fd20 	bl	800a286 <_Bfree>
 8008846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008848:	9322      	str	r3, [sp, #136]	; 0x88
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd00      	ble.n	8008852 <_strtod_l+0x76a>
 8008850:	e07f      	b.n	8008952 <_strtod_l+0x86a>
 8008852:	9b07      	ldr	r3, [sp, #28]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd08      	ble.n	800886a <_strtod_l+0x782>
 8008858:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800885a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800885c:	9804      	ldr	r0, [sp, #16]
 800885e:	f001 fe89 	bl	800a574 <__pow5mult>
 8008862:	900a      	str	r0, [sp, #40]	; 0x28
 8008864:	2800      	cmp	r0, #0
 8008866:	d100      	bne.n	800886a <_strtod_l+0x782>
 8008868:	e674      	b.n	8008554 <_strtod_l+0x46c>
 800886a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd08      	ble.n	8008882 <_strtod_l+0x79a>
 8008870:	001a      	movs	r2, r3
 8008872:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008874:	9804      	ldr	r0, [sp, #16]
 8008876:	f001 fecf 	bl	800a618 <__lshift>
 800887a:	900a      	str	r0, [sp, #40]	; 0x28
 800887c:	2800      	cmp	r0, #0
 800887e:	d100      	bne.n	8008882 <_strtod_l+0x79a>
 8008880:	e668      	b.n	8008554 <_strtod_l+0x46c>
 8008882:	2d00      	cmp	r5, #0
 8008884:	dd08      	ble.n	8008898 <_strtod_l+0x7b0>
 8008886:	002a      	movs	r2, r5
 8008888:	9905      	ldr	r1, [sp, #20]
 800888a:	9804      	ldr	r0, [sp, #16]
 800888c:	f001 fec4 	bl	800a618 <__lshift>
 8008890:	9005      	str	r0, [sp, #20]
 8008892:	2800      	cmp	r0, #0
 8008894:	d100      	bne.n	8008898 <_strtod_l+0x7b0>
 8008896:	e65d      	b.n	8008554 <_strtod_l+0x46c>
 8008898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800889c:	9804      	ldr	r0, [sp, #16]
 800889e:	f001 ff27 	bl	800a6f0 <__mdiff>
 80088a2:	1e04      	subs	r4, r0, #0
 80088a4:	d100      	bne.n	80088a8 <_strtod_l+0x7c0>
 80088a6:	e655      	b.n	8008554 <_strtod_l+0x46c>
 80088a8:	2500      	movs	r5, #0
 80088aa:	68c3      	ldr	r3, [r0, #12]
 80088ac:	9905      	ldr	r1, [sp, #20]
 80088ae:	60c5      	str	r5, [r0, #12]
 80088b0:	9312      	str	r3, [sp, #72]	; 0x48
 80088b2:	f001 ff03 	bl	800a6bc <__mcmp>
 80088b6:	42a8      	cmp	r0, r5
 80088b8:	da55      	bge.n	8008966 <_strtod_l+0x87e>
 80088ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088bc:	42ab      	cmp	r3, r5
 80088be:	d11b      	bne.n	80088f8 <_strtod_l+0x810>
 80088c0:	42ae      	cmp	r6, r5
 80088c2:	d119      	bne.n	80088f8 <_strtod_l+0x810>
 80088c4:	033b      	lsls	r3, r7, #12
 80088c6:	42ab      	cmp	r3, r5
 80088c8:	d116      	bne.n	80088f8 <_strtod_l+0x810>
 80088ca:	22d6      	movs	r2, #214	; 0xd6
 80088cc:	4b71      	ldr	r3, [pc, #452]	; (8008a94 <_strtod_l+0x9ac>)
 80088ce:	04d2      	lsls	r2, r2, #19
 80088d0:	403b      	ands	r3, r7
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d910      	bls.n	80088f8 <_strtod_l+0x810>
 80088d6:	6963      	ldr	r3, [r4, #20]
 80088d8:	42ab      	cmp	r3, r5
 80088da:	d102      	bne.n	80088e2 <_strtod_l+0x7fa>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	dd0a      	ble.n	80088f8 <_strtod_l+0x810>
 80088e2:	0021      	movs	r1, r4
 80088e4:	2201      	movs	r2, #1
 80088e6:	9804      	ldr	r0, [sp, #16]
 80088e8:	f001 fe96 	bl	800a618 <__lshift>
 80088ec:	9905      	ldr	r1, [sp, #20]
 80088ee:	0004      	movs	r4, r0
 80088f0:	f001 fee4 	bl	800a6bc <__mcmp>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	dc6b      	bgt.n	80089d0 <_strtod_l+0x8e8>
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d178      	bne.n	80089f0 <_strtod_l+0x908>
 80088fe:	e632      	b.n	8008566 <_strtod_l+0x47e>
 8008900:	2201      	movs	r2, #1
 8008902:	4214      	tst	r4, r2
 8008904:	d007      	beq.n	8008916 <_strtod_l+0x82e>
 8008906:	4a64      	ldr	r2, [pc, #400]	; (8008a98 <_strtod_l+0x9b0>)
 8008908:	00eb      	lsls	r3, r5, #3
 800890a:	18d3      	adds	r3, r2, r3
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f7f8 fe56 	bl	80015c0 <__aeabi_dmul>
 8008914:	2301      	movs	r3, #1
 8008916:	3501      	adds	r5, #1
 8008918:	1064      	asrs	r4, r4, #1
 800891a:	e6df      	b.n	80086dc <_strtod_l+0x5f4>
 800891c:	2101      	movs	r1, #1
 800891e:	3b20      	subs	r3, #32
 8008920:	4249      	negs	r1, r1
 8008922:	4099      	lsls	r1, r3
 8008924:	400a      	ands	r2, r1
 8008926:	0017      	movs	r7, r2
 8008928:	e6f2      	b.n	8008710 <_strtod_l+0x628>
 800892a:	2201      	movs	r2, #1
 800892c:	4252      	negs	r2, r2
 800892e:	409a      	lsls	r2, r3
 8008930:	4016      	ands	r6, r2
 8008932:	e6ed      	b.n	8008710 <_strtod_l+0x628>
 8008934:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008936:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008938:	1ad2      	subs	r2, r2, r3
 800893a:	4694      	mov	ip, r2
 800893c:	e73c      	b.n	80087b8 <_strtod_l+0x6d0>
 800893e:	4957      	ldr	r1, [pc, #348]	; (8008a9c <_strtod_l+0x9b4>)
 8008940:	1acb      	subs	r3, r1, r3
 8008942:	0001      	movs	r1, r0
 8008944:	4099      	lsls	r1, r3
 8008946:	9110      	str	r1, [sp, #64]	; 0x40
 8008948:	9014      	str	r0, [sp, #80]	; 0x50
 800894a:	e74a      	b.n	80087e2 <_strtod_l+0x6fa>
 800894c:	2300      	movs	r3, #0
 800894e:	9310      	str	r3, [sp, #64]	; 0x40
 8008950:	e7fa      	b.n	8008948 <_strtod_l+0x860>
 8008952:	9a08      	ldr	r2, [sp, #32]
 8008954:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008956:	9804      	ldr	r0, [sp, #16]
 8008958:	f001 fe5e 	bl	800a618 <__lshift>
 800895c:	9022      	str	r0, [sp, #136]	; 0x88
 800895e:	2800      	cmp	r0, #0
 8008960:	d000      	beq.n	8008964 <_strtod_l+0x87c>
 8008962:	e776      	b.n	8008852 <_strtod_l+0x76a>
 8008964:	e5f6      	b.n	8008554 <_strtod_l+0x46c>
 8008966:	970c      	str	r7, [sp, #48]	; 0x30
 8008968:	2800      	cmp	r0, #0
 800896a:	d000      	beq.n	800896e <_strtod_l+0x886>
 800896c:	e0a0      	b.n	8008ab0 <_strtod_l+0x9c8>
 800896e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008970:	033b      	lsls	r3, r7, #12
 8008972:	0b1b      	lsrs	r3, r3, #12
 8008974:	2a00      	cmp	r2, #0
 8008976:	d027      	beq.n	80089c8 <_strtod_l+0x8e0>
 8008978:	4a49      	ldr	r2, [pc, #292]	; (8008aa0 <_strtod_l+0x9b8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d157      	bne.n	8008a2e <_strtod_l+0x946>
 800897e:	2201      	movs	r2, #1
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	4252      	negs	r2, r2
 8008984:	0031      	movs	r1, r6
 8008986:	0010      	movs	r0, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <_strtod_l+0x8bc>
 800898c:	25d4      	movs	r5, #212	; 0xd4
 800898e:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <_strtod_l+0x9ac>)
 8008990:	04ed      	lsls	r5, r5, #19
 8008992:	403b      	ands	r3, r7
 8008994:	0010      	movs	r0, r2
 8008996:	42ab      	cmp	r3, r5
 8008998:	d804      	bhi.n	80089a4 <_strtod_l+0x8bc>
 800899a:	306c      	adds	r0, #108	; 0x6c
 800899c:	0d1b      	lsrs	r3, r3, #20
 800899e:	1ac3      	subs	r3, r0, r3
 80089a0:	409a      	lsls	r2, r3
 80089a2:	0010      	movs	r0, r2
 80089a4:	4281      	cmp	r1, r0
 80089a6:	d142      	bne.n	8008a2e <_strtod_l+0x946>
 80089a8:	4b3e      	ldr	r3, [pc, #248]	; (8008aa4 <_strtod_l+0x9bc>)
 80089aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d102      	bne.n	80089b6 <_strtod_l+0x8ce>
 80089b0:	1c4b      	adds	r3, r1, #1
 80089b2:	d100      	bne.n	80089b6 <_strtod_l+0x8ce>
 80089b4:	e5ce      	b.n	8008554 <_strtod_l+0x46c>
 80089b6:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <_strtod_l+0x9ac>)
 80089b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ba:	2600      	movs	r6, #0
 80089bc:	401a      	ands	r2, r3
 80089be:	0013      	movs	r3, r2
 80089c0:	2280      	movs	r2, #128	; 0x80
 80089c2:	0352      	lsls	r2, r2, #13
 80089c4:	189f      	adds	r7, r3, r2
 80089c6:	e797      	b.n	80088f8 <_strtod_l+0x810>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d130      	bne.n	8008a2e <_strtod_l+0x946>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	d12e      	bne.n	8008a2e <_strtod_l+0x946>
 80089d0:	9906      	ldr	r1, [sp, #24]
 80089d2:	003b      	movs	r3, r7
 80089d4:	4a2f      	ldr	r2, [pc, #188]	; (8008a94 <_strtod_l+0x9ac>)
 80089d6:	2900      	cmp	r1, #0
 80089d8:	d020      	beq.n	8008a1c <_strtod_l+0x934>
 80089da:	0011      	movs	r1, r2
 80089dc:	20d6      	movs	r0, #214	; 0xd6
 80089de:	4039      	ands	r1, r7
 80089e0:	04c0      	lsls	r0, r0, #19
 80089e2:	4281      	cmp	r1, r0
 80089e4:	dc1a      	bgt.n	8008a1c <_strtod_l+0x934>
 80089e6:	23dc      	movs	r3, #220	; 0xdc
 80089e8:	049b      	lsls	r3, r3, #18
 80089ea:	4299      	cmp	r1, r3
 80089ec:	dc00      	bgt.n	80089f0 <_strtod_l+0x908>
 80089ee:	e646      	b.n	800867e <_strtod_l+0x596>
 80089f0:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <_strtod_l+0x9c0>)
 80089f2:	0030      	movs	r0, r6
 80089f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80089f6:	2300      	movs	r3, #0
 80089f8:	931a      	str	r3, [sp, #104]	; 0x68
 80089fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089fe:	0039      	movs	r1, r7
 8008a00:	f7f8 fdde 	bl	80015c0 <__aeabi_dmul>
 8008a04:	0006      	movs	r6, r0
 8008a06:	000f      	movs	r7, r1
 8008a08:	1e0b      	subs	r3, r1, #0
 8008a0a:	d000      	beq.n	8008a0e <_strtod_l+0x926>
 8008a0c:	e5ab      	b.n	8008566 <_strtod_l+0x47e>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d000      	beq.n	8008a14 <_strtod_l+0x92c>
 8008a12:	e5a8      	b.n	8008566 <_strtod_l+0x47e>
 8008a14:	9a04      	ldr	r2, [sp, #16]
 8008a16:	3322      	adds	r3, #34	; 0x22
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e5a4      	b.n	8008566 <_strtod_l+0x47e>
 8008a1c:	2601      	movs	r6, #1
 8008a1e:	4013      	ands	r3, r2
 8008a20:	4a22      	ldr	r2, [pc, #136]	; (8008aac <_strtod_l+0x9c4>)
 8008a22:	4276      	negs	r6, r6
 8008a24:	189b      	adds	r3, r3, r2
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <_strtod_l+0x9b8>)
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	0017      	movs	r7, r2
 8008a2c:	e764      	b.n	80088f8 <_strtod_l+0x810>
 8008a2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d015      	beq.n	8008a60 <_strtod_l+0x978>
 8008a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a38:	4213      	tst	r3, r2
 8008a3a:	d100      	bne.n	8008a3e <_strtod_l+0x956>
 8008a3c:	e75c      	b.n	80088f8 <_strtod_l+0x810>
 8008a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a40:	9a06      	ldr	r2, [sp, #24]
 8008a42:	0030      	movs	r0, r6
 8008a44:	0039      	movs	r1, r7
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00f      	beq.n	8008a6a <_strtod_l+0x982>
 8008a4a:	f7ff fb35 	bl	80080b8 <sulp>
 8008a4e:	0002      	movs	r2, r0
 8008a50:	000b      	movs	r3, r1
 8008a52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a56:	f7f7 fe8d 	bl	8000774 <__aeabi_dadd>
 8008a5a:	0006      	movs	r6, r0
 8008a5c:	000f      	movs	r7, r1
 8008a5e:	e74b      	b.n	80088f8 <_strtod_l+0x810>
 8008a60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a62:	4233      	tst	r3, r6
 8008a64:	d100      	bne.n	8008a68 <_strtod_l+0x980>
 8008a66:	e747      	b.n	80088f8 <_strtod_l+0x810>
 8008a68:	e7e9      	b.n	8008a3e <_strtod_l+0x956>
 8008a6a:	f7ff fb25 	bl	80080b8 <sulp>
 8008a6e:	0002      	movs	r2, r0
 8008a70:	000b      	movs	r3, r1
 8008a72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a76:	f7f9 f815 	bl	8001aa4 <__aeabi_dsub>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	0006      	movs	r6, r0
 8008a80:	000f      	movs	r7, r1
 8008a82:	f7f7 fcd9 	bl	8000438 <__aeabi_dcmpeq>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d000      	beq.n	8008a8c <_strtod_l+0x9a4>
 8008a8a:	e5f8      	b.n	800867e <_strtod_l+0x596>
 8008a8c:	e734      	b.n	80088f8 <_strtod_l+0x810>
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	fffffc02 	.word	0xfffffc02
 8008a94:	7ff00000 	.word	0x7ff00000
 8008a98:	0800b3c0 	.word	0x0800b3c0
 8008a9c:	fffffbe2 	.word	0xfffffbe2
 8008aa0:	000fffff 	.word	0x000fffff
 8008aa4:	7fefffff 	.word	0x7fefffff
 8008aa8:	39500000 	.word	0x39500000
 8008aac:	fff00000 	.word	0xfff00000
 8008ab0:	9905      	ldr	r1, [sp, #20]
 8008ab2:	0020      	movs	r0, r4
 8008ab4:	f001 ff46 	bl	800a944 <__ratio>
 8008ab8:	2380      	movs	r3, #128	; 0x80
 8008aba:	2200      	movs	r2, #0
 8008abc:	05db      	lsls	r3, r3, #23
 8008abe:	9008      	str	r0, [sp, #32]
 8008ac0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ac2:	f7f7 fcc9 	bl	8000458 <__aeabi_dcmple>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d100      	bne.n	8008acc <_strtod_l+0x9e4>
 8008aca:	e07f      	b.n	8008bcc <_strtod_l+0xae4>
 8008acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d04b      	beq.n	8008b6a <_strtod_l+0xa82>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4b8a      	ldr	r3, [pc, #552]	; (8008d00 <_strtod_l+0xc18>)
 8008ad6:	9210      	str	r2, [sp, #64]	; 0x40
 8008ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8008ada:	4b89      	ldr	r3, [pc, #548]	; (8008d00 <_strtod_l+0xc18>)
 8008adc:	9308      	str	r3, [sp, #32]
 8008ade:	4a89      	ldr	r2, [pc, #548]	; (8008d04 <_strtod_l+0xc1c>)
 8008ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	9314      	str	r3, [sp, #80]	; 0x50
 8008ae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ae8:	4b87      	ldr	r3, [pc, #540]	; (8008d08 <_strtod_l+0xc20>)
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d000      	beq.n	8008af0 <_strtod_l+0xa08>
 8008aee:	e0ba      	b.n	8008c66 <_strtod_l+0xb7e>
 8008af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008af4:	921a      	str	r2, [sp, #104]	; 0x68
 8008af6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008af8:	4a84      	ldr	r2, [pc, #528]	; (8008d0c <_strtod_l+0xc24>)
 8008afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afc:	4694      	mov	ip, r2
 8008afe:	4463      	add	r3, ip
 8008b00:	001f      	movs	r7, r3
 8008b02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b06:	0030      	movs	r0, r6
 8008b08:	0039      	movs	r1, r7
 8008b0a:	920c      	str	r2, [sp, #48]	; 0x30
 8008b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b0e:	f001 fe53 	bl	800a7b8 <__ulp>
 8008b12:	0002      	movs	r2, r0
 8008b14:	000b      	movs	r3, r1
 8008b16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b1a:	f7f8 fd51 	bl	80015c0 <__aeabi_dmul>
 8008b1e:	0032      	movs	r2, r6
 8008b20:	003b      	movs	r3, r7
 8008b22:	f7f7 fe27 	bl	8000774 <__aeabi_dadd>
 8008b26:	4a77      	ldr	r2, [pc, #476]	; (8008d04 <_strtod_l+0xc1c>)
 8008b28:	4b79      	ldr	r3, [pc, #484]	; (8008d10 <_strtod_l+0xc28>)
 8008b2a:	0006      	movs	r6, r0
 8008b2c:	400a      	ands	r2, r1
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d964      	bls.n	8008bfc <_strtod_l+0xb14>
 8008b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b34:	4a77      	ldr	r2, [pc, #476]	; (8008d14 <_strtod_l+0xc2c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d103      	bne.n	8008b42 <_strtod_l+0xa5a>
 8008b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	d100      	bne.n	8008b42 <_strtod_l+0xa5a>
 8008b40:	e508      	b.n	8008554 <_strtod_l+0x46c>
 8008b42:	2601      	movs	r6, #1
 8008b44:	4f73      	ldr	r7, [pc, #460]	; (8008d14 <_strtod_l+0xc2c>)
 8008b46:	4276      	negs	r6, r6
 8008b48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b4a:	9804      	ldr	r0, [sp, #16]
 8008b4c:	f001 fb9b 	bl	800a286 <_Bfree>
 8008b50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b52:	9804      	ldr	r0, [sp, #16]
 8008b54:	f001 fb97 	bl	800a286 <_Bfree>
 8008b58:	9905      	ldr	r1, [sp, #20]
 8008b5a:	9804      	ldr	r0, [sp, #16]
 8008b5c:	f001 fb93 	bl	800a286 <_Bfree>
 8008b60:	0021      	movs	r1, r4
 8008b62:	9804      	ldr	r0, [sp, #16]
 8008b64:	f001 fb8f 	bl	800a286 <_Bfree>
 8008b68:	e5f4      	b.n	8008754 <_strtod_l+0x66c>
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d11e      	bne.n	8008bac <_strtod_l+0xac4>
 8008b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b70:	031b      	lsls	r3, r3, #12
 8008b72:	d121      	bne.n	8008bb8 <_strtod_l+0xad0>
 8008b74:	9808      	ldr	r0, [sp, #32]
 8008b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4b61      	ldr	r3, [pc, #388]	; (8008d00 <_strtod_l+0xc18>)
 8008b7c:	f7f7 fc62 	bl	8000444 <__aeabi_dcmplt>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d11f      	bne.n	8008bc4 <_strtod_l+0xadc>
 8008b84:	9808      	ldr	r0, [sp, #32]
 8008b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b63      	ldr	r3, [pc, #396]	; (8008d18 <_strtod_l+0xc30>)
 8008b8c:	f7f8 fd18 	bl	80015c0 <__aeabi_dmul>
 8008b90:	0005      	movs	r5, r0
 8008b92:	9108      	str	r1, [sp, #32]
 8008b94:	2280      	movs	r2, #128	; 0x80
 8008b96:	0612      	lsls	r2, r2, #24
 8008b98:	4694      	mov	ip, r2
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	951e      	str	r5, [sp, #120]	; 0x78
 8008b9e:	4463      	add	r3, ip
 8008ba0:	931f      	str	r3, [sp, #124]	; 0x7c
 8008ba2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ba6:	9210      	str	r2, [sp, #64]	; 0x40
 8008ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8008baa:	e798      	b.n	8008ade <_strtod_l+0x9f6>
 8008bac:	2e01      	cmp	r6, #1
 8008bae:	d103      	bne.n	8008bb8 <_strtod_l+0xad0>
 8008bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d100      	bne.n	8008bb8 <_strtod_l+0xad0>
 8008bb6:	e562      	b.n	800867e <_strtod_l+0x596>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4b58      	ldr	r3, [pc, #352]	; (8008d1c <_strtod_l+0xc34>)
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	9210      	str	r2, [sp, #64]	; 0x40
 8008bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8008bc2:	e78a      	b.n	8008ada <_strtod_l+0x9f2>
 8008bc4:	4b54      	ldr	r3, [pc, #336]	; (8008d18 <_strtod_l+0xc30>)
 8008bc6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	e7e3      	b.n	8008b94 <_strtod_l+0xaac>
 8008bcc:	4b52      	ldr	r3, [pc, #328]	; (8008d18 <_strtod_l+0xc30>)
 8008bce:	9808      	ldr	r0, [sp, #32]
 8008bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f7f8 fcf4 	bl	80015c0 <__aeabi_dmul>
 8008bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bda:	0005      	movs	r5, r0
 8008bdc:	9108      	str	r1, [sp, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d107      	bne.n	8008bf2 <_strtod_l+0xb0a>
 8008be2:	2380      	movs	r3, #128	; 0x80
 8008be4:	061b      	lsls	r3, r3, #24
 8008be6:	18cb      	adds	r3, r1, r3
 8008be8:	9016      	str	r0, [sp, #88]	; 0x58
 8008bea:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bf0:	e7d9      	b.n	8008ba6 <_strtod_l+0xabe>
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	9b08      	ldr	r3, [sp, #32]
 8008bf6:	9216      	str	r2, [sp, #88]	; 0x58
 8008bf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bfa:	e7f7      	b.n	8008bec <_strtod_l+0xb04>
 8008bfc:	23d4      	movs	r3, #212	; 0xd4
 8008bfe:	049b      	lsls	r3, r3, #18
 8008c00:	18cf      	adds	r7, r1, r3
 8008c02:	9b06      	ldr	r3, [sp, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d19f      	bne.n	8008b48 <_strtod_l+0xa60>
 8008c08:	4b3e      	ldr	r3, [pc, #248]	; (8008d04 <_strtod_l+0xc1c>)
 8008c0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c0c:	970c      	str	r7, [sp, #48]	; 0x30
 8008c0e:	403b      	ands	r3, r7
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d199      	bne.n	8008b48 <_strtod_l+0xa60>
 8008c14:	9908      	ldr	r1, [sp, #32]
 8008c16:	0028      	movs	r0, r5
 8008c18:	f7f9 faa8 	bl	800216c <__aeabi_d2iz>
 8008c1c:	f7f9 fadc 	bl	80021d8 <__aeabi_i2d>
 8008c20:	000b      	movs	r3, r1
 8008c22:	0002      	movs	r2, r0
 8008c24:	9908      	ldr	r1, [sp, #32]
 8008c26:	0028      	movs	r0, r5
 8008c28:	f7f8 ff3c 	bl	8001aa4 <__aeabi_dsub>
 8008c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c2e:	9008      	str	r0, [sp, #32]
 8008c30:	9109      	str	r1, [sp, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <_strtod_l+0xb58>
 8008c36:	2e00      	cmp	r6, #0
 8008c38:	d102      	bne.n	8008c40 <_strtod_l+0xb58>
 8008c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c3c:	031b      	lsls	r3, r3, #12
 8008c3e:	d058      	beq.n	8008cf2 <_strtod_l+0xc0a>
 8008c40:	9808      	ldr	r0, [sp, #32]
 8008c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c44:	4a36      	ldr	r2, [pc, #216]	; (8008d20 <_strtod_l+0xc38>)
 8008c46:	4b37      	ldr	r3, [pc, #220]	; (8008d24 <_strtod_l+0xc3c>)
 8008c48:	f7f7 fbfc 	bl	8000444 <__aeabi_dcmplt>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d000      	beq.n	8008c52 <_strtod_l+0xb6a>
 8008c50:	e489      	b.n	8008566 <_strtod_l+0x47e>
 8008c52:	9808      	ldr	r0, [sp, #32]
 8008c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c56:	4a34      	ldr	r2, [pc, #208]	; (8008d28 <_strtod_l+0xc40>)
 8008c58:	4b2f      	ldr	r3, [pc, #188]	; (8008d18 <_strtod_l+0xc30>)
 8008c5a:	f7f7 fc07 	bl	800046c <__aeabi_dcmpgt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d100      	bne.n	8008c64 <_strtod_l+0xb7c>
 8008c62:	e771      	b.n	8008b48 <_strtod_l+0xa60>
 8008c64:	e47f      	b.n	8008566 <_strtod_l+0x47e>
 8008c66:	9b06      	ldr	r3, [sp, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02a      	beq.n	8008cc2 <_strtod_l+0xbda>
 8008c6c:	23d4      	movs	r3, #212	; 0xd4
 8008c6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c70:	04db      	lsls	r3, r3, #19
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d825      	bhi.n	8008cc2 <_strtod_l+0xbda>
 8008c76:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <_strtod_l+0xc44>)
 8008c78:	4b2d      	ldr	r3, [pc, #180]	; (8008d30 <_strtod_l+0xc48>)
 8008c7a:	0028      	movs	r0, r5
 8008c7c:	9908      	ldr	r1, [sp, #32]
 8008c7e:	f7f7 fbeb 	bl	8000458 <__aeabi_dcmple>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d016      	beq.n	8008cb4 <_strtod_l+0xbcc>
 8008c86:	0028      	movs	r0, r5
 8008c88:	9908      	ldr	r1, [sp, #32]
 8008c8a:	f7f7 fc03 	bl	8000494 <__aeabi_d2uiz>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d100      	bne.n	8008c94 <_strtod_l+0xbac>
 8008c92:	3001      	adds	r0, #1
 8008c94:	f7f9 fada 	bl	800224c <__aeabi_ui2d>
 8008c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c9a:	0005      	movs	r5, r0
 8008c9c:	9108      	str	r1, [sp, #32]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d122      	bne.n	8008ce8 <_strtod_l+0xc00>
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	061b      	lsls	r3, r3, #24
 8008ca6:	18cb      	adds	r3, r1, r3
 8008ca8:	9018      	str	r0, [sp, #96]	; 0x60
 8008caa:	9319      	str	r3, [sp, #100]	; 0x64
 8008cac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cb0:	9210      	str	r2, [sp, #64]	; 0x40
 8008cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8008cb4:	22d6      	movs	r2, #214	; 0xd6
 8008cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb8:	04d2      	lsls	r2, r2, #19
 8008cba:	189b      	adds	r3, r3, r2
 8008cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	9311      	str	r3, [sp, #68]	; 0x44
 8008cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cc6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008cc8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008cca:	f001 fd75 	bl	800a7b8 <__ulp>
 8008cce:	0002      	movs	r2, r0
 8008cd0:	000b      	movs	r3, r1
 8008cd2:	0030      	movs	r0, r6
 8008cd4:	0039      	movs	r1, r7
 8008cd6:	f7f8 fc73 	bl	80015c0 <__aeabi_dmul>
 8008cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cde:	f7f7 fd49 	bl	8000774 <__aeabi_dadd>
 8008ce2:	0006      	movs	r6, r0
 8008ce4:	000f      	movs	r7, r1
 8008ce6:	e78c      	b.n	8008c02 <_strtod_l+0xb1a>
 8008ce8:	0002      	movs	r2, r0
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	9218      	str	r2, [sp, #96]	; 0x60
 8008cee:	9319      	str	r3, [sp, #100]	; 0x64
 8008cf0:	e7dc      	b.n	8008cac <_strtod_l+0xbc4>
 8008cf2:	4a0b      	ldr	r2, [pc, #44]	; (8008d20 <_strtod_l+0xc38>)
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <_strtod_l+0xc4c>)
 8008cf6:	9808      	ldr	r0, [sp, #32]
 8008cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cfa:	f7f7 fba3 	bl	8000444 <__aeabi_dcmplt>
 8008cfe:	e7ae      	b.n	8008c5e <_strtod_l+0xb76>
 8008d00:	3ff00000 	.word	0x3ff00000
 8008d04:	7ff00000 	.word	0x7ff00000
 8008d08:	7fe00000 	.word	0x7fe00000
 8008d0c:	fcb00000 	.word	0xfcb00000
 8008d10:	7c9fffff 	.word	0x7c9fffff
 8008d14:	7fefffff 	.word	0x7fefffff
 8008d18:	3fe00000 	.word	0x3fe00000
 8008d1c:	bff00000 	.word	0xbff00000
 8008d20:	94a03595 	.word	0x94a03595
 8008d24:	3fdfffff 	.word	0x3fdfffff
 8008d28:	35afe535 	.word	0x35afe535
 8008d2c:	ffc00000 	.word	0xffc00000
 8008d30:	41dfffff 	.word	0x41dfffff
 8008d34:	3fcfffff 	.word	0x3fcfffff

08008d38 <_strtod_r>:
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <_strtod_r+0x14>)
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d100      	bne.n	8008d46 <_strtod_r+0xe>
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <_strtod_r+0x18>)
 8008d46:	f7ff f9cf 	bl	80080e8 <_strtod_l>
 8008d4a:	bd10      	pop	{r4, pc}
 8008d4c:	20000018 	.word	0x20000018
 8008d50:	2000007c 	.word	0x2000007c

08008d54 <_strtol_l.isra.0>:
 8008d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d56:	001f      	movs	r7, r3
 8008d58:	000e      	movs	r6, r1
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	9005      	str	r0, [sp, #20]
 8008d5e:	9101      	str	r1, [sp, #4]
 8008d60:	9202      	str	r2, [sp, #8]
 8008d62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d64:	7834      	ldrb	r4, [r6, #0]
 8008d66:	f001 fa1e 	bl	800a1a6 <__locale_ctype_ptr_l>
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	1900      	adds	r0, r0, r4
 8008d6e:	7843      	ldrb	r3, [r0, #1]
 8008d70:	1c75      	adds	r5, r6, #1
 8008d72:	4013      	ands	r3, r2
 8008d74:	d136      	bne.n	8008de4 <_strtol_l.isra.0+0x90>
 8008d76:	2c2d      	cmp	r4, #45	; 0x2d
 8008d78:	d136      	bne.n	8008de8 <_strtol_l.isra.0+0x94>
 8008d7a:	1cb5      	adds	r5, r6, #2
 8008d7c:	7874      	ldrb	r4, [r6, #1]
 8008d7e:	2601      	movs	r6, #1
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	d062      	beq.n	8008e4a <_strtol_l.isra.0+0xf6>
 8008d84:	2f10      	cmp	r7, #16
 8008d86:	d109      	bne.n	8008d9c <_strtol_l.isra.0+0x48>
 8008d88:	2c30      	cmp	r4, #48	; 0x30
 8008d8a:	d107      	bne.n	8008d9c <_strtol_l.isra.0+0x48>
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	782b      	ldrb	r3, [r5, #0]
 8008d90:	4393      	bics	r3, r2
 8008d92:	2b58      	cmp	r3, #88	; 0x58
 8008d94:	d154      	bne.n	8008e40 <_strtol_l.isra.0+0xec>
 8008d96:	2710      	movs	r7, #16
 8008d98:	786c      	ldrb	r4, [r5, #1]
 8008d9a:	3502      	adds	r5, #2
 8008d9c:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <_strtol_l.isra.0+0x100>)
 8008d9e:	0039      	movs	r1, r7
 8008da0:	18f3      	adds	r3, r6, r3
 8008da2:	0018      	movs	r0, r3
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	f7f7 fa47 	bl	8000238 <__aeabi_uidivmod>
 8008daa:	9104      	str	r1, [sp, #16]
 8008dac:	2101      	movs	r1, #1
 8008dae:	2300      	movs	r3, #0
 8008db0:	4249      	negs	r1, r1
 8008db2:	0002      	movs	r2, r0
 8008db4:	468c      	mov	ip, r1
 8008db6:	0018      	movs	r0, r3
 8008db8:	0021      	movs	r1, r4
 8008dba:	3930      	subs	r1, #48	; 0x30
 8008dbc:	2909      	cmp	r1, #9
 8008dbe:	d81a      	bhi.n	8008df6 <_strtol_l.isra.0+0xa2>
 8008dc0:	000c      	movs	r4, r1
 8008dc2:	42a7      	cmp	r7, r4
 8008dc4:	dd23      	ble.n	8008e0e <_strtol_l.isra.0+0xba>
 8008dc6:	1c59      	adds	r1, r3, #1
 8008dc8:	d009      	beq.n	8008dde <_strtol_l.isra.0+0x8a>
 8008dca:	4663      	mov	r3, ip
 8008dcc:	4282      	cmp	r2, r0
 8008dce:	d306      	bcc.n	8008dde <_strtol_l.isra.0+0x8a>
 8008dd0:	d102      	bne.n	8008dd8 <_strtol_l.isra.0+0x84>
 8008dd2:	9904      	ldr	r1, [sp, #16]
 8008dd4:	42a1      	cmp	r1, r4
 8008dd6:	db02      	blt.n	8008dde <_strtol_l.isra.0+0x8a>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4378      	muls	r0, r7
 8008ddc:	1820      	adds	r0, r4, r0
 8008dde:	782c      	ldrb	r4, [r5, #0]
 8008de0:	3501      	adds	r5, #1
 8008de2:	e7e9      	b.n	8008db8 <_strtol_l.isra.0+0x64>
 8008de4:	002e      	movs	r6, r5
 8008de6:	e7bc      	b.n	8008d62 <_strtol_l.isra.0+0xe>
 8008de8:	2c2b      	cmp	r4, #43	; 0x2b
 8008dea:	d001      	beq.n	8008df0 <_strtol_l.isra.0+0x9c>
 8008dec:	001e      	movs	r6, r3
 8008dee:	e7c7      	b.n	8008d80 <_strtol_l.isra.0+0x2c>
 8008df0:	1cb5      	adds	r5, r6, #2
 8008df2:	7874      	ldrb	r4, [r6, #1]
 8008df4:	e7fa      	b.n	8008dec <_strtol_l.isra.0+0x98>
 8008df6:	0021      	movs	r1, r4
 8008df8:	3941      	subs	r1, #65	; 0x41
 8008dfa:	2919      	cmp	r1, #25
 8008dfc:	d801      	bhi.n	8008e02 <_strtol_l.isra.0+0xae>
 8008dfe:	3c37      	subs	r4, #55	; 0x37
 8008e00:	e7df      	b.n	8008dc2 <_strtol_l.isra.0+0x6e>
 8008e02:	0021      	movs	r1, r4
 8008e04:	3961      	subs	r1, #97	; 0x61
 8008e06:	2919      	cmp	r1, #25
 8008e08:	d801      	bhi.n	8008e0e <_strtol_l.isra.0+0xba>
 8008e0a:	3c57      	subs	r4, #87	; 0x57
 8008e0c:	e7d9      	b.n	8008dc2 <_strtol_l.isra.0+0x6e>
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	d108      	bne.n	8008e24 <_strtol_l.isra.0+0xd0>
 8008e12:	9a05      	ldr	r2, [sp, #20]
 8008e14:	3323      	adds	r3, #35	; 0x23
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	9b02      	ldr	r3, [sp, #8]
 8008e1a:	9803      	ldr	r0, [sp, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d109      	bne.n	8008e34 <_strtol_l.isra.0+0xe0>
 8008e20:	b007      	add	sp, #28
 8008e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e24:	2e00      	cmp	r6, #0
 8008e26:	d000      	beq.n	8008e2a <_strtol_l.isra.0+0xd6>
 8008e28:	4240      	negs	r0, r0
 8008e2a:	9a02      	ldr	r2, [sp, #8]
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	d0f7      	beq.n	8008e20 <_strtol_l.isra.0+0xcc>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <_strtol_l.isra.0+0xe4>
 8008e34:	1e6b      	subs	r3, r5, #1
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e7ef      	b.n	8008e20 <_strtol_l.isra.0+0xcc>
 8008e40:	2430      	movs	r4, #48	; 0x30
 8008e42:	2f00      	cmp	r7, #0
 8008e44:	d1aa      	bne.n	8008d9c <_strtol_l.isra.0+0x48>
 8008e46:	2708      	movs	r7, #8
 8008e48:	e7a8      	b.n	8008d9c <_strtol_l.isra.0+0x48>
 8008e4a:	2c30      	cmp	r4, #48	; 0x30
 8008e4c:	d09e      	beq.n	8008d8c <_strtol_l.isra.0+0x38>
 8008e4e:	270a      	movs	r7, #10
 8008e50:	e7a4      	b.n	8008d9c <_strtol_l.isra.0+0x48>
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	7fffffff 	.word	0x7fffffff

08008e58 <_strtol_r>:
 8008e58:	b513      	push	{r0, r1, r4, lr}
 8008e5a:	4c05      	ldr	r4, [pc, #20]	; (8008e70 <_strtol_r+0x18>)
 8008e5c:	6824      	ldr	r4, [r4, #0]
 8008e5e:	6a24      	ldr	r4, [r4, #32]
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d100      	bne.n	8008e66 <_strtol_r+0xe>
 8008e64:	4c03      	ldr	r4, [pc, #12]	; (8008e74 <_strtol_r+0x1c>)
 8008e66:	9400      	str	r4, [sp, #0]
 8008e68:	f7ff ff74 	bl	8008d54 <_strtol_l.isra.0>
 8008e6c:	bd16      	pop	{r1, r2, r4, pc}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	20000018 	.word	0x20000018
 8008e74:	2000007c 	.word	0x2000007c

08008e78 <quorem>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	6903      	ldr	r3, [r0, #16]
 8008e7c:	690c      	ldr	r4, [r1, #16]
 8008e7e:	b089      	sub	sp, #36	; 0x24
 8008e80:	0007      	movs	r7, r0
 8008e82:	9105      	str	r1, [sp, #20]
 8008e84:	2600      	movs	r6, #0
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	db65      	blt.n	8008f56 <quorem+0xde>
 8008e8a:	000b      	movs	r3, r1
 8008e8c:	3c01      	subs	r4, #1
 8008e8e:	3314      	adds	r3, #20
 8008e90:	00a5      	lsls	r5, r4, #2
 8008e92:	9303      	str	r3, [sp, #12]
 8008e94:	195b      	adds	r3, r3, r5
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	0003      	movs	r3, r0
 8008e9a:	3314      	adds	r3, #20
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	195d      	adds	r5, r3, r5
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	6828      	ldr	r0, [r5, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1c59      	adds	r1, r3, #1
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f7f7 f93f 	bl	800012c <__udivsi3>
 8008eae:	9001      	str	r0, [sp, #4]
 8008eb0:	42b0      	cmp	r0, r6
 8008eb2:	d029      	beq.n	8008f08 <quorem+0x90>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	9802      	ldr	r0, [sp, #8]
 8008eb8:	469c      	mov	ip, r3
 8008eba:	9606      	str	r6, [sp, #24]
 8008ebc:	4662      	mov	r2, ip
 8008ebe:	ca08      	ldmia	r2!, {r3}
 8008ec0:	4694      	mov	ip, r2
 8008ec2:	9a01      	ldr	r2, [sp, #4]
 8008ec4:	b299      	uxth	r1, r3
 8008ec6:	4351      	muls	r1, r2
 8008ec8:	0c1b      	lsrs	r3, r3, #16
 8008eca:	4353      	muls	r3, r2
 8008ecc:	1989      	adds	r1, r1, r6
 8008ece:	0c0a      	lsrs	r2, r1, #16
 8008ed0:	189b      	adds	r3, r3, r2
 8008ed2:	9307      	str	r3, [sp, #28]
 8008ed4:	0c1e      	lsrs	r6, r3, #16
 8008ed6:	6803      	ldr	r3, [r0, #0]
 8008ed8:	b289      	uxth	r1, r1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	18d2      	adds	r2, r2, r3
 8008ee0:	6803      	ldr	r3, [r0, #0]
 8008ee2:	1a52      	subs	r2, r2, r1
 8008ee4:	0c19      	lsrs	r1, r3, #16
 8008ee6:	466b      	mov	r3, sp
 8008ee8:	8b9b      	ldrh	r3, [r3, #28]
 8008eea:	1acb      	subs	r3, r1, r3
 8008eec:	1411      	asrs	r1, r2, #16
 8008eee:	185b      	adds	r3, r3, r1
 8008ef0:	1419      	asrs	r1, r3, #16
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	041b      	lsls	r3, r3, #16
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	9b04      	ldr	r3, [sp, #16]
 8008efa:	9106      	str	r1, [sp, #24]
 8008efc:	c004      	stmia	r0!, {r2}
 8008efe:	4563      	cmp	r3, ip
 8008f00:	d2dc      	bcs.n	8008ebc <quorem+0x44>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d02d      	beq.n	8008f64 <quorem+0xec>
 8008f08:	9905      	ldr	r1, [sp, #20]
 8008f0a:	0038      	movs	r0, r7
 8008f0c:	f001 fbd6 	bl	800a6bc <__mcmp>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	db1f      	blt.n	8008f54 <quorem+0xdc>
 8008f14:	2500      	movs	r5, #0
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	9802      	ldr	r0, [sp, #8]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	9903      	ldr	r1, [sp, #12]
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	6802      	ldr	r2, [r0, #0]
 8008f22:	c908      	ldmia	r1!, {r3}
 8008f24:	b292      	uxth	r2, r2
 8008f26:	1955      	adds	r5, r2, r5
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	1aaa      	subs	r2, r5, r2
 8008f2c:	6805      	ldr	r5, [r0, #0]
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	0c2d      	lsrs	r5, r5, #16
 8008f32:	1aeb      	subs	r3, r5, r3
 8008f34:	1415      	asrs	r5, r2, #16
 8008f36:	195b      	adds	r3, r3, r5
 8008f38:	141d      	asrs	r5, r3, #16
 8008f3a:	b292      	uxth	r2, r2
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	c008      	stmia	r0!, {r3}
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	428b      	cmp	r3, r1
 8008f46:	d2eb      	bcs.n	8008f20 <quorem+0xa8>
 8008f48:	9a02      	ldr	r2, [sp, #8]
 8008f4a:	00a3      	lsls	r3, r4, #2
 8008f4c:	18d3      	adds	r3, r2, r3
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	d011      	beq.n	8008f78 <quorem+0x100>
 8008f54:	9e01      	ldr	r6, [sp, #4]
 8008f56:	0030      	movs	r0, r6
 8008f58:	b009      	add	sp, #36	; 0x24
 8008f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <quorem+0xf4>
 8008f62:	3c01      	subs	r4, #1
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	3d04      	subs	r5, #4
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	d3f7      	bcc.n	8008f5c <quorem+0xe4>
 8008f6c:	613c      	str	r4, [r7, #16]
 8008f6e:	e7cb      	b.n	8008f08 <quorem+0x90>
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d104      	bne.n	8008f80 <quorem+0x108>
 8008f76:	3c01      	subs	r4, #1
 8008f78:	9a02      	ldr	r2, [sp, #8]
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3f7      	bcc.n	8008f70 <quorem+0xf8>
 8008f80:	613c      	str	r4, [r7, #16]
 8008f82:	e7e7      	b.n	8008f54 <quorem+0xdc>

08008f84 <_dtoa_r>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	0016      	movs	r6, r2
 8008f88:	001f      	movs	r7, r3
 8008f8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f8c:	b09b      	sub	sp, #108	; 0x6c
 8008f8e:	9002      	str	r0, [sp, #8]
 8008f90:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8008f92:	9606      	str	r6, [sp, #24]
 8008f94:	9707      	str	r7, [sp, #28]
 8008f96:	2c00      	cmp	r4, #0
 8008f98:	d108      	bne.n	8008fac <_dtoa_r+0x28>
 8008f9a:	2010      	movs	r0, #16
 8008f9c:	f001 f914 	bl	800a1c8 <malloc>
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	6258      	str	r0, [r3, #36]	; 0x24
 8008fa4:	6044      	str	r4, [r0, #4]
 8008fa6:	6084      	str	r4, [r0, #8]
 8008fa8:	6004      	str	r4, [r0, #0]
 8008faa:	60c4      	str	r4, [r0, #12]
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	6819      	ldr	r1, [r3, #0]
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	d00b      	beq.n	8008fce <_dtoa_r+0x4a>
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4093      	lsls	r3, r2
 8008fbc:	604a      	str	r2, [r1, #4]
 8008fbe:	608b      	str	r3, [r1, #8]
 8008fc0:	9802      	ldr	r0, [sp, #8]
 8008fc2:	f001 f960 	bl	800a286 <_Bfree>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	2f00      	cmp	r7, #0
 8008fd0:	da20      	bge.n	8009014 <_dtoa_r+0x90>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	007b      	lsls	r3, r7, #1
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	9307      	str	r3, [sp, #28]
 8008fdc:	9c07      	ldr	r4, [sp, #28]
 8008fde:	4bb2      	ldr	r3, [pc, #712]	; (80092a8 <_dtoa_r+0x324>)
 8008fe0:	0022      	movs	r2, r4
 8008fe2:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fe4:	401a      	ands	r2, r3
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d117      	bne.n	800901a <_dtoa_r+0x96>
 8008fea:	4bb0      	ldr	r3, [pc, #704]	; (80092ac <_dtoa_r+0x328>)
 8008fec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d103      	bne.n	8008ffe <_dtoa_r+0x7a>
 8008ff6:	0324      	lsls	r4, r4, #12
 8008ff8:	d101      	bne.n	8008ffe <_dtoa_r+0x7a>
 8008ffa:	f000 fd87 	bl	8009b0c <_dtoa_r+0xb88>
 8008ffe:	4bac      	ldr	r3, [pc, #688]	; (80092b0 <_dtoa_r+0x32c>)
 8009000:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009002:	9308      	str	r3, [sp, #32]
 8009004:	2a00      	cmp	r2, #0
 8009006:	d002      	beq.n	800900e <_dtoa_r+0x8a>
 8009008:	4baa      	ldr	r3, [pc, #680]	; (80092b4 <_dtoa_r+0x330>)
 800900a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	9808      	ldr	r0, [sp, #32]
 8009010:	b01b      	add	sp, #108	; 0x6c
 8009012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009014:	2300      	movs	r3, #0
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	e7e0      	b.n	8008fdc <_dtoa_r+0x58>
 800901a:	9e06      	ldr	r6, [sp, #24]
 800901c:	9f07      	ldr	r7, [sp, #28]
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	0030      	movs	r0, r6
 8009024:	0039      	movs	r1, r7
 8009026:	f7f7 fa07 	bl	8000438 <__aeabi_dcmpeq>
 800902a:	1e05      	subs	r5, r0, #0
 800902c:	d00b      	beq.n	8009046 <_dtoa_r+0xc2>
 800902e:	2301      	movs	r3, #1
 8009030:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4ba0      	ldr	r3, [pc, #640]	; (80092b8 <_dtoa_r+0x334>)
 8009036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009038:	9308      	str	r3, [sp, #32]
 800903a:	2a00      	cmp	r2, #0
 800903c:	d0e7      	beq.n	800900e <_dtoa_r+0x8a>
 800903e:	4a9f      	ldr	r2, [pc, #636]	; (80092bc <_dtoa_r+0x338>)
 8009040:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009042:	600a      	str	r2, [r1, #0]
 8009044:	e7e3      	b.n	800900e <_dtoa_r+0x8a>
 8009046:	ab18      	add	r3, sp, #96	; 0x60
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	ab19      	add	r3, sp, #100	; 0x64
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	0032      	movs	r2, r6
 8009050:	003b      	movs	r3, r7
 8009052:	9802      	ldr	r0, [sp, #8]
 8009054:	f001 fc22 	bl	800a89c <__d2b>
 8009058:	0063      	lsls	r3, r4, #1
 800905a:	9003      	str	r0, [sp, #12]
 800905c:	0d5b      	lsrs	r3, r3, #21
 800905e:	d074      	beq.n	800914a <_dtoa_r+0x1c6>
 8009060:	033a      	lsls	r2, r7, #12
 8009062:	4c97      	ldr	r4, [pc, #604]	; (80092c0 <_dtoa_r+0x33c>)
 8009064:	0b12      	lsrs	r2, r2, #12
 8009066:	4314      	orrs	r4, r2
 8009068:	0021      	movs	r1, r4
 800906a:	4a96      	ldr	r2, [pc, #600]	; (80092c4 <_dtoa_r+0x340>)
 800906c:	0030      	movs	r0, r6
 800906e:	9516      	str	r5, [sp, #88]	; 0x58
 8009070:	189e      	adds	r6, r3, r2
 8009072:	2200      	movs	r2, #0
 8009074:	4b94      	ldr	r3, [pc, #592]	; (80092c8 <_dtoa_r+0x344>)
 8009076:	f7f8 fd15 	bl	8001aa4 <__aeabi_dsub>
 800907a:	4a94      	ldr	r2, [pc, #592]	; (80092cc <_dtoa_r+0x348>)
 800907c:	4b94      	ldr	r3, [pc, #592]	; (80092d0 <_dtoa_r+0x34c>)
 800907e:	f7f8 fa9f 	bl	80015c0 <__aeabi_dmul>
 8009082:	4a94      	ldr	r2, [pc, #592]	; (80092d4 <_dtoa_r+0x350>)
 8009084:	4b94      	ldr	r3, [pc, #592]	; (80092d8 <_dtoa_r+0x354>)
 8009086:	f7f7 fb75 	bl	8000774 <__aeabi_dadd>
 800908a:	0004      	movs	r4, r0
 800908c:	0030      	movs	r0, r6
 800908e:	000d      	movs	r5, r1
 8009090:	f7f9 f8a2 	bl	80021d8 <__aeabi_i2d>
 8009094:	4a91      	ldr	r2, [pc, #580]	; (80092dc <_dtoa_r+0x358>)
 8009096:	4b92      	ldr	r3, [pc, #584]	; (80092e0 <_dtoa_r+0x35c>)
 8009098:	f7f8 fa92 	bl	80015c0 <__aeabi_dmul>
 800909c:	0002      	movs	r2, r0
 800909e:	000b      	movs	r3, r1
 80090a0:	0020      	movs	r0, r4
 80090a2:	0029      	movs	r1, r5
 80090a4:	f7f7 fb66 	bl	8000774 <__aeabi_dadd>
 80090a8:	0004      	movs	r4, r0
 80090aa:	000d      	movs	r5, r1
 80090ac:	f7f9 f85e 	bl	800216c <__aeabi_d2iz>
 80090b0:	2200      	movs	r2, #0
 80090b2:	0007      	movs	r7, r0
 80090b4:	2300      	movs	r3, #0
 80090b6:	0020      	movs	r0, r4
 80090b8:	0029      	movs	r1, r5
 80090ba:	f7f7 f9c3 	bl	8000444 <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d009      	beq.n	80090d6 <_dtoa_r+0x152>
 80090c2:	0038      	movs	r0, r7
 80090c4:	f7f9 f888 	bl	80021d8 <__aeabi_i2d>
 80090c8:	002b      	movs	r3, r5
 80090ca:	0022      	movs	r2, r4
 80090cc:	f7f7 f9b4 	bl	8000438 <__aeabi_dcmpeq>
 80090d0:	4243      	negs	r3, r0
 80090d2:	4158      	adcs	r0, r3
 80090d4:	1a3f      	subs	r7, r7, r0
 80090d6:	2301      	movs	r3, #1
 80090d8:	9314      	str	r3, [sp, #80]	; 0x50
 80090da:	2f16      	cmp	r7, #22
 80090dc:	d80d      	bhi.n	80090fa <_dtoa_r+0x176>
 80090de:	4981      	ldr	r1, [pc, #516]	; (80092e4 <_dtoa_r+0x360>)
 80090e0:	00fb      	lsls	r3, r7, #3
 80090e2:	18c9      	adds	r1, r1, r3
 80090e4:	6808      	ldr	r0, [r1, #0]
 80090e6:	6849      	ldr	r1, [r1, #4]
 80090e8:	9a06      	ldr	r2, [sp, #24]
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	f7f7 f9be 	bl	800046c <__aeabi_dcmpgt>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d046      	beq.n	8009182 <_dtoa_r+0x1fe>
 80090f4:	2300      	movs	r3, #0
 80090f6:	3f01      	subs	r7, #1
 80090f8:	9314      	str	r3, [sp, #80]	; 0x50
 80090fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80090fc:	1b9e      	subs	r6, r3, r6
 80090fe:	2300      	movs	r3, #0
 8009100:	930a      	str	r3, [sp, #40]	; 0x28
 8009102:	0033      	movs	r3, r6
 8009104:	3b01      	subs	r3, #1
 8009106:	930b      	str	r3, [sp, #44]	; 0x2c
 8009108:	d504      	bpl.n	8009114 <_dtoa_r+0x190>
 800910a:	2301      	movs	r3, #1
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	930a      	str	r3, [sp, #40]	; 0x28
 8009110:	2300      	movs	r3, #0
 8009112:	930b      	str	r3, [sp, #44]	; 0x2c
 8009114:	2f00      	cmp	r7, #0
 8009116:	db36      	blt.n	8009186 <_dtoa_r+0x202>
 8009118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800911a:	9711      	str	r7, [sp, #68]	; 0x44
 800911c:	19db      	adds	r3, r3, r7
 800911e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009120:	2300      	movs	r3, #0
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009126:	2401      	movs	r4, #1
 8009128:	2b09      	cmp	r3, #9
 800912a:	d900      	bls.n	800912e <_dtoa_r+0x1aa>
 800912c:	e084      	b.n	8009238 <_dtoa_r+0x2b4>
 800912e:	2b05      	cmp	r3, #5
 8009130:	dd02      	ble.n	8009138 <_dtoa_r+0x1b4>
 8009132:	2400      	movs	r4, #0
 8009134:	3b04      	subs	r3, #4
 8009136:	9320      	str	r3, [sp, #128]	; 0x80
 8009138:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800913a:	1e98      	subs	r0, r3, #2
 800913c:	2803      	cmp	r0, #3
 800913e:	d900      	bls.n	8009142 <_dtoa_r+0x1be>
 8009140:	e084      	b.n	800924c <_dtoa_r+0x2c8>
 8009142:	f7f6 ffe9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009146:	7775      	.short	0x7775
 8009148:	6a28      	.short	0x6a28
 800914a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800914c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800914e:	189e      	adds	r6, r3, r2
 8009150:	4b65      	ldr	r3, [pc, #404]	; (80092e8 <_dtoa_r+0x364>)
 8009152:	18f2      	adds	r2, r6, r3
 8009154:	2a20      	cmp	r2, #32
 8009156:	dd0f      	ble.n	8009178 <_dtoa_r+0x1f4>
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	409c      	lsls	r4, r3
 800915e:	4b63      	ldr	r3, [pc, #396]	; (80092ec <_dtoa_r+0x368>)
 8009160:	9806      	ldr	r0, [sp, #24]
 8009162:	18f3      	adds	r3, r6, r3
 8009164:	40d8      	lsrs	r0, r3
 8009166:	4320      	orrs	r0, r4
 8009168:	f7f9 f870 	bl	800224c <__aeabi_ui2d>
 800916c:	2301      	movs	r3, #1
 800916e:	4c60      	ldr	r4, [pc, #384]	; (80092f0 <_dtoa_r+0x36c>)
 8009170:	3e01      	subs	r6, #1
 8009172:	1909      	adds	r1, r1, r4
 8009174:	9316      	str	r3, [sp, #88]	; 0x58
 8009176:	e77c      	b.n	8009072 <_dtoa_r+0xee>
 8009178:	2320      	movs	r3, #32
 800917a:	9806      	ldr	r0, [sp, #24]
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	4098      	lsls	r0, r3
 8009180:	e7f2      	b.n	8009168 <_dtoa_r+0x1e4>
 8009182:	9014      	str	r0, [sp, #80]	; 0x50
 8009184:	e7b9      	b.n	80090fa <_dtoa_r+0x176>
 8009186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009188:	1bdb      	subs	r3, r3, r7
 800918a:	930a      	str	r3, [sp, #40]	; 0x28
 800918c:	427b      	negs	r3, r7
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	2300      	movs	r3, #0
 8009192:	9311      	str	r3, [sp, #68]	; 0x44
 8009194:	e7c6      	b.n	8009124 <_dtoa_r+0x1a0>
 8009196:	2301      	movs	r3, #1
 8009198:	930d      	str	r3, [sp, #52]	; 0x34
 800919a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800919c:	2b00      	cmp	r3, #0
 800919e:	dd59      	ble.n	8009254 <_dtoa_r+0x2d0>
 80091a0:	930c      	str	r3, [sp, #48]	; 0x30
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	9a02      	ldr	r2, [sp, #8]
 80091a6:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80091a8:	2200      	movs	r2, #0
 80091aa:	606a      	str	r2, [r5, #4]
 80091ac:	3204      	adds	r2, #4
 80091ae:	0010      	movs	r0, r2
 80091b0:	3014      	adds	r0, #20
 80091b2:	6869      	ldr	r1, [r5, #4]
 80091b4:	4298      	cmp	r0, r3
 80091b6:	d952      	bls.n	800925e <_dtoa_r+0x2da>
 80091b8:	9802      	ldr	r0, [sp, #8]
 80091ba:	f001 f82c 	bl	800a216 <_Balloc>
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	6028      	str	r0, [r5, #0]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9308      	str	r3, [sp, #32]
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	2b0e      	cmp	r3, #14
 80091cc:	d900      	bls.n	80091d0 <_dtoa_r+0x24c>
 80091ce:	e10a      	b.n	80093e6 <_dtoa_r+0x462>
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	d100      	bne.n	80091d6 <_dtoa_r+0x252>
 80091d4:	e107      	b.n	80093e6 <_dtoa_r+0x462>
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	9c07      	ldr	r4, [sp, #28]
 80091da:	9312      	str	r3, [sp, #72]	; 0x48
 80091dc:	9413      	str	r4, [sp, #76]	; 0x4c
 80091de:	2f00      	cmp	r7, #0
 80091e0:	dc00      	bgt.n	80091e4 <_dtoa_r+0x260>
 80091e2:	e089      	b.n	80092f8 <_dtoa_r+0x374>
 80091e4:	210f      	movs	r1, #15
 80091e6:	003a      	movs	r2, r7
 80091e8:	4b3e      	ldr	r3, [pc, #248]	; (80092e4 <_dtoa_r+0x360>)
 80091ea:	400a      	ands	r2, r1
 80091ec:	00d2      	lsls	r2, r2, #3
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	681d      	ldr	r5, [r3, #0]
 80091f2:	685e      	ldr	r6, [r3, #4]
 80091f4:	2302      	movs	r3, #2
 80091f6:	113c      	asrs	r4, r7, #4
 80091f8:	930e      	str	r3, [sp, #56]	; 0x38
 80091fa:	06e3      	lsls	r3, r4, #27
 80091fc:	d50b      	bpl.n	8009216 <_dtoa_r+0x292>
 80091fe:	4b3d      	ldr	r3, [pc, #244]	; (80092f4 <_dtoa_r+0x370>)
 8009200:	400c      	ands	r4, r1
 8009202:	6a1a      	ldr	r2, [r3, #32]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009208:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800920a:	f7f7 fdcf 	bl	8000dac <__aeabi_ddiv>
 800920e:	2303      	movs	r3, #3
 8009210:	9006      	str	r0, [sp, #24]
 8009212:	9107      	str	r1, [sp, #28]
 8009214:	930e      	str	r3, [sp, #56]	; 0x38
 8009216:	2300      	movs	r3, #0
 8009218:	e03a      	b.n	8009290 <_dtoa_r+0x30c>
 800921a:	2301      	movs	r3, #1
 800921c:	930d      	str	r3, [sp, #52]	; 0x34
 800921e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	930c      	str	r3, [sp, #48]	; 0x30
 8009224:	3301      	adds	r3, #1
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	dcbb      	bgt.n	80091a4 <_dtoa_r+0x220>
 800922c:	2301      	movs	r3, #1
 800922e:	e7b9      	b.n	80091a4 <_dtoa_r+0x220>
 8009230:	2300      	movs	r3, #0
 8009232:	e7b1      	b.n	8009198 <_dtoa_r+0x214>
 8009234:	2300      	movs	r3, #0
 8009236:	e7f1      	b.n	800921c <_dtoa_r+0x298>
 8009238:	2300      	movs	r3, #0
 800923a:	940d      	str	r4, [sp, #52]	; 0x34
 800923c:	9320      	str	r3, [sp, #128]	; 0x80
 800923e:	3b01      	subs	r3, #1
 8009240:	2200      	movs	r2, #0
 8009242:	930c      	str	r3, [sp, #48]	; 0x30
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	3313      	adds	r3, #19
 8009248:	9221      	str	r2, [sp, #132]	; 0x84
 800924a:	e7ab      	b.n	80091a4 <_dtoa_r+0x220>
 800924c:	2301      	movs	r3, #1
 800924e:	930d      	str	r3, [sp, #52]	; 0x34
 8009250:	3b02      	subs	r3, #2
 8009252:	e7f5      	b.n	8009240 <_dtoa_r+0x2bc>
 8009254:	2301      	movs	r3, #1
 8009256:	930c      	str	r3, [sp, #48]	; 0x30
 8009258:	9309      	str	r3, [sp, #36]	; 0x24
 800925a:	001a      	movs	r2, r3
 800925c:	e7f4      	b.n	8009248 <_dtoa_r+0x2c4>
 800925e:	3101      	adds	r1, #1
 8009260:	6069      	str	r1, [r5, #4]
 8009262:	0052      	lsls	r2, r2, #1
 8009264:	e7a3      	b.n	80091ae <_dtoa_r+0x22a>
 8009266:	2301      	movs	r3, #1
 8009268:	421c      	tst	r4, r3
 800926a:	d00e      	beq.n	800928a <_dtoa_r+0x306>
 800926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800926e:	4a21      	ldr	r2, [pc, #132]	; (80092f4 <_dtoa_r+0x370>)
 8009270:	3301      	adds	r3, #1
 8009272:	930e      	str	r3, [sp, #56]	; 0x38
 8009274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009276:	0028      	movs	r0, r5
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	189b      	adds	r3, r3, r2
 800927c:	0031      	movs	r1, r6
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f7f8 f99d 	bl	80015c0 <__aeabi_dmul>
 8009286:	0005      	movs	r5, r0
 8009288:	000e      	movs	r6, r1
 800928a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800928c:	1064      	asrs	r4, r4, #1
 800928e:	3301      	adds	r3, #1
 8009290:	9310      	str	r3, [sp, #64]	; 0x40
 8009292:	2c00      	cmp	r4, #0
 8009294:	d1e7      	bne.n	8009266 <_dtoa_r+0x2e2>
 8009296:	9806      	ldr	r0, [sp, #24]
 8009298:	9907      	ldr	r1, [sp, #28]
 800929a:	002a      	movs	r2, r5
 800929c:	0033      	movs	r3, r6
 800929e:	f7f7 fd85 	bl	8000dac <__aeabi_ddiv>
 80092a2:	9006      	str	r0, [sp, #24]
 80092a4:	9107      	str	r1, [sp, #28]
 80092a6:	e042      	b.n	800932e <_dtoa_r+0x3aa>
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	0000270f 	.word	0x0000270f
 80092b0:	0800b3f1 	.word	0x0800b3f1
 80092b4:	0800b3f4 	.word	0x0800b3f4
 80092b8:	0800b36c 	.word	0x0800b36c
 80092bc:	0800b36d 	.word	0x0800b36d
 80092c0:	3ff00000 	.word	0x3ff00000
 80092c4:	fffffc01 	.word	0xfffffc01
 80092c8:	3ff80000 	.word	0x3ff80000
 80092cc:	636f4361 	.word	0x636f4361
 80092d0:	3fd287a7 	.word	0x3fd287a7
 80092d4:	8b60c8b3 	.word	0x8b60c8b3
 80092d8:	3fc68a28 	.word	0x3fc68a28
 80092dc:	509f79fb 	.word	0x509f79fb
 80092e0:	3fd34413 	.word	0x3fd34413
 80092e4:	0800b428 	.word	0x0800b428
 80092e8:	00000432 	.word	0x00000432
 80092ec:	00000412 	.word	0x00000412
 80092f0:	fe100000 	.word	0xfe100000
 80092f4:	0800b400 	.word	0x0800b400
 80092f8:	2302      	movs	r3, #2
 80092fa:	930e      	str	r3, [sp, #56]	; 0x38
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	d016      	beq.n	800932e <_dtoa_r+0x3aa>
 8009300:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009302:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009304:	427c      	negs	r4, r7
 8009306:	330d      	adds	r3, #13
 8009308:	4023      	ands	r3, r4
 800930a:	4ace      	ldr	r2, [pc, #824]	; (8009644 <_dtoa_r+0x6c0>)
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	18d3      	adds	r3, r2, r3
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f7f8 f954 	bl	80015c0 <__aeabi_dmul>
 8009318:	2300      	movs	r3, #0
 800931a:	2601      	movs	r6, #1
 800931c:	001d      	movs	r5, r3
 800931e:	9006      	str	r0, [sp, #24]
 8009320:	9107      	str	r1, [sp, #28]
 8009322:	1124      	asrs	r4, r4, #4
 8009324:	2c00      	cmp	r4, #0
 8009326:	d000      	beq.n	800932a <_dtoa_r+0x3a6>
 8009328:	e08c      	b.n	8009444 <_dtoa_r+0x4c0>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1b9      	bne.n	80092a2 <_dtoa_r+0x31e>
 800932e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009330:	2b00      	cmp	r3, #0
 8009332:	d100      	bne.n	8009336 <_dtoa_r+0x3b2>
 8009334:	e096      	b.n	8009464 <_dtoa_r+0x4e0>
 8009336:	9c06      	ldr	r4, [sp, #24]
 8009338:	9d07      	ldr	r5, [sp, #28]
 800933a:	2200      	movs	r2, #0
 800933c:	4bc2      	ldr	r3, [pc, #776]	; (8009648 <_dtoa_r+0x6c4>)
 800933e:	0020      	movs	r0, r4
 8009340:	0029      	movs	r1, r5
 8009342:	f7f7 f87f 	bl	8000444 <__aeabi_dcmplt>
 8009346:	2800      	cmp	r0, #0
 8009348:	d100      	bne.n	800934c <_dtoa_r+0x3c8>
 800934a:	e08b      	b.n	8009464 <_dtoa_r+0x4e0>
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	2b00      	cmp	r3, #0
 8009350:	d100      	bne.n	8009354 <_dtoa_r+0x3d0>
 8009352:	e087      	b.n	8009464 <_dtoa_r+0x4e0>
 8009354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009356:	2b00      	cmp	r3, #0
 8009358:	dd41      	ble.n	80093de <_dtoa_r+0x45a>
 800935a:	4bbc      	ldr	r3, [pc, #752]	; (800964c <_dtoa_r+0x6c8>)
 800935c:	2200      	movs	r2, #0
 800935e:	0020      	movs	r0, r4
 8009360:	0029      	movs	r1, r5
 8009362:	f7f8 f92d 	bl	80015c0 <__aeabi_dmul>
 8009366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009368:	9006      	str	r0, [sp, #24]
 800936a:	9107      	str	r1, [sp, #28]
 800936c:	3301      	adds	r3, #1
 800936e:	930e      	str	r3, [sp, #56]	; 0x38
 8009370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009372:	1e7e      	subs	r6, r7, #1
 8009374:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009376:	9310      	str	r3, [sp, #64]	; 0x40
 8009378:	f7f8 ff2e 	bl	80021d8 <__aeabi_i2d>
 800937c:	9a06      	ldr	r2, [sp, #24]
 800937e:	9b07      	ldr	r3, [sp, #28]
 8009380:	f7f8 f91e 	bl	80015c0 <__aeabi_dmul>
 8009384:	2200      	movs	r2, #0
 8009386:	4bb2      	ldr	r3, [pc, #712]	; (8009650 <_dtoa_r+0x6cc>)
 8009388:	f7f7 f9f4 	bl	8000774 <__aeabi_dadd>
 800938c:	4ab1      	ldr	r2, [pc, #708]	; (8009654 <_dtoa_r+0x6d0>)
 800938e:	900e      	str	r0, [sp, #56]	; 0x38
 8009390:	910f      	str	r1, [sp, #60]	; 0x3c
 8009392:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009396:	4694      	mov	ip, r2
 8009398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800939a:	4463      	add	r3, ip
 800939c:	9315      	str	r3, [sp, #84]	; 0x54
 800939e:	001d      	movs	r5, r3
 80093a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d161      	bne.n	800946a <_dtoa_r+0x4e6>
 80093a6:	9806      	ldr	r0, [sp, #24]
 80093a8:	9907      	ldr	r1, [sp, #28]
 80093aa:	2200      	movs	r2, #0
 80093ac:	4baa      	ldr	r3, [pc, #680]	; (8009658 <_dtoa_r+0x6d4>)
 80093ae:	f7f8 fb79 	bl	8001aa4 <__aeabi_dsub>
 80093b2:	0022      	movs	r2, r4
 80093b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093b6:	9006      	str	r0, [sp, #24]
 80093b8:	9107      	str	r1, [sp, #28]
 80093ba:	f7f7 f857 	bl	800046c <__aeabi_dcmpgt>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d000      	beq.n	80093c4 <_dtoa_r+0x440>
 80093c2:	e2a8      	b.n	8009916 <_dtoa_r+0x992>
 80093c4:	48a5      	ldr	r0, [pc, #660]	; (800965c <_dtoa_r+0x6d8>)
 80093c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093c8:	4684      	mov	ip, r0
 80093ca:	4461      	add	r1, ip
 80093cc:	000b      	movs	r3, r1
 80093ce:	9806      	ldr	r0, [sp, #24]
 80093d0:	9907      	ldr	r1, [sp, #28]
 80093d2:	0022      	movs	r2, r4
 80093d4:	f7f7 f836 	bl	8000444 <__aeabi_dcmplt>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d000      	beq.n	80093de <_dtoa_r+0x45a>
 80093dc:	e295      	b.n	800990a <_dtoa_r+0x986>
 80093de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80093e2:	9306      	str	r3, [sp, #24]
 80093e4:	9407      	str	r4, [sp, #28]
 80093e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da00      	bge.n	80093ee <_dtoa_r+0x46a>
 80093ec:	e15c      	b.n	80096a8 <_dtoa_r+0x724>
 80093ee:	2f0e      	cmp	r7, #14
 80093f0:	dd00      	ble.n	80093f4 <_dtoa_r+0x470>
 80093f2:	e159      	b.n	80096a8 <_dtoa_r+0x724>
 80093f4:	4b93      	ldr	r3, [pc, #588]	; (8009644 <_dtoa_r+0x6c0>)
 80093f6:	00fa      	lsls	r2, r7, #3
 80093f8:	189b      	adds	r3, r3, r2
 80093fa:	685c      	ldr	r4, [r3, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	9405      	str	r4, [sp, #20]
 8009402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009404:	2b00      	cmp	r3, #0
 8009406:	db00      	blt.n	800940a <_dtoa_r+0x486>
 8009408:	e0d8      	b.n	80095bc <_dtoa_r+0x638>
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd00      	ble.n	8009412 <_dtoa_r+0x48e>
 8009410:	e0d4      	b.n	80095bc <_dtoa_r+0x638>
 8009412:	d000      	beq.n	8009416 <_dtoa_r+0x492>
 8009414:	e27d      	b.n	8009912 <_dtoa_r+0x98e>
 8009416:	9804      	ldr	r0, [sp, #16]
 8009418:	9905      	ldr	r1, [sp, #20]
 800941a:	2200      	movs	r2, #0
 800941c:	4b8e      	ldr	r3, [pc, #568]	; (8009658 <_dtoa_r+0x6d4>)
 800941e:	f7f8 f8cf 	bl	80015c0 <__aeabi_dmul>
 8009422:	9a06      	ldr	r2, [sp, #24]
 8009424:	9b07      	ldr	r3, [sp, #28]
 8009426:	f7f7 f82b 	bl	8000480 <__aeabi_dcmpge>
 800942a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	001e      	movs	r6, r3
 8009430:	2800      	cmp	r0, #0
 8009432:	d000      	beq.n	8009436 <_dtoa_r+0x4b2>
 8009434:	e24f      	b.n	80098d6 <_dtoa_r+0x952>
 8009436:	9b08      	ldr	r3, [sp, #32]
 8009438:	9a08      	ldr	r2, [sp, #32]
 800943a:	1c5d      	adds	r5, r3, #1
 800943c:	2331      	movs	r3, #49	; 0x31
 800943e:	3701      	adds	r7, #1
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	e24b      	b.n	80098dc <_dtoa_r+0x958>
 8009444:	4234      	tst	r4, r6
 8009446:	d00a      	beq.n	800945e <_dtoa_r+0x4da>
 8009448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800944a:	4a85      	ldr	r2, [pc, #532]	; (8009660 <_dtoa_r+0x6dc>)
 800944c:	3301      	adds	r3, #1
 800944e:	930e      	str	r3, [sp, #56]	; 0x38
 8009450:	00eb      	lsls	r3, r5, #3
 8009452:	189b      	adds	r3, r3, r2
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f7f8 f8b2 	bl	80015c0 <__aeabi_dmul>
 800945c:	0033      	movs	r3, r6
 800945e:	1064      	asrs	r4, r4, #1
 8009460:	3501      	adds	r5, #1
 8009462:	e75f      	b.n	8009324 <_dtoa_r+0x3a0>
 8009464:	003e      	movs	r6, r7
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	e784      	b.n	8009374 <_dtoa_r+0x3f0>
 800946a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800946c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800946e:	1e5a      	subs	r2, r3, #1
 8009470:	4b74      	ldr	r3, [pc, #464]	; (8009644 <_dtoa_r+0x6c0>)
 8009472:	00d2      	lsls	r2, r2, #3
 8009474:	189b      	adds	r3, r3, r2
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2900      	cmp	r1, #0
 800947c:	d049      	beq.n	8009512 <_dtoa_r+0x58e>
 800947e:	2000      	movs	r0, #0
 8009480:	4978      	ldr	r1, [pc, #480]	; (8009664 <_dtoa_r+0x6e0>)
 8009482:	f7f7 fc93 	bl	8000dac <__aeabi_ddiv>
 8009486:	002b      	movs	r3, r5
 8009488:	0022      	movs	r2, r4
 800948a:	f7f8 fb0b 	bl	8001aa4 <__aeabi_dsub>
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	900e      	str	r0, [sp, #56]	; 0x38
 8009492:	910f      	str	r1, [sp, #60]	; 0x3c
 8009494:	9315      	str	r3, [sp, #84]	; 0x54
 8009496:	9806      	ldr	r0, [sp, #24]
 8009498:	9907      	ldr	r1, [sp, #28]
 800949a:	f7f8 fe67 	bl	800216c <__aeabi_d2iz>
 800949e:	0004      	movs	r4, r0
 80094a0:	f7f8 fe9a 	bl	80021d8 <__aeabi_i2d>
 80094a4:	0002      	movs	r2, r0
 80094a6:	000b      	movs	r3, r1
 80094a8:	9806      	ldr	r0, [sp, #24]
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	f7f8 fafa 	bl	8001aa4 <__aeabi_dsub>
 80094b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094b2:	3430      	adds	r4, #48	; 0x30
 80094b4:	1c5d      	adds	r5, r3, #1
 80094b6:	701c      	strb	r4, [r3, #0]
 80094b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094bc:	9006      	str	r0, [sp, #24]
 80094be:	9107      	str	r1, [sp, #28]
 80094c0:	f7f6 ffc0 	bl	8000444 <__aeabi_dcmplt>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d16c      	bne.n	80095a2 <_dtoa_r+0x61e>
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	9b07      	ldr	r3, [sp, #28]
 80094cc:	2000      	movs	r0, #0
 80094ce:	495e      	ldr	r1, [pc, #376]	; (8009648 <_dtoa_r+0x6c4>)
 80094d0:	f7f8 fae8 	bl	8001aa4 <__aeabi_dsub>
 80094d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094d8:	f7f6 ffb4 	bl	8000444 <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d000      	beq.n	80094e2 <_dtoa_r+0x55e>
 80094e0:	e0c3      	b.n	800966a <_dtoa_r+0x6e6>
 80094e2:	9b08      	ldr	r3, [sp, #32]
 80094e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094e6:	1aeb      	subs	r3, r5, r3
 80094e8:	429a      	cmp	r2, r3
 80094ea:	dc00      	bgt.n	80094ee <_dtoa_r+0x56a>
 80094ec:	e777      	b.n	80093de <_dtoa_r+0x45a>
 80094ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80094f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094f2:	2200      	movs	r2, #0
 80094f4:	4b55      	ldr	r3, [pc, #340]	; (800964c <_dtoa_r+0x6c8>)
 80094f6:	f7f8 f863 	bl	80015c0 <__aeabi_dmul>
 80094fa:	2200      	movs	r2, #0
 80094fc:	900e      	str	r0, [sp, #56]	; 0x38
 80094fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8009500:	9806      	ldr	r0, [sp, #24]
 8009502:	9907      	ldr	r1, [sp, #28]
 8009504:	4b51      	ldr	r3, [pc, #324]	; (800964c <_dtoa_r+0x6c8>)
 8009506:	f7f8 f85b 	bl	80015c0 <__aeabi_dmul>
 800950a:	9515      	str	r5, [sp, #84]	; 0x54
 800950c:	9006      	str	r0, [sp, #24]
 800950e:	9107      	str	r1, [sp, #28]
 8009510:	e7c1      	b.n	8009496 <_dtoa_r+0x512>
 8009512:	0020      	movs	r0, r4
 8009514:	0029      	movs	r1, r5
 8009516:	f7f8 f853 	bl	80015c0 <__aeabi_dmul>
 800951a:	9c08      	ldr	r4, [sp, #32]
 800951c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800951e:	0023      	movs	r3, r4
 8009520:	4694      	mov	ip, r2
 8009522:	900e      	str	r0, [sp, #56]	; 0x38
 8009524:	910f      	str	r1, [sp, #60]	; 0x3c
 8009526:	4463      	add	r3, ip
 8009528:	9315      	str	r3, [sp, #84]	; 0x54
 800952a:	9806      	ldr	r0, [sp, #24]
 800952c:	9907      	ldr	r1, [sp, #28]
 800952e:	f7f8 fe1d 	bl	800216c <__aeabi_d2iz>
 8009532:	0005      	movs	r5, r0
 8009534:	f7f8 fe50 	bl	80021d8 <__aeabi_i2d>
 8009538:	000b      	movs	r3, r1
 800953a:	0002      	movs	r2, r0
 800953c:	9806      	ldr	r0, [sp, #24]
 800953e:	9907      	ldr	r1, [sp, #28]
 8009540:	f7f8 fab0 	bl	8001aa4 <__aeabi_dsub>
 8009544:	3530      	adds	r5, #48	; 0x30
 8009546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009548:	7025      	strb	r5, [r4, #0]
 800954a:	3401      	adds	r4, #1
 800954c:	9006      	str	r0, [sp, #24]
 800954e:	9107      	str	r1, [sp, #28]
 8009550:	42a3      	cmp	r3, r4
 8009552:	d12a      	bne.n	80095aa <_dtoa_r+0x626>
 8009554:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009556:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009558:	9a08      	ldr	r2, [sp, #32]
 800955a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800955c:	4694      	mov	ip, r2
 800955e:	4463      	add	r3, ip
 8009560:	2200      	movs	r2, #0
 8009562:	001d      	movs	r5, r3
 8009564:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <_dtoa_r+0x6e0>)
 8009566:	f7f7 f905 	bl	8000774 <__aeabi_dadd>
 800956a:	0002      	movs	r2, r0
 800956c:	000b      	movs	r3, r1
 800956e:	9806      	ldr	r0, [sp, #24]
 8009570:	9907      	ldr	r1, [sp, #28]
 8009572:	f7f6 ff7b 	bl	800046c <__aeabi_dcmpgt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d000      	beq.n	800957c <_dtoa_r+0x5f8>
 800957a:	e076      	b.n	800966a <_dtoa_r+0x6e6>
 800957c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800957e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009580:	2000      	movs	r0, #0
 8009582:	4938      	ldr	r1, [pc, #224]	; (8009664 <_dtoa_r+0x6e0>)
 8009584:	f7f8 fa8e 	bl	8001aa4 <__aeabi_dsub>
 8009588:	0002      	movs	r2, r0
 800958a:	000b      	movs	r3, r1
 800958c:	9806      	ldr	r0, [sp, #24]
 800958e:	9907      	ldr	r1, [sp, #28]
 8009590:	f7f6 ff58 	bl	8000444 <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	d100      	bne.n	800959a <_dtoa_r+0x616>
 8009598:	e721      	b.n	80093de <_dtoa_r+0x45a>
 800959a:	1e6b      	subs	r3, r5, #1
 800959c:	781a      	ldrb	r2, [r3, #0]
 800959e:	2a30      	cmp	r2, #48	; 0x30
 80095a0:	d001      	beq.n	80095a6 <_dtoa_r+0x622>
 80095a2:	0037      	movs	r7, r6
 80095a4:	e03f      	b.n	8009626 <_dtoa_r+0x6a2>
 80095a6:	001d      	movs	r5, r3
 80095a8:	e7f7      	b.n	800959a <_dtoa_r+0x616>
 80095aa:	9806      	ldr	r0, [sp, #24]
 80095ac:	9907      	ldr	r1, [sp, #28]
 80095ae:	2200      	movs	r2, #0
 80095b0:	4b26      	ldr	r3, [pc, #152]	; (800964c <_dtoa_r+0x6c8>)
 80095b2:	f7f8 f805 	bl	80015c0 <__aeabi_dmul>
 80095b6:	9006      	str	r0, [sp, #24]
 80095b8:	9107      	str	r1, [sp, #28]
 80095ba:	e7b6      	b.n	800952a <_dtoa_r+0x5a6>
 80095bc:	9e08      	ldr	r6, [sp, #32]
 80095be:	9a04      	ldr	r2, [sp, #16]
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	9806      	ldr	r0, [sp, #24]
 80095c4:	9907      	ldr	r1, [sp, #28]
 80095c6:	f7f7 fbf1 	bl	8000dac <__aeabi_ddiv>
 80095ca:	f7f8 fdcf 	bl	800216c <__aeabi_d2iz>
 80095ce:	0004      	movs	r4, r0
 80095d0:	f7f8 fe02 	bl	80021d8 <__aeabi_i2d>
 80095d4:	9a04      	ldr	r2, [sp, #16]
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	f7f7 fff2 	bl	80015c0 <__aeabi_dmul>
 80095dc:	0002      	movs	r2, r0
 80095de:	000b      	movs	r3, r1
 80095e0:	9806      	ldr	r0, [sp, #24]
 80095e2:	9907      	ldr	r1, [sp, #28]
 80095e4:	f7f8 fa5e 	bl	8001aa4 <__aeabi_dsub>
 80095e8:	0023      	movs	r3, r4
 80095ea:	3330      	adds	r3, #48	; 0x30
 80095ec:	7033      	strb	r3, [r6, #0]
 80095ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f0:	9b08      	ldr	r3, [sp, #32]
 80095f2:	1c75      	adds	r5, r6, #1
 80095f4:	1aeb      	subs	r3, r5, r3
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d148      	bne.n	800968c <_dtoa_r+0x708>
 80095fa:	0002      	movs	r2, r0
 80095fc:	000b      	movs	r3, r1
 80095fe:	f7f7 f8b9 	bl	8000774 <__aeabi_dadd>
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	9b05      	ldr	r3, [sp, #20]
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	9107      	str	r1, [sp, #28]
 800960a:	f7f6 ff2f 	bl	800046c <__aeabi_dcmpgt>
 800960e:	2800      	cmp	r0, #0
 8009610:	d12a      	bne.n	8009668 <_dtoa_r+0x6e4>
 8009612:	9a04      	ldr	r2, [sp, #16]
 8009614:	9b05      	ldr	r3, [sp, #20]
 8009616:	9806      	ldr	r0, [sp, #24]
 8009618:	9907      	ldr	r1, [sp, #28]
 800961a:	f7f6 ff0d 	bl	8000438 <__aeabi_dcmpeq>
 800961e:	2800      	cmp	r0, #0
 8009620:	d001      	beq.n	8009626 <_dtoa_r+0x6a2>
 8009622:	07e3      	lsls	r3, r4, #31
 8009624:	d420      	bmi.n	8009668 <_dtoa_r+0x6e4>
 8009626:	9903      	ldr	r1, [sp, #12]
 8009628:	9802      	ldr	r0, [sp, #8]
 800962a:	f000 fe2c 	bl	800a286 <_Bfree>
 800962e:	2300      	movs	r3, #0
 8009630:	702b      	strb	r3, [r5, #0]
 8009632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009634:	3701      	adds	r7, #1
 8009636:	601f      	str	r7, [r3, #0]
 8009638:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800963a:	2b00      	cmp	r3, #0
 800963c:	d100      	bne.n	8009640 <_dtoa_r+0x6bc>
 800963e:	e4e6      	b.n	800900e <_dtoa_r+0x8a>
 8009640:	601d      	str	r5, [r3, #0]
 8009642:	e4e4      	b.n	800900e <_dtoa_r+0x8a>
 8009644:	0800b428 	.word	0x0800b428
 8009648:	3ff00000 	.word	0x3ff00000
 800964c:	40240000 	.word	0x40240000
 8009650:	401c0000 	.word	0x401c0000
 8009654:	fcc00000 	.word	0xfcc00000
 8009658:	40140000 	.word	0x40140000
 800965c:	7cc00000 	.word	0x7cc00000
 8009660:	0800b400 	.word	0x0800b400
 8009664:	3fe00000 	.word	0x3fe00000
 8009668:	003e      	movs	r6, r7
 800966a:	1e6b      	subs	r3, r5, #1
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	2a39      	cmp	r2, #57	; 0x39
 8009670:	d106      	bne.n	8009680 <_dtoa_r+0x6fc>
 8009672:	9a08      	ldr	r2, [sp, #32]
 8009674:	429a      	cmp	r2, r3
 8009676:	d107      	bne.n	8009688 <_dtoa_r+0x704>
 8009678:	2330      	movs	r3, #48	; 0x30
 800967a:	7013      	strb	r3, [r2, #0]
 800967c:	0013      	movs	r3, r2
 800967e:	3601      	adds	r6, #1
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	3201      	adds	r2, #1
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e78c      	b.n	80095a2 <_dtoa_r+0x61e>
 8009688:	001d      	movs	r5, r3
 800968a:	e7ee      	b.n	800966a <_dtoa_r+0x6e6>
 800968c:	2200      	movs	r2, #0
 800968e:	4ba4      	ldr	r3, [pc, #656]	; (8009920 <_dtoa_r+0x99c>)
 8009690:	f7f7 ff96 	bl	80015c0 <__aeabi_dmul>
 8009694:	2200      	movs	r2, #0
 8009696:	2300      	movs	r3, #0
 8009698:	9006      	str	r0, [sp, #24]
 800969a:	9107      	str	r1, [sp, #28]
 800969c:	002e      	movs	r6, r5
 800969e:	f7f6 fecb 	bl	8000438 <__aeabi_dcmpeq>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d08b      	beq.n	80095be <_dtoa_r+0x63a>
 80096a6:	e7be      	b.n	8009626 <_dtoa_r+0x6a2>
 80096a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d100      	bne.n	80096b0 <_dtoa_r+0x72c>
 80096ae:	e0da      	b.n	8009866 <_dtoa_r+0x8e2>
 80096b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096b2:	2a01      	cmp	r2, #1
 80096b4:	dd00      	ble.n	80096b8 <_dtoa_r+0x734>
 80096b6:	e0bd      	b.n	8009834 <_dtoa_r+0x8b0>
 80096b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	d100      	bne.n	80096c0 <_dtoa_r+0x73c>
 80096be:	e0b5      	b.n	800982c <_dtoa_r+0x8a8>
 80096c0:	4a98      	ldr	r2, [pc, #608]	; (8009924 <_dtoa_r+0x9a0>)
 80096c2:	189b      	adds	r3, r3, r2
 80096c4:	9d04      	ldr	r5, [sp, #16]
 80096c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80096c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ca:	2101      	movs	r1, #1
 80096cc:	18d2      	adds	r2, r2, r3
 80096ce:	920a      	str	r2, [sp, #40]	; 0x28
 80096d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d2:	9802      	ldr	r0, [sp, #8]
 80096d4:	18d3      	adds	r3, r2, r3
 80096d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096d8:	f000 feb3 	bl	800a442 <__i2b>
 80096dc:	0006      	movs	r6, r0
 80096de:	2c00      	cmp	r4, #0
 80096e0:	dd0e      	ble.n	8009700 <_dtoa_r+0x77c>
 80096e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dd0b      	ble.n	8009700 <_dtoa_r+0x77c>
 80096e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ea:	0023      	movs	r3, r4
 80096ec:	4294      	cmp	r4, r2
 80096ee:	dd00      	ble.n	80096f2 <_dtoa_r+0x76e>
 80096f0:	0013      	movs	r3, r2
 80096f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096f4:	1ae4      	subs	r4, r4, r3
 80096f6:	1ad2      	subs	r2, r2, r3
 80096f8:	920a      	str	r2, [sp, #40]	; 0x28
 80096fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d01f      	beq.n	8009746 <_dtoa_r+0x7c2>
 8009706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009708:	2b00      	cmp	r3, #0
 800970a:	d100      	bne.n	800970e <_dtoa_r+0x78a>
 800970c:	e0af      	b.n	800986e <_dtoa_r+0x8ea>
 800970e:	2d00      	cmp	r5, #0
 8009710:	d011      	beq.n	8009736 <_dtoa_r+0x7b2>
 8009712:	0031      	movs	r1, r6
 8009714:	002a      	movs	r2, r5
 8009716:	9802      	ldr	r0, [sp, #8]
 8009718:	f000 ff2c 	bl	800a574 <__pow5mult>
 800971c:	9a03      	ldr	r2, [sp, #12]
 800971e:	0001      	movs	r1, r0
 8009720:	0006      	movs	r6, r0
 8009722:	9802      	ldr	r0, [sp, #8]
 8009724:	f000 fe96 	bl	800a454 <__multiply>
 8009728:	9903      	ldr	r1, [sp, #12]
 800972a:	9010      	str	r0, [sp, #64]	; 0x40
 800972c:	9802      	ldr	r0, [sp, #8]
 800972e:	f000 fdaa 	bl	800a286 <_Bfree>
 8009732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	1b5a      	subs	r2, r3, r5
 800973a:	d004      	beq.n	8009746 <_dtoa_r+0x7c2>
 800973c:	9903      	ldr	r1, [sp, #12]
 800973e:	9802      	ldr	r0, [sp, #8]
 8009740:	f000 ff18 	bl	800a574 <__pow5mult>
 8009744:	9003      	str	r0, [sp, #12]
 8009746:	2101      	movs	r1, #1
 8009748:	9802      	ldr	r0, [sp, #8]
 800974a:	f000 fe7a 	bl	800a442 <__i2b>
 800974e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009750:	9004      	str	r0, [sp, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d100      	bne.n	8009758 <_dtoa_r+0x7d4>
 8009756:	e1e3      	b.n	8009b20 <_dtoa_r+0xb9c>
 8009758:	001a      	movs	r2, r3
 800975a:	0001      	movs	r1, r0
 800975c:	9802      	ldr	r0, [sp, #8]
 800975e:	f000 ff09 	bl	800a574 <__pow5mult>
 8009762:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009764:	9004      	str	r0, [sp, #16]
 8009766:	2b01      	cmp	r3, #1
 8009768:	dd00      	ble.n	800976c <_dtoa_r+0x7e8>
 800976a:	e082      	b.n	8009872 <_dtoa_r+0x8ee>
 800976c:	2500      	movs	r5, #0
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	42ab      	cmp	r3, r5
 8009772:	d10e      	bne.n	8009792 <_dtoa_r+0x80e>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	031b      	lsls	r3, r3, #12
 8009778:	42ab      	cmp	r3, r5
 800977a:	d10a      	bne.n	8009792 <_dtoa_r+0x80e>
 800977c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800977e:	9a07      	ldr	r2, [sp, #28]
 8009780:	4213      	tst	r3, r2
 8009782:	d006      	beq.n	8009792 <_dtoa_r+0x80e>
 8009784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009786:	3501      	adds	r5, #1
 8009788:	3301      	adds	r3, #1
 800978a:	930a      	str	r3, [sp, #40]	; 0x28
 800978c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800978e:	3301      	adds	r3, #1
 8009790:	930b      	str	r3, [sp, #44]	; 0x2c
 8009792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009794:	2001      	movs	r0, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d16c      	bne.n	8009874 <_dtoa_r+0x8f0>
 800979a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800979c:	1818      	adds	r0, r3, r0
 800979e:	231f      	movs	r3, #31
 80097a0:	4018      	ands	r0, r3
 80097a2:	d07e      	beq.n	80098a2 <_dtoa_r+0x91e>
 80097a4:	3301      	adds	r3, #1
 80097a6:	1a1b      	subs	r3, r3, r0
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	dd70      	ble.n	800988e <_dtoa_r+0x90a>
 80097ac:	231c      	movs	r3, #28
 80097ae:	1a18      	subs	r0, r3, r0
 80097b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b2:	1824      	adds	r4, r4, r0
 80097b4:	181b      	adds	r3, r3, r0
 80097b6:	930a      	str	r3, [sp, #40]	; 0x28
 80097b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ba:	181b      	adds	r3, r3, r0
 80097bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80097be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dd05      	ble.n	80097d0 <_dtoa_r+0x84c>
 80097c4:	001a      	movs	r2, r3
 80097c6:	9903      	ldr	r1, [sp, #12]
 80097c8:	9802      	ldr	r0, [sp, #8]
 80097ca:	f000 ff25 	bl	800a618 <__lshift>
 80097ce:	9003      	str	r0, [sp, #12]
 80097d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	dd05      	ble.n	80097e2 <_dtoa_r+0x85e>
 80097d6:	001a      	movs	r2, r3
 80097d8:	9904      	ldr	r1, [sp, #16]
 80097da:	9802      	ldr	r0, [sp, #8]
 80097dc:	f000 ff1c 	bl	800a618 <__lshift>
 80097e0:	9004      	str	r0, [sp, #16]
 80097e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d05e      	beq.n	80098a6 <_dtoa_r+0x922>
 80097e8:	9904      	ldr	r1, [sp, #16]
 80097ea:	9803      	ldr	r0, [sp, #12]
 80097ec:	f000 ff66 	bl	800a6bc <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	da58      	bge.n	80098a6 <_dtoa_r+0x922>
 80097f4:	2300      	movs	r3, #0
 80097f6:	220a      	movs	r2, #10
 80097f8:	9903      	ldr	r1, [sp, #12]
 80097fa:	9802      	ldr	r0, [sp, #8]
 80097fc:	f000 fd5c 	bl	800a2b8 <__multadd>
 8009800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009802:	3f01      	subs	r7, #1
 8009804:	9003      	str	r0, [sp, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d100      	bne.n	800980c <_dtoa_r+0x888>
 800980a:	e190      	b.n	8009b2e <_dtoa_r+0xbaa>
 800980c:	2300      	movs	r3, #0
 800980e:	0031      	movs	r1, r6
 8009810:	220a      	movs	r2, #10
 8009812:	9802      	ldr	r0, [sp, #8]
 8009814:	f000 fd50 	bl	800a2b8 <__multadd>
 8009818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800981a:	0006      	movs	r6, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd00      	ble.n	8009822 <_dtoa_r+0x89e>
 8009820:	e088      	b.n	8009934 <_dtoa_r+0x9b0>
 8009822:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009824:	2b02      	cmp	r3, #2
 8009826:	dc00      	bgt.n	800982a <_dtoa_r+0x8a6>
 8009828:	e084      	b.n	8009934 <_dtoa_r+0x9b0>
 800982a:	e044      	b.n	80098b6 <_dtoa_r+0x932>
 800982c:	2336      	movs	r3, #54	; 0x36
 800982e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009830:	1a9b      	subs	r3, r3, r2
 8009832:	e747      	b.n	80096c4 <_dtoa_r+0x740>
 8009834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009836:	1e5d      	subs	r5, r3, #1
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	42ab      	cmp	r3, r5
 800983c:	db08      	blt.n	8009850 <_dtoa_r+0x8cc>
 800983e:	1b5d      	subs	r5, r3, r5
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	da0c      	bge.n	8009860 <_dtoa_r+0x8dc>
 8009846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800984a:	1a9c      	subs	r4, r3, r2
 800984c:	2300      	movs	r3, #0
 800984e:	e73b      	b.n	80096c8 <_dtoa_r+0x744>
 8009850:	9b04      	ldr	r3, [sp, #16]
 8009852:	9504      	str	r5, [sp, #16]
 8009854:	1aea      	subs	r2, r5, r3
 8009856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009858:	2500      	movs	r5, #0
 800985a:	189b      	adds	r3, r3, r2
 800985c:	9311      	str	r3, [sp, #68]	; 0x44
 800985e:	e7ef      	b.n	8009840 <_dtoa_r+0x8bc>
 8009860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	e730      	b.n	80096c8 <_dtoa_r+0x744>
 8009866:	9d04      	ldr	r5, [sp, #16]
 8009868:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800986a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800986c:	e737      	b.n	80096de <_dtoa_r+0x75a>
 800986e:	9a04      	ldr	r2, [sp, #16]
 8009870:	e764      	b.n	800973c <_dtoa_r+0x7b8>
 8009872:	2500      	movs	r5, #0
 8009874:	9b04      	ldr	r3, [sp, #16]
 8009876:	9a04      	ldr	r2, [sp, #16]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	9310      	str	r3, [sp, #64]	; 0x40
 800987c:	3303      	adds	r3, #3
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	18d3      	adds	r3, r2, r3
 8009882:	6858      	ldr	r0, [r3, #4]
 8009884:	f000 fd94 	bl	800a3b0 <__hi0bits>
 8009888:	2320      	movs	r3, #32
 800988a:	1a18      	subs	r0, r3, r0
 800988c:	e785      	b.n	800979a <_dtoa_r+0x816>
 800988e:	2b04      	cmp	r3, #4
 8009890:	d095      	beq.n	80097be <_dtoa_r+0x83a>
 8009892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009894:	331c      	adds	r3, #28
 8009896:	18d2      	adds	r2, r2, r3
 8009898:	920a      	str	r2, [sp, #40]	; 0x28
 800989a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800989c:	18e4      	adds	r4, r4, r3
 800989e:	18d3      	adds	r3, r2, r3
 80098a0:	e78c      	b.n	80097bc <_dtoa_r+0x838>
 80098a2:	0003      	movs	r3, r0
 80098a4:	e7f5      	b.n	8009892 <_dtoa_r+0x90e>
 80098a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dc3d      	bgt.n	8009928 <_dtoa_r+0x9a4>
 80098ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	dd3a      	ble.n	8009928 <_dtoa_r+0x9a4>
 80098b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b4:	930c      	str	r3, [sp, #48]	; 0x30
 80098b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10c      	bne.n	80098d6 <_dtoa_r+0x952>
 80098bc:	9904      	ldr	r1, [sp, #16]
 80098be:	2205      	movs	r2, #5
 80098c0:	9802      	ldr	r0, [sp, #8]
 80098c2:	f000 fcf9 	bl	800a2b8 <__multadd>
 80098c6:	9004      	str	r0, [sp, #16]
 80098c8:	0001      	movs	r1, r0
 80098ca:	9803      	ldr	r0, [sp, #12]
 80098cc:	f000 fef6 	bl	800a6bc <__mcmp>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dd00      	ble.n	80098d6 <_dtoa_r+0x952>
 80098d4:	e5af      	b.n	8009436 <_dtoa_r+0x4b2>
 80098d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d8:	9d08      	ldr	r5, [sp, #32]
 80098da:	43df      	mvns	r7, r3
 80098dc:	2300      	movs	r3, #0
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	9904      	ldr	r1, [sp, #16]
 80098e2:	9802      	ldr	r0, [sp, #8]
 80098e4:	f000 fccf 	bl	800a286 <_Bfree>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	d100      	bne.n	80098ee <_dtoa_r+0x96a>
 80098ec:	e69b      	b.n	8009626 <_dtoa_r+0x6a2>
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <_dtoa_r+0x97c>
 80098f4:	42b3      	cmp	r3, r6
 80098f6:	d003      	beq.n	8009900 <_dtoa_r+0x97c>
 80098f8:	0019      	movs	r1, r3
 80098fa:	9802      	ldr	r0, [sp, #8]
 80098fc:	f000 fcc3 	bl	800a286 <_Bfree>
 8009900:	0031      	movs	r1, r6
 8009902:	9802      	ldr	r0, [sp, #8]
 8009904:	f000 fcbf 	bl	800a286 <_Bfree>
 8009908:	e68d      	b.n	8009626 <_dtoa_r+0x6a2>
 800990a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	001e      	movs	r6, r3
 8009910:	e7e1      	b.n	80098d6 <_dtoa_r+0x952>
 8009912:	2300      	movs	r3, #0
 8009914:	e7fa      	b.n	800990c <_dtoa_r+0x988>
 8009916:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009918:	0037      	movs	r7, r6
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	001e      	movs	r6, r3
 800991e:	e58a      	b.n	8009436 <_dtoa_r+0x4b2>
 8009920:	40240000 	.word	0x40240000
 8009924:	00000433 	.word	0x00000433
 8009928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992a:	2b00      	cmp	r3, #0
 800992c:	d100      	bne.n	8009930 <_dtoa_r+0x9ac>
 800992e:	e0b2      	b.n	8009a96 <_dtoa_r+0xb12>
 8009930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009932:	930c      	str	r3, [sp, #48]	; 0x30
 8009934:	2c00      	cmp	r4, #0
 8009936:	dd05      	ble.n	8009944 <_dtoa_r+0x9c0>
 8009938:	0031      	movs	r1, r6
 800993a:	0022      	movs	r2, r4
 800993c:	9802      	ldr	r0, [sp, #8]
 800993e:	f000 fe6b 	bl	800a618 <__lshift>
 8009942:	0006      	movs	r6, r0
 8009944:	0030      	movs	r0, r6
 8009946:	2d00      	cmp	r5, #0
 8009948:	d011      	beq.n	800996e <_dtoa_r+0x9ea>
 800994a:	6871      	ldr	r1, [r6, #4]
 800994c:	9802      	ldr	r0, [sp, #8]
 800994e:	f000 fc62 	bl	800a216 <_Balloc>
 8009952:	0031      	movs	r1, r6
 8009954:	0004      	movs	r4, r0
 8009956:	6933      	ldr	r3, [r6, #16]
 8009958:	310c      	adds	r1, #12
 800995a:	1c9a      	adds	r2, r3, #2
 800995c:	0092      	lsls	r2, r2, #2
 800995e:	300c      	adds	r0, #12
 8009960:	f7fd fce6 	bl	8007330 <memcpy>
 8009964:	2201      	movs	r2, #1
 8009966:	0021      	movs	r1, r4
 8009968:	9802      	ldr	r0, [sp, #8]
 800996a:	f000 fe55 	bl	800a618 <__lshift>
 800996e:	9609      	str	r6, [sp, #36]	; 0x24
 8009970:	0006      	movs	r6, r0
 8009972:	9b08      	ldr	r3, [sp, #32]
 8009974:	930a      	str	r3, [sp, #40]	; 0x28
 8009976:	9904      	ldr	r1, [sp, #16]
 8009978:	9803      	ldr	r0, [sp, #12]
 800997a:	f7ff fa7d 	bl	8008e78 <quorem>
 800997e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009980:	900d      	str	r0, [sp, #52]	; 0x34
 8009982:	0004      	movs	r4, r0
 8009984:	9803      	ldr	r0, [sp, #12]
 8009986:	f000 fe99 	bl	800a6bc <__mcmp>
 800998a:	0032      	movs	r2, r6
 800998c:	9010      	str	r0, [sp, #64]	; 0x40
 800998e:	9904      	ldr	r1, [sp, #16]
 8009990:	9802      	ldr	r0, [sp, #8]
 8009992:	f000 fead 	bl	800a6f0 <__mdiff>
 8009996:	2301      	movs	r3, #1
 8009998:	930b      	str	r3, [sp, #44]	; 0x2c
 800999a:	68c3      	ldr	r3, [r0, #12]
 800999c:	3430      	adds	r4, #48	; 0x30
 800999e:	0005      	movs	r5, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <_dtoa_r+0xa2a>
 80099a4:	0001      	movs	r1, r0
 80099a6:	9803      	ldr	r0, [sp, #12]
 80099a8:	f000 fe88 	bl	800a6bc <__mcmp>
 80099ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80099ae:	0029      	movs	r1, r5
 80099b0:	9802      	ldr	r0, [sp, #8]
 80099b2:	f000 fc68 	bl	800a286 <_Bfree>
 80099b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d10e      	bne.n	80099dc <_dtoa_r+0xa58>
 80099be:	9a06      	ldr	r2, [sp, #24]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4213      	tst	r3, r2
 80099c4:	d10a      	bne.n	80099dc <_dtoa_r+0xa58>
 80099c6:	2c39      	cmp	r4, #57	; 0x39
 80099c8:	d026      	beq.n	8009a18 <_dtoa_r+0xa94>
 80099ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dd01      	ble.n	80099d4 <_dtoa_r+0xa50>
 80099d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80099d2:	3431      	adds	r4, #49	; 0x31
 80099d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d6:	1c5d      	adds	r5, r3, #1
 80099d8:	701c      	strb	r4, [r3, #0]
 80099da:	e781      	b.n	80098e0 <_dtoa_r+0x95c>
 80099dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	db07      	blt.n	80099f2 <_dtoa_r+0xa6e>
 80099e2:	001d      	movs	r5, r3
 80099e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80099e6:	431d      	orrs	r5, r3
 80099e8:	d122      	bne.n	8009a30 <_dtoa_r+0xaac>
 80099ea:	2301      	movs	r3, #1
 80099ec:	9a06      	ldr	r2, [sp, #24]
 80099ee:	4213      	tst	r3, r2
 80099f0:	d11e      	bne.n	8009a30 <_dtoa_r+0xaac>
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dded      	ble.n	80099d4 <_dtoa_r+0xa50>
 80099f8:	9903      	ldr	r1, [sp, #12]
 80099fa:	2201      	movs	r2, #1
 80099fc:	9802      	ldr	r0, [sp, #8]
 80099fe:	f000 fe0b 	bl	800a618 <__lshift>
 8009a02:	9904      	ldr	r1, [sp, #16]
 8009a04:	9003      	str	r0, [sp, #12]
 8009a06:	f000 fe59 	bl	800a6bc <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	dc02      	bgt.n	8009a14 <_dtoa_r+0xa90>
 8009a0e:	d1e1      	bne.n	80099d4 <_dtoa_r+0xa50>
 8009a10:	07e3      	lsls	r3, r4, #31
 8009a12:	d5df      	bpl.n	80099d4 <_dtoa_r+0xa50>
 8009a14:	2c39      	cmp	r4, #57	; 0x39
 8009a16:	d1db      	bne.n	80099d0 <_dtoa_r+0xa4c>
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1c:	1c5d      	adds	r5, r3, #1
 8009a1e:	2339      	movs	r3, #57	; 0x39
 8009a20:	7013      	strb	r3, [r2, #0]
 8009a22:	1e6b      	subs	r3, r5, #1
 8009a24:	781a      	ldrb	r2, [r3, #0]
 8009a26:	2a39      	cmp	r2, #57	; 0x39
 8009a28:	d067      	beq.n	8009afa <_dtoa_r+0xb76>
 8009a2a:	3201      	adds	r2, #1
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	e757      	b.n	80098e0 <_dtoa_r+0x95c>
 8009a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a32:	1c5d      	adds	r5, r3, #1
 8009a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd04      	ble.n	8009a44 <_dtoa_r+0xac0>
 8009a3a:	2c39      	cmp	r4, #57	; 0x39
 8009a3c:	d0ec      	beq.n	8009a18 <_dtoa_r+0xa94>
 8009a3e:	3401      	adds	r4, #1
 8009a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a42:	e7c9      	b.n	80099d8 <_dtoa_r+0xa54>
 8009a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a48:	701c      	strb	r4, [r3, #0]
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	1aeb      	subs	r3, r5, r3
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d03e      	beq.n	8009ad0 <_dtoa_r+0xb4c>
 8009a52:	2300      	movs	r3, #0
 8009a54:	220a      	movs	r2, #10
 8009a56:	9903      	ldr	r1, [sp, #12]
 8009a58:	9802      	ldr	r0, [sp, #8]
 8009a5a:	f000 fc2d 	bl	800a2b8 <__multadd>
 8009a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a60:	9003      	str	r0, [sp, #12]
 8009a62:	42b3      	cmp	r3, r6
 8009a64:	d109      	bne.n	8009a7a <_dtoa_r+0xaf6>
 8009a66:	2300      	movs	r3, #0
 8009a68:	220a      	movs	r2, #10
 8009a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6c:	9802      	ldr	r0, [sp, #8]
 8009a6e:	f000 fc23 	bl	800a2b8 <__multadd>
 8009a72:	9009      	str	r0, [sp, #36]	; 0x24
 8009a74:	0006      	movs	r6, r0
 8009a76:	950a      	str	r5, [sp, #40]	; 0x28
 8009a78:	e77d      	b.n	8009976 <_dtoa_r+0x9f2>
 8009a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	220a      	movs	r2, #10
 8009a80:	9802      	ldr	r0, [sp, #8]
 8009a82:	f000 fc19 	bl	800a2b8 <__multadd>
 8009a86:	2300      	movs	r3, #0
 8009a88:	9009      	str	r0, [sp, #36]	; 0x24
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	0031      	movs	r1, r6
 8009a8e:	9802      	ldr	r0, [sp, #8]
 8009a90:	f000 fc12 	bl	800a2b8 <__multadd>
 8009a94:	e7ee      	b.n	8009a74 <_dtoa_r+0xaf0>
 8009a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a98:	930c      	str	r3, [sp, #48]	; 0x30
 8009a9a:	9b08      	ldr	r3, [sp, #32]
 8009a9c:	9306      	str	r3, [sp, #24]
 8009a9e:	9904      	ldr	r1, [sp, #16]
 8009aa0:	9803      	ldr	r0, [sp, #12]
 8009aa2:	f7ff f9e9 	bl	8008e78 <quorem>
 8009aa6:	9b06      	ldr	r3, [sp, #24]
 8009aa8:	3030      	adds	r0, #48	; 0x30
 8009aaa:	1c5d      	adds	r5, r3, #1
 8009aac:	7018      	strb	r0, [r3, #0]
 8009aae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ab0:	9b08      	ldr	r3, [sp, #32]
 8009ab2:	0004      	movs	r4, r0
 8009ab4:	1aeb      	subs	r3, r5, r3
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	dd08      	ble.n	8009acc <_dtoa_r+0xb48>
 8009aba:	2300      	movs	r3, #0
 8009abc:	220a      	movs	r2, #10
 8009abe:	9903      	ldr	r1, [sp, #12]
 8009ac0:	9802      	ldr	r0, [sp, #8]
 8009ac2:	f000 fbf9 	bl	800a2b8 <__multadd>
 8009ac6:	9506      	str	r5, [sp, #24]
 8009ac8:	9003      	str	r0, [sp, #12]
 8009aca:	e7e8      	b.n	8009a9e <_dtoa_r+0xb1a>
 8009acc:	2300      	movs	r3, #0
 8009ace:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad0:	9903      	ldr	r1, [sp, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	9802      	ldr	r0, [sp, #8]
 8009ad6:	f000 fd9f 	bl	800a618 <__lshift>
 8009ada:	9904      	ldr	r1, [sp, #16]
 8009adc:	9003      	str	r0, [sp, #12]
 8009ade:	f000 fded 	bl	800a6bc <__mcmp>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	dc9d      	bgt.n	8009a22 <_dtoa_r+0xa9e>
 8009ae6:	d101      	bne.n	8009aec <_dtoa_r+0xb68>
 8009ae8:	07e3      	lsls	r3, r4, #31
 8009aea:	d49a      	bmi.n	8009a22 <_dtoa_r+0xa9e>
 8009aec:	1e6b      	subs	r3, r5, #1
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	2a30      	cmp	r2, #48	; 0x30
 8009af2:	d000      	beq.n	8009af6 <_dtoa_r+0xb72>
 8009af4:	e6f4      	b.n	80098e0 <_dtoa_r+0x95c>
 8009af6:	001d      	movs	r5, r3
 8009af8:	e7f8      	b.n	8009aec <_dtoa_r+0xb68>
 8009afa:	9a08      	ldr	r2, [sp, #32]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d103      	bne.n	8009b08 <_dtoa_r+0xb84>
 8009b00:	2331      	movs	r3, #49	; 0x31
 8009b02:	3701      	adds	r7, #1
 8009b04:	7013      	strb	r3, [r2, #0]
 8009b06:	e6eb      	b.n	80098e0 <_dtoa_r+0x95c>
 8009b08:	001d      	movs	r5, r3
 8009b0a:	e78a      	b.n	8009a22 <_dtoa_r+0xa9e>
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <_dtoa_r+0xbb8>)
 8009b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b10:	9308      	str	r3, [sp, #32]
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <_dtoa_r+0xbbc>)
 8009b14:	2a00      	cmp	r2, #0
 8009b16:	d001      	beq.n	8009b1c <_dtoa_r+0xb98>
 8009b18:	f7ff fa77 	bl	800900a <_dtoa_r+0x86>
 8009b1c:	f7ff fa77 	bl	800900e <_dtoa_r+0x8a>
 8009b20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	dc00      	bgt.n	8009b28 <_dtoa_r+0xba4>
 8009b26:	e621      	b.n	800976c <_dtoa_r+0x7e8>
 8009b28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	e635      	b.n	800979a <_dtoa_r+0x816>
 8009b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	dcb2      	bgt.n	8009a9a <_dtoa_r+0xb16>
 8009b34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	ddaf      	ble.n	8009a9a <_dtoa_r+0xb16>
 8009b3a:	e6bc      	b.n	80098b6 <_dtoa_r+0x932>
 8009b3c:	0800b3e8 	.word	0x0800b3e8
 8009b40:	0800b3f0 	.word	0x0800b3f0

08009b44 <rshift>:
 8009b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b46:	0004      	movs	r4, r0
 8009b48:	6905      	ldr	r5, [r0, #16]
 8009b4a:	3414      	adds	r4, #20
 8009b4c:	114b      	asrs	r3, r1, #5
 8009b4e:	0026      	movs	r6, r4
 8009b50:	429d      	cmp	r5, r3
 8009b52:	dd14      	ble.n	8009b7e <rshift+0x3a>
 8009b54:	221f      	movs	r2, #31
 8009b56:	00ad      	lsls	r5, r5, #2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4011      	ands	r1, r2
 8009b5c:	1965      	adds	r5, r4, r5
 8009b5e:	18e3      	adds	r3, r4, r3
 8009b60:	0022      	movs	r2, r4
 8009b62:	2900      	cmp	r1, #0
 8009b64:	d01e      	beq.n	8009ba4 <rshift+0x60>
 8009b66:	cb04      	ldmia	r3!, {r2}
 8009b68:	2720      	movs	r7, #32
 8009b6a:	40ca      	lsrs	r2, r1
 8009b6c:	46a4      	mov	ip, r4
 8009b6e:	1a7f      	subs	r7, r7, r1
 8009b70:	4666      	mov	r6, ip
 8009b72:	429d      	cmp	r5, r3
 8009b74:	d80b      	bhi.n	8009b8e <rshift+0x4a>
 8009b76:	6032      	str	r2, [r6, #0]
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	d000      	beq.n	8009b7e <rshift+0x3a>
 8009b7c:	3604      	adds	r6, #4
 8009b7e:	1b33      	subs	r3, r6, r4
 8009b80:	109b      	asrs	r3, r3, #2
 8009b82:	6103      	str	r3, [r0, #16]
 8009b84:	42a6      	cmp	r6, r4
 8009b86:	d101      	bne.n	8009b8c <rshift+0x48>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6143      	str	r3, [r0, #20]
 8009b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8e:	681e      	ldr	r6, [r3, #0]
 8009b90:	40be      	lsls	r6, r7
 8009b92:	4332      	orrs	r2, r6
 8009b94:	4666      	mov	r6, ip
 8009b96:	c604      	stmia	r6!, {r2}
 8009b98:	cb04      	ldmia	r3!, {r2}
 8009b9a:	46b4      	mov	ip, r6
 8009b9c:	40ca      	lsrs	r2, r1
 8009b9e:	e7e7      	b.n	8009b70 <rshift+0x2c>
 8009ba0:	cb02      	ldmia	r3!, {r1}
 8009ba2:	c202      	stmia	r2!, {r1}
 8009ba4:	0016      	movs	r6, r2
 8009ba6:	429d      	cmp	r5, r3
 8009ba8:	d8fa      	bhi.n	8009ba0 <rshift+0x5c>
 8009baa:	e7e8      	b.n	8009b7e <rshift+0x3a>

08009bac <__hexdig_fun>:
 8009bac:	0003      	movs	r3, r0
 8009bae:	3b30      	subs	r3, #48	; 0x30
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	d803      	bhi.n	8009bbc <__hexdig_fun+0x10>
 8009bb4:	3820      	subs	r0, #32
 8009bb6:	b2c3      	uxtb	r3, r0
 8009bb8:	0018      	movs	r0, r3
 8009bba:	4770      	bx	lr
 8009bbc:	0003      	movs	r3, r0
 8009bbe:	3b61      	subs	r3, #97	; 0x61
 8009bc0:	2b05      	cmp	r3, #5
 8009bc2:	d801      	bhi.n	8009bc8 <__hexdig_fun+0x1c>
 8009bc4:	3847      	subs	r0, #71	; 0x47
 8009bc6:	e7f6      	b.n	8009bb6 <__hexdig_fun+0xa>
 8009bc8:	0002      	movs	r2, r0
 8009bca:	3a41      	subs	r2, #65	; 0x41
 8009bcc:	2300      	movs	r3, #0
 8009bce:	2a05      	cmp	r2, #5
 8009bd0:	d8f2      	bhi.n	8009bb8 <__hexdig_fun+0xc>
 8009bd2:	3827      	subs	r0, #39	; 0x27
 8009bd4:	e7ef      	b.n	8009bb6 <__hexdig_fun+0xa>

08009bd6 <__gethex>:
 8009bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd8:	b08d      	sub	sp, #52	; 0x34
 8009bda:	9005      	str	r0, [sp, #20]
 8009bdc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009bde:	9109      	str	r1, [sp, #36]	; 0x24
 8009be0:	9202      	str	r2, [sp, #8]
 8009be2:	930a      	str	r3, [sp, #40]	; 0x28
 8009be4:	f000 fae2 	bl	800a1ac <__localeconv_l>
 8009be8:	6803      	ldr	r3, [r0, #0]
 8009bea:	0018      	movs	r0, r3
 8009bec:	9307      	str	r3, [sp, #28]
 8009bee:	f7f6 fa8b 	bl	8000108 <strlen>
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	9b07      	ldr	r3, [sp, #28]
 8009bf6:	4252      	negs	r2, r2
 8009bf8:	181b      	adds	r3, r3, r0
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	9004      	str	r0, [sp, #16]
 8009c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	6819      	ldr	r1, [r3, #0]
 8009c06:	1c8b      	adds	r3, r1, #2
 8009c08:	1a52      	subs	r2, r2, r1
 8009c0a:	18d1      	adds	r1, r2, r3
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	9108      	str	r1, [sp, #32]
 8009c10:	9901      	ldr	r1, [sp, #4]
 8009c12:	3301      	adds	r3, #1
 8009c14:	7808      	ldrb	r0, [r1, #0]
 8009c16:	2830      	cmp	r0, #48	; 0x30
 8009c18:	d0f7      	beq.n	8009c0a <__gethex+0x34>
 8009c1a:	f7ff ffc7 	bl	8009bac <__hexdig_fun>
 8009c1e:	1e07      	subs	r7, r0, #0
 8009c20:	d000      	beq.n	8009c24 <__gethex+0x4e>
 8009c22:	e06f      	b.n	8009d04 <__gethex+0x12e>
 8009c24:	9a04      	ldr	r2, [sp, #16]
 8009c26:	9907      	ldr	r1, [sp, #28]
 8009c28:	9801      	ldr	r0, [sp, #4]
 8009c2a:	f001 f913 	bl	800ae54 <strncmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d000      	beq.n	8009c34 <__gethex+0x5e>
 8009c32:	e06d      	b.n	8009d10 <__gethex+0x13a>
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	9a04      	ldr	r2, [sp, #16]
 8009c38:	189c      	adds	r4, r3, r2
 8009c3a:	7820      	ldrb	r0, [r4, #0]
 8009c3c:	f7ff ffb6 	bl	8009bac <__hexdig_fun>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d069      	beq.n	8009d18 <__gethex+0x142>
 8009c44:	9401      	str	r4, [sp, #4]
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	7818      	ldrb	r0, [r3, #0]
 8009c4a:	2830      	cmp	r0, #48	; 0x30
 8009c4c:	d009      	beq.n	8009c62 <__gethex+0x8c>
 8009c4e:	f7ff ffad 	bl	8009bac <__hexdig_fun>
 8009c52:	4243      	negs	r3, r0
 8009c54:	4143      	adcs	r3, r0
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	0026      	movs	r6, r4
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	9c01      	ldr	r4, [sp, #4]
 8009c60:	e004      	b.n	8009c6c <__gethex+0x96>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	3301      	adds	r3, #1
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	e7ed      	b.n	8009c46 <__gethex+0x70>
 8009c6a:	3401      	adds	r4, #1
 8009c6c:	7820      	ldrb	r0, [r4, #0]
 8009c6e:	f7ff ff9d 	bl	8009bac <__hexdig_fun>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d1f9      	bne.n	8009c6a <__gethex+0x94>
 8009c76:	9a04      	ldr	r2, [sp, #16]
 8009c78:	9907      	ldr	r1, [sp, #28]
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	f001 f8ea 	bl	800ae54 <strncmp>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d109      	bne.n	8009c98 <__gethex+0xc2>
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	d10a      	bne.n	8009c9e <__gethex+0xc8>
 8009c88:	9b04      	ldr	r3, [sp, #16]
 8009c8a:	18e4      	adds	r4, r4, r3
 8009c8c:	0026      	movs	r6, r4
 8009c8e:	7820      	ldrb	r0, [r4, #0]
 8009c90:	f7ff ff8c 	bl	8009bac <__hexdig_fun>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d139      	bne.n	8009d0c <__gethex+0x136>
 8009c98:	2700      	movs	r7, #0
 8009c9a:	42be      	cmp	r6, r7
 8009c9c:	d001      	beq.n	8009ca2 <__gethex+0xcc>
 8009c9e:	1b37      	subs	r7, r6, r4
 8009ca0:	00bf      	lsls	r7, r7, #2
 8009ca2:	7823      	ldrb	r3, [r4, #0]
 8009ca4:	2b50      	cmp	r3, #80	; 0x50
 8009ca6:	d001      	beq.n	8009cac <__gethex+0xd6>
 8009ca8:	2b70      	cmp	r3, #112	; 0x70
 8009caa:	d142      	bne.n	8009d32 <__gethex+0x15c>
 8009cac:	7863      	ldrb	r3, [r4, #1]
 8009cae:	2b2b      	cmp	r3, #43	; 0x2b
 8009cb0:	d034      	beq.n	8009d1c <__gethex+0x146>
 8009cb2:	2b2d      	cmp	r3, #45	; 0x2d
 8009cb4:	d036      	beq.n	8009d24 <__gethex+0x14e>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	1c66      	adds	r6, r4, #1
 8009cba:	9306      	str	r3, [sp, #24]
 8009cbc:	7830      	ldrb	r0, [r6, #0]
 8009cbe:	f7ff ff75 	bl	8009bac <__hexdig_fun>
 8009cc2:	1e43      	subs	r3, r0, #1
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b18      	cmp	r3, #24
 8009cc8:	d833      	bhi.n	8009d32 <__gethex+0x15c>
 8009cca:	3810      	subs	r0, #16
 8009ccc:	0005      	movs	r5, r0
 8009cce:	3601      	adds	r6, #1
 8009cd0:	7830      	ldrb	r0, [r6, #0]
 8009cd2:	f7ff ff6b 	bl	8009bac <__hexdig_fun>
 8009cd6:	1e43      	subs	r3, r0, #1
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b18      	cmp	r3, #24
 8009cdc:	d924      	bls.n	8009d28 <__gethex+0x152>
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d000      	beq.n	8009ce6 <__gethex+0x110>
 8009ce4:	426d      	negs	r5, r5
 8009ce6:	197f      	adds	r7, r7, r5
 8009ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cea:	601e      	str	r6, [r3, #0]
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d021      	beq.n	8009d36 <__gethex+0x160>
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	2606      	movs	r6, #6
 8009cf6:	425a      	negs	r2, r3
 8009cf8:	4153      	adcs	r3, r2
 8009cfa:	425b      	negs	r3, r3
 8009cfc:	401e      	ands	r6, r3
 8009cfe:	0030      	movs	r0, r6
 8009d00:	b00d      	add	sp, #52	; 0x34
 8009d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d04:	2300      	movs	r3, #0
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	001e      	movs	r6, r3
 8009d0a:	e7a8      	b.n	8009c5e <__gethex+0x88>
 8009d0c:	3401      	adds	r4, #1
 8009d0e:	e7be      	b.n	8009c8e <__gethex+0xb8>
 8009d10:	9c01      	ldr	r4, [sp, #4]
 8009d12:	2301      	movs	r3, #1
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	e7c4      	b.n	8009ca2 <__gethex+0xcc>
 8009d18:	0007      	movs	r7, r0
 8009d1a:	e7fa      	b.n	8009d12 <__gethex+0x13c>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9306      	str	r3, [sp, #24]
 8009d20:	1ca6      	adds	r6, r4, #2
 8009d22:	e7cb      	b.n	8009cbc <__gethex+0xe6>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e7fa      	b.n	8009d1e <__gethex+0x148>
 8009d28:	230a      	movs	r3, #10
 8009d2a:	435d      	muls	r5, r3
 8009d2c:	182d      	adds	r5, r5, r0
 8009d2e:	3d10      	subs	r5, #16
 8009d30:	e7cd      	b.n	8009cce <__gethex+0xf8>
 8009d32:	0026      	movs	r6, r4
 8009d34:	e7d8      	b.n	8009ce8 <__gethex+0x112>
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	9903      	ldr	r1, [sp, #12]
 8009d3a:	1ae3      	subs	r3, r4, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	2b07      	cmp	r3, #7
 8009d40:	dc47      	bgt.n	8009dd2 <__gethex+0x1fc>
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	f000 fa67 	bl	800a216 <_Balloc>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	3314      	adds	r3, #20
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	9308      	str	r3, [sp, #32]
 8009d50:	2300      	movs	r3, #0
 8009d52:	0005      	movs	r5, r0
 8009d54:	001e      	movs	r6, r3
 8009d56:	9306      	str	r3, [sp, #24]
 8009d58:	9b01      	ldr	r3, [sp, #4]
 8009d5a:	42a3      	cmp	r3, r4
 8009d5c:	d33c      	bcc.n	8009dd8 <__gethex+0x202>
 8009d5e:	9c08      	ldr	r4, [sp, #32]
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	c440      	stmia	r4!, {r6}
 8009d64:	1ae4      	subs	r4, r4, r3
 8009d66:	10a4      	asrs	r4, r4, #2
 8009d68:	612c      	str	r4, [r5, #16]
 8009d6a:	0030      	movs	r0, r6
 8009d6c:	f000 fb20 	bl	800a3b0 <__hi0bits>
 8009d70:	9b02      	ldr	r3, [sp, #8]
 8009d72:	0164      	lsls	r4, r4, #5
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	1a26      	subs	r6, r4, r0
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	429e      	cmp	r6, r3
 8009d7c:	dd5f      	ble.n	8009e3e <__gethex+0x268>
 8009d7e:	1af6      	subs	r6, r6, r3
 8009d80:	0031      	movs	r1, r6
 8009d82:	0028      	movs	r0, r5
 8009d84:	f000 fe1b 	bl	800a9be <__any_on>
 8009d88:	1e04      	subs	r4, r0, #0
 8009d8a:	d00f      	beq.n	8009dac <__gethex+0x1d6>
 8009d8c:	2401      	movs	r4, #1
 8009d8e:	211f      	movs	r1, #31
 8009d90:	0020      	movs	r0, r4
 8009d92:	1e73      	subs	r3, r6, #1
 8009d94:	4019      	ands	r1, r3
 8009d96:	4088      	lsls	r0, r1
 8009d98:	0001      	movs	r1, r0
 8009d9a:	115a      	asrs	r2, r3, #5
 8009d9c:	9803      	ldr	r0, [sp, #12]
 8009d9e:	0092      	lsls	r2, r2, #2
 8009da0:	5812      	ldr	r2, [r2, r0]
 8009da2:	420a      	tst	r2, r1
 8009da4:	d002      	beq.n	8009dac <__gethex+0x1d6>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	dc41      	bgt.n	8009e2e <__gethex+0x258>
 8009daa:	2402      	movs	r4, #2
 8009dac:	0031      	movs	r1, r6
 8009dae:	0028      	movs	r0, r5
 8009db0:	f7ff fec8 	bl	8009b44 <rshift>
 8009db4:	19bf      	adds	r7, r7, r6
 8009db6:	9b02      	ldr	r3, [sp, #8]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	42bb      	cmp	r3, r7
 8009dbe:	da4e      	bge.n	8009e5e <__gethex+0x288>
 8009dc0:	0029      	movs	r1, r5
 8009dc2:	9805      	ldr	r0, [sp, #20]
 8009dc4:	f000 fa5f 	bl	800a286 <_Bfree>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dcc:	26a3      	movs	r6, #163	; 0xa3
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e795      	b.n	8009cfe <__gethex+0x128>
 8009dd2:	3101      	adds	r1, #1
 8009dd4:	105b      	asrs	r3, r3, #1
 8009dd6:	e7b2      	b.n	8009d3e <__gethex+0x168>
 8009dd8:	1e63      	subs	r3, r4, #1
 8009dda:	9309      	str	r3, [sp, #36]	; 0x24
 8009ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d015      	beq.n	8009e10 <__gethex+0x23a>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	2b20      	cmp	r3, #32
 8009de8:	d105      	bne.n	8009df6 <__gethex+0x220>
 8009dea:	9b08      	ldr	r3, [sp, #32]
 8009dec:	601e      	str	r6, [r3, #0]
 8009dee:	2600      	movs	r6, #0
 8009df0:	3304      	adds	r3, #4
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	9606      	str	r6, [sp, #24]
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df8:	7818      	ldrb	r0, [r3, #0]
 8009dfa:	f7ff fed7 	bl	8009bac <__hexdig_fun>
 8009dfe:	230f      	movs	r3, #15
 8009e00:	4018      	ands	r0, r3
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009e06:	4098      	lsls	r0, r3
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4306      	orrs	r6, r0
 8009e0c:	9306      	str	r3, [sp, #24]
 8009e0e:	e7a3      	b.n	8009d58 <__gethex+0x182>
 8009e10:	2301      	movs	r3, #1
 8009e12:	9a04      	ldr	r2, [sp, #16]
 8009e14:	1a9c      	subs	r4, r3, r2
 8009e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e18:	191c      	adds	r4, r3, r4
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	d3e1      	bcc.n	8009de4 <__gethex+0x20e>
 8009e20:	9907      	ldr	r1, [sp, #28]
 8009e22:	0020      	movs	r0, r4
 8009e24:	f001 f816 	bl	800ae54 <strncmp>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1db      	bne.n	8009de4 <__gethex+0x20e>
 8009e2c:	e794      	b.n	8009d58 <__gethex+0x182>
 8009e2e:	1eb1      	subs	r1, r6, #2
 8009e30:	0028      	movs	r0, r5
 8009e32:	f000 fdc4 	bl	800a9be <__any_on>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d0b7      	beq.n	8009daa <__gethex+0x1d4>
 8009e3a:	2403      	movs	r4, #3
 8009e3c:	e7b6      	b.n	8009dac <__gethex+0x1d6>
 8009e3e:	9b01      	ldr	r3, [sp, #4]
 8009e40:	2400      	movs	r4, #0
 8009e42:	429e      	cmp	r6, r3
 8009e44:	dab7      	bge.n	8009db6 <__gethex+0x1e0>
 8009e46:	1b9e      	subs	r6, r3, r6
 8009e48:	0029      	movs	r1, r5
 8009e4a:	0032      	movs	r2, r6
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	f000 fbe3 	bl	800a618 <__lshift>
 8009e52:	0003      	movs	r3, r0
 8009e54:	3314      	adds	r3, #20
 8009e56:	0005      	movs	r5, r0
 8009e58:	1bbf      	subs	r7, r7, r6
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	e7ab      	b.n	8009db6 <__gethex+0x1e0>
 8009e5e:	9b02      	ldr	r3, [sp, #8]
 8009e60:	685e      	ldr	r6, [r3, #4]
 8009e62:	42be      	cmp	r6, r7
 8009e64:	dd6b      	ble.n	8009f3e <__gethex+0x368>
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	1bf6      	subs	r6, r6, r7
 8009e6a:	42b3      	cmp	r3, r6
 8009e6c:	dc32      	bgt.n	8009ed4 <__gethex+0x2fe>
 8009e6e:	9b02      	ldr	r3, [sp, #8]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d026      	beq.n	8009ec4 <__gethex+0x2ee>
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d028      	beq.n	8009ecc <__gethex+0x2f6>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d119      	bne.n	8009eb2 <__gethex+0x2dc>
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	42b3      	cmp	r3, r6
 8009e82:	d116      	bne.n	8009eb2 <__gethex+0x2dc>
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	dc0d      	bgt.n	8009ea4 <__gethex+0x2ce>
 8009e88:	9b02      	ldr	r3, [sp, #8]
 8009e8a:	2662      	movs	r6, #98	; 0x62
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	9a01      	ldr	r2, [sp, #4]
 8009e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	2301      	movs	r3, #1
 8009e98:	9a03      	ldr	r2, [sp, #12]
 8009e9a:	612b      	str	r3, [r5, #16]
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ea0:	601d      	str	r5, [r3, #0]
 8009ea2:	e72c      	b.n	8009cfe <__gethex+0x128>
 8009ea4:	9901      	ldr	r1, [sp, #4]
 8009ea6:	0028      	movs	r0, r5
 8009ea8:	3901      	subs	r1, #1
 8009eaa:	f000 fd88 	bl	800a9be <__any_on>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d1ea      	bne.n	8009e88 <__gethex+0x2b2>
 8009eb2:	0029      	movs	r1, r5
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	f000 f9e6 	bl	800a286 <_Bfree>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ebe:	2650      	movs	r6, #80	; 0x50
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	e71c      	b.n	8009cfe <__gethex+0x128>
 8009ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0de      	beq.n	8009e88 <__gethex+0x2b2>
 8009eca:	e7f2      	b.n	8009eb2 <__gethex+0x2dc>
 8009ecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1da      	bne.n	8009e88 <__gethex+0x2b2>
 8009ed2:	e7ee      	b.n	8009eb2 <__gethex+0x2dc>
 8009ed4:	1e77      	subs	r7, r6, #1
 8009ed6:	2c00      	cmp	r4, #0
 8009ed8:	d12f      	bne.n	8009f3a <__gethex+0x364>
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d004      	beq.n	8009ee8 <__gethex+0x312>
 8009ede:	0039      	movs	r1, r7
 8009ee0:	0028      	movs	r0, r5
 8009ee2:	f000 fd6c 	bl	800a9be <__any_on>
 8009ee6:	0004      	movs	r4, r0
 8009ee8:	231f      	movs	r3, #31
 8009eea:	117a      	asrs	r2, r7, #5
 8009eec:	401f      	ands	r7, r3
 8009eee:	3b1e      	subs	r3, #30
 8009ef0:	40bb      	lsls	r3, r7
 8009ef2:	9903      	ldr	r1, [sp, #12]
 8009ef4:	0092      	lsls	r2, r2, #2
 8009ef6:	5852      	ldr	r2, [r2, r1]
 8009ef8:	421a      	tst	r2, r3
 8009efa:	d001      	beq.n	8009f00 <__gethex+0x32a>
 8009efc:	2302      	movs	r3, #2
 8009efe:	431c      	orrs	r4, r3
 8009f00:	9b01      	ldr	r3, [sp, #4]
 8009f02:	0031      	movs	r1, r6
 8009f04:	1b9b      	subs	r3, r3, r6
 8009f06:	2602      	movs	r6, #2
 8009f08:	0028      	movs	r0, r5
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	f7ff fe1a 	bl	8009b44 <rshift>
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	685f      	ldr	r7, [r3, #4]
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d040      	beq.n	8009f9a <__gethex+0x3c4>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d010      	beq.n	8009f42 <__gethex+0x36c>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d012      	beq.n	8009f4a <__gethex+0x374>
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d106      	bne.n	8009f36 <__gethex+0x360>
 8009f28:	07a2      	lsls	r2, r4, #30
 8009f2a:	d504      	bpl.n	8009f36 <__gethex+0x360>
 8009f2c:	9a03      	ldr	r2, [sp, #12]
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	4314      	orrs	r4, r2
 8009f32:	421c      	tst	r4, r3
 8009f34:	d10c      	bne.n	8009f50 <__gethex+0x37a>
 8009f36:	2310      	movs	r3, #16
 8009f38:	e02e      	b.n	8009f98 <__gethex+0x3c2>
 8009f3a:	2401      	movs	r4, #1
 8009f3c:	e7d4      	b.n	8009ee8 <__gethex+0x312>
 8009f3e:	2601      	movs	r6, #1
 8009f40:	e7e8      	b.n	8009f14 <__gethex+0x33e>
 8009f42:	2301      	movs	r3, #1
 8009f44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0f2      	beq.n	8009f36 <__gethex+0x360>
 8009f50:	692c      	ldr	r4, [r5, #16]
 8009f52:	00a3      	lsls	r3, r4, #2
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	002b      	movs	r3, r5
 8009f58:	00a2      	lsls	r2, r4, #2
 8009f5a:	3314      	adds	r3, #20
 8009f5c:	1899      	adds	r1, r3, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4694      	mov	ip, r2
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	1c50      	adds	r0, r2, #1
 8009f66:	d01d      	beq.n	8009fa4 <__gethex+0x3ce>
 8009f68:	3201      	adds	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	002b      	movs	r3, r5
 8009f6e:	3314      	adds	r3, #20
 8009f70:	2e02      	cmp	r6, #2
 8009f72:	d13a      	bne.n	8009fea <__gethex+0x414>
 8009f74:	9a02      	ldr	r2, [sp, #8]
 8009f76:	9901      	ldr	r1, [sp, #4]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d10a      	bne.n	8009f96 <__gethex+0x3c0>
 8009f80:	114a      	asrs	r2, r1, #5
 8009f82:	211f      	movs	r1, #31
 8009f84:	9801      	ldr	r0, [sp, #4]
 8009f86:	0092      	lsls	r2, r2, #2
 8009f88:	4001      	ands	r1, r0
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	0004      	movs	r4, r0
 8009f8e:	408c      	lsls	r4, r1
 8009f90:	58d3      	ldr	r3, [r2, r3]
 8009f92:	4223      	tst	r3, r4
 8009f94:	d148      	bne.n	800a028 <__gethex+0x452>
 8009f96:	2320      	movs	r3, #32
 8009f98:	431e      	orrs	r6, r3
 8009f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f9c:	601d      	str	r5, [r3, #0]
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa0:	601f      	str	r7, [r3, #0]
 8009fa2:	e6ac      	b.n	8009cfe <__gethex+0x128>
 8009fa4:	4662      	mov	r2, ip
 8009fa6:	c304      	stmia	r3!, {r2}
 8009fa8:	4299      	cmp	r1, r3
 8009faa:	d8da      	bhi.n	8009f62 <__gethex+0x38c>
 8009fac:	68ab      	ldr	r3, [r5, #8]
 8009fae:	429c      	cmp	r4, r3
 8009fb0:	db12      	blt.n	8009fd8 <__gethex+0x402>
 8009fb2:	686b      	ldr	r3, [r5, #4]
 8009fb4:	9805      	ldr	r0, [sp, #20]
 8009fb6:	1c59      	adds	r1, r3, #1
 8009fb8:	f000 f92d 	bl	800a216 <_Balloc>
 8009fbc:	0029      	movs	r1, r5
 8009fbe:	692b      	ldr	r3, [r5, #16]
 8009fc0:	9003      	str	r0, [sp, #12]
 8009fc2:	1c9a      	adds	r2, r3, #2
 8009fc4:	0092      	lsls	r2, r2, #2
 8009fc6:	310c      	adds	r1, #12
 8009fc8:	300c      	adds	r0, #12
 8009fca:	f7fd f9b1 	bl	8007330 <memcpy>
 8009fce:	0029      	movs	r1, r5
 8009fd0:	9805      	ldr	r0, [sp, #20]
 8009fd2:	f000 f958 	bl	800a286 <_Bfree>
 8009fd6:	9d03      	ldr	r5, [sp, #12]
 8009fd8:	692b      	ldr	r3, [r5, #16]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	612a      	str	r2, [r5, #16]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	18eb      	adds	r3, r5, r3
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	e7c0      	b.n	8009f6c <__gethex+0x396>
 8009fea:	692a      	ldr	r2, [r5, #16]
 8009fec:	42a2      	cmp	r2, r4
 8009fee:	dd0a      	ble.n	800a006 <__gethex+0x430>
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	0028      	movs	r0, r5
 8009ff4:	f7ff fda6 	bl	8009b44 <rshift>
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	3701      	adds	r7, #1
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2601      	movs	r6, #1
 800a000:	42bb      	cmp	r3, r7
 800a002:	dac8      	bge.n	8009f96 <__gethex+0x3c0>
 800a004:	e6dc      	b.n	8009dc0 <__gethex+0x1ea>
 800a006:	241f      	movs	r4, #31
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	2601      	movs	r6, #1
 800a00c:	4022      	ands	r2, r4
 800a00e:	1e14      	subs	r4, r2, #0
 800a010:	d0c1      	beq.n	8009f96 <__gethex+0x3c0>
 800a012:	9a04      	ldr	r2, [sp, #16]
 800a014:	189b      	adds	r3, r3, r2
 800a016:	3b04      	subs	r3, #4
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f000 f9c9 	bl	800a3b0 <__hi0bits>
 800a01e:	2120      	movs	r1, #32
 800a020:	1b0c      	subs	r4, r1, r4
 800a022:	42a0      	cmp	r0, r4
 800a024:	dbe4      	blt.n	8009ff0 <__gethex+0x41a>
 800a026:	e7b6      	b.n	8009f96 <__gethex+0x3c0>
 800a028:	0006      	movs	r6, r0
 800a02a:	e7b4      	b.n	8009f96 <__gethex+0x3c0>

0800a02c <L_shift>:
 800a02c:	2308      	movs	r3, #8
 800a02e:	b570      	push	{r4, r5, r6, lr}
 800a030:	2520      	movs	r5, #32
 800a032:	1a9a      	subs	r2, r3, r2
 800a034:	0092      	lsls	r2, r2, #2
 800a036:	1aad      	subs	r5, r5, r2
 800a038:	6843      	ldr	r3, [r0, #4]
 800a03a:	6806      	ldr	r6, [r0, #0]
 800a03c:	001c      	movs	r4, r3
 800a03e:	40ac      	lsls	r4, r5
 800a040:	40d3      	lsrs	r3, r2
 800a042:	4334      	orrs	r4, r6
 800a044:	6004      	str	r4, [r0, #0]
 800a046:	6043      	str	r3, [r0, #4]
 800a048:	3004      	adds	r0, #4
 800a04a:	4288      	cmp	r0, r1
 800a04c:	d3f4      	bcc.n	800a038 <L_shift+0xc>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}

0800a050 <__match>:
 800a050:	b530      	push	{r4, r5, lr}
 800a052:	6803      	ldr	r3, [r0, #0]
 800a054:	780c      	ldrb	r4, [r1, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	2c00      	cmp	r4, #0
 800a05a:	d102      	bne.n	800a062 <__match+0x12>
 800a05c:	6003      	str	r3, [r0, #0]
 800a05e:	2001      	movs	r0, #1
 800a060:	bd30      	pop	{r4, r5, pc}
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	0015      	movs	r5, r2
 800a066:	3d41      	subs	r5, #65	; 0x41
 800a068:	2d19      	cmp	r5, #25
 800a06a:	d800      	bhi.n	800a06e <__match+0x1e>
 800a06c:	3220      	adds	r2, #32
 800a06e:	3101      	adds	r1, #1
 800a070:	42a2      	cmp	r2, r4
 800a072:	d0ef      	beq.n	800a054 <__match+0x4>
 800a074:	2000      	movs	r0, #0
 800a076:	e7f3      	b.n	800a060 <__match+0x10>

0800a078 <__hexnan>:
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	b08b      	sub	sp, #44	; 0x2c
 800a07c:	9201      	str	r2, [sp, #4]
 800a07e:	680a      	ldr	r2, [r1, #0]
 800a080:	9901      	ldr	r1, [sp, #4]
 800a082:	1153      	asrs	r3, r2, #5
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	18cb      	adds	r3, r1, r3
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	231f      	movs	r3, #31
 800a08c:	401a      	ands	r2, r3
 800a08e:	9008      	str	r0, [sp, #32]
 800a090:	9206      	str	r2, [sp, #24]
 800a092:	d002      	beq.n	800a09a <__hexnan+0x22>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	3304      	adds	r3, #4
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	2500      	movs	r5, #0
 800a09e:	1f1e      	subs	r6, r3, #4
 800a0a0:	0037      	movs	r7, r6
 800a0a2:	0034      	movs	r4, r6
 800a0a4:	9b08      	ldr	r3, [sp, #32]
 800a0a6:	6035      	str	r5, [r6, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	9507      	str	r5, [sp, #28]
 800a0ac:	9305      	str	r3, [sp, #20]
 800a0ae:	9502      	str	r5, [sp, #8]
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d028      	beq.n	800a112 <__hexnan+0x9a>
 800a0c0:	9803      	ldr	r0, [sp, #12]
 800a0c2:	f7ff fd73 	bl	8009bac <__hexdig_fun>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d145      	bne.n	800a156 <__hexnan+0xde>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d819      	bhi.n	800a104 <__hexnan+0x8c>
 800a0d0:	9b02      	ldr	r3, [sp, #8]
 800a0d2:	9a07      	ldr	r2, [sp, #28]
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	dd12      	ble.n	800a0fe <__hexnan+0x86>
 800a0d8:	42bc      	cmp	r4, r7
 800a0da:	d206      	bcs.n	800a0ea <__hexnan+0x72>
 800a0dc:	2d07      	cmp	r5, #7
 800a0de:	dc04      	bgt.n	800a0ea <__hexnan+0x72>
 800a0e0:	002a      	movs	r2, r5
 800a0e2:	0039      	movs	r1, r7
 800a0e4:	0020      	movs	r0, r4
 800a0e6:	f7ff ffa1 	bl	800a02c <L_shift>
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	2508      	movs	r5, #8
 800a0ee:	429c      	cmp	r4, r3
 800a0f0:	d905      	bls.n	800a0fe <__hexnan+0x86>
 800a0f2:	1f27      	subs	r7, r4, #4
 800a0f4:	2500      	movs	r5, #0
 800a0f6:	003c      	movs	r4, r7
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	603d      	str	r5, [r7, #0]
 800a0fc:	9307      	str	r3, [sp, #28]
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	e7d5      	b.n	800a0b0 <__hexnan+0x38>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	2b29      	cmp	r3, #41	; 0x29
 800a108:	d14a      	bne.n	800a1a0 <__hexnan+0x128>
 800a10a:	9b05      	ldr	r3, [sp, #20]
 800a10c:	9a08      	ldr	r2, [sp, #32]
 800a10e:	3302      	adds	r3, #2
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	9b02      	ldr	r3, [sp, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d043      	beq.n	800a1a0 <__hexnan+0x128>
 800a118:	42bc      	cmp	r4, r7
 800a11a:	d206      	bcs.n	800a12a <__hexnan+0xb2>
 800a11c:	2d07      	cmp	r5, #7
 800a11e:	dc04      	bgt.n	800a12a <__hexnan+0xb2>
 800a120:	002a      	movs	r2, r5
 800a122:	0039      	movs	r1, r7
 800a124:	0020      	movs	r0, r4
 800a126:	f7ff ff81 	bl	800a02c <L_shift>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	429c      	cmp	r4, r3
 800a12e:	d926      	bls.n	800a17e <__hexnan+0x106>
 800a130:	cc04      	ldmia	r4!, {r2}
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	3304      	adds	r3, #4
 800a136:	42a6      	cmp	r6, r4
 800a138:	d2fa      	bcs.n	800a130 <__hexnan+0xb8>
 800a13a:	2200      	movs	r2, #0
 800a13c:	c304      	stmia	r3!, {r2}
 800a13e:	429e      	cmp	r6, r3
 800a140:	d2fc      	bcs.n	800a13c <__hexnan+0xc4>
 800a142:	6833      	ldr	r3, [r6, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <__hexnan+0xda>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	429e      	cmp	r6, r3
 800a14c:	d126      	bne.n	800a19c <__hexnan+0x124>
 800a14e:	2301      	movs	r3, #1
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	2005      	movs	r0, #5
 800a154:	e025      	b.n	800a1a2 <__hexnan+0x12a>
 800a156:	9b02      	ldr	r3, [sp, #8]
 800a158:	3501      	adds	r5, #1
 800a15a:	3301      	adds	r3, #1
 800a15c:	9302      	str	r3, [sp, #8]
 800a15e:	2d08      	cmp	r5, #8
 800a160:	dd06      	ble.n	800a170 <__hexnan+0xf8>
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	429c      	cmp	r4, r3
 800a166:	d9ca      	bls.n	800a0fe <__hexnan+0x86>
 800a168:	2300      	movs	r3, #0
 800a16a:	2501      	movs	r5, #1
 800a16c:	3c04      	subs	r4, #4
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	220f      	movs	r2, #15
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	4010      	ands	r0, r2
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	4318      	orrs	r0, r3
 800a17a:	6020      	str	r0, [r4, #0]
 800a17c:	e7bf      	b.n	800a0fe <__hexnan+0x86>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0de      	beq.n	800a142 <__hexnan+0xca>
 800a184:	2120      	movs	r1, #32
 800a186:	9a06      	ldr	r2, [sp, #24]
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	1a89      	subs	r1, r1, r2
 800a18c:	2201      	movs	r2, #1
 800a18e:	4252      	negs	r2, r2
 800a190:	40ca      	lsrs	r2, r1
 800a192:	3b04      	subs	r3, #4
 800a194:	6819      	ldr	r1, [r3, #0]
 800a196:	400a      	ands	r2, r1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	e7d2      	b.n	800a142 <__hexnan+0xca>
 800a19c:	3e04      	subs	r6, #4
 800a19e:	e7d0      	b.n	800a142 <__hexnan+0xca>
 800a1a0:	2004      	movs	r0, #4
 800a1a2:	b00b      	add	sp, #44	; 0x2c
 800a1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1a6 <__locale_ctype_ptr_l>:
 800a1a6:	30ec      	adds	r0, #236	; 0xec
 800a1a8:	6800      	ldr	r0, [r0, #0]
 800a1aa:	4770      	bx	lr

0800a1ac <__localeconv_l>:
 800a1ac:	30f0      	adds	r0, #240	; 0xf0
 800a1ae:	4770      	bx	lr

0800a1b0 <_localeconv_r>:
 800a1b0:	4b03      	ldr	r3, [pc, #12]	; (800a1c0 <_localeconv_r+0x10>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6a18      	ldr	r0, [r3, #32]
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d100      	bne.n	800a1bc <_localeconv_r+0xc>
 800a1ba:	4802      	ldr	r0, [pc, #8]	; (800a1c4 <_localeconv_r+0x14>)
 800a1bc:	30f0      	adds	r0, #240	; 0xf0
 800a1be:	4770      	bx	lr
 800a1c0:	20000018 	.word	0x20000018
 800a1c4:	2000007c 	.word	0x2000007c

0800a1c8 <malloc>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <malloc+0x10>)
 800a1cc:	0001      	movs	r1, r0
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	f000 fc70 	bl	800aab4 <_malloc_r>
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	20000018 	.word	0x20000018

0800a1dc <__ascii_mbtowc>:
 800a1dc:	b082      	sub	sp, #8
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	d100      	bne.n	800a1e4 <__ascii_mbtowc+0x8>
 800a1e2:	a901      	add	r1, sp, #4
 800a1e4:	1e10      	subs	r0, r2, #0
 800a1e6:	d006      	beq.n	800a1f6 <__ascii_mbtowc+0x1a>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <__ascii_mbtowc+0x1e>
 800a1ec:	7813      	ldrb	r3, [r2, #0]
 800a1ee:	600b      	str	r3, [r1, #0]
 800a1f0:	7810      	ldrb	r0, [r2, #0]
 800a1f2:	1e43      	subs	r3, r0, #1
 800a1f4:	4198      	sbcs	r0, r3
 800a1f6:	b002      	add	sp, #8
 800a1f8:	4770      	bx	lr
 800a1fa:	2002      	movs	r0, #2
 800a1fc:	4240      	negs	r0, r0
 800a1fe:	e7fa      	b.n	800a1f6 <__ascii_mbtowc+0x1a>

0800a200 <memchr>:
 800a200:	b2c9      	uxtb	r1, r1
 800a202:	1882      	adds	r2, r0, r2
 800a204:	4290      	cmp	r0, r2
 800a206:	d101      	bne.n	800a20c <memchr+0xc>
 800a208:	2000      	movs	r0, #0
 800a20a:	4770      	bx	lr
 800a20c:	7803      	ldrb	r3, [r0, #0]
 800a20e:	428b      	cmp	r3, r1
 800a210:	d0fb      	beq.n	800a20a <memchr+0xa>
 800a212:	3001      	adds	r0, #1
 800a214:	e7f6      	b.n	800a204 <memchr+0x4>

0800a216 <_Balloc>:
 800a216:	b570      	push	{r4, r5, r6, lr}
 800a218:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a21a:	0004      	movs	r4, r0
 800a21c:	000d      	movs	r5, r1
 800a21e:	2e00      	cmp	r6, #0
 800a220:	d107      	bne.n	800a232 <_Balloc+0x1c>
 800a222:	2010      	movs	r0, #16
 800a224:	f7ff ffd0 	bl	800a1c8 <malloc>
 800a228:	6260      	str	r0, [r4, #36]	; 0x24
 800a22a:	6046      	str	r6, [r0, #4]
 800a22c:	6086      	str	r6, [r0, #8]
 800a22e:	6006      	str	r6, [r0, #0]
 800a230:	60c6      	str	r6, [r0, #12]
 800a232:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a234:	68f3      	ldr	r3, [r6, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d013      	beq.n	800a262 <_Balloc+0x4c>
 800a23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a23c:	00aa      	lsls	r2, r5, #2
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	189b      	adds	r3, r3, r2
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	2800      	cmp	r0, #0
 800a246:	d118      	bne.n	800a27a <_Balloc+0x64>
 800a248:	2101      	movs	r1, #1
 800a24a:	000e      	movs	r6, r1
 800a24c:	40ae      	lsls	r6, r5
 800a24e:	1d72      	adds	r2, r6, #5
 800a250:	0092      	lsls	r2, r2, #2
 800a252:	0020      	movs	r0, r4
 800a254:	f000 fbd5 	bl	800aa02 <_calloc_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d00c      	beq.n	800a276 <_Balloc+0x60>
 800a25c:	6045      	str	r5, [r0, #4]
 800a25e:	6086      	str	r6, [r0, #8]
 800a260:	e00d      	b.n	800a27e <_Balloc+0x68>
 800a262:	2221      	movs	r2, #33	; 0x21
 800a264:	2104      	movs	r1, #4
 800a266:	0020      	movs	r0, r4
 800a268:	f000 fbcb 	bl	800aa02 <_calloc_r>
 800a26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26e:	60f0      	str	r0, [r6, #12]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e1      	bne.n	800a23a <_Balloc+0x24>
 800a276:	2000      	movs	r0, #0
 800a278:	bd70      	pop	{r4, r5, r6, pc}
 800a27a:	6802      	ldr	r2, [r0, #0]
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	2300      	movs	r3, #0
 800a280:	6103      	str	r3, [r0, #16]
 800a282:	60c3      	str	r3, [r0, #12]
 800a284:	e7f8      	b.n	800a278 <_Balloc+0x62>

0800a286 <_Bfree>:
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a28a:	0006      	movs	r6, r0
 800a28c:	000d      	movs	r5, r1
 800a28e:	2c00      	cmp	r4, #0
 800a290:	d107      	bne.n	800a2a2 <_Bfree+0x1c>
 800a292:	2010      	movs	r0, #16
 800a294:	f7ff ff98 	bl	800a1c8 <malloc>
 800a298:	6270      	str	r0, [r6, #36]	; 0x24
 800a29a:	6044      	str	r4, [r0, #4]
 800a29c:	6084      	str	r4, [r0, #8]
 800a29e:	6004      	str	r4, [r0, #0]
 800a2a0:	60c4      	str	r4, [r0, #12]
 800a2a2:	2d00      	cmp	r5, #0
 800a2a4:	d007      	beq.n	800a2b6 <_Bfree+0x30>
 800a2a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2a8:	686a      	ldr	r2, [r5, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	189b      	adds	r3, r3, r2
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	602a      	str	r2, [r5, #0]
 800a2b4:	601d      	str	r5, [r3, #0]
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <__multadd>:
 800a2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ba:	001e      	movs	r6, r3
 800a2bc:	2314      	movs	r3, #20
 800a2be:	469c      	mov	ip, r3
 800a2c0:	0007      	movs	r7, r0
 800a2c2:	000c      	movs	r4, r1
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	690d      	ldr	r5, [r1, #16]
 800a2c8:	448c      	add	ip, r1
 800a2ca:	4663      	mov	r3, ip
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	b299      	uxth	r1, r3
 800a2d2:	4663      	mov	r3, ip
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4351      	muls	r1, r2
 800a2d8:	0c1b      	lsrs	r3, r3, #16
 800a2da:	4353      	muls	r3, r2
 800a2dc:	1989      	adds	r1, r1, r6
 800a2de:	0c0e      	lsrs	r6, r1, #16
 800a2e0:	199b      	adds	r3, r3, r6
 800a2e2:	b289      	uxth	r1, r1
 800a2e4:	0c1e      	lsrs	r6, r3, #16
 800a2e6:	041b      	lsls	r3, r3, #16
 800a2e8:	185b      	adds	r3, r3, r1
 800a2ea:	4661      	mov	r1, ip
 800a2ec:	c108      	stmia	r1!, {r3}
 800a2ee:	468c      	mov	ip, r1
 800a2f0:	4285      	cmp	r5, r0
 800a2f2:	dcea      	bgt.n	800a2ca <__multadd+0x12>
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	d01b      	beq.n	800a330 <__multadd+0x78>
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	42ab      	cmp	r3, r5
 800a2fc:	dc12      	bgt.n	800a324 <__multadd+0x6c>
 800a2fe:	6863      	ldr	r3, [r4, #4]
 800a300:	0038      	movs	r0, r7
 800a302:	1c59      	adds	r1, r3, #1
 800a304:	f7ff ff87 	bl	800a216 <_Balloc>
 800a308:	0021      	movs	r1, r4
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	9001      	str	r0, [sp, #4]
 800a30e:	1c9a      	adds	r2, r3, #2
 800a310:	0092      	lsls	r2, r2, #2
 800a312:	310c      	adds	r1, #12
 800a314:	300c      	adds	r0, #12
 800a316:	f7fd f80b 	bl	8007330 <memcpy>
 800a31a:	0021      	movs	r1, r4
 800a31c:	0038      	movs	r0, r7
 800a31e:	f7ff ffb2 	bl	800a286 <_Bfree>
 800a322:	9c01      	ldr	r4, [sp, #4]
 800a324:	1d2b      	adds	r3, r5, #4
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	18e3      	adds	r3, r4, r3
 800a32a:	3501      	adds	r5, #1
 800a32c:	605e      	str	r6, [r3, #4]
 800a32e:	6125      	str	r5, [r4, #16]
 800a330:	0020      	movs	r0, r4
 800a332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800a334 <__s2b>:
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a336:	0006      	movs	r6, r0
 800a338:	0018      	movs	r0, r3
 800a33a:	000c      	movs	r4, r1
 800a33c:	3008      	adds	r0, #8
 800a33e:	2109      	movs	r1, #9
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	0015      	movs	r5, r2
 800a344:	f7f5 ff7c 	bl	8000240 <__divsi3>
 800a348:	2301      	movs	r3, #1
 800a34a:	2100      	movs	r1, #0
 800a34c:	4283      	cmp	r3, r0
 800a34e:	db1f      	blt.n	800a390 <__s2b+0x5c>
 800a350:	0030      	movs	r0, r6
 800a352:	f7ff ff60 	bl	800a216 <_Balloc>
 800a356:	9b08      	ldr	r3, [sp, #32]
 800a358:	6143      	str	r3, [r0, #20]
 800a35a:	2301      	movs	r3, #1
 800a35c:	6103      	str	r3, [r0, #16]
 800a35e:	2d09      	cmp	r5, #9
 800a360:	dd19      	ble.n	800a396 <__s2b+0x62>
 800a362:	0023      	movs	r3, r4
 800a364:	3309      	adds	r3, #9
 800a366:	001f      	movs	r7, r3
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	1964      	adds	r4, r4, r5
 800a36c:	783b      	ldrb	r3, [r7, #0]
 800a36e:	0001      	movs	r1, r0
 800a370:	3b30      	subs	r3, #48	; 0x30
 800a372:	220a      	movs	r2, #10
 800a374:	0030      	movs	r0, r6
 800a376:	3701      	adds	r7, #1
 800a378:	f7ff ff9e 	bl	800a2b8 <__multadd>
 800a37c:	42a7      	cmp	r7, r4
 800a37e:	d1f5      	bne.n	800a36c <__s2b+0x38>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	195c      	adds	r4, r3, r5
 800a384:	3c08      	subs	r4, #8
 800a386:	002f      	movs	r7, r5
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	429f      	cmp	r7, r3
 800a38c:	db06      	blt.n	800a39c <__s2b+0x68>
 800a38e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	3101      	adds	r1, #1
 800a394:	e7da      	b.n	800a34c <__s2b+0x18>
 800a396:	340a      	adds	r4, #10
 800a398:	2509      	movs	r5, #9
 800a39a:	e7f4      	b.n	800a386 <__s2b+0x52>
 800a39c:	1b63      	subs	r3, r4, r5
 800a39e:	5ddb      	ldrb	r3, [r3, r7]
 800a3a0:	0001      	movs	r1, r0
 800a3a2:	3b30      	subs	r3, #48	; 0x30
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	0030      	movs	r0, r6
 800a3a8:	f7ff ff86 	bl	800a2b8 <__multadd>
 800a3ac:	3701      	adds	r7, #1
 800a3ae:	e7eb      	b.n	800a388 <__s2b+0x54>

0800a3b0 <__hi0bits>:
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	0c02      	lsrs	r2, r0, #16
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	4282      	cmp	r2, r0
 800a3b8:	d101      	bne.n	800a3be <__hi0bits+0xe>
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	3010      	adds	r0, #16
 800a3be:	0e1a      	lsrs	r2, r3, #24
 800a3c0:	d101      	bne.n	800a3c6 <__hi0bits+0x16>
 800a3c2:	3008      	adds	r0, #8
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	0f1a      	lsrs	r2, r3, #28
 800a3c8:	d101      	bne.n	800a3ce <__hi0bits+0x1e>
 800a3ca:	3004      	adds	r0, #4
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	0f9a      	lsrs	r2, r3, #30
 800a3d0:	d101      	bne.n	800a3d6 <__hi0bits+0x26>
 800a3d2:	3002      	adds	r0, #2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	db03      	blt.n	800a3e2 <__hi0bits+0x32>
 800a3da:	3001      	adds	r0, #1
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	d400      	bmi.n	800a3e2 <__hi0bits+0x32>
 800a3e0:	2020      	movs	r0, #32
 800a3e2:	4770      	bx	lr

0800a3e4 <__lo0bits>:
 800a3e4:	2207      	movs	r2, #7
 800a3e6:	6803      	ldr	r3, [r0, #0]
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	0001      	movs	r1, r0
 800a3ec:	401a      	ands	r2, r3
 800a3ee:	d00d      	beq.n	800a40c <__lo0bits+0x28>
 800a3f0:	2401      	movs	r4, #1
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	4223      	tst	r3, r4
 800a3f6:	d105      	bne.n	800a404 <__lo0bits+0x20>
 800a3f8:	3002      	adds	r0, #2
 800a3fa:	4203      	tst	r3, r0
 800a3fc:	d003      	beq.n	800a406 <__lo0bits+0x22>
 800a3fe:	40e3      	lsrs	r3, r4
 800a400:	0020      	movs	r0, r4
 800a402:	600b      	str	r3, [r1, #0]
 800a404:	bd10      	pop	{r4, pc}
 800a406:	089b      	lsrs	r3, r3, #2
 800a408:	600b      	str	r3, [r1, #0]
 800a40a:	e7fb      	b.n	800a404 <__lo0bits+0x20>
 800a40c:	b29c      	uxth	r4, r3
 800a40e:	0010      	movs	r0, r2
 800a410:	2c00      	cmp	r4, #0
 800a412:	d101      	bne.n	800a418 <__lo0bits+0x34>
 800a414:	2010      	movs	r0, #16
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d101      	bne.n	800a422 <__lo0bits+0x3e>
 800a41e:	3008      	adds	r0, #8
 800a420:	0a1b      	lsrs	r3, r3, #8
 800a422:	071a      	lsls	r2, r3, #28
 800a424:	d101      	bne.n	800a42a <__lo0bits+0x46>
 800a426:	3004      	adds	r0, #4
 800a428:	091b      	lsrs	r3, r3, #4
 800a42a:	079a      	lsls	r2, r3, #30
 800a42c:	d101      	bne.n	800a432 <__lo0bits+0x4e>
 800a42e:	3002      	adds	r0, #2
 800a430:	089b      	lsrs	r3, r3, #2
 800a432:	07da      	lsls	r2, r3, #31
 800a434:	d4e8      	bmi.n	800a408 <__lo0bits+0x24>
 800a436:	085b      	lsrs	r3, r3, #1
 800a438:	d001      	beq.n	800a43e <__lo0bits+0x5a>
 800a43a:	3001      	adds	r0, #1
 800a43c:	e7e4      	b.n	800a408 <__lo0bits+0x24>
 800a43e:	2020      	movs	r0, #32
 800a440:	e7e0      	b.n	800a404 <__lo0bits+0x20>

0800a442 <__i2b>:
 800a442:	b510      	push	{r4, lr}
 800a444:	000c      	movs	r4, r1
 800a446:	2101      	movs	r1, #1
 800a448:	f7ff fee5 	bl	800a216 <_Balloc>
 800a44c:	2301      	movs	r3, #1
 800a44e:	6144      	str	r4, [r0, #20]
 800a450:	6103      	str	r3, [r0, #16]
 800a452:	bd10      	pop	{r4, pc}

0800a454 <__multiply>:
 800a454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a456:	690b      	ldr	r3, [r1, #16]
 800a458:	0014      	movs	r4, r2
 800a45a:	6912      	ldr	r2, [r2, #16]
 800a45c:	b089      	sub	sp, #36	; 0x24
 800a45e:	000d      	movs	r5, r1
 800a460:	4293      	cmp	r3, r2
 800a462:	da01      	bge.n	800a468 <__multiply+0x14>
 800a464:	0025      	movs	r5, r4
 800a466:	000c      	movs	r4, r1
 800a468:	692f      	ldr	r7, [r5, #16]
 800a46a:	6926      	ldr	r6, [r4, #16]
 800a46c:	6869      	ldr	r1, [r5, #4]
 800a46e:	19bb      	adds	r3, r7, r6
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	68ab      	ldr	r3, [r5, #8]
 800a474:	19ba      	adds	r2, r7, r6
 800a476:	4293      	cmp	r3, r2
 800a478:	da00      	bge.n	800a47c <__multiply+0x28>
 800a47a:	3101      	adds	r1, #1
 800a47c:	f7ff fecb 	bl	800a216 <_Balloc>
 800a480:	0002      	movs	r2, r0
 800a482:	19bb      	adds	r3, r7, r6
 800a484:	3214      	adds	r2, #20
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	18d3      	adds	r3, r2, r3
 800a48a:	469c      	mov	ip, r3
 800a48c:	2100      	movs	r1, #0
 800a48e:	0013      	movs	r3, r2
 800a490:	9004      	str	r0, [sp, #16]
 800a492:	4563      	cmp	r3, ip
 800a494:	d31d      	bcc.n	800a4d2 <__multiply+0x7e>
 800a496:	3514      	adds	r5, #20
 800a498:	00bf      	lsls	r7, r7, #2
 800a49a:	19eb      	adds	r3, r5, r7
 800a49c:	3414      	adds	r4, #20
 800a49e:	00b6      	lsls	r6, r6, #2
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	19a3      	adds	r3, r4, r6
 800a4a4:	9503      	str	r5, [sp, #12]
 800a4a6:	9401      	str	r4, [sp, #4]
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	9b07      	ldr	r3, [sp, #28]
 800a4ac:	9901      	ldr	r1, [sp, #4]
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	d311      	bcc.n	800a4d6 <__multiply+0x82>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd06      	ble.n	800a4c6 <__multiply+0x72>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	425b      	negs	r3, r3
 800a4bc:	449c      	add	ip, r3
 800a4be:	4663      	mov	r3, ip
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d051      	beq.n	800a56a <__multiply+0x116>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	9a02      	ldr	r2, [sp, #8]
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	611a      	str	r2, [r3, #16]
 800a4ce:	b009      	add	sp, #36	; 0x24
 800a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d2:	c302      	stmia	r3!, {r1}
 800a4d4:	e7dd      	b.n	800a492 <__multiply+0x3e>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	b298      	uxth	r0, r3
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d01c      	beq.n	800a51a <__multiply+0xc6>
 800a4e0:	0015      	movs	r5, r2
 800a4e2:	2600      	movs	r6, #0
 800a4e4:	9f03      	ldr	r7, [sp, #12]
 800a4e6:	cf02      	ldmia	r7!, {r1}
 800a4e8:	682c      	ldr	r4, [r5, #0]
 800a4ea:	b28b      	uxth	r3, r1
 800a4ec:	4343      	muls	r3, r0
 800a4ee:	0c09      	lsrs	r1, r1, #16
 800a4f0:	4341      	muls	r1, r0
 800a4f2:	b2a4      	uxth	r4, r4
 800a4f4:	191b      	adds	r3, r3, r4
 800a4f6:	199b      	adds	r3, r3, r6
 800a4f8:	000e      	movs	r6, r1
 800a4fa:	6829      	ldr	r1, [r5, #0]
 800a4fc:	9506      	str	r5, [sp, #24]
 800a4fe:	0c09      	lsrs	r1, r1, #16
 800a500:	1871      	adds	r1, r6, r1
 800a502:	0c1e      	lsrs	r6, r3, #16
 800a504:	1989      	adds	r1, r1, r6
 800a506:	0c0e      	lsrs	r6, r1, #16
 800a508:	b29b      	uxth	r3, r3
 800a50a:	0409      	lsls	r1, r1, #16
 800a50c:	430b      	orrs	r3, r1
 800a50e:	c508      	stmia	r5!, {r3}
 800a510:	9b05      	ldr	r3, [sp, #20]
 800a512:	42bb      	cmp	r3, r7
 800a514:	d8e7      	bhi.n	800a4e6 <__multiply+0x92>
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	605e      	str	r6, [r3, #4]
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	0c1d      	lsrs	r5, r3, #16
 800a520:	d01e      	beq.n	800a560 <__multiply+0x10c>
 800a522:	0010      	movs	r0, r2
 800a524:	2700      	movs	r7, #0
 800a526:	6813      	ldr	r3, [r2, #0]
 800a528:	9e03      	ldr	r6, [sp, #12]
 800a52a:	6831      	ldr	r1, [r6, #0]
 800a52c:	6804      	ldr	r4, [r0, #0]
 800a52e:	b289      	uxth	r1, r1
 800a530:	4369      	muls	r1, r5
 800a532:	0c24      	lsrs	r4, r4, #16
 800a534:	1909      	adds	r1, r1, r4
 800a536:	19c9      	adds	r1, r1, r7
 800a538:	040f      	lsls	r7, r1, #16
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	433b      	orrs	r3, r7
 800a53e:	6003      	str	r3, [r0, #0]
 800a540:	ce80      	ldmia	r6!, {r7}
 800a542:	6843      	ldr	r3, [r0, #4]
 800a544:	0c3f      	lsrs	r7, r7, #16
 800a546:	436f      	muls	r7, r5
 800a548:	b29b      	uxth	r3, r3
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	0c09      	lsrs	r1, r1, #16
 800a54e:	185b      	adds	r3, r3, r1
 800a550:	9905      	ldr	r1, [sp, #20]
 800a552:	9006      	str	r0, [sp, #24]
 800a554:	0c1f      	lsrs	r7, r3, #16
 800a556:	3004      	adds	r0, #4
 800a558:	42b1      	cmp	r1, r6
 800a55a:	d8e6      	bhi.n	800a52a <__multiply+0xd6>
 800a55c:	9906      	ldr	r1, [sp, #24]
 800a55e:	604b      	str	r3, [r1, #4]
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	3204      	adds	r2, #4
 800a564:	3304      	adds	r3, #4
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	e79f      	b.n	800a4aa <__multiply+0x56>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	9302      	str	r3, [sp, #8]
 800a570:	e79f      	b.n	800a4b2 <__multiply+0x5e>
	...

0800a574 <__pow5mult>:
 800a574:	2303      	movs	r3, #3
 800a576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a578:	4013      	ands	r3, r2
 800a57a:	0005      	movs	r5, r0
 800a57c:	000e      	movs	r6, r1
 800a57e:	0014      	movs	r4, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <__pow5mult+0x22>
 800a584:	4922      	ldr	r1, [pc, #136]	; (800a610 <__pow5mult+0x9c>)
 800a586:	3b01      	subs	r3, #1
 800a588:	009a      	lsls	r2, r3, #2
 800a58a:	5852      	ldr	r2, [r2, r1]
 800a58c:	2300      	movs	r3, #0
 800a58e:	0031      	movs	r1, r6
 800a590:	f7ff fe92 	bl	800a2b8 <__multadd>
 800a594:	0006      	movs	r6, r0
 800a596:	10a3      	asrs	r3, r4, #2
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	d036      	beq.n	800a60a <__pow5mult+0x96>
 800a59c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	d107      	bne.n	800a5b2 <__pow5mult+0x3e>
 800a5a2:	2010      	movs	r0, #16
 800a5a4:	f7ff fe10 	bl	800a1c8 <malloc>
 800a5a8:	6268      	str	r0, [r5, #36]	; 0x24
 800a5aa:	6044      	str	r4, [r0, #4]
 800a5ac:	6084      	str	r4, [r0, #8]
 800a5ae:	6004      	str	r4, [r0, #0]
 800a5b0:	60c4      	str	r4, [r0, #12]
 800a5b2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800a5b4:	68bc      	ldr	r4, [r7, #8]
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	d107      	bne.n	800a5ca <__pow5mult+0x56>
 800a5ba:	4916      	ldr	r1, [pc, #88]	; (800a614 <__pow5mult+0xa0>)
 800a5bc:	0028      	movs	r0, r5
 800a5be:	f7ff ff40 	bl	800a442 <__i2b>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	0004      	movs	r4, r0
 800a5c6:	60b8      	str	r0, [r7, #8]
 800a5c8:	6003      	str	r3, [r0, #0]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	4213      	tst	r3, r2
 800a5d0:	d00a      	beq.n	800a5e8 <__pow5mult+0x74>
 800a5d2:	0031      	movs	r1, r6
 800a5d4:	0022      	movs	r2, r4
 800a5d6:	0028      	movs	r0, r5
 800a5d8:	f7ff ff3c 	bl	800a454 <__multiply>
 800a5dc:	0007      	movs	r7, r0
 800a5de:	0031      	movs	r1, r6
 800a5e0:	0028      	movs	r0, r5
 800a5e2:	f7ff fe50 	bl	800a286 <_Bfree>
 800a5e6:	003e      	movs	r6, r7
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	105b      	asrs	r3, r3, #1
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	d00c      	beq.n	800a60a <__pow5mult+0x96>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d107      	bne.n	800a606 <__pow5mult+0x92>
 800a5f6:	0022      	movs	r2, r4
 800a5f8:	0021      	movs	r1, r4
 800a5fa:	0028      	movs	r0, r5
 800a5fc:	f7ff ff2a 	bl	800a454 <__multiply>
 800a600:	2300      	movs	r3, #0
 800a602:	6020      	str	r0, [r4, #0]
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	0004      	movs	r4, r0
 800a608:	e7df      	b.n	800a5ca <__pow5mult+0x56>
 800a60a:	0030      	movs	r0, r6
 800a60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a60e:	46c0      	nop			; (mov r8, r8)
 800a610:	0800b4f0 	.word	0x0800b4f0
 800a614:	00000271 	.word	0x00000271

0800a618 <__lshift>:
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	000d      	movs	r5, r1
 800a61c:	0017      	movs	r7, r2
 800a61e:	692b      	ldr	r3, [r5, #16]
 800a620:	1154      	asrs	r4, r2, #5
 800a622:	b085      	sub	sp, #20
 800a624:	18e3      	adds	r3, r4, r3
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	3301      	adds	r3, #1
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	6849      	ldr	r1, [r1, #4]
 800a62e:	68ab      	ldr	r3, [r5, #8]
 800a630:	9002      	str	r0, [sp, #8]
 800a632:	9a00      	ldr	r2, [sp, #0]
 800a634:	4293      	cmp	r3, r2
 800a636:	db35      	blt.n	800a6a4 <__lshift+0x8c>
 800a638:	9802      	ldr	r0, [sp, #8]
 800a63a:	f7ff fdec 	bl	800a216 <_Balloc>
 800a63e:	2300      	movs	r3, #0
 800a640:	0002      	movs	r2, r0
 800a642:	0006      	movs	r6, r0
 800a644:	0019      	movs	r1, r3
 800a646:	3214      	adds	r2, #20
 800a648:	42a3      	cmp	r3, r4
 800a64a:	db2e      	blt.n	800a6aa <__lshift+0x92>
 800a64c:	43e3      	mvns	r3, r4
 800a64e:	17db      	asrs	r3, r3, #31
 800a650:	401c      	ands	r4, r3
 800a652:	002b      	movs	r3, r5
 800a654:	00a4      	lsls	r4, r4, #2
 800a656:	1914      	adds	r4, r2, r4
 800a658:	692a      	ldr	r2, [r5, #16]
 800a65a:	3314      	adds	r3, #20
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	189a      	adds	r2, r3, r2
 800a660:	4694      	mov	ip, r2
 800a662:	221f      	movs	r2, #31
 800a664:	4017      	ands	r7, r2
 800a666:	d024      	beq.n	800a6b2 <__lshift+0x9a>
 800a668:	3201      	adds	r2, #1
 800a66a:	1bd2      	subs	r2, r2, r7
 800a66c:	9203      	str	r2, [sp, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	6819      	ldr	r1, [r3, #0]
 800a672:	0020      	movs	r0, r4
 800a674:	40b9      	lsls	r1, r7
 800a676:	430a      	orrs	r2, r1
 800a678:	c404      	stmia	r4!, {r2}
 800a67a:	cb04      	ldmia	r3!, {r2}
 800a67c:	9903      	ldr	r1, [sp, #12]
 800a67e:	40ca      	lsrs	r2, r1
 800a680:	459c      	cmp	ip, r3
 800a682:	d8f5      	bhi.n	800a670 <__lshift+0x58>
 800a684:	6042      	str	r2, [r0, #4]
 800a686:	2a00      	cmp	r2, #0
 800a688:	d002      	beq.n	800a690 <__lshift+0x78>
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	3302      	adds	r3, #2
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	9802      	ldr	r0, [sp, #8]
 800a694:	3b01      	subs	r3, #1
 800a696:	6133      	str	r3, [r6, #16]
 800a698:	0029      	movs	r1, r5
 800a69a:	f7ff fdf4 	bl	800a286 <_Bfree>
 800a69e:	0030      	movs	r0, r6
 800a6a0:	b005      	add	sp, #20
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a4:	3101      	adds	r1, #1
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	e7c3      	b.n	800a632 <__lshift+0x1a>
 800a6aa:	0098      	lsls	r0, r3, #2
 800a6ac:	5011      	str	r1, [r2, r0]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	e7ca      	b.n	800a648 <__lshift+0x30>
 800a6b2:	cb04      	ldmia	r3!, {r2}
 800a6b4:	c404      	stmia	r4!, {r2}
 800a6b6:	459c      	cmp	ip, r3
 800a6b8:	d8fb      	bhi.n	800a6b2 <__lshift+0x9a>
 800a6ba:	e7e9      	b.n	800a690 <__lshift+0x78>

0800a6bc <__mcmp>:
 800a6bc:	690a      	ldr	r2, [r1, #16]
 800a6be:	6903      	ldr	r3, [r0, #16]
 800a6c0:	b530      	push	{r4, r5, lr}
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	d10d      	bne.n	800a6e2 <__mcmp+0x26>
 800a6c6:	0092      	lsls	r2, r2, #2
 800a6c8:	3014      	adds	r0, #20
 800a6ca:	3114      	adds	r1, #20
 800a6cc:	1884      	adds	r4, r0, r2
 800a6ce:	1889      	adds	r1, r1, r2
 800a6d0:	3c04      	subs	r4, #4
 800a6d2:	3904      	subs	r1, #4
 800a6d4:	6825      	ldr	r5, [r4, #0]
 800a6d6:	680a      	ldr	r2, [r1, #0]
 800a6d8:	4295      	cmp	r5, r2
 800a6da:	d004      	beq.n	800a6e6 <__mcmp+0x2a>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	4295      	cmp	r5, r2
 800a6e0:	d304      	bcc.n	800a6ec <__mcmp+0x30>
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	bd30      	pop	{r4, r5, pc}
 800a6e6:	42a0      	cmp	r0, r4
 800a6e8:	d3f2      	bcc.n	800a6d0 <__mcmp+0x14>
 800a6ea:	e7fa      	b.n	800a6e2 <__mcmp+0x26>
 800a6ec:	425b      	negs	r3, r3
 800a6ee:	e7f8      	b.n	800a6e2 <__mcmp+0x26>

0800a6f0 <__mdiff>:
 800a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f2:	000d      	movs	r5, r1
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	0007      	movs	r7, r0
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0028      	movs	r0, r5
 800a6fc:	0014      	movs	r4, r2
 800a6fe:	f7ff ffdd 	bl	800a6bc <__mcmp>
 800a702:	1e06      	subs	r6, r0, #0
 800a704:	d108      	bne.n	800a718 <__mdiff+0x28>
 800a706:	0001      	movs	r1, r0
 800a708:	0038      	movs	r0, r7
 800a70a:	f7ff fd84 	bl	800a216 <_Balloc>
 800a70e:	2301      	movs	r3, #1
 800a710:	6146      	str	r6, [r0, #20]
 800a712:	6103      	str	r3, [r0, #16]
 800a714:	b005      	add	sp, #20
 800a716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a718:	2301      	movs	r3, #1
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	2800      	cmp	r0, #0
 800a71e:	db04      	blt.n	800a72a <__mdiff+0x3a>
 800a720:	0023      	movs	r3, r4
 800a722:	002c      	movs	r4, r5
 800a724:	001d      	movs	r5, r3
 800a726:	2300      	movs	r3, #0
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	6861      	ldr	r1, [r4, #4]
 800a72c:	0038      	movs	r0, r7
 800a72e:	f7ff fd72 	bl	800a216 <_Balloc>
 800a732:	002f      	movs	r7, r5
 800a734:	2200      	movs	r2, #0
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	6926      	ldr	r6, [r4, #16]
 800a73a:	60c3      	str	r3, [r0, #12]
 800a73c:	3414      	adds	r4, #20
 800a73e:	00b3      	lsls	r3, r6, #2
 800a740:	18e3      	adds	r3, r4, r3
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	692b      	ldr	r3, [r5, #16]
 800a746:	3714      	adds	r7, #20
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	18fb      	adds	r3, r7, r3
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	0003      	movs	r3, r0
 800a750:	4694      	mov	ip, r2
 800a752:	3314      	adds	r3, #20
 800a754:	cc20      	ldmia	r4!, {r5}
 800a756:	cf04      	ldmia	r7!, {r2}
 800a758:	9201      	str	r2, [sp, #4]
 800a75a:	b2aa      	uxth	r2, r5
 800a75c:	4494      	add	ip, r2
 800a75e:	466a      	mov	r2, sp
 800a760:	4661      	mov	r1, ip
 800a762:	8892      	ldrh	r2, [r2, #4]
 800a764:	0c2d      	lsrs	r5, r5, #16
 800a766:	1a8a      	subs	r2, r1, r2
 800a768:	9901      	ldr	r1, [sp, #4]
 800a76a:	0c09      	lsrs	r1, r1, #16
 800a76c:	1a69      	subs	r1, r5, r1
 800a76e:	1415      	asrs	r5, r2, #16
 800a770:	1949      	adds	r1, r1, r5
 800a772:	140d      	asrs	r5, r1, #16
 800a774:	b292      	uxth	r2, r2
 800a776:	0409      	lsls	r1, r1, #16
 800a778:	430a      	orrs	r2, r1
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	9a03      	ldr	r2, [sp, #12]
 800a77e:	46ac      	mov	ip, r5
 800a780:	3304      	adds	r3, #4
 800a782:	42ba      	cmp	r2, r7
 800a784:	d8e6      	bhi.n	800a754 <__mdiff+0x64>
 800a786:	9902      	ldr	r1, [sp, #8]
 800a788:	001a      	movs	r2, r3
 800a78a:	428c      	cmp	r4, r1
 800a78c:	d305      	bcc.n	800a79a <__mdiff+0xaa>
 800a78e:	3a04      	subs	r2, #4
 800a790:	6813      	ldr	r3, [r2, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00e      	beq.n	800a7b4 <__mdiff+0xc4>
 800a796:	6106      	str	r6, [r0, #16]
 800a798:	e7bc      	b.n	800a714 <__mdiff+0x24>
 800a79a:	cc04      	ldmia	r4!, {r2}
 800a79c:	b291      	uxth	r1, r2
 800a79e:	4461      	add	r1, ip
 800a7a0:	140d      	asrs	r5, r1, #16
 800a7a2:	0c12      	lsrs	r2, r2, #16
 800a7a4:	1952      	adds	r2, r2, r5
 800a7a6:	1415      	asrs	r5, r2, #16
 800a7a8:	b289      	uxth	r1, r1
 800a7aa:	0412      	lsls	r2, r2, #16
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	46ac      	mov	ip, r5
 800a7b0:	c304      	stmia	r3!, {r2}
 800a7b2:	e7e8      	b.n	800a786 <__mdiff+0x96>
 800a7b4:	3e01      	subs	r6, #1
 800a7b6:	e7ea      	b.n	800a78e <__mdiff+0x9e>

0800a7b8 <__ulp>:
 800a7b8:	000b      	movs	r3, r1
 800a7ba:	4910      	ldr	r1, [pc, #64]	; (800a7fc <__ulp+0x44>)
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	4019      	ands	r1, r3
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <__ulp+0x48>)
 800a7c2:	18c9      	adds	r1, r1, r3
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	dd04      	ble.n	800a7d2 <__ulp+0x1a>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	000b      	movs	r3, r1
 800a7cc:	0010      	movs	r0, r2
 800a7ce:	0019      	movs	r1, r3
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	4249      	negs	r1, r1
 800a7d4:	1509      	asrs	r1, r1, #20
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2913      	cmp	r1, #19
 800a7dc:	dc04      	bgt.n	800a7e8 <__ulp+0x30>
 800a7de:	2080      	movs	r0, #128	; 0x80
 800a7e0:	0300      	lsls	r0, r0, #12
 800a7e2:	4108      	asrs	r0, r1
 800a7e4:	0003      	movs	r3, r0
 800a7e6:	e7f1      	b.n	800a7cc <__ulp+0x14>
 800a7e8:	3914      	subs	r1, #20
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	291e      	cmp	r1, #30
 800a7ee:	dc02      	bgt.n	800a7f6 <__ulp+0x3e>
 800a7f0:	241f      	movs	r4, #31
 800a7f2:	1a61      	subs	r1, r4, r1
 800a7f4:	4088      	lsls	r0, r1
 800a7f6:	0002      	movs	r2, r0
 800a7f8:	e7e8      	b.n	800a7cc <__ulp+0x14>
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	7ff00000 	.word	0x7ff00000
 800a800:	fcc00000 	.word	0xfcc00000

0800a804 <__b2d>:
 800a804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a806:	0006      	movs	r6, r0
 800a808:	6903      	ldr	r3, [r0, #16]
 800a80a:	3614      	adds	r6, #20
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	18f3      	adds	r3, r6, r3
 800a810:	1f1d      	subs	r5, r3, #4
 800a812:	682c      	ldr	r4, [r5, #0]
 800a814:	000f      	movs	r7, r1
 800a816:	0020      	movs	r0, r4
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f7ff fdc9 	bl	800a3b0 <__hi0bits>
 800a81e:	2320      	movs	r3, #32
 800a820:	1a1b      	subs	r3, r3, r0
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	491c      	ldr	r1, [pc, #112]	; (800a898 <__b2d+0x94>)
 800a826:	280a      	cmp	r0, #10
 800a828:	dc16      	bgt.n	800a858 <__b2d+0x54>
 800a82a:	230b      	movs	r3, #11
 800a82c:	0027      	movs	r7, r4
 800a82e:	1a1b      	subs	r3, r3, r0
 800a830:	40df      	lsrs	r7, r3
 800a832:	4339      	orrs	r1, r7
 800a834:	469c      	mov	ip, r3
 800a836:	000b      	movs	r3, r1
 800a838:	2100      	movs	r1, #0
 800a83a:	42ae      	cmp	r6, r5
 800a83c:	d202      	bcs.n	800a844 <__b2d+0x40>
 800a83e:	9901      	ldr	r1, [sp, #4]
 800a840:	3908      	subs	r1, #8
 800a842:	6809      	ldr	r1, [r1, #0]
 800a844:	3015      	adds	r0, #21
 800a846:	4084      	lsls	r4, r0
 800a848:	4660      	mov	r0, ip
 800a84a:	40c1      	lsrs	r1, r0
 800a84c:	430c      	orrs	r4, r1
 800a84e:	0022      	movs	r2, r4
 800a850:	0010      	movs	r0, r2
 800a852:	0019      	movs	r1, r3
 800a854:	b003      	add	sp, #12
 800a856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a858:	2700      	movs	r7, #0
 800a85a:	42ae      	cmp	r6, r5
 800a85c:	d202      	bcs.n	800a864 <__b2d+0x60>
 800a85e:	9d01      	ldr	r5, [sp, #4]
 800a860:	3d08      	subs	r5, #8
 800a862:	682f      	ldr	r7, [r5, #0]
 800a864:	380b      	subs	r0, #11
 800a866:	4684      	mov	ip, r0
 800a868:	1e03      	subs	r3, r0, #0
 800a86a:	d012      	beq.n	800a892 <__b2d+0x8e>
 800a86c:	409c      	lsls	r4, r3
 800a86e:	2020      	movs	r0, #32
 800a870:	4321      	orrs	r1, r4
 800a872:	003c      	movs	r4, r7
 800a874:	1ac0      	subs	r0, r0, r3
 800a876:	40c4      	lsrs	r4, r0
 800a878:	4321      	orrs	r1, r4
 800a87a:	000b      	movs	r3, r1
 800a87c:	2100      	movs	r1, #0
 800a87e:	42b5      	cmp	r5, r6
 800a880:	d901      	bls.n	800a886 <__b2d+0x82>
 800a882:	3d04      	subs	r5, #4
 800a884:	6829      	ldr	r1, [r5, #0]
 800a886:	4664      	mov	r4, ip
 800a888:	40c1      	lsrs	r1, r0
 800a88a:	40a7      	lsls	r7, r4
 800a88c:	430f      	orrs	r7, r1
 800a88e:	003a      	movs	r2, r7
 800a890:	e7de      	b.n	800a850 <__b2d+0x4c>
 800a892:	4321      	orrs	r1, r4
 800a894:	000b      	movs	r3, r1
 800a896:	e7fa      	b.n	800a88e <__b2d+0x8a>
 800a898:	3ff00000 	.word	0x3ff00000

0800a89c <__d2b>:
 800a89c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a89e:	001d      	movs	r5, r3
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	0014      	movs	r4, r2
 800a8a4:	9f08      	ldr	r7, [sp, #32]
 800a8a6:	f7ff fcb6 	bl	800a216 <_Balloc>
 800a8aa:	032b      	lsls	r3, r5, #12
 800a8ac:	006d      	lsls	r5, r5, #1
 800a8ae:	0006      	movs	r6, r0
 800a8b0:	0b1b      	lsrs	r3, r3, #12
 800a8b2:	0d6d      	lsrs	r5, r5, #21
 800a8b4:	d124      	bne.n	800a900 <__d2b+0x64>
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	2c00      	cmp	r4, #0
 800a8ba:	d027      	beq.n	800a90c <__d2b+0x70>
 800a8bc:	4668      	mov	r0, sp
 800a8be:	9400      	str	r4, [sp, #0]
 800a8c0:	f7ff fd90 	bl	800a3e4 <__lo0bits>
 800a8c4:	9c00      	ldr	r4, [sp, #0]
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d01e      	beq.n	800a908 <__d2b+0x6c>
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	2120      	movs	r1, #32
 800a8ce:	001a      	movs	r2, r3
 800a8d0:	1a09      	subs	r1, r1, r0
 800a8d2:	408a      	lsls	r2, r1
 800a8d4:	40c3      	lsrs	r3, r0
 800a8d6:	4322      	orrs	r2, r4
 800a8d8:	6172      	str	r2, [r6, #20]
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	9c01      	ldr	r4, [sp, #4]
 800a8de:	61b4      	str	r4, [r6, #24]
 800a8e0:	1e63      	subs	r3, r4, #1
 800a8e2:	419c      	sbcs	r4, r3
 800a8e4:	3401      	adds	r4, #1
 800a8e6:	6134      	str	r4, [r6, #16]
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	d018      	beq.n	800a91e <__d2b+0x82>
 800a8ec:	4b12      	ldr	r3, [pc, #72]	; (800a938 <__d2b+0x9c>)
 800a8ee:	18ed      	adds	r5, r5, r3
 800a8f0:	2335      	movs	r3, #53	; 0x35
 800a8f2:	182d      	adds	r5, r5, r0
 800a8f4:	603d      	str	r5, [r7, #0]
 800a8f6:	1a18      	subs	r0, r3, r0
 800a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8fa:	6018      	str	r0, [r3, #0]
 800a8fc:	0030      	movs	r0, r6
 800a8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a900:	2280      	movs	r2, #128	; 0x80
 800a902:	0352      	lsls	r2, r2, #13
 800a904:	4313      	orrs	r3, r2
 800a906:	e7d6      	b.n	800a8b6 <__d2b+0x1a>
 800a908:	6174      	str	r4, [r6, #20]
 800a90a:	e7e7      	b.n	800a8dc <__d2b+0x40>
 800a90c:	a801      	add	r0, sp, #4
 800a90e:	f7ff fd69 	bl	800a3e4 <__lo0bits>
 800a912:	2401      	movs	r4, #1
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	6134      	str	r4, [r6, #16]
 800a918:	6173      	str	r3, [r6, #20]
 800a91a:	3020      	adds	r0, #32
 800a91c:	e7e4      	b.n	800a8e8 <__d2b+0x4c>
 800a91e:	4b07      	ldr	r3, [pc, #28]	; (800a93c <__d2b+0xa0>)
 800a920:	18c0      	adds	r0, r0, r3
 800a922:	4b07      	ldr	r3, [pc, #28]	; (800a940 <__d2b+0xa4>)
 800a924:	6038      	str	r0, [r7, #0]
 800a926:	18e3      	adds	r3, r4, r3
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	18f3      	adds	r3, r6, r3
 800a92c:	6958      	ldr	r0, [r3, #20]
 800a92e:	f7ff fd3f 	bl	800a3b0 <__hi0bits>
 800a932:	0164      	lsls	r4, r4, #5
 800a934:	1a20      	subs	r0, r4, r0
 800a936:	e7df      	b.n	800a8f8 <__d2b+0x5c>
 800a938:	fffffbcd 	.word	0xfffffbcd
 800a93c:	fffffbce 	.word	0xfffffbce
 800a940:	3fffffff 	.word	0x3fffffff

0800a944 <__ratio>:
 800a944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a946:	b085      	sub	sp, #20
 800a948:	000f      	movs	r7, r1
 800a94a:	a902      	add	r1, sp, #8
 800a94c:	0006      	movs	r6, r0
 800a94e:	f7ff ff59 	bl	800a804 <__b2d>
 800a952:	0004      	movs	r4, r0
 800a954:	000d      	movs	r5, r1
 800a956:	0038      	movs	r0, r7
 800a958:	a903      	add	r1, sp, #12
 800a95a:	9400      	str	r4, [sp, #0]
 800a95c:	9501      	str	r5, [sp, #4]
 800a95e:	f7ff ff51 	bl	800a804 <__b2d>
 800a962:	6936      	ldr	r6, [r6, #16]
 800a964:	693f      	ldr	r7, [r7, #16]
 800a966:	0002      	movs	r2, r0
 800a968:	1bf7      	subs	r7, r6, r7
 800a96a:	017e      	lsls	r6, r7, #5
 800a96c:	46b4      	mov	ip, r6
 800a96e:	9f03      	ldr	r7, [sp, #12]
 800a970:	9e02      	ldr	r6, [sp, #8]
 800a972:	000b      	movs	r3, r1
 800a974:	1bf6      	subs	r6, r6, r7
 800a976:	4466      	add	r6, ip
 800a978:	0537      	lsls	r7, r6, #20
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	dd07      	ble.n	800a98e <__ratio+0x4a>
 800a97e:	1979      	adds	r1, r7, r5
 800a980:	9101      	str	r1, [sp, #4]
 800a982:	9800      	ldr	r0, [sp, #0]
 800a984:	9901      	ldr	r1, [sp, #4]
 800a986:	f7f6 fa11 	bl	8000dac <__aeabi_ddiv>
 800a98a:	b005      	add	sp, #20
 800a98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98e:	1bcb      	subs	r3, r1, r7
 800a990:	e7f7      	b.n	800a982 <__ratio+0x3e>

0800a992 <__copybits>:
 800a992:	0013      	movs	r3, r2
 800a994:	3901      	subs	r1, #1
 800a996:	b510      	push	{r4, lr}
 800a998:	1149      	asrs	r1, r1, #5
 800a99a:	6912      	ldr	r2, [r2, #16]
 800a99c:	3101      	adds	r1, #1
 800a99e:	0089      	lsls	r1, r1, #2
 800a9a0:	3314      	adds	r3, #20
 800a9a2:	0092      	lsls	r2, r2, #2
 800a9a4:	1841      	adds	r1, r0, r1
 800a9a6:	189a      	adds	r2, r3, r2
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d803      	bhi.n	800a9b4 <__copybits+0x22>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4281      	cmp	r1, r0
 800a9b0:	d803      	bhi.n	800a9ba <__copybits+0x28>
 800a9b2:	bd10      	pop	{r4, pc}
 800a9b4:	cb10      	ldmia	r3!, {r4}
 800a9b6:	c010      	stmia	r0!, {r4}
 800a9b8:	e7f6      	b.n	800a9a8 <__copybits+0x16>
 800a9ba:	c008      	stmia	r0!, {r3}
 800a9bc:	e7f7      	b.n	800a9ae <__copybits+0x1c>

0800a9be <__any_on>:
 800a9be:	0002      	movs	r2, r0
 800a9c0:	6900      	ldr	r0, [r0, #16]
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	3214      	adds	r2, #20
 800a9c6:	114b      	asrs	r3, r1, #5
 800a9c8:	4298      	cmp	r0, r3
 800a9ca:	db12      	blt.n	800a9f2 <__any_on+0x34>
 800a9cc:	dd0b      	ble.n	800a9e6 <__any_on+0x28>
 800a9ce:	201f      	movs	r0, #31
 800a9d0:	4001      	ands	r1, r0
 800a9d2:	d008      	beq.n	800a9e6 <__any_on+0x28>
 800a9d4:	0098      	lsls	r0, r3, #2
 800a9d6:	5884      	ldr	r4, [r0, r2]
 800a9d8:	0020      	movs	r0, r4
 800a9da:	40c8      	lsrs	r0, r1
 800a9dc:	4088      	lsls	r0, r1
 800a9de:	0001      	movs	r1, r0
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	428c      	cmp	r4, r1
 800a9e4:	d104      	bne.n	800a9f0 <__any_on+0x32>
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	18d3      	adds	r3, r2, r3
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d803      	bhi.n	800a9f6 <__any_on+0x38>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	bd10      	pop	{r4, pc}
 800a9f2:	0003      	movs	r3, r0
 800a9f4:	e7f7      	b.n	800a9e6 <__any_on+0x28>
 800a9f6:	3b04      	subs	r3, #4
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	d0f5      	beq.n	800a9ea <__any_on+0x2c>
 800a9fe:	2001      	movs	r0, #1
 800aa00:	e7f6      	b.n	800a9f0 <__any_on+0x32>

0800aa02 <_calloc_r>:
 800aa02:	434a      	muls	r2, r1
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	0011      	movs	r1, r2
 800aa08:	0014      	movs	r4, r2
 800aa0a:	f000 f853 	bl	800aab4 <_malloc_r>
 800aa0e:	1e05      	subs	r5, r0, #0
 800aa10:	d003      	beq.n	800aa1a <_calloc_r+0x18>
 800aa12:	0022      	movs	r2, r4
 800aa14:	2100      	movs	r1, #0
 800aa16:	f7fc fc94 	bl	8007342 <memset>
 800aa1a:	0028      	movs	r0, r5
 800aa1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa20 <_free_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	0005      	movs	r5, r0
 800aa24:	2900      	cmp	r1, #0
 800aa26:	d010      	beq.n	800aa4a <_free_r+0x2a>
 800aa28:	1f0c      	subs	r4, r1, #4
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da00      	bge.n	800aa32 <_free_r+0x12>
 800aa30:	18e4      	adds	r4, r4, r3
 800aa32:	0028      	movs	r0, r5
 800aa34:	f000 fa3e 	bl	800aeb4 <__malloc_lock>
 800aa38:	4a1d      	ldr	r2, [pc, #116]	; (800aab0 <_free_r+0x90>)
 800aa3a:	6813      	ldr	r3, [r2, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d105      	bne.n	800aa4c <_free_r+0x2c>
 800aa40:	6063      	str	r3, [r4, #4]
 800aa42:	6014      	str	r4, [r2, #0]
 800aa44:	0028      	movs	r0, r5
 800aa46:	f000 fa36 	bl	800aeb6 <__malloc_unlock>
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	d909      	bls.n	800aa64 <_free_r+0x44>
 800aa50:	6821      	ldr	r1, [r4, #0]
 800aa52:	1860      	adds	r0, r4, r1
 800aa54:	4283      	cmp	r3, r0
 800aa56:	d1f3      	bne.n	800aa40 <_free_r+0x20>
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	1841      	adds	r1, r0, r1
 800aa5e:	6021      	str	r1, [r4, #0]
 800aa60:	e7ee      	b.n	800aa40 <_free_r+0x20>
 800aa62:	0013      	movs	r3, r2
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	d001      	beq.n	800aa6e <_free_r+0x4e>
 800aa6a:	42a2      	cmp	r2, r4
 800aa6c:	d9f9      	bls.n	800aa62 <_free_r+0x42>
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	1858      	adds	r0, r3, r1
 800aa72:	42a0      	cmp	r0, r4
 800aa74:	d10b      	bne.n	800aa8e <_free_r+0x6e>
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	1809      	adds	r1, r1, r0
 800aa7a:	1858      	adds	r0, r3, r1
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	4282      	cmp	r2, r0
 800aa80:	d1e0      	bne.n	800aa44 <_free_r+0x24>
 800aa82:	6810      	ldr	r0, [r2, #0]
 800aa84:	6852      	ldr	r2, [r2, #4]
 800aa86:	1841      	adds	r1, r0, r1
 800aa88:	6019      	str	r1, [r3, #0]
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	e7da      	b.n	800aa44 <_free_r+0x24>
 800aa8e:	42a0      	cmp	r0, r4
 800aa90:	d902      	bls.n	800aa98 <_free_r+0x78>
 800aa92:	230c      	movs	r3, #12
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	e7d5      	b.n	800aa44 <_free_r+0x24>
 800aa98:	6821      	ldr	r1, [r4, #0]
 800aa9a:	1860      	adds	r0, r4, r1
 800aa9c:	4282      	cmp	r2, r0
 800aa9e:	d103      	bne.n	800aaa8 <_free_r+0x88>
 800aaa0:	6810      	ldr	r0, [r2, #0]
 800aaa2:	6852      	ldr	r2, [r2, #4]
 800aaa4:	1841      	adds	r1, r0, r1
 800aaa6:	6021      	str	r1, [r4, #0]
 800aaa8:	6062      	str	r2, [r4, #4]
 800aaaa:	605c      	str	r4, [r3, #4]
 800aaac:	e7ca      	b.n	800aa44 <_free_r+0x24>
 800aaae:	46c0      	nop			; (mov r8, r8)
 800aab0:	20000598 	.word	0x20000598

0800aab4 <_malloc_r>:
 800aab4:	2303      	movs	r3, #3
 800aab6:	b570      	push	{r4, r5, r6, lr}
 800aab8:	1ccd      	adds	r5, r1, #3
 800aaba:	439d      	bics	r5, r3
 800aabc:	3508      	adds	r5, #8
 800aabe:	0006      	movs	r6, r0
 800aac0:	2d0c      	cmp	r5, #12
 800aac2:	d21e      	bcs.n	800ab02 <_malloc_r+0x4e>
 800aac4:	250c      	movs	r5, #12
 800aac6:	42a9      	cmp	r1, r5
 800aac8:	d81d      	bhi.n	800ab06 <_malloc_r+0x52>
 800aaca:	0030      	movs	r0, r6
 800aacc:	f000 f9f2 	bl	800aeb4 <__malloc_lock>
 800aad0:	4a25      	ldr	r2, [pc, #148]	; (800ab68 <_malloc_r+0xb4>)
 800aad2:	6814      	ldr	r4, [r2, #0]
 800aad4:	0021      	movs	r1, r4
 800aad6:	2900      	cmp	r1, #0
 800aad8:	d119      	bne.n	800ab0e <_malloc_r+0x5a>
 800aada:	4c24      	ldr	r4, [pc, #144]	; (800ab6c <_malloc_r+0xb8>)
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <_malloc_r+0x36>
 800aae2:	0030      	movs	r0, r6
 800aae4:	f000 f9a4 	bl	800ae30 <_sbrk_r>
 800aae8:	6020      	str	r0, [r4, #0]
 800aaea:	0029      	movs	r1, r5
 800aaec:	0030      	movs	r0, r6
 800aaee:	f000 f99f 	bl	800ae30 <_sbrk_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d12b      	bne.n	800ab4e <_malloc_r+0x9a>
 800aaf6:	230c      	movs	r3, #12
 800aaf8:	0030      	movs	r0, r6
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	f000 f9db 	bl	800aeb6 <__malloc_unlock>
 800ab00:	e003      	b.n	800ab0a <_malloc_r+0x56>
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	dadf      	bge.n	800aac6 <_malloc_r+0x12>
 800ab06:	230c      	movs	r3, #12
 800ab08:	6033      	str	r3, [r6, #0]
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	680b      	ldr	r3, [r1, #0]
 800ab10:	1b5b      	subs	r3, r3, r5
 800ab12:	d419      	bmi.n	800ab48 <_malloc_r+0x94>
 800ab14:	2b0b      	cmp	r3, #11
 800ab16:	d903      	bls.n	800ab20 <_malloc_r+0x6c>
 800ab18:	600b      	str	r3, [r1, #0]
 800ab1a:	18cc      	adds	r4, r1, r3
 800ab1c:	6025      	str	r5, [r4, #0]
 800ab1e:	e003      	b.n	800ab28 <_malloc_r+0x74>
 800ab20:	684b      	ldr	r3, [r1, #4]
 800ab22:	428c      	cmp	r4, r1
 800ab24:	d10d      	bne.n	800ab42 <_malloc_r+0x8e>
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	0030      	movs	r0, r6
 800ab2a:	f000 f9c4 	bl	800aeb6 <__malloc_unlock>
 800ab2e:	0020      	movs	r0, r4
 800ab30:	2207      	movs	r2, #7
 800ab32:	300b      	adds	r0, #11
 800ab34:	1d23      	adds	r3, r4, #4
 800ab36:	4390      	bics	r0, r2
 800ab38:	1ac3      	subs	r3, r0, r3
 800ab3a:	d0e7      	beq.n	800ab0c <_malloc_r+0x58>
 800ab3c:	425a      	negs	r2, r3
 800ab3e:	50e2      	str	r2, [r4, r3]
 800ab40:	e7e4      	b.n	800ab0c <_malloc_r+0x58>
 800ab42:	6063      	str	r3, [r4, #4]
 800ab44:	000c      	movs	r4, r1
 800ab46:	e7ef      	b.n	800ab28 <_malloc_r+0x74>
 800ab48:	000c      	movs	r4, r1
 800ab4a:	6849      	ldr	r1, [r1, #4]
 800ab4c:	e7c3      	b.n	800aad6 <_malloc_r+0x22>
 800ab4e:	2303      	movs	r3, #3
 800ab50:	1cc4      	adds	r4, r0, #3
 800ab52:	439c      	bics	r4, r3
 800ab54:	42a0      	cmp	r0, r4
 800ab56:	d0e1      	beq.n	800ab1c <_malloc_r+0x68>
 800ab58:	1a21      	subs	r1, r4, r0
 800ab5a:	0030      	movs	r0, r6
 800ab5c:	f000 f968 	bl	800ae30 <_sbrk_r>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d1db      	bne.n	800ab1c <_malloc_r+0x68>
 800ab64:	e7c7      	b.n	800aaf6 <_malloc_r+0x42>
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	20000598 	.word	0x20000598
 800ab6c:	2000059c 	.word	0x2000059c

0800ab70 <__ssputs_r>:
 800ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab72:	688e      	ldr	r6, [r1, #8]
 800ab74:	b085      	sub	sp, #20
 800ab76:	0007      	movs	r7, r0
 800ab78:	000c      	movs	r4, r1
 800ab7a:	9203      	str	r2, [sp, #12]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	429e      	cmp	r6, r3
 800ab80:	d83c      	bhi.n	800abfc <__ssputs_r+0x8c>
 800ab82:	2390      	movs	r3, #144	; 0x90
 800ab84:	898a      	ldrh	r2, [r1, #12]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	421a      	tst	r2, r3
 800ab8a:	d034      	beq.n	800abf6 <__ssputs_r+0x86>
 800ab8c:	2503      	movs	r5, #3
 800ab8e:	6909      	ldr	r1, [r1, #16]
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	1a5b      	subs	r3, r3, r1
 800ab94:	9302      	str	r3, [sp, #8]
 800ab96:	6963      	ldr	r3, [r4, #20]
 800ab98:	9802      	ldr	r0, [sp, #8]
 800ab9a:	435d      	muls	r5, r3
 800ab9c:	0feb      	lsrs	r3, r5, #31
 800ab9e:	195d      	adds	r5, r3, r5
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	106d      	asrs	r5, r5, #1
 800aba4:	3301      	adds	r3, #1
 800aba6:	181b      	adds	r3, r3, r0
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	d900      	bls.n	800abae <__ssputs_r+0x3e>
 800abac:	001d      	movs	r5, r3
 800abae:	0553      	lsls	r3, r2, #21
 800abb0:	d532      	bpl.n	800ac18 <__ssputs_r+0xa8>
 800abb2:	0029      	movs	r1, r5
 800abb4:	0038      	movs	r0, r7
 800abb6:	f7ff ff7d 	bl	800aab4 <_malloc_r>
 800abba:	1e06      	subs	r6, r0, #0
 800abbc:	d109      	bne.n	800abd2 <__ssputs_r+0x62>
 800abbe:	230c      	movs	r3, #12
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	2340      	movs	r3, #64	; 0x40
 800abc4:	2001      	movs	r0, #1
 800abc6:	89a2      	ldrh	r2, [r4, #12]
 800abc8:	4240      	negs	r0, r0
 800abca:	4313      	orrs	r3, r2
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	b005      	add	sp, #20
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd2:	9a02      	ldr	r2, [sp, #8]
 800abd4:	6921      	ldr	r1, [r4, #16]
 800abd6:	f7fc fbab 	bl	8007330 <memcpy>
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	4a14      	ldr	r2, [pc, #80]	; (800ac30 <__ssputs_r+0xc0>)
 800abde:	401a      	ands	r2, r3
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	4313      	orrs	r3, r2
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	9b02      	ldr	r3, [sp, #8]
 800abe8:	6126      	str	r6, [r4, #16]
 800abea:	18f6      	adds	r6, r6, r3
 800abec:	6026      	str	r6, [r4, #0]
 800abee:	6165      	str	r5, [r4, #20]
 800abf0:	9e01      	ldr	r6, [sp, #4]
 800abf2:	1aed      	subs	r5, r5, r3
 800abf4:	60a5      	str	r5, [r4, #8]
 800abf6:	9b01      	ldr	r3, [sp, #4]
 800abf8:	429e      	cmp	r6, r3
 800abfa:	d900      	bls.n	800abfe <__ssputs_r+0x8e>
 800abfc:	9e01      	ldr	r6, [sp, #4]
 800abfe:	0032      	movs	r2, r6
 800ac00:	9903      	ldr	r1, [sp, #12]
 800ac02:	6820      	ldr	r0, [r4, #0]
 800ac04:	f000 f943 	bl	800ae8e <memmove>
 800ac08:	68a3      	ldr	r3, [r4, #8]
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	1b9b      	subs	r3, r3, r6
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	199e      	adds	r6, r3, r6
 800ac14:	6026      	str	r6, [r4, #0]
 800ac16:	e7da      	b.n	800abce <__ssputs_r+0x5e>
 800ac18:	002a      	movs	r2, r5
 800ac1a:	0038      	movs	r0, r7
 800ac1c:	f000 f94c 	bl	800aeb8 <_realloc_r>
 800ac20:	1e06      	subs	r6, r0, #0
 800ac22:	d1e0      	bne.n	800abe6 <__ssputs_r+0x76>
 800ac24:	6921      	ldr	r1, [r4, #16]
 800ac26:	0038      	movs	r0, r7
 800ac28:	f7ff fefa 	bl	800aa20 <_free_r>
 800ac2c:	e7c7      	b.n	800abbe <__ssputs_r+0x4e>
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	fffffb7f 	.word	0xfffffb7f

0800ac34 <_svfiprintf_r>:
 800ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac36:	b0a1      	sub	sp, #132	; 0x84
 800ac38:	9003      	str	r0, [sp, #12]
 800ac3a:	001d      	movs	r5, r3
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	000f      	movs	r7, r1
 800ac40:	0016      	movs	r6, r2
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	d511      	bpl.n	800ac6a <_svfiprintf_r+0x36>
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10e      	bne.n	800ac6a <_svfiprintf_r+0x36>
 800ac4c:	2140      	movs	r1, #64	; 0x40
 800ac4e:	f7ff ff31 	bl	800aab4 <_malloc_r>
 800ac52:	6038      	str	r0, [r7, #0]
 800ac54:	6138      	str	r0, [r7, #16]
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d105      	bne.n	800ac66 <_svfiprintf_r+0x32>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	9a03      	ldr	r2, [sp, #12]
 800ac5e:	3801      	subs	r0, #1
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	b021      	add	sp, #132	; 0x84
 800ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac66:	2340      	movs	r3, #64	; 0x40
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	ac08      	add	r4, sp, #32
 800ac6e:	6163      	str	r3, [r4, #20]
 800ac70:	3320      	adds	r3, #32
 800ac72:	7663      	strb	r3, [r4, #25]
 800ac74:	3310      	adds	r3, #16
 800ac76:	76a3      	strb	r3, [r4, #26]
 800ac78:	9507      	str	r5, [sp, #28]
 800ac7a:	0035      	movs	r5, r6
 800ac7c:	782b      	ldrb	r3, [r5, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <_svfiprintf_r+0x52>
 800ac82:	2b25      	cmp	r3, #37	; 0x25
 800ac84:	d146      	bne.n	800ad14 <_svfiprintf_r+0xe0>
 800ac86:	1bab      	subs	r3, r5, r6
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	d00c      	beq.n	800aca6 <_svfiprintf_r+0x72>
 800ac8c:	0032      	movs	r2, r6
 800ac8e:	0039      	movs	r1, r7
 800ac90:	9803      	ldr	r0, [sp, #12]
 800ac92:	f7ff ff6d 	bl	800ab70 <__ssputs_r>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d100      	bne.n	800ac9c <_svfiprintf_r+0x68>
 800ac9a:	e0ae      	b.n	800adfa <_svfiprintf_r+0x1c6>
 800ac9c:	6962      	ldr	r2, [r4, #20]
 800ac9e:	9b05      	ldr	r3, [sp, #20]
 800aca0:	4694      	mov	ip, r2
 800aca2:	4463      	add	r3, ip
 800aca4:	6163      	str	r3, [r4, #20]
 800aca6:	782b      	ldrb	r3, [r5, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d100      	bne.n	800acae <_svfiprintf_r+0x7a>
 800acac:	e0a5      	b.n	800adfa <_svfiprintf_r+0x1c6>
 800acae:	2201      	movs	r2, #1
 800acb0:	2300      	movs	r3, #0
 800acb2:	4252      	negs	r2, r2
 800acb4:	6062      	str	r2, [r4, #4]
 800acb6:	a904      	add	r1, sp, #16
 800acb8:	3254      	adds	r2, #84	; 0x54
 800acba:	1852      	adds	r2, r2, r1
 800acbc:	1c6e      	adds	r6, r5, #1
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	60e3      	str	r3, [r4, #12]
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	7013      	strb	r3, [r2, #0]
 800acc6:	65a3      	str	r3, [r4, #88]	; 0x58
 800acc8:	7831      	ldrb	r1, [r6, #0]
 800acca:	2205      	movs	r2, #5
 800accc:	4853      	ldr	r0, [pc, #332]	; (800ae1c <_svfiprintf_r+0x1e8>)
 800acce:	f7ff fa97 	bl	800a200 <memchr>
 800acd2:	1c75      	adds	r5, r6, #1
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d11f      	bne.n	800ad18 <_svfiprintf_r+0xe4>
 800acd8:	6822      	ldr	r2, [r4, #0]
 800acda:	06d3      	lsls	r3, r2, #27
 800acdc:	d504      	bpl.n	800ace8 <_svfiprintf_r+0xb4>
 800acde:	2353      	movs	r3, #83	; 0x53
 800ace0:	a904      	add	r1, sp, #16
 800ace2:	185b      	adds	r3, r3, r1
 800ace4:	2120      	movs	r1, #32
 800ace6:	7019      	strb	r1, [r3, #0]
 800ace8:	0713      	lsls	r3, r2, #28
 800acea:	d504      	bpl.n	800acf6 <_svfiprintf_r+0xc2>
 800acec:	2353      	movs	r3, #83	; 0x53
 800acee:	a904      	add	r1, sp, #16
 800acf0:	185b      	adds	r3, r3, r1
 800acf2:	212b      	movs	r1, #43	; 0x2b
 800acf4:	7019      	strb	r1, [r3, #0]
 800acf6:	7833      	ldrb	r3, [r6, #0]
 800acf8:	2b2a      	cmp	r3, #42	; 0x2a
 800acfa:	d016      	beq.n	800ad2a <_svfiprintf_r+0xf6>
 800acfc:	0035      	movs	r5, r6
 800acfe:	2100      	movs	r1, #0
 800ad00:	200a      	movs	r0, #10
 800ad02:	68e3      	ldr	r3, [r4, #12]
 800ad04:	782a      	ldrb	r2, [r5, #0]
 800ad06:	1c6e      	adds	r6, r5, #1
 800ad08:	3a30      	subs	r2, #48	; 0x30
 800ad0a:	2a09      	cmp	r2, #9
 800ad0c:	d94e      	bls.n	800adac <_svfiprintf_r+0x178>
 800ad0e:	2900      	cmp	r1, #0
 800ad10:	d018      	beq.n	800ad44 <_svfiprintf_r+0x110>
 800ad12:	e010      	b.n	800ad36 <_svfiprintf_r+0x102>
 800ad14:	3501      	adds	r5, #1
 800ad16:	e7b1      	b.n	800ac7c <_svfiprintf_r+0x48>
 800ad18:	4b40      	ldr	r3, [pc, #256]	; (800ae1c <_svfiprintf_r+0x1e8>)
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	1ac0      	subs	r0, r0, r3
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4083      	lsls	r3, r0
 800ad22:	4313      	orrs	r3, r2
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	002e      	movs	r6, r5
 800ad28:	e7ce      	b.n	800acc8 <_svfiprintf_r+0x94>
 800ad2a:	9b07      	ldr	r3, [sp, #28]
 800ad2c:	1d19      	adds	r1, r3, #4
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	9107      	str	r1, [sp, #28]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	db01      	blt.n	800ad3a <_svfiprintf_r+0x106>
 800ad36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad38:	e004      	b.n	800ad44 <_svfiprintf_r+0x110>
 800ad3a:	425b      	negs	r3, r3
 800ad3c:	60e3      	str	r3, [r4, #12]
 800ad3e:	2302      	movs	r3, #2
 800ad40:	4313      	orrs	r3, r2
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	782b      	ldrb	r3, [r5, #0]
 800ad46:	2b2e      	cmp	r3, #46	; 0x2e
 800ad48:	d10a      	bne.n	800ad60 <_svfiprintf_r+0x12c>
 800ad4a:	786b      	ldrb	r3, [r5, #1]
 800ad4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad4e:	d135      	bne.n	800adbc <_svfiprintf_r+0x188>
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	3502      	adds	r5, #2
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	9207      	str	r2, [sp, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	db2b      	blt.n	800adb6 <_svfiprintf_r+0x182>
 800ad5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad60:	4e2f      	ldr	r6, [pc, #188]	; (800ae20 <_svfiprintf_r+0x1ec>)
 800ad62:	7829      	ldrb	r1, [r5, #0]
 800ad64:	2203      	movs	r2, #3
 800ad66:	0030      	movs	r0, r6
 800ad68:	f7ff fa4a 	bl	800a200 <memchr>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d006      	beq.n	800ad7e <_svfiprintf_r+0x14a>
 800ad70:	2340      	movs	r3, #64	; 0x40
 800ad72:	1b80      	subs	r0, r0, r6
 800ad74:	4083      	lsls	r3, r0
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	3501      	adds	r5, #1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	7829      	ldrb	r1, [r5, #0]
 800ad80:	2206      	movs	r2, #6
 800ad82:	4828      	ldr	r0, [pc, #160]	; (800ae24 <_svfiprintf_r+0x1f0>)
 800ad84:	1c6e      	adds	r6, r5, #1
 800ad86:	7621      	strb	r1, [r4, #24]
 800ad88:	f7ff fa3a 	bl	800a200 <memchr>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d03c      	beq.n	800ae0a <_svfiprintf_r+0x1d6>
 800ad90:	4b25      	ldr	r3, [pc, #148]	; (800ae28 <_svfiprintf_r+0x1f4>)
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d125      	bne.n	800ade2 <_svfiprintf_r+0x1ae>
 800ad96:	2207      	movs	r2, #7
 800ad98:	9b07      	ldr	r3, [sp, #28]
 800ad9a:	3307      	adds	r3, #7
 800ad9c:	4393      	bics	r3, r2
 800ad9e:	3308      	adds	r3, #8
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	6963      	ldr	r3, [r4, #20]
 800ada4:	9a04      	ldr	r2, [sp, #16]
 800ada6:	189b      	adds	r3, r3, r2
 800ada8:	6163      	str	r3, [r4, #20]
 800adaa:	e766      	b.n	800ac7a <_svfiprintf_r+0x46>
 800adac:	4343      	muls	r3, r0
 800adae:	2101      	movs	r1, #1
 800adb0:	189b      	adds	r3, r3, r2
 800adb2:	0035      	movs	r5, r6
 800adb4:	e7a6      	b.n	800ad04 <_svfiprintf_r+0xd0>
 800adb6:	2301      	movs	r3, #1
 800adb8:	425b      	negs	r3, r3
 800adba:	e7d0      	b.n	800ad5e <_svfiprintf_r+0x12a>
 800adbc:	2300      	movs	r3, #0
 800adbe:	200a      	movs	r0, #10
 800adc0:	001a      	movs	r2, r3
 800adc2:	3501      	adds	r5, #1
 800adc4:	6063      	str	r3, [r4, #4]
 800adc6:	7829      	ldrb	r1, [r5, #0]
 800adc8:	1c6e      	adds	r6, r5, #1
 800adca:	3930      	subs	r1, #48	; 0x30
 800adcc:	2909      	cmp	r1, #9
 800adce:	d903      	bls.n	800add8 <_svfiprintf_r+0x1a4>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0c5      	beq.n	800ad60 <_svfiprintf_r+0x12c>
 800add4:	9209      	str	r2, [sp, #36]	; 0x24
 800add6:	e7c3      	b.n	800ad60 <_svfiprintf_r+0x12c>
 800add8:	4342      	muls	r2, r0
 800adda:	2301      	movs	r3, #1
 800addc:	1852      	adds	r2, r2, r1
 800adde:	0035      	movs	r5, r6
 800ade0:	e7f1      	b.n	800adc6 <_svfiprintf_r+0x192>
 800ade2:	ab07      	add	r3, sp, #28
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	003a      	movs	r2, r7
 800ade8:	4b10      	ldr	r3, [pc, #64]	; (800ae2c <_svfiprintf_r+0x1f8>)
 800adea:	0021      	movs	r1, r4
 800adec:	9803      	ldr	r0, [sp, #12]
 800adee:	f7fc fb4d 	bl	800748c <_printf_float>
 800adf2:	9004      	str	r0, [sp, #16]
 800adf4:	9b04      	ldr	r3, [sp, #16]
 800adf6:	3301      	adds	r3, #1
 800adf8:	d1d3      	bne.n	800ada2 <_svfiprintf_r+0x16e>
 800adfa:	89bb      	ldrh	r3, [r7, #12]
 800adfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adfe:	065b      	lsls	r3, r3, #25
 800ae00:	d400      	bmi.n	800ae04 <_svfiprintf_r+0x1d0>
 800ae02:	e72e      	b.n	800ac62 <_svfiprintf_r+0x2e>
 800ae04:	2001      	movs	r0, #1
 800ae06:	4240      	negs	r0, r0
 800ae08:	e72b      	b.n	800ac62 <_svfiprintf_r+0x2e>
 800ae0a:	ab07      	add	r3, sp, #28
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	003a      	movs	r2, r7
 800ae10:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <_svfiprintf_r+0x1f8>)
 800ae12:	0021      	movs	r1, r4
 800ae14:	9803      	ldr	r0, [sp, #12]
 800ae16:	f7fc fdf3 	bl	8007a00 <_printf_i>
 800ae1a:	e7ea      	b.n	800adf2 <_svfiprintf_r+0x1be>
 800ae1c:	0800b4fc 	.word	0x0800b4fc
 800ae20:	0800b502 	.word	0x0800b502
 800ae24:	0800b506 	.word	0x0800b506
 800ae28:	0800748d 	.word	0x0800748d
 800ae2c:	0800ab71 	.word	0x0800ab71

0800ae30 <_sbrk_r>:
 800ae30:	2300      	movs	r3, #0
 800ae32:	b570      	push	{r4, r5, r6, lr}
 800ae34:	4c06      	ldr	r4, [pc, #24]	; (800ae50 <_sbrk_r+0x20>)
 800ae36:	0005      	movs	r5, r0
 800ae38:	0008      	movs	r0, r1
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	f7f7 ffee 	bl	8002e1c <_sbrk>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d103      	bne.n	800ae4c <_sbrk_r+0x1c>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d000      	beq.n	800ae4c <_sbrk_r+0x1c>
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	46c0      	nop			; (mov r8, r8)
 800ae50:	20000df8 	.word	0x20000df8

0800ae54 <strncmp>:
 800ae54:	2300      	movs	r3, #0
 800ae56:	b530      	push	{r4, r5, lr}
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d00a      	beq.n	800ae72 <strncmp+0x1e>
 800ae5c:	3a01      	subs	r2, #1
 800ae5e:	5cc4      	ldrb	r4, [r0, r3]
 800ae60:	5ccd      	ldrb	r5, [r1, r3]
 800ae62:	42ac      	cmp	r4, r5
 800ae64:	d104      	bne.n	800ae70 <strncmp+0x1c>
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d002      	beq.n	800ae70 <strncmp+0x1c>
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d1f6      	bne.n	800ae5e <strncmp+0xa>
 800ae70:	1b63      	subs	r3, r4, r5
 800ae72:	0018      	movs	r0, r3
 800ae74:	bd30      	pop	{r4, r5, pc}

0800ae76 <__ascii_wctomb>:
 800ae76:	1e0b      	subs	r3, r1, #0
 800ae78:	d004      	beq.n	800ae84 <__ascii_wctomb+0xe>
 800ae7a:	2aff      	cmp	r2, #255	; 0xff
 800ae7c:	d904      	bls.n	800ae88 <__ascii_wctomb+0x12>
 800ae7e:	238a      	movs	r3, #138	; 0x8a
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	3b8b      	subs	r3, #139	; 0x8b
 800ae84:	0018      	movs	r0, r3
 800ae86:	4770      	bx	lr
 800ae88:	700a      	strb	r2, [r1, #0]
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e7fa      	b.n	800ae84 <__ascii_wctomb+0xe>

0800ae8e <memmove>:
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	4288      	cmp	r0, r1
 800ae92:	d902      	bls.n	800ae9a <memmove+0xc>
 800ae94:	188b      	adds	r3, r1, r2
 800ae96:	4298      	cmp	r0, r3
 800ae98:	d303      	bcc.n	800aea2 <memmove+0x14>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e007      	b.n	800aeae <memmove+0x20>
 800ae9e:	5c8b      	ldrb	r3, [r1, r2]
 800aea0:	5483      	strb	r3, [r0, r2]
 800aea2:	3a01      	subs	r2, #1
 800aea4:	d2fb      	bcs.n	800ae9e <memmove+0x10>
 800aea6:	bd10      	pop	{r4, pc}
 800aea8:	5ccc      	ldrb	r4, [r1, r3]
 800aeaa:	54c4      	strb	r4, [r0, r3]
 800aeac:	3301      	adds	r3, #1
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d1fa      	bne.n	800aea8 <memmove+0x1a>
 800aeb2:	e7f8      	b.n	800aea6 <memmove+0x18>

0800aeb4 <__malloc_lock>:
 800aeb4:	4770      	bx	lr

0800aeb6 <__malloc_unlock>:
 800aeb6:	4770      	bx	lr

0800aeb8 <_realloc_r>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	0007      	movs	r7, r0
 800aebc:	000d      	movs	r5, r1
 800aebe:	0016      	movs	r6, r2
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d105      	bne.n	800aed0 <_realloc_r+0x18>
 800aec4:	0011      	movs	r1, r2
 800aec6:	f7ff fdf5 	bl	800aab4 <_malloc_r>
 800aeca:	0004      	movs	r4, r0
 800aecc:	0020      	movs	r0, r4
 800aece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	d103      	bne.n	800aedc <_realloc_r+0x24>
 800aed4:	f7ff fda4 	bl	800aa20 <_free_r>
 800aed8:	0034      	movs	r4, r6
 800aeda:	e7f7      	b.n	800aecc <_realloc_r+0x14>
 800aedc:	f000 f812 	bl	800af04 <_malloc_usable_size_r>
 800aee0:	002c      	movs	r4, r5
 800aee2:	42b0      	cmp	r0, r6
 800aee4:	d2f2      	bcs.n	800aecc <_realloc_r+0x14>
 800aee6:	0031      	movs	r1, r6
 800aee8:	0038      	movs	r0, r7
 800aeea:	f7ff fde3 	bl	800aab4 <_malloc_r>
 800aeee:	1e04      	subs	r4, r0, #0
 800aef0:	d0ec      	beq.n	800aecc <_realloc_r+0x14>
 800aef2:	0029      	movs	r1, r5
 800aef4:	0032      	movs	r2, r6
 800aef6:	f7fc fa1b 	bl	8007330 <memcpy>
 800aefa:	0029      	movs	r1, r5
 800aefc:	0038      	movs	r0, r7
 800aefe:	f7ff fd8f 	bl	800aa20 <_free_r>
 800af02:	e7e3      	b.n	800aecc <_realloc_r+0x14>

0800af04 <_malloc_usable_size_r>:
 800af04:	1f0b      	subs	r3, r1, #4
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	1f18      	subs	r0, r3, #4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da01      	bge.n	800af12 <_malloc_usable_size_r+0xe>
 800af0e:	580b      	ldr	r3, [r1, r0]
 800af10:	18c0      	adds	r0, r0, r3
 800af12:	4770      	bx	lr

0800af14 <_init>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1a:	bc08      	pop	{r3}
 800af1c:	469e      	mov	lr, r3
 800af1e:	4770      	bx	lr

0800af20 <_fini>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af26:	bc08      	pop	{r3}
 800af28:	469e      	mov	lr, r3
 800af2a:	4770      	bx	lr
