
PSUControllerF072_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2ec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800d3b0  0800d3b0  0001d3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da88  0800da88  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800da88  0800da88  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da88  0800da88  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da8c  0800da8c  0001da8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800da90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002088  200001ec  0800dc7c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002274  0800dc7c  00022274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab70  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fc8  00000000  00000000  0003ad84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  0003ed50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b69c  00000000  00000000  00041718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015687  00000000  00000000  0005cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cbb1  00000000  00000000  0007243b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fefec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  000ff068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d394 	.word	0x0800d394

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800d394 	.word	0x0800d394

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff4f 	bl	80012cc <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fea7 	bl	800118c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff41 	bl	80012cc <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff37 	bl	80012cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fec9 	bl	8001204 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 febf 	bl	8001204 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f7ff ffef 	bl	8000480 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 fd4d 	bl	8001f48 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 f9e2 	bl	8001880 <__aeabi_dsub>
 80004bc:	f001 fd44 	bl	8001f48 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_ui2f>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	1e04      	subs	r4, r0, #0
 80004d4:	d034      	beq.n	8000540 <__aeabi_ui2f+0x70>
 80004d6:	f001 feaf 	bl	8002238 <__clzsi2>
 80004da:	229e      	movs	r2, #158	; 0x9e
 80004dc:	1a12      	subs	r2, r2, r0
 80004de:	2a96      	cmp	r2, #150	; 0x96
 80004e0:	dc07      	bgt.n	80004f2 <__aeabi_ui2f+0x22>
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	2808      	cmp	r0, #8
 80004e6:	dd2e      	ble.n	8000546 <__aeabi_ui2f+0x76>
 80004e8:	3808      	subs	r0, #8
 80004ea:	4084      	lsls	r4, r0
 80004ec:	0260      	lsls	r0, r4, #9
 80004ee:	0a40      	lsrs	r0, r0, #9
 80004f0:	e021      	b.n	8000536 <__aeabi_ui2f+0x66>
 80004f2:	2a99      	cmp	r2, #153	; 0x99
 80004f4:	dd09      	ble.n	800050a <__aeabi_ui2f+0x3a>
 80004f6:	0003      	movs	r3, r0
 80004f8:	0021      	movs	r1, r4
 80004fa:	331b      	adds	r3, #27
 80004fc:	4099      	lsls	r1, r3
 80004fe:	1e4b      	subs	r3, r1, #1
 8000500:	4199      	sbcs	r1, r3
 8000502:	2305      	movs	r3, #5
 8000504:	1a1b      	subs	r3, r3, r0
 8000506:	40dc      	lsrs	r4, r3
 8000508:	430c      	orrs	r4, r1
 800050a:	2805      	cmp	r0, #5
 800050c:	dd01      	ble.n	8000512 <__aeabi_ui2f+0x42>
 800050e:	1f43      	subs	r3, r0, #5
 8000510:	409c      	lsls	r4, r3
 8000512:	0023      	movs	r3, r4
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <__aeabi_ui2f+0x7c>)
 8000516:	400b      	ands	r3, r1
 8000518:	0765      	lsls	r5, r4, #29
 800051a:	d009      	beq.n	8000530 <__aeabi_ui2f+0x60>
 800051c:	250f      	movs	r5, #15
 800051e:	402c      	ands	r4, r5
 8000520:	2c04      	cmp	r4, #4
 8000522:	d005      	beq.n	8000530 <__aeabi_ui2f+0x60>
 8000524:	3304      	adds	r3, #4
 8000526:	015c      	lsls	r4, r3, #5
 8000528:	d502      	bpl.n	8000530 <__aeabi_ui2f+0x60>
 800052a:	229f      	movs	r2, #159	; 0x9f
 800052c:	400b      	ands	r3, r1
 800052e:	1a12      	subs	r2, r2, r0
 8000530:	019b      	lsls	r3, r3, #6
 8000532:	0a58      	lsrs	r0, r3, #9
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	05d2      	lsls	r2, r2, #23
 800053a:	0a40      	lsrs	r0, r0, #9
 800053c:	4310      	orrs	r0, r2
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	2200      	movs	r2, #0
 8000542:	2000      	movs	r0, #0
 8000544:	e7f7      	b.n	8000536 <__aeabi_ui2f+0x66>
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0a40      	lsrs	r0, r0, #9
 800054a:	e7f4      	b.n	8000536 <__aeabi_ui2f+0x66>
 800054c:	fbffffff 	.word	0xfbffffff

08000550 <__aeabi_dadd>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	464f      	mov	r7, r9
 8000554:	4646      	mov	r6, r8
 8000556:	46d6      	mov	lr, sl
 8000558:	000c      	movs	r4, r1
 800055a:	0309      	lsls	r1, r1, #12
 800055c:	b5c0      	push	{r6, r7, lr}
 800055e:	0a49      	lsrs	r1, r1, #9
 8000560:	0f47      	lsrs	r7, r0, #29
 8000562:	005e      	lsls	r6, r3, #1
 8000564:	4339      	orrs	r1, r7
 8000566:	031f      	lsls	r7, r3, #12
 8000568:	0fdb      	lsrs	r3, r3, #31
 800056a:	469c      	mov	ip, r3
 800056c:	0065      	lsls	r5, r4, #1
 800056e:	0a7b      	lsrs	r3, r7, #9
 8000570:	0f57      	lsrs	r7, r2, #29
 8000572:	431f      	orrs	r7, r3
 8000574:	0d6d      	lsrs	r5, r5, #21
 8000576:	0fe4      	lsrs	r4, r4, #31
 8000578:	0d76      	lsrs	r6, r6, #21
 800057a:	46a1      	mov	r9, r4
 800057c:	00c0      	lsls	r0, r0, #3
 800057e:	46b8      	mov	r8, r7
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	1bab      	subs	r3, r5, r6
 8000584:	4564      	cmp	r4, ip
 8000586:	d07b      	beq.n	8000680 <__aeabi_dadd+0x130>
 8000588:	2b00      	cmp	r3, #0
 800058a:	dd5f      	ble.n	800064c <__aeabi_dadd+0xfc>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d000      	beq.n	8000592 <__aeabi_dadd+0x42>
 8000590:	e0a4      	b.n	80006dc <__aeabi_dadd+0x18c>
 8000592:	003e      	movs	r6, r7
 8000594:	4316      	orrs	r6, r2
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x4a>
 8000598:	e112      	b.n	80007c0 <__aeabi_dadd+0x270>
 800059a:	1e5e      	subs	r6, r3, #1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d000      	beq.n	80005a2 <__aeabi_dadd+0x52>
 80005a0:	e19e      	b.n	80008e0 <__aeabi_dadd+0x390>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	4180      	sbcs	r0, r0
 80005aa:	2501      	movs	r5, #1
 80005ac:	1ac9      	subs	r1, r1, r3
 80005ae:	4240      	negs	r0, r0
 80005b0:	1a09      	subs	r1, r1, r0
 80005b2:	020b      	lsls	r3, r1, #8
 80005b4:	d400      	bmi.n	80005b8 <__aeabi_dadd+0x68>
 80005b6:	e131      	b.n	800081c <__aeabi_dadd+0x2cc>
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	0a4e      	lsrs	r6, r1, #9
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0x72>
 80005c0:	e16e      	b.n	80008a0 <__aeabi_dadd+0x350>
 80005c2:	0030      	movs	r0, r6
 80005c4:	f001 fe38 	bl	8002238 <__clzsi2>
 80005c8:	0003      	movs	r3, r0
 80005ca:	3b08      	subs	r3, #8
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_dadd+0x82>
 80005d0:	e161      	b.n	8000896 <__aeabi_dadd+0x346>
 80005d2:	2220      	movs	r2, #32
 80005d4:	0039      	movs	r1, r7
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	409e      	lsls	r6, r3
 80005da:	40d1      	lsrs	r1, r2
 80005dc:	409f      	lsls	r7, r3
 80005de:	430e      	orrs	r6, r1
 80005e0:	429d      	cmp	r5, r3
 80005e2:	dd00      	ble.n	80005e6 <__aeabi_dadd+0x96>
 80005e4:	e151      	b.n	800088a <__aeabi_dadd+0x33a>
 80005e6:	1b5d      	subs	r5, r3, r5
 80005e8:	1c6b      	adds	r3, r5, #1
 80005ea:	2b1f      	cmp	r3, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0xa0>
 80005ee:	e17c      	b.n	80008ea <__aeabi_dadd+0x39a>
 80005f0:	2120      	movs	r1, #32
 80005f2:	1ac9      	subs	r1, r1, r3
 80005f4:	003d      	movs	r5, r7
 80005f6:	0030      	movs	r0, r6
 80005f8:	408f      	lsls	r7, r1
 80005fa:	4088      	lsls	r0, r1
 80005fc:	40dd      	lsrs	r5, r3
 80005fe:	1e79      	subs	r1, r7, #1
 8000600:	418f      	sbcs	r7, r1
 8000602:	0031      	movs	r1, r6
 8000604:	2207      	movs	r2, #7
 8000606:	4328      	orrs	r0, r5
 8000608:	40d9      	lsrs	r1, r3
 800060a:	2500      	movs	r5, #0
 800060c:	4307      	orrs	r7, r0
 800060e:	403a      	ands	r2, r7
 8000610:	2a00      	cmp	r2, #0
 8000612:	d009      	beq.n	8000628 <__aeabi_dadd+0xd8>
 8000614:	230f      	movs	r3, #15
 8000616:	403b      	ands	r3, r7
 8000618:	2b04      	cmp	r3, #4
 800061a:	d005      	beq.n	8000628 <__aeabi_dadd+0xd8>
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	42bb      	cmp	r3, r7
 8000620:	41bf      	sbcs	r7, r7
 8000622:	427f      	negs	r7, r7
 8000624:	19c9      	adds	r1, r1, r7
 8000626:	001f      	movs	r7, r3
 8000628:	020b      	lsls	r3, r1, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0xde>
 800062c:	e226      	b.n	8000a7c <__aeabi_dadd+0x52c>
 800062e:	1c6a      	adds	r2, r5, #1
 8000630:	4bc6      	ldr	r3, [pc, #792]	; (800094c <__aeabi_dadd+0x3fc>)
 8000632:	0555      	lsls	r5, r2, #21
 8000634:	0d6d      	lsrs	r5, r5, #21
 8000636:	429a      	cmp	r2, r3
 8000638:	d100      	bne.n	800063c <__aeabi_dadd+0xec>
 800063a:	e106      	b.n	800084a <__aeabi_dadd+0x2fa>
 800063c:	4ac4      	ldr	r2, [pc, #784]	; (8000950 <__aeabi_dadd+0x400>)
 800063e:	08ff      	lsrs	r7, r7, #3
 8000640:	400a      	ands	r2, r1
 8000642:	0753      	lsls	r3, r2, #29
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	433b      	orrs	r3, r7
 8000648:	0b12      	lsrs	r2, r2, #12
 800064a:	e08e      	b.n	800076a <__aeabi_dadd+0x21a>
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_dadd+0x102>
 8000650:	e0b8      	b.n	80007c4 <__aeabi_dadd+0x274>
 8000652:	1c6b      	adds	r3, r5, #1
 8000654:	055b      	lsls	r3, r3, #21
 8000656:	0d5b      	lsrs	r3, r3, #21
 8000658:	2b01      	cmp	r3, #1
 800065a:	dc00      	bgt.n	800065e <__aeabi_dadd+0x10e>
 800065c:	e130      	b.n	80008c0 <__aeabi_dadd+0x370>
 800065e:	1a87      	subs	r7, r0, r2
 8000660:	4643      	mov	r3, r8
 8000662:	42b8      	cmp	r0, r7
 8000664:	41b6      	sbcs	r6, r6
 8000666:	1acb      	subs	r3, r1, r3
 8000668:	4276      	negs	r6, r6
 800066a:	1b9e      	subs	r6, r3, r6
 800066c:	0233      	lsls	r3, r6, #8
 800066e:	d500      	bpl.n	8000672 <__aeabi_dadd+0x122>
 8000670:	e14c      	b.n	800090c <__aeabi_dadd+0x3bc>
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	d1a1      	bne.n	80005bc <__aeabi_dadd+0x6c>
 8000678:	2200      	movs	r2, #0
 800067a:	2400      	movs	r4, #0
 800067c:	2500      	movs	r5, #0
 800067e:	e070      	b.n	8000762 <__aeabi_dadd+0x212>
 8000680:	2b00      	cmp	r3, #0
 8000682:	dc00      	bgt.n	8000686 <__aeabi_dadd+0x136>
 8000684:	e0e5      	b.n	8000852 <__aeabi_dadd+0x302>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x13c>
 800068a:	e083      	b.n	8000794 <__aeabi_dadd+0x244>
 800068c:	4eaf      	ldr	r6, [pc, #700]	; (800094c <__aeabi_dadd+0x3fc>)
 800068e:	42b5      	cmp	r5, r6
 8000690:	d060      	beq.n	8000754 <__aeabi_dadd+0x204>
 8000692:	2680      	movs	r6, #128	; 0x80
 8000694:	0436      	lsls	r6, r6, #16
 8000696:	4337      	orrs	r7, r6
 8000698:	46b8      	mov	r8, r7
 800069a:	2b38      	cmp	r3, #56	; 0x38
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_dadd+0x150>
 800069e:	e13e      	b.n	800091e <__aeabi_dadd+0x3ce>
 80006a0:	4643      	mov	r3, r8
 80006a2:	4313      	orrs	r3, r2
 80006a4:	001f      	movs	r7, r3
 80006a6:	1e7a      	subs	r2, r7, #1
 80006a8:	4197      	sbcs	r7, r2
 80006aa:	183f      	adds	r7, r7, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	4180      	sbcs	r0, r0
 80006b0:	4240      	negs	r0, r0
 80006b2:	1809      	adds	r1, r1, r0
 80006b4:	020b      	lsls	r3, r1, #8
 80006b6:	d400      	bmi.n	80006ba <__aeabi_dadd+0x16a>
 80006b8:	e0b0      	b.n	800081c <__aeabi_dadd+0x2cc>
 80006ba:	4ba4      	ldr	r3, [pc, #656]	; (800094c <__aeabi_dadd+0x3fc>)
 80006bc:	3501      	adds	r5, #1
 80006be:	429d      	cmp	r5, r3
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x174>
 80006c2:	e0c3      	b.n	800084c <__aeabi_dadd+0x2fc>
 80006c4:	4aa2      	ldr	r2, [pc, #648]	; (8000950 <__aeabi_dadd+0x400>)
 80006c6:	087b      	lsrs	r3, r7, #1
 80006c8:	400a      	ands	r2, r1
 80006ca:	2101      	movs	r1, #1
 80006cc:	400f      	ands	r7, r1
 80006ce:	431f      	orrs	r7, r3
 80006d0:	0851      	lsrs	r1, r2, #1
 80006d2:	07d3      	lsls	r3, r2, #31
 80006d4:	2207      	movs	r2, #7
 80006d6:	431f      	orrs	r7, r3
 80006d8:	403a      	ands	r2, r7
 80006da:	e799      	b.n	8000610 <__aeabi_dadd+0xc0>
 80006dc:	4e9b      	ldr	r6, [pc, #620]	; (800094c <__aeabi_dadd+0x3fc>)
 80006de:	42b5      	cmp	r5, r6
 80006e0:	d038      	beq.n	8000754 <__aeabi_dadd+0x204>
 80006e2:	2680      	movs	r6, #128	; 0x80
 80006e4:	0436      	lsls	r6, r6, #16
 80006e6:	4337      	orrs	r7, r6
 80006e8:	46b8      	mov	r8, r7
 80006ea:	2b38      	cmp	r3, #56	; 0x38
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x1a0>
 80006ee:	e0dc      	b.n	80008aa <__aeabi_dadd+0x35a>
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_dadd+0x1a6>
 80006f4:	e130      	b.n	8000958 <__aeabi_dadd+0x408>
 80006f6:	001e      	movs	r6, r3
 80006f8:	4647      	mov	r7, r8
 80006fa:	3e20      	subs	r6, #32
 80006fc:	40f7      	lsrs	r7, r6
 80006fe:	46bc      	mov	ip, r7
 8000700:	2b20      	cmp	r3, #32
 8000702:	d004      	beq.n	800070e <__aeabi_dadd+0x1be>
 8000704:	2640      	movs	r6, #64	; 0x40
 8000706:	1af3      	subs	r3, r6, r3
 8000708:	4646      	mov	r6, r8
 800070a:	409e      	lsls	r6, r3
 800070c:	4332      	orrs	r2, r6
 800070e:	0017      	movs	r7, r2
 8000710:	4663      	mov	r3, ip
 8000712:	1e7a      	subs	r2, r7, #1
 8000714:	4197      	sbcs	r7, r2
 8000716:	431f      	orrs	r7, r3
 8000718:	e0cc      	b.n	80008b4 <__aeabi_dadd+0x364>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x1d0>
 800071e:	e204      	b.n	8000b2a <__aeabi_dadd+0x5da>
 8000720:	4643      	mov	r3, r8
 8000722:	4313      	orrs	r3, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x1d8>
 8000726:	e159      	b.n	80009dc <__aeabi_dadd+0x48c>
 8000728:	074b      	lsls	r3, r1, #29
 800072a:	08c0      	lsrs	r0, r0, #3
 800072c:	4318      	orrs	r0, r3
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	08c9      	lsrs	r1, r1, #3
 8000732:	031b      	lsls	r3, r3, #12
 8000734:	4219      	tst	r1, r3
 8000736:	d008      	beq.n	800074a <__aeabi_dadd+0x1fa>
 8000738:	4645      	mov	r5, r8
 800073a:	08ed      	lsrs	r5, r5, #3
 800073c:	421d      	tst	r5, r3
 800073e:	d104      	bne.n	800074a <__aeabi_dadd+0x1fa>
 8000740:	4643      	mov	r3, r8
 8000742:	08d0      	lsrs	r0, r2, #3
 8000744:	0759      	lsls	r1, r3, #29
 8000746:	4308      	orrs	r0, r1
 8000748:	0029      	movs	r1, r5
 800074a:	0f42      	lsrs	r2, r0, #29
 800074c:	00c9      	lsls	r1, r1, #3
 800074e:	4d7f      	ldr	r5, [pc, #508]	; (800094c <__aeabi_dadd+0x3fc>)
 8000750:	4311      	orrs	r1, r2
 8000752:	00c0      	lsls	r0, r0, #3
 8000754:	074b      	lsls	r3, r1, #29
 8000756:	08ca      	lsrs	r2, r1, #3
 8000758:	497c      	ldr	r1, [pc, #496]	; (800094c <__aeabi_dadd+0x3fc>)
 800075a:	08c0      	lsrs	r0, r0, #3
 800075c:	4303      	orrs	r3, r0
 800075e:	428d      	cmp	r5, r1
 8000760:	d068      	beq.n	8000834 <__aeabi_dadd+0x2e4>
 8000762:	0312      	lsls	r2, r2, #12
 8000764:	056d      	lsls	r5, r5, #21
 8000766:	0b12      	lsrs	r2, r2, #12
 8000768:	0d6d      	lsrs	r5, r5, #21
 800076a:	2100      	movs	r1, #0
 800076c:	0312      	lsls	r2, r2, #12
 800076e:	0018      	movs	r0, r3
 8000770:	0b13      	lsrs	r3, r2, #12
 8000772:	0d0a      	lsrs	r2, r1, #20
 8000774:	0512      	lsls	r2, r2, #20
 8000776:	431a      	orrs	r2, r3
 8000778:	4b76      	ldr	r3, [pc, #472]	; (8000954 <__aeabi_dadd+0x404>)
 800077a:	052d      	lsls	r5, r5, #20
 800077c:	4013      	ands	r3, r2
 800077e:	432b      	orrs	r3, r5
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	07e4      	lsls	r4, r4, #31
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	4323      	orrs	r3, r4
 8000788:	0019      	movs	r1, r3
 800078a:	bc1c      	pop	{r2, r3, r4}
 800078c:	4690      	mov	r8, r2
 800078e:	4699      	mov	r9, r3
 8000790:	46a2      	mov	sl, r4
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	003e      	movs	r6, r7
 8000796:	4316      	orrs	r6, r2
 8000798:	d012      	beq.n	80007c0 <__aeabi_dadd+0x270>
 800079a:	1e5e      	subs	r6, r3, #1
 800079c:	2e00      	cmp	r6, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x252>
 80007a0:	e100      	b.n	80009a4 <__aeabi_dadd+0x454>
 80007a2:	1887      	adds	r7, r0, r2
 80007a4:	4287      	cmp	r7, r0
 80007a6:	4180      	sbcs	r0, r0
 80007a8:	4441      	add	r1, r8
 80007aa:	4240      	negs	r0, r0
 80007ac:	1809      	adds	r1, r1, r0
 80007ae:	2501      	movs	r5, #1
 80007b0:	020b      	lsls	r3, r1, #8
 80007b2:	d533      	bpl.n	800081c <__aeabi_dadd+0x2cc>
 80007b4:	2502      	movs	r5, #2
 80007b6:	e785      	b.n	80006c4 <__aeabi_dadd+0x174>
 80007b8:	4664      	mov	r4, ip
 80007ba:	0033      	movs	r3, r6
 80007bc:	4641      	mov	r1, r8
 80007be:	0010      	movs	r0, r2
 80007c0:	001d      	movs	r5, r3
 80007c2:	e7c7      	b.n	8000754 <__aeabi_dadd+0x204>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x27a>
 80007c8:	e0da      	b.n	8000980 <__aeabi_dadd+0x430>
 80007ca:	000c      	movs	r4, r1
 80007cc:	4304      	orrs	r4, r0
 80007ce:	d0f3      	beq.n	80007b8 <__aeabi_dadd+0x268>
 80007d0:	1c5c      	adds	r4, r3, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x286>
 80007d4:	e19f      	b.n	8000b16 <__aeabi_dadd+0x5c6>
 80007d6:	4c5d      	ldr	r4, [pc, #372]	; (800094c <__aeabi_dadd+0x3fc>)
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x28e>
 80007dc:	e12f      	b.n	8000a3e <__aeabi_dadd+0x4ee>
 80007de:	43db      	mvns	r3, r3
 80007e0:	2b38      	cmp	r3, #56	; 0x38
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x296>
 80007e4:	e166      	b.n	8000ab4 <__aeabi_dadd+0x564>
 80007e6:	2b1f      	cmp	r3, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x29c>
 80007ea:	e183      	b.n	8000af4 <__aeabi_dadd+0x5a4>
 80007ec:	2420      	movs	r4, #32
 80007ee:	0005      	movs	r5, r0
 80007f0:	1ae4      	subs	r4, r4, r3
 80007f2:	000f      	movs	r7, r1
 80007f4:	40dd      	lsrs	r5, r3
 80007f6:	40d9      	lsrs	r1, r3
 80007f8:	40a0      	lsls	r0, r4
 80007fa:	4643      	mov	r3, r8
 80007fc:	40a7      	lsls	r7, r4
 80007fe:	1a5b      	subs	r3, r3, r1
 8000800:	1e44      	subs	r4, r0, #1
 8000802:	41a0      	sbcs	r0, r4
 8000804:	4698      	mov	r8, r3
 8000806:	432f      	orrs	r7, r5
 8000808:	4338      	orrs	r0, r7
 800080a:	1a17      	subs	r7, r2, r0
 800080c:	42ba      	cmp	r2, r7
 800080e:	4192      	sbcs	r2, r2
 8000810:	4643      	mov	r3, r8
 8000812:	4252      	negs	r2, r2
 8000814:	1a99      	subs	r1, r3, r2
 8000816:	4664      	mov	r4, ip
 8000818:	0035      	movs	r5, r6
 800081a:	e6ca      	b.n	80005b2 <__aeabi_dadd+0x62>
 800081c:	2207      	movs	r2, #7
 800081e:	403a      	ands	r2, r7
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x2d6>
 8000824:	e6f6      	b.n	8000614 <__aeabi_dadd+0xc4>
 8000826:	074b      	lsls	r3, r1, #29
 8000828:	08ca      	lsrs	r2, r1, #3
 800082a:	4948      	ldr	r1, [pc, #288]	; (800094c <__aeabi_dadd+0x3fc>)
 800082c:	08ff      	lsrs	r7, r7, #3
 800082e:	433b      	orrs	r3, r7
 8000830:	428d      	cmp	r5, r1
 8000832:	d196      	bne.n	8000762 <__aeabi_dadd+0x212>
 8000834:	0019      	movs	r1, r3
 8000836:	4311      	orrs	r1, r2
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x2ec>
 800083a:	e19e      	b.n	8000b7a <__aeabi_dadd+0x62a>
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0309      	lsls	r1, r1, #12
 8000840:	430a      	orrs	r2, r1
 8000842:	0312      	lsls	r2, r2, #12
 8000844:	0b12      	lsrs	r2, r2, #12
 8000846:	4d41      	ldr	r5, [pc, #260]	; (800094c <__aeabi_dadd+0x3fc>)
 8000848:	e78f      	b.n	800076a <__aeabi_dadd+0x21a>
 800084a:	0015      	movs	r5, r2
 800084c:	2200      	movs	r2, #0
 800084e:	2300      	movs	r3, #0
 8000850:	e78b      	b.n	800076a <__aeabi_dadd+0x21a>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_dadd+0x308>
 8000856:	e0c7      	b.n	80009e8 <__aeabi_dadd+0x498>
 8000858:	1c6b      	adds	r3, r5, #1
 800085a:	055f      	lsls	r7, r3, #21
 800085c:	0d7f      	lsrs	r7, r7, #21
 800085e:	2f01      	cmp	r7, #1
 8000860:	dc00      	bgt.n	8000864 <__aeabi_dadd+0x314>
 8000862:	e0f1      	b.n	8000a48 <__aeabi_dadd+0x4f8>
 8000864:	4d39      	ldr	r5, [pc, #228]	; (800094c <__aeabi_dadd+0x3fc>)
 8000866:	42ab      	cmp	r3, r5
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x31c>
 800086a:	e0b9      	b.n	80009e0 <__aeabi_dadd+0x490>
 800086c:	1885      	adds	r5, r0, r2
 800086e:	000a      	movs	r2, r1
 8000870:	4285      	cmp	r5, r0
 8000872:	4189      	sbcs	r1, r1
 8000874:	4442      	add	r2, r8
 8000876:	4249      	negs	r1, r1
 8000878:	1851      	adds	r1, r2, r1
 800087a:	2207      	movs	r2, #7
 800087c:	07cf      	lsls	r7, r1, #31
 800087e:	086d      	lsrs	r5, r5, #1
 8000880:	432f      	orrs	r7, r5
 8000882:	0849      	lsrs	r1, r1, #1
 8000884:	403a      	ands	r2, r7
 8000886:	001d      	movs	r5, r3
 8000888:	e6c2      	b.n	8000610 <__aeabi_dadd+0xc0>
 800088a:	2207      	movs	r2, #7
 800088c:	4930      	ldr	r1, [pc, #192]	; (8000950 <__aeabi_dadd+0x400>)
 800088e:	1aed      	subs	r5, r5, r3
 8000890:	4031      	ands	r1, r6
 8000892:	403a      	ands	r2, r7
 8000894:	e6bc      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000896:	003e      	movs	r6, r7
 8000898:	3828      	subs	r0, #40	; 0x28
 800089a:	4086      	lsls	r6, r0
 800089c:	2700      	movs	r7, #0
 800089e:	e69f      	b.n	80005e0 <__aeabi_dadd+0x90>
 80008a0:	0038      	movs	r0, r7
 80008a2:	f001 fcc9 	bl	8002238 <__clzsi2>
 80008a6:	3020      	adds	r0, #32
 80008a8:	e68e      	b.n	80005c8 <__aeabi_dadd+0x78>
 80008aa:	4643      	mov	r3, r8
 80008ac:	4313      	orrs	r3, r2
 80008ae:	001f      	movs	r7, r3
 80008b0:	1e7a      	subs	r2, r7, #1
 80008b2:	4197      	sbcs	r7, r2
 80008b4:	1bc7      	subs	r7, r0, r7
 80008b6:	42b8      	cmp	r0, r7
 80008b8:	4180      	sbcs	r0, r0
 80008ba:	4240      	negs	r0, r0
 80008bc:	1a09      	subs	r1, r1, r0
 80008be:	e678      	b.n	80005b2 <__aeabi_dadd+0x62>
 80008c0:	000e      	movs	r6, r1
 80008c2:	003b      	movs	r3, r7
 80008c4:	4306      	orrs	r6, r0
 80008c6:	4313      	orrs	r3, r2
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d161      	bne.n	8000990 <__aeabi_dadd+0x440>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x382>
 80008d0:	e0f4      	b.n	8000abc <__aeabi_dadd+0x56c>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x388>
 80008d6:	e11b      	b.n	8000b10 <__aeabi_dadd+0x5c0>
 80008d8:	4664      	mov	r4, ip
 80008da:	0039      	movs	r1, r7
 80008dc:	0010      	movs	r0, r2
 80008de:	e739      	b.n	8000754 <__aeabi_dadd+0x204>
 80008e0:	4f1a      	ldr	r7, [pc, #104]	; (800094c <__aeabi_dadd+0x3fc>)
 80008e2:	42bb      	cmp	r3, r7
 80008e4:	d07a      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80008e6:	0033      	movs	r3, r6
 80008e8:	e6ff      	b.n	80006ea <__aeabi_dadd+0x19a>
 80008ea:	0030      	movs	r0, r6
 80008ec:	3d1f      	subs	r5, #31
 80008ee:	40e8      	lsrs	r0, r5
 80008f0:	2b20      	cmp	r3, #32
 80008f2:	d003      	beq.n	80008fc <__aeabi_dadd+0x3ac>
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	1acb      	subs	r3, r1, r3
 80008f8:	409e      	lsls	r6, r3
 80008fa:	4337      	orrs	r7, r6
 80008fc:	1e7b      	subs	r3, r7, #1
 80008fe:	419f      	sbcs	r7, r3
 8000900:	2207      	movs	r2, #7
 8000902:	4307      	orrs	r7, r0
 8000904:	403a      	ands	r2, r7
 8000906:	2100      	movs	r1, #0
 8000908:	2500      	movs	r5, #0
 800090a:	e789      	b.n	8000820 <__aeabi_dadd+0x2d0>
 800090c:	1a17      	subs	r7, r2, r0
 800090e:	4643      	mov	r3, r8
 8000910:	42ba      	cmp	r2, r7
 8000912:	41b6      	sbcs	r6, r6
 8000914:	1a59      	subs	r1, r3, r1
 8000916:	4276      	negs	r6, r6
 8000918:	1b8e      	subs	r6, r1, r6
 800091a:	4664      	mov	r4, ip
 800091c:	e64e      	b.n	80005bc <__aeabi_dadd+0x6c>
 800091e:	2b1f      	cmp	r3, #31
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x3d4>
 8000922:	e0ad      	b.n	8000a80 <__aeabi_dadd+0x530>
 8000924:	2620      	movs	r6, #32
 8000926:	4647      	mov	r7, r8
 8000928:	1af6      	subs	r6, r6, r3
 800092a:	40b7      	lsls	r7, r6
 800092c:	46b9      	mov	r9, r7
 800092e:	0017      	movs	r7, r2
 8000930:	46b2      	mov	sl, r6
 8000932:	40df      	lsrs	r7, r3
 8000934:	464e      	mov	r6, r9
 8000936:	433e      	orrs	r6, r7
 8000938:	0037      	movs	r7, r6
 800093a:	4656      	mov	r6, sl
 800093c:	40b2      	lsls	r2, r6
 800093e:	1e56      	subs	r6, r2, #1
 8000940:	41b2      	sbcs	r2, r6
 8000942:	4317      	orrs	r7, r2
 8000944:	4642      	mov	r2, r8
 8000946:	40da      	lsrs	r2, r3
 8000948:	1889      	adds	r1, r1, r2
 800094a:	e6ae      	b.n	80006aa <__aeabi_dadd+0x15a>
 800094c:	000007ff 	.word	0x000007ff
 8000950:	ff7fffff 	.word	0xff7fffff
 8000954:	800fffff 	.word	0x800fffff
 8000958:	2620      	movs	r6, #32
 800095a:	4647      	mov	r7, r8
 800095c:	1af6      	subs	r6, r6, r3
 800095e:	40b7      	lsls	r7, r6
 8000960:	46b9      	mov	r9, r7
 8000962:	0017      	movs	r7, r2
 8000964:	46b2      	mov	sl, r6
 8000966:	40df      	lsrs	r7, r3
 8000968:	464e      	mov	r6, r9
 800096a:	433e      	orrs	r6, r7
 800096c:	0037      	movs	r7, r6
 800096e:	4656      	mov	r6, sl
 8000970:	40b2      	lsls	r2, r6
 8000972:	1e56      	subs	r6, r2, #1
 8000974:	41b2      	sbcs	r2, r6
 8000976:	4317      	orrs	r7, r2
 8000978:	4642      	mov	r2, r8
 800097a:	40da      	lsrs	r2, r3
 800097c:	1a89      	subs	r1, r1, r2
 800097e:	e799      	b.n	80008b4 <__aeabi_dadd+0x364>
 8000980:	4c7f      	ldr	r4, [pc, #508]	; (8000b80 <__aeabi_dadd+0x630>)
 8000982:	42a6      	cmp	r6, r4
 8000984:	d05b      	beq.n	8000a3e <__aeabi_dadd+0x4ee>
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	0424      	lsls	r4, r4, #16
 800098a:	425b      	negs	r3, r3
 800098c:	4321      	orrs	r1, r4
 800098e:	e727      	b.n	80007e0 <__aeabi_dadd+0x290>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d10c      	bne.n	80009ae <__aeabi_dadd+0x45e>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x44a>
 8000998:	e0cb      	b.n	8000b32 <__aeabi_dadd+0x5e2>
 800099a:	4664      	mov	r4, ip
 800099c:	0039      	movs	r1, r7
 800099e:	0010      	movs	r0, r2
 80009a0:	4d77      	ldr	r5, [pc, #476]	; (8000b80 <__aeabi_dadd+0x630>)
 80009a2:	e6d7      	b.n	8000754 <__aeabi_dadd+0x204>
 80009a4:	4f76      	ldr	r7, [pc, #472]	; (8000b80 <__aeabi_dadd+0x630>)
 80009a6:	42bb      	cmp	r3, r7
 80009a8:	d018      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80009aa:	0033      	movs	r3, r6
 80009ac:	e675      	b.n	800069a <__aeabi_dadd+0x14a>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d014      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80009b2:	074b      	lsls	r3, r1, #29
 80009b4:	08c0      	lsrs	r0, r0, #3
 80009b6:	4318      	orrs	r0, r3
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	031b      	lsls	r3, r3, #12
 80009be:	4219      	tst	r1, r3
 80009c0:	d007      	beq.n	80009d2 <__aeabi_dadd+0x482>
 80009c2:	08fc      	lsrs	r4, r7, #3
 80009c4:	421c      	tst	r4, r3
 80009c6:	d104      	bne.n	80009d2 <__aeabi_dadd+0x482>
 80009c8:	0779      	lsls	r1, r7, #29
 80009ca:	08d0      	lsrs	r0, r2, #3
 80009cc:	4308      	orrs	r0, r1
 80009ce:	46e1      	mov	r9, ip
 80009d0:	0021      	movs	r1, r4
 80009d2:	464c      	mov	r4, r9
 80009d4:	0f42      	lsrs	r2, r0, #29
 80009d6:	00c9      	lsls	r1, r1, #3
 80009d8:	4311      	orrs	r1, r2
 80009da:	00c0      	lsls	r0, r0, #3
 80009dc:	4d68      	ldr	r5, [pc, #416]	; (8000b80 <__aeabi_dadd+0x630>)
 80009de:	e6b9      	b.n	8000754 <__aeabi_dadd+0x204>
 80009e0:	001d      	movs	r5, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	2300      	movs	r3, #0
 80009e6:	e6c0      	b.n	800076a <__aeabi_dadd+0x21a>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d15b      	bne.n	8000aa4 <__aeabi_dadd+0x554>
 80009ec:	000d      	movs	r5, r1
 80009ee:	4305      	orrs	r5, r0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x4a4>
 80009f2:	e6e2      	b.n	80007ba <__aeabi_dadd+0x26a>
 80009f4:	1c5d      	adds	r5, r3, #1
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x4aa>
 80009f8:	e0b0      	b.n	8000b5c <__aeabi_dadd+0x60c>
 80009fa:	4d61      	ldr	r5, [pc, #388]	; (8000b80 <__aeabi_dadd+0x630>)
 80009fc:	42ae      	cmp	r6, r5
 80009fe:	d01f      	beq.n	8000a40 <__aeabi_dadd+0x4f0>
 8000a00:	43db      	mvns	r3, r3
 8000a02:	2b38      	cmp	r3, #56	; 0x38
 8000a04:	dc71      	bgt.n	8000aea <__aeabi_dadd+0x59a>
 8000a06:	2b1f      	cmp	r3, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x4bc>
 8000a0a:	e096      	b.n	8000b3a <__aeabi_dadd+0x5ea>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000f      	movs	r7, r1
 8000a10:	1aed      	subs	r5, r5, r3
 8000a12:	40af      	lsls	r7, r5
 8000a14:	46b9      	mov	r9, r7
 8000a16:	0007      	movs	r7, r0
 8000a18:	46aa      	mov	sl, r5
 8000a1a:	40df      	lsrs	r7, r3
 8000a1c:	464d      	mov	r5, r9
 8000a1e:	433d      	orrs	r5, r7
 8000a20:	002f      	movs	r7, r5
 8000a22:	4655      	mov	r5, sl
 8000a24:	40a8      	lsls	r0, r5
 8000a26:	40d9      	lsrs	r1, r3
 8000a28:	1e45      	subs	r5, r0, #1
 8000a2a:	41a8      	sbcs	r0, r5
 8000a2c:	4488      	add	r8, r1
 8000a2e:	4307      	orrs	r7, r0
 8000a30:	18bf      	adds	r7, r7, r2
 8000a32:	4297      	cmp	r7, r2
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4251      	negs	r1, r2
 8000a38:	4441      	add	r1, r8
 8000a3a:	0035      	movs	r5, r6
 8000a3c:	e63a      	b.n	80006b4 <__aeabi_dadd+0x164>
 8000a3e:	4664      	mov	r4, ip
 8000a40:	0035      	movs	r5, r6
 8000a42:	4641      	mov	r1, r8
 8000a44:	0010      	movs	r0, r2
 8000a46:	e685      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a48:	000b      	movs	r3, r1
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x502>
 8000a50:	e663      	b.n	800071a <__aeabi_dadd+0x1ca>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f5      	beq.n	8000a42 <__aeabi_dadd+0x4f2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x50e>
 8000a5c:	e67a      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a5e:	1887      	adds	r7, r0, r2
 8000a60:	4287      	cmp	r7, r0
 8000a62:	4180      	sbcs	r0, r0
 8000a64:	2207      	movs	r2, #7
 8000a66:	4441      	add	r1, r8
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1809      	adds	r1, r1, r0
 8000a6c:	403a      	ands	r2, r7
 8000a6e:	020b      	lsls	r3, r1, #8
 8000a70:	d400      	bmi.n	8000a74 <__aeabi_dadd+0x524>
 8000a72:	e6d5      	b.n	8000820 <__aeabi_dadd+0x2d0>
 8000a74:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <__aeabi_dadd+0x634>)
 8000a76:	3501      	adds	r5, #1
 8000a78:	4019      	ands	r1, r3
 8000a7a:	e5c9      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000a7c:	0038      	movs	r0, r7
 8000a7e:	e669      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a80:	001e      	movs	r6, r3
 8000a82:	4647      	mov	r7, r8
 8000a84:	3e20      	subs	r6, #32
 8000a86:	40f7      	lsrs	r7, r6
 8000a88:	46bc      	mov	ip, r7
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d004      	beq.n	8000a98 <__aeabi_dadd+0x548>
 8000a8e:	2640      	movs	r6, #64	; 0x40
 8000a90:	1af3      	subs	r3, r6, r3
 8000a92:	4646      	mov	r6, r8
 8000a94:	409e      	lsls	r6, r3
 8000a96:	4332      	orrs	r2, r6
 8000a98:	0017      	movs	r7, r2
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	1e7a      	subs	r2, r7, #1
 8000a9e:	4197      	sbcs	r7, r2
 8000aa0:	431f      	orrs	r7, r3
 8000aa2:	e602      	b.n	80006aa <__aeabi_dadd+0x15a>
 8000aa4:	4d36      	ldr	r5, [pc, #216]	; (8000b80 <__aeabi_dadd+0x630>)
 8000aa6:	42ae      	cmp	r6, r5
 8000aa8:	d0ca      	beq.n	8000a40 <__aeabi_dadd+0x4f0>
 8000aaa:	2580      	movs	r5, #128	; 0x80
 8000aac:	042d      	lsls	r5, r5, #16
 8000aae:	425b      	negs	r3, r3
 8000ab0:	4329      	orrs	r1, r5
 8000ab2:	e7a6      	b.n	8000a02 <__aeabi_dadd+0x4b2>
 8000ab4:	4308      	orrs	r0, r1
 8000ab6:	1e41      	subs	r1, r0, #1
 8000ab8:	4188      	sbcs	r0, r1
 8000aba:	e6a6      	b.n	800080a <__aeabi_dadd+0x2ba>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x572>
 8000ac0:	e648      	b.n	8000754 <__aeabi_dadd+0x204>
 8000ac2:	1a87      	subs	r7, r0, r2
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	42b8      	cmp	r0, r7
 8000ac8:	41b6      	sbcs	r6, r6
 8000aca:	1acb      	subs	r3, r1, r3
 8000acc:	4276      	negs	r6, r6
 8000ace:	1b9e      	subs	r6, r3, r6
 8000ad0:	0233      	lsls	r3, r6, #8
 8000ad2:	d54b      	bpl.n	8000b6c <__aeabi_dadd+0x61c>
 8000ad4:	1a17      	subs	r7, r2, r0
 8000ad6:	4643      	mov	r3, r8
 8000ad8:	42ba      	cmp	r2, r7
 8000ada:	4192      	sbcs	r2, r2
 8000adc:	1a59      	subs	r1, r3, r1
 8000ade:	4252      	negs	r2, r2
 8000ae0:	1a89      	subs	r1, r1, r2
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4664      	mov	r4, ip
 8000ae6:	403a      	ands	r2, r7
 8000ae8:	e592      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000aea:	4301      	orrs	r1, r0
 8000aec:	000f      	movs	r7, r1
 8000aee:	1e79      	subs	r1, r7, #1
 8000af0:	418f      	sbcs	r7, r1
 8000af2:	e79d      	b.n	8000a30 <__aeabi_dadd+0x4e0>
 8000af4:	001c      	movs	r4, r3
 8000af6:	000f      	movs	r7, r1
 8000af8:	3c20      	subs	r4, #32
 8000afa:	40e7      	lsrs	r7, r4
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d003      	beq.n	8000b08 <__aeabi_dadd+0x5b8>
 8000b00:	2440      	movs	r4, #64	; 0x40
 8000b02:	1ae3      	subs	r3, r4, r3
 8000b04:	4099      	lsls	r1, r3
 8000b06:	4308      	orrs	r0, r1
 8000b08:	1e41      	subs	r1, r0, #1
 8000b0a:	4188      	sbcs	r0, r1
 8000b0c:	4338      	orrs	r0, r7
 8000b0e:	e67c      	b.n	800080a <__aeabi_dadd+0x2ba>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2400      	movs	r4, #0
 8000b14:	e625      	b.n	8000762 <__aeabi_dadd+0x212>
 8000b16:	1a17      	subs	r7, r2, r0
 8000b18:	4643      	mov	r3, r8
 8000b1a:	42ba      	cmp	r2, r7
 8000b1c:	4192      	sbcs	r2, r2
 8000b1e:	1a59      	subs	r1, r3, r1
 8000b20:	4252      	negs	r2, r2
 8000b22:	1a89      	subs	r1, r1, r2
 8000b24:	4664      	mov	r4, ip
 8000b26:	0035      	movs	r5, r6
 8000b28:	e543      	b.n	80005b2 <__aeabi_dadd+0x62>
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	4d14      	ldr	r5, [pc, #80]	; (8000b80 <__aeabi_dadd+0x630>)
 8000b30:	e610      	b.n	8000754 <__aeabi_dadd+0x204>
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	0312      	lsls	r2, r2, #12
 8000b38:	e680      	b.n	800083c <__aeabi_dadd+0x2ec>
 8000b3a:	001d      	movs	r5, r3
 8000b3c:	000f      	movs	r7, r1
 8000b3e:	3d20      	subs	r5, #32
 8000b40:	40ef      	lsrs	r7, r5
 8000b42:	46bc      	mov	ip, r7
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d003      	beq.n	8000b50 <__aeabi_dadd+0x600>
 8000b48:	2540      	movs	r5, #64	; 0x40
 8000b4a:	1aeb      	subs	r3, r5, r3
 8000b4c:	4099      	lsls	r1, r3
 8000b4e:	4308      	orrs	r0, r1
 8000b50:	0007      	movs	r7, r0
 8000b52:	4663      	mov	r3, ip
 8000b54:	1e78      	subs	r0, r7, #1
 8000b56:	4187      	sbcs	r7, r0
 8000b58:	431f      	orrs	r7, r3
 8000b5a:	e769      	b.n	8000a30 <__aeabi_dadd+0x4e0>
 8000b5c:	1887      	adds	r7, r0, r2
 8000b5e:	4297      	cmp	r7, r2
 8000b60:	419b      	sbcs	r3, r3
 8000b62:	4441      	add	r1, r8
 8000b64:	425b      	negs	r3, r3
 8000b66:	18c9      	adds	r1, r1, r3
 8000b68:	0035      	movs	r5, r6
 8000b6a:	e5a3      	b.n	80006b4 <__aeabi_dadd+0x164>
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	d0ce      	beq.n	8000b10 <__aeabi_dadd+0x5c0>
 8000b72:	2207      	movs	r2, #7
 8000b74:	0031      	movs	r1, r6
 8000b76:	403a      	ands	r2, r7
 8000b78:	e652      	b.n	8000820 <__aeabi_dadd+0x2d0>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	e5f4      	b.n	800076a <__aeabi_dadd+0x21a>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff

08000b88 <__aeabi_ddiv>:
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	4657      	mov	r7, sl
 8000b8c:	46de      	mov	lr, fp
 8000b8e:	464e      	mov	r6, r9
 8000b90:	4645      	mov	r5, r8
 8000b92:	b5e0      	push	{r5, r6, r7, lr}
 8000b94:	4683      	mov	fp, r0
 8000b96:	0007      	movs	r7, r0
 8000b98:	030e      	lsls	r6, r1, #12
 8000b9a:	0048      	lsls	r0, r1, #1
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	4692      	mov	sl, r2
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	0b36      	lsrs	r6, r6, #12
 8000ba4:	0d40      	lsrs	r0, r0, #21
 8000ba6:	0fcd      	lsrs	r5, r1, #31
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_ddiv+0x26>
 8000bac:	e09d      	b.n	8000cea <__aeabi_ddiv+0x162>
 8000bae:	4b95      	ldr	r3, [pc, #596]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	d039      	beq.n	8000c28 <__aeabi_ddiv+0xa0>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00f6      	lsls	r6, r6, #3
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	431e      	orrs	r6, r3
 8000bbc:	4a92      	ldr	r2, [pc, #584]	; (8000e08 <__aeabi_ddiv+0x280>)
 8000bbe:	0f7b      	lsrs	r3, r7, #29
 8000bc0:	4333      	orrs	r3, r6
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	4463      	add	r3, ip
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2600      	movs	r6, #0
 8000bd0:	00ff      	lsls	r7, r7, #3
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	0323      	lsls	r3, r4, #12
 8000bd6:	0b1b      	lsrs	r3, r3, #12
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0063      	lsls	r3, r4, #1
 8000bdc:	0fe4      	lsrs	r4, r4, #31
 8000bde:	4652      	mov	r2, sl
 8000be0:	0d5b      	lsrs	r3, r3, #21
 8000be2:	9401      	str	r4, [sp, #4]
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0x60>
 8000be6:	e0b3      	b.n	8000d50 <__aeabi_ddiv+0x1c8>
 8000be8:	4986      	ldr	r1, [pc, #536]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_ddiv+0x68>
 8000bee:	e09e      	b.n	8000d2e <__aeabi_ddiv+0x1a6>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	00d1      	lsls	r1, r2, #3
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	0412      	lsls	r2, r2, #16
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	0f49      	lsrs	r1, r1, #29
 8000bfe:	4311      	orrs	r1, r2
 8000c00:	468b      	mov	fp, r1
 8000c02:	4981      	ldr	r1, [pc, #516]	; (8000e08 <__aeabi_ddiv+0x280>)
 8000c04:	4652      	mov	r2, sl
 8000c06:	468c      	mov	ip, r1
 8000c08:	9900      	ldr	r1, [sp, #0]
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	002b      	movs	r3, r5
 8000c16:	4063      	eors	r3, r4
 8000c18:	469a      	mov	sl, r3
 8000c1a:	2e0f      	cmp	r6, #15
 8000c1c:	d900      	bls.n	8000c20 <__aeabi_ddiv+0x98>
 8000c1e:	e105      	b.n	8000e2c <__aeabi_ddiv+0x2a4>
 8000c20:	4b7a      	ldr	r3, [pc, #488]	; (8000e0c <__aeabi_ddiv+0x284>)
 8000c22:	00b6      	lsls	r6, r6, #2
 8000c24:	599b      	ldr	r3, [r3, r6]
 8000c26:	469f      	mov	pc, r3
 8000c28:	465b      	mov	r3, fp
 8000c2a:	4333      	orrs	r3, r6
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_ddiv+0xaa>
 8000c30:	e0b8      	b.n	8000da4 <__aeabi_ddiv+0x21c>
 8000c32:	2302      	movs	r3, #2
 8000c34:	2608      	movs	r6, #8
 8000c36:	2700      	movs	r7, #0
 8000c38:	9000      	str	r0, [sp, #0]
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	e7ca      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000c3e:	46cb      	mov	fp, r9
 8000c40:	003a      	movs	r2, r7
 8000c42:	9902      	ldr	r1, [sp, #8]
 8000c44:	9501      	str	r5, [sp, #4]
 8000c46:	9b01      	ldr	r3, [sp, #4]
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2902      	cmp	r1, #2
 8000c4c:	d027      	beq.n	8000c9e <__aeabi_ddiv+0x116>
 8000c4e:	2903      	cmp	r1, #3
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0xcc>
 8000c52:	e280      	b.n	8001156 <__aeabi_ddiv+0x5ce>
 8000c54:	2901      	cmp	r1, #1
 8000c56:	d044      	beq.n	8000ce2 <__aeabi_ddiv+0x15a>
 8000c58:	496d      	ldr	r1, [pc, #436]	; (8000e10 <__aeabi_ddiv+0x288>)
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	4463      	add	r3, ip
 8000c60:	001c      	movs	r4, r3
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	dd38      	ble.n	8000cd8 <__aeabi_ddiv+0x150>
 8000c66:	0753      	lsls	r3, r2, #29
 8000c68:	d000      	beq.n	8000c6c <__aeabi_ddiv+0xe4>
 8000c6a:	e213      	b.n	8001094 <__aeabi_ddiv+0x50c>
 8000c6c:	08d2      	lsrs	r2, r2, #3
 8000c6e:	465b      	mov	r3, fp
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	d509      	bpl.n	8000c88 <__aeabi_ddiv+0x100>
 8000c74:	4659      	mov	r1, fp
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <__aeabi_ddiv+0x28c>)
 8000c78:	4019      	ands	r1, r3
 8000c7a:	468b      	mov	fp, r1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	468c      	mov	ip, r1
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	4463      	add	r3, ip
 8000c86:	001c      	movs	r4, r3
 8000c88:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <__aeabi_ddiv+0x290>)
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	dc07      	bgt.n	8000c9e <__aeabi_ddiv+0x116>
 8000c8e:	465b      	mov	r3, fp
 8000c90:	0564      	lsls	r4, r4, #21
 8000c92:	075f      	lsls	r7, r3, #29
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	4317      	orrs	r7, r2
 8000c98:	0b1b      	lsrs	r3, r3, #12
 8000c9a:	0d62      	lsrs	r2, r4, #21
 8000c9c:	e002      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	0b1c      	lsrs	r4, r3, #12
 8000caa:	0d0b      	lsrs	r3, r1, #20
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	0514      	lsls	r4, r2, #20
 8000cb2:	4a5a      	ldr	r2, [pc, #360]	; (8000e1c <__aeabi_ddiv+0x294>)
 8000cb4:	0038      	movs	r0, r7
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	0064      	lsls	r4, r4, #1
 8000cbe:	07db      	lsls	r3, r3, #31
 8000cc0:	0864      	lsrs	r4, r4, #1
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cca:	4690      	mov	r8, r2
 8000ccc:	4699      	mov	r9, r3
 8000cce:	46a2      	mov	sl, r4
 8000cd0:	46ab      	mov	fp, r5
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4252      	negs	r2, r2
 8000cd8:	2301      	movs	r3, #1
 8000cda:	1b1b      	subs	r3, r3, r4
 8000cdc:	2b38      	cmp	r3, #56	; 0x38
 8000cde:	dc00      	bgt.n	8000ce2 <__aeabi_ddiv+0x15a>
 8000ce0:	e1ad      	b.n	800103e <__aeabi_ddiv+0x4b6>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2700      	movs	r7, #0
 8000ce8:	e7dc      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000cea:	465b      	mov	r3, fp
 8000cec:	4333      	orrs	r3, r6
 8000cee:	4699      	mov	r9, r3
 8000cf0:	d05e      	beq.n	8000db0 <__aeabi_ddiv+0x228>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x170>
 8000cf6:	e18a      	b.n	800100e <__aeabi_ddiv+0x486>
 8000cf8:	0030      	movs	r0, r6
 8000cfa:	f001 fa9d 	bl	8002238 <__clzsi2>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	3b0b      	subs	r3, #11
 8000d02:	2b1c      	cmp	r3, #28
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_ddiv+0x180>
 8000d06:	e17b      	b.n	8001000 <__aeabi_ddiv+0x478>
 8000d08:	221d      	movs	r2, #29
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	465a      	mov	r2, fp
 8000d0e:	0001      	movs	r1, r0
 8000d10:	40da      	lsrs	r2, r3
 8000d12:	3908      	subs	r1, #8
 8000d14:	408e      	lsls	r6, r1
 8000d16:	0013      	movs	r3, r2
 8000d18:	465f      	mov	r7, fp
 8000d1a:	4333      	orrs	r3, r6
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	408f      	lsls	r7, r1
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <__aeabi_ddiv+0x298>)
 8000d22:	2600      	movs	r6, #0
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	e752      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4653      	mov	r3, sl
 8000d32:	430b      	orrs	r3, r1
 8000d34:	493b      	ldr	r1, [pc, #236]	; (8000e24 <__aeabi_ddiv+0x29c>)
 8000d36:	469b      	mov	fp, r3
 8000d38:	468c      	mov	ip, r1
 8000d3a:	9b00      	ldr	r3, [sp, #0]
 8000d3c:	4463      	add	r3, ip
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	465b      	mov	r3, fp
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d13b      	bne.n	8000dbe <__aeabi_ddiv+0x236>
 8000d46:	2302      	movs	r3, #2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	431e      	orrs	r6, r3
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	e761      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000d50:	4643      	mov	r3, r8
 8000d52:	4313      	orrs	r3, r2
 8000d54:	469b      	mov	fp, r3
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_ddiv+0x240>
 8000d58:	4643      	mov	r3, r8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x1d8>
 8000d5e:	e162      	b.n	8001026 <__aeabi_ddiv+0x49e>
 8000d60:	4640      	mov	r0, r8
 8000d62:	f001 fa69 	bl	8002238 <__clzsi2>
 8000d66:	0003      	movs	r3, r0
 8000d68:	3b0b      	subs	r3, #11
 8000d6a:	2b1c      	cmp	r3, #28
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_ddiv+0x1e8>
 8000d6e:	e153      	b.n	8001018 <__aeabi_ddiv+0x490>
 8000d70:	0002      	movs	r2, r0
 8000d72:	4641      	mov	r1, r8
 8000d74:	3a08      	subs	r2, #8
 8000d76:	4091      	lsls	r1, r2
 8000d78:	4688      	mov	r8, r1
 8000d7a:	211d      	movs	r1, #29
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	4651      	mov	r1, sl
 8000d80:	40d9      	lsrs	r1, r3
 8000d82:	000b      	movs	r3, r1
 8000d84:	4641      	mov	r1, r8
 8000d86:	430b      	orrs	r3, r1
 8000d88:	469b      	mov	fp, r3
 8000d8a:	4653      	mov	r3, sl
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	001a      	movs	r2, r3
 8000d90:	9b00      	ldr	r3, [sp, #0]
 8000d92:	4925      	ldr	r1, [pc, #148]	; (8000e28 <__aeabi_ddiv+0x2a0>)
 8000d94:	469c      	mov	ip, r3
 8000d96:	4460      	add	r0, ip
 8000d98:	0003      	movs	r3, r0
 8000d9a:	468c      	mov	ip, r1
 8000d9c:	4463      	add	r3, ip
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2100      	movs	r1, #0
 8000da2:	e737      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000da4:	2303      	movs	r3, #3
 8000da6:	46b1      	mov	r9, r6
 8000da8:	9000      	str	r0, [sp, #0]
 8000daa:	260c      	movs	r6, #12
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	e711      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	2604      	movs	r6, #4
 8000db8:	2700      	movs	r7, #0
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	e70a      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	46c3      	mov	fp, r8
 8000dc2:	431e      	orrs	r6, r3
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	e725      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	431e      	orrs	r6, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	e720      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	2700      	movs	r7, #0
 8000dda:	031b      	lsls	r3, r3, #12
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000dde:	e761      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	4649      	mov	r1, r9
 8000de4:	031b      	lsls	r3, r3, #12
 8000de6:	4219      	tst	r1, r3
 8000de8:	d100      	bne.n	8000dec <__aeabi_ddiv+0x264>
 8000dea:	e0e2      	b.n	8000fb2 <__aeabi_ddiv+0x42a>
 8000dec:	4659      	mov	r1, fp
 8000dee:	4219      	tst	r1, r3
 8000df0:	d000      	beq.n	8000df4 <__aeabi_ddiv+0x26c>
 8000df2:	e0de      	b.n	8000fb2 <__aeabi_ddiv+0x42a>
 8000df4:	430b      	orrs	r3, r1
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0b1b      	lsrs	r3, r3, #12
 8000dfc:	46a2      	mov	sl, r4
 8000dfe:	4a01      	ldr	r2, [pc, #4]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000e00:	e750      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	000007ff 	.word	0x000007ff
 8000e08:	fffffc01 	.word	0xfffffc01
 8000e0c:	0800d4a4 	.word	0x0800d4a4
 8000e10:	000003ff 	.word	0x000003ff
 8000e14:	feffffff 	.word	0xfeffffff
 8000e18:	000007fe 	.word	0x000007fe
 8000e1c:	800fffff 	.word	0x800fffff
 8000e20:	fffffc0d 	.word	0xfffffc0d
 8000e24:	fffff801 	.word	0xfffff801
 8000e28:	000003f3 	.word	0x000003f3
 8000e2c:	45d9      	cmp	r9, fp
 8000e2e:	d900      	bls.n	8000e32 <__aeabi_ddiv+0x2aa>
 8000e30:	e0cb      	b.n	8000fca <__aeabi_ddiv+0x442>
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0x2ae>
 8000e34:	e0c6      	b.n	8000fc4 <__aeabi_ddiv+0x43c>
 8000e36:	003c      	movs	r4, r7
 8000e38:	4648      	mov	r0, r9
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	9b00      	ldr	r3, [sp, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	465b      	mov	r3, fp
 8000e44:	0e16      	lsrs	r6, r2, #24
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	0213      	lsls	r3, r2, #8
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	0433      	lsls	r3, r6, #16
 8000e50:	0c1b      	lsrs	r3, r3, #16
 8000e52:	4699      	mov	r9, r3
 8000e54:	0c31      	lsrs	r1, r6, #16
 8000e56:	9101      	str	r1, [sp, #4]
 8000e58:	f7ff f9ee 	bl	8000238 <__aeabi_uidivmod>
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4342      	muls	r2, r0
 8000e60:	040b      	lsls	r3, r1, #16
 8000e62:	0c21      	lsrs	r1, r4, #16
 8000e64:	0005      	movs	r5, r0
 8000e66:	4319      	orrs	r1, r3
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d907      	bls.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e6c:	1989      	adds	r1, r1, r6
 8000e6e:	3d01      	subs	r5, #1
 8000e70:	428e      	cmp	r6, r1
 8000e72:	d803      	bhi.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e74:	428a      	cmp	r2, r1
 8000e76:	d901      	bls.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e78:	1e85      	subs	r5, r0, #2
 8000e7a:	1989      	adds	r1, r1, r6
 8000e7c:	1a88      	subs	r0, r1, r2
 8000e7e:	9901      	ldr	r1, [sp, #4]
 8000e80:	f7ff f9da 	bl	8000238 <__aeabi_uidivmod>
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	468c      	mov	ip, r1
 8000e88:	464a      	mov	r2, r9
 8000e8a:	0421      	lsls	r1, r4, #16
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	4342      	muls	r2, r0
 8000e90:	0c09      	lsrs	r1, r1, #16
 8000e92:	0003      	movs	r3, r0
 8000e94:	4321      	orrs	r1, r4
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d904      	bls.n	8000ea4 <__aeabi_ddiv+0x31c>
 8000e9a:	1989      	adds	r1, r1, r6
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	428e      	cmp	r6, r1
 8000ea0:	d800      	bhi.n	8000ea4 <__aeabi_ddiv+0x31c>
 8000ea2:	e0f1      	b.n	8001088 <__aeabi_ddiv+0x500>
 8000ea4:	042d      	lsls	r5, r5, #16
 8000ea6:	431d      	orrs	r5, r3
 8000ea8:	46ab      	mov	fp, r5
 8000eaa:	4643      	mov	r3, r8
 8000eac:	1a89      	subs	r1, r1, r2
 8000eae:	4642      	mov	r2, r8
 8000eb0:	0c28      	lsrs	r0, r5, #16
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	0c1d      	lsrs	r5, r3, #16
 8000eb6:	465b      	mov	r3, fp
 8000eb8:	0c14      	lsrs	r4, r2, #16
 8000eba:	0022      	movs	r2, r4
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	435a      	muls	r2, r3
 8000ec2:	9403      	str	r4, [sp, #12]
 8000ec4:	436b      	muls	r3, r5
 8000ec6:	4344      	muls	r4, r0
 8000ec8:	9502      	str	r5, [sp, #8]
 8000eca:	4368      	muls	r0, r5
 8000ecc:	191b      	adds	r3, r3, r4
 8000ece:	0c15      	lsrs	r5, r2, #16
 8000ed0:	18eb      	adds	r3, r5, r3
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	d903      	bls.n	8000ede <__aeabi_ddiv+0x356>
 8000ed6:	2480      	movs	r4, #128	; 0x80
 8000ed8:	0264      	lsls	r4, r4, #9
 8000eda:	46a4      	mov	ip, r4
 8000edc:	4460      	add	r0, ip
 8000ede:	0c1c      	lsrs	r4, r3, #16
 8000ee0:	0415      	lsls	r5, r2, #16
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	0c2d      	lsrs	r5, r5, #16
 8000ee6:	1820      	adds	r0, r4, r0
 8000ee8:	195d      	adds	r5, r3, r5
 8000eea:	4281      	cmp	r1, r0
 8000eec:	d377      	bcc.n	8000fde <__aeabi_ddiv+0x456>
 8000eee:	d073      	beq.n	8000fd8 <__aeabi_ddiv+0x450>
 8000ef0:	1a0c      	subs	r4, r1, r0
 8000ef2:	4aa2      	ldr	r2, [pc, #648]	; (800117c <__aeabi_ddiv+0x5f4>)
 8000ef4:	1b7d      	subs	r5, r7, r5
 8000ef6:	42af      	cmp	r7, r5
 8000ef8:	41bf      	sbcs	r7, r7
 8000efa:	4694      	mov	ip, r2
 8000efc:	9b00      	ldr	r3, [sp, #0]
 8000efe:	427f      	negs	r7, r7
 8000f00:	4463      	add	r3, ip
 8000f02:	1be0      	subs	r0, r4, r7
 8000f04:	001c      	movs	r4, r3
 8000f06:	4286      	cmp	r6, r0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_ddiv+0x384>
 8000f0a:	e0db      	b.n	80010c4 <__aeabi_ddiv+0x53c>
 8000f0c:	9901      	ldr	r1, [sp, #4]
 8000f0e:	f7ff f993 	bl	8000238 <__aeabi_uidivmod>
 8000f12:	464a      	mov	r2, r9
 8000f14:	4342      	muls	r2, r0
 8000f16:	040b      	lsls	r3, r1, #16
 8000f18:	0c29      	lsrs	r1, r5, #16
 8000f1a:	0007      	movs	r7, r0
 8000f1c:	4319      	orrs	r1, r3
 8000f1e:	428a      	cmp	r2, r1
 8000f20:	d907      	bls.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f22:	1989      	adds	r1, r1, r6
 8000f24:	3f01      	subs	r7, #1
 8000f26:	428e      	cmp	r6, r1
 8000f28:	d803      	bhi.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d901      	bls.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f2e:	1e87      	subs	r7, r0, #2
 8000f30:	1989      	adds	r1, r1, r6
 8000f32:	1a88      	subs	r0, r1, r2
 8000f34:	9901      	ldr	r1, [sp, #4]
 8000f36:	f7ff f97f 	bl	8000238 <__aeabi_uidivmod>
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	464a      	mov	r2, r9
 8000f3e:	4689      	mov	r9, r1
 8000f40:	0429      	lsls	r1, r5, #16
 8000f42:	464d      	mov	r5, r9
 8000f44:	4342      	muls	r2, r0
 8000f46:	0c09      	lsrs	r1, r1, #16
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4329      	orrs	r1, r5
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d907      	bls.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f50:	1989      	adds	r1, r1, r6
 8000f52:	3b01      	subs	r3, #1
 8000f54:	428e      	cmp	r6, r1
 8000f56:	d803      	bhi.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f58:	428a      	cmp	r2, r1
 8000f5a:	d901      	bls.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f5c:	1e83      	subs	r3, r0, #2
 8000f5e:	1989      	adds	r1, r1, r6
 8000f60:	043f      	lsls	r7, r7, #16
 8000f62:	1a89      	subs	r1, r1, r2
 8000f64:	003a      	movs	r2, r7
 8000f66:	9f03      	ldr	r7, [sp, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	0038      	movs	r0, r7
 8000f6c:	0413      	lsls	r3, r2, #16
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	4358      	muls	r0, r3
 8000f72:	4681      	mov	r9, r0
 8000f74:	9802      	ldr	r0, [sp, #8]
 8000f76:	0c15      	lsrs	r5, r2, #16
 8000f78:	436f      	muls	r7, r5
 8000f7a:	4343      	muls	r3, r0
 8000f7c:	4345      	muls	r5, r0
 8000f7e:	4648      	mov	r0, r9
 8000f80:	0c00      	lsrs	r0, r0, #16
 8000f82:	4684      	mov	ip, r0
 8000f84:	19db      	adds	r3, r3, r7
 8000f86:	4463      	add	r3, ip
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	d903      	bls.n	8000f94 <__aeabi_ddiv+0x40c>
 8000f8c:	2080      	movs	r0, #128	; 0x80
 8000f8e:	0240      	lsls	r0, r0, #9
 8000f90:	4684      	mov	ip, r0
 8000f92:	4465      	add	r5, ip
 8000f94:	4648      	mov	r0, r9
 8000f96:	0c1f      	lsrs	r7, r3, #16
 8000f98:	0400      	lsls	r0, r0, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c00      	lsrs	r0, r0, #16
 8000f9e:	197d      	adds	r5, r7, r5
 8000fa0:	1818      	adds	r0, r3, r0
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x420>
 8000fa6:	e084      	b.n	80010b2 <__aeabi_ddiv+0x52a>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x424>
 8000faa:	e07f      	b.n	80010ac <__aeabi_ddiv+0x524>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	e657      	b.n	8000c62 <__aeabi_ddiv+0xda>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	464a      	mov	r2, r9
 8000fb6:	031b      	lsls	r3, r3, #12
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	031b      	lsls	r3, r3, #12
 8000fbc:	0b1b      	lsrs	r3, r3, #12
 8000fbe:	46aa      	mov	sl, r5
 8000fc0:	4a6f      	ldr	r2, [pc, #444]	; (8001180 <__aeabi_ddiv+0x5f8>)
 8000fc2:	e66f      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000fc4:	42ba      	cmp	r2, r7
 8000fc6:	d900      	bls.n	8000fca <__aeabi_ddiv+0x442>
 8000fc8:	e735      	b.n	8000e36 <__aeabi_ddiv+0x2ae>
 8000fca:	464b      	mov	r3, r9
 8000fcc:	07dc      	lsls	r4, r3, #31
 8000fce:	0858      	lsrs	r0, r3, #1
 8000fd0:	087b      	lsrs	r3, r7, #1
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	07ff      	lsls	r7, r7, #31
 8000fd6:	e734      	b.n	8000e42 <__aeabi_ddiv+0x2ba>
 8000fd8:	2400      	movs	r4, #0
 8000fda:	42af      	cmp	r7, r5
 8000fdc:	d289      	bcs.n	8000ef2 <__aeabi_ddiv+0x36a>
 8000fde:	4447      	add	r7, r8
 8000fe0:	4547      	cmp	r7, r8
 8000fe2:	41a4      	sbcs	r4, r4
 8000fe4:	465b      	mov	r3, fp
 8000fe6:	4264      	negs	r4, r4
 8000fe8:	19a4      	adds	r4, r4, r6
 8000fea:	1864      	adds	r4, r4, r1
 8000fec:	3b01      	subs	r3, #1
 8000fee:	42a6      	cmp	r6, r4
 8000ff0:	d21e      	bcs.n	8001030 <__aeabi_ddiv+0x4a8>
 8000ff2:	42a0      	cmp	r0, r4
 8000ff4:	d86d      	bhi.n	80010d2 <__aeabi_ddiv+0x54a>
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x472>
 8000ff8:	e0b6      	b.n	8001168 <__aeabi_ddiv+0x5e0>
 8000ffa:	1a24      	subs	r4, r4, r0
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	e778      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 8001000:	0003      	movs	r3, r0
 8001002:	465a      	mov	r2, fp
 8001004:	3b28      	subs	r3, #40	; 0x28
 8001006:	409a      	lsls	r2, r3
 8001008:	2700      	movs	r7, #0
 800100a:	4691      	mov	r9, r2
 800100c:	e688      	b.n	8000d20 <__aeabi_ddiv+0x198>
 800100e:	4658      	mov	r0, fp
 8001010:	f001 f912 	bl	8002238 <__clzsi2>
 8001014:	3020      	adds	r0, #32
 8001016:	e672      	b.n	8000cfe <__aeabi_ddiv+0x176>
 8001018:	0003      	movs	r3, r0
 800101a:	4652      	mov	r2, sl
 800101c:	3b28      	subs	r3, #40	; 0x28
 800101e:	409a      	lsls	r2, r3
 8001020:	4693      	mov	fp, r2
 8001022:	2200      	movs	r2, #0
 8001024:	e6b4      	b.n	8000d90 <__aeabi_ddiv+0x208>
 8001026:	4650      	mov	r0, sl
 8001028:	f001 f906 	bl	8002238 <__clzsi2>
 800102c:	3020      	adds	r0, #32
 800102e:	e69a      	b.n	8000d66 <__aeabi_ddiv+0x1de>
 8001030:	42a6      	cmp	r6, r4
 8001032:	d1e2      	bne.n	8000ffa <__aeabi_ddiv+0x472>
 8001034:	45b8      	cmp	r8, r7
 8001036:	d9dc      	bls.n	8000ff2 <__aeabi_ddiv+0x46a>
 8001038:	1a34      	subs	r4, r6, r0
 800103a:	469b      	mov	fp, r3
 800103c:	e759      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 800103e:	2b1f      	cmp	r3, #31
 8001040:	dc65      	bgt.n	800110e <__aeabi_ddiv+0x586>
 8001042:	4c50      	ldr	r4, [pc, #320]	; (8001184 <__aeabi_ddiv+0x5fc>)
 8001044:	9900      	ldr	r1, [sp, #0]
 8001046:	46a4      	mov	ip, r4
 8001048:	465c      	mov	r4, fp
 800104a:	4461      	add	r1, ip
 800104c:	0008      	movs	r0, r1
 800104e:	408c      	lsls	r4, r1
 8001050:	0011      	movs	r1, r2
 8001052:	4082      	lsls	r2, r0
 8001054:	40d9      	lsrs	r1, r3
 8001056:	1e50      	subs	r0, r2, #1
 8001058:	4182      	sbcs	r2, r0
 800105a:	430c      	orrs	r4, r1
 800105c:	4314      	orrs	r4, r2
 800105e:	465a      	mov	r2, fp
 8001060:	40da      	lsrs	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ddiv+0x4f4>
 8001068:	220f      	movs	r2, #15
 800106a:	4022      	ands	r2, r4
 800106c:	2a04      	cmp	r2, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ddiv+0x4f4>
 8001070:	0022      	movs	r2, r4
 8001072:	1d14      	adds	r4, r2, #4
 8001074:	4294      	cmp	r4, r2
 8001076:	4189      	sbcs	r1, r1
 8001078:	4249      	negs	r1, r1
 800107a:	185b      	adds	r3, r3, r1
 800107c:	021a      	lsls	r2, r3, #8
 800107e:	d562      	bpl.n	8001146 <__aeabi_ddiv+0x5be>
 8001080:	2201      	movs	r2, #1
 8001082:	2300      	movs	r3, #0
 8001084:	2700      	movs	r7, #0
 8001086:	e60d      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001088:	428a      	cmp	r2, r1
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x506>
 800108c:	e70a      	b.n	8000ea4 <__aeabi_ddiv+0x31c>
 800108e:	1e83      	subs	r3, r0, #2
 8001090:	1989      	adds	r1, r1, r6
 8001092:	e707      	b.n	8000ea4 <__aeabi_ddiv+0x31c>
 8001094:	230f      	movs	r3, #15
 8001096:	4013      	ands	r3, r2
 8001098:	2b04      	cmp	r3, #4
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x516>
 800109c:	e5e6      	b.n	8000c6c <__aeabi_ddiv+0xe4>
 800109e:	1d17      	adds	r7, r2, #4
 80010a0:	4297      	cmp	r7, r2
 80010a2:	4192      	sbcs	r2, r2
 80010a4:	4253      	negs	r3, r2
 80010a6:	449b      	add	fp, r3
 80010a8:	08fa      	lsrs	r2, r7, #3
 80010aa:	e5e0      	b.n	8000c6e <__aeabi_ddiv+0xe6>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_ddiv+0x52a>
 80010b0:	e5d7      	b.n	8000c62 <__aeabi_ddiv+0xda>
 80010b2:	1871      	adds	r1, r6, r1
 80010b4:	1e53      	subs	r3, r2, #1
 80010b6:	42b1      	cmp	r1, r6
 80010b8:	d327      	bcc.n	800110a <__aeabi_ddiv+0x582>
 80010ba:	42a9      	cmp	r1, r5
 80010bc:	d315      	bcc.n	80010ea <__aeabi_ddiv+0x562>
 80010be:	d058      	beq.n	8001172 <__aeabi_ddiv+0x5ea>
 80010c0:	001a      	movs	r2, r3
 80010c2:	e773      	b.n	8000fac <__aeabi_ddiv+0x424>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_ddiv+0x542>
 80010c8:	e604      	b.n	8000cd4 <__aeabi_ddiv+0x14c>
 80010ca:	2301      	movs	r3, #1
 80010cc:	2200      	movs	r2, #0
 80010ce:	449b      	add	fp, r3
 80010d0:	e5cd      	b.n	8000c6e <__aeabi_ddiv+0xe6>
 80010d2:	2302      	movs	r3, #2
 80010d4:	4447      	add	r7, r8
 80010d6:	4547      	cmp	r7, r8
 80010d8:	4189      	sbcs	r1, r1
 80010da:	425b      	negs	r3, r3
 80010dc:	469c      	mov	ip, r3
 80010de:	4249      	negs	r1, r1
 80010e0:	1989      	adds	r1, r1, r6
 80010e2:	190c      	adds	r4, r1, r4
 80010e4:	44e3      	add	fp, ip
 80010e6:	1a24      	subs	r4, r4, r0
 80010e8:	e703      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 80010ea:	4643      	mov	r3, r8
 80010ec:	005f      	lsls	r7, r3, #1
 80010ee:	4547      	cmp	r7, r8
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	46b8      	mov	r8, r7
 80010f4:	425b      	negs	r3, r3
 80010f6:	199e      	adds	r6, r3, r6
 80010f8:	3a02      	subs	r2, #2
 80010fa:	1989      	adds	r1, r1, r6
 80010fc:	42a9      	cmp	r1, r5
 80010fe:	d000      	beq.n	8001102 <__aeabi_ddiv+0x57a>
 8001100:	e754      	b.n	8000fac <__aeabi_ddiv+0x424>
 8001102:	4540      	cmp	r0, r8
 8001104:	d000      	beq.n	8001108 <__aeabi_ddiv+0x580>
 8001106:	e751      	b.n	8000fac <__aeabi_ddiv+0x424>
 8001108:	e5ab      	b.n	8000c62 <__aeabi_ddiv+0xda>
 800110a:	001a      	movs	r2, r3
 800110c:	e7f6      	b.n	80010fc <__aeabi_ddiv+0x574>
 800110e:	211f      	movs	r1, #31
 8001110:	465f      	mov	r7, fp
 8001112:	4249      	negs	r1, r1
 8001114:	1b0c      	subs	r4, r1, r4
 8001116:	40e7      	lsrs	r7, r4
 8001118:	2b20      	cmp	r3, #32
 800111a:	d007      	beq.n	800112c <__aeabi_ddiv+0x5a4>
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <__aeabi_ddiv+0x600>)
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	468c      	mov	ip, r1
 8001122:	4463      	add	r3, ip
 8001124:	0018      	movs	r0, r3
 8001126:	465b      	mov	r3, fp
 8001128:	4083      	lsls	r3, r0
 800112a:	431a      	orrs	r2, r3
 800112c:	1e50      	subs	r0, r2, #1
 800112e:	4182      	sbcs	r2, r0
 8001130:	433a      	orrs	r2, r7
 8001132:	2707      	movs	r7, #7
 8001134:	2300      	movs	r3, #0
 8001136:	4017      	ands	r7, r2
 8001138:	d009      	beq.n	800114e <__aeabi_ddiv+0x5c6>
 800113a:	210f      	movs	r1, #15
 800113c:	2300      	movs	r3, #0
 800113e:	4011      	ands	r1, r2
 8001140:	0014      	movs	r4, r2
 8001142:	2904      	cmp	r1, #4
 8001144:	d195      	bne.n	8001072 <__aeabi_ddiv+0x4ea>
 8001146:	0022      	movs	r2, r4
 8001148:	075f      	lsls	r7, r3, #29
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	0b1b      	lsrs	r3, r3, #12
 800114e:	08d2      	lsrs	r2, r2, #3
 8001150:	4317      	orrs	r7, r2
 8001152:	2200      	movs	r2, #0
 8001154:	e5a6      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	4659      	mov	r1, fp
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	430b      	orrs	r3, r1
 800115e:	031b      	lsls	r3, r3, #12
 8001160:	0017      	movs	r7, r2
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <__aeabi_ddiv+0x5f8>)
 8001166:	e59d      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001168:	42bd      	cmp	r5, r7
 800116a:	d8b2      	bhi.n	80010d2 <__aeabi_ddiv+0x54a>
 800116c:	469b      	mov	fp, r3
 800116e:	2400      	movs	r4, #0
 8001170:	e6bf      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 8001172:	4580      	cmp	r8, r0
 8001174:	d3b9      	bcc.n	80010ea <__aeabi_ddiv+0x562>
 8001176:	001a      	movs	r2, r3
 8001178:	e7c3      	b.n	8001102 <__aeabi_ddiv+0x57a>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	000003ff 	.word	0x000003ff
 8001180:	000007ff 	.word	0x000007ff
 8001184:	0000041e 	.word	0x0000041e
 8001188:	0000043e 	.word	0x0000043e

0800118c <__eqdf2>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	464f      	mov	r7, r9
 8001190:	4646      	mov	r6, r8
 8001192:	46d6      	mov	lr, sl
 8001194:	4684      	mov	ip, r0
 8001196:	b5c0      	push	{r6, r7, lr}
 8001198:	4680      	mov	r8, r0
 800119a:	4e19      	ldr	r6, [pc, #100]	; (8001200 <__eqdf2+0x74>)
 800119c:	0318      	lsls	r0, r3, #12
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	004d      	lsls	r5, r1, #1
 80011a2:	0b00      	lsrs	r0, r0, #12
 80011a4:	005c      	lsls	r4, r3, #1
 80011a6:	4682      	mov	sl, r0
 80011a8:	0b3f      	lsrs	r7, r7, #12
 80011aa:	0d6d      	lsrs	r5, r5, #21
 80011ac:	0fc9      	lsrs	r1, r1, #31
 80011ae:	4691      	mov	r9, r2
 80011b0:	0d64      	lsrs	r4, r4, #21
 80011b2:	0fdb      	lsrs	r3, r3, #31
 80011b4:	2001      	movs	r0, #1
 80011b6:	42b5      	cmp	r5, r6
 80011b8:	d00a      	beq.n	80011d0 <__eqdf2+0x44>
 80011ba:	42b4      	cmp	r4, r6
 80011bc:	d003      	beq.n	80011c6 <__eqdf2+0x3a>
 80011be:	42a5      	cmp	r5, r4
 80011c0:	d101      	bne.n	80011c6 <__eqdf2+0x3a>
 80011c2:	4557      	cmp	r7, sl
 80011c4:	d00c      	beq.n	80011e0 <__eqdf2+0x54>
 80011c6:	bc1c      	pop	{r2, r3, r4}
 80011c8:	4690      	mov	r8, r2
 80011ca:	4699      	mov	r9, r3
 80011cc:	46a2      	mov	sl, r4
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d0:	4666      	mov	r6, ip
 80011d2:	433e      	orrs	r6, r7
 80011d4:	d1f7      	bne.n	80011c6 <__eqdf2+0x3a>
 80011d6:	42ac      	cmp	r4, r5
 80011d8:	d1f5      	bne.n	80011c6 <__eqdf2+0x3a>
 80011da:	4654      	mov	r4, sl
 80011dc:	4314      	orrs	r4, r2
 80011de:	d1f2      	bne.n	80011c6 <__eqdf2+0x3a>
 80011e0:	2001      	movs	r0, #1
 80011e2:	45c8      	cmp	r8, r9
 80011e4:	d1ef      	bne.n	80011c6 <__eqdf2+0x3a>
 80011e6:	4299      	cmp	r1, r3
 80011e8:	d007      	beq.n	80011fa <__eqdf2+0x6e>
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	d1eb      	bne.n	80011c6 <__eqdf2+0x3a>
 80011ee:	4663      	mov	r3, ip
 80011f0:	431f      	orrs	r7, r3
 80011f2:	0038      	movs	r0, r7
 80011f4:	1e47      	subs	r7, r0, #1
 80011f6:	41b8      	sbcs	r0, r7
 80011f8:	e7e5      	b.n	80011c6 <__eqdf2+0x3a>
 80011fa:	2000      	movs	r0, #0
 80011fc:	e7e3      	b.n	80011c6 <__eqdf2+0x3a>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	000007ff 	.word	0x000007ff

08001204 <__gedf2>:
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	464f      	mov	r7, r9
 8001208:	4646      	mov	r6, r8
 800120a:	46d6      	mov	lr, sl
 800120c:	004d      	lsls	r5, r1, #1
 800120e:	b5c0      	push	{r6, r7, lr}
 8001210:	030e      	lsls	r6, r1, #12
 8001212:	0fc9      	lsrs	r1, r1, #31
 8001214:	468a      	mov	sl, r1
 8001216:	492c      	ldr	r1, [pc, #176]	; (80012c8 <__gedf2+0xc4>)
 8001218:	031f      	lsls	r7, r3, #12
 800121a:	005c      	lsls	r4, r3, #1
 800121c:	4680      	mov	r8, r0
 800121e:	0b36      	lsrs	r6, r6, #12
 8001220:	0d6d      	lsrs	r5, r5, #21
 8001222:	4691      	mov	r9, r2
 8001224:	0b3f      	lsrs	r7, r7, #12
 8001226:	0d64      	lsrs	r4, r4, #21
 8001228:	0fdb      	lsrs	r3, r3, #31
 800122a:	428d      	cmp	r5, r1
 800122c:	d01e      	beq.n	800126c <__gedf2+0x68>
 800122e:	428c      	cmp	r4, r1
 8001230:	d016      	beq.n	8001260 <__gedf2+0x5c>
 8001232:	2d00      	cmp	r5, #0
 8001234:	d11e      	bne.n	8001274 <__gedf2+0x70>
 8001236:	4330      	orrs	r0, r6
 8001238:	4684      	mov	ip, r0
 800123a:	2c00      	cmp	r4, #0
 800123c:	d101      	bne.n	8001242 <__gedf2+0x3e>
 800123e:	433a      	orrs	r2, r7
 8001240:	d023      	beq.n	800128a <__gedf2+0x86>
 8001242:	4662      	mov	r2, ip
 8001244:	2a00      	cmp	r2, #0
 8001246:	d01a      	beq.n	800127e <__gedf2+0x7a>
 8001248:	459a      	cmp	sl, r3
 800124a:	d029      	beq.n	80012a0 <__gedf2+0x9c>
 800124c:	4651      	mov	r1, sl
 800124e:	2002      	movs	r0, #2
 8001250:	3901      	subs	r1, #1
 8001252:	4008      	ands	r0, r1
 8001254:	3801      	subs	r0, #1
 8001256:	bc1c      	pop	{r2, r3, r4}
 8001258:	4690      	mov	r8, r2
 800125a:	4699      	mov	r9, r3
 800125c:	46a2      	mov	sl, r4
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	0039      	movs	r1, r7
 8001262:	4311      	orrs	r1, r2
 8001264:	d0e5      	beq.n	8001232 <__gedf2+0x2e>
 8001266:	2002      	movs	r0, #2
 8001268:	4240      	negs	r0, r0
 800126a:	e7f4      	b.n	8001256 <__gedf2+0x52>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fa      	bne.n	8001266 <__gedf2+0x62>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d00f      	beq.n	8001294 <__gedf2+0x90>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d10f      	bne.n	8001298 <__gedf2+0x94>
 8001278:	433a      	orrs	r2, r7
 800127a:	d0e7      	beq.n	800124c <__gedf2+0x48>
 800127c:	e00c      	b.n	8001298 <__gedf2+0x94>
 800127e:	2201      	movs	r2, #1
 8001280:	3b01      	subs	r3, #1
 8001282:	4393      	bics	r3, r2
 8001284:	0018      	movs	r0, r3
 8001286:	3001      	adds	r0, #1
 8001288:	e7e5      	b.n	8001256 <__gedf2+0x52>
 800128a:	4663      	mov	r3, ip
 800128c:	2000      	movs	r0, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0e1      	beq.n	8001256 <__gedf2+0x52>
 8001292:	e7db      	b.n	800124c <__gedf2+0x48>
 8001294:	433a      	orrs	r2, r7
 8001296:	d1e6      	bne.n	8001266 <__gedf2+0x62>
 8001298:	459a      	cmp	sl, r3
 800129a:	d1d7      	bne.n	800124c <__gedf2+0x48>
 800129c:	42a5      	cmp	r5, r4
 800129e:	dcd5      	bgt.n	800124c <__gedf2+0x48>
 80012a0:	42a5      	cmp	r5, r4
 80012a2:	db05      	blt.n	80012b0 <__gedf2+0xac>
 80012a4:	42be      	cmp	r6, r7
 80012a6:	d8d1      	bhi.n	800124c <__gedf2+0x48>
 80012a8:	d008      	beq.n	80012bc <__gedf2+0xb8>
 80012aa:	2000      	movs	r0, #0
 80012ac:	42be      	cmp	r6, r7
 80012ae:	d2d2      	bcs.n	8001256 <__gedf2+0x52>
 80012b0:	4650      	mov	r0, sl
 80012b2:	2301      	movs	r3, #1
 80012b4:	3801      	subs	r0, #1
 80012b6:	4398      	bics	r0, r3
 80012b8:	3001      	adds	r0, #1
 80012ba:	e7cc      	b.n	8001256 <__gedf2+0x52>
 80012bc:	45c8      	cmp	r8, r9
 80012be:	d8c5      	bhi.n	800124c <__gedf2+0x48>
 80012c0:	2000      	movs	r0, #0
 80012c2:	45c8      	cmp	r8, r9
 80012c4:	d3f4      	bcc.n	80012b0 <__gedf2+0xac>
 80012c6:	e7c6      	b.n	8001256 <__gedf2+0x52>
 80012c8:	000007ff 	.word	0x000007ff

080012cc <__ledf2>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	464f      	mov	r7, r9
 80012d0:	4646      	mov	r6, r8
 80012d2:	46d6      	mov	lr, sl
 80012d4:	004d      	lsls	r5, r1, #1
 80012d6:	b5c0      	push	{r6, r7, lr}
 80012d8:	030e      	lsls	r6, r1, #12
 80012da:	0fc9      	lsrs	r1, r1, #31
 80012dc:	468a      	mov	sl, r1
 80012de:	492e      	ldr	r1, [pc, #184]	; (8001398 <__ledf2+0xcc>)
 80012e0:	031f      	lsls	r7, r3, #12
 80012e2:	005c      	lsls	r4, r3, #1
 80012e4:	4680      	mov	r8, r0
 80012e6:	0b36      	lsrs	r6, r6, #12
 80012e8:	0d6d      	lsrs	r5, r5, #21
 80012ea:	4691      	mov	r9, r2
 80012ec:	0b3f      	lsrs	r7, r7, #12
 80012ee:	0d64      	lsrs	r4, r4, #21
 80012f0:	0fdb      	lsrs	r3, r3, #31
 80012f2:	428d      	cmp	r5, r1
 80012f4:	d018      	beq.n	8001328 <__ledf2+0x5c>
 80012f6:	428c      	cmp	r4, r1
 80012f8:	d011      	beq.n	800131e <__ledf2+0x52>
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	d118      	bne.n	8001330 <__ledf2+0x64>
 80012fe:	4330      	orrs	r0, r6
 8001300:	4684      	mov	ip, r0
 8001302:	2c00      	cmp	r4, #0
 8001304:	d11e      	bne.n	8001344 <__ledf2+0x78>
 8001306:	433a      	orrs	r2, r7
 8001308:	d11c      	bne.n	8001344 <__ledf2+0x78>
 800130a:	4663      	mov	r3, ip
 800130c:	2000      	movs	r0, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <__ledf2+0xa8>
 8001312:	4651      	mov	r1, sl
 8001314:	2002      	movs	r0, #2
 8001316:	3901      	subs	r1, #1
 8001318:	4008      	ands	r0, r1
 800131a:	3801      	subs	r0, #1
 800131c:	e02a      	b.n	8001374 <__ledf2+0xa8>
 800131e:	0039      	movs	r1, r7
 8001320:	4311      	orrs	r1, r2
 8001322:	d0ea      	beq.n	80012fa <__ledf2+0x2e>
 8001324:	2002      	movs	r0, #2
 8001326:	e025      	b.n	8001374 <__ledf2+0xa8>
 8001328:	4330      	orrs	r0, r6
 800132a:	d1fb      	bne.n	8001324 <__ledf2+0x58>
 800132c:	42ac      	cmp	r4, r5
 800132e:	d026      	beq.n	800137e <__ledf2+0xb2>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d126      	bne.n	8001382 <__ledf2+0xb6>
 8001334:	433a      	orrs	r2, r7
 8001336:	d124      	bne.n	8001382 <__ledf2+0xb6>
 8001338:	4651      	mov	r1, sl
 800133a:	2002      	movs	r0, #2
 800133c:	3901      	subs	r1, #1
 800133e:	4008      	ands	r0, r1
 8001340:	3801      	subs	r0, #1
 8001342:	e017      	b.n	8001374 <__ledf2+0xa8>
 8001344:	4662      	mov	r2, ip
 8001346:	2a00      	cmp	r2, #0
 8001348:	d00f      	beq.n	800136a <__ledf2+0x9e>
 800134a:	459a      	cmp	sl, r3
 800134c:	d1e1      	bne.n	8001312 <__ledf2+0x46>
 800134e:	42a5      	cmp	r5, r4
 8001350:	db05      	blt.n	800135e <__ledf2+0x92>
 8001352:	42be      	cmp	r6, r7
 8001354:	d8dd      	bhi.n	8001312 <__ledf2+0x46>
 8001356:	d019      	beq.n	800138c <__ledf2+0xc0>
 8001358:	2000      	movs	r0, #0
 800135a:	42be      	cmp	r6, r7
 800135c:	d20a      	bcs.n	8001374 <__ledf2+0xa8>
 800135e:	4650      	mov	r0, sl
 8001360:	2301      	movs	r3, #1
 8001362:	3801      	subs	r0, #1
 8001364:	4398      	bics	r0, r3
 8001366:	3001      	adds	r0, #1
 8001368:	e004      	b.n	8001374 <__ledf2+0xa8>
 800136a:	2201      	movs	r2, #1
 800136c:	3b01      	subs	r3, #1
 800136e:	4393      	bics	r3, r2
 8001370:	0018      	movs	r0, r3
 8001372:	3001      	adds	r0, #1
 8001374:	bc1c      	pop	{r2, r3, r4}
 8001376:	4690      	mov	r8, r2
 8001378:	4699      	mov	r9, r3
 800137a:	46a2      	mov	sl, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	433a      	orrs	r2, r7
 8001380:	d1d0      	bne.n	8001324 <__ledf2+0x58>
 8001382:	459a      	cmp	sl, r3
 8001384:	d1c5      	bne.n	8001312 <__ledf2+0x46>
 8001386:	42a5      	cmp	r5, r4
 8001388:	dcc3      	bgt.n	8001312 <__ledf2+0x46>
 800138a:	e7e0      	b.n	800134e <__ledf2+0x82>
 800138c:	45c8      	cmp	r8, r9
 800138e:	d8c0      	bhi.n	8001312 <__ledf2+0x46>
 8001390:	2000      	movs	r0, #0
 8001392:	45c8      	cmp	r8, r9
 8001394:	d3e3      	bcc.n	800135e <__ledf2+0x92>
 8001396:	e7ed      	b.n	8001374 <__ledf2+0xa8>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__aeabi_dmul>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	464e      	mov	r6, r9
 80013a4:	4645      	mov	r5, r8
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	4683      	mov	fp, r0
 80013aa:	0006      	movs	r6, r0
 80013ac:	030f      	lsls	r7, r1, #12
 80013ae:	0048      	lsls	r0, r1, #1
 80013b0:	b087      	sub	sp, #28
 80013b2:	4692      	mov	sl, r2
 80013b4:	001d      	movs	r5, r3
 80013b6:	0b3f      	lsrs	r7, r7, #12
 80013b8:	0d40      	lsrs	r0, r0, #21
 80013ba:	0fcc      	lsrs	r4, r1, #31
 80013bc:	2800      	cmp	r0, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0x26>
 80013c0:	e06f      	b.n	80014a2 <__aeabi_dmul+0x106>
 80013c2:	4bde      	ldr	r3, [pc, #888]	; (800173c <__aeabi_dmul+0x3a0>)
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d038      	beq.n	800143a <__aeabi_dmul+0x9e>
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	00ff      	lsls	r7, r7, #3
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	431f      	orrs	r7, r3
 80013d0:	0f73      	lsrs	r3, r6, #29
 80013d2:	433b      	orrs	r3, r7
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	4bda      	ldr	r3, [pc, #872]	; (8001740 <__aeabi_dmul+0x3a4>)
 80013d8:	2700      	movs	r7, #0
 80013da:	4699      	mov	r9, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	469b      	mov	fp, r3
 80013e0:	00f6      	lsls	r6, r6, #3
 80013e2:	4481      	add	r9, r0
 80013e4:	032b      	lsls	r3, r5, #12
 80013e6:	0069      	lsls	r1, r5, #1
 80013e8:	0b1b      	lsrs	r3, r3, #12
 80013ea:	4652      	mov	r2, sl
 80013ec:	4698      	mov	r8, r3
 80013ee:	0d49      	lsrs	r1, r1, #21
 80013f0:	0fed      	lsrs	r5, r5, #31
 80013f2:	2900      	cmp	r1, #0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dmul+0x5c>
 80013f6:	e085      	b.n	8001504 <__aeabi_dmul+0x168>
 80013f8:	4bd0      	ldr	r3, [pc, #832]	; (800173c <__aeabi_dmul+0x3a0>)
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dmul+0x64>
 80013fe:	e073      	b.n	80014e8 <__aeabi_dmul+0x14c>
 8001400:	4643      	mov	r3, r8
 8001402:	00da      	lsls	r2, r3, #3
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	4313      	orrs	r3, r2
 800140a:	4652      	mov	r2, sl
 800140c:	48cc      	ldr	r0, [pc, #816]	; (8001740 <__aeabi_dmul+0x3a4>)
 800140e:	0f52      	lsrs	r2, r2, #29
 8001410:	4684      	mov	ip, r0
 8001412:	4313      	orrs	r3, r2
 8001414:	4652      	mov	r2, sl
 8001416:	2000      	movs	r0, #0
 8001418:	4461      	add	r1, ip
 800141a:	00d2      	lsls	r2, r2, #3
 800141c:	4489      	add	r9, r1
 800141e:	0021      	movs	r1, r4
 8001420:	4069      	eors	r1, r5
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	468c      	mov	ip, r1
 8001426:	2101      	movs	r1, #1
 8001428:	4449      	add	r1, r9
 800142a:	468a      	mov	sl, r1
 800142c:	2f0f      	cmp	r7, #15
 800142e:	d900      	bls.n	8001432 <__aeabi_dmul+0x96>
 8001430:	e090      	b.n	8001554 <__aeabi_dmul+0x1b8>
 8001432:	49c4      	ldr	r1, [pc, #784]	; (8001744 <__aeabi_dmul+0x3a8>)
 8001434:	00bf      	lsls	r7, r7, #2
 8001436:	59cf      	ldr	r7, [r1, r7]
 8001438:	46bf      	mov	pc, r7
 800143a:	465b      	mov	r3, fp
 800143c:	433b      	orrs	r3, r7
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	d000      	beq.n	8001444 <__aeabi_dmul+0xa8>
 8001442:	e16a      	b.n	800171a <__aeabi_dmul+0x37e>
 8001444:	2302      	movs	r3, #2
 8001446:	2708      	movs	r7, #8
 8001448:	2600      	movs	r6, #0
 800144a:	4681      	mov	r9, r0
 800144c:	469b      	mov	fp, r3
 800144e:	e7c9      	b.n	80013e4 <__aeabi_dmul+0x48>
 8001450:	0032      	movs	r2, r6
 8001452:	4658      	mov	r0, fp
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	4661      	mov	r1, ip
 8001458:	9100      	str	r1, [sp, #0]
 800145a:	2802      	cmp	r0, #2
 800145c:	d100      	bne.n	8001460 <__aeabi_dmul+0xc4>
 800145e:	e075      	b.n	800154c <__aeabi_dmul+0x1b0>
 8001460:	2803      	cmp	r0, #3
 8001462:	d100      	bne.n	8001466 <__aeabi_dmul+0xca>
 8001464:	e1fe      	b.n	8001864 <__aeabi_dmul+0x4c8>
 8001466:	2801      	cmp	r0, #1
 8001468:	d000      	beq.n	800146c <__aeabi_dmul+0xd0>
 800146a:	e12c      	b.n	80016c6 <__aeabi_dmul+0x32a>
 800146c:	2300      	movs	r3, #0
 800146e:	2700      	movs	r7, #0
 8001470:	2600      	movs	r6, #0
 8001472:	2500      	movs	r5, #0
 8001474:	033f      	lsls	r7, r7, #12
 8001476:	0d2a      	lsrs	r2, r5, #20
 8001478:	0b3f      	lsrs	r7, r7, #12
 800147a:	48b3      	ldr	r0, [pc, #716]	; (8001748 <__aeabi_dmul+0x3ac>)
 800147c:	0512      	lsls	r2, r2, #20
 800147e:	433a      	orrs	r2, r7
 8001480:	4002      	ands	r2, r0
 8001482:	051b      	lsls	r3, r3, #20
 8001484:	4313      	orrs	r3, r2
 8001486:	9a00      	ldr	r2, [sp, #0]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	07d1      	lsls	r1, r2, #31
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	430b      	orrs	r3, r1
 8001490:	0030      	movs	r0, r6
 8001492:	0019      	movs	r1, r3
 8001494:	b007      	add	sp, #28
 8001496:	bc3c      	pop	{r2, r3, r4, r5}
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
 800149c:	46a2      	mov	sl, r4
 800149e:	46ab      	mov	fp, r5
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	465b      	mov	r3, fp
 80014a4:	433b      	orrs	r3, r7
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	d100      	bne.n	80014ac <__aeabi_dmul+0x110>
 80014aa:	e12f      	b.n	800170c <__aeabi_dmul+0x370>
 80014ac:	2f00      	cmp	r7, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dmul+0x116>
 80014b0:	e1a5      	b.n	80017fe <__aeabi_dmul+0x462>
 80014b2:	0038      	movs	r0, r7
 80014b4:	f000 fec0 	bl	8002238 <__clzsi2>
 80014b8:	0003      	movs	r3, r0
 80014ba:	3b0b      	subs	r3, #11
 80014bc:	2b1c      	cmp	r3, #28
 80014be:	dd00      	ble.n	80014c2 <__aeabi_dmul+0x126>
 80014c0:	e196      	b.n	80017f0 <__aeabi_dmul+0x454>
 80014c2:	221d      	movs	r2, #29
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	465a      	mov	r2, fp
 80014c8:	0001      	movs	r1, r0
 80014ca:	40da      	lsrs	r2, r3
 80014cc:	465e      	mov	r6, fp
 80014ce:	3908      	subs	r1, #8
 80014d0:	408f      	lsls	r7, r1
 80014d2:	0013      	movs	r3, r2
 80014d4:	408e      	lsls	r6, r1
 80014d6:	433b      	orrs	r3, r7
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b9c      	ldr	r3, [pc, #624]	; (800174c <__aeabi_dmul+0x3b0>)
 80014dc:	2700      	movs	r7, #0
 80014de:	1a1b      	subs	r3, r3, r0
 80014e0:	4699      	mov	r9, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	469b      	mov	fp, r3
 80014e6:	e77d      	b.n	80013e4 <__aeabi_dmul+0x48>
 80014e8:	4641      	mov	r1, r8
 80014ea:	4653      	mov	r3, sl
 80014ec:	430b      	orrs	r3, r1
 80014ee:	4993      	ldr	r1, [pc, #588]	; (800173c <__aeabi_dmul+0x3a0>)
 80014f0:	468c      	mov	ip, r1
 80014f2:	44e1      	add	r9, ip
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d000      	beq.n	80014fa <__aeabi_dmul+0x15e>
 80014f8:	e11a      	b.n	8001730 <__aeabi_dmul+0x394>
 80014fa:	2202      	movs	r2, #2
 80014fc:	2002      	movs	r0, #2
 80014fe:	4317      	orrs	r7, r2
 8001500:	2200      	movs	r2, #0
 8001502:	e78c      	b.n	800141e <__aeabi_dmul+0x82>
 8001504:	4313      	orrs	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x16e>
 8001508:	e10d      	b.n	8001726 <__aeabi_dmul+0x38a>
 800150a:	4643      	mov	r3, r8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x176>
 8001510:	e181      	b.n	8001816 <__aeabi_dmul+0x47a>
 8001512:	4640      	mov	r0, r8
 8001514:	f000 fe90 	bl	8002238 <__clzsi2>
 8001518:	0002      	movs	r2, r0
 800151a:	3a0b      	subs	r2, #11
 800151c:	2a1c      	cmp	r2, #28
 800151e:	dd00      	ble.n	8001522 <__aeabi_dmul+0x186>
 8001520:	e172      	b.n	8001808 <__aeabi_dmul+0x46c>
 8001522:	0001      	movs	r1, r0
 8001524:	4643      	mov	r3, r8
 8001526:	3908      	subs	r1, #8
 8001528:	408b      	lsls	r3, r1
 800152a:	4698      	mov	r8, r3
 800152c:	231d      	movs	r3, #29
 800152e:	1a9a      	subs	r2, r3, r2
 8001530:	4653      	mov	r3, sl
 8001532:	40d3      	lsrs	r3, r2
 8001534:	001a      	movs	r2, r3
 8001536:	4643      	mov	r3, r8
 8001538:	4313      	orrs	r3, r2
 800153a:	4652      	mov	r2, sl
 800153c:	408a      	lsls	r2, r1
 800153e:	4649      	mov	r1, r9
 8001540:	1a08      	subs	r0, r1, r0
 8001542:	4982      	ldr	r1, [pc, #520]	; (800174c <__aeabi_dmul+0x3b0>)
 8001544:	4689      	mov	r9, r1
 8001546:	4481      	add	r9, r0
 8001548:	2000      	movs	r0, #0
 800154a:	e768      	b.n	800141e <__aeabi_dmul+0x82>
 800154c:	4b7b      	ldr	r3, [pc, #492]	; (800173c <__aeabi_dmul+0x3a0>)
 800154e:	2700      	movs	r7, #0
 8001550:	2600      	movs	r6, #0
 8001552:	e78e      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001554:	0c14      	lsrs	r4, r2, #16
 8001556:	0412      	lsls	r2, r2, #16
 8001558:	0c12      	lsrs	r2, r2, #16
 800155a:	0011      	movs	r1, r2
 800155c:	0c37      	lsrs	r7, r6, #16
 800155e:	0436      	lsls	r6, r6, #16
 8001560:	0c35      	lsrs	r5, r6, #16
 8001562:	4379      	muls	r1, r7
 8001564:	0028      	movs	r0, r5
 8001566:	468c      	mov	ip, r1
 8001568:	002e      	movs	r6, r5
 800156a:	4360      	muls	r0, r4
 800156c:	4460      	add	r0, ip
 800156e:	4683      	mov	fp, r0
 8001570:	4356      	muls	r6, r2
 8001572:	0021      	movs	r1, r4
 8001574:	0c30      	lsrs	r0, r6, #16
 8001576:	4680      	mov	r8, r0
 8001578:	4658      	mov	r0, fp
 800157a:	4379      	muls	r1, r7
 800157c:	4440      	add	r0, r8
 800157e:	9102      	str	r1, [sp, #8]
 8001580:	4584      	cmp	ip, r0
 8001582:	d906      	bls.n	8001592 <__aeabi_dmul+0x1f6>
 8001584:	4688      	mov	r8, r1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	468c      	mov	ip, r1
 800158c:	44e0      	add	r8, ip
 800158e:	4641      	mov	r1, r8
 8001590:	9102      	str	r1, [sp, #8]
 8001592:	0436      	lsls	r6, r6, #16
 8001594:	0c01      	lsrs	r1, r0, #16
 8001596:	0c36      	lsrs	r6, r6, #16
 8001598:	0400      	lsls	r0, r0, #16
 800159a:	468b      	mov	fp, r1
 800159c:	1981      	adds	r1, r0, r6
 800159e:	0c1e      	lsrs	r6, r3, #16
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c1b      	lsrs	r3, r3, #16
 80015a4:	9103      	str	r1, [sp, #12]
 80015a6:	0019      	movs	r1, r3
 80015a8:	4379      	muls	r1, r7
 80015aa:	468c      	mov	ip, r1
 80015ac:	0028      	movs	r0, r5
 80015ae:	4375      	muls	r5, r6
 80015b0:	4465      	add	r5, ip
 80015b2:	46a8      	mov	r8, r5
 80015b4:	4358      	muls	r0, r3
 80015b6:	0c05      	lsrs	r5, r0, #16
 80015b8:	4445      	add	r5, r8
 80015ba:	4377      	muls	r7, r6
 80015bc:	42a9      	cmp	r1, r5
 80015be:	d903      	bls.n	80015c8 <__aeabi_dmul+0x22c>
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0249      	lsls	r1, r1, #9
 80015c4:	468c      	mov	ip, r1
 80015c6:	4467      	add	r7, ip
 80015c8:	0c29      	lsrs	r1, r5, #16
 80015ca:	468c      	mov	ip, r1
 80015cc:	0039      	movs	r1, r7
 80015ce:	0400      	lsls	r0, r0, #16
 80015d0:	0c00      	lsrs	r0, r0, #16
 80015d2:	042d      	lsls	r5, r5, #16
 80015d4:	182d      	adds	r5, r5, r0
 80015d6:	4461      	add	r1, ip
 80015d8:	44ab      	add	fp, r5
 80015da:	9105      	str	r1, [sp, #20]
 80015dc:	4659      	mov	r1, fp
 80015de:	9104      	str	r1, [sp, #16]
 80015e0:	9901      	ldr	r1, [sp, #4]
 80015e2:	040f      	lsls	r7, r1, #16
 80015e4:	0c3f      	lsrs	r7, r7, #16
 80015e6:	0c08      	lsrs	r0, r1, #16
 80015e8:	0039      	movs	r1, r7
 80015ea:	4351      	muls	r1, r2
 80015ec:	4342      	muls	r2, r0
 80015ee:	4690      	mov	r8, r2
 80015f0:	0002      	movs	r2, r0
 80015f2:	468c      	mov	ip, r1
 80015f4:	0c09      	lsrs	r1, r1, #16
 80015f6:	468b      	mov	fp, r1
 80015f8:	4362      	muls	r2, r4
 80015fa:	437c      	muls	r4, r7
 80015fc:	4444      	add	r4, r8
 80015fe:	445c      	add	r4, fp
 8001600:	45a0      	cmp	r8, r4
 8001602:	d903      	bls.n	800160c <__aeabi_dmul+0x270>
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0249      	lsls	r1, r1, #9
 8001608:	4688      	mov	r8, r1
 800160a:	4442      	add	r2, r8
 800160c:	0c21      	lsrs	r1, r4, #16
 800160e:	4688      	mov	r8, r1
 8001610:	4661      	mov	r1, ip
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	0c09      	lsrs	r1, r1, #16
 8001616:	468c      	mov	ip, r1
 8001618:	0039      	movs	r1, r7
 800161a:	4359      	muls	r1, r3
 800161c:	4343      	muls	r3, r0
 800161e:	4370      	muls	r0, r6
 8001620:	437e      	muls	r6, r7
 8001622:	0c0f      	lsrs	r7, r1, #16
 8001624:	18f6      	adds	r6, r6, r3
 8001626:	0424      	lsls	r4, r4, #16
 8001628:	19be      	adds	r6, r7, r6
 800162a:	4464      	add	r4, ip
 800162c:	4442      	add	r2, r8
 800162e:	468c      	mov	ip, r1
 8001630:	42b3      	cmp	r3, r6
 8001632:	d903      	bls.n	800163c <__aeabi_dmul+0x2a0>
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	4698      	mov	r8, r3
 800163a:	4440      	add	r0, r8
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	4661      	mov	r1, ip
 8001640:	4698      	mov	r8, r3
 8001642:	9b04      	ldr	r3, [sp, #16]
 8001644:	0437      	lsls	r7, r6, #16
 8001646:	4443      	add	r3, r8
 8001648:	469b      	mov	fp, r3
 800164a:	45ab      	cmp	fp, r5
 800164c:	41ad      	sbcs	r5, r5
 800164e:	426b      	negs	r3, r5
 8001650:	040d      	lsls	r5, r1, #16
 8001652:	9905      	ldr	r1, [sp, #20]
 8001654:	0c2d      	lsrs	r5, r5, #16
 8001656:	468c      	mov	ip, r1
 8001658:	197f      	adds	r7, r7, r5
 800165a:	4467      	add	r7, ip
 800165c:	18fd      	adds	r5, r7, r3
 800165e:	46a8      	mov	r8, r5
 8001660:	465d      	mov	r5, fp
 8001662:	192d      	adds	r5, r5, r4
 8001664:	42a5      	cmp	r5, r4
 8001666:	41a4      	sbcs	r4, r4
 8001668:	4693      	mov	fp, r2
 800166a:	4264      	negs	r4, r4
 800166c:	46a4      	mov	ip, r4
 800166e:	44c3      	add	fp, r8
 8001670:	44dc      	add	ip, fp
 8001672:	428f      	cmp	r7, r1
 8001674:	41bf      	sbcs	r7, r7
 8001676:	4598      	cmp	r8, r3
 8001678:	419b      	sbcs	r3, r3
 800167a:	4593      	cmp	fp, r2
 800167c:	4192      	sbcs	r2, r2
 800167e:	45a4      	cmp	ip, r4
 8001680:	41a4      	sbcs	r4, r4
 8001682:	425b      	negs	r3, r3
 8001684:	427f      	negs	r7, r7
 8001686:	431f      	orrs	r7, r3
 8001688:	0c36      	lsrs	r6, r6, #16
 800168a:	4252      	negs	r2, r2
 800168c:	4264      	negs	r4, r4
 800168e:	19bf      	adds	r7, r7, r6
 8001690:	4322      	orrs	r2, r4
 8001692:	18bf      	adds	r7, r7, r2
 8001694:	4662      	mov	r2, ip
 8001696:	1838      	adds	r0, r7, r0
 8001698:	0243      	lsls	r3, r0, #9
 800169a:	0dd2      	lsrs	r2, r2, #23
 800169c:	9903      	ldr	r1, [sp, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	026a      	lsls	r2, r5, #9
 80016a2:	430a      	orrs	r2, r1
 80016a4:	1e50      	subs	r0, r2, #1
 80016a6:	4182      	sbcs	r2, r0
 80016a8:	4661      	mov	r1, ip
 80016aa:	0ded      	lsrs	r5, r5, #23
 80016ac:	432a      	orrs	r2, r5
 80016ae:	024e      	lsls	r6, r1, #9
 80016b0:	4332      	orrs	r2, r6
 80016b2:	01d9      	lsls	r1, r3, #7
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dmul+0x31c>
 80016b6:	e0b3      	b.n	8001820 <__aeabi_dmul+0x484>
 80016b8:	2601      	movs	r6, #1
 80016ba:	0850      	lsrs	r0, r2, #1
 80016bc:	4032      	ands	r2, r6
 80016be:	4302      	orrs	r2, r0
 80016c0:	07de      	lsls	r6, r3, #31
 80016c2:	4332      	orrs	r2, r6
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	4c22      	ldr	r4, [pc, #136]	; (8001750 <__aeabi_dmul+0x3b4>)
 80016c8:	4454      	add	r4, sl
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	dd62      	ble.n	8001794 <__aeabi_dmul+0x3f8>
 80016ce:	0751      	lsls	r1, r2, #29
 80016d0:	d009      	beq.n	80016e6 <__aeabi_dmul+0x34a>
 80016d2:	200f      	movs	r0, #15
 80016d4:	4010      	ands	r0, r2
 80016d6:	2804      	cmp	r0, #4
 80016d8:	d005      	beq.n	80016e6 <__aeabi_dmul+0x34a>
 80016da:	1d10      	adds	r0, r2, #4
 80016dc:	4290      	cmp	r0, r2
 80016de:	4192      	sbcs	r2, r2
 80016e0:	4252      	negs	r2, r2
 80016e2:	189b      	adds	r3, r3, r2
 80016e4:	0002      	movs	r2, r0
 80016e6:	01d9      	lsls	r1, r3, #7
 80016e8:	d504      	bpl.n	80016f4 <__aeabi_dmul+0x358>
 80016ea:	2480      	movs	r4, #128	; 0x80
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <__aeabi_dmul+0x3b8>)
 80016ee:	00e4      	lsls	r4, r4, #3
 80016f0:	4003      	ands	r3, r0
 80016f2:	4454      	add	r4, sl
 80016f4:	4818      	ldr	r0, [pc, #96]	; (8001758 <__aeabi_dmul+0x3bc>)
 80016f6:	4284      	cmp	r4, r0
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dmul+0x360>
 80016fa:	e727      	b.n	800154c <__aeabi_dmul+0x1b0>
 80016fc:	075e      	lsls	r6, r3, #29
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	08d2      	lsrs	r2, r2, #3
 8001702:	0b1f      	lsrs	r7, r3, #12
 8001704:	0563      	lsls	r3, r4, #21
 8001706:	4316      	orrs	r6, r2
 8001708:	0d5b      	lsrs	r3, r3, #21
 800170a:	e6b2      	b.n	8001472 <__aeabi_dmul+0xd6>
 800170c:	2300      	movs	r3, #0
 800170e:	4699      	mov	r9, r3
 8001710:	3301      	adds	r3, #1
 8001712:	2704      	movs	r7, #4
 8001714:	2600      	movs	r6, #0
 8001716:	469b      	mov	fp, r3
 8001718:	e664      	b.n	80013e4 <__aeabi_dmul+0x48>
 800171a:	2303      	movs	r3, #3
 800171c:	9701      	str	r7, [sp, #4]
 800171e:	4681      	mov	r9, r0
 8001720:	270c      	movs	r7, #12
 8001722:	469b      	mov	fp, r3
 8001724:	e65e      	b.n	80013e4 <__aeabi_dmul+0x48>
 8001726:	2201      	movs	r2, #1
 8001728:	2001      	movs	r0, #1
 800172a:	4317      	orrs	r7, r2
 800172c:	2200      	movs	r2, #0
 800172e:	e676      	b.n	800141e <__aeabi_dmul+0x82>
 8001730:	2303      	movs	r3, #3
 8001732:	2003      	movs	r0, #3
 8001734:	431f      	orrs	r7, r3
 8001736:	4643      	mov	r3, r8
 8001738:	e671      	b.n	800141e <__aeabi_dmul+0x82>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	000007ff 	.word	0x000007ff
 8001740:	fffffc01 	.word	0xfffffc01
 8001744:	0800d4e4 	.word	0x0800d4e4
 8001748:	800fffff 	.word	0x800fffff
 800174c:	fffffc0d 	.word	0xfffffc0d
 8001750:	000003ff 	.word	0x000003ff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	000007fe 	.word	0x000007fe
 800175c:	2300      	movs	r3, #0
 800175e:	2780      	movs	r7, #128	; 0x80
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	2600      	movs	r6, #0
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001768:	e683      	b.n	8001472 <__aeabi_dmul+0xd6>
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	0032      	movs	r2, r6
 800176e:	46a4      	mov	ip, r4
 8001770:	4658      	mov	r0, fp
 8001772:	e670      	b.n	8001456 <__aeabi_dmul+0xba>
 8001774:	46ac      	mov	ip, r5
 8001776:	e66e      	b.n	8001456 <__aeabi_dmul+0xba>
 8001778:	2780      	movs	r7, #128	; 0x80
 800177a:	9901      	ldr	r1, [sp, #4]
 800177c:	033f      	lsls	r7, r7, #12
 800177e:	4239      	tst	r1, r7
 8001780:	d02d      	beq.n	80017de <__aeabi_dmul+0x442>
 8001782:	423b      	tst	r3, r7
 8001784:	d12b      	bne.n	80017de <__aeabi_dmul+0x442>
 8001786:	431f      	orrs	r7, r3
 8001788:	033f      	lsls	r7, r7, #12
 800178a:	0b3f      	lsrs	r7, r7, #12
 800178c:	9500      	str	r5, [sp, #0]
 800178e:	0016      	movs	r6, r2
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001792:	e66e      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001794:	2501      	movs	r5, #1
 8001796:	1b2d      	subs	r5, r5, r4
 8001798:	2d38      	cmp	r5, #56	; 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dmul+0x402>
 800179c:	e666      	b.n	800146c <__aeabi_dmul+0xd0>
 800179e:	2d1f      	cmp	r5, #31
 80017a0:	dc40      	bgt.n	8001824 <__aeabi_dmul+0x488>
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <__aeabi_dmul+0x4dc>)
 80017a4:	001c      	movs	r4, r3
 80017a6:	4450      	add	r0, sl
 80017a8:	0016      	movs	r6, r2
 80017aa:	4082      	lsls	r2, r0
 80017ac:	4084      	lsls	r4, r0
 80017ae:	40ee      	lsrs	r6, r5
 80017b0:	1e50      	subs	r0, r2, #1
 80017b2:	4182      	sbcs	r2, r0
 80017b4:	4334      	orrs	r4, r6
 80017b6:	4314      	orrs	r4, r2
 80017b8:	40eb      	lsrs	r3, r5
 80017ba:	0762      	lsls	r2, r4, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x436>
 80017be:	220f      	movs	r2, #15
 80017c0:	4022      	ands	r2, r4
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x436>
 80017c6:	0022      	movs	r2, r4
 80017c8:	1d14      	adds	r4, r2, #4
 80017ca:	4294      	cmp	r4, r2
 80017cc:	4180      	sbcs	r0, r0
 80017ce:	4240      	negs	r0, r0
 80017d0:	181b      	adds	r3, r3, r0
 80017d2:	021a      	lsls	r2, r3, #8
 80017d4:	d53e      	bpl.n	8001854 <__aeabi_dmul+0x4b8>
 80017d6:	2301      	movs	r3, #1
 80017d8:	2700      	movs	r7, #0
 80017da:	2600      	movs	r6, #0
 80017dc:	e649      	b.n	8001472 <__aeabi_dmul+0xd6>
 80017de:	2780      	movs	r7, #128	; 0x80
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	033f      	lsls	r7, r7, #12
 80017e4:	431f      	orrs	r7, r3
 80017e6:	033f      	lsls	r7, r7, #12
 80017e8:	0b3f      	lsrs	r7, r7, #12
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <__aeabi_dmul+0x4d8>)
 80017ee:	e640      	b.n	8001472 <__aeabi_dmul+0xd6>
 80017f0:	0003      	movs	r3, r0
 80017f2:	465a      	mov	r2, fp
 80017f4:	3b28      	subs	r3, #40	; 0x28
 80017f6:	409a      	lsls	r2, r3
 80017f8:	2600      	movs	r6, #0
 80017fa:	9201      	str	r2, [sp, #4]
 80017fc:	e66d      	b.n	80014da <__aeabi_dmul+0x13e>
 80017fe:	4658      	mov	r0, fp
 8001800:	f000 fd1a 	bl	8002238 <__clzsi2>
 8001804:	3020      	adds	r0, #32
 8001806:	e657      	b.n	80014b8 <__aeabi_dmul+0x11c>
 8001808:	0003      	movs	r3, r0
 800180a:	4652      	mov	r2, sl
 800180c:	3b28      	subs	r3, #40	; 0x28
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	2200      	movs	r2, #0
 8001814:	e693      	b.n	800153e <__aeabi_dmul+0x1a2>
 8001816:	4650      	mov	r0, sl
 8001818:	f000 fd0e 	bl	8002238 <__clzsi2>
 800181c:	3020      	adds	r0, #32
 800181e:	e67b      	b.n	8001518 <__aeabi_dmul+0x17c>
 8001820:	46ca      	mov	sl, r9
 8001822:	e750      	b.n	80016c6 <__aeabi_dmul+0x32a>
 8001824:	201f      	movs	r0, #31
 8001826:	001e      	movs	r6, r3
 8001828:	4240      	negs	r0, r0
 800182a:	1b04      	subs	r4, r0, r4
 800182c:	40e6      	lsrs	r6, r4
 800182e:	2d20      	cmp	r5, #32
 8001830:	d003      	beq.n	800183a <__aeabi_dmul+0x49e>
 8001832:	4c12      	ldr	r4, [pc, #72]	; (800187c <__aeabi_dmul+0x4e0>)
 8001834:	4454      	add	r4, sl
 8001836:	40a3      	lsls	r3, r4
 8001838:	431a      	orrs	r2, r3
 800183a:	1e50      	subs	r0, r2, #1
 800183c:	4182      	sbcs	r2, r0
 800183e:	4332      	orrs	r2, r6
 8001840:	2607      	movs	r6, #7
 8001842:	2700      	movs	r7, #0
 8001844:	4016      	ands	r6, r2
 8001846:	d009      	beq.n	800185c <__aeabi_dmul+0x4c0>
 8001848:	200f      	movs	r0, #15
 800184a:	2300      	movs	r3, #0
 800184c:	4010      	ands	r0, r2
 800184e:	0014      	movs	r4, r2
 8001850:	2804      	cmp	r0, #4
 8001852:	d1b9      	bne.n	80017c8 <__aeabi_dmul+0x42c>
 8001854:	0022      	movs	r2, r4
 8001856:	075e      	lsls	r6, r3, #29
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	0b1f      	lsrs	r7, r3, #12
 800185c:	08d2      	lsrs	r2, r2, #3
 800185e:	4316      	orrs	r6, r2
 8001860:	2300      	movs	r3, #0
 8001862:	e606      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001864:	2780      	movs	r7, #128	; 0x80
 8001866:	033f      	lsls	r7, r7, #12
 8001868:	431f      	orrs	r7, r3
 800186a:	033f      	lsls	r7, r7, #12
 800186c:	0b3f      	lsrs	r7, r7, #12
 800186e:	0016      	movs	r6, r2
 8001870:	4b00      	ldr	r3, [pc, #0]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001872:	e5fe      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001874:	000007ff 	.word	0x000007ff
 8001878:	0000041e 	.word	0x0000041e
 800187c:	0000043e 	.word	0x0000043e

08001880 <__aeabi_dsub>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	4657      	mov	r7, sl
 8001884:	464e      	mov	r6, r9
 8001886:	4645      	mov	r5, r8
 8001888:	46de      	mov	lr, fp
 800188a:	000c      	movs	r4, r1
 800188c:	0309      	lsls	r1, r1, #12
 800188e:	b5e0      	push	{r5, r6, r7, lr}
 8001890:	0a49      	lsrs	r1, r1, #9
 8001892:	0f46      	lsrs	r6, r0, #29
 8001894:	005f      	lsls	r7, r3, #1
 8001896:	4331      	orrs	r1, r6
 8001898:	031e      	lsls	r6, r3, #12
 800189a:	0fdb      	lsrs	r3, r3, #31
 800189c:	0a76      	lsrs	r6, r6, #9
 800189e:	469b      	mov	fp, r3
 80018a0:	0f53      	lsrs	r3, r2, #29
 80018a2:	4333      	orrs	r3, r6
 80018a4:	4ec8      	ldr	r6, [pc, #800]	; (8001bc8 <__aeabi_dsub+0x348>)
 80018a6:	0065      	lsls	r5, r4, #1
 80018a8:	00c0      	lsls	r0, r0, #3
 80018aa:	0fe4      	lsrs	r4, r4, #31
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	0d6d      	lsrs	r5, r5, #21
 80018b0:	46a2      	mov	sl, r4
 80018b2:	4681      	mov	r9, r0
 80018b4:	0d7f      	lsrs	r7, r7, #21
 80018b6:	469c      	mov	ip, r3
 80018b8:	4690      	mov	r8, r2
 80018ba:	42b7      	cmp	r7, r6
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x40>
 80018be:	e0b9      	b.n	8001a34 <__aeabi_dsub+0x1b4>
 80018c0:	465b      	mov	r3, fp
 80018c2:	2601      	movs	r6, #1
 80018c4:	4073      	eors	r3, r6
 80018c6:	469b      	mov	fp, r3
 80018c8:	1bee      	subs	r6, r5, r7
 80018ca:	45a3      	cmp	fp, r4
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x50>
 80018ce:	e083      	b.n	80019d8 <__aeabi_dsub+0x158>
 80018d0:	2e00      	cmp	r6, #0
 80018d2:	dd63      	ble.n	800199c <__aeabi_dsub+0x11c>
 80018d4:	2f00      	cmp	r7, #0
 80018d6:	d000      	beq.n	80018da <__aeabi_dsub+0x5a>
 80018d8:	e0b1      	b.n	8001a3e <__aeabi_dsub+0x1be>
 80018da:	4663      	mov	r3, ip
 80018dc:	4313      	orrs	r3, r2
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0x62>
 80018e0:	e123      	b.n	8001b2a <__aeabi_dsub+0x2aa>
 80018e2:	1e73      	subs	r3, r6, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d000      	beq.n	80018ea <__aeabi_dsub+0x6a>
 80018e8:	e1ba      	b.n	8001c60 <__aeabi_dsub+0x3e0>
 80018ea:	1a86      	subs	r6, r0, r2
 80018ec:	4663      	mov	r3, ip
 80018ee:	42b0      	cmp	r0, r6
 80018f0:	4180      	sbcs	r0, r0
 80018f2:	2501      	movs	r5, #1
 80018f4:	1ac9      	subs	r1, r1, r3
 80018f6:	4240      	negs	r0, r0
 80018f8:	1a09      	subs	r1, r1, r0
 80018fa:	020b      	lsls	r3, r1, #8
 80018fc:	d400      	bmi.n	8001900 <__aeabi_dsub+0x80>
 80018fe:	e147      	b.n	8001b90 <__aeabi_dsub+0x310>
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	0a4b      	lsrs	r3, r1, #9
 8001904:	4698      	mov	r8, r3
 8001906:	4643      	mov	r3, r8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x8e>
 800190c:	e189      	b.n	8001c22 <__aeabi_dsub+0x3a2>
 800190e:	4640      	mov	r0, r8
 8001910:	f000 fc92 	bl	8002238 <__clzsi2>
 8001914:	0003      	movs	r3, r0
 8001916:	3b08      	subs	r3, #8
 8001918:	2b1f      	cmp	r3, #31
 800191a:	dd00      	ble.n	800191e <__aeabi_dsub+0x9e>
 800191c:	e17c      	b.n	8001c18 <__aeabi_dsub+0x398>
 800191e:	2220      	movs	r2, #32
 8001920:	0030      	movs	r0, r6
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	4641      	mov	r1, r8
 8001926:	40d0      	lsrs	r0, r2
 8001928:	4099      	lsls	r1, r3
 800192a:	0002      	movs	r2, r0
 800192c:	409e      	lsls	r6, r3
 800192e:	430a      	orrs	r2, r1
 8001930:	429d      	cmp	r5, r3
 8001932:	dd00      	ble.n	8001936 <__aeabi_dsub+0xb6>
 8001934:	e16a      	b.n	8001c0c <__aeabi_dsub+0x38c>
 8001936:	1b5d      	subs	r5, r3, r5
 8001938:	1c6b      	adds	r3, r5, #1
 800193a:	2b1f      	cmp	r3, #31
 800193c:	dd00      	ble.n	8001940 <__aeabi_dsub+0xc0>
 800193e:	e194      	b.n	8001c6a <__aeabi_dsub+0x3ea>
 8001940:	2120      	movs	r1, #32
 8001942:	0010      	movs	r0, r2
 8001944:	0035      	movs	r5, r6
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	408e      	lsls	r6, r1
 800194a:	40da      	lsrs	r2, r3
 800194c:	4088      	lsls	r0, r1
 800194e:	40dd      	lsrs	r5, r3
 8001950:	1e71      	subs	r1, r6, #1
 8001952:	418e      	sbcs	r6, r1
 8001954:	0011      	movs	r1, r2
 8001956:	2207      	movs	r2, #7
 8001958:	4328      	orrs	r0, r5
 800195a:	2500      	movs	r5, #0
 800195c:	4306      	orrs	r6, r0
 800195e:	4032      	ands	r2, r6
 8001960:	2a00      	cmp	r2, #0
 8001962:	d009      	beq.n	8001978 <__aeabi_dsub+0xf8>
 8001964:	230f      	movs	r3, #15
 8001966:	4033      	ands	r3, r6
 8001968:	2b04      	cmp	r3, #4
 800196a:	d005      	beq.n	8001978 <__aeabi_dsub+0xf8>
 800196c:	1d33      	adds	r3, r6, #4
 800196e:	42b3      	cmp	r3, r6
 8001970:	41b6      	sbcs	r6, r6
 8001972:	4276      	negs	r6, r6
 8001974:	1989      	adds	r1, r1, r6
 8001976:	001e      	movs	r6, r3
 8001978:	020b      	lsls	r3, r1, #8
 800197a:	d400      	bmi.n	800197e <__aeabi_dsub+0xfe>
 800197c:	e23d      	b.n	8001dfa <__aeabi_dsub+0x57a>
 800197e:	1c6a      	adds	r2, r5, #1
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001982:	0555      	lsls	r5, r2, #21
 8001984:	0d6d      	lsrs	r5, r5, #21
 8001986:	429a      	cmp	r2, r3
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x10c>
 800198a:	e119      	b.n	8001bc0 <__aeabi_dsub+0x340>
 800198c:	4a8f      	ldr	r2, [pc, #572]	; (8001bcc <__aeabi_dsub+0x34c>)
 800198e:	08f6      	lsrs	r6, r6, #3
 8001990:	400a      	ands	r2, r1
 8001992:	0757      	lsls	r7, r2, #29
 8001994:	0252      	lsls	r2, r2, #9
 8001996:	4337      	orrs	r7, r6
 8001998:	0b12      	lsrs	r2, r2, #12
 800199a:	e09b      	b.n	8001ad4 <__aeabi_dsub+0x254>
 800199c:	2e00      	cmp	r6, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dsub+0x122>
 80019a0:	e0c5      	b.n	8001b2e <__aeabi_dsub+0x2ae>
 80019a2:	1c6e      	adds	r6, r5, #1
 80019a4:	0576      	lsls	r6, r6, #21
 80019a6:	0d76      	lsrs	r6, r6, #21
 80019a8:	2e01      	cmp	r6, #1
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dsub+0x12e>
 80019ac:	e148      	b.n	8001c40 <__aeabi_dsub+0x3c0>
 80019ae:	4667      	mov	r7, ip
 80019b0:	1a86      	subs	r6, r0, r2
 80019b2:	1bcb      	subs	r3, r1, r7
 80019b4:	42b0      	cmp	r0, r6
 80019b6:	41bf      	sbcs	r7, r7
 80019b8:	427f      	negs	r7, r7
 80019ba:	46b8      	mov	r8, r7
 80019bc:	001f      	movs	r7, r3
 80019be:	4643      	mov	r3, r8
 80019c0:	1aff      	subs	r7, r7, r3
 80019c2:	003b      	movs	r3, r7
 80019c4:	46b8      	mov	r8, r7
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	d500      	bpl.n	80019cc <__aeabi_dsub+0x14c>
 80019ca:	e15f      	b.n	8001c8c <__aeabi_dsub+0x40c>
 80019cc:	4337      	orrs	r7, r6
 80019ce:	d19a      	bne.n	8001906 <__aeabi_dsub+0x86>
 80019d0:	2200      	movs	r2, #0
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e079      	b.n	8001acc <__aeabi_dsub+0x24c>
 80019d8:	2e00      	cmp	r6, #0
 80019da:	dc00      	bgt.n	80019de <__aeabi_dsub+0x15e>
 80019dc:	e0fa      	b.n	8001bd4 <__aeabi_dsub+0x354>
 80019de:	2f00      	cmp	r7, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x164>
 80019e2:	e08d      	b.n	8001b00 <__aeabi_dsub+0x280>
 80019e4:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <__aeabi_dsub+0x348>)
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d067      	beq.n	8001aba <__aeabi_dsub+0x23a>
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	4667      	mov	r7, ip
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	431f      	orrs	r7, r3
 80019f2:	46bc      	mov	ip, r7
 80019f4:	2e38      	cmp	r6, #56	; 0x38
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dsub+0x17a>
 80019f8:	e152      	b.n	8001ca0 <__aeabi_dsub+0x420>
 80019fa:	4663      	mov	r3, ip
 80019fc:	4313      	orrs	r3, r2
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	4193      	sbcs	r3, r2
 8001a02:	181e      	adds	r6, r3, r0
 8001a04:	4286      	cmp	r6, r0
 8001a06:	4180      	sbcs	r0, r0
 8001a08:	4240      	negs	r0, r0
 8001a0a:	1809      	adds	r1, r1, r0
 8001a0c:	020b      	lsls	r3, r1, #8
 8001a0e:	d400      	bmi.n	8001a12 <__aeabi_dsub+0x192>
 8001a10:	e0be      	b.n	8001b90 <__aeabi_dsub+0x310>
 8001a12:	4b6d      	ldr	r3, [pc, #436]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001a14:	3501      	adds	r5, #1
 8001a16:	429d      	cmp	r5, r3
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x19c>
 8001a1a:	e0d2      	b.n	8001bc2 <__aeabi_dsub+0x342>
 8001a1c:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <__aeabi_dsub+0x34c>)
 8001a1e:	0873      	lsrs	r3, r6, #1
 8001a20:	400a      	ands	r2, r1
 8001a22:	2101      	movs	r1, #1
 8001a24:	400e      	ands	r6, r1
 8001a26:	431e      	orrs	r6, r3
 8001a28:	0851      	lsrs	r1, r2, #1
 8001a2a:	07d3      	lsls	r3, r2, #31
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	431e      	orrs	r6, r3
 8001a30:	4032      	ands	r2, r6
 8001a32:	e795      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001a34:	001e      	movs	r6, r3
 8001a36:	4316      	orrs	r6, r2
 8001a38:	d000      	beq.n	8001a3c <__aeabi_dsub+0x1bc>
 8001a3a:	e745      	b.n	80018c8 <__aeabi_dsub+0x48>
 8001a3c:	e740      	b.n	80018c0 <__aeabi_dsub+0x40>
 8001a3e:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001a40:	429d      	cmp	r5, r3
 8001a42:	d03a      	beq.n	8001aba <__aeabi_dsub+0x23a>
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	4667      	mov	r7, ip
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431f      	orrs	r7, r3
 8001a4c:	46bc      	mov	ip, r7
 8001a4e:	2e38      	cmp	r6, #56	; 0x38
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dsub+0x1d4>
 8001a52:	e0eb      	b.n	8001c2c <__aeabi_dsub+0x3ac>
 8001a54:	2e1f      	cmp	r6, #31
 8001a56:	dc00      	bgt.n	8001a5a <__aeabi_dsub+0x1da>
 8001a58:	e13a      	b.n	8001cd0 <__aeabi_dsub+0x450>
 8001a5a:	0033      	movs	r3, r6
 8001a5c:	4667      	mov	r7, ip
 8001a5e:	3b20      	subs	r3, #32
 8001a60:	40df      	lsrs	r7, r3
 8001a62:	003b      	movs	r3, r7
 8001a64:	2e20      	cmp	r6, #32
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dsub+0x1f4>
 8001a68:	2740      	movs	r7, #64	; 0x40
 8001a6a:	1bbf      	subs	r7, r7, r6
 8001a6c:	4666      	mov	r6, ip
 8001a6e:	40be      	lsls	r6, r7
 8001a70:	4332      	orrs	r2, r6
 8001a72:	4690      	mov	r8, r2
 8001a74:	4646      	mov	r6, r8
 8001a76:	1e72      	subs	r2, r6, #1
 8001a78:	4196      	sbcs	r6, r2
 8001a7a:	4333      	orrs	r3, r6
 8001a7c:	e0da      	b.n	8001c34 <__aeabi_dsub+0x3b4>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x204>
 8001a82:	e214      	b.n	8001eae <__aeabi_dsub+0x62e>
 8001a84:	4663      	mov	r3, ip
 8001a86:	4313      	orrs	r3, r2
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x20c>
 8001a8a:	e168      	b.n	8001d5e <__aeabi_dsub+0x4de>
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	074e      	lsls	r6, r1, #29
 8001a90:	08c0      	lsrs	r0, r0, #3
 8001a92:	08c9      	lsrs	r1, r1, #3
 8001a94:	031b      	lsls	r3, r3, #12
 8001a96:	4306      	orrs	r6, r0
 8001a98:	4219      	tst	r1, r3
 8001a9a:	d008      	beq.n	8001aae <__aeabi_dsub+0x22e>
 8001a9c:	4660      	mov	r0, ip
 8001a9e:	08c0      	lsrs	r0, r0, #3
 8001aa0:	4218      	tst	r0, r3
 8001aa2:	d104      	bne.n	8001aae <__aeabi_dsub+0x22e>
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	0001      	movs	r1, r0
 8001aa8:	08d2      	lsrs	r2, r2, #3
 8001aaa:	075e      	lsls	r6, r3, #29
 8001aac:	4316      	orrs	r6, r2
 8001aae:	00f3      	lsls	r3, r6, #3
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	00c9      	lsls	r1, r1, #3
 8001ab4:	0f72      	lsrs	r2, r6, #29
 8001ab6:	4d44      	ldr	r5, [pc, #272]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	464b      	mov	r3, r9
 8001abc:	08de      	lsrs	r6, r3, #3
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001ac0:	074f      	lsls	r7, r1, #29
 8001ac2:	4337      	orrs	r7, r6
 8001ac4:	08ca      	lsrs	r2, r1, #3
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x24c>
 8001aca:	e06e      	b.n	8001baa <__aeabi_dsub+0x32a>
 8001acc:	0312      	lsls	r2, r2, #12
 8001ace:	056d      	lsls	r5, r5, #21
 8001ad0:	0b12      	lsrs	r2, r2, #12
 8001ad2:	0d6d      	lsrs	r5, r5, #21
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	0312      	lsls	r2, r2, #12
 8001ad8:	0b13      	lsrs	r3, r2, #12
 8001ada:	0d0a      	lsrs	r2, r1, #20
 8001adc:	0512      	lsls	r2, r2, #20
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <__aeabi_dsub+0x350>)
 8001ae2:	052d      	lsls	r5, r5, #20
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	432b      	orrs	r3, r5
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	07e4      	lsls	r4, r4, #31
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	4323      	orrs	r3, r4
 8001af0:	0038      	movs	r0, r7
 8001af2:	0019      	movs	r1, r3
 8001af4:	bc3c      	pop	{r2, r3, r4, r5}
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	46a2      	mov	sl, r4
 8001afc:	46ab      	mov	fp, r5
 8001afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b00:	4663      	mov	r3, ip
 8001b02:	4313      	orrs	r3, r2
 8001b04:	d011      	beq.n	8001b2a <__aeabi_dsub+0x2aa>
 8001b06:	1e73      	subs	r3, r6, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x28e>
 8001b0c:	e107      	b.n	8001d1e <__aeabi_dsub+0x49e>
 8001b0e:	1886      	adds	r6, r0, r2
 8001b10:	4286      	cmp	r6, r0
 8001b12:	4180      	sbcs	r0, r0
 8001b14:	4461      	add	r1, ip
 8001b16:	4240      	negs	r0, r0
 8001b18:	1809      	adds	r1, r1, r0
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	020b      	lsls	r3, r1, #8
 8001b1e:	d537      	bpl.n	8001b90 <__aeabi_dsub+0x310>
 8001b20:	2502      	movs	r5, #2
 8001b22:	e77b      	b.n	8001a1c <__aeabi_dsub+0x19c>
 8001b24:	003e      	movs	r6, r7
 8001b26:	4661      	mov	r1, ip
 8001b28:	4691      	mov	r9, r2
 8001b2a:	0035      	movs	r5, r6
 8001b2c:	e7c5      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001b2e:	465c      	mov	r4, fp
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x2b6>
 8001b34:	e0e1      	b.n	8001cfa <__aeabi_dsub+0x47a>
 8001b36:	000b      	movs	r3, r1
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	d0f3      	beq.n	8001b24 <__aeabi_dsub+0x2a4>
 8001b3c:	1c73      	adds	r3, r6, #1
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x2c2>
 8001b40:	e1ac      	b.n	8001e9c <__aeabi_dsub+0x61c>
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001b44:	429f      	cmp	r7, r3
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x2ca>
 8001b48:	e13a      	b.n	8001dc0 <__aeabi_dsub+0x540>
 8001b4a:	43f3      	mvns	r3, r6
 8001b4c:	2b38      	cmp	r3, #56	; 0x38
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x2d2>
 8001b50:	e16f      	b.n	8001e32 <__aeabi_dsub+0x5b2>
 8001b52:	2b1f      	cmp	r3, #31
 8001b54:	dd00      	ble.n	8001b58 <__aeabi_dsub+0x2d8>
 8001b56:	e18c      	b.n	8001e72 <__aeabi_dsub+0x5f2>
 8001b58:	2520      	movs	r5, #32
 8001b5a:	000e      	movs	r6, r1
 8001b5c:	1aed      	subs	r5, r5, r3
 8001b5e:	40ae      	lsls	r6, r5
 8001b60:	46b0      	mov	r8, r6
 8001b62:	0006      	movs	r6, r0
 8001b64:	46aa      	mov	sl, r5
 8001b66:	40de      	lsrs	r6, r3
 8001b68:	4645      	mov	r5, r8
 8001b6a:	4335      	orrs	r5, r6
 8001b6c:	002e      	movs	r6, r5
 8001b6e:	4655      	mov	r5, sl
 8001b70:	40d9      	lsrs	r1, r3
 8001b72:	40a8      	lsls	r0, r5
 8001b74:	4663      	mov	r3, ip
 8001b76:	1e45      	subs	r5, r0, #1
 8001b78:	41a8      	sbcs	r0, r5
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	469c      	mov	ip, r3
 8001b7e:	4330      	orrs	r0, r6
 8001b80:	1a16      	subs	r6, r2, r0
 8001b82:	42b2      	cmp	r2, r6
 8001b84:	4192      	sbcs	r2, r2
 8001b86:	4663      	mov	r3, ip
 8001b88:	4252      	negs	r2, r2
 8001b8a:	1a99      	subs	r1, r3, r2
 8001b8c:	003d      	movs	r5, r7
 8001b8e:	e6b4      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001b90:	2207      	movs	r2, #7
 8001b92:	4032      	ands	r2, r6
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x31a>
 8001b98:	e6e4      	b.n	8001964 <__aeabi_dsub+0xe4>
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001b9c:	08f6      	lsrs	r6, r6, #3
 8001b9e:	074f      	lsls	r7, r1, #29
 8001ba0:	4337      	orrs	r7, r6
 8001ba2:	08ca      	lsrs	r2, r1, #3
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x32a>
 8001ba8:	e790      	b.n	8001acc <__aeabi_dsub+0x24c>
 8001baa:	003b      	movs	r3, r7
 8001bac:	4313      	orrs	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x332>
 8001bb0:	e1a6      	b.n	8001f00 <__aeabi_dsub+0x680>
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	031b      	lsls	r3, r3, #12
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	0312      	lsls	r2, r2, #12
 8001bba:	0b12      	lsrs	r2, r2, #12
 8001bbc:	4d02      	ldr	r5, [pc, #8]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001bbe:	e789      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001bc0:	0015      	movs	r5, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2700      	movs	r7, #0
 8001bc6:	e785      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001bc8:	000007ff 	.word	0x000007ff
 8001bcc:	ff7fffff 	.word	0xff7fffff
 8001bd0:	800fffff 	.word	0x800fffff
 8001bd4:	2e00      	cmp	r6, #0
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x35a>
 8001bd8:	e0c7      	b.n	8001d6a <__aeabi_dsub+0x4ea>
 8001bda:	1c6b      	adds	r3, r5, #1
 8001bdc:	055e      	lsls	r6, r3, #21
 8001bde:	0d76      	lsrs	r6, r6, #21
 8001be0:	2e01      	cmp	r6, #1
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dsub+0x366>
 8001be4:	e0f0      	b.n	8001dc8 <__aeabi_dsub+0x548>
 8001be6:	4dc8      	ldr	r5, [pc, #800]	; (8001f08 <__aeabi_dsub+0x688>)
 8001be8:	42ab      	cmp	r3, r5
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x36e>
 8001bec:	e0b9      	b.n	8001d62 <__aeabi_dsub+0x4e2>
 8001bee:	1885      	adds	r5, r0, r2
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	4285      	cmp	r5, r0
 8001bf4:	4189      	sbcs	r1, r1
 8001bf6:	4462      	add	r2, ip
 8001bf8:	4249      	negs	r1, r1
 8001bfa:	1851      	adds	r1, r2, r1
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	07ce      	lsls	r6, r1, #31
 8001c00:	086d      	lsrs	r5, r5, #1
 8001c02:	432e      	orrs	r6, r5
 8001c04:	0849      	lsrs	r1, r1, #1
 8001c06:	4032      	ands	r2, r6
 8001c08:	001d      	movs	r5, r3
 8001c0a:	e6a9      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001c0c:	49bf      	ldr	r1, [pc, #764]	; (8001f0c <__aeabi_dsub+0x68c>)
 8001c0e:	1aed      	subs	r5, r5, r3
 8001c10:	4011      	ands	r1, r2
 8001c12:	2207      	movs	r2, #7
 8001c14:	4032      	ands	r2, r6
 8001c16:	e6a3      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001c18:	0032      	movs	r2, r6
 8001c1a:	3828      	subs	r0, #40	; 0x28
 8001c1c:	4082      	lsls	r2, r0
 8001c1e:	2600      	movs	r6, #0
 8001c20:	e686      	b.n	8001930 <__aeabi_dsub+0xb0>
 8001c22:	0030      	movs	r0, r6
 8001c24:	f000 fb08 	bl	8002238 <__clzsi2>
 8001c28:	3020      	adds	r0, #32
 8001c2a:	e673      	b.n	8001914 <__aeabi_dsub+0x94>
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	4193      	sbcs	r3, r2
 8001c34:	1ac6      	subs	r6, r0, r3
 8001c36:	42b0      	cmp	r0, r6
 8001c38:	4180      	sbcs	r0, r0
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	1a09      	subs	r1, r1, r0
 8001c3e:	e65c      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001c40:	000e      	movs	r6, r1
 8001c42:	4667      	mov	r7, ip
 8001c44:	4306      	orrs	r6, r0
 8001c46:	4317      	orrs	r7, r2
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d15e      	bne.n	8001d0a <__aeabi_dsub+0x48a>
 8001c4c:	2e00      	cmp	r6, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x3d2>
 8001c50:	e0f3      	b.n	8001e3a <__aeabi_dsub+0x5ba>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x3d8>
 8001c56:	e11e      	b.n	8001e96 <__aeabi_dsub+0x616>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	e72c      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001c60:	4fa9      	ldr	r7, [pc, #676]	; (8001f08 <__aeabi_dsub+0x688>)
 8001c62:	42be      	cmp	r6, r7
 8001c64:	d07b      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001c66:	001e      	movs	r6, r3
 8001c68:	e6f1      	b.n	8001a4e <__aeabi_dsub+0x1ce>
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	3d1f      	subs	r5, #31
 8001c6e:	40e8      	lsrs	r0, r5
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d003      	beq.n	8001c7c <__aeabi_dsub+0x3fc>
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	1acb      	subs	r3, r1, r3
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	4316      	orrs	r6, r2
 8001c7c:	1e73      	subs	r3, r6, #1
 8001c7e:	419e      	sbcs	r6, r3
 8001c80:	2207      	movs	r2, #7
 8001c82:	4306      	orrs	r6, r0
 8001c84:	4032      	ands	r2, r6
 8001c86:	2100      	movs	r1, #0
 8001c88:	2500      	movs	r5, #0
 8001c8a:	e783      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001c8c:	1a16      	subs	r6, r2, r0
 8001c8e:	4663      	mov	r3, ip
 8001c90:	42b2      	cmp	r2, r6
 8001c92:	4180      	sbcs	r0, r0
 8001c94:	1a59      	subs	r1, r3, r1
 8001c96:	4240      	negs	r0, r0
 8001c98:	1a0b      	subs	r3, r1, r0
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	465c      	mov	r4, fp
 8001c9e:	e632      	b.n	8001906 <__aeabi_dsub+0x86>
 8001ca0:	2e1f      	cmp	r6, #31
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_dsub+0x426>
 8001ca4:	e0ab      	b.n	8001dfe <__aeabi_dsub+0x57e>
 8001ca6:	2720      	movs	r7, #32
 8001ca8:	1bbb      	subs	r3, r7, r6
 8001caa:	469a      	mov	sl, r3
 8001cac:	4663      	mov	r3, ip
 8001cae:	4657      	mov	r7, sl
 8001cb0:	40bb      	lsls	r3, r7
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	464f      	mov	r7, r9
 8001cb8:	40f3      	lsrs	r3, r6
 8001cba:	431f      	orrs	r7, r3
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	4657      	mov	r7, sl
 8001cc0:	40ba      	lsls	r2, r7
 8001cc2:	1e57      	subs	r7, r2, #1
 8001cc4:	41ba      	sbcs	r2, r7
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4662      	mov	r2, ip
 8001cca:	40f2      	lsrs	r2, r6
 8001ccc:	1889      	adds	r1, r1, r2
 8001cce:	e698      	b.n	8001a02 <__aeabi_dsub+0x182>
 8001cd0:	2720      	movs	r7, #32
 8001cd2:	1bbb      	subs	r3, r7, r6
 8001cd4:	469a      	mov	sl, r3
 8001cd6:	4663      	mov	r3, ip
 8001cd8:	4657      	mov	r7, sl
 8001cda:	40bb      	lsls	r3, r7
 8001cdc:	4699      	mov	r9, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	464f      	mov	r7, r9
 8001ce2:	40f3      	lsrs	r3, r6
 8001ce4:	431f      	orrs	r7, r3
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	4657      	mov	r7, sl
 8001cea:	40ba      	lsls	r2, r7
 8001cec:	1e57      	subs	r7, r2, #1
 8001cee:	41ba      	sbcs	r2, r7
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	40f2      	lsrs	r2, r6
 8001cf6:	1a89      	subs	r1, r1, r2
 8001cf8:	e79c      	b.n	8001c34 <__aeabi_dsub+0x3b4>
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <__aeabi_dsub+0x688>)
 8001cfc:	429f      	cmp	r7, r3
 8001cfe:	d05f      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001d00:	2580      	movs	r5, #128	; 0x80
 8001d02:	042d      	lsls	r5, r5, #16
 8001d04:	4273      	negs	r3, r6
 8001d06:	4329      	orrs	r1, r5
 8001d08:	e720      	b.n	8001b4c <__aeabi_dsub+0x2cc>
 8001d0a:	2e00      	cmp	r6, #0
 8001d0c:	d10c      	bne.n	8001d28 <__aeabi_dsub+0x4a8>
 8001d0e:	2f00      	cmp	r7, #0
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x494>
 8001d12:	e0d0      	b.n	8001eb6 <__aeabi_dsub+0x636>
 8001d14:	465c      	mov	r4, fp
 8001d16:	4661      	mov	r1, ip
 8001d18:	4691      	mov	r9, r2
 8001d1a:	4d7b      	ldr	r5, [pc, #492]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d1c:	e6cd      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001d1e:	4f7a      	ldr	r7, [pc, #488]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d20:	42be      	cmp	r6, r7
 8001d22:	d01c      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001d24:	001e      	movs	r6, r3
 8001d26:	e665      	b.n	80019f4 <__aeabi_dsub+0x174>
 8001d28:	2f00      	cmp	r7, #0
 8001d2a:	d018      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001d2c:	08c0      	lsrs	r0, r0, #3
 8001d2e:	074e      	lsls	r6, r1, #29
 8001d30:	4306      	orrs	r6, r0
 8001d32:	2080      	movs	r0, #128	; 0x80
 8001d34:	08c9      	lsrs	r1, r1, #3
 8001d36:	0300      	lsls	r0, r0, #12
 8001d38:	4201      	tst	r1, r0
 8001d3a:	d008      	beq.n	8001d4e <__aeabi_dsub+0x4ce>
 8001d3c:	4663      	mov	r3, ip
 8001d3e:	08dc      	lsrs	r4, r3, #3
 8001d40:	4204      	tst	r4, r0
 8001d42:	d104      	bne.n	8001d4e <__aeabi_dsub+0x4ce>
 8001d44:	0021      	movs	r1, r4
 8001d46:	46da      	mov	sl, fp
 8001d48:	08d2      	lsrs	r2, r2, #3
 8001d4a:	075e      	lsls	r6, r3, #29
 8001d4c:	4316      	orrs	r6, r2
 8001d4e:	00f3      	lsls	r3, r6, #3
 8001d50:	4699      	mov	r9, r3
 8001d52:	2401      	movs	r4, #1
 8001d54:	4653      	mov	r3, sl
 8001d56:	00c9      	lsls	r1, r1, #3
 8001d58:	0f72      	lsrs	r2, r6, #29
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	401c      	ands	r4, r3
 8001d5e:	4d6a      	ldr	r5, [pc, #424]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d60:	e6ab      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001d62:	001d      	movs	r5, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	2700      	movs	r7, #0
 8001d68:	e6b4      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d159      	bne.n	8001e22 <__aeabi_dsub+0x5a2>
 8001d6e:	000b      	movs	r3, r1
 8001d70:	4303      	orrs	r3, r0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x4f6>
 8001d74:	e6d6      	b.n	8001b24 <__aeabi_dsub+0x2a4>
 8001d76:	1c73      	adds	r3, r6, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4fc>
 8001d7a:	e0b2      	b.n	8001ee2 <__aeabi_dsub+0x662>
 8001d7c:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d7e:	429f      	cmp	r7, r3
 8001d80:	d01e      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001d82:	43f3      	mvns	r3, r6
 8001d84:	2b38      	cmp	r3, #56	; 0x38
 8001d86:	dc6f      	bgt.n	8001e68 <__aeabi_dsub+0x5e8>
 8001d88:	2b1f      	cmp	r3, #31
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x50e>
 8001d8c:	e097      	b.n	8001ebe <__aeabi_dsub+0x63e>
 8001d8e:	2520      	movs	r5, #32
 8001d90:	000e      	movs	r6, r1
 8001d92:	1aed      	subs	r5, r5, r3
 8001d94:	40ae      	lsls	r6, r5
 8001d96:	46b0      	mov	r8, r6
 8001d98:	0006      	movs	r6, r0
 8001d9a:	46aa      	mov	sl, r5
 8001d9c:	40de      	lsrs	r6, r3
 8001d9e:	4645      	mov	r5, r8
 8001da0:	4335      	orrs	r5, r6
 8001da2:	002e      	movs	r6, r5
 8001da4:	4655      	mov	r5, sl
 8001da6:	40a8      	lsls	r0, r5
 8001da8:	40d9      	lsrs	r1, r3
 8001daa:	1e45      	subs	r5, r0, #1
 8001dac:	41a8      	sbcs	r0, r5
 8001dae:	448c      	add	ip, r1
 8001db0:	4306      	orrs	r6, r0
 8001db2:	18b6      	adds	r6, r6, r2
 8001db4:	4296      	cmp	r6, r2
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	4251      	negs	r1, r2
 8001dba:	4461      	add	r1, ip
 8001dbc:	003d      	movs	r5, r7
 8001dbe:	e625      	b.n	8001a0c <__aeabi_dsub+0x18c>
 8001dc0:	003d      	movs	r5, r7
 8001dc2:	4661      	mov	r1, ip
 8001dc4:	4691      	mov	r9, r2
 8001dc6:	e678      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dc8:	000b      	movs	r3, r1
 8001dca:	4303      	orrs	r3, r0
 8001dcc:	2d00      	cmp	r5, #0
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x552>
 8001dd0:	e655      	b.n	8001a7e <__aeabi_dsub+0x1fe>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f5      	beq.n	8001dc2 <__aeabi_dsub+0x542>
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x55e>
 8001ddc:	e66d      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dde:	1886      	adds	r6, r0, r2
 8001de0:	4286      	cmp	r6, r0
 8001de2:	4180      	sbcs	r0, r0
 8001de4:	4461      	add	r1, ip
 8001de6:	4240      	negs	r0, r0
 8001de8:	1809      	adds	r1, r1, r0
 8001dea:	2200      	movs	r2, #0
 8001dec:	020b      	lsls	r3, r1, #8
 8001dee:	d400      	bmi.n	8001df2 <__aeabi_dsub+0x572>
 8001df0:	e6d0      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <__aeabi_dsub+0x68c>)
 8001df4:	3501      	adds	r5, #1
 8001df6:	4019      	ands	r1, r3
 8001df8:	e5b2      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001dfa:	46b1      	mov	r9, r6
 8001dfc:	e65d      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dfe:	0033      	movs	r3, r6
 8001e00:	4667      	mov	r7, ip
 8001e02:	3b20      	subs	r3, #32
 8001e04:	40df      	lsrs	r7, r3
 8001e06:	003b      	movs	r3, r7
 8001e08:	2e20      	cmp	r6, #32
 8001e0a:	d005      	beq.n	8001e18 <__aeabi_dsub+0x598>
 8001e0c:	2740      	movs	r7, #64	; 0x40
 8001e0e:	1bbf      	subs	r7, r7, r6
 8001e10:	4666      	mov	r6, ip
 8001e12:	40be      	lsls	r6, r7
 8001e14:	4332      	orrs	r2, r6
 8001e16:	4690      	mov	r8, r2
 8001e18:	4646      	mov	r6, r8
 8001e1a:	1e72      	subs	r2, r6, #1
 8001e1c:	4196      	sbcs	r6, r2
 8001e1e:	4333      	orrs	r3, r6
 8001e20:	e5ef      	b.n	8001a02 <__aeabi_dsub+0x182>
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <__aeabi_dsub+0x688>)
 8001e24:	429f      	cmp	r7, r3
 8001e26:	d0cb      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001e28:	2580      	movs	r5, #128	; 0x80
 8001e2a:	042d      	lsls	r5, r5, #16
 8001e2c:	4273      	negs	r3, r6
 8001e2e:	4329      	orrs	r1, r5
 8001e30:	e7a8      	b.n	8001d84 <__aeabi_dsub+0x504>
 8001e32:	4308      	orrs	r0, r1
 8001e34:	1e41      	subs	r1, r0, #1
 8001e36:	4188      	sbcs	r0, r1
 8001e38:	e6a2      	b.n	8001b80 <__aeabi_dsub+0x300>
 8001e3a:	2f00      	cmp	r7, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x5c0>
 8001e3e:	e63c      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001e40:	4663      	mov	r3, ip
 8001e42:	1a86      	subs	r6, r0, r2
 8001e44:	1acf      	subs	r7, r1, r3
 8001e46:	42b0      	cmp	r0, r6
 8001e48:	419b      	sbcs	r3, r3
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	1afb      	subs	r3, r7, r3
 8001e4e:	4698      	mov	r8, r3
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	d54e      	bpl.n	8001ef2 <__aeabi_dsub+0x672>
 8001e54:	1a16      	subs	r6, r2, r0
 8001e56:	4663      	mov	r3, ip
 8001e58:	42b2      	cmp	r2, r6
 8001e5a:	4192      	sbcs	r2, r2
 8001e5c:	1a59      	subs	r1, r3, r1
 8001e5e:	4252      	negs	r2, r2
 8001e60:	1a89      	subs	r1, r1, r2
 8001e62:	465c      	mov	r4, fp
 8001e64:	2200      	movs	r2, #0
 8001e66:	e57b      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001e68:	4301      	orrs	r1, r0
 8001e6a:	000e      	movs	r6, r1
 8001e6c:	1e71      	subs	r1, r6, #1
 8001e6e:	418e      	sbcs	r6, r1
 8001e70:	e79f      	b.n	8001db2 <__aeabi_dsub+0x532>
 8001e72:	001d      	movs	r5, r3
 8001e74:	000e      	movs	r6, r1
 8001e76:	3d20      	subs	r5, #32
 8001e78:	40ee      	lsrs	r6, r5
 8001e7a:	46b0      	mov	r8, r6
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d004      	beq.n	8001e8a <__aeabi_dsub+0x60a>
 8001e80:	2540      	movs	r5, #64	; 0x40
 8001e82:	1aeb      	subs	r3, r5, r3
 8001e84:	4099      	lsls	r1, r3
 8001e86:	4308      	orrs	r0, r1
 8001e88:	4681      	mov	r9, r0
 8001e8a:	4648      	mov	r0, r9
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	1e41      	subs	r1, r0, #1
 8001e90:	4188      	sbcs	r0, r1
 8001e92:	4318      	orrs	r0, r3
 8001e94:	e674      	b.n	8001b80 <__aeabi_dsub+0x300>
 8001e96:	2200      	movs	r2, #0
 8001e98:	2400      	movs	r4, #0
 8001e9a:	e617      	b.n	8001acc <__aeabi_dsub+0x24c>
 8001e9c:	1a16      	subs	r6, r2, r0
 8001e9e:	4663      	mov	r3, ip
 8001ea0:	42b2      	cmp	r2, r6
 8001ea2:	4192      	sbcs	r2, r2
 8001ea4:	1a59      	subs	r1, r3, r1
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	1a89      	subs	r1, r1, r2
 8001eaa:	003d      	movs	r5, r7
 8001eac:	e525      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001eae:	4661      	mov	r1, ip
 8001eb0:	4691      	mov	r9, r2
 8001eb2:	4d15      	ldr	r5, [pc, #84]	; (8001f08 <__aeabi_dsub+0x688>)
 8001eb4:	e601      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	2400      	movs	r4, #0
 8001eba:	0312      	lsls	r2, r2, #12
 8001ebc:	e679      	b.n	8001bb2 <__aeabi_dsub+0x332>
 8001ebe:	001d      	movs	r5, r3
 8001ec0:	000e      	movs	r6, r1
 8001ec2:	3d20      	subs	r5, #32
 8001ec4:	40ee      	lsrs	r6, r5
 8001ec6:	46b0      	mov	r8, r6
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d004      	beq.n	8001ed6 <__aeabi_dsub+0x656>
 8001ecc:	2540      	movs	r5, #64	; 0x40
 8001ece:	1aeb      	subs	r3, r5, r3
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	4308      	orrs	r0, r1
 8001ed4:	4681      	mov	r9, r0
 8001ed6:	464e      	mov	r6, r9
 8001ed8:	4643      	mov	r3, r8
 8001eda:	1e71      	subs	r1, r6, #1
 8001edc:	418e      	sbcs	r6, r1
 8001ede:	431e      	orrs	r6, r3
 8001ee0:	e767      	b.n	8001db2 <__aeabi_dsub+0x532>
 8001ee2:	1886      	adds	r6, r0, r2
 8001ee4:	4296      	cmp	r6, r2
 8001ee6:	419b      	sbcs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	425b      	negs	r3, r3
 8001eec:	18c9      	adds	r1, r1, r3
 8001eee:	003d      	movs	r5, r7
 8001ef0:	e58c      	b.n	8001a0c <__aeabi_dsub+0x18c>
 8001ef2:	4647      	mov	r7, r8
 8001ef4:	4337      	orrs	r7, r6
 8001ef6:	d0ce      	beq.n	8001e96 <__aeabi_dsub+0x616>
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4641      	mov	r1, r8
 8001efc:	4032      	ands	r2, r6
 8001efe:	e649      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001f00:	2700      	movs	r7, #0
 8001f02:	003a      	movs	r2, r7
 8001f04:	e5e6      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	000007ff 	.word	0x000007ff
 8001f0c:	ff7fffff 	.word	0xff7fffff

08001f10 <__aeabi_dcmpun>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0c      	ldr	r6, [pc, #48]	; (8001f44 <__aeabi_dcmpun+0x34>)
 8001f14:	030d      	lsls	r5, r1, #12
 8001f16:	031c      	lsls	r4, r3, #12
 8001f18:	0049      	lsls	r1, r1, #1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	0b2d      	lsrs	r5, r5, #12
 8001f1e:	0d49      	lsrs	r1, r1, #21
 8001f20:	0b24      	lsrs	r4, r4, #12
 8001f22:	0d5b      	lsrs	r3, r3, #21
 8001f24:	42b1      	cmp	r1, r6
 8001f26:	d008      	beq.n	8001f3a <__aeabi_dcmpun+0x2a>
 8001f28:	4906      	ldr	r1, [pc, #24]	; (8001f44 <__aeabi_dcmpun+0x34>)
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d103      	bne.n	8001f38 <__aeabi_dcmpun+0x28>
 8001f30:	4314      	orrs	r4, r2
 8001f32:	0020      	movs	r0, r4
 8001f34:	1e44      	subs	r4, r0, #1
 8001f36:	41a0      	sbcs	r0, r4
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	4305      	orrs	r5, r0
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	d1fa      	bne.n	8001f38 <__aeabi_dcmpun+0x28>
 8001f42:	e7f1      	b.n	8001f28 <__aeabi_dcmpun+0x18>
 8001f44:	000007ff 	.word	0x000007ff

08001f48 <__aeabi_d2iz>:
 8001f48:	b530      	push	{r4, r5, lr}
 8001f4a:	4d14      	ldr	r5, [pc, #80]	; (8001f9c <__aeabi_d2iz+0x54>)
 8001f4c:	030a      	lsls	r2, r1, #12
 8001f4e:	004b      	lsls	r3, r1, #1
 8001f50:	0b12      	lsrs	r2, r2, #12
 8001f52:	0d5b      	lsrs	r3, r3, #21
 8001f54:	0fc9      	lsrs	r1, r1, #31
 8001f56:	2400      	movs	r4, #0
 8001f58:	42ab      	cmp	r3, r5
 8001f5a:	dd11      	ble.n	8001f80 <__aeabi_d2iz+0x38>
 8001f5c:	4c10      	ldr	r4, [pc, #64]	; (8001fa0 <__aeabi_d2iz+0x58>)
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	dc10      	bgt.n	8001f84 <__aeabi_d2iz+0x3c>
 8001f62:	2480      	movs	r4, #128	; 0x80
 8001f64:	0364      	lsls	r4, r4, #13
 8001f66:	4322      	orrs	r2, r4
 8001f68:	4c0e      	ldr	r4, [pc, #56]	; (8001fa4 <__aeabi_d2iz+0x5c>)
 8001f6a:	1ae4      	subs	r4, r4, r3
 8001f6c:	2c1f      	cmp	r4, #31
 8001f6e:	dd0c      	ble.n	8001f8a <__aeabi_d2iz+0x42>
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <__aeabi_d2iz+0x60>)
 8001f72:	1ac3      	subs	r3, r0, r3
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	0013      	movs	r3, r2
 8001f78:	425c      	negs	r4, r3
 8001f7a:	2900      	cmp	r1, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_d2iz+0x38>
 8001f7e:	001c      	movs	r4, r3
 8001f80:	0020      	movs	r0, r4
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <__aeabi_d2iz+0x64>)
 8001f86:	18cc      	adds	r4, r1, r3
 8001f88:	e7fa      	b.n	8001f80 <__aeabi_d2iz+0x38>
 8001f8a:	4d09      	ldr	r5, [pc, #36]	; (8001fb0 <__aeabi_d2iz+0x68>)
 8001f8c:	40e0      	lsrs	r0, r4
 8001f8e:	46ac      	mov	ip, r5
 8001f90:	4463      	add	r3, ip
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	4303      	orrs	r3, r0
 8001f98:	e7ee      	b.n	8001f78 <__aeabi_d2iz+0x30>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	000003fe 	.word	0x000003fe
 8001fa0:	0000041d 	.word	0x0000041d
 8001fa4:	00000433 	.word	0x00000433
 8001fa8:	00000413 	.word	0x00000413
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	fffffbed 	.word	0xfffffbed

08001fb4 <__aeabi_i2d>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d02d      	beq.n	8002016 <__aeabi_i2d+0x62>
 8001fba:	17c3      	asrs	r3, r0, #31
 8001fbc:	18c5      	adds	r5, r0, r3
 8001fbe:	405d      	eors	r5, r3
 8001fc0:	0fc4      	lsrs	r4, r0, #31
 8001fc2:	0028      	movs	r0, r5
 8001fc4:	f000 f938 	bl	8002238 <__clzsi2>
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <__aeabi_i2d+0x6c>)
 8001fca:	1a1b      	subs	r3, r3, r0
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	0d5b      	lsrs	r3, r3, #21
 8001fd0:	280a      	cmp	r0, #10
 8001fd2:	dd15      	ble.n	8002000 <__aeabi_i2d+0x4c>
 8001fd4:	380b      	subs	r0, #11
 8001fd6:	4085      	lsls	r5, r0
 8001fd8:	2200      	movs	r2, #0
 8001fda:	032d      	lsls	r5, r5, #12
 8001fdc:	0b2d      	lsrs	r5, r5, #12
 8001fde:	2100      	movs	r1, #0
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	032d      	lsls	r5, r5, #12
 8001fe4:	0d0a      	lsrs	r2, r1, #20
 8001fe6:	0b2d      	lsrs	r5, r5, #12
 8001fe8:	0512      	lsls	r2, r2, #20
 8001fea:	432a      	orrs	r2, r5
 8001fec:	4d0d      	ldr	r5, [pc, #52]	; (8002024 <__aeabi_i2d+0x70>)
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	402a      	ands	r2, r5
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	07e4      	lsls	r4, r4, #31
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	0002      	movs	r2, r0
 8002002:	0029      	movs	r1, r5
 8002004:	3215      	adds	r2, #21
 8002006:	4091      	lsls	r1, r2
 8002008:	000a      	movs	r2, r1
 800200a:	210b      	movs	r1, #11
 800200c:	1a08      	subs	r0, r1, r0
 800200e:	40c5      	lsrs	r5, r0
 8002010:	032d      	lsls	r5, r5, #12
 8002012:	0b2d      	lsrs	r5, r5, #12
 8002014:	e7e3      	b.n	8001fde <__aeabi_i2d+0x2a>
 8002016:	2400      	movs	r4, #0
 8002018:	2300      	movs	r3, #0
 800201a:	2500      	movs	r5, #0
 800201c:	2200      	movs	r2, #0
 800201e:	e7de      	b.n	8001fde <__aeabi_i2d+0x2a>
 8002020:	0000041e 	.word	0x0000041e
 8002024:	800fffff 	.word	0x800fffff

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d025      	beq.n	800207a <__aeabi_ui2d+0x52>
 800202e:	f000 f903 	bl	8002238 <__clzsi2>
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <__aeabi_ui2d+0x5c>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	280a      	cmp	r0, #10
 800203c:	dd12      	ble.n	8002064 <__aeabi_ui2d+0x3c>
 800203e:	380b      	subs	r0, #11
 8002040:	4084      	lsls	r4, r0
 8002042:	2200      	movs	r2, #0
 8002044:	0324      	lsls	r4, r4, #12
 8002046:	0b24      	lsrs	r4, r4, #12
 8002048:	2100      	movs	r1, #0
 800204a:	0010      	movs	r0, r2
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	0d0a      	lsrs	r2, r1, #20
 8002050:	0b24      	lsrs	r4, r4, #12
 8002052:	0512      	lsls	r2, r2, #20
 8002054:	4322      	orrs	r2, r4
 8002056:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <__aeabi_ui2d+0x60>)
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	4022      	ands	r2, r4
 800205c:	4313      	orrs	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	0859      	lsrs	r1, r3, #1
 8002062:	bd10      	pop	{r4, pc}
 8002064:	0002      	movs	r2, r0
 8002066:	0021      	movs	r1, r4
 8002068:	3215      	adds	r2, #21
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	210b      	movs	r1, #11
 8002070:	1a08      	subs	r0, r1, r0
 8002072:	40c4      	lsrs	r4, r0
 8002074:	0324      	lsls	r4, r4, #12
 8002076:	0b24      	lsrs	r4, r4, #12
 8002078:	e7e6      	b.n	8002048 <__aeabi_ui2d+0x20>
 800207a:	2300      	movs	r3, #0
 800207c:	2400      	movs	r4, #0
 800207e:	2200      	movs	r2, #0
 8002080:	e7e2      	b.n	8002048 <__aeabi_ui2d+0x20>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	0000041e 	.word	0x0000041e
 8002088:	800fffff 	.word	0x800fffff

0800208c <__aeabi_f2d>:
 800208c:	0041      	lsls	r1, r0, #1
 800208e:	0e09      	lsrs	r1, r1, #24
 8002090:	1c4b      	adds	r3, r1, #1
 8002092:	b570      	push	{r4, r5, r6, lr}
 8002094:	b2db      	uxtb	r3, r3
 8002096:	0246      	lsls	r6, r0, #9
 8002098:	0a75      	lsrs	r5, r6, #9
 800209a:	0fc4      	lsrs	r4, r0, #31
 800209c:	2b01      	cmp	r3, #1
 800209e:	dd14      	ble.n	80020ca <__aeabi_f2d+0x3e>
 80020a0:	23e0      	movs	r3, #224	; 0xe0
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	076d      	lsls	r5, r5, #29
 80020a6:	0b36      	lsrs	r6, r6, #12
 80020a8:	18cb      	adds	r3, r1, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	0d0a      	lsrs	r2, r1, #20
 80020ae:	0028      	movs	r0, r5
 80020b0:	0512      	lsls	r2, r2, #20
 80020b2:	4d1c      	ldr	r5, [pc, #112]	; (8002124 <__aeabi_f2d+0x98>)
 80020b4:	4332      	orrs	r2, r6
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	402a      	ands	r2, r5
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	4313      	orrs	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	07e4      	lsls	r4, r4, #31
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	4323      	orrs	r3, r4
 80020c6:	0019      	movs	r1, r3
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	2900      	cmp	r1, #0
 80020cc:	d114      	bne.n	80020f8 <__aeabi_f2d+0x6c>
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	d01e      	beq.n	8002110 <__aeabi_f2d+0x84>
 80020d2:	0028      	movs	r0, r5
 80020d4:	f000 f8b0 	bl	8002238 <__clzsi2>
 80020d8:	280a      	cmp	r0, #10
 80020da:	dc1c      	bgt.n	8002116 <__aeabi_f2d+0x8a>
 80020dc:	230b      	movs	r3, #11
 80020de:	002a      	movs	r2, r5
 80020e0:	1a1b      	subs	r3, r3, r0
 80020e2:	40da      	lsrs	r2, r3
 80020e4:	0003      	movs	r3, r0
 80020e6:	3315      	adds	r3, #21
 80020e8:	409d      	lsls	r5, r3
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <__aeabi_f2d+0x9c>)
 80020ec:	0312      	lsls	r2, r2, #12
 80020ee:	1a1b      	subs	r3, r3, r0
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	0b16      	lsrs	r6, r2, #12
 80020f4:	0d5b      	lsrs	r3, r3, #21
 80020f6:	e7d8      	b.n	80020aa <__aeabi_f2d+0x1e>
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	d006      	beq.n	800210a <__aeabi_f2d+0x7e>
 80020fc:	0b32      	lsrs	r2, r6, #12
 80020fe:	2680      	movs	r6, #128	; 0x80
 8002100:	0336      	lsls	r6, r6, #12
 8002102:	076d      	lsls	r5, r5, #29
 8002104:	4316      	orrs	r6, r2
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <__aeabi_f2d+0xa0>)
 8002108:	e7cf      	b.n	80020aa <__aeabi_f2d+0x1e>
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <__aeabi_f2d+0xa0>)
 800210c:	2600      	movs	r6, #0
 800210e:	e7cc      	b.n	80020aa <__aeabi_f2d+0x1e>
 8002110:	2300      	movs	r3, #0
 8002112:	2600      	movs	r6, #0
 8002114:	e7c9      	b.n	80020aa <__aeabi_f2d+0x1e>
 8002116:	0003      	movs	r3, r0
 8002118:	002a      	movs	r2, r5
 800211a:	3b0b      	subs	r3, #11
 800211c:	409a      	lsls	r2, r3
 800211e:	2500      	movs	r5, #0
 8002120:	e7e3      	b.n	80020ea <__aeabi_f2d+0x5e>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	800fffff 	.word	0x800fffff
 8002128:	00000389 	.word	0x00000389
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2f>:
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	004c      	lsls	r4, r1, #1
 8002134:	0d64      	lsrs	r4, r4, #21
 8002136:	030b      	lsls	r3, r1, #12
 8002138:	1c62      	adds	r2, r4, #1
 800213a:	0a5b      	lsrs	r3, r3, #9
 800213c:	0f46      	lsrs	r6, r0, #29
 800213e:	0552      	lsls	r2, r2, #21
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	431e      	orrs	r6, r3
 8002144:	00c5      	lsls	r5, r0, #3
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	2a01      	cmp	r2, #1
 800214a:	dd29      	ble.n	80021a0 <__aeabi_d2f+0x70>
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <__aeabi_d2f+0xfc>)
 800214e:	18e7      	adds	r7, r4, r3
 8002150:	2ffe      	cmp	r7, #254	; 0xfe
 8002152:	dc1c      	bgt.n	800218e <__aeabi_d2f+0x5e>
 8002154:	2f00      	cmp	r7, #0
 8002156:	dd3b      	ble.n	80021d0 <__aeabi_d2f+0xa0>
 8002158:	0180      	lsls	r0, r0, #6
 800215a:	1e43      	subs	r3, r0, #1
 800215c:	4198      	sbcs	r0, r3
 800215e:	2207      	movs	r2, #7
 8002160:	00f3      	lsls	r3, r6, #3
 8002162:	0f6d      	lsrs	r5, r5, #29
 8002164:	4303      	orrs	r3, r0
 8002166:	432b      	orrs	r3, r5
 8002168:	401a      	ands	r2, r3
 800216a:	2a00      	cmp	r2, #0
 800216c:	d004      	beq.n	8002178 <__aeabi_d2f+0x48>
 800216e:	220f      	movs	r2, #15
 8002170:	401a      	ands	r2, r3
 8002172:	2a04      	cmp	r2, #4
 8002174:	d000      	beq.n	8002178 <__aeabi_d2f+0x48>
 8002176:	3304      	adds	r3, #4
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	04d2      	lsls	r2, r2, #19
 800217c:	401a      	ands	r2, r3
 800217e:	d024      	beq.n	80021ca <__aeabi_d2f+0x9a>
 8002180:	3701      	adds	r7, #1
 8002182:	b2fa      	uxtb	r2, r7
 8002184:	2fff      	cmp	r7, #255	; 0xff
 8002186:	d002      	beq.n	800218e <__aeabi_d2f+0x5e>
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	0a58      	lsrs	r0, r3, #9
 800218c:	e001      	b.n	8002192 <__aeabi_d2f+0x62>
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	2000      	movs	r0, #0
 8002192:	0240      	lsls	r0, r0, #9
 8002194:	05d2      	lsls	r2, r2, #23
 8002196:	0a40      	lsrs	r0, r0, #9
 8002198:	07c9      	lsls	r1, r1, #31
 800219a:	4310      	orrs	r0, r2
 800219c:	4308      	orrs	r0, r1
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a0:	4335      	orrs	r5, r6
 80021a2:	2c00      	cmp	r4, #0
 80021a4:	d104      	bne.n	80021b0 <__aeabi_d2f+0x80>
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	d10a      	bne.n	80021c0 <__aeabi_d2f+0x90>
 80021aa:	2200      	movs	r2, #0
 80021ac:	2000      	movs	r0, #0
 80021ae:	e7f0      	b.n	8002192 <__aeabi_d2f+0x62>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d0ec      	beq.n	800218e <__aeabi_d2f+0x5e>
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	03c0      	lsls	r0, r0, #15
 80021b8:	4330      	orrs	r0, r6
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	e7e9      	b.n	8002192 <__aeabi_d2f+0x62>
 80021be:	2400      	movs	r4, #0
 80021c0:	2300      	movs	r3, #0
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	0a58      	lsrs	r0, r3, #9
 80021c6:	b2e2      	uxtb	r2, r4
 80021c8:	e7e3      	b.n	8002192 <__aeabi_d2f+0x62>
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	003c      	movs	r4, r7
 80021ce:	e7f8      	b.n	80021c2 <__aeabi_d2f+0x92>
 80021d0:	003b      	movs	r3, r7
 80021d2:	3317      	adds	r3, #23
 80021d4:	dbf3      	blt.n	80021be <__aeabi_d2f+0x8e>
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4333      	orrs	r3, r6
 80021dc:	261e      	movs	r6, #30
 80021de:	1bf6      	subs	r6, r6, r7
 80021e0:	2e1f      	cmp	r6, #31
 80021e2:	dd14      	ble.n	800220e <__aeabi_d2f+0xde>
 80021e4:	2202      	movs	r2, #2
 80021e6:	4252      	negs	r2, r2
 80021e8:	1bd7      	subs	r7, r2, r7
 80021ea:	001a      	movs	r2, r3
 80021ec:	40fa      	lsrs	r2, r7
 80021ee:	0017      	movs	r7, r2
 80021f0:	2e20      	cmp	r6, #32
 80021f2:	d004      	beq.n	80021fe <__aeabi_d2f+0xce>
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <__aeabi_d2f+0x100>)
 80021f6:	4694      	mov	ip, r2
 80021f8:	4464      	add	r4, ip
 80021fa:	40a3      	lsls	r3, r4
 80021fc:	431d      	orrs	r5, r3
 80021fe:	002b      	movs	r3, r5
 8002200:	1e5d      	subs	r5, r3, #1
 8002202:	41ab      	sbcs	r3, r5
 8002204:	2207      	movs	r2, #7
 8002206:	433b      	orrs	r3, r7
 8002208:	401a      	ands	r2, r3
 800220a:	2700      	movs	r7, #0
 800220c:	e7ad      	b.n	800216a <__aeabi_d2f+0x3a>
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <__aeabi_d2f+0x104>)
 8002210:	0028      	movs	r0, r5
 8002212:	18a2      	adds	r2, r4, r2
 8002214:	4095      	lsls	r5, r2
 8002216:	4093      	lsls	r3, r2
 8002218:	1e6c      	subs	r4, r5, #1
 800221a:	41a5      	sbcs	r5, r4
 800221c:	40f0      	lsrs	r0, r6
 800221e:	2207      	movs	r2, #7
 8002220:	432b      	orrs	r3, r5
 8002222:	4303      	orrs	r3, r0
 8002224:	401a      	ands	r2, r3
 8002226:	2700      	movs	r7, #0
 8002228:	e79f      	b.n	800216a <__aeabi_d2f+0x3a>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	fffffc80 	.word	0xfffffc80
 8002230:	fffffca2 	.word	0xfffffca2
 8002234:	fffffc82 	.word	0xfffffc82

08002238 <__clzsi2>:
 8002238:	211c      	movs	r1, #28
 800223a:	2301      	movs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0xe>
 8002242:	0c00      	lsrs	r0, r0, #16
 8002244:	3910      	subs	r1, #16
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	4298      	cmp	r0, r3
 800224a:	d301      	bcc.n	8002250 <__clzsi2+0x18>
 800224c:	0a00      	lsrs	r0, r0, #8
 800224e:	3908      	subs	r1, #8
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0x22>
 8002256:	0900      	lsrs	r0, r0, #4
 8002258:	3904      	subs	r1, #4
 800225a:	a202      	add	r2, pc, #8	; (adr r2, 8002264 <__clzsi2+0x2c>)
 800225c:	5c10      	ldrb	r0, [r2, r0]
 800225e:	1840      	adds	r0, r0, r1
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	02020304 	.word	0x02020304
 8002268:	01010101 	.word	0x01010101
	...

08002274 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	0018      	movs	r0, r3
 800227e:	230c      	movs	r3, #12
 8002280:	001a      	movs	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	f007 fa47 	bl	8009716 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <MX_ADC_Init+0xb0>)
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <MX_ADC_Init+0xb4>)
 800228c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <MX_ADC_Init+0xb0>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <MX_ADC_Init+0xb0>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <MX_ADC_Init+0xb0>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_ADC_Init+0xb0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_ADC_Init+0xb0>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <MX_ADC_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_ADC_Init+0xb0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_ADC_Init+0xb0>)
 80022c6:	22c2      	movs	r2, #194	; 0xc2
 80022c8:	32ff      	adds	r2, #255	; 0xff
 80022ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_ADC_Init+0xb0>)
 80022d4:	2224      	movs	r2, #36	; 0x24
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_ADC_Init+0xb0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_ADC_Init+0xb0>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fe62 	bl	8002fac <HAL_ADC_Init>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80022ec:	f000 fbe0 	bl	8002ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	0152      	lsls	r2, r2, #5
 80022fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002306:	1d3a      	adds	r2, r7, #4
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_ADC_Init+0xb0>)
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f001 f87f 	bl	8003410 <HAL_ADC_ConfigChannel>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002316:	f000 fbcb 	bl	8002ab0 <Error_Handler>
  }

}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	20000608 	.word	0x20000608
 8002328:	40012400 	.word	0x40012400

0800232c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	2314      	movs	r3, #20
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	0018      	movs	r0, r3
 800233a:	2314      	movs	r3, #20
 800233c:	001a      	movs	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f007 f9e9 	bl	8009716 <memset>
  if(adcHandle->Instance==ADC1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_ADC_MspInit+0x84>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0089      	lsls	r1, r1, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0289      	lsls	r1, r1, #10
 8002374:	430a      	orrs	r2, r1
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002386:	2114      	movs	r1, #20
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2203      	movs	r2, #3
 8002392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	187a      	adds	r2, r7, r1
 800239c:	2390      	movs	r3, #144	; 0x90
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 fb3a 	bl	8003a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b00a      	add	sp, #40	; 0x28
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012400 	.word	0x40012400
 80023b4:	40021000 	.word	0x40021000

080023b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <vApplicationGetIdleTaskMemory+0x28>)
 80023c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80023ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000208 	.word	0x20000208
 80023e4:	200002bc 	.word	0x200002bc

080023e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b09a      	sub	sp, #104	; 0x68
 80023ec:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreStaticDef(myBinarySem01, &myBinarySem01ControlBlock);
 80023ee:	2160      	movs	r1, #96	; 0x60
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <MX_FREERTOS_Init+0xb0>)
 80023fa:	605a      	str	r2, [r3, #4]
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2101      	movs	r1, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f003 fe70 	bl	80060e6 <osSemaphoreCreate>
 8002406:	0002      	movs	r2, r0
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <MX_FREERTOS_Init+0xb4>)
 800240a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreStaticDef(myBinarySem02, &myBinarySem02ControlBlock);
 800240c:	2158      	movs	r1, #88	; 0x58
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	187b      	adds	r3, r7, r1
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <MX_FREERTOS_Init+0xb8>)
 8002418:	605a      	str	r2, [r3, #4]
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f003 fe61 	bl	80060e6 <osSemaphoreCreate>
 8002424:	0002      	movs	r2, r0
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_FREERTOS_Init+0xbc>)
 8002428:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DisplayTask */
  osThreadStaticDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 512, DisplayTaskBuffer, &DisplayTaskControlBlock);
 800242a:	213c      	movs	r1, #60	; 0x3c
 800242c:	187b      	adds	r3, r7, r1
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <MX_FREERTOS_Init+0xc0>)
 8002430:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002432:	c331      	stmia	r3!, {r0, r4, r5}
 8002434:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002436:	c331      	stmia	r3!, {r0, r4, r5}
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	601a      	str	r2, [r3, #0]
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2100      	movs	r1, #0
 8002440:	0018      	movs	r0, r3
 8002442:	f003 fe16 	bl	8006072 <osThreadCreate>
 8002446:	0002      	movs	r2, r0
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_FREERTOS_Init+0xc4>)
 800244a:	601a      	str	r2, [r3, #0]

  /* definition and creation of AdcTask */
  osThreadStaticDef(AdcTask, StartAdcTask, osPriorityLow, 0, 512, AdcTaskBuffer, &AdcTaskControlBlock);
 800244c:	2120      	movs	r1, #32
 800244e:	187b      	adds	r3, r7, r1
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <MX_FREERTOS_Init+0xc8>)
 8002452:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002454:	c331      	stmia	r3!, {r0, r4, r5}
 8002456:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002458:	c331      	stmia	r3!, {r0, r4, r5}
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	601a      	str	r2, [r3, #0]
  AdcTaskHandle = osThreadCreate(osThread(AdcTask), NULL);
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2100      	movs	r1, #0
 8002462:	0018      	movs	r0, r3
 8002464:	f003 fe05 	bl	8006072 <osThreadCreate>
 8002468:	0002      	movs	r2, r0
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_FREERTOS_Init+0xcc>)
 800246c:	601a      	str	r2, [r3, #0]

  /* definition and creation of PenIrqTask */
  osThreadStaticDef(PenIrqTask, StartPenIrqTask, osPriorityHigh, 0, 512, PenIrqTaskBuffer, &PenIrqTaskControlBlock);
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <MX_FREERTOS_Init+0xd0>)
 8002472:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002474:	c313      	stmia	r3!, {r0, r1, r4}
 8002476:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002478:	c313      	stmia	r3!, {r0, r1, r4}
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	601a      	str	r2, [r3, #0]
  PenIrqTaskHandle = osThreadCreate(osThread(PenIrqTask), NULL);
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2100      	movs	r1, #0
 8002482:	0018      	movs	r0, r3
 8002484:	f003 fdf5 	bl	8006072 <osThreadCreate>
 8002488:	0002      	movs	r2, r0
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_FREERTOS_Init+0xd4>)
 800248c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b01a      	add	sp, #104	; 0x68
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	200018c0 	.word	0x200018c0
 800249c:	200018b8 	.word	0x200018b8
 80024a0:	200017bc 	.word	0x200017bc
 80024a4:	20000e50 	.word	0x20000e50
 80024a8:	0800d3bc 	.word	0x0800d3bc
 80024ac:	200018bc 	.word	0x200018bc
 80024b0:	0800d3e0 	.word	0x0800d3e0
 80024b4:	20000e4c 	.word	0x20000e4c
 80024b8:	0800d408 	.word	0x0800d408
 80024bc:	20000648 	.word	0x20000648

080024c0 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */

	UserDisplayManager();
 80024c8:	f006 ff94 	bl	80093f4 <UserDisplayManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f003 fdf6 	bl	80060be <osDelay>
 80024d2:	e7fb      	b.n	80024cc <StartDisplayTask+0xc>

080024d4 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const * argument)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
	UserAdcManager();
 80024dc:	f006 ffa0 	bl	8009420 <UserAdcManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f003 fdec 	bl	80060be <osDelay>
 80024e6:	e7fb      	b.n	80024e0 <StartAdcTask+0xc>

080024e8 <StartPenIrqTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPenIrqTask */
void StartPenIrqTask(void const * argument)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPenIrqTask */
	UserPenIrqManager();
 80024f0:	f006 ff6a 	bl	80093c8 <UserPenIrqManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f003 fde2 	bl	80060be <osDelay>
 80024fa:	e7fb      	b.n	80024f4 <StartPenIrqTask+0xc>

080024fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	240c      	movs	r4, #12
 8002504:	193b      	adds	r3, r7, r4
 8002506:	0018      	movs	r0, r3
 8002508:	2314      	movs	r3, #20
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f007 f902 	bl	8009716 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <MX_GPIO_Init+0x134>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <MX_GPIO_Init+0x134>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0289      	lsls	r1, r1, #10
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	4b43      	ldr	r3, [pc, #268]	; (8002630 <MX_GPIO_Init+0x134>)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b40      	ldr	r3, [pc, #256]	; (8002630 <MX_GPIO_Init+0x134>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <MX_GPIO_Init+0x134>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0309      	lsls	r1, r1, #12
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <MX_GPIO_Init+0x134>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	031b      	lsls	r3, r3, #12
 8002544:	4013      	ands	r3, r2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <MX_GPIO_Init+0x134>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <MX_GPIO_Init+0x134>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	02c9      	lsls	r1, r1, #11
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <MX_GPIO_Init+0x134>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4013      	ands	r3, r2
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <MX_GPIO_Init+0x138>)
 8002568:	2200      	movs	r2, #0
 800256a:	2130      	movs	r1, #48	; 0x30
 800256c:	0018      	movs	r0, r3
 800256e:	f001 fbea 	bl	8003d46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 8002572:	4931      	ldr	r1, [pc, #196]	; (8002638 <MX_GPIO_Init+0x13c>)
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <MX_GPIO_Init+0x140>)
 8002576:	2200      	movs	r2, #0
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fbe4 	bl	8003d46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 800257e:	0021      	movs	r1, r4
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2201      	movs	r2, #1
 800258a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2203      	movs	r2, #3
 8002596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002598:	000c      	movs	r4, r1
 800259a:	187b      	adds	r3, r7, r1
 800259c:	4a25      	ldr	r2, [pc, #148]	; (8002634 <MX_GPIO_Init+0x138>)
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f001 fa3b 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 80025a6:	0021      	movs	r1, r4
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <MX_GPIO_Init+0x144>)
 80025ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	2201      	movs	r2, #1
 80025b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2203      	movs	r2, #3
 80025be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	000c      	movs	r4, r1
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <MX_GPIO_Init+0x140>)
 80025c6:	0019      	movs	r1, r3
 80025c8:	0010      	movs	r0, r2
 80025ca:	f001 fa27 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 80025ce:	0021      	movs	r1, r4
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <MX_GPIO_Init+0x148>)
 80025da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2201      	movs	r2, #1
 80025e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80025e2:	000c      	movs	r4, r1
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_GPIO_Init+0x138>)
 80025e8:	0019      	movs	r1, r3
 80025ea:	0010      	movs	r0, r2
 80025ec:	f001 fa16 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 80025f0:	0021      	movs	r1, r4
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2208      	movs	r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2201      	movs	r2, #1
 80025fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2202      	movs	r2, #2
 8002602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 800260a:	187b      	adds	r3, r7, r1
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <MX_GPIO_Init+0x140>)
 800260e:	0019      	movs	r1, r3
 8002610:	0010      	movs	r0, r2
 8002612:	f001 fa03 	bl	8003a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2007      	movs	r0, #7
 800261c:	f001 f9cc 	bl	80039b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002620:	2007      	movs	r0, #7
 8002622:	f001 f9de 	bl	80039e2 <HAL_NVIC_EnableIRQ>

}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b009      	add	sp, #36	; 0x24
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40021000 	.word	0x40021000
 8002634:	48000800 	.word	0x48000800
 8002638:	00001009 	.word	0x00001009
 800263c:	48000400 	.word	0x48000400
 8002640:	00001001 	.word	0x00001001
 8002644:	10210000 	.word	0x10210000

08002648 <_sbrk_r>:

// Use of vTaskSuspendAll() in _sbrk_r() is normally redundant, as newlib malloc family routines call
// __malloc_lock before calling _sbrk_r(). Note vTaskSuspendAll/xTaskResumeAll support nesting.

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <_sbrk_r+0x9c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <_sbrk_r+0x2e>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <_sbrk_r+0xa0>)
 800265c:	4923      	ldr	r1, [pc, #140]	; (80026ec <_sbrk_r+0xa4>)
 800265e:	185a      	adds	r2, r3, r1
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <_sbrk_r+0xa8>)
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <_sbrk_r+0xac>)
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <_sbrk_r+0xa0>)
 800266a:	185a      	adds	r2, r3, r1
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <_sbrk_r+0xa8>)
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	001a      	movs	r2, r3
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <_sbrk_r+0x9c>)
 8002674:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002676:	f005 f92d 	bl	80078d4 <xTaskGetSchedulerState>
 800267a:	0003      	movs	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <_sbrk_r+0x3c>
 8002680:	466b      	mov	r3, sp
 8002682:	e000      	b.n	8002686 <_sbrk_r+0x3e>
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <_sbrk_r+0xb0>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002686:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8002688:	f004 fde2 	bl	8007250 <vTaskSuspendAll>
    if (currentHeapEnd + incr > limit) {
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <_sbrk_r+0xb4>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	429a      	cmp	r2, r3
 8002698:	d207      	bcs.n	80026aa <_sbrk_r+0x62>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	220c      	movs	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 80026a0:	f004 fde2 	bl	8007268 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80026a4:	2301      	movs	r3, #1
 80026a6:	425b      	negs	r3, r3
 80026a8:	e017      	b.n	80026da <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    char *previousHeapEnd = currentHeapEnd;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <_sbrk_r+0xb4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]
    currentHeapEnd += incr;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <_sbrk_r+0xb4>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	18d2      	adds	r2, r2, r3
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk_r+0xb4>)
 80026ba:	601a      	str	r2, [r3, #0]
    heapBytesRemaining -= incr;
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <_sbrk_r+0xac>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <_sbrk_r+0xac>)
 80026c6:	601a      	str	r2, [r3, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <_sbrk_r+0xb8>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	18d2      	adds	r2, r2, r3
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <_sbrk_r+0xb8>)
 80026d2:	601a      	str	r2, [r3, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 80026d4:	f004 fdc8 	bl	8007268 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 80026d8:	68bb      	ldr	r3, [r7, #8]
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000210c 	.word	0x2000210c
 80026e8:	20004000 	.word	0x20004000
 80026ec:	fffff000 	.word	0xfffff000
 80026f0:	20002278 	.word	0x20002278
 80026f4:	200004bc 	.word	0x200004bc
 80026f8:	20003000 	.word	0x20003000
 80026fc:	20000000 	.word	0x20000000
 8002700:	200004c0 	.word	0x200004c0

08002704 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)   {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    //bool insideAnISR = xPortIsInsideInterrupt();
    //configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
  vTaskSuspendAll();
 800270c:	f004 fda0 	bl	8007250 <vTaskSuspendAll>
  #endif
};
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
  (void)xTaskResumeAll();
 8002720:	f004 fda2 	bl	8007268 <xTaskResumeAll>
  #endif
};
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}

0800272c <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

  hsmbus1.Instance = I2C1;
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <MX_I2C1_SMBUS_Init+0x7c>)
 8002734:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x2000090E;
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <MX_I2C1_SMBUS_Init+0x80>)
 800273a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002744:	2202      	movs	r2, #2
 8002746:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 800274a:	2201      	movs	r2, #1
 800274c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002750:	2200      	movs	r2, #0
 8002752:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002774:	2200      	movs	r2, #0
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008061;
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <MX_I2C1_SMBUS_Init+0x84>)
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002780:	0018      	movs	r0, r3
 8002782:	f002 f8f7 	bl	8004974 <HAL_SMBUS_Init>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800278a:	f000 f991 	bl	8002ab0 <Error_Handler>
  }
  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <MX_I2C1_SMBUS_Init+0x78>)
 8002790:	0018      	movs	r0, r3
 8002792:	f002 f9b1 	bl	8004af8 <HAL_SMBUS_EnableAlert_IT>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <MX_I2C1_SMBUS_Init+0x72>
  {
    Error_Handler();
 800279a:	f000 f989 	bl	8002ab0 <Error_Handler>
  }

}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20002114 	.word	0x20002114
 80027a8:	40005400 	.word	0x40005400
 80027ac:	2000090e 	.word	0x2000090e
 80027b0:	00008061 	.word	0x00008061

080027b4 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b08b      	sub	sp, #44	; 0x2c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	2314      	movs	r3, #20
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	0018      	movs	r0, r3
 80027c2:	2314      	movs	r3, #20
 80027c4:	001a      	movs	r2, r3
 80027c6:	2100      	movs	r1, #0
 80027c8:	f006 ffa5 	bl	8009716 <memset>
  if(smbusHandle->Instance==I2C1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_SMBUS_MspInit+0xcc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d150      	bne.n	8002878 <HAL_SMBUS_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	02c9      	lsls	r1, r1, #11
 80027e0:	430a      	orrs	r2, r1
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	02db      	lsls	r3, r3, #11
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027f2:	2114      	movs	r1, #20
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2220      	movs	r2, #32
 80027f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2212      	movs	r2, #18
 80027fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2201      	movs	r2, #1
 8002804:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2203      	movs	r2, #3
 800280a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C1;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2203      	movs	r2, #3
 8002810:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	000c      	movs	r4, r1
 8002814:	187b      	adds	r3, r7, r1
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_SMBUS_MspInit+0xd4>)
 8002818:	0019      	movs	r1, r3
 800281a:	0010      	movs	r0, r2
 800281c:	f001 f8fe 	bl	8003a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002820:	0021      	movs	r1, r4
 8002822:	187b      	adds	r3, r7, r1
 8002824:	22c0      	movs	r2, #192	; 0xc0
 8002826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2212      	movs	r2, #18
 800282c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2201      	movs	r2, #1
 8002832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2203      	movs	r2, #3
 8002838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2201      	movs	r2, #1
 800283e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	187b      	adds	r3, r7, r1
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_SMBUS_MspInit+0xd4>)
 8002844:	0019      	movs	r1, r3
 8002846:	0010      	movs	r0, r2
 8002848:	f001 f8e8 	bl	8003a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0389      	lsls	r1, r1, #14
 8002856:	430a      	orrs	r2, r1
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_SMBUS_MspInit+0xd0>)
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	039b      	lsls	r3, r3, #14
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	2017      	movs	r0, #23
 800286e:	f001 f8a3 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002872:	2017      	movs	r0, #23
 8002874:	f001 f8b5 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b00b      	add	sp, #44	; 0x2c
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	40005400 	.word	0x40005400
 8002884:	40021000 	.word	0x40021000
 8002888:	48000400 	.word	0x48000400

0800288c <smbus_scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void smbus_scan() {
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af02      	add	r7, sp, #8


    int device_found=0;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    char address[20] = "";
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	3304      	adds	r3, #4
 800289e:	2210      	movs	r2, #16
 80028a0:	2100      	movs	r1, #0
 80028a2:	0018      	movs	r0, r3
 80028a4:	f006 ff37 	bl	8009716 <memset>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80028a8:	231a      	movs	r3, #26
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e033      	b.n	800291a <smbus_scan+0x8e>
        res = HAL_SMBUS_IsDeviceReady(&hsmbus1, i << 1, 1, 10);
 80028b2:	231a      	movs	r3, #26
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	18db      	adds	r3, r3, r3
 80028ba:	b299      	uxth	r1, r3
 80028bc:	2519      	movs	r5, #25
 80028be:	197c      	adds	r4, r7, r5
 80028c0:	4821      	ldr	r0, [pc, #132]	; (8002948 <smbus_scan+0xbc>)
 80028c2:	230a      	movs	r3, #10
 80028c4:	2201      	movs	r2, #1
 80028c6:	f002 f933 	bl	8004b30 <HAL_SMBUS_IsDeviceReady>
 80028ca:	0003      	movs	r3, r0
 80028cc:	7023      	strb	r3, [r4, #0]
        if(res == HAL_OK) {
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11b      	bne.n	800290e <smbus_scan+0x82>
        	device_found++;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]

        	snprintf(address, sizeof(address), "SMBUS FOUND: %d", i);
 80028dc:	231a      	movs	r3, #26
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <smbus_scan+0xc0>)
 80028e4:	1d38      	adds	r0, r7, #4
 80028e6:	2114      	movs	r1, #20
 80028e8:	f007 fe9a 	bl	800a620 <sniprintf>
        	ILI9341_Draw_Text(address, 1, 180 + (device_found*20), GREEN, 2, BLACK);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2214      	movs	r2, #20
 80028f2:	4353      	muls	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	33b4      	adds	r3, #180	; 0xb4
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4915      	ldr	r1, [pc, #84]	; (8002950 <smbus_scan+0xc4>)
 80028fc:	1d38      	adds	r0, r7, #4
 80028fe:	2300      	movs	r3, #0
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	000b      	movs	r3, r1
 8002908:	2101      	movs	r1, #1
 800290a:	f005 fc73 	bl	80081f4 <ILI9341_Draw_Text>
    for(uint16_t i = 0; i < 128; i++) {
 800290e:	211a      	movs	r1, #26
 8002910:	187b      	adds	r3, r7, r1
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	187b      	adds	r3, r7, r1
 8002916:	3201      	adds	r2, #1
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	231a      	movs	r3, #26
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	2b7f      	cmp	r3, #127	; 0x7f
 8002922:	d9c6      	bls.n	80028b2 <smbus_scan+0x26>

        }
    }
    if(!device_found)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <smbus_scan+0xb4>
    {

    	ILI9341_Draw_Text("SMBUS ERROR", 1, 200, RED, 2, BLACK);
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <smbus_scan+0xc8>)
 800292c:	480a      	ldr	r0, [pc, #40]	; (8002958 <smbus_scan+0xcc>)
 800292e:	2300      	movs	r3, #0
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2302      	movs	r3, #2
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	0013      	movs	r3, r2
 8002938:	22c8      	movs	r2, #200	; 0xc8
 800293a:	2101      	movs	r1, #1
 800293c:	f005 fc5a 	bl	80081f4 <ILI9341_Draw_Text>
    }
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b008      	add	sp, #32
 8002946:	bdb0      	pop	{r4, r5, r7, pc}
 8002948:	20002114 	.word	0x20002114
 800294c:	0800d424 	.word	0x0800d424
 8002950:	000014a2 	.word	0x000014a2
 8002954:	0000d8c3 	.word	0x0000d8c3
 8002958:	0800d434 	.word	0x0800d434

0800295c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002960:	f000 fa9e 	bl	8002ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002964:	f000 f83c 	bl	80029e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002968:	f7ff fdc8 	bl	80024fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800296c:	f000 f8a6 	bl	8002abc <MX_SPI1_Init>
  MX_SPI2_Init();
 8002970:	f000 f8e2 	bl	8002b38 <MX_SPI2_Init>
  MX_TIM17_Init();
 8002974:	f000 fa1a 	bl	8002dac <MX_TIM17_Init>
  MX_ADC_Init();
 8002978:	f7ff fc7c 	bl	8002274 <MX_ADC_Init>
  MX_I2C1_SMBUS_Init();
 800297c:	f7ff fed6 	bl	800272c <MX_I2C1_SMBUS_Init>
  /* USER CODE BEGIN 2 */


  // init ILI9341 library
  ILI9341_Init();
 8002980:	f005 fca9 	bl	80082d6 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002984:	2001      	movs	r0, #1
 8002986:	f006 f91b 	bl	8008bc0 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(LBLUE);
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <main+0x78>)
 800298c:	0018      	movs	r0, r3
 800298e:	f005 feab 	bl	80086e8 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 8002992:	f006 fbad 	bl	80090f0 <TSC2046_HM_Init>
  smbus_scan();
 8002996:	f7ff ff79 	bl	800288c <smbus_scan>
  if(HAL_SMBUS_GetState(&hsmbus1) == HAL_SMBUS_STATE_READY)
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <main+0x7c>)
 800299c:	0018      	movs	r0, r3
 800299e:	f002 fad5 	bl	8004f4c <HAL_SMBUS_GetState>
 80029a2:	0003      	movs	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <main+0x5c>
  {
	  __HAL_SMBUS_ENABLE_IT(&hsmbus1, SMBUS_IT_ADDRI);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <main+0x7c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <main+0x7c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2108      	movs	r1, #8
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
  }


  HAL_ADCEx_Calibration_Start(&hadc);
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <main+0x80>)
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 feb2 	bl	8003724 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <main+0x80>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fc32 	bl	800322c <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80029c8:	f7ff fd0e 	bl	80023e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80029cc:	f003 fb49 	bl	8006062 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <main+0x74>
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	00004cf6 	.word	0x00004cf6
 80029d8:	20002114 	.word	0x20002114
 80029dc:	20000608 	.word	0x20000608

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b099      	sub	sp, #100	; 0x64
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	242c      	movs	r4, #44	; 0x2c
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	0018      	movs	r0, r3
 80029ec:	2334      	movs	r3, #52	; 0x34
 80029ee:	001a      	movs	r2, r3
 80029f0:	2100      	movs	r1, #0
 80029f2:	f006 fe90 	bl	8009716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f6:	231c      	movs	r3, #28
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	0018      	movs	r0, r3
 80029fc:	2310      	movs	r3, #16
 80029fe:	001a      	movs	r2, r3
 8002a00:	2100      	movs	r1, #0
 8002a02:	f006 fe88 	bl	8009716 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a06:	003b      	movs	r3, r7
 8002a08:	0018      	movs	r0, r3
 8002a0a:	231c      	movs	r3, #28
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f006 fe81 	bl	8009716 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002a14:	0021      	movs	r1, r4
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2212      	movs	r2, #18
 8002a1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2201      	movs	r2, #1
 8002a20:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2201      	movs	r2, #1
 8002a26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2210      	movs	r2, #16
 8002a32:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2202      	movs	r2, #2
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	0212      	lsls	r2, r2, #8
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0352      	lsls	r2, r2, #13
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 f9b0 	bl	8003db8 <HAL_RCC_OscConfig>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d001      	beq.n	8002a60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a5c:	f000 f828 	bl	8002ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a60:	211c      	movs	r1, #28
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f001 fd20 	bl	80044c4 <HAL_RCC_ClockConfig>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002a88:	f000 f812 	bl	8002ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a8c:	003b      	movs	r3, r7
 8002a8e:	2220      	movs	r2, #32
 8002a90:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002a92:	003b      	movs	r3, r7
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a98:	003b      	movs	r3, r7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 fe6a 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002aa4:	f000 f804 	bl	8002ab0 <Error_Handler>
  }
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b019      	add	sp, #100	; 0x64
 8002aae:	bd90      	pop	{r4, r7, pc}

08002ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <MX_SPI1_Init+0x78>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ac8:	2282      	movs	r2, #130	; 0x82
 8002aca:	0052      	lsls	r2, r2, #1
 8002acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ad6:	22e0      	movs	r2, #224	; 0xe0
 8002ad8:	00d2      	lsls	r2, r2, #3
 8002ada:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002af2:	2208      	movs	r2, #8
 8002af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <MX_SPI1_Init+0x74>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 ffe5 	bl	8005aec <HAL_SPI_Init>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b26:	f7ff ffc3 	bl	8002ab0 <Error_Handler>
  }

}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200021c8 	.word	0x200021c8
 8002b34:	40013000 	.word	0x40013000

08002b38 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <MX_SPI2_Init+0x78>)
 8002b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b44:	2282      	movs	r2, #130	; 0x82
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b52:	22e0      	movs	r2, #224	; 0xe0
 8002b54:	00d2      	lsls	r2, r2, #3
 8002b56:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b6e:	2210      	movs	r2, #16
 8002b70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b86:	2207      	movs	r2, #7
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <MX_SPI2_Init+0x74>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 ffa7 	bl	8005aec <HAL_SPI_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ba2:	f7ff ff85 	bl	8002ab0 <Error_Handler>
  }

}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20002164 	.word	0x20002164
 8002bb0:	40003800 	.word	0x40003800

08002bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	231c      	movs	r3, #28
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	2314      	movs	r3, #20
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	f006 fda5 	bl	8009716 <memset>
  if(spiHandle->Instance==SPI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <HAL_SPI_MspInit+0x104>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d133      	bne.n	8002c3e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0149      	lsls	r1, r1, #5
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	015b      	lsls	r3, r3, #5
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0289      	lsls	r1, r1, #10
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	615a      	str	r2, [r3, #20]
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c0e:	211c      	movs	r1, #28
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	22e0      	movs	r2, #224	; 0xe0
 8002c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2202      	movs	r2, #2
 8002c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2203      	movs	r2, #3
 8002c26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	187a      	adds	r2, r7, r1
 8002c30:	2390      	movs	r3, #144	; 0x90
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fef0 	bl	8003a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c3c:	e037      	b.n	8002cae <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_SPI_MspInit+0x10c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d132      	bne.n	8002cae <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	01c9      	lsls	r1, r1, #7
 8002c52:	430a      	orrs	r2, r1
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	01db      	lsls	r3, r3, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	02c9      	lsls	r1, r1, #11
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	615a      	str	r2, [r3, #20]
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_SPI_MspInit+0x108>)
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	02db      	lsls	r3, r3, #11
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8002c80:	211c      	movs	r1, #28
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	22e0      	movs	r2, #224	; 0xe0
 8002c86:	0212      	lsls	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_SPI_MspInit+0x110>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f000 feb7 	bl	8003a1c <HAL_GPIO_Init>
}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b00c      	add	sp, #48	; 0x30
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40013000 	.word	0x40013000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40003800 	.word	0x40003800
 8002cc4:	48000400 	.word	0x48000400

08002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_MspInit+0x50>)
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_MspInit+0x50>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	619a      	str	r2, [r3, #24]
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_MspInit+0x50>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_MspInit+0x50>)
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_MspInit+0x50>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0549      	lsls	r1, r1, #21
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_MspInit+0x50>)
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002d02:	2302      	movs	r3, #2
 8002d04:	425b      	negs	r3, r3
 8002d06:	2200      	movs	r2, #0
 8002d08:	2103      	movs	r1, #3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fe54 	bl	80039b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <HardFault_Handler+0x4>

08002d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d30:	f000 f8fe 	bl	8002f30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d34:	f004 fdce 	bl	80078d4 <xTaskGetSchedulerState>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d3e:	f005 f87b 	bl	8007e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d4c:	2040      	movs	r0, #64	; 0x40
 8002d4e:	f001 f817 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
//	TSC2046_IM_HardwareManagerLoopHandler();
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <TIM17_IRQHandler+0x14>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f002 ff8a 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	2000222c 	.word	0x2000222c

08002d70 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hsmbus1.Instance->ISR & (SMBUS_FLAG_BERR | SMBUS_FLAG_ARLO | SMBUS_FLAG_OVR | SMBUS_FLAG_TIMEOUT | SMBUS_FLAG_ALERT | SMBUS_FLAG_PECERR)) {
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <I2C1_IRQHandler+0x2c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	23fc      	movs	r3, #252	; 0xfc
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d004      	beq.n	8002d8c <I2C1_IRQHandler+0x1c>
    HAL_SMBUS_ER_IRQHandler(&hsmbus1);
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <I2C1_IRQHandler+0x2c>)
 8002d84:	0018      	movs	r0, r3
 8002d86:	f002 f895 	bl	8004eb4 <HAL_SMBUS_ER_IRQHandler>
    HAL_SMBUS_EV_IRQHandler(&hsmbus1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002d8a:	e003      	b.n	8002d94 <I2C1_IRQHandler+0x24>
    HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <I2C1_IRQHandler+0x2c>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 ffd8 	bl	8004d44 <HAL_SMBUS_EV_IRQHandler>
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20002114 	.word	0x20002114

08002da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002db2:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <MX_TIM17_Init+0x4c>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	00d2      	lsls	r2, r2, #3
 8002dc8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <MX_TIM17_Init+0x48>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 ff1e 	bl	8005c20 <HAL_TIM_Base_Init>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002de8:	f7ff fe62 	bl	8002ab0 <Error_Handler>
  }

}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	2000222c 	.word	0x2000222c
 8002df8:	40014800 	.word	0x40014800

08002dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_TIM_Base_MspInit+0x48>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d115      	bne.n	8002e3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_TIM_Base_MspInit+0x4c>)
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_TIM_Base_MspInit+0x4c>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	02c9      	lsls	r1, r1, #11
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_TIM_Base_MspInit+0x4c>)
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	02db      	lsls	r3, r3, #11
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2016      	movs	r0, #22
 8002e30:	f000 fdc2 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e34:	2016      	movs	r0, #22
 8002e36:	f000 fdd4 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	40014800 	.word	0x40014800
 8002e48:	40021000 	.word	0x40021000

08002e4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e52:	490e      	ldr	r1, [pc, #56]	; (8002e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <LoopForever+0xe>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e58:	e002      	b.n	8002e60 <LoopCopyDataInit>

08002e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5e:	3304      	adds	r3, #4

08002e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e64:	d3f9      	bcc.n	8002e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e68:	4c0b      	ldr	r4, [pc, #44]	; (8002e98 <LoopForever+0x16>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e6c:	e001      	b.n	8002e72 <LoopFillZerobss>

08002e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e70:	3204      	adds	r2, #4

08002e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e74:	d3fb      	bcc.n	8002e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e76:	f7ff ff93 	bl	8002da0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e7a:	f006 fc15 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e7e:	f7ff fd6d 	bl	800295c <main>

08002e82 <LoopForever>:

LoopForever:
    b LoopForever
 8002e82:	e7fe      	b.n	8002e82 <LoopForever>
  ldr   r0, =_estack
 8002e84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002e90:	0800da90 	.word	0x0800da90
  ldr r2, =_sbss
 8002e94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002e98:	20002274 	.word	0x20002274

08002e9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e9c:	e7fe      	b.n	8002e9c <ADC1_COMP_IRQHandler>
	...

08002ea0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_Init+0x24>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_Init+0x24>)
 8002eaa:	2110      	movs	r1, #16
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f000 f809 	bl	8002ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb6:	f7ff ff07 	bl	8002cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_InitTick+0x5c>)
 8002ed2:	681c      	ldr	r4, [r3, #0]
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_InitTick+0x60>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	0019      	movs	r1, r3
 8002eda:	23fa      	movs	r3, #250	; 0xfa
 8002edc:	0098      	lsls	r0, r3, #2
 8002ede:	f7fd f925 	bl	800012c <__udivsi3>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0020      	movs	r0, r4
 8002ee8:	f7fd f920 	bl	800012c <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fd87 	bl	8003a02 <HAL_SYSTICK_Config>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e00f      	b.n	8002f1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d80b      	bhi.n	8002f1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	2301      	movs	r3, #1
 8002f06:	425b      	negs	r3, r3
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 fd54 	bl	80039b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_InitTick+0x64>)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b003      	add	sp, #12
 8002f22:	bd90      	pop	{r4, r7, pc}
 8002f24:	20000004 	.word	0x20000004
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_IncTick+0x1c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	001a      	movs	r2, r3
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_IncTick+0x20>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	18d2      	adds	r2, r2, r3
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_IncTick+0x20>)
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	2000000c 	.word	0x2000000c
 8002f50:	2000226c 	.word	0x2000226c

08002f54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <HAL_GetTick+0x10>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	2000226c 	.word	0x2000226c

08002f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	d005      	beq.n	8002f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_Delay+0x40>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	001a      	movs	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	f7ff ffe0 	bl	8002f54 <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d8f7      	bhi.n	8002f90 <HAL_Delay+0x28>
  {
  }
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000000c 	.word	0x2000000c

08002fac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e125      	b.n	8003216 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2234      	movs	r2, #52	; 0x34
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff f9a2 	bl	800232c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d000      	beq.n	8002ff4 <HAL_ADC_Init+0x48>
 8002ff2:	e103      	b.n	80031fc <HAL_ADC_Init+0x250>
 8002ff4:	230f      	movs	r3, #15
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d000      	beq.n	8003000 <HAL_ADC_Init+0x54>
 8002ffe:	e0fd      	b.n	80031fc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800300a:	d000      	beq.n	800300e <HAL_ADC_Init+0x62>
 800300c:	e0f6      	b.n	80031fc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4a83      	ldr	r2, [pc, #524]	; (8003220 <HAL_ADC_Init+0x274>)
 8003014:	4013      	ands	r3, r2
 8003016:	2202      	movs	r2, #2
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2203      	movs	r2, #3
 8003026:	4013      	ands	r3, r2
 8003028:	2b01      	cmp	r3, #1
 800302a:	d112      	bne.n	8003052 <HAL_ADC_Init+0xa6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	2b01      	cmp	r3, #1
 8003038:	d009      	beq.n	800304e <HAL_ADC_Init+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	401a      	ands	r2, r3
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	429a      	cmp	r2, r3
 800304c:	d101      	bne.n	8003052 <HAL_ADC_Init+0xa6>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_ADC_Init+0xa8>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2218      	movs	r2, #24
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	0899      	lsrs	r1, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4964      	ldr	r1, [pc, #400]	; (8003224 <HAL_ADC_Init+0x278>)
 8003092:	400a      	ands	r2, r1
 8003094:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7e1b      	ldrb	r3, [r3, #24]
 800309a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7e5b      	ldrb	r3, [r3, #25]
 80030a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7e9b      	ldrb	r3, [r3, #26]
 80030a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d002      	beq.n	80030ba <HAL_ADC_Init+0x10e>
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Init+0x110>
 80030ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_Init+0x124>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_Init+0x126>
 80030d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80030d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2124      	movs	r1, #36	; 0x24
 80030d8:	5c5b      	ldrb	r3, [r3, r1]
 80030da:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030dc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7edb      	ldrb	r3, [r3, #27]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d115      	bne.n	8003118 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7e9b      	ldrb	r3, [r3, #26]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	0252      	lsls	r2, r2, #9
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	e00b      	b.n	8003118 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2220      	movs	r2, #32
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	2201      	movs	r2, #1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	23c2      	movs	r3, #194	; 0xc2
 800311e:	33ff      	adds	r3, #255	; 0xff
 8003120:	429a      	cmp	r2, r3
 8003122:	d007      	beq.n	8003134 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800312c:	4313      	orrs	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68d9      	ldr	r1, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	055b      	lsls	r3, r3, #21
 800314c:	429a      	cmp	r2, r3
 800314e:	d01b      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d017      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2b02      	cmp	r3, #2
 800315e:	d013      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	2b03      	cmp	r3, #3
 8003166:	d00f      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00b      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2b05      	cmp	r3, #5
 8003176:	d007      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	2b06      	cmp	r3, #6
 800317e:	d003      	beq.n	8003188 <HAL_ADC_Init+0x1dc>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	2b07      	cmp	r3, #7
 8003186:	d112      	bne.n	80031ae <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2107      	movs	r1, #7
 8003194:	438a      	bics	r2, r1
 8003196:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6959      	ldr	r1, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	2207      	movs	r2, #7
 80031a4:	401a      	ands	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_ADC_Init+0x27c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d10b      	bne.n	80031d6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	2203      	movs	r2, #3
 80031ca:	4393      	bics	r3, r2
 80031cc:	2201      	movs	r2, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031d4:	e01c      	b.n	8003210 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	2212      	movs	r2, #18
 80031dc:	4393      	bics	r3, r2
 80031de:	2210      	movs	r2, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2201      	movs	r2, #1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80031f2:	230f      	movs	r3, #15
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031fa:	e009      	b.n	8003210 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	2210      	movs	r2, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003208:	230f      	movs	r3, #15
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	781b      	ldrb	r3, [r3, #0]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	fffffefd 	.word	0xfffffefd
 8003224:	fffe0219 	.word	0xfffe0219
 8003228:	833fffe7 	.word	0x833fffe7

0800322c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	d138      	bne.n	80032ba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2234      	movs	r2, #52	; 0x34
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Start+0x2a>
 8003252:	2302      	movs	r3, #2
 8003254:	e038      	b.n	80032c8 <HAL_ADC_Start+0x9c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2234      	movs	r2, #52	; 0x34
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7e5b      	ldrb	r3, [r3, #25]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003266:	230f      	movs	r3, #15
 8003268:	18fc      	adds	r4, r7, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f9dd 	bl	800362c <ADC_Enable>
 8003272:	0003      	movs	r3, r0
 8003274:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003276:	230f      	movs	r3, #15
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d120      	bne.n	80032c2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_ADC_Start+0xa4>)
 8003286:	4013      	ands	r3, r2
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2234      	movs	r2, #52	; 0x34
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	221c      	movs	r2, #28
 80032a6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2104      	movs	r1, #4
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	e003      	b.n	80032c2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ba:	230f      	movs	r3, #15
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	781b      	ldrb	r3, [r3, #0]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b005      	add	sp, #20
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	fffff0fe 	.word	0xfffff0fe

080032d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d102      	bne.n	80032ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80032e6:	2308      	movs	r3, #8
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e014      	b.n	8003316 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10b      	bne.n	8003312 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	2220      	movs	r2, #32
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2234      	movs	r2, #52	; 0x34
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06b      	b.n	80033ea <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003312:	230c      	movs	r3, #12
 8003314:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003316:	f7ff fe1d 	bl	8002f54 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800331e:	e019      	b.n	8003354 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	d016      	beq.n	8003354 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_ADC_PollForConversion+0x68>
 800332c:	f7ff fe12 	bl	8002f54 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d20b      	bcs.n	8003354 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	2204      	movs	r2, #4
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2234      	movs	r2, #52	; 0x34
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e04a      	b.n	80033ea <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	d0df      	beq.n	8003320 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	23c0      	movs	r3, #192	; 0xc0
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	4013      	ands	r3, r2
 800337a:	d12d      	bne.n	80033d8 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003380:	2b00      	cmp	r3, #0
 8003382:	d129      	bne.n	80033d8 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	4013      	ands	r3, r2
 800338e:	2b08      	cmp	r3, #8
 8003390:	d122      	bne.n	80033d8 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2204      	movs	r2, #4
 800339a:	4013      	ands	r3, r2
 800339c:	d110      	bne.n	80033c0 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	210c      	movs	r1, #12
 80033aa:	438a      	bics	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_ADC_PollForConversion+0x120>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	2201      	movs	r2, #1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
 80033be:	e00b      	b.n	80033d8 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	2220      	movs	r2, #32
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	2201      	movs	r2, #1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	220c      	movs	r2, #12
 80033e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	fffffefe 	.word	0xfffffefe

080033f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341a:	230f      	movs	r3, #15
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	055b      	lsls	r3, r3, #21
 800342e:	429a      	cmp	r2, r3
 8003430:	d011      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x46>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d00d      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x46>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	2b02      	cmp	r3, #2
 8003440:	d009      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x46>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	2b03      	cmp	r3, #3
 8003448:	d005      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x46>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	2b04      	cmp	r3, #4
 8003450:	d001      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x46>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2234      	movs	r2, #52	; 0x34
 800345a:	5c9b      	ldrb	r3, [r3, r2]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x54>
 8003460:	2302      	movs	r3, #2
 8003462:	e0d0      	b.n	8003606 <HAL_ADC_ConfigChannel+0x1f6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2234      	movs	r2, #52	; 0x34
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2204      	movs	r2, #4
 8003474:	4013      	ands	r3, r2
 8003476:	d000      	beq.n	800347a <HAL_ADC_ConfigChannel+0x6a>
 8003478:	e0b4      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a64      	ldr	r2, [pc, #400]	; (8003610 <HAL_ADC_ConfigChannel+0x200>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d100      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x76>
 8003484:	e082      	b.n	800358c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	055b      	lsls	r3, r3, #21
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d037      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d033      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d02f      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d02b      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d027      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d023      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d01f      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	2b07      	cmp	r3, #7
 80034de:	d01b      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2107      	movs	r1, #7
 80034ec:	400b      	ands	r3, r1
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d012      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2107      	movs	r1, #7
 80034fe:	438a      	bics	r2, r1
 8003500:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6959      	ldr	r1, [r3, #20]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2207      	movs	r2, #7
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d007      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x120>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b11      	cmp	r3, #17
 8003526:	d003      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x120>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b12      	cmp	r3, #18
 800352e:	d163      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_ADC_ConfigChannel+0x204>)
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d009      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x140>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b11      	cmp	r3, #17
 8003542:	d102      	bne.n	800354a <HAL_ADC_ConfigChannel+0x13a>
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	03db      	lsls	r3, r3, #15
 8003548:	e004      	b.n	8003554 <HAL_ADC_ConfigChannel+0x144>
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	045b      	lsls	r3, r3, #17
 800354e:	e001      	b.n	8003554 <HAL_ADC_ConfigChannel+0x144>
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <HAL_ADC_ConfigChannel+0x204>)
 8003556:	430b      	orrs	r3, r1
 8003558:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b10      	cmp	r3, #16
 8003560:	d14a      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_ADC_ConfigChannel+0x208>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	492d      	ldr	r1, [pc, #180]	; (800361c <HAL_ADC_ConfigChannel+0x20c>)
 8003568:	0018      	movs	r0, r3
 800356a:	f7fc fddf 	bl	800012c <__udivsi3>
 800356e:	0003      	movs	r3, r0
 8003570:	001a      	movs	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	189b      	adds	r3, r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800357c:	e002      	b.n	8003584 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3b01      	subs	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f9      	bne.n	800357e <HAL_ADC_ConfigChannel+0x16e>
 800358a:	e035      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	4099      	lsls	r1, r3
 800359a:	000b      	movs	r3, r1
 800359c:	43d9      	mvns	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	400a      	ands	r2, r1
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d007      	beq.n	80035be <HAL_ADC_ConfigChannel+0x1ae>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b11      	cmp	r3, #17
 80035b4:	d003      	beq.n	80035be <HAL_ADC_ConfigChannel+0x1ae>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d11c      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_ADC_ConfigChannel+0x204>)
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d007      	beq.n	80035da <HAL_ADC_ConfigChannel+0x1ca>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b11      	cmp	r3, #17
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x1c6>
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_ADC_ConfigChannel+0x210>)
 80035d4:	e002      	b.n	80035dc <HAL_ADC_ConfigChannel+0x1cc>
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_ADC_ConfigChannel+0x214>)
 80035d8:	e000      	b.n	80035dc <HAL_ADC_ConfigChannel+0x1cc>
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_ADC_ConfigChannel+0x218>)
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_ADC_ConfigChannel+0x204>)
 80035de:	400b      	ands	r3, r1
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e009      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	2220      	movs	r2, #32
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80035f0:	230f      	movs	r3, #15
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2234      	movs	r2, #52	; 0x34
 80035fc:	2100      	movs	r1, #0
 80035fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003600:	230f      	movs	r3, #15
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	781b      	ldrb	r3, [r3, #0]
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	00001001 	.word	0x00001001
 8003614:	40012708 	.word	0x40012708
 8003618:	20000004 	.word	0x20000004
 800361c:	000f4240 	.word	0x000f4240
 8003620:	ffbfffff 	.word	0xffbfffff
 8003624:	feffffff 	.word	0xfeffffff
 8003628:	ff7fffff 	.word	0xff7fffff

0800362c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2203      	movs	r2, #3
 8003644:	4013      	ands	r3, r2
 8003646:	2b01      	cmp	r3, #1
 8003648:	d112      	bne.n	8003670 <ADC_Enable+0x44>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	2b01      	cmp	r3, #1
 8003656:	d009      	beq.n	800366c <ADC_Enable+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	429a      	cmp	r2, r3
 800366a:	d101      	bne.n	8003670 <ADC_Enable+0x44>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <ADC_Enable+0x46>
 8003670:	2300      	movs	r3, #0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14b      	bne.n	800370e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <ADC_Enable+0xec>)
 800367e:	4013      	ands	r3, r2
 8003680:	d00d      	beq.n	800369e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	2210      	movs	r2, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2201      	movs	r2, #1
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e038      	b.n	8003710 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <ADC_Enable+0xf0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	491b      	ldr	r1, [pc, #108]	; (8003720 <ADC_Enable+0xf4>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fc fd39 	bl	800012c <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036be:	e002      	b.n	80036c6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f9      	bne.n	80036c0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80036cc:	f7ff fc42 	bl	8002f54 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036d4:	e014      	b.n	8003700 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036d6:	f7ff fc3d 	bl	8002f54 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d90d      	bls.n	8003700 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	2210      	movs	r2, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	2201      	movs	r2, #1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	4013      	ands	r3, r2
 800370a:	2b01      	cmp	r3, #1
 800370c:	d1e3      	bne.n	80036d6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}
 8003718:	80000017 	.word	0x80000017
 800371c:	20000004 	.word	0x20000004
 8003720:	000f4240 	.word	0x000f4240

08003724 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372c:	2317      	movs	r3, #23
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2234      	movs	r2, #52	; 0x34
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_ADCEx_Calibration_Start+0x26>
 8003746:	2302      	movs	r3, #2
 8003748:	e084      	b.n	8003854 <HAL_ADCEx_Calibration_Start+0x130>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2234      	movs	r2, #52	; 0x34
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2203      	movs	r2, #3
 800375a:	4013      	ands	r3, r2
 800375c:	2b01      	cmp	r3, #1
 800375e:	d112      	bne.n	8003786 <HAL_ADCEx_Calibration_Start+0x62>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	2b01      	cmp	r3, #1
 800376c:	d009      	beq.n	8003782 <HAL_ADCEx_Calibration_Start+0x5e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	401a      	ands	r2, r3
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	429a      	cmp	r2, r3
 8003780:	d101      	bne.n	8003786 <HAL_ADCEx_Calibration_Start+0x62>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_ADCEx_Calibration_Start+0x64>
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d152      	bne.n	8003832 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_ADCEx_Calibration_Start+0x138>)
 8003792:	4013      	ands	r3, r2
 8003794:	2202      	movs	r2, #2
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2203      	movs	r2, #3
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2103      	movs	r1, #3
 80037b4:	438a      	bics	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	0609      	lsls	r1, r1, #24
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80037ca:	f7ff fbc3 	bl	8002f54 <HAL_GetTick>
 80037ce:	0003      	movs	r3, r0
 80037d0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037d2:	e014      	b.n	80037fe <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037d4:	f7ff fbbe 	bl	8002f54 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d90d      	bls.n	80037fe <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	2212      	movs	r2, #18
 80037e8:	4393      	bics	r3, r2
 80037ea:	2210      	movs	r2, #16
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2234      	movs	r2, #52	; 0x34
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e02a      	b.n	8003854 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	0fdb      	lsrs	r3, r3, #31
 8003806:	07da      	lsls	r2, r3, #31
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	429a      	cmp	r2, r3
 800380e:	d0e1      	beq.n	80037d4 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68d9      	ldr	r1, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	430a      	orrs	r2, r1
 800381e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2203      	movs	r2, #3
 8003826:	4393      	bics	r3, r2
 8003828:	2201      	movs	r2, #1
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
 8003830:	e009      	b.n	8003846 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	2220      	movs	r2, #32
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800383e:	2317      	movs	r3, #23
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2234      	movs	r2, #52	; 0x34
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800384e:	2317      	movs	r3, #23
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b006      	add	sp, #24
 800385a:	bd80      	pop	{r7, pc}
 800385c:	fffffefd 	.word	0xfffffefd

08003860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b7f      	cmp	r3, #127	; 0x7f
 8003872:	d809      	bhi.n	8003888 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003874:	1dfb      	adds	r3, r7, #7
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	001a      	movs	r2, r3
 800387a:	231f      	movs	r3, #31
 800387c:	401a      	ands	r2, r3
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <__NVIC_EnableIRQ+0x30>)
 8003880:	2101      	movs	r1, #1
 8003882:	4091      	lsls	r1, r2
 8003884:	000a      	movs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
  }
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	0002      	movs	r2, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b7f      	cmp	r3, #127	; 0x7f
 80038a8:	d828      	bhi.n	80038fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <__NVIC_SetPriority+0xd4>)
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	33c0      	adds	r3, #192	; 0xc0
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	589b      	ldr	r3, [r3, r2]
 80038ba:	1dfa      	adds	r2, r7, #7
 80038bc:	7812      	ldrb	r2, [r2, #0]
 80038be:	0011      	movs	r1, r2
 80038c0:	2203      	movs	r2, #3
 80038c2:	400a      	ands	r2, r1
 80038c4:	00d2      	lsls	r2, r2, #3
 80038c6:	21ff      	movs	r1, #255	; 0xff
 80038c8:	4091      	lsls	r1, r2
 80038ca:	000a      	movs	r2, r1
 80038cc:	43d2      	mvns	r2, r2
 80038ce:	401a      	ands	r2, r3
 80038d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	019b      	lsls	r3, r3, #6
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	401a      	ands	r2, r3
 80038da:	1dfb      	adds	r3, r7, #7
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	0018      	movs	r0, r3
 80038e0:	2303      	movs	r3, #3
 80038e2:	4003      	ands	r3, r0
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038e8:	481f      	ldr	r0, [pc, #124]	; (8003968 <__NVIC_SetPriority+0xd4>)
 80038ea:	1dfb      	adds	r3, r7, #7
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	430a      	orrs	r2, r1
 80038f4:	33c0      	adds	r3, #192	; 0xc0
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038fa:	e031      	b.n	8003960 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038fc:	4a1b      	ldr	r2, [pc, #108]	; (800396c <__NVIC_SetPriority+0xd8>)
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0019      	movs	r1, r3
 8003904:	230f      	movs	r3, #15
 8003906:	400b      	ands	r3, r1
 8003908:	3b08      	subs	r3, #8
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3306      	adds	r3, #6
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	3304      	adds	r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1dfa      	adds	r2, r7, #7
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	0011      	movs	r1, r2
 800391c:	2203      	movs	r2, #3
 800391e:	400a      	ands	r2, r1
 8003920:	00d2      	lsls	r2, r2, #3
 8003922:	21ff      	movs	r1, #255	; 0xff
 8003924:	4091      	lsls	r1, r2
 8003926:	000a      	movs	r2, r1
 8003928:	43d2      	mvns	r2, r2
 800392a:	401a      	ands	r2, r3
 800392c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	401a      	ands	r2, r3
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	0018      	movs	r0, r3
 800393c:	2303      	movs	r3, #3
 800393e:	4003      	ands	r3, r0
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003944:	4809      	ldr	r0, [pc, #36]	; (800396c <__NVIC_SetPriority+0xd8>)
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	001c      	movs	r4, r3
 800394c:	230f      	movs	r3, #15
 800394e:	4023      	ands	r3, r4
 8003950:	3b08      	subs	r3, #8
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	430a      	orrs	r2, r1
 8003956:	3306      	adds	r3, #6
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	18c3      	adds	r3, r0, r3
 800395c:	3304      	adds	r3, #4
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b003      	add	sp, #12
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <SysTick_Config+0x40>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e010      	b.n	80039a8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <SysTick_Config+0x44>)
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	3a01      	subs	r2, #1
 800398c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	2301      	movs	r3, #1
 8003990:	425b      	negs	r3, r3
 8003992:	2103      	movs	r1, #3
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff ff7d 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <SysTick_Config+0x44>)
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <SysTick_Config+0x44>)
 80039a2:	2207      	movs	r2, #7
 80039a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	00ffffff 	.word	0x00ffffff
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	210f      	movs	r1, #15
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	1c02      	adds	r2, r0, #0
 80039c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7ff ff5d 	bl	8003894 <__NVIC_SetPriority>
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b004      	add	sp, #16
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	0002      	movs	r2, r0
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ff33 	bl	8003860 <__NVIC_EnableIRQ>
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff ffaf 	bl	8003970 <SysTick_Config>
 8003a12:	0003      	movs	r3, r0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2a:	e155      	b.n	8003cd8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4091      	lsls	r1, r2
 8003a36:	000a      	movs	r2, r1
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d100      	bne.n	8003a44 <HAL_GPIO_Init+0x28>
 8003a42:	e146      	b.n	8003cd2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x38>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b12      	cmp	r3, #18
 8003a52:	d123      	bne.n	8003a9c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	58d3      	ldr	r3, [r2, r3]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2207      	movs	r2, #7
 8003a66:	4013      	ands	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2107      	movs	r1, #7
 8003a80:	400b      	ands	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	409a      	lsls	r2, r3
 8003a86:	0013      	movs	r3, r2
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	08da      	lsrs	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3208      	adds	r2, #8
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	6939      	ldr	r1, [r7, #16]
 8003a9a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	0013      	movs	r3, r2
 8003aac:	43da      	mvns	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	0013      	movs	r3, r2
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d00b      	beq.n	8003af0 <HAL_GPIO_Init+0xd4>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d007      	beq.n	8003af0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae4:	2b11      	cmp	r3, #17
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b12      	cmp	r3, #18
 8003aee:	d130      	bne.n	8003b52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	409a      	lsls	r2, r3
 8003afe:	0013      	movs	r3, r2
 8003b00:	43da      	mvns	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b26:	2201      	movs	r2, #1
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	43da      	mvns	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0013      	movs	r3, r2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	055b      	lsls	r3, r3, #21
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <HAL_GPIO_Init+0x174>
 8003b8e:	e0a0      	b.n	8003cd2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b90:	4b57      	ldr	r3, [pc, #348]	; (8003cf0 <HAL_GPIO_Init+0x2d4>)
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <HAL_GPIO_Init+0x2d4>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
 8003b9c:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <HAL_GPIO_Init+0x2d4>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_GPIO_Init+0x2d8>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	589b      	ldr	r3, [r3, r2]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	2390      	movs	r3, #144	; 0x90
 8003bd0:	05db      	lsls	r3, r3, #23
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d019      	beq.n	8003c0a <HAL_GPIO_Init+0x1ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <HAL_GPIO_Init+0x2dc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_GPIO_Init+0x1ea>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <HAL_GPIO_Init+0x2e0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00d      	beq.n	8003c02 <HAL_GPIO_Init+0x1e6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_GPIO_Init+0x2e4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <HAL_GPIO_Init+0x1e2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <HAL_GPIO_Init+0x2e8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_GPIO_Init+0x1de>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	e008      	b.n	8003c0c <HAL_GPIO_Init+0x1f0>
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x1f0>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e004      	b.n	8003c0c <HAL_GPIO_Init+0x1f0>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e002      	b.n	8003c0c <HAL_GPIO_Init+0x1f0>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_GPIO_Init+0x1f0>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	400a      	ands	r2, r1
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	4093      	lsls	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c1c:	4935      	ldr	r1, [pc, #212]	; (8003cf4 <HAL_GPIO_Init+0x2d8>)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	3302      	adds	r3, #2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	025b      	lsls	r3, r3, #9
 8003c42:	4013      	ands	r3, r2
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003c54:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	029b      	lsls	r3, r3, #10
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7e:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	035b      	lsls	r3, r3, #13
 8003c96:	4013      	ands	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ca2:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	039b      	lsls	r3, r3, #14
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_GPIO_Init+0x2ec>)
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	40da      	lsrs	r2, r3
 8003ce0:	1e13      	subs	r3, r2, #0
 8003ce2:	d000      	beq.n	8003ce6 <HAL_GPIO_Init+0x2ca>
 8003ce4:	e6a2      	b.n	8003a2c <HAL_GPIO_Init+0x10>
  } 
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b006      	add	sp, #24
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	48000400 	.word	0x48000400
 8003cfc:	48000800 	.word	0x48000800
 8003d00:	48000c00 	.word	0x48000c00
 8003d04:	48001000 	.word	0x48001000
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	000a      	movs	r2, r1
 8003d16:	1cbb      	adds	r3, r7, #2
 8003d18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	1cba      	adds	r2, r7, #2
 8003d20:	8812      	ldrh	r2, [r2, #0]
 8003d22:	4013      	ands	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d26:	230f      	movs	r3, #15
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e003      	b.n	8003d38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d30:	230f      	movs	r3, #15
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d38:	230f      	movs	r3, #15
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
  }
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	0008      	movs	r0, r1
 8003d50:	0011      	movs	r1, r2
 8003d52:	1cbb      	adds	r3, r7, #2
 8003d54:	1c02      	adds	r2, r0, #0
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	1c7b      	adds	r3, r7, #1
 8003d5a:	1c0a      	adds	r2, r1, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d5e:	1c7b      	adds	r3, r7, #1
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d66:	1cbb      	adds	r3, r7, #2
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d6e:	e003      	b.n	8003d78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d70:	1cbb      	adds	r3, r7, #2
 8003d72:	881a      	ldrh	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	0002      	movs	r2, r0
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	1dba      	adds	r2, r7, #6
 8003d92:	8812      	ldrh	r2, [r2, #0]
 8003d94:	4013      	ands	r3, r2
 8003d96:	d008      	beq.n	8003daa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d9a:	1dba      	adds	r2, r7, #6
 8003d9c:	8812      	ldrh	r2, [r2, #0]
 8003d9e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da0:	1dbb      	adds	r3, r7, #6
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f005 fb55 	bl	8009454 <HAL_GPIO_EXTI_Callback>
  }
}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	40010400 	.word	0x40010400

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f000 fb76 	bl	80044b8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x20>
 8003dd6:	e08e      	b.n	8003ef6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003dd8:	4bc5      	ldr	r3, [pc, #788]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	220c      	movs	r2, #12
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d00e      	beq.n	8003e02 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003de4:	4bc2      	ldr	r3, [pc, #776]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	220c      	movs	r2, #12
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d117      	bne.n	8003e20 <HAL_RCC_OscConfig+0x68>
 8003df0:	4bbf      	ldr	r3, [pc, #764]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	23c0      	movs	r3, #192	; 0xc0
 8003df6:	025b      	lsls	r3, r3, #9
 8003df8:	401a      	ands	r2, r3
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d10e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e02:	4bbb      	ldr	r3, [pc, #748]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d100      	bne.n	8003e10 <HAL_RCC_OscConfig+0x58>
 8003e0e:	e071      	b.n	8003ef4 <HAL_RCC_OscConfig+0x13c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d000      	beq.n	8003e1a <HAL_RCC_OscConfig+0x62>
 8003e18:	e06c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f000 fb4c 	bl	80044b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x80>
 8003e28:	4bb1      	ldr	r3, [pc, #708]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4bb0      	ldr	r3, [pc, #704]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	0249      	lsls	r1, r1, #9
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e02f      	b.n	8003e98 <HAL_RCC_OscConfig+0xe0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0xa2>
 8003e40:	4bab      	ldr	r3, [pc, #684]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4baa      	ldr	r3, [pc, #680]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e46:	49ab      	ldr	r1, [pc, #684]	; (80040f4 <HAL_RCC_OscConfig+0x33c>)
 8003e48:	400a      	ands	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	4ba8      	ldr	r3, [pc, #672]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4ba7      	ldr	r3, [pc, #668]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e52:	49a9      	ldr	r1, [pc, #676]	; (80040f8 <HAL_RCC_OscConfig+0x340>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e01e      	b.n	8003e98 <HAL_RCC_OscConfig+0xe0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d10e      	bne.n	8003e80 <HAL_RCC_OscConfig+0xc8>
 8003e62:	4ba3      	ldr	r3, [pc, #652]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4ba2      	ldr	r3, [pc, #648]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	02c9      	lsls	r1, r1, #11
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	4b9f      	ldr	r3, [pc, #636]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b9e      	ldr	r3, [pc, #632]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	0249      	lsls	r1, r1, #9
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0xe0>
 8003e80:	4b9b      	ldr	r3, [pc, #620]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e86:	499b      	ldr	r1, [pc, #620]	; (80040f4 <HAL_RCC_OscConfig+0x33c>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b97      	ldr	r3, [pc, #604]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003e92:	4999      	ldr	r1, [pc, #612]	; (80040f8 <HAL_RCC_OscConfig+0x340>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d014      	beq.n	8003eca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7ff f858 	bl	8002f54 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eaa:	f7ff f853 	bl	8002f54 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b64      	cmp	r3, #100	; 0x64
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e2fd      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	4b8c      	ldr	r3, [pc, #560]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0xf2>
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7ff f843 	bl	8002f54 <HAL_GetTick>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7ff f83e 	bl	8002f54 <HAL_GetTick>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e2e8      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x11c>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d100      	bne.n	8003f02 <HAL_RCC_OscConfig+0x14a>
 8003f00:	e06c      	b.n	8003fdc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	220c      	movs	r2, #12
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f0c:	4b78      	ldr	r3, [pc, #480]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	220c      	movs	r2, #12
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d11f      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1a0>
 8003f18:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	23c0      	movs	r3, #192	; 0xc0
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	401a      	ands	r2, r3
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d116      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	4b71      	ldr	r3, [pc, #452]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_OscConfig+0x188>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e2bb      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	4b6b      	ldr	r3, [pc, #428]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	22f8      	movs	r2, #248	; 0xf8
 8003f46:	4393      	bics	r3, r2
 8003f48:	0019      	movs	r1, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00da      	lsls	r2, r3, #3
 8003f50:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	e041      	b.n	8003fdc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d024      	beq.n	8003faa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f60:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fff2 	bl	8002f54 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f76:	f7fe ffed 	bl	8002f54 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e297      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d0f1      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	22f8      	movs	r2, #248	; 0xf8
 8003f98:	4393      	bics	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	00da      	lsls	r2, r3, #3
 8003fa2:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e018      	b.n	8003fdc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003faa:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	438a      	bics	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fe ffcd 	bl	8002f54 <HAL_GetTick>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fe ffc8 	bl	8002f54 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e272      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d1f1      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d036      	beq.n	8004054 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d019      	beq.n	8004022 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fee:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fe ffab 	bl	8002f54 <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe ffa6 	bl	8002f54 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e250      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d0f1      	beq.n	8004004 <HAL_RCC_OscConfig+0x24c>
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004022:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8004024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8004028:	2101      	movs	r1, #1
 800402a:	438a      	bics	r2, r1
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe ff91 	bl	8002f54 <HAL_GetTick>
 8004032:	0003      	movs	r3, r0
 8004034:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004038:	f7fe ff8c 	bl	8002f54 <HAL_GetTick>
 800403c:	0002      	movs	r2, r0
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e236      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d1f1      	bne.n	8004038 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2204      	movs	r2, #4
 800405a:	4013      	ands	r3, r2
 800405c:	d100      	bne.n	8004060 <HAL_RCC_OscConfig+0x2a8>
 800405e:	e0b5      	b.n	80041cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004060:	231f      	movs	r3, #31
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	055b      	lsls	r3, r3, #21
 8004070:	4013      	ands	r3, r2
 8004072:	d111      	bne.n	8004098 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0549      	lsls	r1, r1, #21
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	055b      	lsls	r3, r3, #21
 800408a:	4013      	ands	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004090:	231f      	movs	r3, #31
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b18      	ldr	r3, [pc, #96]	; (80040fc <HAL_RCC_OscConfig+0x344>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	d11a      	bne.n	80040da <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_RCC_OscConfig+0x344>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCC_OscConfig+0x344>)
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	0049      	lsls	r1, r1, #1
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b2:	f7fe ff4f 	bl	8002f54 <HAL_GetTick>
 80040b6:	0003      	movs	r3, r0
 80040b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040bc:	f7fe ff4a 	bl	8002f54 <HAL_GetTick>
 80040c0:	0002      	movs	r2, r0
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1f4      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_OscConfig+0x344>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4013      	ands	r3, r2
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10e      	bne.n	8004100 <HAL_RCC_OscConfig+0x348>
 80040e2:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	4b02      	ldr	r3, [pc, #8]	; (80040f0 <HAL_RCC_OscConfig+0x338>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	621a      	str	r2, [r3, #32]
 80040ee:	e035      	b.n	800415c <HAL_RCC_OscConfig+0x3a4>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	fffeffff 	.word	0xfffeffff
 80040f8:	fffbffff 	.word	0xfffbffff
 80040fc:	40007000 	.word	0x40007000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0x36a>
 8004108:	4bca      	ldr	r3, [pc, #808]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800410a:	6a1a      	ldr	r2, [r3, #32]
 800410c:	4bc9      	ldr	r3, [pc, #804]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	621a      	str	r2, [r3, #32]
 8004114:	4bc7      	ldr	r3, [pc, #796]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	4bc6      	ldr	r3, [pc, #792]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800411a:	2104      	movs	r1, #4
 800411c:	438a      	bics	r2, r1
 800411e:	621a      	str	r2, [r3, #32]
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x3a4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x38c>
 800412a:	4bc2      	ldr	r3, [pc, #776]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	4bc1      	ldr	r3, [pc, #772]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004130:	2104      	movs	r1, #4
 8004132:	430a      	orrs	r2, r1
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	4bbf      	ldr	r3, [pc, #764]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	4bbe      	ldr	r3, [pc, #760]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800413c:	2101      	movs	r1, #1
 800413e:	430a      	orrs	r2, r1
 8004140:	621a      	str	r2, [r3, #32]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x3a4>
 8004144:	4bbb      	ldr	r3, [pc, #748]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	4bba      	ldr	r3, [pc, #744]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800414a:	2101      	movs	r1, #1
 800414c:	438a      	bics	r2, r1
 800414e:	621a      	str	r2, [r3, #32]
 8004150:	4bb8      	ldr	r3, [pc, #736]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	4bb7      	ldr	r3, [pc, #732]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004156:	2104      	movs	r1, #4
 8004158:	438a      	bics	r2, r1
 800415a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fef6 	bl	8002f54 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	e009      	b.n	8004182 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe fef1 	bl	8002f54 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	4aaf      	ldr	r2, [pc, #700]	; (8004438 <HAL_RCC_OscConfig+0x680>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e19a      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	4bac      	ldr	r3, [pc, #688]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x3b6>
 800418c:	e013      	b.n	80041b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe fee1 	bl	8002f54 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	e009      	b.n	80041ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fe fedc 	bl	8002f54 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	4aa5      	ldr	r2, [pc, #660]	; (8004438 <HAL_RCC_OscConfig+0x680>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e185      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ac:	4ba1      	ldr	r3, [pc, #644]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	2202      	movs	r2, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b6:	231f      	movs	r3, #31
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b9c      	ldr	r3, [pc, #624]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	4b9b      	ldr	r3, [pc, #620]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041c6:	499d      	ldr	r1, [pc, #628]	; (800443c <HAL_RCC_OscConfig+0x684>)
 80041c8:	400a      	ands	r2, r1
 80041ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2210      	movs	r2, #16
 80041d2:	4013      	ands	r3, r2
 80041d4:	d063      	beq.n	800429e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d12a      	bne.n	8004234 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041de:	4b95      	ldr	r3, [pc, #596]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e2:	4b94      	ldr	r3, [pc, #592]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041e4:	2104      	movs	r1, #4
 80041e6:	430a      	orrs	r2, r1
 80041e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80041ea:	4b92      	ldr	r3, [pc, #584]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	4b91      	ldr	r3, [pc, #580]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80041f0:	2101      	movs	r1, #1
 80041f2:	430a      	orrs	r2, r1
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f6:	f7fe fead 	bl	8002f54 <HAL_GetTick>
 80041fa:	0003      	movs	r3, r0
 80041fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004200:	f7fe fea8 	bl	8002f54 <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e152      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004212:	4b88      	ldr	r3, [pc, #544]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	d0f1      	beq.n	8004200 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800421c:	4b85      	ldr	r3, [pc, #532]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	22f8      	movs	r2, #248	; 0xf8
 8004222:	4393      	bics	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	00da      	lsls	r2, r3, #3
 800422c:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800422e:	430a      	orrs	r2, r1
 8004230:	635a      	str	r2, [r3, #52]	; 0x34
 8004232:	e034      	b.n	800429e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	3305      	adds	r3, #5
 800423a:	d111      	bne.n	8004260 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800423c:	4b7d      	ldr	r3, [pc, #500]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800423e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004240:	4b7c      	ldr	r3, [pc, #496]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004242:	2104      	movs	r1, #4
 8004244:	438a      	bics	r2, r1
 8004246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004248:	4b7a      	ldr	r3, [pc, #488]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	22f8      	movs	r2, #248	; 0xf8
 800424e:	4393      	bics	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	00da      	lsls	r2, r3, #3
 8004258:	4b76      	ldr	r3, [pc, #472]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800425a:	430a      	orrs	r2, r1
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
 800425e:	e01e      	b.n	800429e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004260:	4b74      	ldr	r3, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004266:	2104      	movs	r1, #4
 8004268:	430a      	orrs	r2, r1
 800426a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800426c:	4b71      	ldr	r3, [pc, #452]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800426e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004270:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004272:	2101      	movs	r1, #1
 8004274:	438a      	bics	r2, r1
 8004276:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fe fe6c 	bl	8002f54 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004282:	f7fe fe67 	bl	8002f54 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e111      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004294:	4b67      	ldr	r3, [pc, #412]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	2202      	movs	r2, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d1f1      	bne.n	8004282 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2220      	movs	r2, #32
 80042a4:	4013      	ands	r3, r2
 80042a6:	d05c      	beq.n	8004362 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042a8:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	220c      	movs	r2, #12
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d00e      	beq.n	80042d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042b4:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	220c      	movs	r2, #12
 80042ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d114      	bne.n	80042ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042c0:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	23c0      	movs	r3, #192	; 0xc0
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	401a      	ands	r2, r3
 80042ca:	23c0      	movs	r3, #192	; 0xc0
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10b      	bne.n	80042ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042d2:	4b58      	ldr	r3, [pc, #352]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	4013      	ands	r3, r2
 80042dc:	d040      	beq.n	8004360 <HAL_RCC_OscConfig+0x5a8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d03c      	beq.n	8004360 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e6      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01b      	beq.n	800432a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0249      	lsls	r1, r1, #9
 80042fc:	430a      	orrs	r2, r1
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fe28 	bl	8002f54 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800430a:	f7fe fe23 	bl	8002f54 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0cd      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800431c:	4b45      	ldr	r3, [pc, #276]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	025b      	lsls	r3, r3, #9
 8004324:	4013      	ands	r3, r2
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x552>
 8004328:	e01b      	b.n	8004362 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800432a:	4b42      	ldr	r3, [pc, #264]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004330:	4943      	ldr	r1, [pc, #268]	; (8004440 <HAL_RCC_OscConfig+0x688>)
 8004332:	400a      	ands	r2, r1
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe fe0d 	bl	8002f54 <HAL_GetTick>
 800433a:	0003      	movs	r3, r0
 800433c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004340:	f7fe fe08 	bl	8002f54 <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0b2      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004352:	4b38      	ldr	r3, [pc, #224]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	025b      	lsls	r3, r3, #9
 800435a:	4013      	ands	r3, r2
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x588>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004360:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d100      	bne.n	800436c <HAL_RCC_OscConfig+0x5b4>
 800436a:	e0a4      	b.n	80044b6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	220c      	movs	r2, #12
 8004372:	4013      	ands	r3, r2
 8004374:	2b08      	cmp	r3, #8
 8004376:	d100      	bne.n	800437a <HAL_RCC_OscConfig+0x5c2>
 8004378:	e078      	b.n	800446c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b02      	cmp	r3, #2
 8004380:	d14c      	bne.n	800441c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004388:	492e      	ldr	r1, [pc, #184]	; (8004444 <HAL_RCC_OscConfig+0x68c>)
 800438a:	400a      	ands	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe fde1 	bl	8002f54 <HAL_GetTick>
 8004392:	0003      	movs	r3, r0
 8004394:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe fddc 	bl	8002f54 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e086      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	049b      	lsls	r3, r3, #18
 80043b2:	4013      	ands	r3, r2
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	220f      	movs	r2, #15
 80043bc:	4393      	bics	r3, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_RCC_OscConfig+0x690>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	431a      	orrs	r2, r3
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e4:	4b13      	ldr	r3, [pc, #76]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	0449      	lsls	r1, r1, #17
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fdaf 	bl	8002f54 <HAL_GetTick>
 80043f6:	0003      	movs	r3, r0
 80043f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe fdaa 	bl	8002f54 <HAL_GetTick>
 8004400:	0002      	movs	r2, r0
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e054      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	049b      	lsls	r3, r3, #18
 8004416:	4013      	ands	r3, r2
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x644>
 800441a:	e04c      	b.n	80044b6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <HAL_RCC_OscConfig+0x67c>)
 8004422:	4908      	ldr	r1, [pc, #32]	; (8004444 <HAL_RCC_OscConfig+0x68c>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fd94 	bl	8002f54 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004430:	e015      	b.n	800445e <HAL_RCC_OscConfig+0x6a6>
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	40021000 	.word	0x40021000
 8004438:	00001388 	.word	0x00001388
 800443c:	efffffff 	.word	0xefffffff
 8004440:	fffeffff 	.word	0xfffeffff
 8004444:	feffffff 	.word	0xfeffffff
 8004448:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fd82 	bl	8002f54 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e02c      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <HAL_RCC_OscConfig+0x708>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	049b      	lsls	r3, r3, #18
 8004466:	4013      	ands	r3, r2
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x694>
 800446a:	e024      	b.n	80044b6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e01f      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCC_OscConfig+0x708>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCC_OscConfig+0x708>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	23c0      	movs	r3, #192	; 0xc0
 8004488:	025b      	lsls	r3, r3, #9
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	429a      	cmp	r2, r3
 8004492:	d10e      	bne.n	80044b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	220f      	movs	r2, #15
 8004498:	401a      	ands	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	23f0      	movs	r3, #240	; 0xf0
 80044a6:	039b      	lsls	r3, r3, #14
 80044a8:	401a      	ands	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b008      	add	sp, #32
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0bf      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d911      	bls.n	800450a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4393      	bics	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f8:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0a6      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d015      	beq.n	8004540 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2204      	movs	r2, #4
 800451a:	4013      	ands	r3, r2
 800451c:	d006      	beq.n	800452c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800451e:	4b51      	ldr	r3, [pc, #324]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004524:	21e0      	movs	r1, #224	; 0xe0
 8004526:	00c9      	lsls	r1, r1, #3
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b4d      	ldr	r3, [pc, #308]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	22f0      	movs	r2, #240	; 0xf0
 8004532:	4393      	bics	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	d04c      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	029b      	lsls	r3, r3, #10
 800455a:	4013      	ands	r3, r2
 800455c:	d120      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07a      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	049b      	lsls	r3, r3, #18
 8004572:	4013      	ands	r3, r2
 8004574:	d114      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06e      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004582:	4b38      	ldr	r3, [pc, #224]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	025b      	lsls	r3, r3, #9
 800458a:	4013      	ands	r3, r2
 800458c:	d108      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e062      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b34      	ldr	r3, [pc, #208]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2202      	movs	r2, #2
 8004598:	4013      	ands	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e05b      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a0:	4b30      	ldr	r3, [pc, #192]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2203      	movs	r2, #3
 80045a6:	4393      	bics	r3, r2
 80045a8:	0019      	movs	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fe fcce 	bl	8002f54 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045be:	f7fe fcc9 	bl	8002f54 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <HAL_RCC_ClockConfig+0x1a4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e042      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	220c      	movs	r2, #12
 80045d8:	401a      	ands	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1ec      	bne.n	80045be <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d211      	bcs.n	8004616 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4393      	bics	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_RCC_ClockConfig+0x19c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d001      	beq.n	8004616 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e020      	b.n	8004658 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <HAL_RCC_ClockConfig+0x1a8>)
 8004626:	4013      	ands	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004634:	f000 f820 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004638:	0001      	movs	r1, r0
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCC_ClockConfig+0x1a0>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	220f      	movs	r2, #15
 8004642:	4013      	ands	r3, r2
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x1ac>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	000a      	movs	r2, r1
 800464a:	40da      	lsrs	r2, r3
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1b0>)
 800464e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004650:	2000      	movs	r0, #0
 8004652:	f7fe fc39 	bl	8002ec8 <HAL_InitTick>
  
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40022000 	.word	0x40022000
 8004664:	40021000 	.word	0x40021000
 8004668:	00001388 	.word	0x00001388
 800466c:	fffff8ff 	.word	0xfffff8ff
 8004670:	0800d524 	.word	0x0800d524
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b08f      	sub	sp, #60	; 0x3c
 800467c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800467e:	2314      	movs	r3, #20
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	4a37      	ldr	r2, [pc, #220]	; (8004760 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004684:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004686:	c313      	stmia	r3!, {r0, r1, r4}
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	4a35      	ldr	r2, [pc, #212]	; (8004764 <HAL_RCC_GetSysClockFreq+0xec>)
 8004690:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004692:	c313      	stmia	r3!, {r0, r1, r4}
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469c:	2300      	movs	r3, #0
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a0:	2300      	movs	r3, #0
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCC_GetSysClockFreq+0xf0>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	220c      	movs	r2, #12
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d006      	beq.n	80046ca <HAL_RCC_GetSysClockFreq+0x52>
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d043      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0xd0>
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d144      	bne.n	800474e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <HAL_RCC_GetSysClockFreq+0xf4>)
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046c8:	e044      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	0c9b      	lsrs	r3, r3, #18
 80046ce:	220f      	movs	r2, #15
 80046d0:	4013      	ands	r3, r2
 80046d2:	2214      	movs	r2, #20
 80046d4:	18ba      	adds	r2, r7, r2
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046da:	4b23      	ldr	r3, [pc, #140]	; (8004768 <HAL_RCC_GetSysClockFreq+0xf0>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	220f      	movs	r2, #15
 80046e0:	4013      	ands	r3, r2
 80046e2:	1d3a      	adds	r2, r7, #4
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ea:	23c0      	movs	r3, #192	; 0xc0
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	401a      	ands	r2, r3
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	025b      	lsls	r3, r3, #9
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d109      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fa:	481c      	ldr	r0, [pc, #112]	; (800476c <HAL_RCC_GetSysClockFreq+0xf4>)
 80046fc:	f7fb fd16 	bl	800012c <__udivsi3>
 8004700:	0003      	movs	r3, r0
 8004702:	001a      	movs	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	4353      	muls	r3, r2
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
 800470a:	e01a      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	401a      	ands	r2, r3
 8004714:	23c0      	movs	r3, #192	; 0xc0
 8004716:	025b      	lsls	r3, r3, #9
 8004718:	429a      	cmp	r2, r3
 800471a:	d109      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800471c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471e:	4814      	ldr	r0, [pc, #80]	; (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004720:	f7fb fd04 	bl	800012c <__udivsi3>
 8004724:	0003      	movs	r3, r0
 8004726:	001a      	movs	r2, r3
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	4353      	muls	r3, r2
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
 800472e:	e008      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	480e      	ldr	r0, [pc, #56]	; (800476c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004734:	f7fb fcfa 	bl	800012c <__udivsi3>
 8004738:	0003      	movs	r3, r0
 800473a:	001a      	movs	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	4353      	muls	r3, r2
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800474c:	e002      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004752:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b00f      	add	sp, #60	; 0x3c
 800475c:	bd90      	pop	{r4, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	0800d440 	.word	0x0800d440
 8004764:	0800d450 	.word	0x0800d450
 8004768:	40021000 	.word	0x40021000
 800476c:	007a1200 	.word	0x007a1200
 8004770:	02dc6c00 	.word	0x02dc6c00

08004774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	4013      	ands	r3, r2
 800478e:	d100      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004790:	e08f      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004792:	2317      	movs	r3, #23
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	055b      	lsls	r3, r3, #21
 80047a2:	4013      	ands	r3, r2
 80047a4:	d111      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	4b6c      	ldr	r3, [pc, #432]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	4b6b      	ldr	r3, [pc, #428]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0549      	lsls	r1, r1, #21
 80047b0:	430a      	orrs	r2, r1
 80047b2:	61da      	str	r2, [r3, #28]
 80047b4:	4b68      	ldr	r3, [pc, #416]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	055b      	lsls	r3, r3, #21
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2317      	movs	r3, #23
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ca:	4b64      	ldr	r3, [pc, #400]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	2380      	movs	r3, #128	; 0x80
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	d11a      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d6:	4b61      	ldr	r3, [pc, #388]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b60      	ldr	r3, [pc, #384]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	0049      	lsls	r1, r1, #1
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fe fbb6 	bl	8002f54 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ee:	f7fe fbb1 	bl	8002f54 <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b64      	cmp	r3, #100	; 0x64
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0a6      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	4b56      	ldr	r3, [pc, #344]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4013      	ands	r3, r2
 800480a:	d0f0      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	23c0      	movs	r3, #192	; 0xc0
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4013      	ands	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d034      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	23c0      	movs	r3, #192	; 0xc0
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4013      	ands	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d02c      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800482e:	4b4a      	ldr	r3, [pc, #296]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4a4b      	ldr	r2, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004838:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	4b46      	ldr	r3, [pc, #280]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	0249      	lsls	r1, r1, #9
 8004842:	430a      	orrs	r2, r1
 8004844:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004848:	6a1a      	ldr	r2, [r3, #32]
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800484c:	4945      	ldr	r1, [pc, #276]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800484e:	400a      	ands	r2, r1
 8004850:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	4013      	ands	r3, r2
 800485e:	d013      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fb78 	bl	8002f54 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	e009      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fe fb73 	bl	8002f54 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e067      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	2202      	movs	r2, #2
 8004884:	4013      	ands	r3, r2
 8004886:	d0f0      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800488e:	4013      	ands	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004898:	430a      	orrs	r2, r1
 800489a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800489c:	2317      	movs	r3, #23
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048ac:	492f      	ldr	r1, [pc, #188]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	4013      	ands	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	2203      	movs	r2, #3
 80048c2:	4393      	bics	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048cc:	430a      	orrs	r2, r1
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048da:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048ea:	430a      	orrs	r2, r1
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4013      	ands	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2210      	movs	r2, #16
 80048fe:	4393      	bics	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004908:	430a      	orrs	r2, r1
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	4013      	ands	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	4393      	bics	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004928:	430a      	orrs	r2, r1
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4013      	ands	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4393      	bics	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004948:	430a      	orrs	r2, r1
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
 8004960:	fffffcff 	.word	0xfffffcff
 8004964:	fffeffff 	.word	0xfffeffff
 8004968:	00001388 	.word	0x00001388
 800496c:	efffffff 	.word	0xefffffff
 8004970:	fffcffff 	.word	0xfffcffff

08004974 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0ae      	b.n	8004ae4 <HAL_SMBUS_Init+0x170>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_SMBUS_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2244      	movs	r2, #68	; 0x44
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fd ff0b 	bl	80027b4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	494b      	ldr	r1, [pc, #300]	; (8004aec <HAL_SMBUS_Init+0x178>)
 80049be:	400a      	ands	r2, r1
 80049c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4948      	ldr	r1, [pc, #288]	; (8004af0 <HAL_SMBUS_Init+0x17c>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0052      	lsls	r2, r2, #1
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ea:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	493e      	ldr	r1, [pc, #248]	; (8004af0 <HAL_SMBUS_Init+0x17c>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d014      	beq.n	8004a2e <HAL_SMBUS_Init+0xba>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_SMBUS_Init+0xaa>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	0209      	lsls	r1, r1, #8
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	e007      	b.n	8004a2e <HAL_SMBUS_Init+0xba>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2184      	movs	r1, #132	; 0x84
 8004a28:	0209      	lsls	r1, r1, #8
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d104      	bne.n	8004a40 <HAL_SMBUS_Init+0xcc>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	492a      	ldr	r1, [pc, #168]	; (8004af4 <HAL_SMBUS_Init+0x180>)
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	021a      	lsls	r2, r3, #8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	0011      	movs	r1, r2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d112      	bne.n	8004ac0 <HAL_SMBUS_Init+0x14c>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_SMBUS_Init+0x13a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	039b      	lsls	r3, r3, #14
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d108      	bne.n	8004ac0 <HAL_SMBUS_Init+0x14c>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2180      	movs	r1, #128	; 0x80
 8004aba:	0249      	lsls	r1, r1, #9
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2101      	movs	r1, #1
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	f0ffffff 	.word	0xf0ffffff
 8004af0:	ffff7fff 	.word	0xffff7fff
 8004af4:	02008000 	.word	0x02008000

08004af8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2180      	movs	r1, #128	; 0x80
 8004b0c:	03c9      	lsls	r1, r1, #15
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	0192      	lsls	r2, r2, #6
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 fe11 	bl	8005748 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b002      	add	sp, #8
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_SMBUS_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_IsDeviceReady(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	230a      	movs	r3, #10
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	1c0a      	adds	r2, r1, #0
 8004b42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t SMBUS_Trials = 0UL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d000      	beq.n	8004b52 <HAL_SMBUS_IsDeviceReady+0x22>
 8004b50:	e0f1      	b.n	8004d36 <HAL_SMBUS_IsDeviceReady+0x206>
  {
    if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_BUSY) != RESET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	401a      	ands	r2, r3
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d101      	bne.n	8004b6a <HAL_SMBUS_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0e6      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
    }

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2244      	movs	r2, #68	; 0x44
 8004b6e:	5c9b      	ldrb	r3, [r3, r2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_SMBUS_IsDeviceReady+0x48>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0df      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2244      	movs	r2, #68	; 0x44
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5499      	strb	r1, [r3, r2]

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2202      	movs	r2, #2
 8004b84:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	64da      	str	r2, [r3, #76]	; 0x4c

    do
    {
      /* Generate Start */
      hsmbus->Instance->CR2 = SMBUS_GENERATE_START(hsmbus->Init.AddressingMode, DevAddress);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_SMBUS_IsDeviceReady+0x74>
 8004b94:	230a      	movs	r3, #10
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	059b      	lsls	r3, r3, #22
 8004b9c:	0d9b      	lsrs	r3, r3, #22
 8004b9e:	4a68      	ldr	r2, [pc, #416]	; (8004d40 <HAL_SMBUS_IsDeviceReady+0x210>)
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	e007      	b.n	8004bb4 <HAL_SMBUS_IsDeviceReady+0x84>
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	059b      	lsls	r3, r3, #22
 8004bac:	0d9b      	lsrs	r3, r3, #22
 8004bae:	22a0      	movs	r2, #160	; 0xa0
 8004bb0:	0192      	lsls	r2, r2, #6
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004bba:	f7fe f9cb 	bl	8002f54 <HAL_GetTick>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	4013      	ands	r3, r2
 8004bcc:	3b20      	subs	r3, #32
 8004bce:	425a      	negs	r2, r3
 8004bd0:	4153      	adcs	r3, r2
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	231f      	movs	r3, #31
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2210      	movs	r2, #16
 8004be2:	4013      	ands	r3, r2
 8004be4:	3b10      	subs	r3, #16
 8004be6:	425a      	negs	r2, r3
 8004be8:	4153      	adcs	r3, r2
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	231e      	movs	r3, #30
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bf2:	e034      	b.n	8004c5e <HAL_SMBUS_IsDeviceReady+0x12e>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d019      	beq.n	8004c2e <HAL_SMBUS_IsDeviceReady+0xfe>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004bfa:	f7fe f9ab 	bl	8002f54 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <HAL_SMBUS_IsDeviceReady+0xe0>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10e      	bne.n	8004c2e <HAL_SMBUS_IsDeviceReady+0xfe>
          {
            /* Device is ready */
            hsmbus->State = HAL_SMBUS_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	649a      	str	r2, [r3, #72]	; 0x48

            /* Update SMBUS error code */
            hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Process Unlocked */
            __HAL_UNLOCK(hsmbus);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2244      	movs	r2, #68	; 0x44
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]
            return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e084      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
          }
        }

        tmp1 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2220      	movs	r2, #32
 8004c36:	4013      	ands	r3, r2
 8004c38:	3b20      	subs	r3, #32
 8004c3a:	425a      	negs	r2, r3
 8004c3c:	4153      	adcs	r3, r2
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	231f      	movs	r3, #31
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	4013      	ands	r3, r2
 8004c50:	3b10      	subs	r3, #16
 8004c52:	425a      	negs	r2, r3
 8004c54:	4153      	adcs	r3, r2
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	231e      	movs	r3, #30
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c5e:	231f      	movs	r3, #31
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_SMBUS_IsDeviceReady+0x142>
 8004c68:	231e      	movs	r3, #30
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0c0      	beq.n	8004bf4 <HAL_SMBUS_IsDeviceReady+0xc4>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) == RESET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d016      	beq.n	8004cae <HAL_SMBUS_IsDeviceReady+0x17e>
      {
        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2120      	movs	r1, #32
 8004c88:	f000 feb6 	bl	80059f8 <SMBUS_WaitOnFlagUntilTimeout>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_SMBUS_IsDeviceReady+0x164>
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e051      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
        }

        /* Clear STOP Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hsmbus->State = HAL_SMBUS_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2244      	movs	r2, #68	; 0x44
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e044      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	f000 fe9f 	bl	80059f8 <SMBUS_WaitOnFlagUntilTimeout>
 8004cba:	1e03      	subs	r3, r0, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_SMBUS_IsDeviceReady+0x192>
        {
          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e03a      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
        }

        /* Clear NACK Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (SMBUS_Trials == Trials)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d116      	bne.n	8004d08 <HAL_SMBUS_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	01c9      	lsls	r1, r1, #7
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2120      	movs	r1, #32
 8004cf4:	f000 fe80 	bl	80059f8 <SMBUS_WaitOnFlagUntilTimeout>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_SMBUS_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e01b      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
        }

        /* Clear STOP Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2220      	movs	r2, #32
 8004d06:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      SMBUS_Trials++;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
    }
    while (SMBUS_Trials < Trials);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d900      	bls.n	8004d18 <HAL_SMBUS_IsDeviceReady+0x1e8>
 8004d16:	e739      	b.n	8004b8c <HAL_SMBUS_IsDeviceReady+0x5c>

    hsmbus->State = HAL_SMBUS_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Update SMBUS error code */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	2210      	movs	r2, #16
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2244      	movs	r2, #68	; 0x44
 8004d2e:	2100      	movs	r1, #0
 8004d30:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_SMBUS_IsDeviceReady+0x208>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	0018      	movs	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b008      	add	sp, #32
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	02002000 	.word	0x02002000

08004d44 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) && ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2272      	movs	r2, #114	; 0x72
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b72      	cmp	r3, #114	; 0x72
 8004d64:	d136      	bne.n	8004dd4 <HAL_SMBUS_EV_IRQHandler+0x90>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d117      	bne.n	8004da2 <HAL_SMBUS_EV_IRQHandler+0x5e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	001a      	movs	r2, r3
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <HAL_SMBUS_EV_IRQHandler+0x5e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	001a      	movs	r2, r3
 8004d84:	2301      	movs	r3, #1
 8004d86:	4013      	ands	r3, r2
 8004d88:	d10b      	bne.n	8004da2 <HAL_SMBUS_EV_IRQHandler+0x5e>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	001a      	movs	r2, r3
 8004d90:	2301      	movs	r3, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	d105      	bne.n	8004da2 <HAL_SMBUS_EV_IRQHandler+0x5e>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <HAL_SMBUS_EV_IRQHandler+0x90>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	2232      	movs	r2, #50	; 0x32
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b32      	cmp	r3, #50	; 0x32
 8004dac:	d106      	bne.n	8004dbc <HAL_SMBUS_EV_IRQHandler+0x78>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0011      	movs	r1, r2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 fac9 	bl	800534c <SMBUS_Slave_ISR>
 8004dba:	e00b      	b.n	8004dd4 <HAL_SMBUS_EV_IRQHandler+0x90>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	2212      	movs	r2, #18
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b12      	cmp	r3, #18
 8004dc6:	d105      	bne.n	8004dd4 <HAL_SMBUS_EV_IRQHandler+0x90>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0011      	movs	r1, r2
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f8c6 	bl	8004f60 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) && ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2274      	movs	r2, #116	; 0x74
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b74      	cmp	r3, #116	; 0x74
 8004ddc:	d136      	bne.n	8004e4c <HAL_SMBUS_EV_IRQHandler+0x108>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	001a      	movs	r2, r3
 8004de4:	2301      	movs	r3, #1
 8004de6:	4013      	ands	r3, r2
 8004de8:	d117      	bne.n	8004e1a <HAL_SMBUS_EV_IRQHandler+0xd6>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	001a      	movs	r2, r3
 8004df0:	2301      	movs	r3, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	d111      	bne.n	8004e1a <HAL_SMBUS_EV_IRQHandler+0xd6>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d10b      	bne.n	8004e1a <HAL_SMBUS_EV_IRQHandler+0xd6>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	001a      	movs	r2, r3
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d105      	bne.n	8004e1a <HAL_SMBUS_EV_IRQHandler+0xd6>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	001a      	movs	r2, r3
 8004e14:	2301      	movs	r3, #1
 8004e16:	4013      	ands	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_SMBUS_EV_IRQHandler+0x108>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2242      	movs	r2, #66	; 0x42
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b42      	cmp	r3, #66	; 0x42
 8004e24:	d106      	bne.n	8004e34 <HAL_SMBUS_EV_IRQHandler+0xf0>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 fa8d 	bl	800534c <SMBUS_Slave_ISR>
 8004e32:	e00b      	b.n	8004e4c <HAL_SMBUS_EV_IRQHandler+0x108>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	2222      	movs	r2, #34	; 0x22
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b22      	cmp	r3, #34	; 0x22
 8004e3e:	d105      	bne.n	8004e4c <HAL_SMBUS_EV_IRQHandler+0x108>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0011      	movs	r1, r2
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 f88a 	bl	8004f60 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) || (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) || (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) && ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	08db      	lsrs	r3, r3, #3
 8004e50:	001a      	movs	r2, r3
 8004e52:	2301      	movs	r3, #1
 8004e54:	4013      	ands	r3, r2
 8004e56:	d10b      	bne.n	8004e70 <HAL_SMBUS_EV_IRQHandler+0x12c>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4013      	ands	r3, r2
 8004e62:	d105      	bne.n	8004e70 <HAL_SMBUS_EV_IRQHandler+0x12c>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	001a      	movs	r2, r3
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d01d      	beq.n	8004eac <HAL_SMBUS_EV_IRQHandler+0x168>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	001a      	movs	r2, r3
 8004e76:	2301      	movs	r3, #1
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d10b      	bne.n	8004e94 <HAL_SMBUS_EV_IRQHandler+0x150>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	001a      	movs	r2, r3
 8004e82:	2301      	movs	r3, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d105      	bne.n	8004e94 <HAL_SMBUS_EV_IRQHandler+0x150>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4013      	ands	r3, r2
 8004e92:	d00b      	beq.n	8004eac <HAL_SMBUS_EV_IRQHandler+0x168>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d105      	bne.n	8004eac <HAL_SMBUS_EV_IRQHandler+0x168>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0011      	movs	r1, r2
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 fa50 	bl	800534c <SMBUS_Slave_ISR>
    }
  }
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 fcee 	bl	80058a0 <SMBUS_ITErrorHandler>
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b002      	add	sp, #8
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_SMBUS_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read)
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	0008      	movs	r0, r1
 8004f16:	0011      	movs	r1, r2
 8004f18:	1cfb      	adds	r3, r7, #3
 8004f1a:	1c02      	adds	r2, r0, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	003b      	movs	r3, r7
 8004f20:	1c0a      	adds	r2, r1, #0
 8004f22:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_SMBUS_GetState>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL state
  */
uint32_t HAL_SMBUS_GetState(SMBUS_HandleTypeDef *hsmbus)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Return SMBUS handle state */
  return hsmbus->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b002      	add	sp, #8
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(struct __SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2244      	movs	r2, #68	; 0x44
 8004f6e:	5c9b      	ldrb	r3, [r3, r2]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <SMBUS_Master_ISR+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e1e5      	b.n	8005344 <SMBUS_Master_ISR+0x3e4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2244      	movs	r2, #68	; 0x44
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	5499      	strb	r1, [r3, r2]

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	001a      	movs	r2, r3
 8004f86:	2301      	movs	r3, #1
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d012      	beq.n	8004fb2 <SMBUS_Master_ISR+0x52>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	2204      	movs	r2, #4
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2244      	movs	r2, #68	; 0x44
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7ff ffc6 	bl	8004f3c <HAL_SMBUS_ErrorCallback>
 8004fb0:	e1c3      	b.n	800533a <SMBUS_Master_ISR+0x3da>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d100      	bne.n	8004fc0 <SMBUS_Master_ISR+0x60>
 8004fbe:	e07f      	b.n	80050c0 <SMBUS_Master_ISR+0x160>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 fc6c 	bl	80058a0 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	2b12      	cmp	r3, #18
 8004fce:	d12f      	bne.n	8005030 <SMBUS_Master_ISR+0xd0>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	21f2      	movs	r1, #242	; 0xf2
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 fbed 	bl	80057b4 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	49d1      	ldr	r1, [pc, #836]	; (8005334 <SMBUS_Master_ISR+0x3d4>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	438a      	bics	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2244      	movs	r2, #68	; 0x44
 8005012:	2100      	movs	r1, #0
 8005014:	5499      	strb	r1, [r3, r2]

      /* REenable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2101      	movs	r1, #1
 8005022:	430a      	orrs	r2, r1
 8005024:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	0018      	movs	r0, r3
 800502a:	f7ff ff4f 	bl	8004ecc <HAL_SMBUS_MasterTxCpltCallback>
 800502e:	e184      	b.n	800533a <SMBUS_Master_ISR+0x3da>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005034:	2b22      	cmp	r3, #34	; 0x22
 8005036:	d000      	beq.n	800503a <SMBUS_Master_ISR+0xda>
 8005038:	e17f      	b.n	800533a <SMBUS_Master_ISR+0x3da>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	001a      	movs	r2, r3
 8005040:	2301      	movs	r3, #1
 8005042:	4013      	ands	r3, r2
 8005044:	d01c      	beq.n	8005080 <SMBUS_Master_ISR+0x120>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00c      	beq.n	8005080 <SMBUS_Master_ISR+0x120>
        {
          hsmbus->XferSize--;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	21d4      	movs	r1, #212	; 0xd4
 8005084:	0018      	movs	r0, r3
 8005086:	f000 fb95 	bl	80057b4 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2220      	movs	r2, #32
 8005090:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	49a5      	ldr	r1, [pc, #660]	; (8005334 <SMBUS_Master_ISR+0x3d4>)
 800509e:	400a      	ands	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2244      	movs	r2, #68	; 0x44
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7ff ff0f 	bl	8004edc <HAL_SMBUS_MasterRxCpltCallback>
 80050be:	e13c      	b.n	800533a <SMBUS_Master_ISR+0x3da>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	089b      	lsrs	r3, r3, #2
 80050c4:	001a      	movs	r2, r3
 80050c6:	2301      	movs	r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	d019      	beq.n	8005100 <SMBUS_Master_ISR+0x1a0>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80050fe:	e11c      	b.n	800533a <SMBUS_Master_ISR+0x3da>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	001a      	movs	r2, r3
 8005106:	2301      	movs	r3, #1
 8005108:	4013      	ands	r3, r2
 800510a:	d018      	beq.n	800513e <SMBUS_Master_ISR+0x1de>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800513c:	e0fd      	b.n	800533a <SMBUS_Master_ISR+0x3da>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	09db      	lsrs	r3, r3, #7
 8005142:	001a      	movs	r2, r3
 8005144:	2301      	movs	r3, #1
 8005146:	4013      	ands	r3, r2
 8005148:	d100      	bne.n	800514c <SMBUS_Master_ISR+0x1ec>
 800514a:	e09e      	b.n	800528a <SMBUS_Master_ISR+0x32a>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d050      	beq.n	80051f8 <SMBUS_Master_ISR+0x298>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	d14c      	bne.n	80051f8 <SMBUS_Master_ISR+0x298>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b29a      	uxth	r2, r3
 8005166:	230e      	movs	r3, #14
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	0592      	lsls	r2, r2, #22
 800516c:	0d92      	lsrs	r2, r2, #22
 800516e:	801a      	strh	r2, [r3, #0]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2bff      	cmp	r3, #255	; 0xff
 8005178:	d915      	bls.n	80051a6 <SMBUS_Master_ISR+0x246>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	04db      	lsls	r3, r3, #19
 8005182:	4013      	ands	r3, r2
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	0452      	lsls	r2, r2, #17
 8005188:	431a      	orrs	r2, r3
 800518a:	230e      	movs	r3, #14
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	8819      	ldrh	r1, [r3, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	0013      	movs	r3, r2
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	f000 fc71 	bl	8005a80 <SMBUS_TransferConfig>
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80051a4:	e0c8      	b.n	8005338 <SMBUS_Master_ISR+0x3d8>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80051ba:	230e      	movs	r3, #14
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	8819      	ldrh	r1, [r3, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	0023      	movs	r3, r4
 80051c8:	f000 fc5a 	bl	8005a80 <SMBUS_TransferConfig>
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	04db      	lsls	r3, r3, #19
 80051d6:	4013      	ands	r3, r2
 80051d8:	d100      	bne.n	80051dc <SMBUS_Master_ISR+0x27c>
 80051da:	e0ad      	b.n	8005338 <SMBUS_Master_ISR+0x3d8>
        {
          hsmbus->XferSize--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80051f6:	e09f      	b.n	8005338 <SMBUS_Master_ISR+0x3d8>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d000      	beq.n	8005204 <SMBUS_Master_ISR+0x2a4>
 8005202:	e09a      	b.n	800533a <SMBUS_Master_ISR+0x3da>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d000      	beq.n	800520e <SMBUS_Master_ISR+0x2ae>
 800520c:	e095      	b.n	800533a <SMBUS_Master_ISR+0x3da>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	049b      	lsls	r3, r3, #18
 8005218:	401a      	ands	r2, r3
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	049b      	lsls	r3, r3, #18
 800521e:	429a      	cmp	r2, r3
 8005220:	d100      	bne.n	8005224 <SMBUS_Master_ISR+0x2c4>
 8005222:	e08a      	b.n	800533a <SMBUS_Master_ISR+0x3da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	2b12      	cmp	r3, #18
 800522a:	d114      	bne.n	8005256 <SMBUS_Master_ISR+0x2f6>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	21f2      	movs	r1, #242	; 0xf2
 8005230:	0018      	movs	r0, r3
 8005232:	f000 fabf 	bl	80057b4 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2244      	movs	r2, #68	; 0x44
 8005248:	2100      	movs	r1, #0
 800524a:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff fe3c 	bl	8004ecc <HAL_SMBUS_MasterTxCpltCallback>
 8005254:	e071      	b.n	800533a <SMBUS_Master_ISR+0x3da>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d000      	beq.n	8005260 <SMBUS_Master_ISR+0x300>
 800525e:	e06c      	b.n	800533a <SMBUS_Master_ISR+0x3da>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	21d4      	movs	r1, #212	; 0xd4
 8005264:	0018      	movs	r0, r3
 8005266:	f000 faa5 	bl	80057b4 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2244      	movs	r2, #68	; 0x44
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	0018      	movs	r0, r3
 8005284:	f7ff fe2a 	bl	8004edc <HAL_SMBUS_MasterRxCpltCallback>
 8005288:	e057      	b.n	800533a <SMBUS_Master_ISR+0x3da>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	099b      	lsrs	r3, r3, #6
 800528e:	001a      	movs	r2, r3
 8005290:	2301      	movs	r3, #1
 8005292:	4013      	ands	r3, r2
 8005294:	d051      	beq.n	800533a <SMBUS_Master_ISR+0x3da>
  {
    if (hsmbus->XferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d14c      	bne.n	800533a <SMBUS_Master_ISR+0x3da>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <SMBUS_Master_ISR+0x35c>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	01c9      	lsls	r1, r1, #7
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e03e      	b.n	800533a <SMBUS_Master_ISR+0x3da>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	049b      	lsls	r3, r3, #18
 80052c6:	401a      	ands	r2, r3
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	049b      	lsls	r3, r3, #18
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d034      	beq.n	800533a <SMBUS_Master_ISR+0x3da>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d4:	2b12      	cmp	r3, #18
 80052d6:	d114      	bne.n	8005302 <SMBUS_Master_ISR+0x3a2>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	21f2      	movs	r1, #242	; 0xf2
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 fa69 	bl	80057b4 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2244      	movs	r2, #68	; 0x44
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f7ff fde6 	bl	8004ecc <HAL_SMBUS_MasterTxCpltCallback>
 8005300:	e01b      	b.n	800533a <SMBUS_Master_ISR+0x3da>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005306:	2b22      	cmp	r3, #34	; 0x22
 8005308:	d117      	bne.n	800533a <SMBUS_Master_ISR+0x3da>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	21d4      	movs	r1, #212	; 0xd4
 800530e:	0018      	movs	r0, r3
 8005310:	f000 fa50 	bl	80057b4 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2244      	movs	r2, #68	; 0x44
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f7ff fdd5 	bl	8004edc <HAL_SMBUS_MasterRxCpltCallback>
 8005332:	e002      	b.n	800533a <SMBUS_Master_ISR+0x3da>
 8005334:	fe00e800 	.word	0xfe00e800
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005338:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2244      	movs	r2, #68	; 0x44
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b005      	add	sp, #20
 800534a:	bd90      	pop	{r4, r7, pc}

0800534c <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(struct __SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b087      	sub	sp, #28
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2244      	movs	r2, #68	; 0x44
 800535a:	5c9b      	ldrb	r3, [r3, r2]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <SMBUS_Slave_ISR+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e1e6      	b.n	8005732 <SMBUS_Slave_ISR+0x3e6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2244      	movs	r2, #68	; 0x44
 8005368:	2101      	movs	r1, #1
 800536a:	5499      	strb	r1, [r3, r2]

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	001a      	movs	r2, r3
 8005372:	2301      	movs	r3, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d037      	beq.n	80053e8 <SMBUS_Slave_ISR+0x9c>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <SMBUS_Slave_ISR+0x48>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2210      	movs	r2, #16
 8005388:	61da      	str	r2, [r3, #28]

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2244      	movs	r2, #68	; 0x44
 800538e:	2100      	movs	r1, #0
 8005390:	5499      	strb	r1, [r3, r2]
 8005392:	e164      	b.n	800565e <SMBUS_Slave_ISR+0x312>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2210      	movs	r2, #16
 800539a:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	2232      	movs	r2, #50	; 0x32
 80053aa:	4393      	bics	r3, r2
 80053ac:	001a      	movs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	2242      	movs	r2, #66	; 0x42
 80053b8:	4393      	bics	r3, r2
 80053ba:	001a      	movs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	21f6      	movs	r1, #246	; 0xf6
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 f9f5 	bl	80057b4 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	2204      	movs	r2, #4
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2244      	movs	r2, #68	; 0x44
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7ff fdab 	bl	8004f3c <HAL_SMBUS_ErrorCallback>
 80053e6:	e13a      	b.n	800565e <SMBUS_Slave_ISR+0x312>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	001a      	movs	r2, r3
 80053ee:	2301      	movs	r3, #1
 80053f0:	4013      	ands	r3, r2
 80053f2:	d028      	beq.n	8005446 <SMBUS_Slave_ISR+0xfa>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	200f      	movs	r0, #15
 8005400:	183b      	adds	r3, r7, r0
 8005402:	2101      	movs	r1, #1
 8005404:	400a      	ands	r2, r1
 8005406:	701a      	strb	r2, [r3, #0]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	0c5b      	lsrs	r3, r3, #17
 8005410:	b29a      	uxth	r2, r3
 8005412:	240c      	movs	r4, #12
 8005414:	193b      	adds	r3, r7, r4
 8005416:	217f      	movs	r1, #127	; 0x7f
 8005418:	400a      	ands	r2, r1
 800541a:	801a      	strh	r2, [r3, #0]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2108      	movs	r1, #8
 8005428:	438a      	bics	r2, r1
 800542a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2244      	movs	r2, #68	; 0x44
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 8005434:	193b      	adds	r3, r7, r4
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	183b      	adds	r3, r7, r0
 800543a:	7819      	ldrb	r1, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	f7ff fd64 	bl	8004f0c <HAL_SMBUS_AddrCallback>
 8005444:	e10b      	b.n	800565e <SMBUS_Slave_ISR+0x312>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) || (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	001a      	movs	r2, r3
 800544c:	2301      	movs	r3, #1
 800544e:	4013      	ands	r3, r2
 8005450:	d106      	bne.n	8005460 <SMBUS_Slave_ISR+0x114>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	001a      	movs	r2, r3
 8005458:	2301      	movs	r3, #1
 800545a:	4013      	ands	r3, r2
 800545c:	d100      	bne.n	8005460 <SMBUS_Slave_ISR+0x114>
 800545e:	e0bc      	b.n	80055da <SMBUS_Slave_ISR+0x28e>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005464:	2242      	movs	r2, #66	; 0x42
 8005466:	4013      	ands	r3, r2
 8005468:	2b42      	cmp	r3, #66	; 0x42
 800546a:	d165      	bne.n	8005538 <SMBUS_Slave_ISR+0x1ec>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d110      	bne.n	80054ca <SMBUS_Slave_ISR+0x17e>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	4aa3      	ldr	r2, [pc, #652]	; (800573c <SMBUS_Slave_ISR+0x3f0>)
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	0013      	movs	r3, r2
 80054c0:	2201      	movs	r2, #1
 80054c2:	2100      	movs	r1, #0
 80054c4:	f000 fadc 	bl	8005a80 <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80054c8:	e0c8      	b.n	800565c <SMBUS_Slave_ISR+0x310>
      }
      else if (hsmbus->XferCount == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d118      	bne.n	8005506 <SMBUS_Slave_ISR+0x1ba>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	21d4      	movs	r1, #212	; 0xd4
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 f96b 	bl	80057b4 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ea:	2242      	movs	r2, #66	; 0x42
 80054ec:	4393      	bics	r3, r2
 80054ee:	001a      	movs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2244      	movs	r2, #68	; 0x44
 80054f8:	2100      	movs	r1, #0
 80054fa:	5499      	strb	r1, [r3, r2]

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0018      	movs	r0, r3
 8005500:	f7ff fcfc 	bl	8004efc <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005504:	e0aa      	b.n	800565c <SMBUS_Slave_ISR+0x310>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1, SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_NO_STARTSTOP);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	04db      	lsls	r3, r3, #19
 800550e:	4013      	ands	r3, r2
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	0452      	lsls	r2, r2, #17
 8005514:	431a      	orrs	r2, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	2300      	movs	r3, #0
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	0013      	movs	r3, r2
 800551e:	2201      	movs	r2, #1
 8005520:	2100      	movs	r1, #0
 8005522:	f000 faad 	bl	8005a80 <SMBUS_TransferConfig>

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4983      	ldr	r1, [pc, #524]	; (8005740 <SMBUS_Slave_ISR+0x3f4>)
 8005532:	400a      	ands	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005536:	e091      	b.n	800565c <SMBUS_Slave_ISR+0x310>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553c:	2232      	movs	r2, #50	; 0x32
 800553e:	4013      	ands	r3, r2
 8005540:	2b32      	cmp	r3, #50	; 0x32
 8005542:	d000      	beq.n	8005546 <SMBUS_Slave_ISR+0x1fa>
 8005544:	e08a      	b.n	800565c <SMBUS_Slave_ISR+0x310>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d100      	bne.n	8005552 <SMBUS_Slave_ISR+0x206>
 8005550:	e084      	b.n	800565c <SMBUS_Slave_ISR+0x310>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005556:	2b00      	cmp	r3, #0
 8005558:	d000      	beq.n	800555c <SMBUS_Slave_ISR+0x210>
 800555a:	e07f      	b.n	800565c <SMBUS_Slave_ISR+0x310>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2bff      	cmp	r3, #255	; 0xff
 8005564:	d913      	bls.n	800558e <SMBUS_Slave_ISR+0x242>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	04db      	lsls	r3, r3, #19
 800556e:	4013      	ands	r3, r2
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	0452      	lsls	r2, r2, #17
 8005574:	431a      	orrs	r2, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	0013      	movs	r3, r2
 800557e:	22ff      	movs	r2, #255	; 0xff
 8005580:	2100      	movs	r1, #0
 8005582:	f000 fa7d 	bl	8005a80 <SMBUS_TransferConfig>
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800558c:	e066      	b.n	800565c <SMBUS_Slave_ISR+0x310>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800559c:	b2da      	uxtb	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	000b      	movs	r3, r1
 80055aa:	2100      	movs	r1, #0
 80055ac:	f000 fa68 	bl	8005a80 <SMBUS_TransferConfig>
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	04db      	lsls	r3, r3, #19
 80055ba:	4013      	ands	r3, r2
 80055bc:	d04e      	beq.n	800565c <SMBUS_Slave_ISR+0x310>
          {
            hsmbus->XferSize--;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80055d8:	e040      	b.n	800565c <SMBUS_Slave_ISR+0x310>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	001a      	movs	r2, r3
 80055e0:	2301      	movs	r3, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	d03b      	beq.n	800565e <SMBUS_Slave_ISR+0x312>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d017      	beq.n	8005620 <SMBUS_Slave_ISR+0x2d4>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d119      	bne.n	800565e <SMBUS_Slave_ISR+0x312>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	21f2      	movs	r1, #242	; 0xf2
 800562e:	0018      	movs	r0, r3
 8005630:	f000 f8c0 	bl	80057b4 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005640:	2232      	movs	r2, #50	; 0x32
 8005642:	4393      	bics	r3, r2
 8005644:	001a      	movs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2244      	movs	r2, #68	; 0x44
 800564e:	2100      	movs	r1, #0
 8005650:	5499      	strb	r1, [r3, r2]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f7ff fc49 	bl	8004eec <HAL_SMBUS_SlaveTxCpltCallback>
 800565a:	e000      	b.n	800565e <SMBUS_Slave_ISR+0x312>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800565c:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	001a      	movs	r2, r3
 8005664:	2301      	movs	r3, #1
 8005666:	4013      	ands	r3, r2
 8005668:	d05e      	beq.n	8005728 <SMBUS_Slave_ISR+0x3dc>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566e:	2208      	movs	r2, #8
 8005670:	4013      	ands	r3, r2
 8005672:	2b08      	cmp	r3, #8
 8005674:	d158      	bne.n	8005728 <SMBUS_Slave_ISR+0x3dc>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2204      	movs	r2, #4
 800567e:	4013      	ands	r3, r2
 8005680:	2b04      	cmp	r3, #4
 8005682:	d11c      	bne.n	80056be <SMBUS_Slave_ISR+0x372>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00c      	beq.n	80056be <SMBUS_Slave_ISR+0x372>
        {
          hsmbus->XferSize--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	21f6      	movs	r1, #246	; 0xf6
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f876 	bl	80057b4 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2138      	movs	r1, #56	; 0x38
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 f871 	bl	80057b4 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	0209      	lsls	r1, r1, #8
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4915      	ldr	r1, [pc, #84]	; (8005744 <SMBUS_Slave_ISR+0x3f8>)
 80056f0:	400a      	ands	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2244      	movs	r2, #68	; 0x44
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff fc02 	bl	8004f2c <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2244      	movs	r2, #68	; 0x44
 800572c:	2100      	movs	r1, #0
 800572e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b005      	add	sp, #20
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	feffffff 	.word	0xfeffffff
 8005740:	ffff7fff 	.word	0xffff7fff
 8005744:	fe00e800 	.word	0xfe00e800

08005748 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(struct __SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2280      	movs	r2, #128	; 0x80
 800575a:	4013      	ands	r3, r2
 800575c:	d003      	beq.n	8005766 <SMBUS_Enable_IRQ+0x1e>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2238      	movs	r2, #56	; 0x38
 800576a:	4013      	ands	r3, r2
 800576c:	2b38      	cmp	r3, #56	; 0x38
 800576e:	d103      	bne.n	8005778 <SMBUS_Enable_IRQ+0x30>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	22b8      	movs	r2, #184	; 0xb8
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	22f2      	movs	r2, #242	; 0xf2
 800577c:	4013      	ands	r3, r2
 800577e:	2bf2      	cmp	r3, #242	; 0xf2
 8005780:	d103      	bne.n	800578a <SMBUS_Enable_IRQ+0x42>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	22f2      	movs	r2, #242	; 0xf2
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	22d4      	movs	r2, #212	; 0xd4
 800578e:	4013      	ands	r3, r2
 8005790:	2bd4      	cmp	r3, #212	; 0xd4
 8005792:	d103      	bne.n	800579c <SMBUS_Enable_IRQ+0x54>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	22f4      	movs	r2, #244	; 0xf4
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6819      	ldr	r1, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]
}
 80057ac:	46c0      	nop			; (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b004      	add	sp, #16
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(struct __SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c6:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <SMBUS_Disable_IRQ+0x2a>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	4013      	ands	r3, r2
 80057d4:	d003      	beq.n	80057de <SMBUS_Disable_IRQ+0x2a>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2280      	movs	r2, #128	; 0x80
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	22f2      	movs	r2, #242	; 0xf2
 80057e2:	4013      	ands	r3, r2
 80057e4:	2bf2      	cmp	r3, #242	; 0xf2
 80057e6:	d11a      	bne.n	800581e <SMBUS_Disable_IRQ+0x6a>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2242      	movs	r2, #66	; 0x42
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	03db      	lsls	r3, r3, #15
 80057fa:	4013      	ands	r3, r2
 80057fc:	d107      	bne.n	800580e <SMBUS_Disable_IRQ+0x5a>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2208      	movs	r2, #8
 8005802:	4013      	ands	r3, r2
 8005804:	d103      	bne.n	800580e <SMBUS_Disable_IRQ+0x5a>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2208      	movs	r2, #8
 8005812:	4013      	ands	r3, r2
 8005814:	d103      	bne.n	800581e <SMBUS_Disable_IRQ+0x6a>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2230      	movs	r2, #48	; 0x30
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	22d4      	movs	r2, #212	; 0xd4
 8005822:	4013      	ands	r3, r2
 8005824:	2bd4      	cmp	r3, #212	; 0xd4
 8005826:	d11a      	bne.n	800585e <SMBUS_Disable_IRQ+0xaa>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2244      	movs	r2, #68	; 0x44
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	03db      	lsls	r3, r3, #15
 800583a:	4013      	ands	r3, r2
 800583c:	d107      	bne.n	800584e <SMBUS_Disable_IRQ+0x9a>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2208      	movs	r2, #8
 8005842:	4013      	ands	r3, r2
 8005844:	d103      	bne.n	800584e <SMBUS_Disable_IRQ+0x9a>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2208      	movs	r2, #8
 8005852:	4013      	ands	r3, r2
 8005854:	d103      	bne.n	800585e <SMBUS_Disable_IRQ+0xaa>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2230      	movs	r2, #48	; 0x30
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2238      	movs	r2, #56	; 0x38
 8005862:	4013      	ands	r3, r2
 8005864:	2b38      	cmp	r3, #56	; 0x38
 8005866:	d10e      	bne.n	8005886 <SMBUS_Disable_IRQ+0xd2>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2238      	movs	r2, #56	; 0x38
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	03db      	lsls	r3, r3, #15
 800587a:	4013      	ands	r3, r2
 800587c:	d103      	bne.n	8005886 <SMBUS_Disable_IRQ+0xd2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43d9      	mvns	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	400a      	ands	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b004      	add	sp, #16
 800589e:	bd80      	pop	{r7, pc}

080058a0 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(struct __SMBUS_HandleTypeDef *hsmbus)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4013      	ands	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <SMBUS_ITErrorHandler+0x40>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	4013      	ands	r3, r2
 80058c8:	d00a      	beq.n	80058e0 <SMBUS_ITErrorHandler+0x40>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ce:	2201      	movs	r2, #1
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2280      	movs	r2, #128	; 0x80
 80058dc:	0052      	lsls	r2, r2, #1
 80058de:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4013      	ands	r3, r2
 80058e8:	d00e      	beq.n	8005908 <SMBUS_ITErrorHandler+0x68>
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	4013      	ands	r3, r2
 80058f0:	d00a      	beq.n	8005908 <SMBUS_ITErrorHandler+0x68>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	2208      	movs	r2, #8
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2280      	movs	r2, #128	; 0x80
 8005904:	00d2      	lsls	r2, r2, #3
 8005906:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4013      	ands	r3, r2
 8005910:	d00e      	beq.n	8005930 <SMBUS_ITErrorHandler+0x90>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	4013      	ands	r3, r2
 8005918:	d00a      	beq.n	8005930 <SMBUS_ITErrorHandler+0x90>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	2202      	movs	r2, #2
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	0092      	lsls	r2, r2, #2
 800592e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	015b      	lsls	r3, r3, #5
 8005936:	4013      	ands	r3, r2
 8005938:	d00e      	beq.n	8005958 <SMBUS_ITErrorHandler+0xb8>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	4013      	ands	r3, r2
 8005940:	d00a      	beq.n	8005958 <SMBUS_ITErrorHandler+0xb8>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	2220      	movs	r2, #32
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	0152      	lsls	r2, r2, #5
 8005956:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	019b      	lsls	r3, r3, #6
 800595e:	4013      	ands	r3, r2
 8005960:	d00e      	beq.n	8005980 <SMBUS_ITErrorHandler+0xe0>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	4013      	ands	r3, r2
 8005968:	d00a      	beq.n	8005980 <SMBUS_ITErrorHandler+0xe0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596e:	2240      	movs	r2, #64	; 0x40
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	0192      	lsls	r2, r2, #6
 800597e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	4013      	ands	r3, r2
 8005988:	d00e      	beq.n	80059a8 <SMBUS_ITErrorHandler+0x108>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2280      	movs	r2, #128	; 0x80
 800598e:	4013      	ands	r3, r2
 8005990:	d00a      	beq.n	80059a8 <SMBUS_ITErrorHandler+0x108>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	0112      	lsls	r2, r2, #4
 80059a6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hsmbus->State, misra rule */
  tmperror = hsmbus->ErrorCode;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01d      	beq.n	80059f0 <SMBUS_ITErrorHandler+0x150>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d01a      	beq.n	80059f0 <SMBUS_ITErrorHandler+0x150>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2240      	movs	r2, #64	; 0x40
 80059be:	4013      	ands	r3, r2
 80059c0:	d112      	bne.n	80059e8 <SMBUS_ITErrorHandler+0x148>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c6:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2232      	movs	r2, #50	; 0x32
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b32      	cmp	r3, #50	; 0x32
 80059d0:	d004      	beq.n	80059dc <SMBUS_ITErrorHandler+0x13c>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2242      	movs	r2, #66	; 0x42
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b42      	cmp	r3, #66	; 0x42
 80059da:	d105      	bne.n	80059e8 <SMBUS_ITErrorHandler+0x148>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2208      	movs	r2, #8
 80059e6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7ff faa6 	bl	8004f3c <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b006      	add	sp, #24
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <SMBUS_WaitOnFlagUntilTimeout>:
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_WaitOnFlagUntilTimeout(struct __SMBUS_HandleTypeDef *hsmbus, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	1dfb      	adds	r3, r7, #7
 8005a06:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8005a08:	f7fd faa4 	bl	8002f54 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set */
  while ((FlagStatus)(__HAL_SMBUS_GET_FLAG(hsmbus, Flag)) == Status)
 8005a10:	e020      	b.n	8005a54 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	d01d      	beq.n	8005a54 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005a18:	f7fd fa9c 	bl	8002f54 <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <SMBUS_WaitOnFlagUntilTimeout+0x36>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d112      	bne.n	8005a54 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
      {
        hsmbus->PreviousState = hsmbus->State;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	649a      	str	r2, [r3, #72]	; 0x48

        /* Update SMBUS error code */
        hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a40:	2210      	movs	r2, #16
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2244      	movs	r2, #68	; 0x44
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e010      	b.n	8005a76 <SMBUS_WaitOnFlagUntilTimeout+0x7e>
  while ((FlagStatus)(__HAL_SMBUS_GET_FLAG(hsmbus, Flag)) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	03db      	lsls	r3, r3, #15
 8005a62:	0bdb      	lsrs	r3, r3, #15
 8005a64:	425a      	negs	r2, r3
 8005a66:	4153      	adcs	r3, r2
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	1dfb      	adds	r3, r7, #7
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0ce      	beq.n	8005a12 <SMBUS_WaitOnFlagUntilTimeout+0x1a>
      }
    }
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b006      	add	sp, #24
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(struct __SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	0008      	movs	r0, r1
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	240a      	movs	r4, #10
 8005a90:	193b      	adds	r3, r7, r4
 8005a92:	1c02      	adds	r2, r0, #0
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	2009      	movs	r0, #9
 8005a98:	183b      	adds	r3, r7, r0
 8005a9a:	1c0a      	adds	r2, r1, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP  | I2C_CR2_PECBYTE)), \
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	0d51      	lsrs	r1, r2, #21
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	00d2      	lsls	r2, r2, #3
 8005aac:	400a      	ands	r2, r1
 8005aae:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <SMBUS_TransferConfig+0x68>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	43d2      	mvns	r2, r2
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	059b      	lsls	r3, r3, #22
 8005abe:	0d9a      	lsrs	r2, r3, #22
 8005ac0:	183b      	adds	r3, r7, r0
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	0418      	lsls	r0, r3, #16
 8005ac6:	23ff      	movs	r3, #255	; 0xff
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	4003      	ands	r3, r0
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b005      	add	sp, #20
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	07ff63ff 	.word	0x07ff63ff

08005aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e08a      	b.n	8005c14 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	225d      	movs	r2, #93	; 0x5d
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d107      	bne.n	8005b20 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	225c      	movs	r2, #92	; 0x5c
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7fd f84a 	bl	8002bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	225d      	movs	r2, #93	; 0x5d
 8005b24:	2102      	movs	r1, #2
 8005b26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	438a      	bics	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	23e0      	movs	r3, #224	; 0xe0
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d902      	bls.n	8005b4a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e002      	b.n	8005b50 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	015b      	lsls	r3, r3, #5
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	23f0      	movs	r3, #240	; 0xf0
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d008      	beq.n	8005b6e <HAL_SPI_Init+0x82>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	23e0      	movs	r3, #224	; 0xe0
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d002      	beq.n	8005b6e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	23e0      	movs	r3, #224	; 0xe0
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d903      	bls.n	8005b8a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
 8005b88:	e002      	b.n	8005b90 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	400b      	ands	r3, r1
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	0011      	movs	r1, r2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69da      	ldr	r2, [r3, #28]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4907      	ldr	r1, [pc, #28]	; (8005c1c <HAL_SPI_Init+0x130>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	225d      	movs	r2, #93	; 0x5d
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	0018      	movs	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b004      	add	sp, #16
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	fffff7ff 	.word	0xfffff7ff

08005c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e01e      	b.n	8005c70 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	223d      	movs	r2, #61	; 0x3d
 8005c36:	5c9b      	ldrb	r3, [r3, r2]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	223c      	movs	r2, #60	; 0x3c
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fd f8d7 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	223d      	movs	r2, #61	; 0x3d
 8005c52:	2102      	movs	r1, #2
 8005c54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	0019      	movs	r1, r3
 8005c60:	0010      	movs	r0, r2
 8005c62:	f000 f947 	bl	8005ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	223d      	movs	r2, #61	; 0x3d
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2202      	movs	r2, #2
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d124      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2202      	movs	r2, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d11d      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 f902 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e007      	b.n	8005cd2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f000 f8f5 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 f901 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d125      	bne.n	8005d32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2204      	movs	r2, #4
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d11e      	bne.n	8005d32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	4252      	negs	r2, r2
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	23c0      	movs	r3, #192	; 0xc0
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 f8d5 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 8005d1a:	e007      	b.n	8005d2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 f8c8 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 f8d4 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d124      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2208      	movs	r2, #8
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11d      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2209      	movs	r2, #9
 8005d54:	4252      	negs	r2, r2
 8005d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2203      	movs	r2, #3
 8005d66:	4013      	ands	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 f8a9 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 8005d72:	e007      	b.n	8005d84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 f89c 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 f8a8 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2210      	movs	r2, #16
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d125      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d11e      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2211      	movs	r2, #17
 8005dac:	4252      	negs	r2, r2
 8005dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2208      	movs	r2, #8
 8005db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	23c0      	movs	r3, #192	; 0xc0
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 f87c 	bl	8005ec4 <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e007      	b.n	8005dde <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f000 f86f 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f87b 	bl	8005ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2201      	movs	r2, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10f      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d108      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2202      	movs	r2, #2
 8005e06:	4252      	negs	r2, r2
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f849 	bl	8005ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d10f      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b80      	cmp	r3, #128	; 0x80
 8005e2c:	d108      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2281      	movs	r2, #129	; 0x81
 8005e34:	4252      	negs	r2, r2
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f000 f8e2 	bl	8006004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d10f      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2240      	movs	r2, #64	; 0x40
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d108      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2241      	movs	r2, #65	; 0x41
 8005e62:	4252      	negs	r2, r2
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 f83b 	bl	8005ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2220      	movs	r2, #32
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d10f      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d108      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2221      	movs	r2, #33	; 0x21
 8005e90:	4252      	negs	r2, r2
 8005e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 f8ac 	bl	8005ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eec:	46c0      	nop			; (mov r8, r8)
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b002      	add	sp, #8
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a34      	ldr	r2, [pc, #208]	; (8005fd8 <TIM_Base_SetConfig+0xe4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d008      	beq.n	8005f1e <TIM_Base_SetConfig+0x2a>
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	05db      	lsls	r3, r3, #23
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0x2a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a30      	ldr	r2, [pc, #192]	; (8005fdc <TIM_Base_SetConfig+0xe8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2270      	movs	r2, #112	; 0x70
 8005f22:	4393      	bics	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a29      	ldr	r2, [pc, #164]	; (8005fd8 <TIM_Base_SetConfig+0xe4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	05db      	lsls	r3, r3, #23
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d013      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <TIM_Base_SetConfig+0xe8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <TIM_Base_SetConfig+0xec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a23      	ldr	r2, [pc, #140]	; (8005fe4 <TIM_Base_SetConfig+0xf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <TIM_Base_SetConfig+0xf4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x76>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a21      	ldr	r2, [pc, #132]	; (8005fec <TIM_Base_SetConfig+0xf8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <TIM_Base_SetConfig+0xfc>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	4393      	bics	r3, r2
 8005f82:	001a      	movs	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <TIM_Base_SetConfig+0xe4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xce>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <TIM_Base_SetConfig+0xf0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_Base_SetConfig+0xce>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <TIM_Base_SetConfig+0xf4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_Base_SetConfig+0xce>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	; (8005fec <TIM_Base_SetConfig+0xf8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d103      	bne.n	8005fca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	615a      	str	r2, [r3, #20]
}
 8005fd0:	46c0      	nop			; (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40002000 	.word	0x40002000
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800
 8005ff0:	fffffcff 	.word	0xfffffcff

08005ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	0002      	movs	r2, r0
 800601c:	1dbb      	adds	r3, r7, #6
 800601e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006024:	1dbb      	adds	r3, r7, #6
 8006026:	2200      	movs	r2, #0
 8006028:	5e9b      	ldrsh	r3, [r3, r2]
 800602a:	2b84      	cmp	r3, #132	; 0x84
 800602c:	d006      	beq.n	800603c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800602e:	1dbb      	adds	r3, r7, #6
 8006030:	2200      	movs	r2, #0
 8006032:	5e9a      	ldrsh	r2, [r3, r2]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	18d3      	adds	r3, r2, r3
 8006038:	3303      	adds	r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b004      	add	sp, #16
 8006044:	bd80      	pop	{r7, pc}

08006046 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604c:	f3ef 8305 	mrs	r3, IPSR
 8006050:	607b      	str	r3, [r7, #4]
  return(result);
 8006052:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006054:	1e5a      	subs	r2, r3, #1
 8006056:	4193      	sbcs	r3, r2
 8006058:	b2db      	uxtb	r3, r3
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b002      	add	sp, #8
 8006060:	bd80      	pop	{r7, pc}

08006062 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006066:	f001 f89b 	bl	80071a0 <vTaskStartScheduler>
  
  return osOK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	0018      	movs	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006074:	b089      	sub	sp, #36	; 0x24
 8006076:	af04      	add	r7, sp, #16
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685c      	ldr	r4, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681d      	ldr	r5, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691e      	ldr	r6, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2208      	movs	r2, #8
 800608c:	5e9b      	ldrsh	r3, [r3, r2]
 800608e:	0018      	movs	r0, r3
 8006090:	f7ff ffc0 	bl	8006014 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	9302      	str	r3, [sp, #8]
 80060a0:	9201      	str	r2, [sp, #4]
 80060a2:	9000      	str	r0, [sp, #0]
 80060a4:	000b      	movs	r3, r1
 80060a6:	0032      	movs	r2, r6
 80060a8:	0029      	movs	r1, r5
 80060aa:	0020      	movs	r0, r4
 80060ac:	f000 fddd 	bl	8006c6a <xTaskCreateStatic>
 80060b0:	0003      	movs	r3, r0
 80060b2:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b005      	add	sp, #20
 80060bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <osDelay+0x16>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	e000      	b.n	80060d6 <osDelay+0x18>
 80060d4:	2301      	movs	r3, #1
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 fefa 	bl	8006ed0 <vTaskDelay>
  
  return osOK;
 80060dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060de:	0018      	movs	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b004      	add	sp, #16
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
      return NULL;
#endif    
    }
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 ) // configSUPPORT_DYNAMIC_ALLOCATION == 0
  if(count == 1) {
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10b      	bne.n	800610e <osSemaphoreCreate+0x28>
    return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	2303      	movs	r3, #3
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	0013      	movs	r3, r2
 8006100:	2200      	movs	r2, #0
 8006102:	2100      	movs	r1, #0
 8006104:	2001      	movs	r0, #1
 8006106:	f000 f9ae 	bl	8006466 <xQueueGenericCreateStatic>
 800610a:	0003      	movs	r3, r0
 800610c:	e000      	b.n	8006110 <osSemaphoreCreate+0x2a>
  else
  {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800610e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}

08006118 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	e036      	b.n	800619e <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	d103      	bne.n	8006142 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 800613a:	2301      	movs	r3, #1
 800613c:	425b      	negs	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e009      	b.n	8006156 <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <osSemaphoreWait+0x3e>
      ticks = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006156:	f7ff ff76 	bl	8006046 <inHandlerMode>
 800615a:	1e03      	subs	r3, r0, #0
 800615c:	d013      	beq.n	8006186 <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800615e:	2308      	movs	r3, #8
 8006160:	18fa      	adds	r2, r7, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2100      	movs	r1, #0
 8006166:	0018      	movs	r0, r3
 8006168:	f000 fbe9 	bl	800693e <xQueueReceiveFromISR>
 800616c:	0003      	movs	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d001      	beq.n	8006176 <osSemaphoreWait+0x5e>
      return osErrorOS;
 8006172:	23ff      	movs	r3, #255	; 0xff
 8006174:	e013      	b.n	800619e <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00f      	beq.n	800619c <osSemaphoreWait+0x84>
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <osSemaphoreWait+0x90>)
 800617e:	2280      	movs	r2, #128	; 0x80
 8006180:	0552      	lsls	r2, r2, #21
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e00a      	b.n	800619c <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0011      	movs	r1, r2
 800618c:	0018      	movs	r0, r3
 800618e:	f000 fafc 	bl	800678a <xQueueSemaphoreTake>
 8006192:	0003      	movs	r3, r0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <osSemaphoreWait+0x84>
    return osErrorOS;
 8006198:	23ff      	movs	r3, #255	; 0xff
 800619a:	e000      	b.n	800619e <osSemaphoreWait+0x86>
  }
  
  return osOK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b004      	add	sp, #16
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80061bc:	f7ff ff43 	bl	8006046 <inHandlerMode>
 80061c0:	1e03      	subs	r3, r0, #0
 80061c2:	d013      	beq.n	80061ec <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80061c4:	2308      	movs	r3, #8
 80061c6:	18fa      	adds	r2, r7, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0011      	movs	r1, r2
 80061cc:	0018      	movs	r0, r3
 80061ce:	f000 fa77 	bl	80066c0 <xQueueGiveFromISR>
 80061d2:	0003      	movs	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80061d8:	23ff      	movs	r3, #255	; 0xff
 80061da:	e013      	b.n	8006204 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00f      	beq.n	8006202 <osSemaphoreRelease+0x56>
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <osSemaphoreRelease+0x60>)
 80061e4:	2280      	movs	r2, #128	; 0x80
 80061e6:	0552      	lsls	r2, r2, #21
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e00a      	b.n	8006202 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	2300      	movs	r3, #0
 80061f0:	2200      	movs	r2, #0
 80061f2:	2100      	movs	r1, #0
 80061f4:	f000 f9a0 	bl	8006538 <xQueueGenericSend>
 80061f8:	0003      	movs	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d001      	beq.n	8006202 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 80061fe:	23ff      	movs	r3, #255	; 0xff
 8006200:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b004      	add	sp, #16
 800620a:	bd80      	pop	{r7, pc}
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	0018      	movs	r0, r3
 800621c:	f000 fe7e 	bl	8006f1c <vTaskSuspend>
  
  return osOK;
 8006220:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b002      	add	sp, #8
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006234:	f7ff ff07 	bl	8006046 <inHandlerMode>
 8006238:	1e03      	subs	r3, r0, #0
 800623a:	d00b      	beq.n	8006254 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	0018      	movs	r0, r3
 8006240:	f000 ff50 	bl	80070e4 <xTaskResumeFromISR>
 8006244:	0003      	movs	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d108      	bne.n	800625c <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <osThreadResume+0x3c>)
 800624c:	2280      	movs	r2, #128	; 0x80
 800624e:	0552      	lsls	r2, r2, #21
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e003      	b.n	800625c <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	0018      	movs	r0, r3
 8006258:	f000 fef6 	bl	8007048 <vTaskResume>
  }
  return osOK;
 800625c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b002      	add	sp, #8
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3308      	adds	r3, #8
 8006278:	001a      	movs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	4252      	negs	r2, r2
 8006284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3308      	adds	r3, #8
 800628a:	001a      	movs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3308      	adds	r3, #8
 8006294:	001a      	movs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b002      	add	sp, #8
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b002      	add	sp, #8
 80062bc:	bd80      	pop	{r7, pc}

080062be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bd80      	pop	{r7, pc}

08006302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3301      	adds	r3, #1
 8006316:	d103      	bne.n	8006320 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e00c      	b.n	800633a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3308      	adds	r3, #8
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	e002      	b.n	800632e <vListInsert+0x2c>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	d2f6      	bcs.n	8006328 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	46bd      	mov	sp, r7
 800636a:	b004      	add	sp, #16
 800636c:	bd80      	pop	{r7, pc}

0800636e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6892      	ldr	r2, [r2, #8]
 8006384:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6852      	ldr	r2, [r2, #4]
 800638e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d103      	bne.n	80063a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	1e5a      	subs	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}

080063be <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <xQueueGenericReset+0x18>
 80063d2:	b672      	cpsid	i
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80063d6:	f001 fcd3 	bl	8007d80 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	434b      	muls	r3, r1
 80063e8:	18d2      	adds	r2, r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	1e59      	subs	r1, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	434b      	muls	r3, r1
 800640c:	18d2      	adds	r2, r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2244      	movs	r2, #68	; 0x44
 8006416:	21ff      	movs	r1, #255	; 0xff
 8006418:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2245      	movs	r2, #69	; 0x45
 800641e:	21ff      	movs	r1, #255	; 0xff
 8006420:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10d      	bne.n	8006444 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3310      	adds	r3, #16
 8006434:	0018      	movs	r0, r3
 8006436:	f001 f8cf 	bl	80075d8 <xTaskRemoveFromEventList>
 800643a:	1e03      	subs	r3, r0, #0
 800643c:	d00c      	beq.n	8006458 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800643e:	f001 fc8f 	bl	8007d60 <vPortYield>
 8006442:	e009      	b.n	8006458 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3310      	adds	r3, #16
 8006448:	0018      	movs	r0, r3
 800644a:	f7ff ff0f 	bl	800626c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	0018      	movs	r0, r3
 8006454:	f7ff ff0a 	bl	800626c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006458:	f001 fca4 	bl	8007da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800645c:	2301      	movs	r3, #1
}
 800645e:	0018      	movs	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}

08006466 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006466:	b590      	push	{r4, r7, lr}
 8006468:	b089      	sub	sp, #36	; 0x24
 800646a:	af02      	add	r7, sp, #8
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueGenericCreateStatic+0x18>
 800647a:	b672      	cpsid	i
 800647c:	e7fe      	b.n	800647c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <xQueueGenericCreateStatic+0x22>
 8006484:	b672      	cpsid	i
 8006486:	e7fe      	b.n	8006486 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <xQueueGenericCreateStatic+0x2e>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <xQueueGenericCreateStatic+0x32>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <xQueueGenericCreateStatic+0x34>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <xQueueGenericCreateStatic+0x3c>
 800649e:	b672      	cpsid	i
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <xQueueGenericCreateStatic+0x48>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <xQueueGenericCreateStatic+0x4c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <xQueueGenericCreateStatic+0x4e>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <xQueueGenericCreateStatic+0x56>
 80064b8:	b672      	cpsid	i
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064bc:	2348      	movs	r3, #72	; 0x48
 80064be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b48      	cmp	r3, #72	; 0x48
 80064c4:	d001      	beq.n	80064ca <xQueueGenericCreateStatic+0x64>
 80064c6:	b672      	cpsid	i
 80064c8:	e7fe      	b.n	80064c8 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <xQueueGenericCreateStatic+0x84>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064d4:	2328      	movs	r3, #40	; 0x28
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	781c      	ldrb	r4, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	0023      	movs	r3, r4
 80064e6:	f000 f805 	bl	80064f4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80064ea:	697b      	ldr	r3, [r7, #20]
	}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b007      	add	sp, #28
 80064f2:	bd90      	pop	{r4, r7, pc}

080064f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	001a      	movs	r2, r3
 8006502:	1cfb      	adds	r3, r7, #3
 8006504:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e002      	b.n	800651a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2101      	movs	r1, #1
 800652a:	0018      	movs	r0, r3
 800652c:	f7ff ff47 	bl	80063be <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}

08006538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006546:	2300      	movs	r3, #0
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <xQueueGenericSend+0x20>
 8006554:	b672      	cpsid	i
 8006556:	e7fe      	b.n	8006556 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <xQueueGenericSend+0x2e>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <xQueueGenericSend+0x32>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueGenericSend+0x34>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <xQueueGenericSend+0x3c>
 8006570:	b672      	cpsid	i
 8006572:	e7fe      	b.n	8006572 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x4a>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0x4e>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0x50>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0x58>
 800658c:	b672      	cpsid	i
 800658e:	e7fe      	b.n	800658e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006590:	f001 f9a0 	bl	80078d4 <xTaskGetSchedulerState>
 8006594:	1e03      	subs	r3, r0, #0
 8006596:	d102      	bne.n	800659e <xQueueGenericSend+0x66>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <xQueueGenericSend+0x6a>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <xQueueGenericSend+0x6c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <xQueueGenericSend+0x74>
 80065a8:	b672      	cpsid	i
 80065aa:	e7fe      	b.n	80065aa <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ac:	f001 fbe8 	bl	8007d80 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d302      	bcc.n	80065c2 <xQueueGenericSend+0x8a>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11e      	bne.n	8006600 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 fa31 	bl	8006a30 <prvCopyDataToQueue>
 80065ce:	0003      	movs	r3, r0
 80065d0:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	3324      	adds	r3, #36	; 0x24
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 fffa 	bl	80075d8 <xTaskRemoveFromEventList>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d007      	beq.n	80065f8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e8:	f001 fbba 	bl	8007d60 <vPortYield>
 80065ec:	e004      	b.n	80065f8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065f4:	f001 fbb4 	bl	8007d60 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065f8:	f001 fbd4 	bl	8007da4 <vPortExitCritical>
				return pdPASS;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e05b      	b.n	80066b8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006606:	f001 fbcd 	bl	8007da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800660a:	2300      	movs	r3, #0
 800660c:	e054      	b.n	80066b8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006614:	2314      	movs	r3, #20
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	0018      	movs	r0, r3
 800661a:	f001 f839 	bl	8007690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006622:	f001 fbbf 	bl	8007da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006626:	f000 fe13 	bl	8007250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800662a:	f001 fba9 	bl	8007d80 <vPortEnterCritical>
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	2244      	movs	r2, #68	; 0x44
 8006632:	5c9b      	ldrb	r3, [r3, r2]
 8006634:	b25b      	sxtb	r3, r3
 8006636:	3301      	adds	r3, #1
 8006638:	d103      	bne.n	8006642 <xQueueGenericSend+0x10a>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2244      	movs	r2, #68	; 0x44
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	2245      	movs	r2, #69	; 0x45
 8006646:	5c9b      	ldrb	r3, [r3, r2]
 8006648:	b25b      	sxtb	r3, r3
 800664a:	3301      	adds	r3, #1
 800664c:	d103      	bne.n	8006656 <xQueueGenericSend+0x11e>
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2245      	movs	r2, #69	; 0x45
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]
 8006656:	f001 fba5 	bl	8007da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665a:	1d3a      	adds	r2, r7, #4
 800665c:	2314      	movs	r3, #20
 800665e:	18fb      	adds	r3, r7, r3
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f001 f828 	bl	80076b8 <xTaskCheckForTimeOut>
 8006668:	1e03      	subs	r3, r0, #0
 800666a:	d11e      	bne.n	80066aa <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	0018      	movs	r0, r3
 8006670:	f000 fae3 	bl	8006c3a <prvIsQueueFull>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d011      	beq.n	800669c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	3310      	adds	r3, #16
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	0011      	movs	r1, r2
 8006680:	0018      	movs	r0, r3
 8006682:	f000 ff8b 	bl	800759c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 fa62 	bl	8006b52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800668e:	f000 fdeb 	bl	8007268 <xTaskResumeAll>
 8006692:	1e03      	subs	r3, r0, #0
 8006694:	d18a      	bne.n	80065ac <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006696:	f001 fb63 	bl	8007d60 <vPortYield>
 800669a:	e787      	b.n	80065ac <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	0018      	movs	r0, r3
 80066a0:	f000 fa57 	bl	8006b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066a4:	f000 fde0 	bl	8007268 <xTaskResumeAll>
 80066a8:	e780      	b.n	80065ac <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f000 fa50 	bl	8006b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066b2:	f000 fdd9 	bl	8007268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066b6:	2300      	movs	r3, #0
		}
	}
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b00a      	add	sp, #40	; 0x28
 80066be:	bd80      	pop	{r7, pc}

080066c0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <xQueueGiveFromISR+0x18>
 80066d4:	b672      	cpsid	i
 80066d6:	e7fe      	b.n	80066d6 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <xQueueGiveFromISR+0x24>
 80066e0:	b672      	cpsid	i
 80066e2:	e7fe      	b.n	80066e2 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <xQueueGiveFromISR+0x34>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGiveFromISR+0x38>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueGiveFromISR+0x3a>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <xQueueGiveFromISR+0x42>
 80066fe:	b672      	cpsid	i
 8006700:	e7fe      	b.n	8006700 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006702:	f001 fb67 	bl	8007dd4 <ulSetInterruptMaskFromISR>
 8006706:	0003      	movs	r3, r0
 8006708:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	d22c      	bcs.n	8006774 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800671a:	200f      	movs	r0, #15
 800671c:	183b      	adds	r3, r7, r0
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	2145      	movs	r1, #69	; 0x45
 8006722:	5c52      	ldrb	r2, [r2, r1]
 8006724:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800672e:	183b      	adds	r3, r7, r0
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b25b      	sxtb	r3, r3
 8006734:	3301      	adds	r3, #1
 8006736:	d111      	bne.n	800675c <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d016      	beq.n	800676e <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	0018      	movs	r0, r3
 8006746:	f000 ff47 	bl	80075d8 <xTaskRemoveFromEventList>
 800674a:	1e03      	subs	r3, r0, #0
 800674c:	d00f      	beq.n	800676e <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	e008      	b.n	800676e <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800675c:	230f      	movs	r3, #15
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	b259      	sxtb	r1, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2245      	movs	r2, #69	; 0x45
 800676c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800676e:	2301      	movs	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	e001      	b.n	8006778 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	0018      	movs	r0, r3
 800677c:	f001 fb30 	bl	8007de0 <vClearInterruptMaskFromISR>

	return xReturn;
 8006780:	69fb      	ldr	r3, [r7, #28]
}
 8006782:	0018      	movs	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	b008      	add	sp, #32
 8006788:	bd80      	pop	{r7, pc}

0800678a <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08a      	sub	sp, #40	; 0x28
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <xQueueSemaphoreTake+0x20>
 80067a6:	b672      	cpsid	i
 80067a8:	e7fe      	b.n	80067a8 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <xQueueSemaphoreTake+0x2c>
 80067b2:	b672      	cpsid	i
 80067b4:	e7fe      	b.n	80067b4 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b6:	f001 f88d 	bl	80078d4 <xTaskGetSchedulerState>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d102      	bne.n	80067c4 <xQueueSemaphoreTake+0x3a>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <xQueueSemaphoreTake+0x3e>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <xQueueSemaphoreTake+0x40>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <xQueueSemaphoreTake+0x48>
 80067ce:	b672      	cpsid	i
 80067d0:	e7fe      	b.n	80067d0 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d2:	f001 fad5 	bl	8007d80 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01d      	beq.n	800681e <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	1e5a      	subs	r2, r3, #1
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80067f2:	f001 f9c9 	bl	8007b88 <pvTaskIncrementMutexHeldCount>
 80067f6:	0002      	movs	r2, r0
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	3310      	adds	r3, #16
 8006808:	0018      	movs	r0, r3
 800680a:	f000 fee5 	bl	80075d8 <xTaskRemoveFromEventList>
 800680e:	1e03      	subs	r3, r0, #0
 8006810:	d001      	beq.n	8006816 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006812:	f001 faa5 	bl	8007d60 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006816:	f001 fac5 	bl	8007da4 <vPortExitCritical>
				return pdPASS;
 800681a:	2301      	movs	r3, #1
 800681c:	e08b      	b.n	8006936 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <xQueueSemaphoreTake+0xa4>
 800682a:	b672      	cpsid	i
 800682c:	e7fe      	b.n	800682c <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800682e:	f001 fab9 	bl	8007da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006832:	2300      	movs	r3, #0
 8006834:	e07f      	b.n	8006936 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800683c:	230c      	movs	r3, #12
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	0018      	movs	r0, r3
 8006842:	f000 ff25 	bl	8007690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800684a:	f001 faab 	bl	8007da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800684e:	f000 fcff 	bl	8007250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006852:	f001 fa95 	bl	8007d80 <vPortEnterCritical>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	2244      	movs	r2, #68	; 0x44
 800685a:	5c9b      	ldrb	r3, [r3, r2]
 800685c:	b25b      	sxtb	r3, r3
 800685e:	3301      	adds	r3, #1
 8006860:	d103      	bne.n	800686a <xQueueSemaphoreTake+0xe0>
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2244      	movs	r2, #68	; 0x44
 8006866:	2100      	movs	r1, #0
 8006868:	5499      	strb	r1, [r3, r2]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2245      	movs	r2, #69	; 0x45
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	b25b      	sxtb	r3, r3
 8006872:	3301      	adds	r3, #1
 8006874:	d103      	bne.n	800687e <xQueueSemaphoreTake+0xf4>
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	2245      	movs	r2, #69	; 0x45
 800687a:	2100      	movs	r1, #0
 800687c:	5499      	strb	r1, [r3, r2]
 800687e:	f001 fa91 	bl	8007da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006882:	003a      	movs	r2, r7
 8006884:	230c      	movs	r3, #12
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	0011      	movs	r1, r2
 800688a:	0018      	movs	r0, r3
 800688c:	f000 ff14 	bl	80076b8 <xTaskCheckForTimeOut>
 8006890:	1e03      	subs	r3, r0, #0
 8006892:	d12e      	bne.n	80068f2 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 f9b9 	bl	8006c0e <prvIsQueueEmpty>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d021      	beq.n	80068e4 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 80068a8:	f001 fa6a 	bl	8007d80 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	0018      	movs	r0, r3
 80068b2:	f001 f82b 	bl	800790c <xTaskPriorityInherit>
 80068b6:	0003      	movs	r3, r0
 80068b8:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80068ba:	f001 fa73 	bl	8007da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3324      	adds	r3, #36	; 0x24
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	0011      	movs	r1, r2
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 fe68 	bl	800759c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f000 f93f 	bl	8006b52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068d4:	f000 fcc8 	bl	8007268 <xTaskResumeAll>
 80068d8:	1e03      	subs	r3, r0, #0
 80068da:	d000      	beq.n	80068de <xQueueSemaphoreTake+0x154>
 80068dc:	e779      	b.n	80067d2 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80068de:	f001 fa3f 	bl	8007d60 <vPortYield>
 80068e2:	e776      	b.n	80067d2 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 f933 	bl	8006b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ec:	f000 fcbc 	bl	8007268 <xTaskResumeAll>
 80068f0:	e76f      	b.n	80067d2 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	0018      	movs	r0, r3
 80068f6:	f000 f92c 	bl	8006b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068fa:	f000 fcb5 	bl	8007268 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	0018      	movs	r0, r3
 8006902:	f000 f984 	bl	8006c0e <prvIsQueueEmpty>
 8006906:	1e03      	subs	r3, r0, #0
 8006908:	d100      	bne.n	800690c <xQueueSemaphoreTake+0x182>
 800690a:	e762      	b.n	80067d2 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d010      	beq.n	8006934 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8006912:	f001 fa35 	bl	8007d80 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	0018      	movs	r0, r3
 800691a:	f000 f873 	bl	8006a04 <prvGetDisinheritPriorityAfterTimeout>
 800691e:	0003      	movs	r3, r0
 8006920:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	0011      	movs	r1, r2
 800692a:	0018      	movs	r0, r3
 800692c:	f001 f8b8 	bl	8007aa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006930:	f001 fa38 	bl	8007da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b00a      	add	sp, #40	; 0x28
 800693c:	bd80      	pop	{r7, pc}

0800693e <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800693e:	b590      	push	{r4, r7, lr}
 8006940:	b08b      	sub	sp, #44	; 0x2c
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <xQueueReceiveFromISR+0x1a>
 8006954:	b672      	cpsid	i
 8006956:	e7fe      	b.n	8006956 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <xQueueReceiveFromISR+0x28>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <xQueueReceiveFromISR+0x2c>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueReceiveFromISR+0x2e>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <xQueueReceiveFromISR+0x36>
 8006970:	b672      	cpsid	i
 8006972:	e7fe      	b.n	8006972 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006974:	f001 fa2e 	bl	8007dd4 <ulSetInterruptMaskFromISR>
 8006978:	0003      	movs	r3, r0
 800697a:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d032      	beq.n	80069ee <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006988:	2417      	movs	r4, #23
 800698a:	193b      	adds	r3, r7, r4
 800698c:	6a3a      	ldr	r2, [r7, #32]
 800698e:	2144      	movs	r1, #68	; 0x44
 8006990:	5c52      	ldrb	r2, [r2, r1]
 8006992:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f000 f8b3 	bl	8006b06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	1e5a      	subs	r2, r3, #1
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80069a8:	193b      	adds	r3, r7, r4
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	3301      	adds	r3, #1
 80069b0:	d111      	bne.n	80069d6 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d016      	beq.n	80069e8 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	3310      	adds	r3, #16
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 fe0a 	bl	80075d8 <xTaskRemoveFromEventList>
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d00f      	beq.n	80069e8 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e008      	b.n	80069e8 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80069d6:	2317      	movs	r3, #23
 80069d8:	18fb      	adds	r3, r7, r3
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	b259      	sxtb	r1, r3
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	2244      	movs	r2, #68	; 0x44
 80069e6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80069e8:	2301      	movs	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
 80069ec:	e001      	b.n	80069f2 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f001 f9f3 	bl	8007de0 <vClearInterruptMaskFromISR>

	return xReturn;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069fc:	0018      	movs	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b00b      	add	sp, #44	; 0x2c
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e001      	b.n	8006a26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a26:	68fb      	ldr	r3, [r7, #12]
	}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b004      	add	sp, #16
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10e      	bne.n	8006a6c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d14e      	bne.n	8006af4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 ffc4 	bl	80079e8 <xTaskPriorityDisinherit>
 8006a60:	0003      	movs	r3, r0
 8006a62:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	e043      	b.n	8006af4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d119      	bne.n	8006aa6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6898      	ldr	r0, [r3, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	f002 fe41 	bl	8009704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	18d2      	adds	r2, r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d32b      	bcc.n	8006af4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
 8006aa4:	e026      	b.n	8006af4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68d8      	ldr	r0, [r3, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	f002 fe27 	bl	8009704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	425b      	negs	r3, r3
 8006ac0:	18d2      	adds	r2, r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d207      	bcs.n	8006ae2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	425b      	negs	r3, r3
 8006adc:	18d2      	adds	r2, r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d105      	bne.n	8006af4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006afc:	697b      	ldr	r3, [r7, #20]
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b006      	add	sp, #24
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d018      	beq.n	8006b4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	18d2      	adds	r2, r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d303      	bcc.n	8006b3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68d9      	ldr	r1, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	0018      	movs	r0, r3
 8006b46:	f002 fddd 	bl	8009704 <memcpy>
	}
}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b002      	add	sp, #8
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b5a:	f001 f911 	bl	8007d80 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b5e:	230f      	movs	r3, #15
 8006b60:	18fb      	adds	r3, r7, r3
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	2145      	movs	r1, #69	; 0x45
 8006b66:	5c52      	ldrb	r2, [r2, r1]
 8006b68:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b6a:	e013      	b.n	8006b94 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d016      	beq.n	8006ba2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 fd2d 	bl	80075d8 <xTaskRemoveFromEventList>
 8006b7e:	1e03      	subs	r3, r0, #0
 8006b80:	d001      	beq.n	8006b86 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b82:	f000 fde9 	bl	8007758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b86:	210f      	movs	r1, #15
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	187b      	adds	r3, r7, r1
 8006b92:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b94:	230f      	movs	r3, #15
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dce5      	bgt.n	8006b6c <prvUnlockQueue+0x1a>
 8006ba0:	e000      	b.n	8006ba4 <prvUnlockQueue+0x52>
					break;
 8006ba2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2245      	movs	r2, #69	; 0x45
 8006ba8:	21ff      	movs	r1, #255	; 0xff
 8006baa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006bac:	f001 f8fa 	bl	8007da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bb0:	f001 f8e6 	bl	8007d80 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bb4:	230e      	movs	r3, #14
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	2144      	movs	r1, #68	; 0x44
 8006bbc:	5c52      	ldrb	r2, [r2, r1]
 8006bbe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bc0:	e013      	b.n	8006bea <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3310      	adds	r3, #16
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fd02 	bl	80075d8 <xTaskRemoveFromEventList>
 8006bd4:	1e03      	subs	r3, r0, #0
 8006bd6:	d001      	beq.n	8006bdc <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006bd8:	f000 fdbe 	bl	8007758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bdc:	210e      	movs	r1, #14
 8006bde:	187b      	adds	r3, r7, r1
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	187b      	adds	r3, r7, r1
 8006be8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bea:	230e      	movs	r3, #14
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dce5      	bgt.n	8006bc2 <prvUnlockQueue+0x70>
 8006bf6:	e000      	b.n	8006bfa <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006bf8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2244      	movs	r2, #68	; 0x44
 8006bfe:	21ff      	movs	r1, #255	; 0xff
 8006c00:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006c02:	f001 f8cf 	bl	8007da4 <vPortExitCritical>
}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c16:	f001 f8b3 	bl	8007d80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e001      	b.n	8006c2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c2c:	f001 f8ba 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c42:	f001 f89d 	bl	8007d80 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d102      	bne.n	8006c58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e001      	b.n	8006c5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c5c:	f001 f8a2 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 8006c60:	68fb      	ldr	r3, [r7, #12]
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b004      	add	sp, #16
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c6a:	b590      	push	{r4, r7, lr}
 8006c6c:	b08d      	sub	sp, #52	; 0x34
 8006c6e:	af04      	add	r7, sp, #16
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <xTaskCreateStatic+0x18>
 8006c7e:	b672      	cpsid	i
 8006c80:	e7fe      	b.n	8006c80 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <xTaskCreateStatic+0x22>
 8006c88:	b672      	cpsid	i
 8006c8a:	e7fe      	b.n	8006c8a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c8c:	23b4      	movs	r3, #180	; 0xb4
 8006c8e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2bb4      	cmp	r3, #180	; 0xb4
 8006c94:	d001      	beq.n	8006c9a <xTaskCreateStatic+0x30>
 8006c96:	b672      	cpsid	i
 8006c98:	e7fe      	b.n	8006c98 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01c      	beq.n	8006cda <xTaskCreateStatic+0x70>
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d019      	beq.n	8006cda <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cb0:	683c      	ldr	r4, [r7, #0]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9303      	str	r3, [sp, #12]
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	2318      	movs	r3, #24
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	0023      	movs	r3, r4
 8006ccc:	f000 f80c 	bl	8006ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f000 f898 	bl	8006e08 <prvAddNewTaskToReadyList>
 8006cd8:	e001      	b.n	8006cde <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cde:	69bb      	ldr	r3, [r7, #24]
	}
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b009      	add	sp, #36	; 0x24
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	493e      	ldr	r1, [pc, #248]	; (8006df8 <prvInitialiseNewTask+0x110>)
 8006cfe:	468c      	mov	ip, r1
 8006d00:	4463      	add	r3, ip
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	18d3      	adds	r3, r2, r3
 8006d06:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	4393      	bics	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2207      	movs	r2, #7
 8006d14:	4013      	ands	r3, r2
 8006d16:	d001      	beq.n	8006d1c <prvInitialiseNewTask+0x34>
 8006d18:	b672      	cpsid	i
 8006d1a:	e7fe      	b.n	8006d1a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e013      	b.n	8006d4a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	7818      	ldrb	r0, [r3, #0]
 8006d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2c:	2134      	movs	r1, #52	; 0x34
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	185b      	adds	r3, r3, r1
 8006d34:	1c02      	adds	r2, r0, #0
 8006d36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	18d3      	adds	r3, r2, r3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	3301      	adds	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b0f      	cmp	r3, #15
 8006d4e:	d9e8      	bls.n	8006d22 <prvInitialiseNewTask+0x3a>
 8006d50:	e000      	b.n	8006d54 <prvInitialiseNewTask+0x6c>
		{
			break;
 8006d52:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	2243      	movs	r2, #67	; 0x43
 8006d58:	2100      	movs	r1, #0
 8006d5a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d901      	bls.n	8006d66 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d62:	2306      	movs	r3, #6
 8006d64:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	6a3a      	ldr	r2, [r7, #32]
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	2200      	movs	r2, #0
 8006d76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7ff fa93 	bl	80062a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	3318      	adds	r3, #24
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7ff fa8e 	bl	80062a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	2207      	movs	r2, #7
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	22ac      	movs	r2, #172	; 0xac
 8006da6:	2100      	movs	r1, #0
 8006da8:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	22b0      	movs	r2, #176	; 0xb0
 8006dae:	2100      	movs	r1, #0
 8006db0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	334c      	adds	r3, #76	; 0x4c
 8006db6:	2260      	movs	r2, #96	; 0x60
 8006db8:	2100      	movs	r1, #0
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f002 fcab 	bl	8009716 <memset>
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <prvInitialiseNewTask+0x114>)
 8006dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	4a0d      	ldr	r2, [pc, #52]	; (8006e00 <prvInitialiseNewTask+0x118>)
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <prvInitialiseNewTask+0x11c>)
 8006dd0:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	68f9      	ldr	r1, [r7, #12]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 ff3b 	bl	8007c54 <pxPortInitialiseStack>
 8006dde:	0002      	movs	r2, r0
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b006      	add	sp, #24
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	3fffffff 	.word	0x3fffffff
 8006dfc:	0800d794 	.word	0x0800d794
 8006e00:	0800d7b4 	.word	0x0800d7b4
 8006e04:	0800d774 	.word	0x0800d774

08006e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e10:	f000 ffb6 	bl	8007d80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <prvAddNewTaskToReadyList+0xb0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <prvAddNewTaskToReadyList+0xb0>)
 8006e1c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006e1e:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <prvAddNewTaskToReadyList+0xb4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e26:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <prvAddNewTaskToReadyList+0xb4>)
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e2c:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <prvAddNewTaskToReadyList+0xb0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d110      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e34:	f000 fcaa 	bl	800778c <prvInitialiseTaskLists>
 8006e38:	e00d      	b.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <prvAddNewTaskToReadyList+0xb8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e42:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <prvAddNewTaskToReadyList+0xb4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d802      	bhi.n	8006e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e50:	4b1a      	ldr	r3, [pc, #104]	; (8006ebc <prvAddNewTaskToReadyList+0xb4>)
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <prvAddNewTaskToReadyList+0xbc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <prvAddNewTaskToReadyList+0xbc>)
 8006e5e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <prvAddNewTaskToReadyList+0xc0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d903      	bls.n	8006e74 <prvAddNewTaskToReadyList+0x6c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvAddNewTaskToReadyList+0xc0>)
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	0013      	movs	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	189b      	adds	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <prvAddNewTaskToReadyList+0xc4>)
 8006e82:	189a      	adds	r2, r3, r2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	0019      	movs	r1, r3
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	f7ff fa17 	bl	80062be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e90:	f000 ff88 	bl	8007da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <prvAddNewTaskToReadyList+0xb8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <prvAddNewTaskToReadyList+0xb4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d201      	bcs.n	8006eae <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eaa:	f000 ff59 	bl	8007d60 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	200005c4 	.word	0x200005c4
 8006ebc:	200004c4 	.word	0x200004c4
 8006ec0:	200005d0 	.word	0x200005d0
 8006ec4:	200005e0 	.word	0x200005e0
 8006ec8:	200005cc 	.word	0x200005cc
 8006ecc:	200004c8 	.word	0x200004c8

08006ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d010      	beq.n	8006f04 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <vTaskDelay+0x48>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <vTaskDelay+0x1e>
 8006eea:	b672      	cpsid	i
 8006eec:	e7fe      	b.n	8006eec <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006eee:	f000 f9af 	bl	8007250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f000 fe58 	bl	8007bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006efc:	f000 f9b4 	bl	8007268 <xTaskResumeAll>
 8006f00:	0003      	movs	r3, r0
 8006f02:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006f0a:	f000 ff29 	bl	8007d60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b004      	add	sp, #16
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	200005ec 	.word	0x200005ec

08006f1c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f24:	f000 ff2c 	bl	8007d80 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <vTaskSuspend+0x18>
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <vTaskSuspend+0xb8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	e000      	b.n	8006f36 <vTaskSuspend+0x1a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7ff fa16 	bl	800636e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3318      	adds	r3, #24
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7ff fa0d 	bl	800636e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <vTaskSuspend+0xbc>)
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7ff f9ae 	bl	80062be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	22b0      	movs	r2, #176	; 0xb0
 8006f66:	5c9b      	ldrb	r3, [r3, r2]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d103      	bne.n	8006f76 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22b0      	movs	r2, #176	; 0xb0
 8006f72:	2100      	movs	r1, #0
 8006f74:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006f76:	f000 ff15 	bl	8007da4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <vTaskSuspend+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006f82:	f000 fefd 	bl	8007d80 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006f86:	f000 fc81 	bl	800788c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006f8a:	f000 ff0b 	bl	8007da4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006f8e:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <vTaskSuspend+0xb8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d118      	bne.n	8006fca <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <vTaskSuspend+0xc0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <vTaskSuspend+0xc4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <vTaskSuspend+0x90>
 8006fa8:	b672      	cpsid	i
 8006faa:	e7fe      	b.n	8006faa <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8006fac:	f000 fed8 	bl	8007d60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fb0:	e00b      	b.n	8006fca <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <vTaskSuspend+0xbc>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <vTaskSuspend+0xc8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d103      	bne.n	8006fc6 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <vTaskSuspend+0xb8>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
	}
 8006fc4:	e001      	b.n	8006fca <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8006fc6:	f000 fa8f 	bl	80074e8 <vTaskSwitchContext>
	}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b004      	add	sp, #16
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	200004c4 	.word	0x200004c4
 8006fd8:	200005b0 	.word	0x200005b0
 8006fdc:	200005d0 	.word	0x200005d0
 8006fe0:	200005ec 	.word	0x200005ec
 8006fe4:	200005c4 	.word	0x200005c4

08006fe8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <prvTaskIsTaskSuspended+0x1a>
 8006ffe:	b672      	cpsid	i
 8007000:	e7fe      	b.n	8007000 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <prvTaskIsTaskSuspended+0x58>)
 8007008:	429a      	cmp	r2, r3
 800700a:	d101      	bne.n	8007010 <prvTaskIsTaskSuspended+0x28>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <prvTaskIsTaskSuspended+0x2a>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00f      	beq.n	8007036 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800701a:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <prvTaskIsTaskSuspended+0x5c>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d00a      	beq.n	8007036 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <prvTaskIsTaskSuspended+0x44>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <prvTaskIsTaskSuspended+0x46>
 800702c:	2300      	movs	r3, #0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007036:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bd80      	pop	{r7, pc}
 8007040:	200005b0 	.word	0x200005b0
 8007044:	20000584 	.word	0x20000584

08007048 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <vTaskResume+0x16>
 800705a:	b672      	cpsid	i
 800705c:	e7fe      	b.n	800705c <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d034      	beq.n	80070ce <vTaskResume+0x86>
 8007064:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <vTaskResume+0x90>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d02f      	beq.n	80070ce <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800706e:	f000 fe87 	bl	8007d80 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff ffb7 	bl	8006fe8 <prvTaskIsTaskSuspended>
 800707a:	1e03      	subs	r3, r0, #0
 800707c:	d025      	beq.n	80070ca <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff f973 	bl	800636e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4b13      	ldr	r3, [pc, #76]	; (80070dc <vTaskResume+0x94>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <vTaskResume+0x54>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	4b10      	ldr	r3, [pc, #64]	; (80070dc <vTaskResume+0x94>)
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	0013      	movs	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	189b      	adds	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <vTaskResume+0x98>)
 80070aa:	189a      	adds	r2, r3, r2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3304      	adds	r3, #4
 80070b0:	0019      	movs	r1, r3
 80070b2:	0010      	movs	r0, r2
 80070b4:	f7ff f903 	bl	80062be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <vTaskResume+0x90>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d301      	bcc.n	80070ca <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80070c6:	f000 fe4b 	bl	8007d60 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80070ca:	f000 fe6b 	bl	8007da4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b004      	add	sp, #16
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	200004c4 	.word	0x200004c4
 80070dc:	200005cc 	.word	0x200005cc
 80070e0:	200004c8 	.word	0x200004c8

080070e4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <xTaskResumeFromISR+0x1a>
 80070fa:	b672      	cpsid	i
 80070fc:	e7fe      	b.n	80070fc <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070fe:	f000 fe69 	bl	8007dd4 <ulSetInterruptMaskFromISR>
 8007102:	0003      	movs	r3, r0
 8007104:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff ff6d 	bl	8006fe8 <prvTaskIsTaskSuspended>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d032      	beq.n	8007178 <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007112:	4b1e      	ldr	r3, [pc, #120]	; (800718c <xTaskResumeFromISR+0xa8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d126      	bne.n	8007168 <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <xTaskResumeFromISR+0xac>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	d301      	bcc.n	800712c <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	3304      	adds	r3, #4
 8007130:	0018      	movs	r0, r3
 8007132:	f7ff f91c 	bl	800636e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	4b16      	ldr	r3, [pc, #88]	; (8007194 <xTaskResumeFromISR+0xb0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d903      	bls.n	800714a <xTaskResumeFromISR+0x66>
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	4b13      	ldr	r3, [pc, #76]	; (8007194 <xTaskResumeFromISR+0xb0>)
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	0013      	movs	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	189b      	adds	r3, r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4a10      	ldr	r2, [pc, #64]	; (8007198 <xTaskResumeFromISR+0xb4>)
 8007158:	189a      	adds	r2, r3, r2
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3304      	adds	r3, #4
 800715e:	0019      	movs	r1, r3
 8007160:	0010      	movs	r0, r2
 8007162:	f7ff f8ac 	bl	80062be <vListInsertEnd>
 8007166:	e007      	b.n	8007178 <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	3318      	adds	r3, #24
 800716c:	001a      	movs	r2, r3
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <xTaskResumeFromISR+0xb8>)
 8007170:	0011      	movs	r1, r2
 8007172:	0018      	movs	r0, r3
 8007174:	f7ff f8a3 	bl	80062be <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	0018      	movs	r0, r3
 800717c:	f000 fe30 	bl	8007de0 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8007180:	697b      	ldr	r3, [r7, #20]
	}
 8007182:	0018      	movs	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	b006      	add	sp, #24
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	200005ec 	.word	0x200005ec
 8007190:	200004c4 	.word	0x200004c4
 8007194:	200005cc 	.word	0x200005cc
 8007198:	200004c8 	.word	0x200004c8
 800719c:	20000584 	.word	0x20000584

080071a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071ae:	003a      	movs	r2, r7
 80071b0:	1d39      	adds	r1, r7, #4
 80071b2:	2308      	movs	r3, #8
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	0018      	movs	r0, r3
 80071b8:	f7fb f8fe 	bl	80023b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071bc:	683c      	ldr	r4, [r7, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	491b      	ldr	r1, [pc, #108]	; (8007230 <vTaskStartScheduler+0x90>)
 80071c4:	481b      	ldr	r0, [pc, #108]	; (8007234 <vTaskStartScheduler+0x94>)
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	2300      	movs	r3, #0
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	0022      	movs	r2, r4
 80071d2:	f7ff fd4a 	bl	8006c6a <xTaskCreateStatic>
 80071d6:	0002      	movs	r2, r0
 80071d8:	4b17      	ldr	r3, [pc, #92]	; (8007238 <vTaskStartScheduler+0x98>)
 80071da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071dc:	4b16      	ldr	r3, [pc, #88]	; (8007238 <vTaskStartScheduler+0x98>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071e4:	2301      	movs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e001      	b.n	80071ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d113      	bne.n	800721c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80071f4:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071f6:	4b11      	ldr	r3, [pc, #68]	; (800723c <vTaskStartScheduler+0x9c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	334c      	adds	r3, #76	; 0x4c
 80071fc:	001a      	movs	r2, r3
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <vTaskStartScheduler+0xa0>)
 8007200:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007202:	4b10      	ldr	r3, [pc, #64]	; (8007244 <vTaskStartScheduler+0xa4>)
 8007204:	2201      	movs	r2, #1
 8007206:	4252      	negs	r2, r2
 8007208:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <vTaskStartScheduler+0xa8>)
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007210:	4b0e      	ldr	r3, [pc, #56]	; (800724c <vTaskStartScheduler+0xac>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007216:	f000 fd7f 	bl	8007d18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800721a:	e004      	b.n	8007226 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	d101      	bne.n	8007226 <vTaskStartScheduler+0x86>
 8007222:	b672      	cpsid	i
 8007224:	e7fe      	b.n	8007224 <vTaskStartScheduler+0x84>
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b005      	add	sp, #20
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	0800d460 	.word	0x0800d460
 8007234:	0800776d 	.word	0x0800776d
 8007238:	200005e8 	.word	0x200005e8
 800723c:	200004c4 	.word	0x200004c4
 8007240:	2000001c 	.word	0x2000001c
 8007244:	200005e4 	.word	0x200005e4
 8007248:	200005d0 	.word	0x200005d0
 800724c:	200005c8 	.word	0x200005c8

08007250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <vTaskSuspendAll+0x14>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	4b02      	ldr	r3, [pc, #8]	; (8007264 <vTaskSuspendAll+0x14>)
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200005ec 	.word	0x200005ec

08007268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007272:	2300      	movs	r3, #0
 8007274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007276:	4b3a      	ldr	r3, [pc, #232]	; (8007360 <xTaskResumeAll+0xf8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <xTaskResumeAll+0x1a>
 800727e:	b672      	cpsid	i
 8007280:	e7fe      	b.n	8007280 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007282:	f000 fd7d 	bl	8007d80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007286:	4b36      	ldr	r3, [pc, #216]	; (8007360 <xTaskResumeAll+0xf8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1e5a      	subs	r2, r3, #1
 800728c:	4b34      	ldr	r3, [pc, #208]	; (8007360 <xTaskResumeAll+0xf8>)
 800728e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007290:	4b33      	ldr	r3, [pc, #204]	; (8007360 <xTaskResumeAll+0xf8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d15b      	bne.n	8007350 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007298:	4b32      	ldr	r3, [pc, #200]	; (8007364 <xTaskResumeAll+0xfc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d057      	beq.n	8007350 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072a0:	e02f      	b.n	8007302 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072a2:	4b31      	ldr	r3, [pc, #196]	; (8007368 <xTaskResumeAll+0x100>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3318      	adds	r3, #24
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7ff f85d 	bl	800636e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3304      	adds	r3, #4
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff f858 	bl	800636e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	4b2a      	ldr	r3, [pc, #168]	; (800736c <xTaskResumeAll+0x104>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d903      	bls.n	80072d2 <xTaskResumeAll+0x6a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4b27      	ldr	r3, [pc, #156]	; (800736c <xTaskResumeAll+0x104>)
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	0013      	movs	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <xTaskResumeAll+0x108>)
 80072e0:	189a      	adds	r2, r3, r2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3304      	adds	r3, #4
 80072e6:	0019      	movs	r1, r3
 80072e8:	0010      	movs	r0, r2
 80072ea:	f7fe ffe8 	bl	80062be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	4b20      	ldr	r3, [pc, #128]	; (8007374 <xTaskResumeAll+0x10c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d302      	bcc.n	8007302 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80072fc:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <xTaskResumeAll+0x110>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <xTaskResumeAll+0x100>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1cb      	bne.n	80072a2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007310:	f000 fabc 	bl	800788c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <xTaskResumeAll+0x114>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00f      	beq.n	8007340 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007320:	f000 f82e 	bl	8007380 <xTaskIncrementTick>
 8007324:	1e03      	subs	r3, r0, #0
 8007326:	d002      	beq.n	800732e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <xTaskResumeAll+0x110>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3b01      	subs	r3, #1
 8007332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f2      	bne.n	8007320 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800733a:	4b10      	ldr	r3, [pc, #64]	; (800737c <xTaskResumeAll+0x114>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <xTaskResumeAll+0x110>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800734c:	f000 fd08 	bl	8007d60 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007350:	f000 fd28 	bl	8007da4 <vPortExitCritical>

	return xAlreadyYielded;
 8007354:	68bb      	ldr	r3, [r7, #8]
}
 8007356:	0018      	movs	r0, r3
 8007358:	46bd      	mov	sp, r7
 800735a:	b004      	add	sp, #16
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	200005ec 	.word	0x200005ec
 8007364:	200005c4 	.word	0x200005c4
 8007368:	20000584 	.word	0x20000584
 800736c:	200005cc 	.word	0x200005cc
 8007370:	200004c8 	.word	0x200004c8
 8007374:	200004c4 	.word	0x200004c4
 8007378:	200005d8 	.word	0x200005d8
 800737c:	200005d4 	.word	0x200005d4

08007380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738a:	4b4c      	ldr	r3, [pc, #304]	; (80074bc <xTaskIncrementTick+0x13c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d000      	beq.n	8007394 <xTaskIncrementTick+0x14>
 8007392:	e083      	b.n	800749c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007394:	4b4a      	ldr	r3, [pc, #296]	; (80074c0 <xTaskIncrementTick+0x140>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800739c:	4b48      	ldr	r3, [pc, #288]	; (80074c0 <xTaskIncrementTick+0x140>)
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d117      	bne.n	80073d8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80073a8:	4b46      	ldr	r3, [pc, #280]	; (80074c4 <xTaskIncrementTick+0x144>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <xTaskIncrementTick+0x36>
 80073b2:	b672      	cpsid	i
 80073b4:	e7fe      	b.n	80073b4 <xTaskIncrementTick+0x34>
 80073b6:	4b43      	ldr	r3, [pc, #268]	; (80074c4 <xTaskIncrementTick+0x144>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	4b42      	ldr	r3, [pc, #264]	; (80074c8 <xTaskIncrementTick+0x148>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b40      	ldr	r3, [pc, #256]	; (80074c4 <xTaskIncrementTick+0x144>)
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	4b40      	ldr	r3, [pc, #256]	; (80074c8 <xTaskIncrementTick+0x148>)
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	4b40      	ldr	r3, [pc, #256]	; (80074cc <xTaskIncrementTick+0x14c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <xTaskIncrementTick+0x14c>)
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f000 fa5a 	bl	800788c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073d8:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <xTaskIncrementTick+0x150>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d34e      	bcc.n	8007480 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e2:	4b38      	ldr	r3, [pc, #224]	; (80074c4 <xTaskIncrementTick+0x144>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <xTaskIncrementTick+0x70>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <xTaskIncrementTick+0x72>
 80073f0:	2300      	movs	r3, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f6:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <xTaskIncrementTick+0x150>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	4252      	negs	r2, r2
 80073fc:	601a      	str	r2, [r3, #0]
					break;
 80073fe:	e03f      	b.n	8007480 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007400:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <xTaskIncrementTick+0x144>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d203      	bcs.n	8007420 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007418:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <xTaskIncrementTick+0x150>)
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
						break;
 800741e:	e02f      	b.n	8007480 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3304      	adds	r3, #4
 8007424:	0018      	movs	r0, r3
 8007426:	f7fe ffa2 	bl	800636e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3318      	adds	r3, #24
 8007436:	0018      	movs	r0, r3
 8007438:	f7fe ff99 	bl	800636e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <xTaskIncrementTick+0x154>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d903      	bls.n	8007450 <xTaskIncrementTick+0xd0>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <xTaskIncrementTick+0x154>)
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	0013      	movs	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	189b      	adds	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <xTaskIncrementTick+0x158>)
 800745e:	189a      	adds	r2, r3, r2
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3304      	adds	r3, #4
 8007464:	0019      	movs	r1, r3
 8007466:	0010      	movs	r0, r2
 8007468:	f7fe ff29 	bl	80062be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <xTaskIncrementTick+0x15c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	429a      	cmp	r2, r3
 8007478:	d3b3      	bcc.n	80073e2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800747e:	e7b0      	b.n	80073e2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007480:	4b16      	ldr	r3, [pc, #88]	; (80074dc <xTaskIncrementTick+0x15c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4914      	ldr	r1, [pc, #80]	; (80074d8 <xTaskIncrementTick+0x158>)
 8007488:	0013      	movs	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	189b      	adds	r3, r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	585b      	ldr	r3, [r3, r1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d907      	bls.n	80074a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e004      	b.n	80074a6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <xTaskIncrementTick+0x160>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <xTaskIncrementTick+0x160>)
 80074a4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074a6:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <xTaskIncrementTick+0x164>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074b2:	697b      	ldr	r3, [r7, #20]
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b006      	add	sp, #24
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200005ec 	.word	0x200005ec
 80074c0:	200005c8 	.word	0x200005c8
 80074c4:	2000057c 	.word	0x2000057c
 80074c8:	20000580 	.word	0x20000580
 80074cc:	200005dc 	.word	0x200005dc
 80074d0:	200005e4 	.word	0x200005e4
 80074d4:	200005cc 	.word	0x200005cc
 80074d8:	200004c8 	.word	0x200004c8
 80074dc:	200004c4 	.word	0x200004c4
 80074e0:	200005d4 	.word	0x200005d4
 80074e4:	200005d8 	.word	0x200005d8

080074e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074ee:	4b25      	ldr	r3, [pc, #148]	; (8007584 <vTaskSwitchContext+0x9c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <vTaskSwitchContext+0xa0>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074fc:	e03d      	b.n	800757a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <vTaskSwitchContext+0xa0>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007504:	4b21      	ldr	r3, [pc, #132]	; (800758c <vTaskSwitchContext+0xa4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e007      	b.n	800751c <vTaskSwitchContext+0x34>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <vTaskSwitchContext+0x2e>
 8007512:	b672      	cpsid	i
 8007514:	e7fe      	b.n	8007514 <vTaskSwitchContext+0x2c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3b01      	subs	r3, #1
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	491c      	ldr	r1, [pc, #112]	; (8007590 <vTaskSwitchContext+0xa8>)
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	0013      	movs	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	189b      	adds	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	585b      	ldr	r3, [r3, r1]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0ee      	beq.n	800750c <vTaskSwitchContext+0x24>
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	0013      	movs	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	189b      	adds	r3, r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4a15      	ldr	r2, [pc, #84]	; (8007590 <vTaskSwitchContext+0xa8>)
 800753a:	189b      	adds	r3, r3, r2
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	605a      	str	r2, [r3, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	429a      	cmp	r2, r3
 8007552:	d104      	bne.n	800755e <vTaskSwitchContext+0x76>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <vTaskSwitchContext+0xac>)
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <vTaskSwitchContext+0xa4>)
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <vTaskSwitchContext+0xac>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	334c      	adds	r3, #76	; 0x4c
 8007574:	001a      	movs	r2, r3
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <vTaskSwitchContext+0xb0>)
 8007578:	601a      	str	r2, [r3, #0]
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	46bd      	mov	sp, r7
 800757e:	b002      	add	sp, #8
 8007580:	bd80      	pop	{r7, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	200005ec 	.word	0x200005ec
 8007588:	200005d8 	.word	0x200005d8
 800758c:	200005cc 	.word	0x200005cc
 8007590:	200004c8 	.word	0x200004c8
 8007594:	200004c4 	.word	0x200004c4
 8007598:	2000001c 	.word	0x2000001c

0800759c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <vTaskPlaceOnEventList+0x14>
 80075ac:	b672      	cpsid	i
 80075ae:	e7fe      	b.n	80075ae <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075b0:	4b08      	ldr	r3, [pc, #32]	; (80075d4 <vTaskPlaceOnEventList+0x38>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3318      	adds	r3, #24
 80075b6:	001a      	movs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0011      	movs	r1, r2
 80075bc:	0018      	movs	r0, r3
 80075be:	f7fe fea0 	bl	8006302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	0018      	movs	r0, r3
 80075c8:	f000 faf0 	bl	8007bac <prvAddCurrentTaskToDelayedList>
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	200004c4 	.word	0x200004c4

080075d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <xTaskRemoveFromEventList+0x1a>
 80075ee:	b672      	cpsid	i
 80075f0:	e7fe      	b.n	80075f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3318      	adds	r3, #24
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7fe feb9 	bl	800636e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075fc:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <xTaskRemoveFromEventList+0xa0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d11d      	bne.n	8007640 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	3304      	adds	r3, #4
 8007608:	0018      	movs	r0, r3
 800760a:	f7fe feb0 	bl	800636e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	4b1a      	ldr	r3, [pc, #104]	; (800767c <xTaskRemoveFromEventList+0xa4>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d903      	bls.n	8007622 <xTaskRemoveFromEventList+0x4a>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <xTaskRemoveFromEventList+0xa4>)
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	0013      	movs	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	189b      	adds	r3, r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a14      	ldr	r2, [pc, #80]	; (8007680 <xTaskRemoveFromEventList+0xa8>)
 8007630:	189a      	adds	r2, r3, r2
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3304      	adds	r3, #4
 8007636:	0019      	movs	r1, r3
 8007638:	0010      	movs	r0, r2
 800763a:	f7fe fe40 	bl	80062be <vListInsertEnd>
 800763e:	e007      	b.n	8007650 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3318      	adds	r3, #24
 8007644:	001a      	movs	r2, r3
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <xTaskRemoveFromEventList+0xac>)
 8007648:	0011      	movs	r1, r2
 800764a:	0018      	movs	r0, r3
 800764c:	f7fe fe37 	bl	80062be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <xTaskRemoveFromEventList+0xb0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	429a      	cmp	r2, r3
 800765c:	d905      	bls.n	800766a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800765e:	2301      	movs	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <xTaskRemoveFromEventList+0xb4>)
 8007664:	2201      	movs	r2, #1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e001      	b.n	800766e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800766e:	68fb      	ldr	r3, [r7, #12]
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b004      	add	sp, #16
 8007676:	bd80      	pop	{r7, pc}
 8007678:	200005ec 	.word	0x200005ec
 800767c:	200005cc 	.word	0x200005cc
 8007680:	200004c8 	.word	0x200004c8
 8007684:	20000584 	.word	0x20000584
 8007688:	200004c4 	.word	0x200004c4
 800768c:	200005d8 	.word	0x200005d8

08007690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <vTaskInternalSetTimeOutState+0x20>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <vTaskInternalSetTimeOutState+0x24>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	605a      	str	r2, [r3, #4]
}
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b002      	add	sp, #8
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200005dc 	.word	0x200005dc
 80076b4:	200005c8 	.word	0x200005c8

080076b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <xTaskCheckForTimeOut+0x14>
 80076c8:	b672      	cpsid	i
 80076ca:	e7fe      	b.n	80076ca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <xTaskCheckForTimeOut+0x1e>
 80076d2:	b672      	cpsid	i
 80076d4:	e7fe      	b.n	80076d4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80076d6:	f000 fb53 	bl	8007d80 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076da:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <xTaskCheckForTimeOut+0x98>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3301      	adds	r3, #1
 80076f0:	d102      	bne.n	80076f8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e024      	b.n	8007742 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	4b15      	ldr	r3, [pc, #84]	; (8007754 <xTaskCheckForTimeOut+0x9c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d007      	beq.n	8007714 <xTaskCheckForTimeOut+0x5c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	429a      	cmp	r2, r3
 800770c:	d302      	bcc.n	8007714 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e016      	b.n	8007742 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	429a      	cmp	r2, r3
 800771c:	d20c      	bcs.n	8007738 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0018      	movs	r0, r3
 800772e:	f7ff ffaf 	bl	8007690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e004      	b.n	8007742 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800773e:	2301      	movs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007742:	f000 fb2f 	bl	8007da4 <vPortExitCritical>

	return xReturn;
 8007746:	697b      	ldr	r3, [r7, #20]
}
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	b006      	add	sp, #24
 800774e:	bd80      	pop	{r7, pc}
 8007750:	200005c8 	.word	0x200005c8
 8007754:	200005dc 	.word	0x200005dc

08007758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <vTaskMissedYield+0x10>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200005d8 	.word	0x200005d8

0800776c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007774:	f000 f84e 	bl	8007814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <prvIdleTask+0x1c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d9f9      	bls.n	8007774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007780:	f000 faee 	bl	8007d60 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007784:	e7f6      	b.n	8007774 <prvIdleTask+0x8>
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	200004c8 	.word	0x200004c8

0800778c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007792:	2300      	movs	r3, #0
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	e00c      	b.n	80077b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	0013      	movs	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <prvInitialiseTaskLists+0x68>)
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	f7fe fd60 	bl	800626c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3301      	adds	r3, #1
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d9ef      	bls.n	8007798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <prvInitialiseTaskLists+0x6c>)
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7fe fd56 	bl	800626c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <prvInitialiseTaskLists+0x70>)
 80077c2:	0018      	movs	r0, r3
 80077c4:	f7fe fd52 	bl	800626c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <prvInitialiseTaskLists+0x74>)
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7fe fd4e 	bl	800626c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <prvInitialiseTaskLists+0x78>)
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7fe fd4a 	bl	800626c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <prvInitialiseTaskLists+0x7c>)
 80077da:	0018      	movs	r0, r3
 80077dc:	f7fe fd46 	bl	800626c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <prvInitialiseTaskLists+0x80>)
 80077e2:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <prvInitialiseTaskLists+0x6c>)
 80077e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <prvInitialiseTaskLists+0x84>)
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <prvInitialiseTaskLists+0x70>)
 80077ea:	601a      	str	r2, [r3, #0]
}
 80077ec:	46c0      	nop			; (mov r8, r8)
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	200004c8 	.word	0x200004c8
 80077f8:	20000554 	.word	0x20000554
 80077fc:	20000568 	.word	0x20000568
 8007800:	20000584 	.word	0x20000584
 8007804:	20000598 	.word	0x20000598
 8007808:	200005b0 	.word	0x200005b0
 800780c:	2000057c 	.word	0x2000057c
 8007810:	20000580 	.word	0x20000580

08007814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800781a:	e01a      	b.n	8007852 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800781c:	f000 fab0 	bl	8007d80 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <prvCheckTasksWaitingTermination+0x50>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	0018      	movs	r0, r3
 800782e:	f7fe fd9e 	bl	800636e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <prvCheckTasksWaitingTermination+0x54>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <prvCheckTasksWaitingTermination+0x54>)
 800783a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <prvCheckTasksWaitingTermination+0x58>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1e5a      	subs	r2, r3, #1
 8007842:	4b0a      	ldr	r3, [pc, #40]	; (800786c <prvCheckTasksWaitingTermination+0x58>)
 8007844:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007846:	f000 faad 	bl	8007da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	0018      	movs	r0, r3
 800784e:	f000 f80f 	bl	8007870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvCheckTasksWaitingTermination+0x58>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e0      	bne.n	800781c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	46bd      	mov	sp, r7
 800785e:	b002      	add	sp, #8
 8007860:	bd80      	pop	{r7, pc}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	20000598 	.word	0x20000598
 8007868:	200005c4 	.word	0x200005c4
 800786c:	200005ac 	.word	0x200005ac

08007870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	334c      	adds	r3, #76	; 0x4c
 800787c:	0018      	movs	r0, r3
 800787e:	f002 fe65 	bl	800a54c <_reclaim_reent>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	46bd      	mov	sp, r7
 8007886:	b002      	add	sp, #8
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <prvResetNextTaskUnblockTime+0x40>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <prvResetNextTaskUnblockTime+0x14>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <prvResetNextTaskUnblockTime+0x16>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a6:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvResetNextTaskUnblockTime+0x44>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	4252      	negs	r2, r2
 80078ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078ae:	e008      	b.n	80078c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <prvResetNextTaskUnblockTime+0x40>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <prvResetNextTaskUnblockTime+0x44>)
 80078c0:	601a      	str	r2, [r3, #0]
}
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b002      	add	sp, #8
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	2000057c 	.word	0x2000057c
 80078d0:	200005e4 	.word	0x200005e4

080078d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <xTaskGetSchedulerState+0x30>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078e2:	2301      	movs	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e008      	b.n	80078fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e8:	4b07      	ldr	r3, [pc, #28]	; (8007908 <xTaskGetSchedulerState+0x34>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078f0:	2302      	movs	r3, #2
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e001      	b.n	80078fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078f6:	2300      	movs	r3, #0
 80078f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078fa:	687b      	ldr	r3, [r7, #4]
	}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b002      	add	sp, #8
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200005d0 	.word	0x200005d0
 8007908:	200005ec 	.word	0x200005ec

0800790c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d056      	beq.n	80079d0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	4b2d      	ldr	r3, [pc, #180]	; (80079dc <xTaskPriorityInherit+0xd0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	429a      	cmp	r2, r3
 800792e:	d246      	bcs.n	80079be <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	db06      	blt.n	8007946 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007938:	4b28      	ldr	r3, [pc, #160]	; (80079dc <xTaskPriorityInherit+0xd0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	2207      	movs	r2, #7
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6959      	ldr	r1, [r3, #20]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	0013      	movs	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	189b      	adds	r3, r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <xTaskPriorityInherit+0xd4>)
 8007958:	189b      	adds	r3, r3, r2
 800795a:	4299      	cmp	r1, r3
 800795c:	d101      	bne.n	8007962 <xTaskPriorityInherit+0x56>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xTaskPriorityInherit+0x58>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d022      	beq.n	80079ae <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3304      	adds	r3, #4
 800796c:	0018      	movs	r0, r3
 800796e:	f7fe fcfe 	bl	800636e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007972:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <xTaskPriorityInherit+0xd0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	4b18      	ldr	r3, [pc, #96]	; (80079e4 <xTaskPriorityInherit+0xd8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d903      	bls.n	8007990 <xTaskPriorityInherit+0x84>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <xTaskPriorityInherit+0xd8>)
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	0013      	movs	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	189b      	adds	r3, r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <xTaskPriorityInherit+0xd4>)
 800799e:	189a      	adds	r2, r3, r2
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	3304      	adds	r3, #4
 80079a4:	0019      	movs	r1, r3
 80079a6:	0010      	movs	r0, r2
 80079a8:	f7fe fc89 	bl	80062be <vListInsertEnd>
 80079ac:	e004      	b.n	80079b8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079ae:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <xTaskPriorityInherit+0xd0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e008      	b.n	80079d0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <xTaskPriorityInherit+0xd0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d201      	bcs.n	80079d0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079d0:	68fb      	ldr	r3, [r7, #12]
	}
 80079d2:	0018      	movs	r0, r3
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b004      	add	sp, #16
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	200004c4 	.word	0x200004c4
 80079e0:	200004c8 	.word	0x200004c8
 80079e4:	200005cc 	.word	0x200005cc

080079e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d044      	beq.n	8007a88 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079fe:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <xTaskPriorityDisinherit+0xac>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <xTaskPriorityDisinherit+0x24>
 8007a08:	b672      	cpsid	i
 8007a0a:	e7fe      	b.n	8007a0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <xTaskPriorityDisinherit+0x30>
 8007a14:	b672      	cpsid	i
 8007a16:	e7fe      	b.n	8007a16 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1c:	1e5a      	subs	r2, r3, #1
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d02c      	beq.n	8007a88 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d128      	bne.n	8007a88 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7fe fc97 	bl	800636e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	2207      	movs	r2, #7
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xTaskPriorityDisinherit+0xb0>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d903      	bls.n	8007a68 <xTaskPriorityDisinherit+0x80>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <xTaskPriorityDisinherit+0xb0>)
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6c:	0013      	movs	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	189b      	adds	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <xTaskPriorityDisinherit+0xb4>)
 8007a76:	189a      	adds	r2, r3, r2
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	0010      	movs	r0, r2
 8007a80:	f7fe fc1d 	bl	80062be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a88:	68fb      	ldr	r3, [r7, #12]
	}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	200004c4 	.word	0x200004c4
 8007a98:	200005cc 	.word	0x200005cc
 8007a9c:	200004c8 	.word	0x200004c8

08007aa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d05d      	beq.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8007ac0:	b672      	cpsid	i
 8007ac2:	e7fe      	b.n	8007ac2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d902      	bls.n	8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e002      	b.n	8007ada <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d047      	beq.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d142      	bne.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007aee:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d101      	bne.n	8007afc <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8007af8:	b672      	cpsid	i
 8007afa:	e7fe      	b.n	8007afa <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db04      	blt.n	8007b1a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2207      	movs	r2, #7
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	6959      	ldr	r1, [r3, #20]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	0013      	movs	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	189b      	adds	r3, r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b2a:	189b      	adds	r3, r3, r2
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d101      	bne.n	8007b34 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d01c      	beq.n	8007b74 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f7fe fc15 	bl	800636e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	0013      	movs	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007b66:	189a      	adds	r2, r3, r2
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	0010      	movs	r0, r2
 8007b70:	f7fe fba5 	bl	80062be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b74:	46c0      	nop			; (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	200004c4 	.word	0x200004c4
 8007b80:	200004c8 	.word	0x200004c8
 8007b84:	200005cc 	.word	0x200005cc

08007b88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <pvTaskIncrementMutexHeldCount+0x20>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007b9e:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <pvTaskIncrementMutexHeldCount+0x20>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
	}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200004c4 	.word	0x200004c4

08007bac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bb6:	4b21      	ldr	r3, [pc, #132]	; (8007c3c <prvAddCurrentTaskToDelayedList+0x90>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bbc:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7fe fbd3 	bl	800636e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	d10b      	bne.n	8007be6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f7fe fb6d 	bl	80062be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007be4:	e026      	b.n	8007c34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	18d3      	adds	r3, r2, r3
 8007bec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d209      	bcs.n	8007c12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3304      	adds	r3, #4
 8007c08:	0019      	movs	r1, r3
 8007c0a:	0010      	movs	r0, r2
 8007c0c:	f7fe fb79 	bl	8006302 <vListInsert>
}
 8007c10:	e010      	b.n	8007c34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c12:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	0010      	movs	r0, r2
 8007c20:	f7fe fb6f 	bl	8006302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d202      	bcs.n	8007c34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c2e:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b004      	add	sp, #16
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200005c8 	.word	0x200005c8
 8007c40:	200004c4 	.word	0x200004c4
 8007c44:	200005b0 	.word	0x200005b0
 8007c48:	20000580 	.word	0x20000580
 8007c4c:	2000057c 	.word	0x2000057c
 8007c50:	200005e4 	.word	0x200005e4

08007c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3b04      	subs	r3, #4
 8007c64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	0452      	lsls	r2, r2, #17
 8007c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3b04      	subs	r3, #4
 8007c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c80:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <pxPortInitialiseStack+0x50>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3b14      	subs	r3, #20
 8007c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b20      	subs	r3, #32
 8007c96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c98:	68fb      	ldr	r3, [r7, #12]
}
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b004      	add	sp, #16
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	08007ca9 	.word	0x08007ca9

08007ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <prvTaskExitError+0x28>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	d001      	beq.n	8007cbe <prvTaskExitError+0x16>
 8007cba:	b672      	cpsid	i
 8007cbc:	e7fe      	b.n	8007cbc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007cbe:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007cc0:	46c0      	nop			; (mov r8, r8)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0fc      	beq.n	8007cc2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b002      	add	sp, #8
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000010 	.word	0x20000010

08007cd4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007cd8:	46c0      	nop			; (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007ce0:	4a0b      	ldr	r2, [pc, #44]	; (8007d10 <pxCurrentTCBConst2>)
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	3020      	adds	r0, #32
 8007ce8:	f380 8809 	msr	PSP, r0
 8007cec:	2002      	movs	r0, #2
 8007cee:	f380 8814 	msr	CONTROL, r0
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007cf8:	46ae      	mov	lr, r5
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	bc04      	pop	{r2}
 8007cfe:	b662      	cpsie	i
 8007d00:	4718      	bx	r3
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	46c0      	nop			; (mov r8, r8)
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	46c0      	nop			; (mov r8, r8)
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	46c0      	nop			; (mov r8, r8)

08007d10 <pxCurrentTCBConst2>:
 8007d10:	200004c4 	.word	0x200004c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46c0      	nop			; (mov r8, r8)

08007d18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <xPortStartScheduler+0x40>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <xPortStartScheduler+0x40>)
 8007d22:	21ff      	movs	r1, #255	; 0xff
 8007d24:	0409      	lsls	r1, r1, #16
 8007d26:	430a      	orrs	r2, r1
 8007d28:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <xPortStartScheduler+0x40>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <xPortStartScheduler+0x40>)
 8007d30:	21ff      	movs	r1, #255	; 0xff
 8007d32:	0609      	lsls	r1, r1, #24
 8007d34:	430a      	orrs	r2, r1
 8007d36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007d38:	f000 f898 	bl	8007e6c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <xPortStartScheduler+0x44>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007d42:	f7ff ffcd 	bl	8007ce0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d46:	f7ff fbcf 	bl	80074e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d4a:	f7ff ffad 	bl	8007ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	0018      	movs	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	e000ed20 	.word	0xe000ed20
 8007d5c:	20000010 	.word	0x20000010

08007d60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <vPortYield+0x1c>)
 8007d66:	2280      	movs	r2, #128	; 0x80
 8007d68:	0552      	lsls	r2, r2, #21
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007d6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d70:	f3bf 8f6f 	isb	sy
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007d84:	b672      	cpsid	i
    uxCriticalNesting++;
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <vPortEnterCritical+0x20>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <vPortEnterCritical+0x20>)
 8007d8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007d90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d94:	f3bf 8f6f 	isb	sy
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	20000010 	.word	0x20000010

08007da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <vPortExitCritical+0x2c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <vPortExitCritical+0x10>
 8007db0:	b672      	cpsid	i
 8007db2:	e7fe      	b.n	8007db2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <vPortExitCritical+0x2c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	1e5a      	subs	r2, r3, #1
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <vPortExitCritical+0x2c>)
 8007dbc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <vPortExitCritical+0x2c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d100      	bne.n	8007dc8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007dc6:	b662      	cpsie	i
    }
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	20000010 	.word	0x20000010

08007dd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007dd4:	f3ef 8010 	mrs	r0, PRIMASK
 8007dd8:	b672      	cpsid	i
 8007dda:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007ddc:	46c0      	nop			; (mov r8, r8)
 8007dde:	0018      	movs	r0, r3

08007de0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007de0:	f380 8810 	msr	PRIMASK, r0
 8007de4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007de6:	46c0      	nop			; (mov r8, r8)
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <pxCurrentTCBConst>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	3820      	subs	r0, #32
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007dfe:	4644      	mov	r4, r8
 8007e00:	464d      	mov	r5, r9
 8007e02:	4656      	mov	r6, sl
 8007e04:	465f      	mov	r7, fp
 8007e06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007e08:	b508      	push	{r3, lr}
 8007e0a:	b672      	cpsid	i
 8007e0c:	f7ff fb6c 	bl	80074e8 <vTaskSwitchContext>
 8007e10:	b662      	cpsie	i
 8007e12:	bc0c      	pop	{r2, r3}
 8007e14:	6811      	ldr	r1, [r2, #0]
 8007e16:	6808      	ldr	r0, [r1, #0]
 8007e18:	3010      	adds	r0, #16
 8007e1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007e1c:	46a0      	mov	r8, r4
 8007e1e:	46a9      	mov	r9, r5
 8007e20:	46b2      	mov	sl, r6
 8007e22:	46bb      	mov	fp, r7
 8007e24:	f380 8809 	msr	PSP, r0
 8007e28:	3820      	subs	r0, #32
 8007e2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007e2c:	4718      	bx	r3
 8007e2e:	46c0      	nop			; (mov r8, r8)

08007e30 <pxCurrentTCBConst>:
 8007e30:	200004c4 	.word	0x200004c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007e34:	46c0      	nop			; (mov r8, r8)
 8007e36:	46c0      	nop			; (mov r8, r8)

08007e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e3e:	f7ff ffc9 	bl	8007dd4 <ulSetInterruptMaskFromISR>
 8007e42:	0003      	movs	r3, r0
 8007e44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e46:	f7ff fa9b 	bl	8007380 <xTaskIncrementTick>
 8007e4a:	1e03      	subs	r3, r0, #0
 8007e4c:	d003      	beq.n	8007e56 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007e4e:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <xPortSysTickHandler+0x30>)
 8007e50:	2280      	movs	r2, #128	; 0x80
 8007e52:	0552      	lsls	r2, r2, #21
 8007e54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f7ff ffc1 	bl	8007de0 <vClearInterruptMaskFromISR>
}
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	46bd      	mov	sp, r7
 8007e62:	b002      	add	sp, #8
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <prvSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <prvSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <prvSetupTimerInterrupt+0x3c>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	23fa      	movs	r3, #250	; 0xfa
 8007e82:	0099      	lsls	r1, r3, #2
 8007e84:	0010      	movs	r0, r2
 8007e86:	f7f8 f951 	bl	800012c <__udivsi3>
 8007e8a:	0003      	movs	r3, r0
 8007e8c:	001a      	movs	r2, r3
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <prvSetupTimerInterrupt+0x40>)
 8007e90:	3a01      	subs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <prvSetupTimerInterrupt+0x34>)
 8007e96:	2207      	movs	r2, #7
 8007e98:	601a      	str	r2, [r3, #0]
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000004 	.word	0x20000004
 8007eac:	e000e014 	.word	0xe000e014

08007eb0 <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	0005      	movs	r5, r0
 8007eb8:	000c      	movs	r4, r1
 8007eba:	0010      	movs	r0, r2
 8007ebc:	0019      	movs	r1, r3
 8007ebe:	1dbb      	adds	r3, r7, #6
 8007ec0:	1c2a      	adds	r2, r5, #0
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	1c22      	adds	r2, r4, #0
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	1cbb      	adds	r3, r7, #2
 8007ecc:	1c02      	adds	r2, r0, #0
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	003b      	movs	r3, r7
 8007ed2:	1c0a      	adds	r2, r1, #0
 8007ed4:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8007ed6:	1cbb      	adds	r3, r7, #2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 8007ee0:	1cbb      	adds	r3, r7, #2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8007ef4:	e06d      	b.n	8007fd2 <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8007ef6:	1dbb      	adds	r3, r7, #6
 8007ef8:	881a      	ldrh	r2, [r3, #0]
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	e01c      	b.n	8007f3c <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	b298      	uxth	r0, r3
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	18d3      	adds	r3, r2, r3
 8007f10:	b299      	uxth	r1, r3
 8007f12:	003b      	movs	r3, r7
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	001a      	movs	r2, r3
 8007f18:	f000 fc10 	bl	800873c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	b298      	uxth	r0, r3
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	1d3a      	adds	r2, r7, #4
 8007f26:	8812      	ldrh	r2, [r2, #0]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	b299      	uxth	r1, r3
 8007f2c:	003b      	movs	r3, r7
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	001a      	movs	r2, r3
 8007f32:	f000 fc03 	bl	800873c <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	1dbb      	adds	r3, r7, #6
 8007f3e:	881a      	ldrh	r2, [r3, #0]
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	18d3      	adds	r3, r2, r3
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	dddb      	ble.n	8007f02 <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8007f4a:	1dbb      	adds	r3, r7, #6
 8007f4c:	881a      	ldrh	r2, [r3, #0]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e01c      	b.n	8007f90 <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	b298      	uxth	r0, r3
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	1d3b      	adds	r3, r7, #4
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	18d3      	adds	r3, r2, r3
 8007f64:	b299      	uxth	r1, r3
 8007f66:	003b      	movs	r3, r7
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	f000 fbe6 	bl	800873c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	b298      	uxth	r0, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	1d3a      	adds	r2, r7, #4
 8007f7a:	8812      	ldrh	r2, [r2, #0]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	003b      	movs	r3, r7
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	001a      	movs	r2, r3
 8007f86:	f000 fbd9 	bl	800873c <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	1dbb      	adds	r3, r7, #6
 8007f92:	881a      	ldrh	r2, [r3, #0]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	dddb      	ble.n	8007f56 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	3302      	adds	r3, #2
 8007fb0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	005a      	lsls	r2, r3, #1
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	18d3      	adds	r3, r2, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dd09      	ble.n	8007fd2 <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	18d3      	adds	r3, r2, r3
 8007fca:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	3302      	adds	r3, #2
 8007fd0:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	da8d      	bge.n	8007ef6 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b00a      	add	sp, #40	; 0x28
 8007fe0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fe4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007fe4:	b5b0      	push	{r4, r5, r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af02      	add	r7, sp, #8
 8007fea:	0005      	movs	r5, r0
 8007fec:	000c      	movs	r4, r1
 8007fee:	0010      	movs	r0, r2
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	1dfb      	adds	r3, r7, #7
 8007ff4:	1c2a      	adds	r2, r5, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	1d3b      	adds	r3, r7, #4
 8007ffa:	1c22      	adds	r2, r4, #0
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	1cbb      	adds	r3, r7, #2
 8008000:	1c02      	adds	r2, r0, #0
 8008002:	801a      	strh	r2, [r3, #0]
 8008004:	003b      	movs	r3, r7
 8008006:	1c0a      	adds	r2, r1, #0
 8008008:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800800a:	2117      	movs	r1, #23
 800800c:	187b      	adds	r3, r7, r1
 800800e:	1dfa      	adds	r2, r7, #7
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8008014:	187b      	adds	r3, r7, r1
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b1f      	cmp	r3, #31
 800801a:	d803      	bhi.n	8008024 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 800801c:	1dfb      	adds	r3, r7, #7
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e005      	b.n	8008030 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8008024:	2217      	movs	r2, #23
 8008026:	18bb      	adds	r3, r7, r2
 8008028:	18ba      	adds	r2, r7, r2
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	3a20      	subs	r2, #32
 800802e:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008030:	2314      	movs	r3, #20
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e016      	b.n	8008068 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 800803a:	2317      	movs	r3, #23
 800803c:	18fb      	adds	r3, r7, r3
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	2514      	movs	r5, #20
 8008042:	197b      	adds	r3, r7, r5
 8008044:	7818      	ldrb	r0, [r3, #0]
 8008046:	197b      	adds	r3, r7, r5
 8008048:	7819      	ldrb	r1, [r3, #0]
 800804a:	4c69      	ldr	r4, [pc, #420]	; (80081f0 <ILI9341_Draw_Char+0x20c>)
 800804c:	0013      	movs	r3, r2
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	189b      	adds	r3, r3, r2
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	18e3      	adds	r3, r4, r3
 8008056:	5c1a      	ldrb	r2, [r3, r0]
 8008058:	230c      	movs	r3, #12
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800805e:	197b      	adds	r3, r7, r5
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	197b      	adds	r3, r7, r5
 8008064:	3201      	adds	r2, #1
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	2314      	movs	r3, #20
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b05      	cmp	r3, #5
 8008070:	d9e3      	bls.n	800803a <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8008072:	2315      	movs	r3, #21
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	e0ae      	b.n	80081da <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800807c:	2316      	movs	r3, #22
 800807e:	18fb      	adds	r3, r7, r3
 8008080:	2200      	movs	r2, #0
 8008082:	701a      	strb	r2, [r3, #0]
 8008084:	e09d      	b.n	80081c2 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8008086:	2315      	movs	r3, #21
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	220c      	movs	r2, #12
 800808e:	18ba      	adds	r2, r7, r2
 8008090:	5cd3      	ldrb	r3, [r2, r3]
 8008092:	001a      	movs	r2, r3
 8008094:	2316      	movs	r3, #22
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	411a      	asrs	r2, r3
 800809c:	0013      	movs	r3, r2
 800809e:	2201      	movs	r2, #1
 80080a0:	4013      	ands	r3, r2
 80080a2:	d043      	beq.n	800812c <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 80080a4:	2328      	movs	r3, #40	; 0x28
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d115      	bne.n	80080da <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80080ae:	2315      	movs	r3, #21
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	18d3      	adds	r3, r2, r3
 80080bc:	b298      	uxth	r0, r3
 80080be:	2316      	movs	r3, #22
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	1cbb      	adds	r3, r7, #2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	b299      	uxth	r1, r3
 80080ce:	003b      	movs	r3, r7
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	001a      	movs	r2, r3
 80080d4:	f000 fb32 	bl	800873c <ILI9341_Draw_Pixel>
 80080d8:	e06d      	b.n	80081b6 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80080da:	2315      	movs	r3, #21
 80080dc:	18fb      	adds	r3, r7, r3
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2128      	movs	r1, #40	; 0x28
 80080e4:	187a      	adds	r2, r7, r1
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	4353      	muls	r3, r2
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	18d3      	adds	r3, r2, r3
 80080f2:	b298      	uxth	r0, r3
 80080f4:	2316      	movs	r3, #22
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	000c      	movs	r4, r1
 80080fe:	187a      	adds	r2, r7, r1
 8008100:	8812      	ldrh	r2, [r2, #0]
 8008102:	4353      	muls	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	1cbb      	adds	r3, r7, #2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	18d3      	adds	r3, r2, r3
 800810c:	b299      	uxth	r1, r3
 800810e:	0022      	movs	r2, r4
 8008110:	193b      	adds	r3, r7, r4
 8008112:	881c      	ldrh	r4, [r3, #0]
 8008114:	0013      	movs	r3, r2
 8008116:	18fb      	adds	r3, r7, r3
 8008118:	881a      	ldrh	r2, [r3, #0]
 800811a:	2301      	movs	r3, #1
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	003b      	movs	r3, r7
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	0023      	movs	r3, r4
 8008126:	f000 fc7d 	bl	8008a24 <ILI9341_Draw_Rectangle>
 800812a:	e044      	b.n	80081b6 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 800812c:	2328      	movs	r3, #40	; 0x28
 800812e:	18fb      	adds	r3, r7, r3
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d116      	bne.n	8008164 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008136:	2315      	movs	r3, #21
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b29a      	uxth	r2, r3
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	18d3      	adds	r3, r2, r3
 8008144:	b298      	uxth	r0, r3
 8008146:	2316      	movs	r3, #22
 8008148:	18fb      	adds	r3, r7, r3
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b29a      	uxth	r2, r3
 800814e:	1cbb      	adds	r3, r7, #2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	18d3      	adds	r3, r2, r3
 8008154:	b299      	uxth	r1, r3
 8008156:	232c      	movs	r3, #44	; 0x2c
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	001a      	movs	r2, r3
 800815e:	f000 faed 	bl	800873c <ILI9341_Draw_Pixel>
 8008162:	e028      	b.n	80081b6 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008164:	2315      	movs	r3, #21
 8008166:	18fb      	adds	r3, r7, r3
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	2128      	movs	r1, #40	; 0x28
 800816e:	187a      	adds	r2, r7, r1
 8008170:	8812      	ldrh	r2, [r2, #0]
 8008172:	4353      	muls	r3, r2
 8008174:	b29a      	uxth	r2, r3
 8008176:	1d3b      	adds	r3, r7, #4
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	18d3      	adds	r3, r2, r3
 800817c:	b298      	uxth	r0, r3
 800817e:	2316      	movs	r3, #22
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	000c      	movs	r4, r1
 8008188:	187a      	adds	r2, r7, r1
 800818a:	8812      	ldrh	r2, [r2, #0]
 800818c:	4353      	muls	r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	1cbb      	adds	r3, r7, #2
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	18d3      	adds	r3, r2, r3
 8008196:	b299      	uxth	r1, r3
 8008198:	0022      	movs	r2, r4
 800819a:	193b      	adds	r3, r7, r4
 800819c:	881c      	ldrh	r4, [r3, #0]
 800819e:	0013      	movs	r3, r2
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	881a      	ldrh	r2, [r3, #0]
 80081a4:	2301      	movs	r3, #1
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	232c      	movs	r3, #44	; 0x2c
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	0023      	movs	r3, r4
 80081b2:	f000 fc37 	bl	8008a24 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80081b6:	2116      	movs	r1, #22
 80081b8:	187b      	adds	r3, r7, r1
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	187b      	adds	r3, r7, r1
 80081be:	3201      	adds	r2, #1
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	2316      	movs	r3, #22
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d800      	bhi.n	80081ce <ILI9341_Draw_Char+0x1ea>
 80081cc:	e75b      	b.n	8008086 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 80081ce:	2115      	movs	r1, #21
 80081d0:	187b      	adds	r3, r7, r1
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	3201      	adds	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	2315      	movs	r3, #21
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d800      	bhi.n	80081e6 <ILI9341_Draw_Char+0x202>
 80081e4:	e74a      	b.n	800807c <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b006      	add	sp, #24
 80081ec:	bdb0      	pop	{r4, r5, r7, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	0800d534 	.word	0x0800d534

080081f4 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	000c      	movs	r4, r1
 80081fe:	0010      	movs	r0, r2
 8008200:	0019      	movs	r1, r3
 8008202:	250a      	movs	r5, #10
 8008204:	197b      	adds	r3, r7, r5
 8008206:	1c22      	adds	r2, r4, #0
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	2608      	movs	r6, #8
 800820c:	19bb      	adds	r3, r7, r6
 800820e:	1c02      	adds	r2, r0, #0
 8008210:	801a      	strh	r2, [r3, #0]
 8008212:	1dbb      	adds	r3, r7, #6
 8008214:	1c0a      	adds	r2, r1, #0
 8008216:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8008218:	197b      	adds	r3, r7, r5
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	b298      	uxth	r0, r3
 8008220:	2320      	movs	r3, #32
 8008222:	2208      	movs	r2, #8
 8008224:	4694      	mov	ip, r2
 8008226:	44bc      	add	ip, r7
 8008228:	4463      	add	r3, ip
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	b29a      	uxth	r2, r3
 8008230:	2124      	movs	r1, #36	; 0x24
 8008232:	2308      	movs	r3, #8
 8008234:	18fc      	adds	r4, r7, r3
 8008236:	1863      	adds	r3, r4, r1
 8008238:	881c      	ldrh	r4, [r3, #0]
 800823a:	19bb      	adds	r3, r7, r6
 800823c:	8819      	ldrh	r1, [r3, #0]
 800823e:	0023      	movs	r3, r4
 8008240:	f000 f974 	bl	800852c <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8008244:	197b      	adds	r3, r7, r5
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	3b02      	subs	r3, #2
 800824a:	b298      	uxth	r0, r3
 800824c:	2320      	movs	r3, #32
 800824e:	2208      	movs	r2, #8
 8008250:	4694      	mov	ip, r2
 8008252:	44bc      	add	ip, r7
 8008254:	4463      	add	r3, ip
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	b29a      	uxth	r2, r3
 800825c:	2124      	movs	r1, #36	; 0x24
 800825e:	2308      	movs	r3, #8
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	185b      	adds	r3, r3, r1
 8008264:	881c      	ldrh	r4, [r3, #0]
 8008266:	19bb      	adds	r3, r7, r6
 8008268:	8819      	ldrh	r1, [r3, #0]
 800826a:	0023      	movs	r3, r4
 800826c:	f000 f95e 	bl	800852c <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8008270:	e029      	b.n	80082c6 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	60fa      	str	r2, [r7, #12]
 8008278:	7818      	ldrb	r0, [r3, #0]
 800827a:	1dbb      	adds	r3, r7, #6
 800827c:	881c      	ldrh	r4, [r3, #0]
 800827e:	2308      	movs	r3, #8
 8008280:	18fb      	adds	r3, r7, r3
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	250a      	movs	r5, #10
 8008286:	197b      	adds	r3, r7, r5
 8008288:	8819      	ldrh	r1, [r3, #0]
 800828a:	2324      	movs	r3, #36	; 0x24
 800828c:	2608      	movs	r6, #8
 800828e:	46b4      	mov	ip, r6
 8008290:	44bc      	add	ip, r7
 8008292:	4463      	add	r3, ip
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	2620      	movs	r6, #32
 800829a:	2308      	movs	r3, #8
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	199b      	adds	r3, r3, r6
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	0023      	movs	r3, r4
 80082a6:	f7ff fe9d 	bl	8007fe4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80082aa:	2308      	movs	r3, #8
 80082ac:	18fb      	adds	r3, r7, r3
 80082ae:	199b      	adds	r3, r3, r6
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	1c1a      	adds	r2, r3, #0
 80082b4:	1892      	adds	r2, r2, r2
 80082b6:	18d3      	adds	r3, r2, r3
 80082b8:	18db      	adds	r3, r3, r3
 80082ba:	b299      	uxth	r1, r3
 80082bc:	197b      	adds	r3, r7, r5
 80082be:	197a      	adds	r2, r7, r5
 80082c0:	8812      	ldrh	r2, [r2, #0]
 80082c2:	188a      	adds	r2, r1, r2
 80082c4:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1d1      	bne.n	8008272 <ILI9341_Draw_Text+0x7e>
    }


}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b005      	add	sp, #20
 80082d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082d6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80082da:	f000 fcc1 	bl	8008c60 <_LCD_Enable>
	ILI9341_SPI_Init();
 80082de:	f000 f909 	bl	80084f4 <ILI9341_SPI_Init>
	_LCD_Reset();
 80082e2:	f000 fccb 	bl	8008c7c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80082e6:	2001      	movs	r0, #1
 80082e8:	f000 fdc8 	bl	8008e7c <_LCD_SendCommand>
	HAL_Delay(2000);
 80082ec:	23fa      	movs	r3, #250	; 0xfa
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7fa fe39 	bl	8002f68 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 80082f6:	20cb      	movs	r0, #203	; 0xcb
 80082f8:	f000 fdc0 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 80082fc:	2039      	movs	r0, #57	; 0x39
 80082fe:	f000 fdf3 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8008302:	202c      	movs	r0, #44	; 0x2c
 8008304:	f000 fdf0 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008308:	2000      	movs	r0, #0
 800830a:	f000 fded 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x34);
 800830e:	2034      	movs	r0, #52	; 0x34
 8008310:	f000 fdea 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x02);
 8008314:	2002      	movs	r0, #2
 8008316:	f000 fde7 	bl	8008ee8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800831a:	20cf      	movs	r0, #207	; 0xcf
 800831c:	f000 fdae 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008320:	2000      	movs	r0, #0
 8008322:	f000 fde1 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8008326:	20c1      	movs	r0, #193	; 0xc1
 8008328:	f000 fdde 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x30);
 800832c:	2030      	movs	r0, #48	; 0x30
 800832e:	f000 fddb 	bl	8008ee8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8008332:	20e8      	movs	r0, #232	; 0xe8
 8008334:	f000 fda2 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8008338:	2085      	movs	r0, #133	; 0x85
 800833a:	f000 fdd5 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800833e:	2000      	movs	r0, #0
 8008340:	f000 fdd2 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x78);
 8008344:	2078      	movs	r0, #120	; 0x78
 8008346:	f000 fdcf 	bl	8008ee8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800834a:	20ea      	movs	r0, #234	; 0xea
 800834c:	f000 fd96 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008350:	2000      	movs	r0, #0
 8008352:	f000 fdc9 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008356:	2000      	movs	r0, #0
 8008358:	f000 fdc6 	bl	8008ee8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800835c:	20ed      	movs	r0, #237	; 0xed
 800835e:	f000 fd8d 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8008362:	2064      	movs	r0, #100	; 0x64
 8008364:	f000 fdc0 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008368:	2003      	movs	r0, #3
 800836a:	f000 fdbd 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x12);
 800836e:	2012      	movs	r0, #18
 8008370:	f000 fdba 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x81);
 8008374:	2081      	movs	r0, #129	; 0x81
 8008376:	f000 fdb7 	bl	8008ee8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800837a:	20f7      	movs	r0, #247	; 0xf7
 800837c:	f000 fd7e 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8008380:	2020      	movs	r0, #32
 8008382:	f000 fdb1 	bl	8008ee8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8008386:	20c0      	movs	r0, #192	; 0xc0
 8008388:	f000 fd78 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800838c:	2023      	movs	r0, #35	; 0x23
 800838e:	f000 fdab 	bl	8008ee8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8008392:	20c1      	movs	r0, #193	; 0xc1
 8008394:	f000 fd72 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8008398:	2010      	movs	r0, #16
 800839a:	f000 fda5 	bl	8008ee8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800839e:	20c5      	movs	r0, #197	; 0xc5
 80083a0:	f000 fd6c 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80083a4:	203e      	movs	r0, #62	; 0x3e
 80083a6:	f000 fd9f 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x28);
 80083aa:	2028      	movs	r0, #40	; 0x28
 80083ac:	f000 fd9c 	bl	8008ee8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 80083b0:	20c7      	movs	r0, #199	; 0xc7
 80083b2:	f000 fd63 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80083b6:	2086      	movs	r0, #134	; 0x86
 80083b8:	f000 fd96 	bl	8008ee8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80083bc:	2036      	movs	r0, #54	; 0x36
 80083be:	f000 fd5d 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80083c2:	2048      	movs	r0, #72	; 0x48
 80083c4:	f000 fd90 	bl	8008ee8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80083c8:	203a      	movs	r0, #58	; 0x3a
 80083ca:	f000 fd57 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80083ce:	2055      	movs	r0, #85	; 0x55
 80083d0:	f000 fd8a 	bl	8008ee8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80083d4:	20b1      	movs	r0, #177	; 0xb1
 80083d6:	f000 fd51 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80083da:	2000      	movs	r0, #0
 80083dc:	f000 fd84 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x18);
 80083e0:	2018      	movs	r0, #24
 80083e2:	f000 fd81 	bl	8008ee8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 80083e6:	20b6      	movs	r0, #182	; 0xb6
 80083e8:	f000 fd48 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 80083ec:	2008      	movs	r0, #8
 80083ee:	f000 fd7b 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x82);
 80083f2:	2082      	movs	r0, #130	; 0x82
 80083f4:	f000 fd78 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x27);
 80083f8:	2027      	movs	r0, #39	; 0x27
 80083fa:	f000 fd75 	bl	8008ee8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 80083fe:	20f2      	movs	r0, #242	; 0xf2
 8008400:	f000 fd3c 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008404:	2000      	movs	r0, #0
 8008406:	f000 fd6f 	bl	8008ee8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800840a:	2026      	movs	r0, #38	; 0x26
 800840c:	f000 fd36 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8008410:	2001      	movs	r0, #1
 8008412:	f000 fd69 	bl	8008ee8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8008416:	20e0      	movs	r0, #224	; 0xe0
 8008418:	f000 fd30 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800841c:	200f      	movs	r0, #15
 800841e:	f000 fd63 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008422:	2031      	movs	r0, #49	; 0x31
 8008424:	f000 fd60 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8008428:	202b      	movs	r0, #43	; 0x2b
 800842a:	f000 fd5d 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800842e:	200c      	movs	r0, #12
 8008430:	f000 fd5a 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008434:	200e      	movs	r0, #14
 8008436:	f000 fd57 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800843a:	2008      	movs	r0, #8
 800843c:	f000 fd54 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8008440:	204e      	movs	r0, #78	; 0x4e
 8008442:	f000 fd51 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8008446:	20f1      	movs	r0, #241	; 0xf1
 8008448:	f000 fd4e 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x37);
 800844c:	2037      	movs	r0, #55	; 0x37
 800844e:	f000 fd4b 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x07);
 8008452:	2007      	movs	r0, #7
 8008454:	f000 fd48 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x10);
 8008458:	2010      	movs	r0, #16
 800845a:	f000 fd45 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800845e:	2003      	movs	r0, #3
 8008460:	f000 fd42 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008464:	200e      	movs	r0, #14
 8008466:	f000 fd3f 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x09);
 800846a:	2009      	movs	r0, #9
 800846c:	f000 fd3c 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008470:	2000      	movs	r0, #0
 8008472:	f000 fd39 	bl	8008ee8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8008476:	20e1      	movs	r0, #225	; 0xe1
 8008478:	f000 fd00 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800847c:	2000      	movs	r0, #0
 800847e:	f000 fd33 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008482:	200e      	movs	r0, #14
 8008484:	f000 fd30 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x14);
 8008488:	2014      	movs	r0, #20
 800848a:	f000 fd2d 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800848e:	2003      	movs	r0, #3
 8008490:	f000 fd2a 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x11);
 8008494:	2011      	movs	r0, #17
 8008496:	f000 fd27 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800849a:	2007      	movs	r0, #7
 800849c:	f000 fd24 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x31);
 80084a0:	2031      	movs	r0, #49	; 0x31
 80084a2:	f000 fd21 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80084a6:	20c1      	movs	r0, #193	; 0xc1
 80084a8:	f000 fd1e 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x48);
 80084ac:	2048      	movs	r0, #72	; 0x48
 80084ae:	f000 fd1b 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x08);
 80084b2:	2008      	movs	r0, #8
 80084b4:	f000 fd18 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80084b8:	200f      	movs	r0, #15
 80084ba:	f000 fd15 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80084be:	200c      	movs	r0, #12
 80084c0:	f000 fd12 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x31);
 80084c4:	2031      	movs	r0, #49	; 0x31
 80084c6:	f000 fd0f 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x36);
 80084ca:	2036      	movs	r0, #54	; 0x36
 80084cc:	f000 fd0c 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80084d0:	200f      	movs	r0, #15
 80084d2:	f000 fd09 	bl	8008ee8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80084d6:	2011      	movs	r0, #17
 80084d8:	f000 fcd0 	bl	8008e7c <_LCD_SendCommand>
	HAL_Delay(240);
 80084dc:	20f0      	movs	r0, #240	; 0xf0
 80084de:	f7fa fd43 	bl	8002f68 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 80084e2:	2029      	movs	r0, #41	; 0x29
 80084e4:	f000 fcca 	bl	8008e7c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80084e8:	2000      	movs	r0, #0
 80084ea:	f000 fb69 	bl	8008bc0 <ILI9341_Set_Rotation>
}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084f8:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <ILI9341_SPI_Init+0x30>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2240      	movs	r2, #64	; 0x40
 80084fe:	4013      	ands	r3, r2
 8008500:	2b40      	cmp	r3, #64	; 0x40
 8008502:	d005      	beq.n	8008510 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <ILI9341_SPI_Init+0x30>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <ILI9341_SPI_Init+0x30>)
 800850a:	2140      	movs	r1, #64	; 0x40
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <ILI9341_SPI_Init+0x34>)
 8008512:	695a      	ldr	r2, [r3, #20]
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <ILI9341_SPI_Init+0x34>)
 8008516:	2110      	movs	r1, #16
 8008518:	438a      	bics	r2, r1
 800851a:	615a      	str	r2, [r3, #20]
}
 800851c:	46c0      	nop			; (mov r8, r8)
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	40013000 	.word	0x40013000
 8008528:	48000800 	.word	0x48000800

0800852c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800852c:	b5b0      	push	{r4, r5, r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af02      	add	r7, sp, #8
 8008532:	0005      	movs	r5, r0
 8008534:	000c      	movs	r4, r1
 8008536:	0010      	movs	r0, r2
 8008538:	0019      	movs	r1, r3
 800853a:	1dbb      	adds	r3, r7, #6
 800853c:	1c2a      	adds	r2, r5, #0
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	1c22      	adds	r2, r4, #0
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	1cbb      	adds	r3, r7, #2
 8008548:	1c02      	adds	r2, r0, #0
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	003b      	movs	r3, r7
 800854e:	1c0a      	adds	r2, r1, #0
 8008550:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008552:	4b37      	ldr	r3, [pc, #220]	; (8008630 <ILI9341_Draw_Vertical_Line+0x104>)
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	1dba      	adds	r2, r7, #6
 800855a:	8812      	ldrh	r2, [r2, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d300      	bcc.n	8008562 <ILI9341_Draw_Vertical_Line+0x36>
 8008560:	e062      	b.n	8008628 <ILI9341_Draw_Vertical_Line+0xfc>
 8008562:	4b34      	ldr	r3, [pc, #208]	; (8008634 <ILI9341_Draw_Vertical_Line+0x108>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	1d3a      	adds	r2, r7, #4
 800856a:	8812      	ldrh	r2, [r2, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d25b      	bcs.n	8008628 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008570:	1d3b      	adds	r3, r7, #4
 8008572:	881a      	ldrh	r2, [r3, #0]
 8008574:	1cbb      	adds	r3, r7, #2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <ILI9341_Draw_Vertical_Line+0x108>)
 800857e:	8812      	ldrh	r2, [r2, #0]
 8008580:	b292      	uxth	r2, r2
 8008582:	4293      	cmp	r3, r2
 8008584:	db07      	blt.n	8008596 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8008586:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <ILI9341_Draw_Vertical_Line+0x108>)
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b299      	uxth	r1, r3
 800858c:	1cbb      	adds	r3, r7, #2
 800858e:	1d3a      	adds	r2, r7, #4
 8008590:	8812      	ldrh	r2, [r2, #0]
 8008592:	1a8a      	subs	r2, r1, r2
 8008594:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8008596:	1d3a      	adds	r2, r7, #4
 8008598:	1cbb      	adds	r3, r7, #2
 800859a:	8812      	ldrh	r2, [r2, #0]
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	18d3      	adds	r3, r2, r3
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29c      	uxth	r4, r3
 80085a6:	1dbb      	adds	r3, r7, #6
 80085a8:	881a      	ldrh	r2, [r3, #0]
 80085aa:	1d3b      	adds	r3, r7, #4
 80085ac:	8819      	ldrh	r1, [r3, #0]
 80085ae:	1dbb      	adds	r3, r7, #6
 80085b0:	8818      	ldrh	r0, [r3, #0]
 80085b2:	0023      	movs	r3, r4
 80085b4:	f000 f840 	bl	8008638 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 80085b8:	230f      	movs	r3, #15
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 80085c0:	1cbb      	adds	r3, r7, #2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	4013      	ands	r3, r2
 80085c8:	d00e      	beq.n	80085e8 <ILI9341_Draw_Vertical_Line+0xbc>
 80085ca:	1cbb      	adds	r3, r7, #2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d90a      	bls.n	80085e8 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 80085d2:	230f      	movs	r3, #15
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2201      	movs	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 80085da:	1cbb      	adds	r3, r7, #2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	1cba      	adds	r2, r7, #2
 80085e4:	18db      	adds	r3, r3, r3
 80085e6:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 80085e8:	230f      	movs	r3, #15
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 80085f2:	1d3a      	adds	r2, r7, #4
 80085f4:	1cbb      	adds	r3, r7, #2
 80085f6:	8812      	ldrh	r2, [r2, #0]
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	b299      	uxth	r1, r3
 80085fe:	003b      	movs	r3, r7
 8008600:	881a      	ldrh	r2, [r3, #0]
 8008602:	1dbb      	adds	r3, r7, #6
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	0018      	movs	r0, r3
 8008608:	f000 f898 	bl	800873c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800860c:	1cbb      	adds	r3, r7, #2
 800860e:	881c      	ldrh	r4, [r3, #0]
 8008610:	003b      	movs	r3, r7
 8008612:	881a      	ldrh	r2, [r3, #0]
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	8819      	ldrh	r1, [r3, #0]
 8008618:	1dbb      	adds	r3, r7, #6
 800861a:	8818      	ldrh	r0, [r3, #0]
 800861c:	2303      	movs	r3, #3
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	0023      	movs	r3, r4
 8008622:	f000 fb4b 	bl	8008cbc <_LCD_Write_Frame>
 8008626:	e000      	b.n	800862a <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008628:	46c0      	nop			; (mov r8, r8)
}
 800862a:	46bd      	mov	sp, r7
 800862c:	b004      	add	sp, #16
 800862e:	bdb0      	pop	{r4, r5, r7, pc}
 8008630:	20000016 	.word	0x20000016
 8008634:	20000014 	.word	0x20000014

08008638 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8008638:	b5b0      	push	{r4, r5, r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	0005      	movs	r5, r0
 8008640:	000c      	movs	r4, r1
 8008642:	0010      	movs	r0, r2
 8008644:	0019      	movs	r1, r3
 8008646:	1dbb      	adds	r3, r7, #6
 8008648:	1c2a      	adds	r2, r5, #0
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	1d3b      	adds	r3, r7, #4
 800864e:	1c22      	adds	r2, r4, #0
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	1cbb      	adds	r3, r7, #2
 8008654:	1c02      	adds	r2, r0, #0
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	003b      	movs	r3, r7
 800865a:	1c0a      	adds	r2, r1, #0
 800865c:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800865e:	202a      	movs	r0, #42	; 0x2a
 8008660:	f000 fc0c 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8008664:	1dbb      	adds	r3, r7, #6
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	b29b      	uxth	r3, r3
 800866c:	b2db      	uxtb	r3, r3
 800866e:	0018      	movs	r0, r3
 8008670:	f000 fc3a 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(sc);
 8008674:	1dbb      	adds	r3, r7, #6
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	0018      	movs	r0, r3
 800867c:	f000 fc34 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8008680:	1cbb      	adds	r3, r7, #2
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	b29b      	uxth	r3, r3
 8008688:	b2db      	uxtb	r3, r3
 800868a:	0018      	movs	r0, r3
 800868c:	f000 fc2c 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(ec);
 8008690:	1cbb      	adds	r3, r7, #2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	0018      	movs	r0, r3
 8008698:	f000 fc26 	bl	8008ee8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800869c:	202b      	movs	r0, #43	; 0x2b
 800869e:	f000 fbed 	bl	8008e7c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	0018      	movs	r0, r3
 80086ae:	f000 fc1b 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(sp);
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 fc15 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 80086be:	003b      	movs	r3, r7
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 fc0d 	bl	8008ee8 <_LCD_SendData>
	_LCD_SendData(ep);
 80086ce:	003b      	movs	r3, r7
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	0018      	movs	r0, r3
 80086d6:	f000 fc07 	bl	8008ee8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 80086da:	202c      	movs	r0, #44	; 0x2c
 80086dc:	f000 fbce 	bl	8008e7c <_LCD_SendCommand>
}
 80086e0:	46c0      	nop			; (mov r8, r8)
 80086e2:	46bd      	mov	sp, r7
 80086e4:	b002      	add	sp, #8
 80086e6:	bdb0      	pop	{r4, r5, r7, pc}

080086e8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af02      	add	r7, sp, #8
 80086ee:	0002      	movs	r2, r0
 80086f0:	1dbb      	adds	r3, r7, #6
 80086f2:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 80086f4:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <ILI9341_Fill_Screen+0x4c>)
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <ILI9341_Fill_Screen+0x50>)
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2100      	movs	r1, #0
 8008702:	2000      	movs	r0, #0
 8008704:	f7ff ff98 	bl	8008638 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <ILI9341_Fill_Screen+0x4c>)
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	001a      	movs	r2, r3
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <ILI9341_Fill_Screen+0x50>)
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29b      	uxth	r3, r3
 8008716:	4353      	muls	r3, r2
 8008718:	0019      	movs	r1, r3
 800871a:	1dbb      	adds	r3, r7, #6
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	2304      	movs	r3, #4
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	000b      	movs	r3, r1
 8008724:	2100      	movs	r1, #0
 8008726:	2000      	movs	r0, #0
 8008728:	f000 fac8 	bl	8008cbc <_LCD_Write_Frame>
}
 800872c:	46c0      	nop			; (mov r8, r8)
 800872e:	46bd      	mov	sp, r7
 8008730:	b002      	add	sp, #8
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000016 	.word	0x20000016
 8008738:	20000014 	.word	0x20000014

0800873c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800873c:	b590      	push	{r4, r7, lr}
 800873e:	b08f      	sub	sp, #60	; 0x3c
 8008740:	af00      	add	r7, sp, #0
 8008742:	0004      	movs	r4, r0
 8008744:	0008      	movs	r0, r1
 8008746:	0011      	movs	r1, r2
 8008748:	1dbb      	adds	r3, r7, #6
 800874a:	1c22      	adds	r2, r4, #0
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	1c02      	adds	r2, r0, #0
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	1cbb      	adds	r3, r7, #2
 8008756:	1c0a      	adds	r2, r1, #0
 8008758:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800875a:	4bae      	ldr	r3, [pc, #696]	; (8008a14 <ILI9341_Draw_Pixel+0x2d8>)
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	1dba      	adds	r2, r7, #6
 8008762:	8812      	ldrh	r2, [r2, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d300      	bcc.n	800876a <ILI9341_Draw_Pixel+0x2e>
 8008768:	e150      	b.n	8008a0c <ILI9341_Draw_Pixel+0x2d0>
 800876a:	4bab      	ldr	r3, [pc, #684]	; (8008a18 <ILI9341_Draw_Pixel+0x2dc>)
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	b29b      	uxth	r3, r3
 8008770:	1d3a      	adds	r2, r7, #4
 8008772:	8812      	ldrh	r2, [r2, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d300      	bcc.n	800877a <ILI9341_Draw_Pixel+0x3e>
 8008778:	e148      	b.n	8008a0c <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800877a:	4ba8      	ldr	r3, [pc, #672]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	4ba7      	ldr	r3, [pc, #668]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 8008780:	2101      	movs	r1, #1
 8008782:	438a      	bics	r2, r1
 8008784:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008786:	4ba6      	ldr	r3, [pc, #664]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	4ba5      	ldr	r3, [pc, #660]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800878c:	2110      	movs	r1, #16
 800878e:	438a      	bics	r2, r1
 8008790:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8008792:	220a      	movs	r2, #10
 8008794:	2100      	movs	r1, #0
 8008796:	202a      	movs	r0, #42	; 0x2a
 8008798:	f000 fbdc 	bl	8008f54 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800879c:	2300      	movs	r3, #0
 800879e:	637b      	str	r3, [r7, #52]	; 0x34
 80087a0:	e008      	b.n	80087b4 <ILI9341_Draw_Pixel+0x78>
 80087a2:	4b9f      	ldr	r3, [pc, #636]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	4b9e      	ldr	r3, [pc, #632]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087a8:	2110      	movs	r1, #16
 80087aa:	438a      	bics	r2, r1
 80087ac:	615a      	str	r2, [r3, #20]
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	3301      	adds	r3, #1
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	ddf3      	ble.n	80087a2 <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80087ba:	4b98      	ldr	r3, [pc, #608]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	4b97      	ldr	r3, [pc, #604]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 80087c0:	2101      	movs	r1, #1
 80087c2:	430a      	orrs	r2, r1
 80087c4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80087c6:	4b96      	ldr	r3, [pc, #600]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	4b95      	ldr	r3, [pc, #596]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087cc:	2110      	movs	r1, #16
 80087ce:	430a      	orrs	r2, r1
 80087d0:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80087d2:	4b93      	ldr	r3, [pc, #588]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	4b92      	ldr	r3, [pc, #584]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80087d8:	2110      	movs	r1, #16
 80087da:	438a      	bics	r2, r1
 80087dc:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 80087de:	1dbb      	adds	r3, r7, #6
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	0a1b      	lsrs	r3, r3, #8
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	2114      	movs	r1, #20
 80087ea:	187b      	adds	r3, r7, r1
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	1dbb      	adds	r3, r7, #6
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	705a      	strb	r2, [r3, #1]
 80087f8:	1dbb      	adds	r3, r7, #6
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	121b      	asrs	r3, r3, #8
 8008800:	b2da      	uxtb	r2, r3
 8008802:	187b      	adds	r3, r7, r1
 8008804:	709a      	strb	r2, [r3, #2]
 8008806:	1dbb      	adds	r3, r7, #6
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3301      	adds	r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	187b      	adds	r3, r7, r1
 8008812:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8008814:	1878      	adds	r0, r7, r1
 8008816:	230a      	movs	r3, #10
 8008818:	2200      	movs	r2, #0
 800881a:	2104      	movs	r1, #4
 800881c:	f000 fbd4 	bl	8008fc8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008820:	2300      	movs	r3, #0
 8008822:	633b      	str	r3, [r7, #48]	; 0x30
 8008824:	e008      	b.n	8008838 <ILI9341_Draw_Pixel+0xfc>
 8008826:	4b7e      	ldr	r3, [pc, #504]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008828:	695a      	ldr	r2, [r3, #20]
 800882a:	4b7d      	ldr	r3, [pc, #500]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800882c:	2110      	movs	r1, #16
 800882e:	438a      	bics	r2, r1
 8008830:	615a      	str	r2, [r3, #20]
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	3301      	adds	r3, #1
 8008836:	633b      	str	r3, [r7, #48]	; 0x30
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	2b02      	cmp	r3, #2
 800883c:	ddf3      	ble.n	8008826 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800883e:	4b78      	ldr	r3, [pc, #480]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008840:	695a      	ldr	r2, [r3, #20]
 8008842:	4b77      	ldr	r3, [pc, #476]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008844:	2110      	movs	r1, #16
 8008846:	430a      	orrs	r2, r1
 8008848:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800884a:	4b74      	ldr	r3, [pc, #464]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	4b73      	ldr	r3, [pc, #460]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 8008850:	2101      	movs	r1, #1
 8008852:	438a      	bics	r2, r1
 8008854:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008856:	4b72      	ldr	r3, [pc, #456]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	4b71      	ldr	r3, [pc, #452]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800885c:	2110      	movs	r1, #16
 800885e:	438a      	bics	r2, r1
 8008860:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8008862:	220a      	movs	r2, #10
 8008864:	2100      	movs	r1, #0
 8008866:	202b      	movs	r0, #43	; 0x2b
 8008868:	f000 fb74 	bl	8008f54 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800886c:	2300      	movs	r3, #0
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008870:	e008      	b.n	8008884 <ILI9341_Draw_Pixel+0x148>
 8008872:	4b6b      	ldr	r3, [pc, #428]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	4b6a      	ldr	r3, [pc, #424]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008878:	2110      	movs	r1, #16
 800887a:	438a      	bics	r2, r1
 800887c:	615a      	str	r2, [r3, #20]
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	3301      	adds	r3, #1
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	2b02      	cmp	r3, #2
 8008888:	ddf3      	ble.n	8008872 <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800888a:	4b64      	ldr	r3, [pc, #400]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	4b63      	ldr	r3, [pc, #396]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 8008890:	2101      	movs	r1, #1
 8008892:	430a      	orrs	r2, r1
 8008894:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008896:	4b62      	ldr	r3, [pc, #392]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	4b61      	ldr	r3, [pc, #388]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800889c:	2110      	movs	r1, #16
 800889e:	430a      	orrs	r2, r1
 80088a0:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088a2:	4b5f      	ldr	r3, [pc, #380]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80088a4:	695a      	ldr	r2, [r3, #20]
 80088a6:	4b5e      	ldr	r3, [pc, #376]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80088a8:	2110      	movs	r1, #16
 80088aa:	438a      	bics	r2, r1
 80088ac:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	2110      	movs	r1, #16
 80088ba:	187b      	adds	r3, r7, r1
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	1d3b      	adds	r3, r7, #4
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	187b      	adds	r3, r7, r1
 80088c6:	705a      	strb	r2, [r3, #1]
 80088c8:	1d3b      	adds	r3, r7, #4
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	121b      	asrs	r3, r3, #8
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	187b      	adds	r3, r7, r1
 80088d4:	709a      	strb	r2, [r3, #2]
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	3301      	adds	r3, #1
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 80088e4:	1878      	adds	r0, r7, r1
 80088e6:	230a      	movs	r3, #10
 80088e8:	2200      	movs	r2, #0
 80088ea:	2104      	movs	r1, #4
 80088ec:	f000 fb6c 	bl	8008fc8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088f0:	2300      	movs	r3, #0
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088f4:	e008      	b.n	8008908 <ILI9341_Draw_Pixel+0x1cc>
 80088f6:	4b4a      	ldr	r3, [pc, #296]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	4b49      	ldr	r3, [pc, #292]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80088fc:	2110      	movs	r1, #16
 80088fe:	438a      	bics	r2, r1
 8008900:	615a      	str	r2, [r3, #20]
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	3301      	adds	r3, #1
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	2b02      	cmp	r3, #2
 800890c:	ddf3      	ble.n	80088f6 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800890e:	4b44      	ldr	r3, [pc, #272]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008910:	695a      	ldr	r2, [r3, #20]
 8008912:	4b43      	ldr	r3, [pc, #268]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008914:	2110      	movs	r1, #16
 8008916:	430a      	orrs	r2, r1
 8008918:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800891a:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 800891c:	695a      	ldr	r2, [r3, #20]
 800891e:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 8008920:	2101      	movs	r1, #1
 8008922:	438a      	bics	r2, r1
 8008924:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008926:	4b3e      	ldr	r3, [pc, #248]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008928:	695a      	ldr	r2, [r3, #20]
 800892a:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800892c:	2110      	movs	r1, #16
 800892e:	438a      	bics	r2, r1
 8008930:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8008932:	220a      	movs	r2, #10
 8008934:	2100      	movs	r1, #0
 8008936:	202c      	movs	r0, #44	; 0x2c
 8008938:	f000 fb0c 	bl	8008f54 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800893c:	2300      	movs	r3, #0
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
 8008940:	e008      	b.n	8008954 <ILI9341_Draw_Pixel+0x218>
 8008942:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008948:	2110      	movs	r1, #16
 800894a:	438a      	bics	r2, r1
 800894c:	615a      	str	r2, [r3, #20]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	3301      	adds	r3, #1
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	2b02      	cmp	r3, #2
 8008958:	ddf3      	ble.n	8008942 <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	4b2f      	ldr	r3, [pc, #188]	; (8008a1c <ILI9341_Draw_Pixel+0x2e0>)
 8008960:	2101      	movs	r1, #1
 8008962:	430a      	orrs	r2, r1
 8008964:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008966:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 800896c:	2110      	movs	r1, #16
 800896e:	430a      	orrs	r2, r1
 8008970:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008972:	4b2b      	ldr	r3, [pc, #172]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008978:	2110      	movs	r1, #16
 800897a:	438a      	bics	r2, r1
 800897c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800897e:	1cbb      	adds	r3, r7, #2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	b2da      	uxtb	r2, r3
 8008988:	210c      	movs	r1, #12
 800898a:	187b      	adds	r3, r7, r1
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	1cbb      	adds	r3, r7, #2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b2da      	uxtb	r2, r3
 8008994:	187b      	adds	r3, r7, r1
 8008996:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8008998:	1878      	adds	r0, r7, r1
 800899a:	2301      	movs	r3, #1
 800899c:	2200      	movs	r2, #0
 800899e:	2102      	movs	r1, #2
 80089a0:	f000 fb12 	bl	8008fc8 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089a4:	2300      	movs	r3, #0
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	e008      	b.n	80089bc <ILI9341_Draw_Pixel+0x280>
 80089aa:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089b0:	2110      	movs	r1, #16
 80089b2:	438a      	bics	r2, r1
 80089b4:	615a      	str	r2, [r3, #20]
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	3301      	adds	r3, #1
 80089ba:	623b      	str	r3, [r7, #32]
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	ddf3      	ble.n	80089aa <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	e008      	b.n	80089da <ILI9341_Draw_Pixel+0x29e>
 80089c8:	4b15      	ldr	r3, [pc, #84]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089ce:	2110      	movs	r1, #16
 80089d0:	438a      	bics	r2, r1
 80089d2:	615a      	str	r2, [r3, #20]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	3301      	adds	r3, #1
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	ddf3      	ble.n	80089c8 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089e0:	2300      	movs	r3, #0
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	e008      	b.n	80089f8 <ILI9341_Draw_Pixel+0x2bc>
 80089e6:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 80089ec:	2110      	movs	r1, #16
 80089ee:	438a      	bics	r2, r1
 80089f0:	615a      	str	r2, [r3, #20]
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3301      	adds	r3, #1
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	ddf3      	ble.n	80089e6 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <ILI9341_Draw_Pixel+0x2e4>)
 8008a04:	2110      	movs	r1, #16
 8008a06:	430a      	orrs	r2, r1
 8008a08:	615a      	str	r2, [r3, #20]
 8008a0a:	e000      	b.n	8008a0e <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008a0c:	46c0      	nop			; (mov r8, r8)


}
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	b00f      	add	sp, #60	; 0x3c
 8008a12:	bd90      	pop	{r4, r7, pc}
 8008a14:	20000016 	.word	0x20000016
 8008a18:	20000014 	.word	0x20000014
 8008a1c:	48000400 	.word	0x48000400
 8008a20:	48000800 	.word	0x48000800

08008a24 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8008a24:	b5b0      	push	{r4, r5, r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	0005      	movs	r5, r0
 8008a2c:	000c      	movs	r4, r1
 8008a2e:	0010      	movs	r0, r2
 8008a30:	0019      	movs	r1, r3
 8008a32:	1dbb      	adds	r3, r7, #6
 8008a34:	1c2a      	adds	r2, r5, #0
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	1c22      	adds	r2, r4, #0
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	1cbb      	adds	r3, r7, #2
 8008a40:	1c02      	adds	r2, r0, #0
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	003b      	movs	r3, r7
 8008a46:	1c0a      	adds	r2, r1, #0
 8008a48:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008a4a:	4b5b      	ldr	r3, [pc, #364]	; (8008bb8 <ILI9341_Draw_Rectangle+0x194>)
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	1dba      	adds	r2, r7, #6
 8008a52:	8812      	ldrh	r2, [r2, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d300      	bcc.n	8008a5a <ILI9341_Draw_Rectangle+0x36>
 8008a58:	e0a9      	b.n	8008bae <ILI9341_Draw_Rectangle+0x18a>
 8008a5a:	4b58      	ldr	r3, [pc, #352]	; (8008bbc <ILI9341_Draw_Rectangle+0x198>)
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	1d3a      	adds	r2, r7, #4
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d300      	bcc.n	8008a6a <ILI9341_Draw_Rectangle+0x46>
 8008a68:	e0a1      	b.n	8008bae <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 8008a6a:	1dbb      	adds	r3, r7, #6
 8008a6c:	881a      	ldrh	r2, [r3, #0]
 8008a6e:	1cbb      	adds	r3, r7, #2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	18d3      	adds	r3, r2, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	4a50      	ldr	r2, [pc, #320]	; (8008bb8 <ILI9341_Draw_Rectangle+0x194>)
 8008a78:	8812      	ldrh	r2, [r2, #0]
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	db07      	blt.n	8008a90 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8008a80:	4b4d      	ldr	r3, [pc, #308]	; (8008bb8 <ILI9341_Draw_Rectangle+0x194>)
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b299      	uxth	r1, r3
 8008a86:	1cbb      	adds	r3, r7, #2
 8008a88:	1dba      	adds	r2, r7, #6
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	1a8a      	subs	r2, r1, r2
 8008a8e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	881a      	ldrh	r2, [r3, #0]
 8008a94:	003b      	movs	r3, r7
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	18d3      	adds	r3, r2, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a47      	ldr	r2, [pc, #284]	; (8008bbc <ILI9341_Draw_Rectangle+0x198>)
 8008a9e:	8812      	ldrh	r2, [r2, #0]
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	db07      	blt.n	8008ab6 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8008aa6:	4b45      	ldr	r3, [pc, #276]	; (8008bbc <ILI9341_Draw_Rectangle+0x198>)
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b299      	uxth	r1, r3
 8008aac:	003b      	movs	r3, r7
 8008aae:	1d3a      	adds	r2, r7, #4
 8008ab0:	8812      	ldrh	r2, [r2, #0]
 8008ab2:	1a8a      	subs	r2, r1, r2
 8008ab4:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8008ab6:	1dba      	adds	r2, r7, #6
 8008ab8:	1cbb      	adds	r3, r7, #2
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	18d3      	adds	r3, r2, r3
 8008ac0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8008ac6:	1d3a      	adds	r2, r7, #4
 8008ac8:	003b      	movs	r3, r7
 8008aca:	8812      	ldrh	r2, [r2, #0]
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	18d3      	adds	r3, r2, r3
 8008ad0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	1d3b      	adds	r3, r7, #4
 8008ad8:	8819      	ldrh	r1, [r3, #0]
 8008ada:	1dbb      	adds	r3, r7, #6
 8008adc:	8818      	ldrh	r0, [r3, #0]
 8008ade:	0013      	movs	r3, r2
 8008ae0:	0022      	movs	r2, r4
 8008ae2:	f7ff fda9 	bl	8008638 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008ae6:	200e      	movs	r0, #14
 8008ae8:	183b      	adds	r3, r7, r0
 8008aea:	003a      	movs	r2, r7
 8008aec:	1cb9      	adds	r1, r7, #2
 8008aee:	8812      	ldrh	r2, [r2, #0]
 8008af0:	8809      	ldrh	r1, [r1, #0]
 8008af2:	434a      	muls	r2, r1
 8008af4:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8008af6:	230d      	movs	r3, #13
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8008afe:	183b      	adds	r3, r7, r0
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	2201      	movs	r2, #1
 8008b04:	4013      	ands	r3, r2
 8008b06:	d010      	beq.n	8008b2a <ILI9341_Draw_Rectangle+0x106>
 8008b08:	230e      	movs	r3, #14
 8008b0a:	18fb      	adds	r3, r7, r3
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d90b      	bls.n	8008b2a <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 8008b12:	230d      	movs	r3, #13
 8008b14:	18fb      	adds	r3, r7, r3
 8008b16:	2201      	movs	r2, #1
 8008b18:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8008b1a:	220e      	movs	r2, #14
 8008b1c:	18bb      	adds	r3, r7, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	18ba      	adds	r2, r7, r2
 8008b26:	18db      	adds	r3, r3, r3
 8008b28:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8008b2a:	230e      	movs	r3, #14
 8008b2c:	18fb      	adds	r3, r7, r3
 8008b2e:	881c      	ldrh	r4, [r3, #0]
 8008b30:	2320      	movs	r3, #32
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	881a      	ldrh	r2, [r3, #0]
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	8819      	ldrh	r1, [r3, #0]
 8008b3a:	1dbb      	adds	r3, r7, #6
 8008b3c:	8818      	ldrh	r0, [r3, #0]
 8008b3e:	2324      	movs	r3, #36	; 0x24
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	0023      	movs	r3, r4
 8008b48:	f000 f8b8 	bl	8008cbc <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8008b4c:	230d      	movs	r3, #13
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d02c      	beq.n	8008bb0 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8008b56:	1dba      	adds	r2, r7, #6
 8008b58:	1cbb      	adds	r3, r7, #2
 8008b5a:	8812      	ldrh	r2, [r2, #0]
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	3b02      	subs	r3, #2
 8008b64:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8008b66:	1d3a      	adds	r2, r7, #4
 8008b68:	003b      	movs	r3, r7
 8008b6a:	8812      	ldrh	r2, [r2, #0]
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2420      	movs	r4, #32
 8008b78:	193a      	adds	r2, r7, r4
 8008b7a:	8812      	ldrh	r2, [r2, #0]
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	f7ff fddd 	bl	800873c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8008b82:	1dba      	adds	r2, r7, #6
 8008b84:	1cbb      	adds	r3, r7, #2
 8008b86:	8812      	ldrh	r2, [r2, #0]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	18d3      	adds	r3, r2, r3
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8008b92:	1d3a      	adds	r2, r7, #4
 8008b94:	003b      	movs	r3, r7
 8008b96:	8812      	ldrh	r2, [r2, #0]
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	18d3      	adds	r3, r2, r3
 8008b9c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	193a      	adds	r2, r7, r4
 8008ba4:	8812      	ldrh	r2, [r2, #0]
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	f7ff fdc8 	bl	800873c <ILI9341_Draw_Pixel>
 8008bac:	e000      	b.n	8008bb0 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008bae:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b004      	add	sp, #16
 8008bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	20000016 	.word	0x20000016
 8008bbc:	20000014 	.word	0x20000014

08008bc0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8008bc0:	b590      	push	{r4, r7, lr}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	0002      	movs	r2, r0
 8008bc8:	1dfb      	adds	r3, r7, #7
 8008bca:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8008bcc:	240f      	movs	r4, #15
 8008bce:	193b      	adds	r3, r7, r4
 8008bd0:	1dfa      	adds	r2, r7, #7
 8008bd2:	7812      	ldrb	r2, [r2, #0]
 8008bd4:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8008bd6:	2036      	movs	r0, #54	; 0x36
 8008bd8:	f000 f950 	bl	8008e7c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008bdc:	193b      	adds	r3, r7, r4
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d013      	beq.n	8008c0c <ILI9341_Set_Rotation+0x4c>
 8008be4:	dc02      	bgt.n	8008bec <ILI9341_Set_Rotation+0x2c>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008bea:	e030      	b.n	8008c4e <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d018      	beq.n	8008c22 <ILI9341_Set_Rotation+0x62>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d021      	beq.n	8008c38 <ILI9341_Set_Rotation+0x78>
			break;
 8008bf4:	e02b      	b.n	8008c4e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8008bf6:	2048      	movs	r0, #72	; 0x48
 8008bf8:	f000 f976 	bl	8008ee8 <_LCD_SendData>
			LCD_WIDTH = 240;
 8008bfc:	4b16      	ldr	r3, [pc, #88]	; (8008c58 <ILI9341_Set_Rotation+0x98>)
 8008bfe:	22f0      	movs	r2, #240	; 0xf0
 8008c00:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <ILI9341_Set_Rotation+0x9c>)
 8008c04:	22a0      	movs	r2, #160	; 0xa0
 8008c06:	0052      	lsls	r2, r2, #1
 8008c08:	801a      	strh	r2, [r3, #0]
			break;
 8008c0a:	e020      	b.n	8008c4e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8008c0c:	2028      	movs	r0, #40	; 0x28
 8008c0e:	f000 f96b 	bl	8008ee8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <ILI9341_Set_Rotation+0x98>)
 8008c14:	22a0      	movs	r2, #160	; 0xa0
 8008c16:	0052      	lsls	r2, r2, #1
 8008c18:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008c1a:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <ILI9341_Set_Rotation+0x9c>)
 8008c1c:	22f0      	movs	r2, #240	; 0xf0
 8008c1e:	801a      	strh	r2, [r3, #0]
			break;
 8008c20:	e015      	b.n	8008c4e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 8008c22:	2088      	movs	r0, #136	; 0x88
 8008c24:	f000 f960 	bl	8008ee8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8008c28:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <ILI9341_Set_Rotation+0x98>)
 8008c2a:	22f0      	movs	r2, #240	; 0xf0
 8008c2c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <ILI9341_Set_Rotation+0x9c>)
 8008c30:	22a0      	movs	r2, #160	; 0xa0
 8008c32:	0052      	lsls	r2, r2, #1
 8008c34:	801a      	strh	r2, [r3, #0]
			break;
 8008c36:	e00a      	b.n	8008c4e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8008c38:	20e8      	movs	r0, #232	; 0xe8
 8008c3a:	f000 f955 	bl	8008ee8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <ILI9341_Set_Rotation+0x98>)
 8008c40:	22a0      	movs	r2, #160	; 0xa0
 8008c42:	0052      	lsls	r2, r2, #1
 8008c44:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <ILI9341_Set_Rotation+0x9c>)
 8008c48:	22f0      	movs	r2, #240	; 0xf0
 8008c4a:	801a      	strh	r2, [r3, #0]
			break;
 8008c4c:	46c0      	nop			; (mov r8, r8)
	}
}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b005      	add	sp, #20
 8008c54:	bd90      	pop	{r4, r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	20000016 	.word	0x20000016
 8008c5c:	20000014 	.word	0x20000014

08008c60 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008c64:	4b04      	ldr	r3, [pc, #16]	; (8008c78 <_LCD_Enable+0x18>)
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	4b03      	ldr	r3, [pc, #12]	; (8008c78 <_LCD_Enable+0x18>)
 8008c6a:	2120      	movs	r1, #32
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	615a      	str	r2, [r3, #20]
}
 8008c70:	46c0      	nop			; (mov r8, r8)
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	48000800 	.word	0x48000800

08008c7c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008c82:	695a      	ldr	r2, [r3, #20]
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008c86:	2120      	movs	r1, #32
 8008c88:	438a      	bics	r2, r1
 8008c8a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8008c8c:	20c8      	movs	r0, #200	; 0xc8
 8008c8e:	f7fa f96b 	bl	8002f68 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008c92:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008c94:	695a      	ldr	r2, [r3, #20]
 8008c96:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008c98:	2110      	movs	r1, #16
 8008c9a:	438a      	bics	r2, r1
 8008c9c:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8008c9e:	20c8      	movs	r0, #200	; 0xc8
 8008ca0:	f7fa f962 	bl	8002f68 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008ca6:	695a      	ldr	r2, [r3, #20]
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <_LCD_Reset+0x3c>)
 8008caa:	2120      	movs	r1, #32
 8008cac:	430a      	orrs	r2, r1
 8008cae:	615a      	str	r2, [r3, #20]
}
 8008cb0:	46c0      	nop			; (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	48000800 	.word	0x48000800

08008cbc <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cbe:	b095      	sub	sp, #84	; 0x54
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	0006      	movs	r6, r0
 8008cc4:	0008      	movs	r0, r1
 8008cc6:	0011      	movs	r1, r2
 8008cc8:	61fb      	str	r3, [r7, #28]
 8008cca:	230e      	movs	r3, #14
 8008ccc:	2218      	movs	r2, #24
 8008cce:	4694      	mov	ip, r2
 8008cd0:	44bc      	add	ip, r7
 8008cd2:	4463      	add	r3, ip
 8008cd4:	1c32      	adds	r2, r6, #0
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	230c      	movs	r3, #12
 8008cda:	2218      	movs	r2, #24
 8008cdc:	4694      	mov	ip, r2
 8008cde:	44bc      	add	ip, r7
 8008ce0:	4463      	add	r3, ip
 8008ce2:	1c02      	adds	r2, r0, #0
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	2218      	movs	r2, #24
 8008cea:	4694      	mov	ip, r2
 8008cec:	44bc      	add	ip, r7
 8008cee:	4463      	add	r3, ip
 8008cf0:	1c0a      	adds	r2, r1, #0
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	466b      	mov	r3, sp
 8008cf6:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	4a5b      	ldr	r2, [pc, #364]	; (8008e70 <_LCD_Write_Frame+0x1b4>)
 8008d02:	8812      	ldrh	r2, [r2, #0]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d202      	bcs.n	8008d0e <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d0c:	e002      	b.n	8008d14 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008d0e:	4b58      	ldr	r3, [pc, #352]	; (8008e70 <_LCD_Write_Frame+0x1b4>)
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8008d14:	230a      	movs	r3, #10
 8008d16:	2218      	movs	r2, #24
 8008d18:	4694      	mov	ip, r2
 8008d1a:	44bc      	add	ip, r7
 8008d1c:	4463      	add	r3, ip
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	231f      	movs	r3, #31
 8008d26:	2118      	movs	r1, #24
 8008d28:	468c      	mov	ip, r1
 8008d2a:	44bc      	add	ip, r7
 8008d2c:	4463      	add	r3, ip
 8008d2e:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	001a      	movs	r2, r3
 8008d34:	3a01      	subs	r2, #1
 8008d36:	633a      	str	r2, [r7, #48]	; 0x30
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60fa      	str	r2, [r7, #12]
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	68f9      	ldr	r1, [r7, #12]
 8008d42:	0002      	movs	r2, r0
 8008d44:	0f52      	lsrs	r2, r2, #29
 8008d46:	000e      	movs	r6, r1
 8008d48:	00f6      	lsls	r6, r6, #3
 8008d4a:	617e      	str	r6, [r7, #20]
 8008d4c:	697e      	ldr	r6, [r7, #20]
 8008d4e:	4316      	orrs	r6, r2
 8008d50:	617e      	str	r6, [r7, #20]
 8008d52:	0002      	movs	r2, r0
 8008d54:	00d2      	lsls	r2, r2, #3
 8008d56:	613a      	str	r2, [r7, #16]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	6838      	ldr	r0, [r7, #0]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	0002      	movs	r2, r0
 8008d64:	0f52      	lsrs	r2, r2, #29
 8008d66:	000e      	movs	r6, r1
 8008d68:	00f5      	lsls	r5, r6, #3
 8008d6a:	4315      	orrs	r5, r2
 8008d6c:	0002      	movs	r2, r0
 8008d6e:	00d4      	lsls	r4, r2, #3
 8008d70:	3307      	adds	r3, #7
 8008d72:	08db      	lsrs	r3, r3, #3
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	466a      	mov	r2, sp
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	469d      	mov	sp, r3
 8008d7c:	466b      	mov	r3, sp
 8008d7e:	3300      	adds	r3, #0
 8008d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d82:	2300      	movs	r3, #0
 8008d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d86:	e017      	b.n	8008db8 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8008d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d8c:	18d3      	adds	r3, r2, r3
 8008d8e:	221f      	movs	r2, #31
 8008d90:	2118      	movs	r1, #24
 8008d92:	468c      	mov	ip, r1
 8008d94:	44bc      	add	ip, r7
 8008d96:	4462      	add	r2, ip
 8008d98:	7812      	ldrb	r2, [r2, #0]
 8008d9a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9e:	3301      	adds	r3, #1
 8008da0:	220a      	movs	r2, #10
 8008da2:	2118      	movs	r1, #24
 8008da4:	468c      	mov	ip, r1
 8008da6:	44bc      	add	ip, r7
 8008da8:	4462      	add	r2, ip
 8008daa:	8812      	ldrh	r2, [r2, #0]
 8008dac:	b2d1      	uxtb	r1, r2
 8008dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008db0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db4:	3302      	adds	r3, #2
 8008db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3e3      	bcc.n	8008d88 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008dd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd8:	f7f7 f9a8 	bl	800012c <__udivsi3>
 8008ddc:	0003      	movs	r3, r0
 8008dde:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7f7 fa27 	bl	8000238 <__aeabi_uidivmod>
 8008dea:	000b      	movs	r3, r1
 8008dec:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008dee:	4b21      	ldr	r3, [pc, #132]	; (8008e74 <_LCD_Write_Frame+0x1b8>)
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <_LCD_Write_Frame+0x1b8>)
 8008df4:	2101      	movs	r1, #1
 8008df6:	430a      	orrs	r2, r1
 8008df8:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008dfa:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008dfc:	695a      	ldr	r2, [r3, #20]
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008e00:	2110      	movs	r1, #16
 8008e02:	438a      	bics	r2, r1
 8008e04:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8008e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00f      	beq.n	8008e2c <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e10:	e008      	b.n	8008e24 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8008e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e16:	230a      	movs	r3, #10
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f000 f8d5 	bl	8008fc8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	3301      	adds	r3, #1
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d3f2      	bcc.n	8008e12 <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8008e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e30:	230a      	movs	r3, #10
 8008e32:	2200      	movs	r2, #0
 8008e34:	f000 f8c8 	bl	8008fc8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e3c:	e008      	b.n	8008e50 <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008e3e:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008e40:	695a      	ldr	r2, [r3, #20]
 8008e42:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008e44:	2110      	movs	r1, #16
 8008e46:	438a      	bics	r2, r1
 8008e48:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	ddf3      	ble.n	8008e3e <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <_LCD_Write_Frame+0x1bc>)
 8008e5c:	2110      	movs	r1, #16
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	615a      	str	r2, [r3, #20]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	469d      	mov	sp, r3

}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b015      	add	sp, #84	; 0x54
 8008e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6e:	46c0      	nop			; (mov r8, r8)
 8008e70:	20000018 	.word	0x20000018
 8008e74:	48000400 	.word	0x48000400
 8008e78:	48000800 	.word	0x48000800

08008e7c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	0002      	movs	r2, r0
 8008e84:	1dfb      	adds	r3, r7, #7
 8008e86:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008e8e:	2110      	movs	r1, #16
 8008e90:	438a      	bics	r2, r1
 8008e92:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008e94:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <_LCD_SendCommand+0x68>)
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <_LCD_SendCommand+0x68>)
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	438a      	bics	r2, r1
 8008e9e:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8008ea0:	1dfb      	adds	r3, r7, #7
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 f853 	bl	8008f54 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e008      	b.n	8008ec6 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008eb6:	695a      	ldr	r2, [r3, #20]
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008eba:	2110      	movs	r1, #16
 8008ebc:	438a      	bics	r2, r1
 8008ebe:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	ddf3      	ble.n	8008eb4 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008ecc:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008ece:	695a      	ldr	r2, [r3, #20]
 8008ed0:	4b03      	ldr	r3, [pc, #12]	; (8008ee0 <_LCD_SendCommand+0x64>)
 8008ed2:	2110      	movs	r1, #16
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	615a      	str	r2, [r3, #20]
}
 8008ed8:	46c0      	nop			; (mov r8, r8)
 8008eda:	46bd      	mov	sp, r7
 8008edc:	b004      	add	sp, #16
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	48000800 	.word	0x48000800
 8008ee4:	48000400 	.word	0x48000400

08008ee8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	0002      	movs	r2, r0
 8008ef0:	1dfb      	adds	r3, r7, #7
 8008ef2:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <_LCD_SendData+0x64>)
 8008ef6:	695a      	ldr	r2, [r3, #20]
 8008ef8:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <_LCD_SendData+0x64>)
 8008efa:	2101      	movs	r1, #1
 8008efc:	430a      	orrs	r2, r1
 8008efe:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f00:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <_LCD_SendData+0x68>)
 8008f02:	695a      	ldr	r2, [r3, #20]
 8008f04:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <_LCD_SendData+0x68>)
 8008f06:	2110      	movs	r1, #16
 8008f08:	438a      	bics	r2, r1
 8008f0a:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8008f0c:	1dfb      	adds	r3, r7, #7
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 f81d 	bl	8008f54 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e008      	b.n	8008f32 <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <_LCD_SendData+0x68>)
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <_LCD_SendData+0x68>)
 8008f26:	2110      	movs	r1, #16
 8008f28:	438a      	bics	r2, r1
 8008f2a:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	ddf3      	ble.n	8008f20 <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <_LCD_SendData+0x68>)
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <_LCD_SendData+0x68>)
 8008f3e:	2110      	movs	r1, #16
 8008f40:	438a      	bics	r2, r1
 8008f42:	615a      	str	r2, [r3, #20]
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b004      	add	sp, #16
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	48000400 	.word	0x48000400
 8008f50:	48000800 	.word	0x48000800

08008f54 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	0004      	movs	r4, r0
 8008f5c:	0008      	movs	r0, r1
 8008f5e:	0011      	movs	r1, r2
 8008f60:	1dfb      	adds	r3, r7, #7
 8008f62:	1c22      	adds	r2, r4, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	1dbb      	adds	r3, r7, #6
 8008f68:	1c02      	adds	r2, r0, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	1d7b      	adds	r3, r7, #5
 8008f6e:	1c0a      	adds	r2, r1, #0
 8008f70:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e003      	b.n	8008f80 <_SPI_SendByte+0x2c>
   		asm("nop");
 8008f78:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	1dbb      	adds	r3, r7, #6
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	dbf6      	blt.n	8008f78 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <_SPI_SendByte+0x6c>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d103      	bne.n	8008f9e <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8008f96:	4a0b      	ldr	r2, [pc, #44]	; (8008fc4 <_SPI_SendByte+0x70>)
 8008f98:	1dfb      	adds	r3, r7, #7
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	e003      	b.n	8008fac <_SPI_SendByte+0x58>
   		asm("nop");
 8008fa4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	1d7b      	adds	r3, r7, #5
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	dbf6      	blt.n	8008fa4 <_SPI_SendByte+0x50>

#endif

}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b005      	add	sp, #20
 8008fbc:	bd90      	pop	{r4, r7, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	40013000 	.word	0x40013000
 8008fc4:	4001300c 	.word	0x4001300c

08008fc8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	0019      	movs	r1, r3
 8008fd4:	1dfb      	adds	r3, r7, #7
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	1dbb      	adds	r3, r7, #6
 8008fda:	1c0a      	adds	r2, r1, #0
 8008fdc:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	e003      	b.n	8008fec <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8008fe4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	1dfb      	adds	r3, r7, #7
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	dbf6      	blt.n	8008fe4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8008ffa:	e01d      	b.n	8009038 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8008ffc:	4b1b      	ldr	r3, [pc, #108]	; (800906c <_SPI_SendByteMultiByte+0xa4>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2202      	movs	r2, #2
 8009002:	4013      	ands	r3, r2
 8009004:	2b02      	cmp	r3, #2
 8009006:	d117      	bne.n	8009038 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d90a      	bls.n	8009024 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	881a      	ldrh	r2, [r3, #0]
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <_SPI_SendByteMultiByte+0xa4>)
 8009014:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	3302      	adds	r3, #2
 800901a:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	3b02      	subs	r3, #2
 8009020:	60bb      	str	r3, [r7, #8]
 8009022:	e009      	b.n	8009038 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8009024:	4a12      	ldr	r2, [pc, #72]	; (8009070 <_SPI_SendByteMultiByte+0xa8>)
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	3301      	adds	r3, #1
 8009030:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	3b01      	subs	r3, #1
 8009036:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1de      	bne.n	8008ffc <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <_SPI_SendByteMultiByte+0xa4>)
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <_SPI_SendByteMultiByte+0xa4>)
 8009044:	2140      	movs	r1, #64	; 0x40
 8009046:	438a      	bics	r2, r1
 8009048:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	e003      	b.n	8009058 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 8009050:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	3301      	adds	r3, #1
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	1dbb      	adds	r3, r7, #6
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	429a      	cmp	r2, r3
 8009060:	dbf6      	blt.n	8009050 <_SPI_SendByteMultiByte+0x88>

#endif

}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	46bd      	mov	sp, r7
 8009066:	b008      	add	sp, #32
 8009068:	bd80      	pop	{r7, pc}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	40013000 	.word	0x40013000
 8009070:	4001300c 	.word	0x4001300c

08009074 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <TSC2046_EM_GetTouchScreenState+0x10>)
 800907a:	781b      	ldrb	r3, [r3, #0]
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	200005f0 	.word	0x200005f0

08009088 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	0002      	movs	r2, r0
 8009090:	1dfb      	adds	r3, r7, #7
 8009092:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <TSC2046_EM_ProcessEvent+0x4c>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	3300      	adds	r3, #0
 800909a:	2b01      	cmp	r3, #1
 800909c:	d815      	bhi.n	80090ca <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 800909e:	1dfb      	adds	r3, r7, #7
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <TSC2046_EM_ProcessEvent+0x24>
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d007      	beq.n	80090ba <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 80090aa:	e00d      	b.n	80090c8 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 80090ac:	f000 f81a 	bl	80090e4 <TSC2046_EM_EnableIdleState>
 80090b0:	0003      	movs	r3, r0
 80090b2:	001a      	movs	r2, r3
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <TSC2046_EM_ProcessEvent+0x4c>)
 80090b6:	701a      	strb	r2, [r3, #0]
					break;
 80090b8:	e006      	b.n	80090c8 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 80090ba:	f000 f80d 	bl	80090d8 <TSC2046_EM_EnableConversionState>
 80090be:	0003      	movs	r3, r0
 80090c0:	001a      	movs	r2, r3
 80090c2:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <TSC2046_EM_ProcessEvent+0x4c>)
 80090c4:	701a      	strb	r2, [r3, #0]
					break;
 80090c6:	46c0      	nop			; (mov r8, r8)
			break;
 80090c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b002      	add	sp, #8
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	200005f0 	.word	0x200005f0

080090d8 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 80090dc:	2301      	movs	r3, #1
}
 80090de:	0018      	movs	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	0018      	movs	r0, r3
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 80090f6:	4b15      	ldr	r3, [pc, #84]	; (800914c <TSC2046_HM_Init+0x5c>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 80090fc:	4b13      	ldr	r3, [pc, #76]	; (800914c <TSC2046_HM_Init+0x5c>)
 80090fe:	4a14      	ldr	r2, [pc, #80]	; (8009150 <TSC2046_HM_Init+0x60>)
 8009100:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 8009102:	4b12      	ldr	r3, [pc, #72]	; (800914c <TSC2046_HM_Init+0x5c>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4b11      	ldr	r3, [pc, #68]	; (800914c <TSC2046_HM_Init+0x5c>)
 8009108:	2101      	movs	r1, #1
 800910a:	430a      	orrs	r2, r1
 800910c:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <TSC2046_HM_Init+0x5c>)
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	4b0e      	ldr	r3, [pc, #56]	; (800914c <TSC2046_HM_Init+0x5c>)
 8009114:	2101      	movs	r1, #1
 8009116:	430a      	orrs	r2, r1
 8009118:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
 800911e:	e00e      	b.n	800913e <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 8009120:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <TSC2046_HM_Init+0x64>)
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	2100      	movs	r1, #0
 8009128:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 800912a:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <TSC2046_HM_Init+0x64>)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	3302      	adds	r3, #2
 8009134:	2200      	movs	r2, #0
 8009136:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3301      	adds	r3, #1
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dded      	ble.n	8009120 <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 8009144:	46c0      	nop			; (mov r8, r8)
 8009146:	46bd      	mov	sp, r7
 8009148:	b002      	add	sp, #8
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40014800 	.word	0x40014800
 8009150:	00000fff 	.word	0x00000fff
 8009154:	20002270 	.word	0x20002270

08009158 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 800915e:	1dfb      	adds	r3, r7, #7
 8009160:	2200      	movs	r2, #0
 8009162:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 8009164:	f7ff ff86 	bl	8009074 <TSC2046_EM_GetTouchScreenState>
 8009168:	0003      	movs	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d138      	bne.n	80091e0 <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 800916e:	f000 f8b7 	bl	80092e0 <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8009172:	2300      	movs	r3, #0
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	e02d      	b.n	80091d4 <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 8009178:	f000 f8a2 	bl	80092c0 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 800917c:	20d0      	movs	r0, #208	; 0xd0
 800917e:	f000 f8c3 	bl	8009308 <_SpiTransmit8>

				_SpiReceive16();								// dummy receive
 8009182:	f000 f8d9 	bl	8009338 <_SpiReceive16>


				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8009186:	20d0      	movs	r0, #208	; 0xd0
 8009188:	f000 f8be 	bl	8009308 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 800918c:	f000 f8d4 	bl	8009338 <_SpiReceive16>
 8009190:	0003      	movs	r3, r0
 8009192:	0019      	movs	r1, r3
 8009194:	4a1a      	ldr	r2, [pc, #104]	; (8009200 <TSC2046_HM_RunConversion+0xa8>)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	18d3      	adds	r3, r2, r3
 800919c:	3302      	adds	r3, #2
 800919e:	1c0a      	adds	r2, r1, #0
 80091a0:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80091a2:	f000 f87f 	bl	80092a4 <_SetCsPinHigh>

				_SetCsPinLow();
 80091a6:	f000 f88b 	bl	80092c0 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80091aa:	2090      	movs	r0, #144	; 0x90
 80091ac:	f000 f8ac 	bl	8009308 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 80091b0:	f000 f8c2 	bl	8009338 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80091b4:	2090      	movs	r0, #144	; 0x90
 80091b6:	f000 f8a7 	bl	8009308 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 80091ba:	f000 f8bd 	bl	8009338 <_SpiReceive16>
 80091be:	0003      	movs	r3, r0
 80091c0:	0019      	movs	r1, r3
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <TSC2046_HM_RunConversion+0xa8>)
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80091ca:	f000 f86b 	bl	80092a4 <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	ddce      	ble.n	8009178 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 80091da:	f000 f813 	bl	8009204 <TSC2046_HM_ConvertToQVGA>
 80091de:	e008      	b.n	80091f2 <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <TSC2046_HM_RunConversion+0xa8>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 80091e6:	4b06      	ldr	r3, [pc, #24]	; (8009200 <TSC2046_HM_RunConversion+0xa8>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 80091ec:	1dfb      	adds	r3, r7, #7
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80091f2:	1dfb      	adds	r3, r7, #7
 80091f4:	781b      	ldrb	r3, [r3, #0]

}
 80091f6:	0018      	movs	r0, r3
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b002      	add	sp, #8
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	20002270 	.word	0x20002270

08009204 <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 800920a:	1dbb      	adds	r3, r7, #6
 800920c:	22a0      	movs	r2, #160	; 0xa0
 800920e:	0052      	lsls	r2, r2, #1
 8009210:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 8009212:	1d3b      	adds	r3, r7, #4
 8009214:	22f0      	movs	r2, #240	; 0xf0
 8009216:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8009218:	4b21      	ldr	r3, [pc, #132]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800921a:	881a      	ldrh	r2, [r3, #0]
 800921c:	1dbb      	adds	r3, r7, #6
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	0019      	movs	r1, r3
 8009222:	0010      	movs	r0, r2
 8009224:	f7f6 ff82 	bl	800012c <__udivsi3>
 8009228:	0003      	movs	r3, r0
 800922a:	b29a      	uxth	r2, r3
 800922c:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800922e:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 8009230:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009232:	885a      	ldrh	r2, [r3, #2]
 8009234:	1d3b      	adds	r3, r7, #4
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	0019      	movs	r1, r3
 800923a:	0010      	movs	r0, r2
 800923c:	f7f6 ff76 	bl	800012c <__udivsi3>
 8009240:	0003      	movs	r3, r0
 8009242:	b29a      	uxth	r2, r3
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009246:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	3b0a      	subs	r3, #10
 800924e:	b29a      	uxth	r2, r3
 8009250:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009252:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 8009254:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009256:	885b      	ldrh	r3, [r3, #2]
 8009258:	3b0a      	subs	r3, #10
 800925a:	b29a      	uxth	r2, r3
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800925e:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009262:	881c      	ldrh	r4, [r3, #0]
 8009264:	1dbb      	adds	r3, r7, #6
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	2150      	movs	r1, #80	; 0x50
 800926a:	0018      	movs	r0, r3
 800926c:	f7f6 ff5e 	bl	800012c <__udivsi3>
 8009270:	0003      	movs	r3, r0
 8009272:	b29b      	uxth	r3, r3
 8009274:	4363      	muls	r3, r4
 8009276:	b29a      	uxth	r2, r3
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800927a:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 800927e:	885c      	ldrh	r4, [r3, #2]
 8009280:	1d3b      	adds	r3, r7, #4
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	2164      	movs	r1, #100	; 0x64
 8009286:	0018      	movs	r0, r3
 8009288:	f7f6 ff50 	bl	800012c <__udivsi3>
 800928c:	0003      	movs	r3, r0
 800928e:	b29b      	uxth	r3, r3
 8009290:	4363      	muls	r3, r4
 8009292:	b29a      	uxth	r2, r3
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8009296:	805a      	strh	r2, [r3, #2]

}
 8009298:	46c0      	nop			; (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	b003      	add	sp, #12
 800929e:	bd90      	pop	{r4, r7, pc}
 80092a0:	20002270 	.word	0x20002270

080092a4 <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 80092a8:	4b04      	ldr	r3, [pc, #16]	; (80092bc <_SetCsPinHigh+0x18>)
 80092aa:	695a      	ldr	r2, [r3, #20]
 80092ac:	4b03      	ldr	r3, [pc, #12]	; (80092bc <_SetCsPinHigh+0x18>)
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	0149      	lsls	r1, r1, #5
 80092b2:	430a      	orrs	r2, r1
 80092b4:	615a      	str	r2, [r3, #20]
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	48000400 	.word	0x48000400

080092c0 <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <_SetCsPinLow+0x18>)
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <_SetCsPinLow+0x18>)
 80092ca:	4904      	ldr	r1, [pc, #16]	; (80092dc <_SetCsPinLow+0x1c>)
 80092cc:	400a      	ands	r2, r1
 80092ce:	615a      	str	r2, [r3, #20]

}
 80092d0:	46c0      	nop			; (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	48000400 	.word	0x48000400
 80092dc:	ffffefff 	.word	0xffffefff

080092e0 <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <_EnableSPI+0x24>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2240      	movs	r2, #64	; 0x40
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d005      	beq.n	80092fc <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 80092f0:	4b04      	ldr	r3, [pc, #16]	; (8009304 <_EnableSPI+0x24>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <_EnableSPI+0x24>)
 80092f6:	2140      	movs	r1, #64	; 0x40
 80092f8:	430a      	orrs	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]

	}

}
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	46c0      	nop			; (mov r8, r8)
 8009304:	40003800 	.word	0x40003800

08009308 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	0002      	movs	r2, r0
 8009310:	1dfb      	adds	r3, r7, #7
 8009312:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <_SpiTransmit8+0x28>)
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2202      	movs	r2, #2
 800931a:	4013      	ands	r3, r2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d103      	bne.n	8009328 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 8009320:	4a04      	ldr	r2, [pc, #16]	; (8009334 <_SpiTransmit8+0x2c>)
 8009322:	1dfb      	adds	r3, r7, #7
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	7013      	strb	r3, [r2, #0]

	}

}
 8009328:	46c0      	nop			; (mov r8, r8)
 800932a:	46bd      	mov	sp, r7
 800932c:	b002      	add	sp, #8
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40003800 	.word	0x40003800
 8009334:	4000380c 	.word	0x4000380c

08009338 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800933e:	1dbb      	adds	r3, r7, #6
 8009340:	2200      	movs	r2, #0
 8009342:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <_SpiReceive16+0x2c>)
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	2201      	movs	r2, #1
 800934a:	4013      	ands	r3, r2
 800934c:	2b01      	cmp	r3, #1
 800934e:	d103      	bne.n	8009358 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <_SpiReceive16+0x2c>)
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	1dbb      	adds	r3, r7, #6
 8009356:	801a      	strh	r2, [r3, #0]

	}
	return data;
 8009358:	1dbb      	adds	r3, r7, #6
 800935a:	881b      	ldrh	r3, [r3, #0]
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b002      	add	sp, #8
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40003800 	.word	0x40003800

08009368 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <TSC4026_STM32_HM_GetXpos+0x10>)
 800936e:	881b      	ldrh	r3, [r3, #0]
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	20002270 	.word	0x20002270

0800937c <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <TSC4026_STM32_HM_GetYpos+0x10>)
 8009382:	885b      	ldrh	r3, [r3, #2]
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	20002270 	.word	0x20002270

08009390 <_togglePSU>:
 *
 */
#ifdef USE_FREERTOS

void _togglePSU()
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
	// turn on PSU
	if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <_togglePSU+0x34>)
 8009396:	2108      	movs	r1, #8
 8009398:	0018      	movs	r0, r3
 800939a:	f7fa fcb7 	bl	8003d0c <HAL_GPIO_ReadPin>
 800939e:	0003      	movs	r3, r0
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d106      	bne.n	80093b2 <_togglePSU+0x22>
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_RESET);
 80093a4:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <_togglePSU+0x34>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	2108      	movs	r1, #8
 80093aa:	0018      	movs	r0, r3
 80093ac:	f7fa fccb 	bl	8003d46 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_SET);

	}
}
 80093b0:	e005      	b.n	80093be <_togglePSU+0x2e>
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_SET);
 80093b2:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <_togglePSU+0x34>)
 80093b4:	2201      	movs	r2, #1
 80093b6:	2108      	movs	r1, #8
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fa fcc4 	bl	8003d46 <HAL_GPIO_WritePin>
}
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	48000400 	.word	0x48000400

080093c8 <UserPenIrqManager>:

void UserPenIrqManager()
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0

	UserDisplayTask();
 80093cc:	f000 f856 	bl	800947c <UserDisplayTask>

	while(1)
	{
		if(myBinarySem01Handle != NULL)
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <UserPenIrqManager+0x28>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0fb      	beq.n	80093d0 <UserPenIrqManager+0x8>
		{
			osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <UserPenIrqManager+0x28>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	2301      	movs	r3, #1
 80093de:	425b      	negs	r3, r3
 80093e0:	0019      	movs	r1, r3
 80093e2:	0010      	movs	r0, r2
 80093e4:	f7fc fe98 	bl	8006118 <osSemaphoreWait>

			_togglePSU();
 80093e8:	f7ff ffd2 	bl	8009390 <_togglePSU>
		if(myBinarySem01Handle != NULL)
 80093ec:	e7f0      	b.n	80093d0 <UserPenIrqManager+0x8>
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	200018b8 	.word	0x200018b8

080093f4 <UserDisplayManager>:
		}
	}
}

void UserDisplayManager()
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0

	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);
 80093f8:	4b08      	ldr	r3, [pc, #32]	; (800941c <UserDisplayManager+0x28>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2164      	movs	r1, #100	; 0x64
 80093fe:	0018      	movs	r0, r3
 8009400:	f7fc fe8a 	bl	8006118 <osSemaphoreWait>

		// update display
		UserDisplayTask();
 8009404:	f000 f83a 	bl	800947c <UserDisplayTask>

		osSemaphoreRelease(myBinarySem02Handle);
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <UserDisplayManager+0x28>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	0018      	movs	r0, r3
 800940e:	f7fc fecd 	bl	80061ac <osSemaphoreRelease>
		osThreadSuspend(NULL);
 8009412:	2000      	movs	r0, #0
 8009414:	f7fc fefc 	bl	8006210 <osThreadSuspend>
		osSemaphoreWait(myBinarySem02Handle, 100);
 8009418:	e7ee      	b.n	80093f8 <UserDisplayManager+0x4>
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	20000e50 	.word	0x20000e50

08009420 <UserAdcManager>:
	}
}

void UserAdcManager()
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0

	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);
 8009424:	4b09      	ldr	r3, [pc, #36]	; (800944c <UserAdcManager+0x2c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2164      	movs	r1, #100	; 0x64
 800942a:	0018      	movs	r0, r3
 800942c:	f7fc fe74 	bl	8006118 <osSemaphoreWait>

		UserAdcTask();
 8009430:	f000 f8ba 	bl	80095a8 <UserAdcTask>

		osThreadResume(DisplayTaskHandle);
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <UserAdcManager+0x30>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	0018      	movs	r0, r3
 800943a:	f7fc fef7 	bl	800622c <osThreadResume>
		osSemaphoreRelease(myBinarySem02Handle);
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <UserAdcManager+0x2c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	0018      	movs	r0, r3
 8009444:	f7fc feb2 	bl	80061ac <osSemaphoreRelease>
		osSemaphoreWait(myBinarySem02Handle, 100);
 8009448:	e7ec      	b.n	8009424 <UserAdcManager+0x4>
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	20000e50 	.word	0x20000e50
 8009450:	200018bc 	.word	0x200018bc

08009454 <HAL_GPIO_EXTI_Callback>:


#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	0002      	movs	r2, r0
 800945c:	1dbb      	adds	r3, r7, #6
 800945e:	801a      	strh	r2, [r3, #0]



	#ifdef USE_FREERTOS
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 8009460:	2001      	movs	r0, #1
 8009462:	f7ff fe11 	bl	8009088 <TSC2046_EM_ProcessEvent>
		//xQueueGenericSendFromISR(xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition)

		osSemaphoreRelease(myBinarySem01Handle);
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <HAL_GPIO_EXTI_Callback+0x24>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	0018      	movs	r0, r3
 800946c:	f7fc fe9e 	bl	80061ac <osSemaphoreRelease>
	#else
		TSC2046_IM_PENIRQ_EXTI_Handler();
	#endif

}
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b002      	add	sp, #8
 8009476:	bd80      	pop	{r7, pc}
 8009478:	200018b8 	.word	0x200018b8

0800947c <UserDisplayTask>:



void UserDisplayTask()
{
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	af02      	add	r7, sp, #8

#ifdef USE_FREERTOS
	// make sure UserDisplayTask() is not interrupted
	EXTI->IMR &= ~(TS_IRQ_Pin);
 8009482:	4b3e      	ldr	r3, [pc, #248]	; (800957c <UserDisplayTask+0x100>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b3d      	ldr	r3, [pc, #244]	; (800957c <UserDisplayTask+0x100>)
 8009488:	2140      	movs	r1, #64	; 0x40
 800948a:	438a      	bics	r2, r1
 800948c:	601a      	str	r2, [r3, #0]
#endif

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
 800948e:	f7ff fdf1 	bl	8009074 <TSC2046_EM_GetTouchScreenState>
 8009492:	1e03      	subs	r3, r0, #0
 8009494:	d03e      	beq.n	8009514 <UserDisplayTask+0x98>
	   {
		 ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 8009496:	483a      	ldr	r0, [pc, #232]	; (8009580 <UserDisplayTask+0x104>)
 8009498:	4b3a      	ldr	r3, [pc, #232]	; (8009584 <UserDisplayTask+0x108>)
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	2302      	movs	r3, #2
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	2300      	movs	r3, #0
 80094a2:	220a      	movs	r2, #10
 80094a4:	2164      	movs	r1, #100	; 0x64
 80094a6:	f7fe fea5 	bl	80081f4 <ILI9341_Draw_Text>



		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 80094aa:	f7ff fe55 	bl	8009158 <TSC2046_HM_RunConversion>
 80094ae:	1e03      	subs	r3, r0, #0
 80094b0:	d125      	bne.n	80094fe <UserDisplayTask+0x82>
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 80094b2:	f7ff ff59 	bl	8009368 <TSC4026_STM32_HM_GetXpos>
 80094b6:	0003      	movs	r3, r0
 80094b8:	001c      	movs	r4, r3
 80094ba:	f7ff ff5f 	bl	800937c <TSC4026_STM32_HM_GetYpos>
 80094be:	0003      	movs	r3, r0
 80094c0:	0019      	movs	r1, r3
 80094c2:	4b31      	ldr	r3, [pc, #196]	; (8009588 <UserDisplayTask+0x10c>)
 80094c4:	2202      	movs	r2, #2
 80094c6:	0020      	movs	r0, r4
 80094c8:	f7fe fcf2 	bl	8007eb0 <ILI9341_Draw_Filled_Circle>
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 80094cc:	f7ff ff4c 	bl	8009368 <TSC4026_STM32_HM_GetXpos>
 80094d0:	0003      	movs	r3, r0
 80094d2:	001c      	movs	r4, r3
 80094d4:	f7ff ff52 	bl	800937c <TSC4026_STM32_HM_GetYpos>
 80094d8:	0003      	movs	r3, r0
 80094da:	4a2c      	ldr	r2, [pc, #176]	; (800958c <UserDisplayTask+0x110>)
 80094dc:	0038      	movs	r0, r7
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	0023      	movs	r3, r4
 80094e2:	210f      	movs	r1, #15
 80094e4:	f001 f89c 	bl	800a620 <sniprintf>
		   ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 80094e8:	0038      	movs	r0, r7
 80094ea:	4b26      	ldr	r3, [pc, #152]	; (8009584 <UserDisplayTask+0x108>)
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	2302      	movs	r3, #2
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	2300      	movs	r3, #0
 80094f4:	220a      	movs	r2, #10
 80094f6:	21b4      	movs	r1, #180	; 0xb4
 80094f8:	f7fe fe7c 	bl	80081f4 <ILI9341_Draw_Text>
 80094fc:	e014      	b.n	8009528 <UserDisplayTask+0xac>
		 }
		 else
		 {
		   ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 80094fe:	4824      	ldr	r0, [pc, #144]	; (8009590 <UserDisplayTask+0x114>)
 8009500:	4b20      	ldr	r3, [pc, #128]	; (8009584 <UserDisplayTask+0x108>)
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	2302      	movs	r3, #2
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	220a      	movs	r2, #10
 800950c:	21c8      	movs	r1, #200	; 0xc8
 800950e:	f7fe fe71 	bl	80081f4 <ILI9341_Draw_Text>
 8009512:	e009      	b.n	8009528 <UserDisplayTask+0xac>
		 }
	   }

	   else
	   {
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 8009514:	481f      	ldr	r0, [pc, #124]	; (8009594 <UserDisplayTask+0x118>)
 8009516:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <UserDisplayTask+0x108>)
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	2302      	movs	r3, #2
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	220a      	movs	r2, #10
 8009522:	2164      	movs	r1, #100	; 0x64
 8009524:	f7fe fe66 	bl	80081f4 <ILI9341_Draw_Text>
	   }

	   // update screen ON/OFF label
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8009528:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <UserDisplayTask+0x11c>)
 800952a:	2108      	movs	r1, #8
 800952c:	0018      	movs	r0, r3
 800952e:	f7fa fbed 	bl	8003d0c <HAL_GPIO_ReadPin>
 8009532:	0003      	movs	r3, r0
 8009534:	2b01      	cmp	r3, #1
 8009536:	d10a      	bne.n	800954e <UserDisplayTask+0xd2>
	   {
		   ILI9341_Draw_Text("ON ", 10, 50, BLACK, 3, GREEN);
 8009538:	4818      	ldr	r0, [pc, #96]	; (800959c <UserDisplayTask+0x120>)
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <UserDisplayTask+0x124>)
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	2303      	movs	r3, #3
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	2300      	movs	r3, #0
 8009544:	2232      	movs	r2, #50	; 0x32
 8009546:	210a      	movs	r1, #10
 8009548:	f7fe fe54 	bl	80081f4 <ILI9341_Draw_Text>
 800954c:	e009      	b.n	8009562 <UserDisplayTask+0xe6>
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 10, 50, BLACK, 3, RED);
 800954e:	4815      	ldr	r0, [pc, #84]	; (80095a4 <UserDisplayTask+0x128>)
 8009550:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <UserDisplayTask+0x108>)
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2303      	movs	r3, #3
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	2232      	movs	r2, #50	; 0x32
 800955c:	210a      	movs	r1, #10
 800955e:	f7fe fe49 	bl	80081f4 <ILI9341_Draw_Text>
	   }

#ifdef USE_FREERTOS
		// clear bit and resume EXTI
		__HAL_GPIO_EXTI_CLEAR_IT(TS_IRQ_Pin);
 8009562:	4b06      	ldr	r3, [pc, #24]	; (800957c <UserDisplayTask+0x100>)
 8009564:	2240      	movs	r2, #64	; 0x40
 8009566:	615a      	str	r2, [r3, #20]
		EXTI->IMR |= (TS_IRQ_Pin);
 8009568:	4b04      	ldr	r3, [pc, #16]	; (800957c <UserDisplayTask+0x100>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	4b03      	ldr	r3, [pc, #12]	; (800957c <UserDisplayTask+0x100>)
 800956e:	2140      	movs	r1, #64	; 0x40
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]
#endif

}
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	46bd      	mov	sp, r7
 8009578:	b005      	add	sp, #20
 800957a:	bd90      	pop	{r4, r7, pc}
 800957c:	40010400 	.word	0x40010400
 8009580:	0800d468 	.word	0x0800d468
 8009584:	0000d8c3 	.word	0x0000d8c3
 8009588:	0000ffff 	.word	0x0000ffff
 800958c:	0800d470 	.word	0x0800d470
 8009590:	0800d480 	.word	0x0800d480
 8009594:	0800d48c 	.word	0x0800d48c
 8009598:	48000400 	.word	0x48000400
 800959c:	0800d494 	.word	0x0800d494
 80095a0:	000014a2 	.word	0x000014a2
 80095a4:	0800d498 	.word	0x0800d498

080095a8 <UserAdcTask>:

void UserAdcTask()
{
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af02      	add	r7, sp, #8
		// if PSU enabled, poll imonitor pin
		if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 80095ae:	4b34      	ldr	r3, [pc, #208]	; (8009680 <UserAdcTask+0xd8>)
 80095b0:	2108      	movs	r1, #8
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7fa fbaa 	bl	8003d0c <HAL_GPIO_ReadPin>
 80095b8:	0003      	movs	r3, r0
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d142      	bne.n	8009644 <UserAdcTask+0x9c>
		{
		   if(HAL_ADC_PollForConversion(&hadc, 1) == HAL_OK)
 80095be:	4b31      	ldr	r3, [pc, #196]	; (8009684 <UserAdcTask+0xdc>)
 80095c0:	2101      	movs	r1, #1
 80095c2:	0018      	movs	r0, r3
 80095c4:	f7f9 fe86 	bl	80032d4 <HAL_ADC_PollForConversion>
 80095c8:	1e03      	subs	r3, r0, #0
 80095ca:	d13e      	bne.n	800964a <UserAdcTask+0xa2>
		   {
			   if(adc_count == ADC_DATA_SIZE)			// calc adc mean, reset adc data + count
 80095cc:	4b2e      	ldr	r3, [pc, #184]	; (8009688 <UserAdcTask+0xe0>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	0018      	movs	r0, r3
 80095d2:	f7f8 fcef 	bl	8001fb4 <__aeabi_i2d>
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b2c      	ldr	r3, [pc, #176]	; (800968c <UserAdcTask+0xe4>)
 80095da:	f7f6 ff2d 	bl	8000438 <__aeabi_dcmpeq>
 80095de:	1e03      	subs	r3, r0, #0
 80095e0:	d01f      	beq.n	8009622 <UserAdcTask+0x7a>
			   {

#ifdef USE_FLOAT
				   final_adc_data = (float)adc_data / ADC_DATA_SIZE;
 80095e2:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <UserAdcTask+0xe8>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f7f6 ff72 	bl	80004d0 <__aeabi_ui2f>
 80095ec:	1c02      	adds	r2, r0, #0
 80095ee:	4b29      	ldr	r3, [pc, #164]	; (8009694 <UserAdcTask+0xec>)
 80095f0:	601a      	str	r2, [r3, #0]
				   final_adc_data = final_adc_data * ADC_TO_VOLTS_RES;		// convert to decimal
 80095f2:	4b28      	ldr	r3, [pc, #160]	; (8009694 <UserAdcTask+0xec>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	1c18      	adds	r0, r3, #0
 80095f8:	f7f8 fd48 	bl	800208c <__aeabi_f2d>
 80095fc:	4a26      	ldr	r2, [pc, #152]	; (8009698 <UserAdcTask+0xf0>)
 80095fe:	4b27      	ldr	r3, [pc, #156]	; (800969c <UserAdcTask+0xf4>)
 8009600:	f7f7 fecc 	bl	800139c <__aeabi_dmul>
 8009604:	0003      	movs	r3, r0
 8009606:	000c      	movs	r4, r1
 8009608:	0018      	movs	r0, r3
 800960a:	0021      	movs	r1, r4
 800960c:	f7f8 fd90 	bl	8002130 <__aeabi_d2f>
 8009610:	1c02      	adds	r2, r0, #0
 8009612:	4b20      	ldr	r3, [pc, #128]	; (8009694 <UserAdcTask+0xec>)
 8009614:	601a      	str	r2, [r3, #0]
#else
				   final_adc_data = adc_data / ADC_DATA_SIZE;

#endif	//USE_FLOAT
				   adc_data = 0;						// clear the total
 8009616:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <UserAdcTask+0xe8>)
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
				   adc_count = 0;
 800961c:	4b1a      	ldr	r3, [pc, #104]	; (8009688 <UserAdcTask+0xe0>)
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
			   }

			   adc_data += HAL_ADC_GetValue(&hadc);		// add next read value to total
 8009622:	4b18      	ldr	r3, [pc, #96]	; (8009684 <UserAdcTask+0xdc>)
 8009624:	0018      	movs	r0, r3
 8009626:	f7f9 fee7 	bl	80033f8 <HAL_ADC_GetValue>
 800962a:	0002      	movs	r2, r0
 800962c:	4b18      	ldr	r3, [pc, #96]	; (8009690 <UserAdcTask+0xe8>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	18d2      	adds	r2, r2, r3
 8009632:	4b17      	ldr	r3, [pc, #92]	; (8009690 <UserAdcTask+0xe8>)
 8009634:	601a      	str	r2, [r3, #0]
			   adc_count++;
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <UserAdcTask+0xe0>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	b2da      	uxtb	r2, r3
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <UserAdcTask+0xe0>)
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e002      	b.n	800964a <UserAdcTask+0xa2>
		   }
		}
		else
		{
			final_adc_data = 0;
 8009644:	4b13      	ldr	r3, [pc, #76]	; (8009694 <UserAdcTask+0xec>)
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
		}

#ifdef USE_FLOAT
		char imon_string[12];
		sprintf(imon_string, "%f mV", final_adc_data);
 800964a:	4b12      	ldr	r3, [pc, #72]	; (8009694 <UserAdcTask+0xec>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	1c18      	adds	r0, r3, #0
 8009650:	f7f8 fd1c 	bl	800208c <__aeabi_f2d>
 8009654:	0003      	movs	r3, r0
 8009656:	000c      	movs	r4, r1
 8009658:	4911      	ldr	r1, [pc, #68]	; (80096a0 <UserAdcTask+0xf8>)
 800965a:	1d38      	adds	r0, r7, #4
 800965c:	001a      	movs	r2, r3
 800965e:	0023      	movs	r3, r4
 8009660:	f001 f810 	bl	800a684 <siprintf>
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
 8009664:	1d38      	adds	r0, r7, #4
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <UserAdcTask+0xfc>)
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	2303      	movs	r3, #3
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	2300      	movs	r3, #0
 8009670:	2264      	movs	r2, #100	; 0x64
 8009672:	210a      	movs	r1, #10
 8009674:	f7fe fdbe 	bl	80081f4 <ILI9341_Draw_Text>
		snprintf(imon_string, sizeof(imon_string), "%lu mV", final_adc_data);
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
#endif	//USE_FLOAT


}
 8009678:	46c0      	nop			; (mov r8, r8)
 800967a:	46bd      	mov	sp, r7
 800967c:	b005      	add	sp, #20
 800967e:	bd90      	pop	{r4, r7, pc}
 8009680:	48000400 	.word	0x48000400
 8009684:	20000608 	.word	0x20000608
 8009688:	200005fc 	.word	0x200005fc
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	200005f8 	.word	0x200005f8
 8009694:	200005f4 	.word	0x200005f4
 8009698:	1416377a 	.word	0x1416377a
 800969c:	3f5a6506 	.word	0x3f5a6506
 80096a0:	0800d49c 	.word	0x0800d49c
 80096a4:	0000d8c3 	.word	0x0000d8c3

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	2600      	movs	r6, #0
 80096ac:	4d0c      	ldr	r5, [pc, #48]	; (80096e0 <__libc_init_array+0x38>)
 80096ae:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096b0:	1b64      	subs	r4, r4, r5
 80096b2:	10a4      	asrs	r4, r4, #2
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	2600      	movs	r6, #0
 80096ba:	f003 fe6b 	bl	800d394 <_init>
 80096be:	4d0a      	ldr	r5, [pc, #40]	; (80096e8 <__libc_init_array+0x40>)
 80096c0:	4c0a      	ldr	r4, [pc, #40]	; (80096ec <__libc_init_array+0x44>)
 80096c2:	1b64      	subs	r4, r4, r5
 80096c4:	10a4      	asrs	r4, r4, #2
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	00b3      	lsls	r3, r6, #2
 80096ce:	58eb      	ldr	r3, [r5, r3]
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	00b3      	lsls	r3, r6, #2
 80096d8:	58eb      	ldr	r3, [r5, r3]
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	0800da88 	.word	0x0800da88
 80096e4:	0800da88 	.word	0x0800da88
 80096e8:	0800da88 	.word	0x0800da88
 80096ec:	0800da8c 	.word	0x0800da8c

080096f0 <malloc>:
 80096f0:	b510      	push	{r4, lr}
 80096f2:	4b03      	ldr	r3, [pc, #12]	; (8009700 <malloc+0x10>)
 80096f4:	0001      	movs	r1, r0
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	f000 f860 	bl	80097bc <_malloc_r>
 80096fc:	bd10      	pop	{r4, pc}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	2000001c 	.word	0x2000001c

08009704 <memcpy>:
 8009704:	2300      	movs	r3, #0
 8009706:	b510      	push	{r4, lr}
 8009708:	429a      	cmp	r2, r3
 800970a:	d100      	bne.n	800970e <memcpy+0xa>
 800970c:	bd10      	pop	{r4, pc}
 800970e:	5ccc      	ldrb	r4, [r1, r3]
 8009710:	54c4      	strb	r4, [r0, r3]
 8009712:	3301      	adds	r3, #1
 8009714:	e7f8      	b.n	8009708 <memcpy+0x4>

08009716 <memset>:
 8009716:	0003      	movs	r3, r0
 8009718:	1812      	adds	r2, r2, r0
 800971a:	4293      	cmp	r3, r2
 800971c:	d100      	bne.n	8009720 <memset+0xa>
 800971e:	4770      	bx	lr
 8009720:	7019      	strb	r1, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	e7f9      	b.n	800971a <memset+0x4>
	...

08009728 <_free_r>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	0005      	movs	r5, r0
 800972c:	2900      	cmp	r1, #0
 800972e:	d010      	beq.n	8009752 <_free_r+0x2a>
 8009730:	1f0c      	subs	r4, r1, #4
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da00      	bge.n	800973a <_free_r+0x12>
 8009738:	18e4      	adds	r4, r4, r3
 800973a:	0028      	movs	r0, r5
 800973c:	f7f8 ffe2 	bl	8002704 <__malloc_lock>
 8009740:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <_free_r+0x90>)
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d105      	bne.n	8009754 <_free_r+0x2c>
 8009748:	6063      	str	r3, [r4, #4]
 800974a:	6014      	str	r4, [r2, #0]
 800974c:	0028      	movs	r0, r5
 800974e:	f7f8 ffe3 	bl	8002718 <__malloc_unlock>
 8009752:	bd70      	pop	{r4, r5, r6, pc}
 8009754:	42a3      	cmp	r3, r4
 8009756:	d909      	bls.n	800976c <_free_r+0x44>
 8009758:	6821      	ldr	r1, [r4, #0]
 800975a:	1860      	adds	r0, r4, r1
 800975c:	4283      	cmp	r3, r0
 800975e:	d1f3      	bne.n	8009748 <_free_r+0x20>
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	1841      	adds	r1, r0, r1
 8009766:	6021      	str	r1, [r4, #0]
 8009768:	e7ee      	b.n	8009748 <_free_r+0x20>
 800976a:	0013      	movs	r3, r2
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	2a00      	cmp	r2, #0
 8009770:	d001      	beq.n	8009776 <_free_r+0x4e>
 8009772:	42a2      	cmp	r2, r4
 8009774:	d9f9      	bls.n	800976a <_free_r+0x42>
 8009776:	6819      	ldr	r1, [r3, #0]
 8009778:	1858      	adds	r0, r3, r1
 800977a:	42a0      	cmp	r0, r4
 800977c:	d10b      	bne.n	8009796 <_free_r+0x6e>
 800977e:	6820      	ldr	r0, [r4, #0]
 8009780:	1809      	adds	r1, r1, r0
 8009782:	1858      	adds	r0, r3, r1
 8009784:	6019      	str	r1, [r3, #0]
 8009786:	4282      	cmp	r2, r0
 8009788:	d1e0      	bne.n	800974c <_free_r+0x24>
 800978a:	6810      	ldr	r0, [r2, #0]
 800978c:	6852      	ldr	r2, [r2, #4]
 800978e:	1841      	adds	r1, r0, r1
 8009790:	6019      	str	r1, [r3, #0]
 8009792:	605a      	str	r2, [r3, #4]
 8009794:	e7da      	b.n	800974c <_free_r+0x24>
 8009796:	42a0      	cmp	r0, r4
 8009798:	d902      	bls.n	80097a0 <_free_r+0x78>
 800979a:	230c      	movs	r3, #12
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	e7d5      	b.n	800974c <_free_r+0x24>
 80097a0:	6821      	ldr	r1, [r4, #0]
 80097a2:	1860      	adds	r0, r4, r1
 80097a4:	4282      	cmp	r2, r0
 80097a6:	d103      	bne.n	80097b0 <_free_r+0x88>
 80097a8:	6810      	ldr	r0, [r2, #0]
 80097aa:	6852      	ldr	r2, [r2, #4]
 80097ac:	1841      	adds	r1, r0, r1
 80097ae:	6021      	str	r1, [r4, #0]
 80097b0:	6062      	str	r2, [r4, #4]
 80097b2:	605c      	str	r4, [r3, #4]
 80097b4:	e7ca      	b.n	800974c <_free_r+0x24>
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	20000600 	.word	0x20000600

080097bc <_malloc_r>:
 80097bc:	2303      	movs	r3, #3
 80097be:	b570      	push	{r4, r5, r6, lr}
 80097c0:	1ccd      	adds	r5, r1, #3
 80097c2:	439d      	bics	r5, r3
 80097c4:	3508      	adds	r5, #8
 80097c6:	0006      	movs	r6, r0
 80097c8:	2d0c      	cmp	r5, #12
 80097ca:	d21e      	bcs.n	800980a <_malloc_r+0x4e>
 80097cc:	250c      	movs	r5, #12
 80097ce:	42a9      	cmp	r1, r5
 80097d0:	d81d      	bhi.n	800980e <_malloc_r+0x52>
 80097d2:	0030      	movs	r0, r6
 80097d4:	f7f8 ff96 	bl	8002704 <__malloc_lock>
 80097d8:	4a25      	ldr	r2, [pc, #148]	; (8009870 <_malloc_r+0xb4>)
 80097da:	6814      	ldr	r4, [r2, #0]
 80097dc:	0021      	movs	r1, r4
 80097de:	2900      	cmp	r1, #0
 80097e0:	d119      	bne.n	8009816 <_malloc_r+0x5a>
 80097e2:	4c24      	ldr	r4, [pc, #144]	; (8009874 <_malloc_r+0xb8>)
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <_malloc_r+0x36>
 80097ea:	0030      	movs	r0, r6
 80097ec:	f7f8 ff2c 	bl	8002648 <_sbrk_r>
 80097f0:	6020      	str	r0, [r4, #0]
 80097f2:	0029      	movs	r1, r5
 80097f4:	0030      	movs	r0, r6
 80097f6:	f7f8 ff27 	bl	8002648 <_sbrk_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d12b      	bne.n	8009856 <_malloc_r+0x9a>
 80097fe:	230c      	movs	r3, #12
 8009800:	0030      	movs	r0, r6
 8009802:	6033      	str	r3, [r6, #0]
 8009804:	f7f8 ff88 	bl	8002718 <__malloc_unlock>
 8009808:	e003      	b.n	8009812 <_malloc_r+0x56>
 800980a:	2d00      	cmp	r5, #0
 800980c:	dadf      	bge.n	80097ce <_malloc_r+0x12>
 800980e:	230c      	movs	r3, #12
 8009810:	6033      	str	r3, [r6, #0]
 8009812:	2000      	movs	r0, #0
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	1b5b      	subs	r3, r3, r5
 800981a:	d419      	bmi.n	8009850 <_malloc_r+0x94>
 800981c:	2b0b      	cmp	r3, #11
 800981e:	d903      	bls.n	8009828 <_malloc_r+0x6c>
 8009820:	600b      	str	r3, [r1, #0]
 8009822:	18cc      	adds	r4, r1, r3
 8009824:	6025      	str	r5, [r4, #0]
 8009826:	e003      	b.n	8009830 <_malloc_r+0x74>
 8009828:	684b      	ldr	r3, [r1, #4]
 800982a:	428c      	cmp	r4, r1
 800982c:	d10d      	bne.n	800984a <_malloc_r+0x8e>
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	0030      	movs	r0, r6
 8009832:	f7f8 ff71 	bl	8002718 <__malloc_unlock>
 8009836:	0020      	movs	r0, r4
 8009838:	2207      	movs	r2, #7
 800983a:	300b      	adds	r0, #11
 800983c:	1d23      	adds	r3, r4, #4
 800983e:	4390      	bics	r0, r2
 8009840:	1ac3      	subs	r3, r0, r3
 8009842:	d0e7      	beq.n	8009814 <_malloc_r+0x58>
 8009844:	425a      	negs	r2, r3
 8009846:	50e2      	str	r2, [r4, r3]
 8009848:	e7e4      	b.n	8009814 <_malloc_r+0x58>
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	000c      	movs	r4, r1
 800984e:	e7ef      	b.n	8009830 <_malloc_r+0x74>
 8009850:	000c      	movs	r4, r1
 8009852:	6849      	ldr	r1, [r1, #4]
 8009854:	e7c3      	b.n	80097de <_malloc_r+0x22>
 8009856:	2303      	movs	r3, #3
 8009858:	1cc4      	adds	r4, r0, #3
 800985a:	439c      	bics	r4, r3
 800985c:	42a0      	cmp	r0, r4
 800985e:	d0e1      	beq.n	8009824 <_malloc_r+0x68>
 8009860:	1a21      	subs	r1, r4, r0
 8009862:	0030      	movs	r0, r6
 8009864:	f7f8 fef0 	bl	8002648 <_sbrk_r>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d1db      	bne.n	8009824 <_malloc_r+0x68>
 800986c:	e7c7      	b.n	80097fe <_malloc_r+0x42>
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	20000600 	.word	0x20000600
 8009874:	20000604 	.word	0x20000604

08009878 <__cvt>:
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987a:	b08b      	sub	sp, #44	; 0x2c
 800987c:	0014      	movs	r4, r2
 800987e:	1e1d      	subs	r5, r3, #0
 8009880:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009882:	da53      	bge.n	800992c <__cvt+0xb4>
 8009884:	2480      	movs	r4, #128	; 0x80
 8009886:	0624      	lsls	r4, r4, #24
 8009888:	191b      	adds	r3, r3, r4
 800988a:	001d      	movs	r5, r3
 800988c:	0014      	movs	r4, r2
 800988e:	232d      	movs	r3, #45	; 0x2d
 8009890:	700b      	strb	r3, [r1, #0]
 8009892:	2320      	movs	r3, #32
 8009894:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009896:	2203      	movs	r2, #3
 8009898:	439e      	bics	r6, r3
 800989a:	2e46      	cmp	r6, #70	; 0x46
 800989c:	d007      	beq.n	80098ae <__cvt+0x36>
 800989e:	0033      	movs	r3, r6
 80098a0:	3b45      	subs	r3, #69	; 0x45
 80098a2:	4259      	negs	r1, r3
 80098a4:	414b      	adcs	r3, r1
 80098a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80098a8:	3a01      	subs	r2, #1
 80098aa:	18cb      	adds	r3, r1, r3
 80098ac:	9310      	str	r3, [sp, #64]	; 0x40
 80098ae:	ab09      	add	r3, sp, #36	; 0x24
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	ab08      	add	r3, sp, #32
 80098b4:	9303      	str	r3, [sp, #12]
 80098b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098b8:	9200      	str	r2, [sp, #0]
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098be:	0022      	movs	r2, r4
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	002b      	movs	r3, r5
 80098c4:	f001 fe64 	bl	800b590 <_dtoa_r>
 80098c8:	0007      	movs	r7, r0
 80098ca:	2e47      	cmp	r6, #71	; 0x47
 80098cc:	d102      	bne.n	80098d4 <__cvt+0x5c>
 80098ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d0:	07db      	lsls	r3, r3, #31
 80098d2:	d524      	bpl.n	800991e <__cvt+0xa6>
 80098d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	9307      	str	r3, [sp, #28]
 80098da:	2e46      	cmp	r6, #70	; 0x46
 80098dc:	d114      	bne.n	8009908 <__cvt+0x90>
 80098de:	783b      	ldrb	r3, [r7, #0]
 80098e0:	2b30      	cmp	r3, #48	; 0x30
 80098e2:	d10c      	bne.n	80098fe <__cvt+0x86>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	0020      	movs	r0, r4
 80098ea:	0029      	movs	r1, r5
 80098ec:	f7f6 fda4 	bl	8000438 <__aeabi_dcmpeq>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d104      	bne.n	80098fe <__cvt+0x86>
 80098f4:	2301      	movs	r3, #1
 80098f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009900:	9a07      	ldr	r2, [sp, #28]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	18d3      	adds	r3, r2, r3
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	0020      	movs	r0, r4
 800990e:	0029      	movs	r1, r5
 8009910:	f7f6 fd92 	bl	8000438 <__aeabi_dcmpeq>
 8009914:	2230      	movs	r2, #48	; 0x30
 8009916:	2800      	cmp	r0, #0
 8009918:	d00d      	beq.n	8009936 <__cvt+0xbe>
 800991a:	9b07      	ldr	r3, [sp, #28]
 800991c:	9309      	str	r3, [sp, #36]	; 0x24
 800991e:	0038      	movs	r0, r7
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009924:	1bdb      	subs	r3, r3, r7
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	b00b      	add	sp, #44	; 0x2c
 800992a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992c:	2300      	movs	r3, #0
 800992e:	e7af      	b.n	8009890 <__cvt+0x18>
 8009930:	1c59      	adds	r1, r3, #1
 8009932:	9109      	str	r1, [sp, #36]	; 0x24
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009938:	9907      	ldr	r1, [sp, #28]
 800993a:	428b      	cmp	r3, r1
 800993c:	d3f8      	bcc.n	8009930 <__cvt+0xb8>
 800993e:	e7ee      	b.n	800991e <__cvt+0xa6>

08009940 <__exponent>:
 8009940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009942:	1c83      	adds	r3, r0, #2
 8009944:	b085      	sub	sp, #20
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	0006      	movs	r6, r0
 800994a:	000c      	movs	r4, r1
 800994c:	7002      	strb	r2, [r0, #0]
 800994e:	232b      	movs	r3, #43	; 0x2b
 8009950:	2900      	cmp	r1, #0
 8009952:	da01      	bge.n	8009958 <__exponent+0x18>
 8009954:	232d      	movs	r3, #45	; 0x2d
 8009956:	424c      	negs	r4, r1
 8009958:	7073      	strb	r3, [r6, #1]
 800995a:	2c09      	cmp	r4, #9
 800995c:	dd22      	ble.n	80099a4 <__exponent+0x64>
 800995e:	ab02      	add	r3, sp, #8
 8009960:	1ddd      	adds	r5, r3, #7
 8009962:	0020      	movs	r0, r4
 8009964:	210a      	movs	r1, #10
 8009966:	f7f6 fd51 	bl	800040c <__aeabi_idivmod>
 800996a:	1e6f      	subs	r7, r5, #1
 800996c:	3130      	adds	r1, #48	; 0x30
 800996e:	7039      	strb	r1, [r7, #0]
 8009970:	0020      	movs	r0, r4
 8009972:	210a      	movs	r1, #10
 8009974:	f7f6 fc64 	bl	8000240 <__divsi3>
 8009978:	0004      	movs	r4, r0
 800997a:	2809      	cmp	r0, #9
 800997c:	dc0b      	bgt.n	8009996 <__exponent+0x56>
 800997e:	3d02      	subs	r5, #2
 8009980:	3430      	adds	r4, #48	; 0x30
 8009982:	9b01      	ldr	r3, [sp, #4]
 8009984:	702c      	strb	r4, [r5, #0]
 8009986:	aa02      	add	r2, sp, #8
 8009988:	3207      	adds	r2, #7
 800998a:	0018      	movs	r0, r3
 800998c:	42aa      	cmp	r2, r5
 800998e:	d804      	bhi.n	800999a <__exponent+0x5a>
 8009990:	1b80      	subs	r0, r0, r6
 8009992:	b005      	add	sp, #20
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009996:	003d      	movs	r5, r7
 8009998:	e7e3      	b.n	8009962 <__exponent+0x22>
 800999a:	782a      	ldrb	r2, [r5, #0]
 800999c:	3501      	adds	r5, #1
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	e7f0      	b.n	8009986 <__exponent+0x46>
 80099a4:	2330      	movs	r3, #48	; 0x30
 80099a6:	18e4      	adds	r4, r4, r3
 80099a8:	70b3      	strb	r3, [r6, #2]
 80099aa:	1d30      	adds	r0, r6, #4
 80099ac:	70f4      	strb	r4, [r6, #3]
 80099ae:	e7ef      	b.n	8009990 <__exponent+0x50>

080099b0 <_printf_float>:
 80099b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b2:	b095      	sub	sp, #84	; 0x54
 80099b4:	000c      	movs	r4, r1
 80099b6:	920a      	str	r2, [sp, #40]	; 0x28
 80099b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80099bc:	9009      	str	r0, [sp, #36]	; 0x24
 80099be:	f002 fefd 	bl	800c7bc <_localeconv_r>
 80099c2:	6803      	ldr	r3, [r0, #0]
 80099c4:	0018      	movs	r0, r3
 80099c6:	930c      	str	r3, [sp, #48]	; 0x30
 80099c8:	f7f6 fb9e 	bl	8000108 <strlen>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9312      	str	r3, [sp, #72]	; 0x48
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	900e      	str	r0, [sp, #56]	; 0x38
 80099d4:	930d      	str	r3, [sp, #52]	; 0x34
 80099d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099d8:	7e27      	ldrb	r7, [r4, #24]
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	2207      	movs	r2, #7
 80099de:	05c9      	lsls	r1, r1, #23
 80099e0:	d545      	bpl.n	8009a6e <_printf_float+0xbe>
 80099e2:	189b      	adds	r3, r3, r2
 80099e4:	4393      	bics	r3, r2
 80099e6:	001a      	movs	r2, r3
 80099e8:	3208      	adds	r2, #8
 80099ea:	602a      	str	r2, [r5, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	64a2      	str	r2, [r4, #72]	; 0x48
 80099f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099f4:	2201      	movs	r2, #1
 80099f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80099f8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80099fa:	006b      	lsls	r3, r5, #1
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a00:	4252      	negs	r2, r2
 8009a02:	4bac      	ldr	r3, [pc, #688]	; (8009cb4 <_printf_float+0x304>)
 8009a04:	0030      	movs	r0, r6
 8009a06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a08:	f7f8 fa82 	bl	8001f10 <__aeabi_dcmpun>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d130      	bne.n	8009a72 <_printf_float+0xc2>
 8009a10:	2201      	movs	r2, #1
 8009a12:	4ba8      	ldr	r3, [pc, #672]	; (8009cb4 <_printf_float+0x304>)
 8009a14:	4252      	negs	r2, r2
 8009a16:	0030      	movs	r0, r6
 8009a18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a1a:	f7f6 fd1d 	bl	8000458 <__aeabi_dcmple>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d127      	bne.n	8009a72 <_printf_float+0xc2>
 8009a22:	2200      	movs	r2, #0
 8009a24:	2300      	movs	r3, #0
 8009a26:	0030      	movs	r0, r6
 8009a28:	0029      	movs	r1, r5
 8009a2a:	f7f6 fd0b 	bl	8000444 <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d003      	beq.n	8009a3a <_printf_float+0x8a>
 8009a32:	0023      	movs	r3, r4
 8009a34:	222d      	movs	r2, #45	; 0x2d
 8009a36:	3343      	adds	r3, #67	; 0x43
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	4d9f      	ldr	r5, [pc, #636]	; (8009cb8 <_printf_float+0x308>)
 8009a3c:	2f47      	cmp	r7, #71	; 0x47
 8009a3e:	d800      	bhi.n	8009a42 <_printf_float+0x92>
 8009a40:	4d9e      	ldr	r5, [pc, #632]	; (8009cbc <_printf_float+0x30c>)
 8009a42:	2303      	movs	r3, #3
 8009a44:	2600      	movs	r6, #0
 8009a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	439a      	bics	r2, r3
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a52:	aa13      	add	r2, sp, #76	; 0x4c
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	0021      	movs	r1, r4
 8009a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a5c:	f000 f9f4 	bl	8009e48 <_printf_common>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d000      	beq.n	8009a66 <_printf_float+0xb6>
 8009a64:	e093      	b.n	8009b8e <_printf_float+0x1de>
 8009a66:	2001      	movs	r0, #1
 8009a68:	4240      	negs	r0, r0
 8009a6a:	b015      	add	sp, #84	; 0x54
 8009a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6e:	3307      	adds	r3, #7
 8009a70:	e7b8      	b.n	80099e4 <_printf_float+0x34>
 8009a72:	0032      	movs	r2, r6
 8009a74:	002b      	movs	r3, r5
 8009a76:	0030      	movs	r0, r6
 8009a78:	0029      	movs	r1, r5
 8009a7a:	f7f8 fa49 	bl	8001f10 <__aeabi_dcmpun>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d004      	beq.n	8009a8c <_printf_float+0xdc>
 8009a82:	4d8f      	ldr	r5, [pc, #572]	; (8009cc0 <_printf_float+0x310>)
 8009a84:	2f47      	cmp	r7, #71	; 0x47
 8009a86:	d8dc      	bhi.n	8009a42 <_printf_float+0x92>
 8009a88:	4d8e      	ldr	r5, [pc, #568]	; (8009cc4 <_printf_float+0x314>)
 8009a8a:	e7da      	b.n	8009a42 <_printf_float+0x92>
 8009a8c:	2380      	movs	r3, #128	; 0x80
 8009a8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a90:	6862      	ldr	r2, [r4, #4]
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	430b      	orrs	r3, r1
 8009a96:	1c51      	adds	r1, r2, #1
 8009a98:	d143      	bne.n	8009b22 <_printf_float+0x172>
 8009a9a:	3207      	adds	r2, #7
 8009a9c:	6062      	str	r2, [r4, #4]
 8009a9e:	aa12      	add	r2, sp, #72	; 0x48
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	9205      	str	r2, [sp, #20]
 8009aa4:	aa11      	add	r2, sp, #68	; 0x44
 8009aa6:	9203      	str	r2, [sp, #12]
 8009aa8:	2223      	movs	r2, #35	; 0x23
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	9106      	str	r1, [sp, #24]
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	a908      	add	r1, sp, #32
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	1852      	adds	r2, r2, r1
 8009ab6:	9202      	str	r2, [sp, #8]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	0032      	movs	r2, r6
 8009abc:	002b      	movs	r3, r5
 8009abe:	9704      	str	r7, [sp, #16]
 8009ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac2:	f7ff fed9 	bl	8009878 <__cvt>
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	003a      	movs	r2, r7
 8009aca:	0005      	movs	r5, r0
 8009acc:	439a      	bics	r2, r3
 8009ace:	2a47      	cmp	r2, #71	; 0x47
 8009ad0:	d107      	bne.n	8009ae2 <_printf_float+0x132>
 8009ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ad4:	1cda      	adds	r2, r3, #3
 8009ad6:	db02      	blt.n	8009ade <_printf_float+0x12e>
 8009ad8:	6862      	ldr	r2, [r4, #4]
 8009ada:	4293      	cmp	r3, r2
 8009adc:	dd45      	ble.n	8009b6a <_printf_float+0x1ba>
 8009ade:	3f02      	subs	r7, #2
 8009ae0:	b2ff      	uxtb	r7, r7
 8009ae2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ae4:	2f65      	cmp	r7, #101	; 0x65
 8009ae6:	d825      	bhi.n	8009b34 <_printf_float+0x184>
 8009ae8:	0020      	movs	r0, r4
 8009aea:	3901      	subs	r1, #1
 8009aec:	003a      	movs	r2, r7
 8009aee:	3050      	adds	r0, #80	; 0x50
 8009af0:	9111      	str	r1, [sp, #68]	; 0x44
 8009af2:	f7ff ff25 	bl	8009940 <__exponent>
 8009af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009af8:	0006      	movs	r6, r0
 8009afa:	1813      	adds	r3, r2, r0
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	2a01      	cmp	r2, #1
 8009b00:	dc02      	bgt.n	8009b08 <_printf_float+0x158>
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	07d2      	lsls	r2, r2, #31
 8009b06:	d501      	bpl.n	8009b0c <_printf_float+0x15c>
 8009b08:	3301      	adds	r3, #1
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	2323      	movs	r3, #35	; 0x23
 8009b0e:	aa08      	add	r2, sp, #32
 8009b10:	189b      	adds	r3, r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d09b      	beq.n	8009a50 <_printf_float+0xa0>
 8009b18:	0023      	movs	r3, r4
 8009b1a:	222d      	movs	r2, #45	; 0x2d
 8009b1c:	3343      	adds	r3, #67	; 0x43
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e796      	b.n	8009a50 <_printf_float+0xa0>
 8009b22:	2f67      	cmp	r7, #103	; 0x67
 8009b24:	d100      	bne.n	8009b28 <_printf_float+0x178>
 8009b26:	e176      	b.n	8009e16 <_printf_float+0x466>
 8009b28:	2f47      	cmp	r7, #71	; 0x47
 8009b2a:	d1b8      	bne.n	8009a9e <_printf_float+0xee>
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d1b6      	bne.n	8009a9e <_printf_float+0xee>
 8009b30:	2201      	movs	r2, #1
 8009b32:	e7b3      	b.n	8009a9c <_printf_float+0xec>
 8009b34:	2f66      	cmp	r7, #102	; 0x66
 8009b36:	d119      	bne.n	8009b6c <_printf_float+0x1bc>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	2900      	cmp	r1, #0
 8009b3c:	dd0c      	ble.n	8009b58 <_printf_float+0x1a8>
 8009b3e:	6121      	str	r1, [r4, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <_printf_float+0x19a>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	07d2      	lsls	r2, r2, #31
 8009b48:	d502      	bpl.n	8009b50 <_printf_float+0x1a0>
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	185b      	adds	r3, r3, r1
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b52:	2600      	movs	r6, #0
 8009b54:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b56:	e7d9      	b.n	8009b0c <_printf_float+0x15c>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <_printf_float+0x1b4>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	6821      	ldr	r1, [r4, #0]
 8009b60:	4211      	tst	r1, r2
 8009b62:	d000      	beq.n	8009b66 <_printf_float+0x1b6>
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	6122      	str	r2, [r4, #16]
 8009b68:	e7f2      	b.n	8009b50 <_printf_float+0x1a0>
 8009b6a:	2767      	movs	r7, #103	; 0x67
 8009b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b70:	4293      	cmp	r3, r2
 8009b72:	db05      	blt.n	8009b80 <_printf_float+0x1d0>
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	07d2      	lsls	r2, r2, #31
 8009b7a:	d5e9      	bpl.n	8009b50 <_printf_float+0x1a0>
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	e7e6      	b.n	8009b4e <_printf_float+0x19e>
 8009b80:	2101      	movs	r1, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dc01      	bgt.n	8009b8a <_printf_float+0x1da>
 8009b86:	1849      	adds	r1, r1, r1
 8009b88:	1ac9      	subs	r1, r1, r3
 8009b8a:	1852      	adds	r2, r2, r1
 8009b8c:	e7eb      	b.n	8009b66 <_printf_float+0x1b6>
 8009b8e:	6822      	ldr	r2, [r4, #0]
 8009b90:	0553      	lsls	r3, r2, #21
 8009b92:	d408      	bmi.n	8009ba6 <_printf_float+0x1f6>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	002a      	movs	r2, r5
 8009b98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b9e:	47a8      	blx	r5
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d129      	bne.n	8009bf8 <_printf_float+0x248>
 8009ba4:	e75f      	b.n	8009a66 <_printf_float+0xb6>
 8009ba6:	2f65      	cmp	r7, #101	; 0x65
 8009ba8:	d800      	bhi.n	8009bac <_printf_float+0x1fc>
 8009baa:	e0e0      	b.n	8009d6e <_printf_float+0x3be>
 8009bac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009bae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f7f6 fc40 	bl	8000438 <__aeabi_dcmpeq>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d034      	beq.n	8009c26 <_printf_float+0x276>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	4a42      	ldr	r2, [pc, #264]	; (8009cc8 <_printf_float+0x318>)
 8009bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009bc6:	47a8      	blx	r5
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d100      	bne.n	8009bce <_printf_float+0x21e>
 8009bcc:	e74b      	b.n	8009a66 <_printf_float+0xb6>
 8009bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	db02      	blt.n	8009bdc <_printf_float+0x22c>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	07db      	lsls	r3, r3, #31
 8009bda:	d50d      	bpl.n	8009bf8 <_printf_float+0x248>
 8009bdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be6:	47a8      	blx	r5
 8009be8:	2500      	movs	r5, #0
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d100      	bne.n	8009bf0 <_printf_float+0x240>
 8009bee:	e73a      	b.n	8009a66 <_printf_float+0xb6>
 8009bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	42ab      	cmp	r3, r5
 8009bf6:	dc0a      	bgt.n	8009c0e <_printf_float+0x25e>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	079b      	lsls	r3, r3, #30
 8009bfc:	d500      	bpl.n	8009c00 <_printf_float+0x250>
 8009bfe:	e108      	b.n	8009e12 <_printf_float+0x462>
 8009c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	4298      	cmp	r0, r3
 8009c06:	db00      	blt.n	8009c0a <_printf_float+0x25a>
 8009c08:	e72f      	b.n	8009a6a <_printf_float+0xba>
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	e72d      	b.n	8009a6a <_printf_float+0xba>
 8009c0e:	0022      	movs	r2, r4
 8009c10:	2301      	movs	r3, #1
 8009c12:	321a      	adds	r2, #26
 8009c14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c1a:	47b0      	blx	r6
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d100      	bne.n	8009c22 <_printf_float+0x272>
 8009c20:	e721      	b.n	8009a66 <_printf_float+0xb6>
 8009c22:	3501      	adds	r5, #1
 8009c24:	e7e4      	b.n	8009bf0 <_printf_float+0x240>
 8009c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dc2d      	bgt.n	8009c88 <_printf_float+0x2d8>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4a26      	ldr	r2, [pc, #152]	; (8009cc8 <_printf_float+0x318>)
 8009c30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c36:	47b0      	blx	r6
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d100      	bne.n	8009c3e <_printf_float+0x28e>
 8009c3c:	e713      	b.n	8009a66 <_printf_float+0xb6>
 8009c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <_printf_float+0x2a0>
 8009c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <_printf_float+0x2a0>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	07db      	lsls	r3, r3, #31
 8009c4e:	d5d3      	bpl.n	8009bf8 <_printf_float+0x248>
 8009c50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5a:	47b0      	blx	r6
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	d100      	bne.n	8009c64 <_printf_float+0x2b4>
 8009c62:	e700      	b.n	8009a66 <_printf_float+0xb6>
 8009c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c66:	425b      	negs	r3, r3
 8009c68:	42b3      	cmp	r3, r6
 8009c6a:	dc01      	bgt.n	8009c70 <_printf_float+0x2c0>
 8009c6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c6e:	e792      	b.n	8009b96 <_printf_float+0x1e6>
 8009c70:	0022      	movs	r2, r4
 8009c72:	2301      	movs	r3, #1
 8009c74:	321a      	adds	r2, #26
 8009c76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009c7c:	47b8      	blx	r7
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d100      	bne.n	8009c84 <_printf_float+0x2d4>
 8009c82:	e6f0      	b.n	8009a66 <_printf_float+0xb6>
 8009c84:	3601      	adds	r6, #1
 8009c86:	e7ed      	b.n	8009c64 <_printf_float+0x2b4>
 8009c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c8a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009c8c:	429f      	cmp	r7, r3
 8009c8e:	dd00      	ble.n	8009c92 <_printf_float+0x2e2>
 8009c90:	001f      	movs	r7, r3
 8009c92:	2f00      	cmp	r7, #0
 8009c94:	dd08      	ble.n	8009ca8 <_printf_float+0x2f8>
 8009c96:	003b      	movs	r3, r7
 8009c98:	002a      	movs	r2, r5
 8009c9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009ca0:	47b0      	blx	r6
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	d100      	bne.n	8009ca8 <_printf_float+0x2f8>
 8009ca6:	e6de      	b.n	8009a66 <_printf_float+0xb6>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	930d      	str	r3, [sp, #52]	; 0x34
 8009cac:	43fb      	mvns	r3, r7
 8009cae:	17db      	asrs	r3, r3, #31
 8009cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cb2:	e018      	b.n	8009ce6 <_printf_float+0x336>
 8009cb4:	7fefffff 	.word	0x7fefffff
 8009cb8:	0800d7d8 	.word	0x0800d7d8
 8009cbc:	0800d7d4 	.word	0x0800d7d4
 8009cc0:	0800d7e0 	.word	0x0800d7e0
 8009cc4:	0800d7dc 	.word	0x0800d7dc
 8009cc8:	0800d7e4 	.word	0x0800d7e4
 8009ccc:	0022      	movs	r2, r4
 8009cce:	2301      	movs	r3, #1
 8009cd0:	321a      	adds	r2, #26
 8009cd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009cd8:	47b0      	blx	r6
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d100      	bne.n	8009ce0 <_printf_float+0x330>
 8009cde:	e6c2      	b.n	8009a66 <_printf_float+0xb6>
 8009ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ce8:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8009cea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cec:	403b      	ands	r3, r7
 8009cee:	1af3      	subs	r3, r6, r3
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	dceb      	bgt.n	8009ccc <_printf_float+0x31c>
 8009cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cf8:	19ad      	adds	r5, r5, r6
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	db10      	blt.n	8009d20 <_printf_float+0x370>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	07db      	lsls	r3, r3, #31
 8009d02:	d40d      	bmi.n	8009d20 <_printf_float+0x370>
 8009d04:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d08:	1bbe      	subs	r6, r7, r6
 8009d0a:	1aff      	subs	r7, r7, r3
 8009d0c:	42b7      	cmp	r7, r6
 8009d0e:	dd00      	ble.n	8009d12 <_printf_float+0x362>
 8009d10:	0037      	movs	r7, r6
 8009d12:	2f00      	cmp	r7, #0
 8009d14:	dc0d      	bgt.n	8009d32 <_printf_float+0x382>
 8009d16:	43fe      	mvns	r6, r7
 8009d18:	17f3      	asrs	r3, r6, #31
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d1e:	e01c      	b.n	8009d5a <_printf_float+0x3aa>
 8009d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d28:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009d2a:	47b8      	blx	r7
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d1e9      	bne.n	8009d04 <_printf_float+0x354>
 8009d30:	e699      	b.n	8009a66 <_printf_float+0xb6>
 8009d32:	003b      	movs	r3, r7
 8009d34:	002a      	movs	r2, r5
 8009d36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009d3c:	47a8      	blx	r5
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d1e9      	bne.n	8009d16 <_printf_float+0x366>
 8009d42:	e690      	b.n	8009a66 <_printf_float+0xb6>
 8009d44:	0022      	movs	r2, r4
 8009d46:	2301      	movs	r3, #1
 8009d48:	321a      	adds	r2, #26
 8009d4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	d100      	bne.n	8009d58 <_printf_float+0x3a8>
 8009d56:	e686      	b.n	8009a66 <_printf_float+0xb6>
 8009d58:	3501      	adds	r5, #1
 8009d5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	003a      	movs	r2, r7
 8009d64:	400a      	ands	r2, r1
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	42ab      	cmp	r3, r5
 8009d6a:	dceb      	bgt.n	8009d44 <_printf_float+0x394>
 8009d6c:	e744      	b.n	8009bf8 <_printf_float+0x248>
 8009d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	dc02      	bgt.n	8009d7a <_printf_float+0x3ca>
 8009d74:	2301      	movs	r3, #1
 8009d76:	421a      	tst	r2, r3
 8009d78:	d032      	beq.n	8009de0 <_printf_float+0x430>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	002a      	movs	r2, r5
 8009d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009d84:	47b8      	blx	r7
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d100      	bne.n	8009d8c <_printf_float+0x3dc>
 8009d8a:	e66c      	b.n	8009a66 <_printf_float+0xb6>
 8009d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009d96:	3501      	adds	r5, #1
 8009d98:	47b8      	blx	r7
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	d100      	bne.n	8009da0 <_printf_float+0x3f0>
 8009d9e:	e662      	b.n	8009a66 <_printf_float+0xb6>
 8009da0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009da2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da6:	2200      	movs	r2, #0
 8009da8:	1e5f      	subs	r7, r3, #1
 8009daa:	2300      	movs	r3, #0
 8009dac:	f7f6 fb44 	bl	8000438 <__aeabi_dcmpeq>
 8009db0:	003b      	movs	r3, r7
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d014      	beq.n	8009de0 <_printf_float+0x430>
 8009db6:	2500      	movs	r5, #0
 8009db8:	e00a      	b.n	8009dd0 <_printf_float+0x420>
 8009dba:	0022      	movs	r2, r4
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	321a      	adds	r2, #26
 8009dc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dc4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009dc6:	47b8      	blx	r7
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d100      	bne.n	8009dce <_printf_float+0x41e>
 8009dcc:	e64b      	b.n	8009a66 <_printf_float+0xb6>
 8009dce:	3501      	adds	r5, #1
 8009dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	42ab      	cmp	r3, r5
 8009dd6:	dcf0      	bgt.n	8009dba <_printf_float+0x40a>
 8009dd8:	0022      	movs	r2, r4
 8009dda:	0033      	movs	r3, r6
 8009ddc:	3250      	adds	r2, #80	; 0x50
 8009dde:	e6db      	b.n	8009b98 <_printf_float+0x1e8>
 8009de0:	002a      	movs	r2, r5
 8009de2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009de8:	47a8      	blx	r5
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d1f4      	bne.n	8009dd8 <_printf_float+0x428>
 8009dee:	e63a      	b.n	8009a66 <_printf_float+0xb6>
 8009df0:	0022      	movs	r2, r4
 8009df2:	2301      	movs	r3, #1
 8009df4:	3219      	adds	r2, #25
 8009df6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009dfc:	47b0      	blx	r6
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d100      	bne.n	8009e04 <_printf_float+0x454>
 8009e02:	e630      	b.n	8009a66 <_printf_float+0xb6>
 8009e04:	3501      	adds	r5, #1
 8009e06:	68e3      	ldr	r3, [r4, #12]
 8009e08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e0a:	1a9b      	subs	r3, r3, r2
 8009e0c:	42ab      	cmp	r3, r5
 8009e0e:	dcef      	bgt.n	8009df0 <_printf_float+0x440>
 8009e10:	e6f6      	b.n	8009c00 <_printf_float+0x250>
 8009e12:	2500      	movs	r5, #0
 8009e14:	e7f7      	b.n	8009e06 <_printf_float+0x456>
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	d100      	bne.n	8009e1c <_printf_float+0x46c>
 8009e1a:	e689      	b.n	8009b30 <_printf_float+0x180>
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	9106      	str	r1, [sp, #24]
 8009e20:	a912      	add	r1, sp, #72	; 0x48
 8009e22:	9105      	str	r1, [sp, #20]
 8009e24:	a911      	add	r1, sp, #68	; 0x44
 8009e26:	9103      	str	r1, [sp, #12]
 8009e28:	2123      	movs	r1, #35	; 0x23
 8009e2a:	a808      	add	r0, sp, #32
 8009e2c:	1809      	adds	r1, r1, r0
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	9200      	str	r2, [sp, #0]
 8009e34:	002b      	movs	r3, r5
 8009e36:	9704      	str	r7, [sp, #16]
 8009e38:	9102      	str	r1, [sp, #8]
 8009e3a:	0032      	movs	r2, r6
 8009e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3e:	f7ff fd1b 	bl	8009878 <__cvt>
 8009e42:	0005      	movs	r5, r0
 8009e44:	e645      	b.n	8009ad2 <_printf_float+0x122>
 8009e46:	46c0      	nop			; (mov r8, r8)

08009e48 <_printf_common>:
 8009e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4a:	0015      	movs	r5, r2
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	688a      	ldr	r2, [r1, #8]
 8009e50:	690b      	ldr	r3, [r1, #16]
 8009e52:	9000      	str	r0, [sp, #0]
 8009e54:	000c      	movs	r4, r1
 8009e56:	4293      	cmp	r3, r2
 8009e58:	da00      	bge.n	8009e5c <_printf_common+0x14>
 8009e5a:	0013      	movs	r3, r2
 8009e5c:	0022      	movs	r2, r4
 8009e5e:	602b      	str	r3, [r5, #0]
 8009e60:	3243      	adds	r2, #67	; 0x43
 8009e62:	7812      	ldrb	r2, [r2, #0]
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d001      	beq.n	8009e6c <_printf_common+0x24>
 8009e68:	3301      	adds	r3, #1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	069b      	lsls	r3, r3, #26
 8009e70:	d502      	bpl.n	8009e78 <_printf_common+0x30>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	3302      	adds	r3, #2
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	2706      	movs	r7, #6
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	401f      	ands	r7, r3
 8009e7e:	d027      	beq.n	8009ed0 <_printf_common+0x88>
 8009e80:	0023      	movs	r3, r4
 8009e82:	3343      	adds	r3, #67	; 0x43
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	1e5a      	subs	r2, r3, #1
 8009e88:	4193      	sbcs	r3, r2
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	0692      	lsls	r2, r2, #26
 8009e8e:	d430      	bmi.n	8009ef2 <_printf_common+0xaa>
 8009e90:	0022      	movs	r2, r4
 8009e92:	9901      	ldr	r1, [sp, #4]
 8009e94:	3243      	adds	r2, #67	; 0x43
 8009e96:	9800      	ldr	r0, [sp, #0]
 8009e98:	9e08      	ldr	r6, [sp, #32]
 8009e9a:	47b0      	blx	r6
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d025      	beq.n	8009eec <_printf_common+0xa4>
 8009ea0:	2306      	movs	r3, #6
 8009ea2:	6820      	ldr	r0, [r4, #0]
 8009ea4:	682a      	ldr	r2, [r5, #0]
 8009ea6:	68e1      	ldr	r1, [r4, #12]
 8009ea8:	4003      	ands	r3, r0
 8009eaa:	2500      	movs	r5, #0
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d103      	bne.n	8009eb8 <_printf_common+0x70>
 8009eb0:	1a8d      	subs	r5, r1, r2
 8009eb2:	43eb      	mvns	r3, r5
 8009eb4:	17db      	asrs	r3, r3, #31
 8009eb6:	401d      	ands	r5, r3
 8009eb8:	68a3      	ldr	r3, [r4, #8]
 8009eba:	6922      	ldr	r2, [r4, #16]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	dd01      	ble.n	8009ec4 <_printf_common+0x7c>
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	18ed      	adds	r5, r5, r3
 8009ec4:	2700      	movs	r7, #0
 8009ec6:	42bd      	cmp	r5, r7
 8009ec8:	d120      	bne.n	8009f0c <_printf_common+0xc4>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e010      	b.n	8009ef0 <_printf_common+0xa8>
 8009ece:	3701      	adds	r7, #1
 8009ed0:	68e3      	ldr	r3, [r4, #12]
 8009ed2:	682a      	ldr	r2, [r5, #0]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	42bb      	cmp	r3, r7
 8009ed8:	ddd2      	ble.n	8009e80 <_printf_common+0x38>
 8009eda:	0022      	movs	r2, r4
 8009edc:	2301      	movs	r3, #1
 8009ede:	3219      	adds	r2, #25
 8009ee0:	9901      	ldr	r1, [sp, #4]
 8009ee2:	9800      	ldr	r0, [sp, #0]
 8009ee4:	9e08      	ldr	r6, [sp, #32]
 8009ee6:	47b0      	blx	r6
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d1f0      	bne.n	8009ece <_printf_common+0x86>
 8009eec:	2001      	movs	r0, #1
 8009eee:	4240      	negs	r0, r0
 8009ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ef2:	2030      	movs	r0, #48	; 0x30
 8009ef4:	18e1      	adds	r1, r4, r3
 8009ef6:	3143      	adds	r1, #67	; 0x43
 8009ef8:	7008      	strb	r0, [r1, #0]
 8009efa:	0021      	movs	r1, r4
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	3145      	adds	r1, #69	; 0x45
 8009f00:	7809      	ldrb	r1, [r1, #0]
 8009f02:	18a2      	adds	r2, r4, r2
 8009f04:	3243      	adds	r2, #67	; 0x43
 8009f06:	3302      	adds	r3, #2
 8009f08:	7011      	strb	r1, [r2, #0]
 8009f0a:	e7c1      	b.n	8009e90 <_printf_common+0x48>
 8009f0c:	0022      	movs	r2, r4
 8009f0e:	2301      	movs	r3, #1
 8009f10:	321a      	adds	r2, #26
 8009f12:	9901      	ldr	r1, [sp, #4]
 8009f14:	9800      	ldr	r0, [sp, #0]
 8009f16:	9e08      	ldr	r6, [sp, #32]
 8009f18:	47b0      	blx	r6
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d0e6      	beq.n	8009eec <_printf_common+0xa4>
 8009f1e:	3701      	adds	r7, #1
 8009f20:	e7d1      	b.n	8009ec6 <_printf_common+0x7e>
	...

08009f24 <_printf_i>:
 8009f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f26:	b089      	sub	sp, #36	; 0x24
 8009f28:	9204      	str	r2, [sp, #16]
 8009f2a:	000a      	movs	r2, r1
 8009f2c:	3243      	adds	r2, #67	; 0x43
 8009f2e:	9305      	str	r3, [sp, #20]
 8009f30:	9003      	str	r0, [sp, #12]
 8009f32:	9202      	str	r2, [sp, #8]
 8009f34:	7e0a      	ldrb	r2, [r1, #24]
 8009f36:	000c      	movs	r4, r1
 8009f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f3a:	2a6e      	cmp	r2, #110	; 0x6e
 8009f3c:	d100      	bne.n	8009f40 <_printf_i+0x1c>
 8009f3e:	e086      	b.n	800a04e <_printf_i+0x12a>
 8009f40:	d81f      	bhi.n	8009f82 <_printf_i+0x5e>
 8009f42:	2a63      	cmp	r2, #99	; 0x63
 8009f44:	d033      	beq.n	8009fae <_printf_i+0x8a>
 8009f46:	d808      	bhi.n	8009f5a <_printf_i+0x36>
 8009f48:	2a00      	cmp	r2, #0
 8009f4a:	d100      	bne.n	8009f4e <_printf_i+0x2a>
 8009f4c:	e08c      	b.n	800a068 <_printf_i+0x144>
 8009f4e:	2a58      	cmp	r2, #88	; 0x58
 8009f50:	d04d      	beq.n	8009fee <_printf_i+0xca>
 8009f52:	0025      	movs	r5, r4
 8009f54:	3542      	adds	r5, #66	; 0x42
 8009f56:	702a      	strb	r2, [r5, #0]
 8009f58:	e030      	b.n	8009fbc <_printf_i+0x98>
 8009f5a:	2a64      	cmp	r2, #100	; 0x64
 8009f5c:	d001      	beq.n	8009f62 <_printf_i+0x3e>
 8009f5e:	2a69      	cmp	r2, #105	; 0x69
 8009f60:	d1f7      	bne.n	8009f52 <_printf_i+0x2e>
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6825      	ldr	r5, [r4, #0]
 8009f66:	1d0a      	adds	r2, r1, #4
 8009f68:	0628      	lsls	r0, r5, #24
 8009f6a:	d529      	bpl.n	8009fc0 <_printf_i+0x9c>
 8009f6c:	6808      	ldr	r0, [r1, #0]
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	2800      	cmp	r0, #0
 8009f72:	da03      	bge.n	8009f7c <_printf_i+0x58>
 8009f74:	232d      	movs	r3, #45	; 0x2d
 8009f76:	9a02      	ldr	r2, [sp, #8]
 8009f78:	4240      	negs	r0, r0
 8009f7a:	7013      	strb	r3, [r2, #0]
 8009f7c:	4e6b      	ldr	r6, [pc, #428]	; (800a12c <_printf_i+0x208>)
 8009f7e:	270a      	movs	r7, #10
 8009f80:	e04f      	b.n	800a022 <_printf_i+0xfe>
 8009f82:	2a73      	cmp	r2, #115	; 0x73
 8009f84:	d074      	beq.n	800a070 <_printf_i+0x14c>
 8009f86:	d808      	bhi.n	8009f9a <_printf_i+0x76>
 8009f88:	2a6f      	cmp	r2, #111	; 0x6f
 8009f8a:	d01f      	beq.n	8009fcc <_printf_i+0xa8>
 8009f8c:	2a70      	cmp	r2, #112	; 0x70
 8009f8e:	d1e0      	bne.n	8009f52 <_printf_i+0x2e>
 8009f90:	2220      	movs	r2, #32
 8009f92:	6809      	ldr	r1, [r1, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	e003      	b.n	8009fa2 <_printf_i+0x7e>
 8009f9a:	2a75      	cmp	r2, #117	; 0x75
 8009f9c:	d016      	beq.n	8009fcc <_printf_i+0xa8>
 8009f9e:	2a78      	cmp	r2, #120	; 0x78
 8009fa0:	d1d7      	bne.n	8009f52 <_printf_i+0x2e>
 8009fa2:	0022      	movs	r2, r4
 8009fa4:	2178      	movs	r1, #120	; 0x78
 8009fa6:	3245      	adds	r2, #69	; 0x45
 8009fa8:	7011      	strb	r1, [r2, #0]
 8009faa:	4e61      	ldr	r6, [pc, #388]	; (800a130 <_printf_i+0x20c>)
 8009fac:	e022      	b.n	8009ff4 <_printf_i+0xd0>
 8009fae:	0025      	movs	r5, r4
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	3542      	adds	r5, #66	; 0x42
 8009fb4:	1d11      	adds	r1, r2, #4
 8009fb6:	6019      	str	r1, [r3, #0]
 8009fb8:	6813      	ldr	r3, [r2, #0]
 8009fba:	702b      	strb	r3, [r5, #0]
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e065      	b.n	800a08c <_printf_i+0x168>
 8009fc0:	6808      	ldr	r0, [r1, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	0669      	lsls	r1, r5, #25
 8009fc6:	d5d3      	bpl.n	8009f70 <_printf_i+0x4c>
 8009fc8:	b200      	sxth	r0, r0
 8009fca:	e7d1      	b.n	8009f70 <_printf_i+0x4c>
 8009fcc:	6819      	ldr	r1, [r3, #0]
 8009fce:	6825      	ldr	r5, [r4, #0]
 8009fd0:	1d08      	adds	r0, r1, #4
 8009fd2:	6018      	str	r0, [r3, #0]
 8009fd4:	6808      	ldr	r0, [r1, #0]
 8009fd6:	062e      	lsls	r6, r5, #24
 8009fd8:	d505      	bpl.n	8009fe6 <_printf_i+0xc2>
 8009fda:	4e54      	ldr	r6, [pc, #336]	; (800a12c <_printf_i+0x208>)
 8009fdc:	2708      	movs	r7, #8
 8009fde:	2a6f      	cmp	r2, #111	; 0x6f
 8009fe0:	d01b      	beq.n	800a01a <_printf_i+0xf6>
 8009fe2:	270a      	movs	r7, #10
 8009fe4:	e019      	b.n	800a01a <_printf_i+0xf6>
 8009fe6:	066d      	lsls	r5, r5, #25
 8009fe8:	d5f7      	bpl.n	8009fda <_printf_i+0xb6>
 8009fea:	b280      	uxth	r0, r0
 8009fec:	e7f5      	b.n	8009fda <_printf_i+0xb6>
 8009fee:	3145      	adds	r1, #69	; 0x45
 8009ff0:	4e4e      	ldr	r6, [pc, #312]	; (800a12c <_printf_i+0x208>)
 8009ff2:	700a      	strb	r2, [r1, #0]
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	1d01      	adds	r1, r0, #4
 8009ffa:	6800      	ldr	r0, [r0, #0]
 8009ffc:	6019      	str	r1, [r3, #0]
 8009ffe:	0615      	lsls	r5, r2, #24
 800a000:	d521      	bpl.n	800a046 <_printf_i+0x122>
 800a002:	07d3      	lsls	r3, r2, #31
 800a004:	d502      	bpl.n	800a00c <_printf_i+0xe8>
 800a006:	2320      	movs	r3, #32
 800a008:	431a      	orrs	r2, r3
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	2710      	movs	r7, #16
 800a00e:	2800      	cmp	r0, #0
 800a010:	d103      	bne.n	800a01a <_printf_i+0xf6>
 800a012:	2320      	movs	r3, #32
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	439a      	bics	r2, r3
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	0023      	movs	r3, r4
 800a01c:	2200      	movs	r2, #0
 800a01e:	3343      	adds	r3, #67	; 0x43
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	db58      	blt.n	800a0dc <_printf_i+0x1b8>
 800a02a:	2204      	movs	r2, #4
 800a02c:	6821      	ldr	r1, [r4, #0]
 800a02e:	4391      	bics	r1, r2
 800a030:	6021      	str	r1, [r4, #0]
 800a032:	2800      	cmp	r0, #0
 800a034:	d154      	bne.n	800a0e0 <_printf_i+0x1bc>
 800a036:	9d02      	ldr	r5, [sp, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d05a      	beq.n	800a0f2 <_printf_i+0x1ce>
 800a03c:	0025      	movs	r5, r4
 800a03e:	7833      	ldrb	r3, [r6, #0]
 800a040:	3542      	adds	r5, #66	; 0x42
 800a042:	702b      	strb	r3, [r5, #0]
 800a044:	e055      	b.n	800a0f2 <_printf_i+0x1ce>
 800a046:	0655      	lsls	r5, r2, #25
 800a048:	d5db      	bpl.n	800a002 <_printf_i+0xde>
 800a04a:	b280      	uxth	r0, r0
 800a04c:	e7d9      	b.n	800a002 <_printf_i+0xde>
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	680d      	ldr	r5, [r1, #0]
 800a052:	1d10      	adds	r0, r2, #4
 800a054:	6949      	ldr	r1, [r1, #20]
 800a056:	6018      	str	r0, [r3, #0]
 800a058:	6813      	ldr	r3, [r2, #0]
 800a05a:	062e      	lsls	r6, r5, #24
 800a05c:	d501      	bpl.n	800a062 <_printf_i+0x13e>
 800a05e:	6019      	str	r1, [r3, #0]
 800a060:	e002      	b.n	800a068 <_printf_i+0x144>
 800a062:	066d      	lsls	r5, r5, #25
 800a064:	d5fb      	bpl.n	800a05e <_printf_i+0x13a>
 800a066:	8019      	strh	r1, [r3, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	9d02      	ldr	r5, [sp, #8]
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	e04f      	b.n	800a110 <_printf_i+0x1ec>
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	1d11      	adds	r1, r2, #4
 800a074:	6019      	str	r1, [r3, #0]
 800a076:	6815      	ldr	r5, [r2, #0]
 800a078:	2100      	movs	r1, #0
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	0028      	movs	r0, r5
 800a07e:	f002 fbbb 	bl	800c7f8 <memchr>
 800a082:	2800      	cmp	r0, #0
 800a084:	d001      	beq.n	800a08a <_printf_i+0x166>
 800a086:	1b40      	subs	r0, r0, r5
 800a088:	6060      	str	r0, [r4, #4]
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	6123      	str	r3, [r4, #16]
 800a08e:	2300      	movs	r3, #0
 800a090:	9a02      	ldr	r2, [sp, #8]
 800a092:	7013      	strb	r3, [r2, #0]
 800a094:	e03c      	b.n	800a110 <_printf_i+0x1ec>
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	002a      	movs	r2, r5
 800a09a:	9904      	ldr	r1, [sp, #16]
 800a09c:	9803      	ldr	r0, [sp, #12]
 800a09e:	9d05      	ldr	r5, [sp, #20]
 800a0a0:	47a8      	blx	r5
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d03e      	beq.n	800a124 <_printf_i+0x200>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	079b      	lsls	r3, r3, #30
 800a0aa:	d415      	bmi.n	800a0d8 <_printf_i+0x1b4>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	68e0      	ldr	r0, [r4, #12]
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	da39      	bge.n	800a128 <_printf_i+0x204>
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	e037      	b.n	800a128 <_printf_i+0x204>
 800a0b8:	0022      	movs	r2, r4
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	3219      	adds	r2, #25
 800a0be:	9904      	ldr	r1, [sp, #16]
 800a0c0:	9803      	ldr	r0, [sp, #12]
 800a0c2:	9e05      	ldr	r6, [sp, #20]
 800a0c4:	47b0      	blx	r6
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d02c      	beq.n	800a124 <_printf_i+0x200>
 800a0ca:	3501      	adds	r5, #1
 800a0cc:	68e3      	ldr	r3, [r4, #12]
 800a0ce:	9a07      	ldr	r2, [sp, #28]
 800a0d0:	1a9b      	subs	r3, r3, r2
 800a0d2:	42ab      	cmp	r3, r5
 800a0d4:	dcf0      	bgt.n	800a0b8 <_printf_i+0x194>
 800a0d6:	e7e9      	b.n	800a0ac <_printf_i+0x188>
 800a0d8:	2500      	movs	r5, #0
 800a0da:	e7f7      	b.n	800a0cc <_printf_i+0x1a8>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d0ad      	beq.n	800a03c <_printf_i+0x118>
 800a0e0:	9d02      	ldr	r5, [sp, #8]
 800a0e2:	0039      	movs	r1, r7
 800a0e4:	f7f6 f8a8 	bl	8000238 <__aeabi_uidivmod>
 800a0e8:	5c73      	ldrb	r3, [r6, r1]
 800a0ea:	3d01      	subs	r5, #1
 800a0ec:	702b      	strb	r3, [r5, #0]
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d1f7      	bne.n	800a0e2 <_printf_i+0x1be>
 800a0f2:	2f08      	cmp	r7, #8
 800a0f4:	d109      	bne.n	800a10a <_printf_i+0x1e6>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	07db      	lsls	r3, r3, #31
 800a0fa:	d506      	bpl.n	800a10a <_printf_i+0x1e6>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	6922      	ldr	r2, [r4, #16]
 800a100:	4293      	cmp	r3, r2
 800a102:	dc02      	bgt.n	800a10a <_printf_i+0x1e6>
 800a104:	2330      	movs	r3, #48	; 0x30
 800a106:	3d01      	subs	r5, #1
 800a108:	702b      	strb	r3, [r5, #0]
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	1b5b      	subs	r3, r3, r5
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	aa07      	add	r2, sp, #28
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	0021      	movs	r1, r4
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	9803      	ldr	r0, [sp, #12]
 800a11c:	f7ff fe94 	bl	8009e48 <_printf_common>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d1b8      	bne.n	800a096 <_printf_i+0x172>
 800a124:	2001      	movs	r0, #1
 800a126:	4240      	negs	r0, r0
 800a128:	b009      	add	sp, #36	; 0x24
 800a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12c:	0800d7e6 	.word	0x0800d7e6
 800a130:	0800d7f7 	.word	0x0800d7f7

0800a134 <_scanf_float>:
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b08b      	sub	sp, #44	; 0x2c
 800a138:	9002      	str	r0, [sp, #8]
 800a13a:	9200      	str	r2, [sp, #0]
 800a13c:	2000      	movs	r0, #0
 800a13e:	22ae      	movs	r2, #174	; 0xae
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	688b      	ldr	r3, [r1, #8]
 800a144:	000e      	movs	r6, r1
 800a146:	1e59      	subs	r1, r3, #1
 800a148:	0052      	lsls	r2, r2, #1
 800a14a:	9004      	str	r0, [sp, #16]
 800a14c:	4291      	cmp	r1, r2
 800a14e:	d905      	bls.n	800a15c <_scanf_float+0x28>
 800a150:	3b5e      	subs	r3, #94	; 0x5e
 800a152:	3bff      	subs	r3, #255	; 0xff
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	235e      	movs	r3, #94	; 0x5e
 800a158:	33ff      	adds	r3, #255	; 0xff
 800a15a:	60b3      	str	r3, [r6, #8]
 800a15c:	23f0      	movs	r3, #240	; 0xf0
 800a15e:	6832      	ldr	r2, [r6, #0]
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	4313      	orrs	r3, r2
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	0033      	movs	r3, r6
 800a168:	2700      	movs	r7, #0
 800a16a:	331c      	adds	r3, #28
 800a16c:	001d      	movs	r5, r3
 800a16e:	003c      	movs	r4, r7
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	9708      	str	r7, [sp, #32]
 800a174:	9707      	str	r7, [sp, #28]
 800a176:	9701      	str	r7, [sp, #4]
 800a178:	9706      	str	r7, [sp, #24]
 800a17a:	68b2      	ldr	r2, [r6, #8]
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	d013      	beq.n	800a1a8 <_scanf_float+0x74>
 800a180:	9b00      	ldr	r3, [sp, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b49      	cmp	r3, #73	; 0x49
 800a18a:	d100      	bne.n	800a18e <_scanf_float+0x5a>
 800a18c:	e07c      	b.n	800a288 <_scanf_float+0x154>
 800a18e:	d854      	bhi.n	800a23a <_scanf_float+0x106>
 800a190:	2b39      	cmp	r3, #57	; 0x39
 800a192:	d847      	bhi.n	800a224 <_scanf_float+0xf0>
 800a194:	2b31      	cmp	r3, #49	; 0x31
 800a196:	d300      	bcc.n	800a19a <_scanf_float+0x66>
 800a198:	e094      	b.n	800a2c4 <_scanf_float+0x190>
 800a19a:	2b2d      	cmp	r3, #45	; 0x2d
 800a19c:	d100      	bne.n	800a1a0 <_scanf_float+0x6c>
 800a19e:	e09c      	b.n	800a2da <_scanf_float+0x1a6>
 800a1a0:	d817      	bhi.n	800a1d2 <_scanf_float+0x9e>
 800a1a2:	2b2b      	cmp	r3, #43	; 0x2b
 800a1a4:	d100      	bne.n	800a1a8 <_scanf_float+0x74>
 800a1a6:	e098      	b.n	800a2da <_scanf_float+0x1a6>
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <_scanf_float+0x82>
 800a1ae:	6832      	ldr	r2, [r6, #0]
 800a1b0:	4b9b      	ldr	r3, [pc, #620]	; (800a420 <_scanf_float+0x2ec>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	6033      	str	r3, [r6, #0]
 800a1b6:	3c01      	subs	r4, #1
 800a1b8:	2c01      	cmp	r4, #1
 800a1ba:	d900      	bls.n	800a1be <_scanf_float+0x8a>
 800a1bc:	e0ee      	b.n	800a39c <_scanf_float+0x268>
 800a1be:	24be      	movs	r4, #190	; 0xbe
 800a1c0:	0064      	lsls	r4, r4, #1
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	429d      	cmp	r5, r3
 800a1c6:	d900      	bls.n	800a1ca <_scanf_float+0x96>
 800a1c8:	e0de      	b.n	800a388 <_scanf_float+0x254>
 800a1ca:	2701      	movs	r7, #1
 800a1cc:	0038      	movs	r0, r7
 800a1ce:	b00b      	add	sp, #44	; 0x2c
 800a1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d4:	d100      	bne.n	800a1d8 <_scanf_float+0xa4>
 800a1d6:	e0a2      	b.n	800a31e <_scanf_float+0x1ea>
 800a1d8:	2b30      	cmp	r3, #48	; 0x30
 800a1da:	d1e5      	bne.n	800a1a8 <_scanf_float+0x74>
 800a1dc:	6831      	ldr	r1, [r6, #0]
 800a1de:	05c8      	lsls	r0, r1, #23
 800a1e0:	d570      	bpl.n	800a2c4 <_scanf_float+0x190>
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	4399      	bics	r1, r3
 800a1e6:	9b01      	ldr	r3, [sp, #4]
 800a1e8:	6031      	str	r1, [r6, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <_scanf_float+0xc8>
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	60b2      	str	r2, [r6, #8]
 800a1fc:	68b3      	ldr	r3, [r6, #8]
 800a1fe:	9a00      	ldr	r2, [sp, #0]
 800a200:	3b01      	subs	r3, #1
 800a202:	60b3      	str	r3, [r6, #8]
 800a204:	6933      	ldr	r3, [r6, #16]
 800a206:	3301      	adds	r3, #1
 800a208:	6133      	str	r3, [r6, #16]
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	9309      	str	r3, [sp, #36]	; 0x24
 800a210:	3b01      	subs	r3, #1
 800a212:	6053      	str	r3, [r2, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	dc00      	bgt.n	800a21a <_scanf_float+0xe6>
 800a218:	e0ac      	b.n	800a374 <_scanf_float+0x240>
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	9309      	str	r3, [sp, #36]	; 0x24
 800a21e:	3301      	adds	r3, #1
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	e7aa      	b.n	800a17a <_scanf_float+0x46>
 800a224:	2b45      	cmp	r3, #69	; 0x45
 800a226:	d100      	bne.n	800a22a <_scanf_float+0xf6>
 800a228:	e083      	b.n	800a332 <_scanf_float+0x1fe>
 800a22a:	2b46      	cmp	r3, #70	; 0x46
 800a22c:	d06d      	beq.n	800a30a <_scanf_float+0x1d6>
 800a22e:	2b41      	cmp	r3, #65	; 0x41
 800a230:	d1ba      	bne.n	800a1a8 <_scanf_float+0x74>
 800a232:	2c01      	cmp	r4, #1
 800a234:	d1b8      	bne.n	800a1a8 <_scanf_float+0x74>
 800a236:	2402      	movs	r4, #2
 800a238:	e04c      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a23a:	2b65      	cmp	r3, #101	; 0x65
 800a23c:	d079      	beq.n	800a332 <_scanf_float+0x1fe>
 800a23e:	d81b      	bhi.n	800a278 <_scanf_float+0x144>
 800a240:	2b54      	cmp	r3, #84	; 0x54
 800a242:	d067      	beq.n	800a314 <_scanf_float+0x1e0>
 800a244:	d813      	bhi.n	800a26e <_scanf_float+0x13a>
 800a246:	2b4e      	cmp	r3, #78	; 0x4e
 800a248:	d1ae      	bne.n	800a1a8 <_scanf_float+0x74>
 800a24a:	2c00      	cmp	r4, #0
 800a24c:	d14c      	bne.n	800a2e8 <_scanf_float+0x1b4>
 800a24e:	9a01      	ldr	r2, [sp, #4]
 800a250:	2a00      	cmp	r2, #0
 800a252:	d14b      	bne.n	800a2ec <_scanf_float+0x1b8>
 800a254:	21e0      	movs	r1, #224	; 0xe0
 800a256:	20e0      	movs	r0, #224	; 0xe0
 800a258:	6832      	ldr	r2, [r6, #0]
 800a25a:	00c9      	lsls	r1, r1, #3
 800a25c:	4011      	ands	r1, r2
 800a25e:	00c0      	lsls	r0, r0, #3
 800a260:	4281      	cmp	r1, r0
 800a262:	d143      	bne.n	800a2ec <_scanf_float+0x1b8>
 800a264:	496f      	ldr	r1, [pc, #444]	; (800a424 <_scanf_float+0x2f0>)
 800a266:	3401      	adds	r4, #1
 800a268:	400a      	ands	r2, r1
 800a26a:	6032      	str	r2, [r6, #0]
 800a26c:	e032      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a26e:	2b59      	cmp	r3, #89	; 0x59
 800a270:	d023      	beq.n	800a2ba <_scanf_float+0x186>
 800a272:	2b61      	cmp	r3, #97	; 0x61
 800a274:	d0dd      	beq.n	800a232 <_scanf_float+0xfe>
 800a276:	e797      	b.n	800a1a8 <_scanf_float+0x74>
 800a278:	2b6e      	cmp	r3, #110	; 0x6e
 800a27a:	d0e6      	beq.n	800a24a <_scanf_float+0x116>
 800a27c:	d818      	bhi.n	800a2b0 <_scanf_float+0x17c>
 800a27e:	2b66      	cmp	r3, #102	; 0x66
 800a280:	d043      	beq.n	800a30a <_scanf_float+0x1d6>
 800a282:	2b69      	cmp	r3, #105	; 0x69
 800a284:	d000      	beq.n	800a288 <_scanf_float+0x154>
 800a286:	e78f      	b.n	800a1a8 <_scanf_float+0x74>
 800a288:	2f00      	cmp	r7, #0
 800a28a:	d137      	bne.n	800a2fc <_scanf_float+0x1c8>
 800a28c:	9a01      	ldr	r2, [sp, #4]
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d000      	beq.n	800a294 <_scanf_float+0x160>
 800a292:	e78c      	b.n	800a1ae <_scanf_float+0x7a>
 800a294:	21e0      	movs	r1, #224	; 0xe0
 800a296:	20e0      	movs	r0, #224	; 0xe0
 800a298:	6832      	ldr	r2, [r6, #0]
 800a29a:	00c9      	lsls	r1, r1, #3
 800a29c:	4011      	ands	r1, r2
 800a29e:	00c0      	lsls	r0, r0, #3
 800a2a0:	4281      	cmp	r1, r0
 800a2a2:	d000      	beq.n	800a2a6 <_scanf_float+0x172>
 800a2a4:	e787      	b.n	800a1b6 <_scanf_float+0x82>
 800a2a6:	495f      	ldr	r1, [pc, #380]	; (800a424 <_scanf_float+0x2f0>)
 800a2a8:	3701      	adds	r7, #1
 800a2aa:	400a      	ands	r2, r1
 800a2ac:	6032      	str	r2, [r6, #0]
 800a2ae:	e011      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a2b0:	2b74      	cmp	r3, #116	; 0x74
 800a2b2:	d02f      	beq.n	800a314 <_scanf_float+0x1e0>
 800a2b4:	2b79      	cmp	r3, #121	; 0x79
 800a2b6:	d000      	beq.n	800a2ba <_scanf_float+0x186>
 800a2b8:	e776      	b.n	800a1a8 <_scanf_float+0x74>
 800a2ba:	2f07      	cmp	r7, #7
 800a2bc:	d000      	beq.n	800a2c0 <_scanf_float+0x18c>
 800a2be:	e773      	b.n	800a1a8 <_scanf_float+0x74>
 800a2c0:	2708      	movs	r7, #8
 800a2c2:	e007      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a2c4:	19e2      	adds	r2, r4, r7
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	d000      	beq.n	800a2cc <_scanf_float+0x198>
 800a2ca:	e76d      	b.n	800a1a8 <_scanf_float+0x74>
 800a2cc:	4a56      	ldr	r2, [pc, #344]	; (800a428 <_scanf_float+0x2f4>)
 800a2ce:	6831      	ldr	r1, [r6, #0]
 800a2d0:	400a      	ands	r2, r1
 800a2d2:	6032      	str	r2, [r6, #0]
 800a2d4:	702b      	strb	r3, [r5, #0]
 800a2d6:	3501      	adds	r5, #1
 800a2d8:	e790      	b.n	800a1fc <_scanf_float+0xc8>
 800a2da:	2180      	movs	r1, #128	; 0x80
 800a2dc:	6832      	ldr	r2, [r6, #0]
 800a2de:	420a      	tst	r2, r1
 800a2e0:	d100      	bne.n	800a2e4 <_scanf_float+0x1b0>
 800a2e2:	e761      	b.n	800a1a8 <_scanf_float+0x74>
 800a2e4:	438a      	bics	r2, r1
 800a2e6:	e7f4      	b.n	800a2d2 <_scanf_float+0x19e>
 800a2e8:	2c02      	cmp	r4, #2
 800a2ea:	d041      	beq.n	800a370 <_scanf_float+0x23c>
 800a2ec:	2f01      	cmp	r7, #1
 800a2ee:	d002      	beq.n	800a2f6 <_scanf_float+0x1c2>
 800a2f0:	2f04      	cmp	r7, #4
 800a2f2:	d000      	beq.n	800a2f6 <_scanf_float+0x1c2>
 800a2f4:	e758      	b.n	800a1a8 <_scanf_float+0x74>
 800a2f6:	3701      	adds	r7, #1
 800a2f8:	b2ff      	uxtb	r7, r7
 800a2fa:	e7eb      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	1efa      	subs	r2, r7, #3
 800a300:	438a      	bics	r2, r1
 800a302:	b2d2      	uxtb	r2, r2
 800a304:	2a00      	cmp	r2, #0
 800a306:	d0f6      	beq.n	800a2f6 <_scanf_float+0x1c2>
 800a308:	e74e      	b.n	800a1a8 <_scanf_float+0x74>
 800a30a:	2f02      	cmp	r7, #2
 800a30c:	d000      	beq.n	800a310 <_scanf_float+0x1dc>
 800a30e:	e74b      	b.n	800a1a8 <_scanf_float+0x74>
 800a310:	2703      	movs	r7, #3
 800a312:	e7df      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a314:	2f06      	cmp	r7, #6
 800a316:	d000      	beq.n	800a31a <_scanf_float+0x1e6>
 800a318:	e746      	b.n	800a1a8 <_scanf_float+0x74>
 800a31a:	2707      	movs	r7, #7
 800a31c:	e7da      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a31e:	6832      	ldr	r2, [r6, #0]
 800a320:	0591      	lsls	r1, r2, #22
 800a322:	d400      	bmi.n	800a326 <_scanf_float+0x1f2>
 800a324:	e740      	b.n	800a1a8 <_scanf_float+0x74>
 800a326:	4941      	ldr	r1, [pc, #260]	; (800a42c <_scanf_float+0x2f8>)
 800a328:	400a      	ands	r2, r1
 800a32a:	6032      	str	r2, [r6, #0]
 800a32c:	9a01      	ldr	r2, [sp, #4]
 800a32e:	9206      	str	r2, [sp, #24]
 800a330:	e7d0      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a332:	21a0      	movs	r1, #160	; 0xa0
 800a334:	2080      	movs	r0, #128	; 0x80
 800a336:	6832      	ldr	r2, [r6, #0]
 800a338:	00c9      	lsls	r1, r1, #3
 800a33a:	4011      	ands	r1, r2
 800a33c:	00c0      	lsls	r0, r0, #3
 800a33e:	4281      	cmp	r1, r0
 800a340:	d006      	beq.n	800a350 <_scanf_float+0x21c>
 800a342:	4202      	tst	r2, r0
 800a344:	d100      	bne.n	800a348 <_scanf_float+0x214>
 800a346:	e72f      	b.n	800a1a8 <_scanf_float+0x74>
 800a348:	9901      	ldr	r1, [sp, #4]
 800a34a:	2900      	cmp	r1, #0
 800a34c:	d100      	bne.n	800a350 <_scanf_float+0x21c>
 800a34e:	e732      	b.n	800a1b6 <_scanf_float+0x82>
 800a350:	0591      	lsls	r1, r2, #22
 800a352:	d404      	bmi.n	800a35e <_scanf_float+0x22a>
 800a354:	9901      	ldr	r1, [sp, #4]
 800a356:	9806      	ldr	r0, [sp, #24]
 800a358:	9508      	str	r5, [sp, #32]
 800a35a:	1a09      	subs	r1, r1, r0
 800a35c:	9107      	str	r1, [sp, #28]
 800a35e:	4931      	ldr	r1, [pc, #196]	; (800a424 <_scanf_float+0x2f0>)
 800a360:	400a      	ands	r2, r1
 800a362:	21c0      	movs	r1, #192	; 0xc0
 800a364:	0049      	lsls	r1, r1, #1
 800a366:	430a      	orrs	r2, r1
 800a368:	6032      	str	r2, [r6, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	9201      	str	r2, [sp, #4]
 800a36e:	e7b1      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a370:	2403      	movs	r4, #3
 800a372:	e7af      	b.n	800a2d4 <_scanf_float+0x1a0>
 800a374:	23c0      	movs	r3, #192	; 0xc0
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	58f3      	ldr	r3, [r6, r3]
 800a37a:	9900      	ldr	r1, [sp, #0]
 800a37c:	9802      	ldr	r0, [sp, #8]
 800a37e:	4798      	blx	r3
 800a380:	2800      	cmp	r0, #0
 800a382:	d100      	bne.n	800a386 <_scanf_float+0x252>
 800a384:	e6f9      	b.n	800a17a <_scanf_float+0x46>
 800a386:	e70f      	b.n	800a1a8 <_scanf_float+0x74>
 800a388:	3d01      	subs	r5, #1
 800a38a:	5933      	ldr	r3, [r6, r4]
 800a38c:	7829      	ldrb	r1, [r5, #0]
 800a38e:	9a00      	ldr	r2, [sp, #0]
 800a390:	9802      	ldr	r0, [sp, #8]
 800a392:	4798      	blx	r3
 800a394:	6933      	ldr	r3, [r6, #16]
 800a396:	3b01      	subs	r3, #1
 800a398:	6133      	str	r3, [r6, #16]
 800a39a:	e712      	b.n	800a1c2 <_scanf_float+0x8e>
 800a39c:	1e7b      	subs	r3, r7, #1
 800a39e:	2b06      	cmp	r3, #6
 800a3a0:	d826      	bhi.n	800a3f0 <_scanf_float+0x2bc>
 800a3a2:	2f02      	cmp	r7, #2
 800a3a4:	d839      	bhi.n	800a41a <_scanf_float+0x2e6>
 800a3a6:	24be      	movs	r4, #190	; 0xbe
 800a3a8:	0064      	lsls	r4, r4, #1
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	429d      	cmp	r5, r3
 800a3ae:	d800      	bhi.n	800a3b2 <_scanf_float+0x27e>
 800a3b0:	e70b      	b.n	800a1ca <_scanf_float+0x96>
 800a3b2:	3d01      	subs	r5, #1
 800a3b4:	5933      	ldr	r3, [r6, r4]
 800a3b6:	7829      	ldrb	r1, [r5, #0]
 800a3b8:	9a00      	ldr	r2, [sp, #0]
 800a3ba:	9802      	ldr	r0, [sp, #8]
 800a3bc:	4798      	blx	r3
 800a3be:	6933      	ldr	r3, [r6, #16]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	6133      	str	r3, [r6, #16]
 800a3c4:	e7f1      	b.n	800a3aa <_scanf_float+0x276>
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	9a00      	ldr	r2, [sp, #0]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	7819      	ldrb	r1, [r3, #0]
 800a3d0:	23be      	movs	r3, #190	; 0xbe
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	58f3      	ldr	r3, [r6, r3]
 800a3d6:	9802      	ldr	r0, [sp, #8]
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3da:	4798      	blx	r3
 800a3dc:	6933      	ldr	r3, [r6, #16]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	6133      	str	r3, [r6, #16]
 800a3e2:	3c01      	subs	r4, #1
 800a3e4:	b2e4      	uxtb	r4, r4
 800a3e6:	2c02      	cmp	r4, #2
 800a3e8:	d1ed      	bne.n	800a3c6 <_scanf_float+0x292>
 800a3ea:	3f03      	subs	r7, #3
 800a3ec:	b2ff      	uxtb	r7, r7
 800a3ee:	1bed      	subs	r5, r5, r7
 800a3f0:	6833      	ldr	r3, [r6, #0]
 800a3f2:	05da      	lsls	r2, r3, #23
 800a3f4:	d537      	bpl.n	800a466 <_scanf_float+0x332>
 800a3f6:	055b      	lsls	r3, r3, #21
 800a3f8:	d51a      	bpl.n	800a430 <_scanf_float+0x2fc>
 800a3fa:	24be      	movs	r4, #190	; 0xbe
 800a3fc:	0064      	lsls	r4, r4, #1
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	429d      	cmp	r5, r3
 800a402:	d800      	bhi.n	800a406 <_scanf_float+0x2d2>
 800a404:	e6e1      	b.n	800a1ca <_scanf_float+0x96>
 800a406:	3d01      	subs	r5, #1
 800a408:	5933      	ldr	r3, [r6, r4]
 800a40a:	7829      	ldrb	r1, [r5, #0]
 800a40c:	9a00      	ldr	r2, [sp, #0]
 800a40e:	9802      	ldr	r0, [sp, #8]
 800a410:	4798      	blx	r3
 800a412:	6933      	ldr	r3, [r6, #16]
 800a414:	3b01      	subs	r3, #1
 800a416:	6133      	str	r3, [r6, #16]
 800a418:	e7f1      	b.n	800a3fe <_scanf_float+0x2ca>
 800a41a:	003c      	movs	r4, r7
 800a41c:	9504      	str	r5, [sp, #16]
 800a41e:	e7e0      	b.n	800a3e2 <_scanf_float+0x2ae>
 800a420:	fffffeff 	.word	0xfffffeff
 800a424:	fffff87f 	.word	0xfffff87f
 800a428:	fffffe7f 	.word	0xfffffe7f
 800a42c:	fffffd7f 	.word	0xfffffd7f
 800a430:	6933      	ldr	r3, [r6, #16]
 800a432:	1e6c      	subs	r4, r5, #1
 800a434:	7821      	ldrb	r1, [r4, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	6133      	str	r3, [r6, #16]
 800a43a:	2965      	cmp	r1, #101	; 0x65
 800a43c:	d00c      	beq.n	800a458 <_scanf_float+0x324>
 800a43e:	2945      	cmp	r1, #69	; 0x45
 800a440:	d00a      	beq.n	800a458 <_scanf_float+0x324>
 800a442:	23be      	movs	r3, #190	; 0xbe
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	58f3      	ldr	r3, [r6, r3]
 800a448:	9a00      	ldr	r2, [sp, #0]
 800a44a:	9802      	ldr	r0, [sp, #8]
 800a44c:	4798      	blx	r3
 800a44e:	6933      	ldr	r3, [r6, #16]
 800a450:	1eac      	subs	r4, r5, #2
 800a452:	3b01      	subs	r3, #1
 800a454:	7821      	ldrb	r1, [r4, #0]
 800a456:	6133      	str	r3, [r6, #16]
 800a458:	23be      	movs	r3, #190	; 0xbe
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	58f3      	ldr	r3, [r6, r3]
 800a45e:	9a00      	ldr	r2, [sp, #0]
 800a460:	9802      	ldr	r0, [sp, #8]
 800a462:	4798      	blx	r3
 800a464:	0025      	movs	r5, r4
 800a466:	2710      	movs	r7, #16
 800a468:	6833      	ldr	r3, [r6, #0]
 800a46a:	401f      	ands	r7, r3
 800a46c:	d15b      	bne.n	800a526 <_scanf_float+0x3f2>
 800a46e:	23c0      	movs	r3, #192	; 0xc0
 800a470:	702f      	strb	r7, [r5, #0]
 800a472:	6832      	ldr	r2, [r6, #0]
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4013      	ands	r3, r2
 800a478:	2280      	movs	r2, #128	; 0x80
 800a47a:	00d2      	lsls	r2, r2, #3
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d11b      	bne.n	800a4b8 <_scanf_float+0x384>
 800a480:	9a06      	ldr	r2, [sp, #24]
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	425a      	negs	r2, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d122      	bne.n	800a4d2 <_scanf_float+0x39e>
 800a48c:	2200      	movs	r2, #0
 800a48e:	9903      	ldr	r1, [sp, #12]
 800a490:	9802      	ldr	r0, [sp, #8]
 800a492:	f000 ff57 	bl	800b344 <_strtod_r>
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	0004      	movs	r4, r0
 800a49a:	6830      	ldr	r0, [r6, #0]
 800a49c:	000d      	movs	r5, r1
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	0782      	lsls	r2, r0, #30
 800a4a2:	d523      	bpl.n	800a4ec <_scanf_float+0x3b8>
 800a4a4:	1d1a      	adds	r2, r3, #4
 800a4a6:	9905      	ldr	r1, [sp, #20]
 800a4a8:	600a      	str	r2, [r1, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	601c      	str	r4, [r3, #0]
 800a4ae:	605d      	str	r5, [r3, #4]
 800a4b0:	68f3      	ldr	r3, [r6, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	60f3      	str	r3, [r6, #12]
 800a4b6:	e689      	b.n	800a1cc <_scanf_float+0x98>
 800a4b8:	9b07      	ldr	r3, [sp, #28]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0e6      	beq.n	800a48c <_scanf_float+0x358>
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	003a      	movs	r2, r7
 800a4c2:	1c59      	adds	r1, r3, #1
 800a4c4:	9802      	ldr	r0, [sp, #8]
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	f000 ffcc 	bl	800b464 <_strtol_r>
 800a4cc:	9b07      	ldr	r3, [sp, #28]
 800a4ce:	9d08      	ldr	r5, [sp, #32]
 800a4d0:	1ac2      	subs	r2, r0, r3
 800a4d2:	0033      	movs	r3, r6
 800a4d4:	3370      	adds	r3, #112	; 0x70
 800a4d6:	33ff      	adds	r3, #255	; 0xff
 800a4d8:	429d      	cmp	r5, r3
 800a4da:	d302      	bcc.n	800a4e2 <_scanf_float+0x3ae>
 800a4dc:	0035      	movs	r5, r6
 800a4de:	356f      	adds	r5, #111	; 0x6f
 800a4e0:	35ff      	adds	r5, #255	; 0xff
 800a4e2:	4912      	ldr	r1, [pc, #72]	; (800a52c <_scanf_float+0x3f8>)
 800a4e4:	0028      	movs	r0, r5
 800a4e6:	f000 f8cd 	bl	800a684 <siprintf>
 800a4ea:	e7cf      	b.n	800a48c <_scanf_float+0x358>
 800a4ec:	2104      	movs	r1, #4
 800a4ee:	4008      	ands	r0, r1
 800a4f0:	1d1a      	adds	r2, r3, #4
 800a4f2:	9001      	str	r0, [sp, #4]
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d1d6      	bne.n	800a4a6 <_scanf_float+0x372>
 800a4f8:	9905      	ldr	r1, [sp, #20]
 800a4fa:	0020      	movs	r0, r4
 800a4fc:	600a      	str	r2, [r1, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	0022      	movs	r2, r4
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	0029      	movs	r1, r5
 800a506:	002b      	movs	r3, r5
 800a508:	f7f7 fd02 	bl	8001f10 <__aeabi_dcmpun>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d005      	beq.n	800a51c <_scanf_float+0x3e8>
 800a510:	9801      	ldr	r0, [sp, #4]
 800a512:	f000 f881 	bl	800a618 <nanf>
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	6018      	str	r0, [r3, #0]
 800a51a:	e7c9      	b.n	800a4b0 <_scanf_float+0x37c>
 800a51c:	0020      	movs	r0, r4
 800a51e:	0029      	movs	r1, r5
 800a520:	f7f7 fe06 	bl	8002130 <__aeabi_d2f>
 800a524:	e7f7      	b.n	800a516 <_scanf_float+0x3e2>
 800a526:	2700      	movs	r7, #0
 800a528:	e650      	b.n	800a1cc <_scanf_float+0x98>
 800a52a:	46c0      	nop			; (mov r8, r8)
 800a52c:	0800d808 	.word	0x0800d808

0800a530 <cleanup_glue>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	000d      	movs	r5, r1
 800a534:	6809      	ldr	r1, [r1, #0]
 800a536:	0004      	movs	r4, r0
 800a538:	2900      	cmp	r1, #0
 800a53a:	d001      	beq.n	800a540 <cleanup_glue+0x10>
 800a53c:	f7ff fff8 	bl	800a530 <cleanup_glue>
 800a540:	0029      	movs	r1, r5
 800a542:	0020      	movs	r0, r4
 800a544:	f7ff f8f0 	bl	8009728 <_free_r>
 800a548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a54c <_reclaim_reent>:
 800a54c:	4b31      	ldr	r3, [pc, #196]	; (800a614 <_reclaim_reent+0xc8>)
 800a54e:	b570      	push	{r4, r5, r6, lr}
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	0004      	movs	r4, r0
 800a554:	4283      	cmp	r3, r0
 800a556:	d049      	beq.n	800a5ec <_reclaim_reent+0xa0>
 800a558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <_reclaim_reent+0x28>
 800a55e:	2500      	movs	r5, #0
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	42ab      	cmp	r3, r5
 800a564:	d147      	bne.n	800a5f6 <_reclaim_reent+0xaa>
 800a566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	2900      	cmp	r1, #0
 800a56c:	d002      	beq.n	800a574 <_reclaim_reent+0x28>
 800a56e:	0020      	movs	r0, r4
 800a570:	f7ff f8da 	bl	8009728 <_free_r>
 800a574:	6961      	ldr	r1, [r4, #20]
 800a576:	2900      	cmp	r1, #0
 800a578:	d002      	beq.n	800a580 <_reclaim_reent+0x34>
 800a57a:	0020      	movs	r0, r4
 800a57c:	f7ff f8d4 	bl	8009728 <_free_r>
 800a580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a582:	2900      	cmp	r1, #0
 800a584:	d002      	beq.n	800a58c <_reclaim_reent+0x40>
 800a586:	0020      	movs	r0, r4
 800a588:	f7ff f8ce 	bl	8009728 <_free_r>
 800a58c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a58e:	2900      	cmp	r1, #0
 800a590:	d002      	beq.n	800a598 <_reclaim_reent+0x4c>
 800a592:	0020      	movs	r0, r4
 800a594:	f7ff f8c8 	bl	8009728 <_free_r>
 800a598:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a59a:	2900      	cmp	r1, #0
 800a59c:	d002      	beq.n	800a5a4 <_reclaim_reent+0x58>
 800a59e:	0020      	movs	r0, r4
 800a5a0:	f7ff f8c2 	bl	8009728 <_free_r>
 800a5a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a5a6:	2900      	cmp	r1, #0
 800a5a8:	d002      	beq.n	800a5b0 <_reclaim_reent+0x64>
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	f7ff f8bc 	bl	8009728 <_free_r>
 800a5b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a5b2:	2900      	cmp	r1, #0
 800a5b4:	d002      	beq.n	800a5bc <_reclaim_reent+0x70>
 800a5b6:	0020      	movs	r0, r4
 800a5b8:	f7ff f8b6 	bl	8009728 <_free_r>
 800a5bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a5be:	2900      	cmp	r1, #0
 800a5c0:	d002      	beq.n	800a5c8 <_reclaim_reent+0x7c>
 800a5c2:	0020      	movs	r0, r4
 800a5c4:	f7ff f8b0 	bl	8009728 <_free_r>
 800a5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	d002      	beq.n	800a5d4 <_reclaim_reent+0x88>
 800a5ce:	0020      	movs	r0, r4
 800a5d0:	f7ff f8aa 	bl	8009728 <_free_r>
 800a5d4:	69a3      	ldr	r3, [r4, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <_reclaim_reent+0xa0>
 800a5da:	0020      	movs	r0, r4
 800a5dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5de:	4798      	blx	r3
 800a5e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5e2:	2900      	cmp	r1, #0
 800a5e4:	d002      	beq.n	800a5ec <_reclaim_reent+0xa0>
 800a5e6:	0020      	movs	r0, r4
 800a5e8:	f7ff ffa2 	bl	800a530 <cleanup_glue>
 800a5ec:	bd70      	pop	{r4, r5, r6, pc}
 800a5ee:	5949      	ldr	r1, [r1, r5]
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	d108      	bne.n	800a606 <_reclaim_reent+0xba>
 800a5f4:	3504      	adds	r5, #4
 800a5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f8:	68d9      	ldr	r1, [r3, #12]
 800a5fa:	2d80      	cmp	r5, #128	; 0x80
 800a5fc:	d1f7      	bne.n	800a5ee <_reclaim_reent+0xa2>
 800a5fe:	0020      	movs	r0, r4
 800a600:	f7ff f892 	bl	8009728 <_free_r>
 800a604:	e7af      	b.n	800a566 <_reclaim_reent+0x1a>
 800a606:	680e      	ldr	r6, [r1, #0]
 800a608:	0020      	movs	r0, r4
 800a60a:	f7ff f88d 	bl	8009728 <_free_r>
 800a60e:	0031      	movs	r1, r6
 800a610:	e7ee      	b.n	800a5f0 <_reclaim_reent+0xa4>
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	2000001c 	.word	0x2000001c

0800a618 <nanf>:
 800a618:	4800      	ldr	r0, [pc, #0]	; (800a61c <nanf+0x4>)
 800a61a:	4770      	bx	lr
 800a61c:	7fc00000 	.word	0x7fc00000

0800a620 <sniprintf>:
 800a620:	b40c      	push	{r2, r3}
 800a622:	b530      	push	{r4, r5, lr}
 800a624:	4b16      	ldr	r3, [pc, #88]	; (800a680 <sniprintf+0x60>)
 800a626:	b09d      	sub	sp, #116	; 0x74
 800a628:	1e0c      	subs	r4, r1, #0
 800a62a:	681d      	ldr	r5, [r3, #0]
 800a62c:	da08      	bge.n	800a640 <sniprintf+0x20>
 800a62e:	238b      	movs	r3, #139	; 0x8b
 800a630:	2001      	movs	r0, #1
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	4240      	negs	r0, r0
 800a636:	b01d      	add	sp, #116	; 0x74
 800a638:	bc30      	pop	{r4, r5}
 800a63a:	bc08      	pop	{r3}
 800a63c:	b002      	add	sp, #8
 800a63e:	4718      	bx	r3
 800a640:	2382      	movs	r3, #130	; 0x82
 800a642:	a902      	add	r1, sp, #8
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	818b      	strh	r3, [r1, #12]
 800a648:	2300      	movs	r3, #0
 800a64a:	9002      	str	r0, [sp, #8]
 800a64c:	6108      	str	r0, [r1, #16]
 800a64e:	429c      	cmp	r4, r3
 800a650:	d000      	beq.n	800a654 <sniprintf+0x34>
 800a652:	1e63      	subs	r3, r4, #1
 800a654:	608b      	str	r3, [r1, #8]
 800a656:	614b      	str	r3, [r1, #20]
 800a658:	2301      	movs	r3, #1
 800a65a:	425b      	negs	r3, r3
 800a65c:	81cb      	strh	r3, [r1, #14]
 800a65e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a660:	ab21      	add	r3, sp, #132	; 0x84
 800a662:	0028      	movs	r0, r5
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	f002 fd39 	bl	800d0dc <_svfiprintf_r>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	da01      	bge.n	800a672 <sniprintf+0x52>
 800a66e:	238b      	movs	r3, #139	; 0x8b
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	2c00      	cmp	r4, #0
 800a674:	d0df      	beq.n	800a636 <sniprintf+0x16>
 800a676:	2300      	movs	r3, #0
 800a678:	9a02      	ldr	r2, [sp, #8]
 800a67a:	7013      	strb	r3, [r2, #0]
 800a67c:	e7db      	b.n	800a636 <sniprintf+0x16>
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	2000001c 	.word	0x2000001c

0800a684 <siprintf>:
 800a684:	b40e      	push	{r1, r2, r3}
 800a686:	b500      	push	{lr}
 800a688:	490b      	ldr	r1, [pc, #44]	; (800a6b8 <siprintf+0x34>)
 800a68a:	b09c      	sub	sp, #112	; 0x70
 800a68c:	ab1d      	add	r3, sp, #116	; 0x74
 800a68e:	9002      	str	r0, [sp, #8]
 800a690:	9006      	str	r0, [sp, #24]
 800a692:	9107      	str	r1, [sp, #28]
 800a694:	9104      	str	r1, [sp, #16]
 800a696:	4809      	ldr	r0, [pc, #36]	; (800a6bc <siprintf+0x38>)
 800a698:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <siprintf+0x3c>)
 800a69a:	cb04      	ldmia	r3!, {r2}
 800a69c:	9105      	str	r1, [sp, #20]
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	a902      	add	r1, sp, #8
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	f002 fd1a 	bl	800d0dc <_svfiprintf_r>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9a02      	ldr	r2, [sp, #8]
 800a6ac:	7013      	strb	r3, [r2, #0]
 800a6ae:	b01c      	add	sp, #112	; 0x70
 800a6b0:	bc08      	pop	{r3}
 800a6b2:	b003      	add	sp, #12
 800a6b4:	4718      	bx	r3
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	7fffffff 	.word	0x7fffffff
 800a6bc:	2000001c 	.word	0x2000001c
 800a6c0:	ffff0208 	.word	0xffff0208

0800a6c4 <sulp>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	0016      	movs	r6, r2
 800a6c8:	000d      	movs	r5, r1
 800a6ca:	f002 fb71 	bl	800cdb0 <__ulp>
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	d00d      	beq.n	800a6ee <sulp+0x2a>
 800a6d2:	236b      	movs	r3, #107	; 0x6b
 800a6d4:	006a      	lsls	r2, r5, #1
 800a6d6:	0d52      	lsrs	r2, r2, #21
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dd07      	ble.n	800a6ee <sulp+0x2a>
 800a6de:	2400      	movs	r4, #0
 800a6e0:	4a03      	ldr	r2, [pc, #12]	; (800a6f0 <sulp+0x2c>)
 800a6e2:	051b      	lsls	r3, r3, #20
 800a6e4:	189d      	adds	r5, r3, r2
 800a6e6:	002b      	movs	r3, r5
 800a6e8:	0022      	movs	r2, r4
 800a6ea:	f7f6 fe57 	bl	800139c <__aeabi_dmul>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	3ff00000 	.word	0x3ff00000

0800a6f4 <_strtod_l>:
 800a6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f6:	b0a7      	sub	sp, #156	; 0x9c
 800a6f8:	9307      	str	r3, [sp, #28]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9004      	str	r0, [sp, #16]
 800a6fe:	9807      	ldr	r0, [sp, #28]
 800a700:	9322      	str	r3, [sp, #136]	; 0x88
 800a702:	9106      	str	r1, [sp, #24]
 800a704:	921d      	str	r2, [sp, #116]	; 0x74
 800a706:	f002 f857 	bl	800c7b8 <__localeconv_l>
 800a70a:	0005      	movs	r5, r0
 800a70c:	6800      	ldr	r0, [r0, #0]
 800a70e:	f7f5 fcfb 	bl	8000108 <strlen>
 800a712:	2600      	movs	r6, #0
 800a714:	2700      	movs	r7, #0
 800a716:	9b06      	ldr	r3, [sp, #24]
 800a718:	9005      	str	r0, [sp, #20]
 800a71a:	9321      	str	r3, [sp, #132]	; 0x84
 800a71c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	2a0d      	cmp	r2, #13
 800a722:	d839      	bhi.n	800a798 <_strtod_l+0xa4>
 800a724:	2a09      	cmp	r2, #9
 800a726:	d23d      	bcs.n	800a7a4 <_strtod_l+0xb0>
 800a728:	2a00      	cmp	r2, #0
 800a72a:	d044      	beq.n	800a7b6 <_strtod_l+0xc2>
 800a72c:	2300      	movs	r3, #0
 800a72e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a730:	2200      	movs	r2, #0
 800a732:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800a734:	920c      	str	r2, [sp, #48]	; 0x30
 800a736:	7823      	ldrb	r3, [r4, #0]
 800a738:	2b30      	cmp	r3, #48	; 0x30
 800a73a:	d000      	beq.n	800a73e <_strtod_l+0x4a>
 800a73c:	e07e      	b.n	800a83c <_strtod_l+0x148>
 800a73e:	7863      	ldrb	r3, [r4, #1]
 800a740:	2b58      	cmp	r3, #88	; 0x58
 800a742:	d002      	beq.n	800a74a <_strtod_l+0x56>
 800a744:	2b78      	cmp	r3, #120	; 0x78
 800a746:	d000      	beq.n	800a74a <_strtod_l+0x56>
 800a748:	e06e      	b.n	800a828 <_strtod_l+0x134>
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	4a96      	ldr	r2, [pc, #600]	; (800a9a8 <_strtod_l+0x2b4>)
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a752:	a921      	add	r1, sp, #132	; 0x84
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	ab22      	add	r3, sp, #136	; 0x88
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	9804      	ldr	r0, [sp, #16]
 800a75c:	ab23      	add	r3, sp, #140	; 0x8c
 800a75e:	f001 fd40 	bl	800c1e2 <__gethex>
 800a762:	2507      	movs	r5, #7
 800a764:	9005      	str	r0, [sp, #20]
 800a766:	4005      	ands	r5, r0
 800a768:	d005      	beq.n	800a776 <_strtod_l+0x82>
 800a76a:	2d06      	cmp	r5, #6
 800a76c:	d12f      	bne.n	800a7ce <_strtod_l+0xda>
 800a76e:	2300      	movs	r3, #0
 800a770:	3401      	adds	r4, #1
 800a772:	9421      	str	r4, [sp, #132]	; 0x84
 800a774:	9313      	str	r3, [sp, #76]	; 0x4c
 800a776:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <_strtod_l+0x8e>
 800a77c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a77e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01d      	beq.n	800a7c4 <_strtod_l+0xd0>
 800a788:	2380      	movs	r3, #128	; 0x80
 800a78a:	0032      	movs	r2, r6
 800a78c:	061b      	lsls	r3, r3, #24
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	0010      	movs	r0, r2
 800a792:	0019      	movs	r1, r3
 800a794:	b027      	add	sp, #156	; 0x9c
 800a796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a798:	2a2b      	cmp	r2, #43	; 0x2b
 800a79a:	d016      	beq.n	800a7ca <_strtod_l+0xd6>
 800a79c:	2a2d      	cmp	r2, #45	; 0x2d
 800a79e:	d003      	beq.n	800a7a8 <_strtod_l+0xb4>
 800a7a0:	2a20      	cmp	r2, #32
 800a7a2:	d1c3      	bne.n	800a72c <_strtod_l+0x38>
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	e7b8      	b.n	800a71a <_strtod_l+0x26>
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	9213      	str	r2, [sp, #76]	; 0x4c
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	9221      	str	r2, [sp, #132]	; 0x84
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1bc      	bne.n	800a730 <_strtod_l+0x3c>
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	9321      	str	r3, [sp, #132]	; 0x84
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1db      	bne.n	800a77c <_strtod_l+0x88>
 800a7c4:	0032      	movs	r2, r6
 800a7c6:	003b      	movs	r3, r7
 800a7c8:	e7e2      	b.n	800a790 <_strtod_l+0x9c>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	e7ed      	b.n	800a7aa <_strtod_l+0xb6>
 800a7ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d007      	beq.n	800a7e4 <_strtod_l+0xf0>
 800a7d4:	2135      	movs	r1, #53	; 0x35
 800a7d6:	a824      	add	r0, sp, #144	; 0x90
 800a7d8:	f002 fbd7 	bl	800cf8a <__copybits>
 800a7dc:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a7de:	9804      	ldr	r0, [sp, #16]
 800a7e0:	f002 f84d 	bl	800c87e <_Bfree>
 800a7e4:	1e68      	subs	r0, r5, #1
 800a7e6:	2804      	cmp	r0, #4
 800a7e8:	d806      	bhi.n	800a7f8 <_strtod_l+0x104>
 800a7ea:	f7f5 fc95 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a7ee:	030c      	.short	0x030c
 800a7f0:	1917      	.short	0x1917
 800a7f2:	0c          	.byte	0x0c
 800a7f3:	00          	.byte	0x00
 800a7f4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a7f6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a7f8:	9b05      	ldr	r3, [sp, #20]
 800a7fa:	071b      	lsls	r3, r3, #28
 800a7fc:	d5bb      	bpl.n	800a776 <_strtod_l+0x82>
 800a7fe:	2380      	movs	r3, #128	; 0x80
 800a800:	061b      	lsls	r3, r3, #24
 800a802:	431f      	orrs	r7, r3
 800a804:	e7b7      	b.n	800a776 <_strtod_l+0x82>
 800a806:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a808:	4a68      	ldr	r2, [pc, #416]	; (800a9ac <_strtod_l+0x2b8>)
 800a80a:	4969      	ldr	r1, [pc, #420]	; (800a9b0 <_strtod_l+0x2bc>)
 800a80c:	401a      	ands	r2, r3
 800a80e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a810:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a812:	185b      	adds	r3, r3, r1
 800a814:	051b      	lsls	r3, r3, #20
 800a816:	431a      	orrs	r2, r3
 800a818:	0017      	movs	r7, r2
 800a81a:	e7ed      	b.n	800a7f8 <_strtod_l+0x104>
 800a81c:	4f65      	ldr	r7, [pc, #404]	; (800a9b4 <_strtod_l+0x2c0>)
 800a81e:	e7eb      	b.n	800a7f8 <_strtod_l+0x104>
 800a820:	2601      	movs	r6, #1
 800a822:	4f65      	ldr	r7, [pc, #404]	; (800a9b8 <_strtod_l+0x2c4>)
 800a824:	4276      	negs	r6, r6
 800a826:	e7e7      	b.n	800a7f8 <_strtod_l+0x104>
 800a828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	9221      	str	r2, [sp, #132]	; 0x84
 800a82e:	785b      	ldrb	r3, [r3, #1]
 800a830:	2b30      	cmp	r3, #48	; 0x30
 800a832:	d0f9      	beq.n	800a828 <_strtod_l+0x134>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d09e      	beq.n	800a776 <_strtod_l+0x82>
 800a838:	2301      	movs	r3, #1
 800a83a:	930c      	str	r3, [sp, #48]	; 0x30
 800a83c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a83e:	220a      	movs	r2, #10
 800a840:	9312      	str	r3, [sp, #72]	; 0x48
 800a842:	2300      	movs	r3, #0
 800a844:	930b      	str	r3, [sp, #44]	; 0x2c
 800a846:	9308      	str	r3, [sp, #32]
 800a848:	930a      	str	r3, [sp, #40]	; 0x28
 800a84a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a84c:	7804      	ldrb	r4, [r0, #0]
 800a84e:	0023      	movs	r3, r4
 800a850:	3b30      	subs	r3, #48	; 0x30
 800a852:	b2d9      	uxtb	r1, r3
 800a854:	2909      	cmp	r1, #9
 800a856:	d934      	bls.n	800a8c2 <_strtod_l+0x1ce>
 800a858:	9a05      	ldr	r2, [sp, #20]
 800a85a:	6829      	ldr	r1, [r5, #0]
 800a85c:	f002 fd3c 	bl	800d2d8 <strncmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	d040      	beq.n	800a8e6 <_strtod_l+0x1f2>
 800a864:	2000      	movs	r0, #0
 800a866:	0023      	movs	r3, r4
 800a868:	4684      	mov	ip, r0
 800a86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a86c:	9007      	str	r0, [sp, #28]
 800a86e:	9205      	str	r2, [sp, #20]
 800a870:	2220      	movs	r2, #32
 800a872:	0019      	movs	r1, r3
 800a874:	4391      	bics	r1, r2
 800a876:	000a      	movs	r2, r1
 800a878:	2100      	movs	r1, #0
 800a87a:	2a45      	cmp	r2, #69	; 0x45
 800a87c:	d000      	beq.n	800a880 <_strtod_l+0x18c>
 800a87e:	e0bf      	b.n	800aa00 <_strtod_l+0x30c>
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a884:	4303      	orrs	r3, r0
 800a886:	4313      	orrs	r3, r2
 800a888:	428b      	cmp	r3, r1
 800a88a:	d094      	beq.n	800a7b6 <_strtod_l+0xc2>
 800a88c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a88e:	9306      	str	r3, [sp, #24]
 800a890:	3301      	adds	r3, #1
 800a892:	9321      	str	r3, [sp, #132]	; 0x84
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	2b2b      	cmp	r3, #43	; 0x2b
 800a89a:	d100      	bne.n	800a89e <_strtod_l+0x1aa>
 800a89c:	e082      	b.n	800a9a4 <_strtod_l+0x2b0>
 800a89e:	000c      	movs	r4, r1
 800a8a0:	2b2d      	cmp	r3, #45	; 0x2d
 800a8a2:	d105      	bne.n	800a8b0 <_strtod_l+0x1bc>
 800a8a4:	2401      	movs	r4, #1
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	9321      	str	r3, [sp, #132]	; 0x84
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	789b      	ldrb	r3, [r3, #2]
 800a8b0:	001a      	movs	r2, r3
 800a8b2:	3a30      	subs	r2, #48	; 0x30
 800a8b4:	2a09      	cmp	r2, #9
 800a8b6:	d800      	bhi.n	800a8ba <_strtod_l+0x1c6>
 800a8b8:	e084      	b.n	800a9c4 <_strtod_l+0x2d0>
 800a8ba:	9a06      	ldr	r2, [sp, #24]
 800a8bc:	2100      	movs	r1, #0
 800a8be:	9221      	str	r2, [sp, #132]	; 0x84
 800a8c0:	e09e      	b.n	800aa00 <_strtod_l+0x30c>
 800a8c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8c4:	2908      	cmp	r1, #8
 800a8c6:	dc09      	bgt.n	800a8dc <_strtod_l+0x1e8>
 800a8c8:	9908      	ldr	r1, [sp, #32]
 800a8ca:	4351      	muls	r1, r2
 800a8cc:	18cb      	adds	r3, r1, r3
 800a8ce:	9308      	str	r3, [sp, #32]
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d8:	9021      	str	r0, [sp, #132]	; 0x84
 800a8da:	e7b6      	b.n	800a84a <_strtod_l+0x156>
 800a8dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8de:	4351      	muls	r1, r2
 800a8e0:	18cb      	adds	r3, r1, r3
 800a8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e4:	e7f4      	b.n	800a8d0 <_strtod_l+0x1dc>
 800a8e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	4694      	mov	ip, r2
 800a8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ee:	4463      	add	r3, ip
 800a8f0:	9321      	str	r3, [sp, #132]	; 0x84
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2a00      	cmp	r2, #0
 800a8f6:	d036      	beq.n	800a966 <_strtod_l+0x272>
 800a8f8:	4684      	mov	ip, r0
 800a8fa:	9205      	str	r2, [sp, #20]
 800a8fc:	001a      	movs	r2, r3
 800a8fe:	3a30      	subs	r2, #48	; 0x30
 800a900:	2a09      	cmp	r2, #9
 800a902:	d912      	bls.n	800a92a <_strtod_l+0x236>
 800a904:	2201      	movs	r2, #1
 800a906:	9207      	str	r2, [sp, #28]
 800a908:	e7b2      	b.n	800a870 <_strtod_l+0x17c>
 800a90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a90c:	3001      	adds	r0, #1
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	9221      	str	r2, [sp, #132]	; 0x84
 800a912:	785b      	ldrb	r3, [r3, #1]
 800a914:	2b30      	cmp	r3, #48	; 0x30
 800a916:	d0f8      	beq.n	800a90a <_strtod_l+0x216>
 800a918:	001a      	movs	r2, r3
 800a91a:	3a31      	subs	r2, #49	; 0x31
 800a91c:	2a08      	cmp	r2, #8
 800a91e:	d83c      	bhi.n	800a99a <_strtod_l+0x2a6>
 800a920:	4684      	mov	ip, r0
 800a922:	2000      	movs	r0, #0
 800a924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a926:	9005      	str	r0, [sp, #20]
 800a928:	9212      	str	r2, [sp, #72]	; 0x48
 800a92a:	3b30      	subs	r3, #48	; 0x30
 800a92c:	1c42      	adds	r2, r0, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d013      	beq.n	800a95a <_strtod_l+0x266>
 800a932:	210a      	movs	r1, #10
 800a934:	4494      	add	ip, r2
 800a936:	9a05      	ldr	r2, [sp, #20]
 800a938:	1885      	adds	r5, r0, r2
 800a93a:	42aa      	cmp	r2, r5
 800a93c:	d115      	bne.n	800a96a <_strtod_l+0x276>
 800a93e:	9905      	ldr	r1, [sp, #20]
 800a940:	9a05      	ldr	r2, [sp, #20]
 800a942:	3101      	adds	r1, #1
 800a944:	1809      	adds	r1, r1, r0
 800a946:	1812      	adds	r2, r2, r0
 800a948:	9105      	str	r1, [sp, #20]
 800a94a:	2a08      	cmp	r2, #8
 800a94c:	dc1b      	bgt.n	800a986 <_strtod_l+0x292>
 800a94e:	220a      	movs	r2, #10
 800a950:	9908      	ldr	r1, [sp, #32]
 800a952:	434a      	muls	r2, r1
 800a954:	189b      	adds	r3, r3, r2
 800a956:	2200      	movs	r2, #0
 800a958:	9308      	str	r3, [sp, #32]
 800a95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a95c:	0010      	movs	r0, r2
 800a95e:	1c59      	adds	r1, r3, #1
 800a960:	9121      	str	r1, [sp, #132]	; 0x84
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	e7ca      	b.n	800a8fc <_strtod_l+0x208>
 800a966:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a968:	e7d4      	b.n	800a914 <_strtod_l+0x220>
 800a96a:	1c54      	adds	r4, r2, #1
 800a96c:	2a08      	cmp	r2, #8
 800a96e:	dc04      	bgt.n	800a97a <_strtod_l+0x286>
 800a970:	9a08      	ldr	r2, [sp, #32]
 800a972:	434a      	muls	r2, r1
 800a974:	9208      	str	r2, [sp, #32]
 800a976:	0022      	movs	r2, r4
 800a978:	e7df      	b.n	800a93a <_strtod_l+0x246>
 800a97a:	2c10      	cmp	r4, #16
 800a97c:	dcfb      	bgt.n	800a976 <_strtod_l+0x282>
 800a97e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a980:	434a      	muls	r2, r1
 800a982:	920b      	str	r2, [sp, #44]	; 0x2c
 800a984:	e7f7      	b.n	800a976 <_strtod_l+0x282>
 800a986:	9905      	ldr	r1, [sp, #20]
 800a988:	2200      	movs	r2, #0
 800a98a:	2910      	cmp	r1, #16
 800a98c:	dce5      	bgt.n	800a95a <_strtod_l+0x266>
 800a98e:	210a      	movs	r1, #10
 800a990:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a992:	4341      	muls	r1, r0
 800a994:	185b      	adds	r3, r3, r1
 800a996:	930b      	str	r3, [sp, #44]	; 0x2c
 800a998:	e7df      	b.n	800a95a <_strtod_l+0x266>
 800a99a:	2200      	movs	r2, #0
 800a99c:	4694      	mov	ip, r2
 800a99e:	9205      	str	r2, [sp, #20]
 800a9a0:	3201      	adds	r2, #1
 800a9a2:	e7b0      	b.n	800a906 <_strtod_l+0x212>
 800a9a4:	000c      	movs	r4, r1
 800a9a6:	e77e      	b.n	800a8a6 <_strtod_l+0x1b2>
 800a9a8:	0800d810 	.word	0x0800d810
 800a9ac:	ffefffff 	.word	0xffefffff
 800a9b0:	00000433 	.word	0x00000433
 800a9b4:	7ff00000 	.word	0x7ff00000
 800a9b8:	7fffffff 	.word	0x7fffffff
 800a9bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	9221      	str	r2, [sp, #132]	; 0x84
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b30      	cmp	r3, #48	; 0x30
 800a9c6:	d0f9      	beq.n	800a9bc <_strtod_l+0x2c8>
 800a9c8:	001a      	movs	r2, r3
 800a9ca:	3a31      	subs	r2, #49	; 0x31
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	2a08      	cmp	r2, #8
 800a9d0:	d816      	bhi.n	800aa00 <_strtod_l+0x30c>
 800a9d2:	3b30      	subs	r3, #48	; 0x30
 800a9d4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800a9d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a9d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	9121      	str	r1, [sp, #132]	; 0x84
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	3a30      	subs	r2, #48	; 0x30
 800a9e4:	2a09      	cmp	r2, #9
 800a9e6:	d932      	bls.n	800aa4e <_strtod_l+0x35a>
 800a9e8:	1b4a      	subs	r2, r1, r5
 800a9ea:	4dad      	ldr	r5, [pc, #692]	; (800aca0 <_strtod_l+0x5ac>)
 800a9ec:	0029      	movs	r1, r5
 800a9ee:	2a08      	cmp	r2, #8
 800a9f0:	dc03      	bgt.n	800a9fa <_strtod_l+0x306>
 800a9f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a9f4:	42a9      	cmp	r1, r5
 800a9f6:	dd00      	ble.n	800a9fa <_strtod_l+0x306>
 800a9f8:	0029      	movs	r1, r5
 800a9fa:	2c00      	cmp	r4, #0
 800a9fc:	d000      	beq.n	800aa00 <_strtod_l+0x30c>
 800a9fe:	4249      	negs	r1, r1
 800aa00:	9a05      	ldr	r2, [sp, #20]
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	d149      	bne.n	800aa9a <_strtod_l+0x3a6>
 800aa06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa08:	4310      	orrs	r0, r2
 800aa0a:	d000      	beq.n	800aa0e <_strtod_l+0x31a>
 800aa0c:	e6b3      	b.n	800a776 <_strtod_l+0x82>
 800aa0e:	9a07      	ldr	r2, [sp, #28]
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	d000      	beq.n	800aa16 <_strtod_l+0x322>
 800aa14:	e6cf      	b.n	800a7b6 <_strtod_l+0xc2>
 800aa16:	2b4e      	cmp	r3, #78	; 0x4e
 800aa18:	d025      	beq.n	800aa66 <_strtod_l+0x372>
 800aa1a:	dc1f      	bgt.n	800aa5c <_strtod_l+0x368>
 800aa1c:	2b49      	cmp	r3, #73	; 0x49
 800aa1e:	d000      	beq.n	800aa22 <_strtod_l+0x32e>
 800aa20:	e6c9      	b.n	800a7b6 <_strtod_l+0xc2>
 800aa22:	49a0      	ldr	r1, [pc, #640]	; (800aca4 <_strtod_l+0x5b0>)
 800aa24:	a821      	add	r0, sp, #132	; 0x84
 800aa26:	f001 fe19 	bl	800c65c <__match>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d100      	bne.n	800aa30 <_strtod_l+0x33c>
 800aa2e:	e6c2      	b.n	800a7b6 <_strtod_l+0xc2>
 800aa30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa32:	499d      	ldr	r1, [pc, #628]	; (800aca8 <_strtod_l+0x5b4>)
 800aa34:	3b01      	subs	r3, #1
 800aa36:	a821      	add	r0, sp, #132	; 0x84
 800aa38:	9321      	str	r3, [sp, #132]	; 0x84
 800aa3a:	f001 fe0f 	bl	800c65c <__match>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d102      	bne.n	800aa48 <_strtod_l+0x354>
 800aa42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa44:	3301      	adds	r3, #1
 800aa46:	9321      	str	r3, [sp, #132]	; 0x84
 800aa48:	4f98      	ldr	r7, [pc, #608]	; (800acac <_strtod_l+0x5b8>)
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	e693      	b.n	800a776 <_strtod_l+0x82>
 800aa4e:	220a      	movs	r2, #10
 800aa50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa52:	434a      	muls	r2, r1
 800aa54:	18d2      	adds	r2, r2, r3
 800aa56:	3a30      	subs	r2, #48	; 0x30
 800aa58:	920e      	str	r2, [sp, #56]	; 0x38
 800aa5a:	e7bd      	b.n	800a9d8 <_strtod_l+0x2e4>
 800aa5c:	2b69      	cmp	r3, #105	; 0x69
 800aa5e:	d0e0      	beq.n	800aa22 <_strtod_l+0x32e>
 800aa60:	2b6e      	cmp	r3, #110	; 0x6e
 800aa62:	d000      	beq.n	800aa66 <_strtod_l+0x372>
 800aa64:	e6a7      	b.n	800a7b6 <_strtod_l+0xc2>
 800aa66:	4992      	ldr	r1, [pc, #584]	; (800acb0 <_strtod_l+0x5bc>)
 800aa68:	a821      	add	r0, sp, #132	; 0x84
 800aa6a:	f001 fdf7 	bl	800c65c <__match>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d100      	bne.n	800aa74 <_strtod_l+0x380>
 800aa72:	e6a0      	b.n	800a7b6 <_strtod_l+0xc2>
 800aa74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b28      	cmp	r3, #40	; 0x28
 800aa7a:	d10c      	bne.n	800aa96 <_strtod_l+0x3a2>
 800aa7c:	aa24      	add	r2, sp, #144	; 0x90
 800aa7e:	498d      	ldr	r1, [pc, #564]	; (800acb4 <_strtod_l+0x5c0>)
 800aa80:	a821      	add	r0, sp, #132	; 0x84
 800aa82:	f001 fdff 	bl	800c684 <__hexnan>
 800aa86:	2805      	cmp	r0, #5
 800aa88:	d105      	bne.n	800aa96 <_strtod_l+0x3a2>
 800aa8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800aa8c:	4a87      	ldr	r2, [pc, #540]	; (800acac <_strtod_l+0x5b8>)
 800aa8e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800aa90:	431a      	orrs	r2, r3
 800aa92:	0017      	movs	r7, r2
 800aa94:	e66f      	b.n	800a776 <_strtod_l+0x82>
 800aa96:	4f88      	ldr	r7, [pc, #544]	; (800acb8 <_strtod_l+0x5c4>)
 800aa98:	e7d7      	b.n	800aa4a <_strtod_l+0x356>
 800aa9a:	4663      	mov	r3, ip
 800aa9c:	1acb      	subs	r3, r1, r3
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <_strtod_l+0x3b6>
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	930a      	str	r3, [sp, #40]	; 0x28
 800aaaa:	9c05      	ldr	r4, [sp, #20]
 800aaac:	2c10      	cmp	r4, #16
 800aaae:	dd00      	ble.n	800aab2 <_strtod_l+0x3be>
 800aab0:	2410      	movs	r4, #16
 800aab2:	9808      	ldr	r0, [sp, #32]
 800aab4:	f7f7 fab8 	bl	8002028 <__aeabi_ui2d>
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	0006      	movs	r6, r0
 800aabc:	000f      	movs	r7, r1
 800aabe:	2b09      	cmp	r3, #9
 800aac0:	dc15      	bgt.n	800aaee <_strtod_l+0x3fa>
 800aac2:	9b07      	ldr	r3, [sp, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d100      	bne.n	800aaca <_strtod_l+0x3d6>
 800aac8:	e655      	b.n	800a776 <_strtod_l+0x82>
 800aaca:	9b07      	ldr	r3, [sp, #28]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dc00      	bgt.n	800aad2 <_strtod_l+0x3de>
 800aad0:	e07d      	b.n	800abce <_strtod_l+0x4da>
 800aad2:	2b16      	cmp	r3, #22
 800aad4:	dc62      	bgt.n	800ab9c <_strtod_l+0x4a8>
 800aad6:	00dc      	lsls	r4, r3, #3
 800aad8:	4b78      	ldr	r3, [pc, #480]	; (800acbc <_strtod_l+0x5c8>)
 800aada:	0032      	movs	r2, r6
 800aadc:	1919      	adds	r1, r3, r4
 800aade:	003b      	movs	r3, r7
 800aae0:	6808      	ldr	r0, [r1, #0]
 800aae2:	6849      	ldr	r1, [r1, #4]
 800aae4:	f7f6 fc5a 	bl	800139c <__aeabi_dmul>
 800aae8:	0006      	movs	r6, r0
 800aaea:	000f      	movs	r7, r1
 800aaec:	e643      	b.n	800a776 <_strtod_l+0x82>
 800aaee:	0022      	movs	r2, r4
 800aaf0:	4b72      	ldr	r3, [pc, #456]	; (800acbc <_strtod_l+0x5c8>)
 800aaf2:	3a09      	subs	r2, #9
 800aaf4:	00d2      	lsls	r2, r2, #3
 800aaf6:	189b      	adds	r3, r3, r2
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f7f6 fc4e 	bl	800139c <__aeabi_dmul>
 800ab00:	0006      	movs	r6, r0
 800ab02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab04:	000f      	movs	r7, r1
 800ab06:	f7f7 fa8f 	bl	8002028 <__aeabi_ui2d>
 800ab0a:	000b      	movs	r3, r1
 800ab0c:	0002      	movs	r2, r0
 800ab0e:	0039      	movs	r1, r7
 800ab10:	0030      	movs	r0, r6
 800ab12:	f7f5 fd1d 	bl	8000550 <__aeabi_dadd>
 800ab16:	9b05      	ldr	r3, [sp, #20]
 800ab18:	0006      	movs	r6, r0
 800ab1a:	000f      	movs	r7, r1
 800ab1c:	2b0f      	cmp	r3, #15
 800ab1e:	ddd0      	ble.n	800aac2 <_strtod_l+0x3ce>
 800ab20:	9b05      	ldr	r3, [sp, #20]
 800ab22:	1b1c      	subs	r4, r3, r4
 800ab24:	9b07      	ldr	r3, [sp, #28]
 800ab26:	18e4      	adds	r4, r4, r3
 800ab28:	2c00      	cmp	r4, #0
 800ab2a:	dc00      	bgt.n	800ab2e <_strtod_l+0x43a>
 800ab2c:	e094      	b.n	800ac58 <_strtod_l+0x564>
 800ab2e:	230f      	movs	r3, #15
 800ab30:	4023      	ands	r3, r4
 800ab32:	d00a      	beq.n	800ab4a <_strtod_l+0x456>
 800ab34:	4961      	ldr	r1, [pc, #388]	; (800acbc <_strtod_l+0x5c8>)
 800ab36:	00db      	lsls	r3, r3, #3
 800ab38:	18c9      	adds	r1, r1, r3
 800ab3a:	0032      	movs	r2, r6
 800ab3c:	6808      	ldr	r0, [r1, #0]
 800ab3e:	6849      	ldr	r1, [r1, #4]
 800ab40:	003b      	movs	r3, r7
 800ab42:	f7f6 fc2b 	bl	800139c <__aeabi_dmul>
 800ab46:	0006      	movs	r6, r0
 800ab48:	000f      	movs	r7, r1
 800ab4a:	230f      	movs	r3, #15
 800ab4c:	439c      	bics	r4, r3
 800ab4e:	d06e      	beq.n	800ac2e <_strtod_l+0x53a>
 800ab50:	3326      	adds	r3, #38	; 0x26
 800ab52:	33ff      	adds	r3, #255	; 0xff
 800ab54:	429c      	cmp	r4, r3
 800ab56:	dd48      	ble.n	800abea <_strtod_l+0x4f6>
 800ab58:	2400      	movs	r4, #0
 800ab5a:	9405      	str	r4, [sp, #20]
 800ab5c:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab5e:	940a      	str	r4, [sp, #40]	; 0x28
 800ab60:	2322      	movs	r3, #34	; 0x22
 800ab62:	2600      	movs	r6, #0
 800ab64:	9a04      	ldr	r2, [sp, #16]
 800ab66:	4f51      	ldr	r7, [pc, #324]	; (800acac <_strtod_l+0x5b8>)
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	d100      	bne.n	800ab72 <_strtod_l+0x47e>
 800ab70:	e601      	b.n	800a776 <_strtod_l+0x82>
 800ab72:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ab74:	9804      	ldr	r0, [sp, #16]
 800ab76:	f001 fe82 	bl	800c87e <_Bfree>
 800ab7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab7c:	9804      	ldr	r0, [sp, #16]
 800ab7e:	f001 fe7e 	bl	800c87e <_Bfree>
 800ab82:	9905      	ldr	r1, [sp, #20]
 800ab84:	9804      	ldr	r0, [sp, #16]
 800ab86:	f001 fe7a 	bl	800c87e <_Bfree>
 800ab8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab8c:	9804      	ldr	r0, [sp, #16]
 800ab8e:	f001 fe76 	bl	800c87e <_Bfree>
 800ab92:	0021      	movs	r1, r4
 800ab94:	9804      	ldr	r0, [sp, #16]
 800ab96:	f001 fe72 	bl	800c87e <_Bfree>
 800ab9a:	e5ec      	b.n	800a776 <_strtod_l+0x82>
 800ab9c:	2325      	movs	r3, #37	; 0x25
 800ab9e:	9a05      	ldr	r2, [sp, #20]
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	9a07      	ldr	r2, [sp, #28]
 800aba4:	4293      	cmp	r3, r2
 800aba6:	dbbb      	blt.n	800ab20 <_strtod_l+0x42c>
 800aba8:	230f      	movs	r3, #15
 800abaa:	9a05      	ldr	r2, [sp, #20]
 800abac:	4c43      	ldr	r4, [pc, #268]	; (800acbc <_strtod_l+0x5c8>)
 800abae:	1a9d      	subs	r5, r3, r2
 800abb0:	00e9      	lsls	r1, r5, #3
 800abb2:	1861      	adds	r1, r4, r1
 800abb4:	0032      	movs	r2, r6
 800abb6:	6808      	ldr	r0, [r1, #0]
 800abb8:	6849      	ldr	r1, [r1, #4]
 800abba:	003b      	movs	r3, r7
 800abbc:	f7f6 fbee 	bl	800139c <__aeabi_dmul>
 800abc0:	9b07      	ldr	r3, [sp, #28]
 800abc2:	1b5e      	subs	r6, r3, r5
 800abc4:	00f6      	lsls	r6, r6, #3
 800abc6:	19a6      	adds	r6, r4, r6
 800abc8:	6832      	ldr	r2, [r6, #0]
 800abca:	6873      	ldr	r3, [r6, #4]
 800abcc:	e78a      	b.n	800aae4 <_strtod_l+0x3f0>
 800abce:	9b07      	ldr	r3, [sp, #28]
 800abd0:	3316      	adds	r3, #22
 800abd2:	dba5      	blt.n	800ab20 <_strtod_l+0x42c>
 800abd4:	9b07      	ldr	r3, [sp, #28]
 800abd6:	0030      	movs	r0, r6
 800abd8:	00da      	lsls	r2, r3, #3
 800abda:	4b38      	ldr	r3, [pc, #224]	; (800acbc <_strtod_l+0x5c8>)
 800abdc:	0039      	movs	r1, r7
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f7f5 ffd0 	bl	8000b88 <__aeabi_ddiv>
 800abe8:	e77e      	b.n	800aae8 <_strtod_l+0x3f4>
 800abea:	2300      	movs	r3, #0
 800abec:	0030      	movs	r0, r6
 800abee:	0039      	movs	r1, r7
 800abf0:	001d      	movs	r5, r3
 800abf2:	1124      	asrs	r4, r4, #4
 800abf4:	2c01      	cmp	r4, #1
 800abf6:	dc1d      	bgt.n	800ac34 <_strtod_l+0x540>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <_strtod_l+0x50c>
 800abfc:	0006      	movs	r6, r0
 800abfe:	000f      	movs	r7, r1
 800ac00:	4b2f      	ldr	r3, [pc, #188]	; (800acc0 <_strtod_l+0x5cc>)
 800ac02:	00ed      	lsls	r5, r5, #3
 800ac04:	18ff      	adds	r7, r7, r3
 800ac06:	4b2f      	ldr	r3, [pc, #188]	; (800acc4 <_strtod_l+0x5d0>)
 800ac08:	0032      	movs	r2, r6
 800ac0a:	195d      	adds	r5, r3, r5
 800ac0c:	6828      	ldr	r0, [r5, #0]
 800ac0e:	6869      	ldr	r1, [r5, #4]
 800ac10:	003b      	movs	r3, r7
 800ac12:	f7f6 fbc3 	bl	800139c <__aeabi_dmul>
 800ac16:	4b25      	ldr	r3, [pc, #148]	; (800acac <_strtod_l+0x5b8>)
 800ac18:	4a2b      	ldr	r2, [pc, #172]	; (800acc8 <_strtod_l+0x5d4>)
 800ac1a:	0006      	movs	r6, r0
 800ac1c:	400b      	ands	r3, r1
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d89a      	bhi.n	800ab58 <_strtod_l+0x464>
 800ac22:	4a2a      	ldr	r2, [pc, #168]	; (800accc <_strtod_l+0x5d8>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d913      	bls.n	800ac50 <_strtod_l+0x55c>
 800ac28:	2601      	movs	r6, #1
 800ac2a:	4f29      	ldr	r7, [pc, #164]	; (800acd0 <_strtod_l+0x5dc>)
 800ac2c:	4276      	negs	r6, r6
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9306      	str	r3, [sp, #24]
 800ac32:	e07b      	b.n	800ad2c <_strtod_l+0x638>
 800ac34:	2201      	movs	r2, #1
 800ac36:	4214      	tst	r4, r2
 800ac38:	d007      	beq.n	800ac4a <_strtod_l+0x556>
 800ac3a:	4a22      	ldr	r2, [pc, #136]	; (800acc4 <_strtod_l+0x5d0>)
 800ac3c:	00eb      	lsls	r3, r5, #3
 800ac3e:	189b      	adds	r3, r3, r2
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	f7f6 fbaa 	bl	800139c <__aeabi_dmul>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	3501      	adds	r5, #1
 800ac4c:	1064      	asrs	r4, r4, #1
 800ac4e:	e7d1      	b.n	800abf4 <_strtod_l+0x500>
 800ac50:	23d4      	movs	r3, #212	; 0xd4
 800ac52:	049b      	lsls	r3, r3, #18
 800ac54:	18cf      	adds	r7, r1, r3
 800ac56:	e7ea      	b.n	800ac2e <_strtod_l+0x53a>
 800ac58:	2c00      	cmp	r4, #0
 800ac5a:	d0e8      	beq.n	800ac2e <_strtod_l+0x53a>
 800ac5c:	230f      	movs	r3, #15
 800ac5e:	4264      	negs	r4, r4
 800ac60:	4023      	ands	r3, r4
 800ac62:	d00a      	beq.n	800ac7a <_strtod_l+0x586>
 800ac64:	4a15      	ldr	r2, [pc, #84]	; (800acbc <_strtod_l+0x5c8>)
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	18d3      	adds	r3, r2, r3
 800ac6a:	0030      	movs	r0, r6
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	0039      	movs	r1, r7
 800ac72:	f7f5 ff89 	bl	8000b88 <__aeabi_ddiv>
 800ac76:	0006      	movs	r6, r0
 800ac78:	000f      	movs	r7, r1
 800ac7a:	1124      	asrs	r4, r4, #4
 800ac7c:	d0d7      	beq.n	800ac2e <_strtod_l+0x53a>
 800ac7e:	2c1f      	cmp	r4, #31
 800ac80:	dd28      	ble.n	800acd4 <_strtod_l+0x5e0>
 800ac82:	2400      	movs	r4, #0
 800ac84:	9405      	str	r4, [sp, #20]
 800ac86:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac88:	940a      	str	r4, [sp, #40]	; 0x28
 800ac8a:	2322      	movs	r3, #34	; 0x22
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	2600      	movs	r6, #0
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac94:	2700      	movs	r7, #0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d000      	beq.n	800ac9c <_strtod_l+0x5a8>
 800ac9a:	e76a      	b.n	800ab72 <_strtod_l+0x47e>
 800ac9c:	e56b      	b.n	800a776 <_strtod_l+0x82>
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	00004e1f 	.word	0x00004e1f
 800aca4:	0800d7d9 	.word	0x0800d7d9
 800aca8:	0800d863 	.word	0x0800d863
 800acac:	7ff00000 	.word	0x7ff00000
 800acb0:	0800d7e1 	.word	0x0800d7e1
 800acb4:	0800d824 	.word	0x0800d824
 800acb8:	fff80000 	.word	0xfff80000
 800acbc:	0800d8a0 	.word	0x0800d8a0
 800acc0:	fcb00000 	.word	0xfcb00000
 800acc4:	0800d878 	.word	0x0800d878
 800acc8:	7ca00000 	.word	0x7ca00000
 800accc:	7c900000 	.word	0x7c900000
 800acd0:	7fefffff 	.word	0x7fefffff
 800acd4:	2310      	movs	r3, #16
 800acd6:	4023      	ands	r3, r4
 800acd8:	9306      	str	r3, [sp, #24]
 800acda:	d001      	beq.n	800ace0 <_strtod_l+0x5ec>
 800acdc:	236a      	movs	r3, #106	; 0x6a
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	2300      	movs	r3, #0
 800ace2:	0030      	movs	r0, r6
 800ace4:	0039      	movs	r1, r7
 800ace6:	001d      	movs	r5, r3
 800ace8:	2c00      	cmp	r4, #0
 800acea:	dd00      	ble.n	800acee <_strtod_l+0x5fa>
 800acec:	e10e      	b.n	800af0c <_strtod_l+0x818>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <_strtod_l+0x602>
 800acf2:	0006      	movs	r6, r0
 800acf4:	000f      	movs	r7, r1
 800acf6:	9b06      	ldr	r3, [sp, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00f      	beq.n	800ad1c <_strtod_l+0x628>
 800acfc:	236b      	movs	r3, #107	; 0x6b
 800acfe:	0079      	lsls	r1, r7, #1
 800ad00:	0d49      	lsrs	r1, r1, #21
 800ad02:	003a      	movs	r2, r7
 800ad04:	1a5b      	subs	r3, r3, r1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dd08      	ble.n	800ad1c <_strtod_l+0x628>
 800ad0a:	2b1f      	cmp	r3, #31
 800ad0c:	dc00      	bgt.n	800ad10 <_strtod_l+0x61c>
 800ad0e:	e112      	b.n	800af36 <_strtod_l+0x842>
 800ad10:	2600      	movs	r6, #0
 800ad12:	2b34      	cmp	r3, #52	; 0x34
 800ad14:	dc00      	bgt.n	800ad18 <_strtod_l+0x624>
 800ad16:	e107      	b.n	800af28 <_strtod_l+0x834>
 800ad18:	27dc      	movs	r7, #220	; 0xdc
 800ad1a:	04bf      	lsls	r7, r7, #18
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	0030      	movs	r0, r6
 800ad22:	0039      	movs	r1, r7
 800ad24:	f7f5 fb88 	bl	8000438 <__aeabi_dcmpeq>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1aa      	bne.n	800ac82 <_strtod_l+0x58e>
 800ad2c:	9b08      	ldr	r3, [sp, #32]
 800ad2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	9804      	ldr	r0, [sp, #16]
 800ad38:	f001 fdf8 	bl	800c92c <__s2b>
 800ad3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d100      	bne.n	800ad44 <_strtod_l+0x650>
 800ad42:	e709      	b.n	800ab58 <_strtod_l+0x464>
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	17db      	asrs	r3, r3, #31
 800ad4a:	4252      	negs	r2, r2
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	9315      	str	r3, [sp, #84]	; 0x54
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	2400      	movs	r4, #0
 800ad54:	43db      	mvns	r3, r3
 800ad56:	9a07      	ldr	r2, [sp, #28]
 800ad58:	17db      	asrs	r3, r3, #31
 800ad5a:	401a      	ands	r2, r3
 800ad5c:	921c      	str	r2, [sp, #112]	; 0x70
 800ad5e:	9405      	str	r4, [sp, #20]
 800ad60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad62:	9804      	ldr	r0, [sp, #16]
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	f001 fd52 	bl	800c80e <_Balloc>
 800ad6a:	900a      	str	r0, [sp, #40]	; 0x28
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d100      	bne.n	800ad72 <_strtod_l+0x67e>
 800ad70:	e6f6      	b.n	800ab60 <_strtod_l+0x46c>
 800ad72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	310c      	adds	r1, #12
 800ad7a:	1c9a      	adds	r2, r3, #2
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	300c      	adds	r0, #12
 800ad80:	9308      	str	r3, [sp, #32]
 800ad82:	f7fe fcbf 	bl	8009704 <memcpy>
 800ad86:	ab24      	add	r3, sp, #144	; 0x90
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	ab23      	add	r3, sp, #140	; 0x8c
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	0032      	movs	r2, r6
 800ad90:	003b      	movs	r3, r7
 800ad92:	9804      	ldr	r0, [sp, #16]
 800ad94:	960e      	str	r6, [sp, #56]	; 0x38
 800ad96:	970f      	str	r7, [sp, #60]	; 0x3c
 800ad98:	f002 f87c 	bl	800ce94 <__d2b>
 800ad9c:	9022      	str	r0, [sp, #136]	; 0x88
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d100      	bne.n	800ada4 <_strtod_l+0x6b0>
 800ada2:	e6dd      	b.n	800ab60 <_strtod_l+0x46c>
 800ada4:	2101      	movs	r1, #1
 800ada6:	9804      	ldr	r0, [sp, #16]
 800ada8:	f001 fe47 	bl	800ca3a <__i2b>
 800adac:	9005      	str	r0, [sp, #20]
 800adae:	2800      	cmp	r0, #0
 800adb0:	d100      	bne.n	800adb4 <_strtod_l+0x6c0>
 800adb2:	e6d5      	b.n	800ab60 <_strtod_l+0x46c>
 800adb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da00      	bge.n	800adbc <_strtod_l+0x6c8>
 800adba:	e0c1      	b.n	800af40 <_strtod_l+0x84c>
 800adbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800adbe:	189d      	adds	r5, r3, r2
 800adc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800adc2:	4694      	mov	ip, r2
 800adc4:	9906      	ldr	r1, [sp, #24]
 800adc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adc8:	1a5b      	subs	r3, r3, r1
 800adca:	2136      	movs	r1, #54	; 0x36
 800adcc:	189b      	adds	r3, r3, r2
 800adce:	1a8a      	subs	r2, r1, r2
 800add0:	49b2      	ldr	r1, [pc, #712]	; (800b09c <_strtod_l+0x9a8>)
 800add2:	3b01      	subs	r3, #1
 800add4:	2001      	movs	r0, #1
 800add6:	428b      	cmp	r3, r1
 800add8:	db00      	blt.n	800addc <_strtod_l+0x6e8>
 800adda:	e0bd      	b.n	800af58 <_strtod_l+0x864>
 800addc:	1ac9      	subs	r1, r1, r3
 800adde:	1a52      	subs	r2, r2, r1
 800ade0:	291f      	cmp	r1, #31
 800ade2:	dd00      	ble.n	800ade6 <_strtod_l+0x6f2>
 800ade4:	e0b1      	b.n	800af4a <_strtod_l+0x856>
 800ade6:	4088      	lsls	r0, r1
 800ade8:	2300      	movs	r3, #0
 800adea:	9014      	str	r0, [sp, #80]	; 0x50
 800adec:	9310      	str	r3, [sp, #64]	; 0x40
 800adee:	18ab      	adds	r3, r5, r2
 800adf0:	9308      	str	r3, [sp, #32]
 800adf2:	0013      	movs	r3, r2
 800adf4:	9a06      	ldr	r2, [sp, #24]
 800adf6:	4463      	add	r3, ip
 800adf8:	18d3      	adds	r3, r2, r3
 800adfa:	9a08      	ldr	r2, [sp, #32]
 800adfc:	930c      	str	r3, [sp, #48]	; 0x30
 800adfe:	002b      	movs	r3, r5
 800ae00:	4295      	cmp	r5, r2
 800ae02:	dd00      	ble.n	800ae06 <_strtod_l+0x712>
 800ae04:	0013      	movs	r3, r2
 800ae06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	dd00      	ble.n	800ae0e <_strtod_l+0x71a>
 800ae0c:	0013      	movs	r3, r2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	dd06      	ble.n	800ae20 <_strtod_l+0x72c>
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	1aed      	subs	r5, r5, r3
 800ae16:	1ad2      	subs	r2, r2, r3
 800ae18:	9208      	str	r2, [sp, #32]
 800ae1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	920c      	str	r2, [sp, #48]	; 0x30
 800ae20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d017      	beq.n	800ae56 <_strtod_l+0x762>
 800ae26:	001a      	movs	r2, r3
 800ae28:	9905      	ldr	r1, [sp, #20]
 800ae2a:	9804      	ldr	r0, [sp, #16]
 800ae2c:	f001 fe9e 	bl	800cb6c <__pow5mult>
 800ae30:	9005      	str	r0, [sp, #20]
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d100      	bne.n	800ae38 <_strtod_l+0x744>
 800ae36:	e693      	b.n	800ab60 <_strtod_l+0x46c>
 800ae38:	0001      	movs	r1, r0
 800ae3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae3c:	9804      	ldr	r0, [sp, #16]
 800ae3e:	f001 fe05 	bl	800ca4c <__multiply>
 800ae42:	9012      	str	r0, [sp, #72]	; 0x48
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d100      	bne.n	800ae4a <_strtod_l+0x756>
 800ae48:	e68a      	b.n	800ab60 <_strtod_l+0x46c>
 800ae4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae4c:	9804      	ldr	r0, [sp, #16]
 800ae4e:	f001 fd16 	bl	800c87e <_Bfree>
 800ae52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae54:	9322      	str	r3, [sp, #136]	; 0x88
 800ae56:	9b08      	ldr	r3, [sp, #32]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dd00      	ble.n	800ae5e <_strtod_l+0x76a>
 800ae5c:	e07f      	b.n	800af5e <_strtod_l+0x86a>
 800ae5e:	9b07      	ldr	r3, [sp, #28]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dd08      	ble.n	800ae76 <_strtod_l+0x782>
 800ae64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae68:	9804      	ldr	r0, [sp, #16]
 800ae6a:	f001 fe7f 	bl	800cb6c <__pow5mult>
 800ae6e:	900a      	str	r0, [sp, #40]	; 0x28
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d100      	bne.n	800ae76 <_strtod_l+0x782>
 800ae74:	e674      	b.n	800ab60 <_strtod_l+0x46c>
 800ae76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd08      	ble.n	800ae8e <_strtod_l+0x79a>
 800ae7c:	001a      	movs	r2, r3
 800ae7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae80:	9804      	ldr	r0, [sp, #16]
 800ae82:	f001 fec5 	bl	800cc10 <__lshift>
 800ae86:	900a      	str	r0, [sp, #40]	; 0x28
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d100      	bne.n	800ae8e <_strtod_l+0x79a>
 800ae8c:	e668      	b.n	800ab60 <_strtod_l+0x46c>
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	dd08      	ble.n	800aea4 <_strtod_l+0x7b0>
 800ae92:	002a      	movs	r2, r5
 800ae94:	9905      	ldr	r1, [sp, #20]
 800ae96:	9804      	ldr	r0, [sp, #16]
 800ae98:	f001 feba 	bl	800cc10 <__lshift>
 800ae9c:	9005      	str	r0, [sp, #20]
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d100      	bne.n	800aea4 <_strtod_l+0x7b0>
 800aea2:	e65d      	b.n	800ab60 <_strtod_l+0x46c>
 800aea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aea8:	9804      	ldr	r0, [sp, #16]
 800aeaa:	f001 ff1d 	bl	800cce8 <__mdiff>
 800aeae:	1e04      	subs	r4, r0, #0
 800aeb0:	d100      	bne.n	800aeb4 <_strtod_l+0x7c0>
 800aeb2:	e655      	b.n	800ab60 <_strtod_l+0x46c>
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	68c3      	ldr	r3, [r0, #12]
 800aeb8:	9905      	ldr	r1, [sp, #20]
 800aeba:	60c5      	str	r5, [r0, #12]
 800aebc:	9312      	str	r3, [sp, #72]	; 0x48
 800aebe:	f001 fef9 	bl	800ccb4 <__mcmp>
 800aec2:	42a8      	cmp	r0, r5
 800aec4:	da55      	bge.n	800af72 <_strtod_l+0x87e>
 800aec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	d11b      	bne.n	800af04 <_strtod_l+0x810>
 800aecc:	42ae      	cmp	r6, r5
 800aece:	d119      	bne.n	800af04 <_strtod_l+0x810>
 800aed0:	033b      	lsls	r3, r7, #12
 800aed2:	42ab      	cmp	r3, r5
 800aed4:	d116      	bne.n	800af04 <_strtod_l+0x810>
 800aed6:	22d6      	movs	r2, #214	; 0xd6
 800aed8:	4b71      	ldr	r3, [pc, #452]	; (800b0a0 <_strtod_l+0x9ac>)
 800aeda:	04d2      	lsls	r2, r2, #19
 800aedc:	403b      	ands	r3, r7
 800aede:	4293      	cmp	r3, r2
 800aee0:	d910      	bls.n	800af04 <_strtod_l+0x810>
 800aee2:	6963      	ldr	r3, [r4, #20]
 800aee4:	42ab      	cmp	r3, r5
 800aee6:	d102      	bne.n	800aeee <_strtod_l+0x7fa>
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	dd0a      	ble.n	800af04 <_strtod_l+0x810>
 800aeee:	0021      	movs	r1, r4
 800aef0:	2201      	movs	r2, #1
 800aef2:	9804      	ldr	r0, [sp, #16]
 800aef4:	f001 fe8c 	bl	800cc10 <__lshift>
 800aef8:	9905      	ldr	r1, [sp, #20]
 800aefa:	0004      	movs	r4, r0
 800aefc:	f001 feda 	bl	800ccb4 <__mcmp>
 800af00:	2800      	cmp	r0, #0
 800af02:	dc6b      	bgt.n	800afdc <_strtod_l+0x8e8>
 800af04:	9b06      	ldr	r3, [sp, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d178      	bne.n	800affc <_strtod_l+0x908>
 800af0a:	e632      	b.n	800ab72 <_strtod_l+0x47e>
 800af0c:	2201      	movs	r2, #1
 800af0e:	4214      	tst	r4, r2
 800af10:	d007      	beq.n	800af22 <_strtod_l+0x82e>
 800af12:	4a64      	ldr	r2, [pc, #400]	; (800b0a4 <_strtod_l+0x9b0>)
 800af14:	00eb      	lsls	r3, r5, #3
 800af16:	18d3      	adds	r3, r2, r3
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	f7f6 fa3e 	bl	800139c <__aeabi_dmul>
 800af20:	2301      	movs	r3, #1
 800af22:	3501      	adds	r5, #1
 800af24:	1064      	asrs	r4, r4, #1
 800af26:	e6df      	b.n	800ace8 <_strtod_l+0x5f4>
 800af28:	2101      	movs	r1, #1
 800af2a:	3b20      	subs	r3, #32
 800af2c:	4249      	negs	r1, r1
 800af2e:	4099      	lsls	r1, r3
 800af30:	400a      	ands	r2, r1
 800af32:	0017      	movs	r7, r2
 800af34:	e6f2      	b.n	800ad1c <_strtod_l+0x628>
 800af36:	2201      	movs	r2, #1
 800af38:	4252      	negs	r2, r2
 800af3a:	409a      	lsls	r2, r3
 800af3c:	4016      	ands	r6, r2
 800af3e:	e6ed      	b.n	800ad1c <_strtod_l+0x628>
 800af40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af42:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af44:	1ad2      	subs	r2, r2, r3
 800af46:	4694      	mov	ip, r2
 800af48:	e73c      	b.n	800adc4 <_strtod_l+0x6d0>
 800af4a:	4957      	ldr	r1, [pc, #348]	; (800b0a8 <_strtod_l+0x9b4>)
 800af4c:	1acb      	subs	r3, r1, r3
 800af4e:	0001      	movs	r1, r0
 800af50:	4099      	lsls	r1, r3
 800af52:	9110      	str	r1, [sp, #64]	; 0x40
 800af54:	9014      	str	r0, [sp, #80]	; 0x50
 800af56:	e74a      	b.n	800adee <_strtod_l+0x6fa>
 800af58:	2300      	movs	r3, #0
 800af5a:	9310      	str	r3, [sp, #64]	; 0x40
 800af5c:	e7fa      	b.n	800af54 <_strtod_l+0x860>
 800af5e:	9a08      	ldr	r2, [sp, #32]
 800af60:	9922      	ldr	r1, [sp, #136]	; 0x88
 800af62:	9804      	ldr	r0, [sp, #16]
 800af64:	f001 fe54 	bl	800cc10 <__lshift>
 800af68:	9022      	str	r0, [sp, #136]	; 0x88
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d000      	beq.n	800af70 <_strtod_l+0x87c>
 800af6e:	e776      	b.n	800ae5e <_strtod_l+0x76a>
 800af70:	e5f6      	b.n	800ab60 <_strtod_l+0x46c>
 800af72:	970c      	str	r7, [sp, #48]	; 0x30
 800af74:	2800      	cmp	r0, #0
 800af76:	d000      	beq.n	800af7a <_strtod_l+0x886>
 800af78:	e0a0      	b.n	800b0bc <_strtod_l+0x9c8>
 800af7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af7c:	033b      	lsls	r3, r7, #12
 800af7e:	0b1b      	lsrs	r3, r3, #12
 800af80:	2a00      	cmp	r2, #0
 800af82:	d027      	beq.n	800afd4 <_strtod_l+0x8e0>
 800af84:	4a49      	ldr	r2, [pc, #292]	; (800b0ac <_strtod_l+0x9b8>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d157      	bne.n	800b03a <_strtod_l+0x946>
 800af8a:	2201      	movs	r2, #1
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	4252      	negs	r2, r2
 800af90:	0031      	movs	r1, r6
 800af92:	0010      	movs	r0, r2
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <_strtod_l+0x8bc>
 800af98:	25d4      	movs	r5, #212	; 0xd4
 800af9a:	4b41      	ldr	r3, [pc, #260]	; (800b0a0 <_strtod_l+0x9ac>)
 800af9c:	04ed      	lsls	r5, r5, #19
 800af9e:	403b      	ands	r3, r7
 800afa0:	0010      	movs	r0, r2
 800afa2:	42ab      	cmp	r3, r5
 800afa4:	d804      	bhi.n	800afb0 <_strtod_l+0x8bc>
 800afa6:	306c      	adds	r0, #108	; 0x6c
 800afa8:	0d1b      	lsrs	r3, r3, #20
 800afaa:	1ac3      	subs	r3, r0, r3
 800afac:	409a      	lsls	r2, r3
 800afae:	0010      	movs	r0, r2
 800afb0:	4281      	cmp	r1, r0
 800afb2:	d142      	bne.n	800b03a <_strtod_l+0x946>
 800afb4:	4b3e      	ldr	r3, [pc, #248]	; (800b0b0 <_strtod_l+0x9bc>)
 800afb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afb8:	429a      	cmp	r2, r3
 800afba:	d102      	bne.n	800afc2 <_strtod_l+0x8ce>
 800afbc:	1c4b      	adds	r3, r1, #1
 800afbe:	d100      	bne.n	800afc2 <_strtod_l+0x8ce>
 800afc0:	e5ce      	b.n	800ab60 <_strtod_l+0x46c>
 800afc2:	4b37      	ldr	r3, [pc, #220]	; (800b0a0 <_strtod_l+0x9ac>)
 800afc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afc6:	2600      	movs	r6, #0
 800afc8:	401a      	ands	r2, r3
 800afca:	0013      	movs	r3, r2
 800afcc:	2280      	movs	r2, #128	; 0x80
 800afce:	0352      	lsls	r2, r2, #13
 800afd0:	189f      	adds	r7, r3, r2
 800afd2:	e797      	b.n	800af04 <_strtod_l+0x810>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d130      	bne.n	800b03a <_strtod_l+0x946>
 800afd8:	2e00      	cmp	r6, #0
 800afda:	d12e      	bne.n	800b03a <_strtod_l+0x946>
 800afdc:	9906      	ldr	r1, [sp, #24]
 800afde:	003b      	movs	r3, r7
 800afe0:	4a2f      	ldr	r2, [pc, #188]	; (800b0a0 <_strtod_l+0x9ac>)
 800afe2:	2900      	cmp	r1, #0
 800afe4:	d020      	beq.n	800b028 <_strtod_l+0x934>
 800afe6:	0011      	movs	r1, r2
 800afe8:	20d6      	movs	r0, #214	; 0xd6
 800afea:	4039      	ands	r1, r7
 800afec:	04c0      	lsls	r0, r0, #19
 800afee:	4281      	cmp	r1, r0
 800aff0:	dc1a      	bgt.n	800b028 <_strtod_l+0x934>
 800aff2:	23dc      	movs	r3, #220	; 0xdc
 800aff4:	049b      	lsls	r3, r3, #18
 800aff6:	4299      	cmp	r1, r3
 800aff8:	dc00      	bgt.n	800affc <_strtod_l+0x908>
 800affa:	e646      	b.n	800ac8a <_strtod_l+0x596>
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <_strtod_l+0x9c0>)
 800affe:	0030      	movs	r0, r6
 800b000:	931b      	str	r3, [sp, #108]	; 0x6c
 800b002:	2300      	movs	r3, #0
 800b004:	931a      	str	r3, [sp, #104]	; 0x68
 800b006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b00a:	0039      	movs	r1, r7
 800b00c:	f7f6 f9c6 	bl	800139c <__aeabi_dmul>
 800b010:	0006      	movs	r6, r0
 800b012:	000f      	movs	r7, r1
 800b014:	1e0b      	subs	r3, r1, #0
 800b016:	d000      	beq.n	800b01a <_strtod_l+0x926>
 800b018:	e5ab      	b.n	800ab72 <_strtod_l+0x47e>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d000      	beq.n	800b020 <_strtod_l+0x92c>
 800b01e:	e5a8      	b.n	800ab72 <_strtod_l+0x47e>
 800b020:	9a04      	ldr	r2, [sp, #16]
 800b022:	3322      	adds	r3, #34	; 0x22
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	e5a4      	b.n	800ab72 <_strtod_l+0x47e>
 800b028:	2601      	movs	r6, #1
 800b02a:	4013      	ands	r3, r2
 800b02c:	4a22      	ldr	r2, [pc, #136]	; (800b0b8 <_strtod_l+0x9c4>)
 800b02e:	4276      	negs	r6, r6
 800b030:	189b      	adds	r3, r3, r2
 800b032:	4a1e      	ldr	r2, [pc, #120]	; (800b0ac <_strtod_l+0x9b8>)
 800b034:	431a      	orrs	r2, r3
 800b036:	0017      	movs	r7, r2
 800b038:	e764      	b.n	800af04 <_strtod_l+0x810>
 800b03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d015      	beq.n	800b06c <_strtod_l+0x978>
 800b040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b042:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b044:	4213      	tst	r3, r2
 800b046:	d100      	bne.n	800b04a <_strtod_l+0x956>
 800b048:	e75c      	b.n	800af04 <_strtod_l+0x810>
 800b04a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b04c:	9a06      	ldr	r2, [sp, #24]
 800b04e:	0030      	movs	r0, r6
 800b050:	0039      	movs	r1, r7
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00f      	beq.n	800b076 <_strtod_l+0x982>
 800b056:	f7ff fb35 	bl	800a6c4 <sulp>
 800b05a:	0002      	movs	r2, r0
 800b05c:	000b      	movs	r3, r1
 800b05e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b060:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b062:	f7f5 fa75 	bl	8000550 <__aeabi_dadd>
 800b066:	0006      	movs	r6, r0
 800b068:	000f      	movs	r7, r1
 800b06a:	e74b      	b.n	800af04 <_strtod_l+0x810>
 800b06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b06e:	4233      	tst	r3, r6
 800b070:	d100      	bne.n	800b074 <_strtod_l+0x980>
 800b072:	e747      	b.n	800af04 <_strtod_l+0x810>
 800b074:	e7e9      	b.n	800b04a <_strtod_l+0x956>
 800b076:	f7ff fb25 	bl	800a6c4 <sulp>
 800b07a:	0002      	movs	r2, r0
 800b07c:	000b      	movs	r3, r1
 800b07e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b080:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b082:	f7f6 fbfd 	bl	8001880 <__aeabi_dsub>
 800b086:	2200      	movs	r2, #0
 800b088:	2300      	movs	r3, #0
 800b08a:	0006      	movs	r6, r0
 800b08c:	000f      	movs	r7, r1
 800b08e:	f7f5 f9d3 	bl	8000438 <__aeabi_dcmpeq>
 800b092:	2800      	cmp	r0, #0
 800b094:	d000      	beq.n	800b098 <_strtod_l+0x9a4>
 800b096:	e5f8      	b.n	800ac8a <_strtod_l+0x596>
 800b098:	e734      	b.n	800af04 <_strtod_l+0x810>
 800b09a:	46c0      	nop			; (mov r8, r8)
 800b09c:	fffffc02 	.word	0xfffffc02
 800b0a0:	7ff00000 	.word	0x7ff00000
 800b0a4:	0800d838 	.word	0x0800d838
 800b0a8:	fffffbe2 	.word	0xfffffbe2
 800b0ac:	000fffff 	.word	0x000fffff
 800b0b0:	7fefffff 	.word	0x7fefffff
 800b0b4:	39500000 	.word	0x39500000
 800b0b8:	fff00000 	.word	0xfff00000
 800b0bc:	9905      	ldr	r1, [sp, #20]
 800b0be:	0020      	movs	r0, r4
 800b0c0:	f001 ff3c 	bl	800cf3c <__ratio>
 800b0c4:	2380      	movs	r3, #128	; 0x80
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	05db      	lsls	r3, r3, #23
 800b0ca:	9008      	str	r0, [sp, #32]
 800b0cc:	9109      	str	r1, [sp, #36]	; 0x24
 800b0ce:	f7f5 f9c3 	bl	8000458 <__aeabi_dcmple>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d100      	bne.n	800b0d8 <_strtod_l+0x9e4>
 800b0d6:	e07f      	b.n	800b1d8 <_strtod_l+0xae4>
 800b0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d04b      	beq.n	800b176 <_strtod_l+0xa82>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	4b8a      	ldr	r3, [pc, #552]	; (800b30c <_strtod_l+0xc18>)
 800b0e2:	9210      	str	r2, [sp, #64]	; 0x40
 800b0e4:	9311      	str	r3, [sp, #68]	; 0x44
 800b0e6:	4b89      	ldr	r3, [pc, #548]	; (800b30c <_strtod_l+0xc18>)
 800b0e8:	9308      	str	r3, [sp, #32]
 800b0ea:	4a89      	ldr	r2, [pc, #548]	; (800b310 <_strtod_l+0xc1c>)
 800b0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	9314      	str	r3, [sp, #80]	; 0x50
 800b0f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0f4:	4b87      	ldr	r3, [pc, #540]	; (800b314 <_strtod_l+0xc20>)
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d000      	beq.n	800b0fc <_strtod_l+0xa08>
 800b0fa:	e0ba      	b.n	800b272 <_strtod_l+0xb7e>
 800b0fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b100:	921a      	str	r2, [sp, #104]	; 0x68
 800b102:	931b      	str	r3, [sp, #108]	; 0x6c
 800b104:	4a84      	ldr	r2, [pc, #528]	; (800b318 <_strtod_l+0xc24>)
 800b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b108:	4694      	mov	ip, r2
 800b10a:	4463      	add	r3, ip
 800b10c:	001f      	movs	r7, r3
 800b10e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b112:	0030      	movs	r0, r6
 800b114:	0039      	movs	r1, r7
 800b116:	920c      	str	r2, [sp, #48]	; 0x30
 800b118:	930d      	str	r3, [sp, #52]	; 0x34
 800b11a:	f001 fe49 	bl	800cdb0 <__ulp>
 800b11e:	0002      	movs	r2, r0
 800b120:	000b      	movs	r3, r1
 800b122:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b124:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b126:	f7f6 f939 	bl	800139c <__aeabi_dmul>
 800b12a:	0032      	movs	r2, r6
 800b12c:	003b      	movs	r3, r7
 800b12e:	f7f5 fa0f 	bl	8000550 <__aeabi_dadd>
 800b132:	4a77      	ldr	r2, [pc, #476]	; (800b310 <_strtod_l+0xc1c>)
 800b134:	4b79      	ldr	r3, [pc, #484]	; (800b31c <_strtod_l+0xc28>)
 800b136:	0006      	movs	r6, r0
 800b138:	400a      	ands	r2, r1
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d964      	bls.n	800b208 <_strtod_l+0xb14>
 800b13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b140:	4a77      	ldr	r2, [pc, #476]	; (800b320 <_strtod_l+0xc2c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d103      	bne.n	800b14e <_strtod_l+0xa5a>
 800b146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b148:	3301      	adds	r3, #1
 800b14a:	d100      	bne.n	800b14e <_strtod_l+0xa5a>
 800b14c:	e508      	b.n	800ab60 <_strtod_l+0x46c>
 800b14e:	2601      	movs	r6, #1
 800b150:	4f73      	ldr	r7, [pc, #460]	; (800b320 <_strtod_l+0xc2c>)
 800b152:	4276      	negs	r6, r6
 800b154:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b156:	9804      	ldr	r0, [sp, #16]
 800b158:	f001 fb91 	bl	800c87e <_Bfree>
 800b15c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b15e:	9804      	ldr	r0, [sp, #16]
 800b160:	f001 fb8d 	bl	800c87e <_Bfree>
 800b164:	9905      	ldr	r1, [sp, #20]
 800b166:	9804      	ldr	r0, [sp, #16]
 800b168:	f001 fb89 	bl	800c87e <_Bfree>
 800b16c:	0021      	movs	r1, r4
 800b16e:	9804      	ldr	r0, [sp, #16]
 800b170:	f001 fb85 	bl	800c87e <_Bfree>
 800b174:	e5f4      	b.n	800ad60 <_strtod_l+0x66c>
 800b176:	2e00      	cmp	r6, #0
 800b178:	d11e      	bne.n	800b1b8 <_strtod_l+0xac4>
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	031b      	lsls	r3, r3, #12
 800b17e:	d121      	bne.n	800b1c4 <_strtod_l+0xad0>
 800b180:	9808      	ldr	r0, [sp, #32]
 800b182:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b184:	2200      	movs	r2, #0
 800b186:	4b61      	ldr	r3, [pc, #388]	; (800b30c <_strtod_l+0xc18>)
 800b188:	f7f5 f95c 	bl	8000444 <__aeabi_dcmplt>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d11f      	bne.n	800b1d0 <_strtod_l+0xadc>
 800b190:	9808      	ldr	r0, [sp, #32]
 800b192:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b194:	2200      	movs	r2, #0
 800b196:	4b63      	ldr	r3, [pc, #396]	; (800b324 <_strtod_l+0xc30>)
 800b198:	f7f6 f900 	bl	800139c <__aeabi_dmul>
 800b19c:	0005      	movs	r5, r0
 800b19e:	9108      	str	r1, [sp, #32]
 800b1a0:	2280      	movs	r2, #128	; 0x80
 800b1a2:	0612      	lsls	r2, r2, #24
 800b1a4:	4694      	mov	ip, r2
 800b1a6:	9b08      	ldr	r3, [sp, #32]
 800b1a8:	951e      	str	r5, [sp, #120]	; 0x78
 800b1aa:	4463      	add	r3, ip
 800b1ac:	931f      	str	r3, [sp, #124]	; 0x7c
 800b1ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b1b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1b2:	9210      	str	r2, [sp, #64]	; 0x40
 800b1b4:	9311      	str	r3, [sp, #68]	; 0x44
 800b1b6:	e798      	b.n	800b0ea <_strtod_l+0x9f6>
 800b1b8:	2e01      	cmp	r6, #1
 800b1ba:	d103      	bne.n	800b1c4 <_strtod_l+0xad0>
 800b1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d100      	bne.n	800b1c4 <_strtod_l+0xad0>
 800b1c2:	e562      	b.n	800ac8a <_strtod_l+0x596>
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4b58      	ldr	r3, [pc, #352]	; (800b328 <_strtod_l+0xc34>)
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	9210      	str	r2, [sp, #64]	; 0x40
 800b1cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b1ce:	e78a      	b.n	800b0e6 <_strtod_l+0x9f2>
 800b1d0:	4b54      	ldr	r3, [pc, #336]	; (800b324 <_strtod_l+0xc30>)
 800b1d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b1d4:	9308      	str	r3, [sp, #32]
 800b1d6:	e7e3      	b.n	800b1a0 <_strtod_l+0xaac>
 800b1d8:	4b52      	ldr	r3, [pc, #328]	; (800b324 <_strtod_l+0xc30>)
 800b1da:	9808      	ldr	r0, [sp, #32]
 800b1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f7f6 f8dc 	bl	800139c <__aeabi_dmul>
 800b1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1e6:	0005      	movs	r5, r0
 800b1e8:	9108      	str	r1, [sp, #32]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <_strtod_l+0xb0a>
 800b1ee:	2380      	movs	r3, #128	; 0x80
 800b1f0:	061b      	lsls	r3, r3, #24
 800b1f2:	18cb      	adds	r3, r1, r3
 800b1f4:	9016      	str	r0, [sp, #88]	; 0x58
 800b1f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1fc:	e7d9      	b.n	800b1b2 <_strtod_l+0xabe>
 800b1fe:	0002      	movs	r2, r0
 800b200:	9b08      	ldr	r3, [sp, #32]
 800b202:	9216      	str	r2, [sp, #88]	; 0x58
 800b204:	9317      	str	r3, [sp, #92]	; 0x5c
 800b206:	e7f7      	b.n	800b1f8 <_strtod_l+0xb04>
 800b208:	23d4      	movs	r3, #212	; 0xd4
 800b20a:	049b      	lsls	r3, r3, #18
 800b20c:	18cf      	adds	r7, r1, r3
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d19f      	bne.n	800b154 <_strtod_l+0xa60>
 800b214:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <_strtod_l+0xc1c>)
 800b216:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b218:	970c      	str	r7, [sp, #48]	; 0x30
 800b21a:	403b      	ands	r3, r7
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d199      	bne.n	800b154 <_strtod_l+0xa60>
 800b220:	9908      	ldr	r1, [sp, #32]
 800b222:	0028      	movs	r0, r5
 800b224:	f7f6 fe90 	bl	8001f48 <__aeabi_d2iz>
 800b228:	f7f6 fec4 	bl	8001fb4 <__aeabi_i2d>
 800b22c:	000b      	movs	r3, r1
 800b22e:	0002      	movs	r2, r0
 800b230:	9908      	ldr	r1, [sp, #32]
 800b232:	0028      	movs	r0, r5
 800b234:	f7f6 fb24 	bl	8001880 <__aeabi_dsub>
 800b238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b23a:	9008      	str	r0, [sp, #32]
 800b23c:	9109      	str	r1, [sp, #36]	; 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d104      	bne.n	800b24c <_strtod_l+0xb58>
 800b242:	2e00      	cmp	r6, #0
 800b244:	d102      	bne.n	800b24c <_strtod_l+0xb58>
 800b246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b248:	031b      	lsls	r3, r3, #12
 800b24a:	d058      	beq.n	800b2fe <_strtod_l+0xc0a>
 800b24c:	9808      	ldr	r0, [sp, #32]
 800b24e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b250:	4a36      	ldr	r2, [pc, #216]	; (800b32c <_strtod_l+0xc38>)
 800b252:	4b37      	ldr	r3, [pc, #220]	; (800b330 <_strtod_l+0xc3c>)
 800b254:	f7f5 f8f6 	bl	8000444 <__aeabi_dcmplt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d000      	beq.n	800b25e <_strtod_l+0xb6a>
 800b25c:	e489      	b.n	800ab72 <_strtod_l+0x47e>
 800b25e:	9808      	ldr	r0, [sp, #32]
 800b260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b262:	4a34      	ldr	r2, [pc, #208]	; (800b334 <_strtod_l+0xc40>)
 800b264:	4b2f      	ldr	r3, [pc, #188]	; (800b324 <_strtod_l+0xc30>)
 800b266:	f7f5 f901 	bl	800046c <__aeabi_dcmpgt>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d100      	bne.n	800b270 <_strtod_l+0xb7c>
 800b26e:	e771      	b.n	800b154 <_strtod_l+0xa60>
 800b270:	e47f      	b.n	800ab72 <_strtod_l+0x47e>
 800b272:	9b06      	ldr	r3, [sp, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d02a      	beq.n	800b2ce <_strtod_l+0xbda>
 800b278:	23d4      	movs	r3, #212	; 0xd4
 800b27a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b27c:	04db      	lsls	r3, r3, #19
 800b27e:	429a      	cmp	r2, r3
 800b280:	d825      	bhi.n	800b2ce <_strtod_l+0xbda>
 800b282:	4a2d      	ldr	r2, [pc, #180]	; (800b338 <_strtod_l+0xc44>)
 800b284:	4b2d      	ldr	r3, [pc, #180]	; (800b33c <_strtod_l+0xc48>)
 800b286:	0028      	movs	r0, r5
 800b288:	9908      	ldr	r1, [sp, #32]
 800b28a:	f7f5 f8e5 	bl	8000458 <__aeabi_dcmple>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d016      	beq.n	800b2c0 <_strtod_l+0xbcc>
 800b292:	0028      	movs	r0, r5
 800b294:	9908      	ldr	r1, [sp, #32]
 800b296:	f7f5 f8fd 	bl	8000494 <__aeabi_d2uiz>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d100      	bne.n	800b2a0 <_strtod_l+0xbac>
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f7f6 fec2 	bl	8002028 <__aeabi_ui2d>
 800b2a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2a6:	0005      	movs	r5, r0
 800b2a8:	9108      	str	r1, [sp, #32]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d122      	bne.n	800b2f4 <_strtod_l+0xc00>
 800b2ae:	2380      	movs	r3, #128	; 0x80
 800b2b0:	061b      	lsls	r3, r3, #24
 800b2b2:	18cb      	adds	r3, r1, r3
 800b2b4:	9018      	str	r0, [sp, #96]	; 0x60
 800b2b6:	9319      	str	r3, [sp, #100]	; 0x64
 800b2b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2bc:	9210      	str	r2, [sp, #64]	; 0x40
 800b2be:	9311      	str	r3, [sp, #68]	; 0x44
 800b2c0:	22d6      	movs	r2, #214	; 0xd6
 800b2c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2c4:	04d2      	lsls	r2, r2, #19
 800b2c6:	189b      	adds	r3, r3, r2
 800b2c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b2ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b2d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800b2d4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b2d6:	f001 fd6b 	bl	800cdb0 <__ulp>
 800b2da:	0002      	movs	r2, r0
 800b2dc:	000b      	movs	r3, r1
 800b2de:	0030      	movs	r0, r6
 800b2e0:	0039      	movs	r1, r7
 800b2e2:	f7f6 f85b 	bl	800139c <__aeabi_dmul>
 800b2e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ea:	f7f5 f931 	bl	8000550 <__aeabi_dadd>
 800b2ee:	0006      	movs	r6, r0
 800b2f0:	000f      	movs	r7, r1
 800b2f2:	e78c      	b.n	800b20e <_strtod_l+0xb1a>
 800b2f4:	0002      	movs	r2, r0
 800b2f6:	9b08      	ldr	r3, [sp, #32]
 800b2f8:	9218      	str	r2, [sp, #96]	; 0x60
 800b2fa:	9319      	str	r3, [sp, #100]	; 0x64
 800b2fc:	e7dc      	b.n	800b2b8 <_strtod_l+0xbc4>
 800b2fe:	4a0b      	ldr	r2, [pc, #44]	; (800b32c <_strtod_l+0xc38>)
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <_strtod_l+0xc4c>)
 800b302:	9808      	ldr	r0, [sp, #32]
 800b304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b306:	f7f5 f89d 	bl	8000444 <__aeabi_dcmplt>
 800b30a:	e7ae      	b.n	800b26a <_strtod_l+0xb76>
 800b30c:	3ff00000 	.word	0x3ff00000
 800b310:	7ff00000 	.word	0x7ff00000
 800b314:	7fe00000 	.word	0x7fe00000
 800b318:	fcb00000 	.word	0xfcb00000
 800b31c:	7c9fffff 	.word	0x7c9fffff
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	bff00000 	.word	0xbff00000
 800b32c:	94a03595 	.word	0x94a03595
 800b330:	3fdfffff 	.word	0x3fdfffff
 800b334:	35afe535 	.word	0x35afe535
 800b338:	ffc00000 	.word	0xffc00000
 800b33c:	41dfffff 	.word	0x41dfffff
 800b340:	3fcfffff 	.word	0x3fcfffff

0800b344 <_strtod_r>:
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <_strtod_r+0x14>)
 800b346:	b510      	push	{r4, lr}
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6a1b      	ldr	r3, [r3, #32]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d100      	bne.n	800b352 <_strtod_r+0xe>
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <_strtod_r+0x18>)
 800b352:	f7ff f9cf 	bl	800a6f4 <_strtod_l>
 800b356:	bd10      	pop	{r4, pc}
 800b358:	2000001c 	.word	0x2000001c
 800b35c:	20000080 	.word	0x20000080

0800b360 <_strtol_l.isra.0>:
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	001f      	movs	r7, r3
 800b364:	000e      	movs	r6, r1
 800b366:	b087      	sub	sp, #28
 800b368:	9005      	str	r0, [sp, #20]
 800b36a:	9101      	str	r1, [sp, #4]
 800b36c:	9202      	str	r2, [sp, #8]
 800b36e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b370:	7834      	ldrb	r4, [r6, #0]
 800b372:	f001 fa1e 	bl	800c7b2 <__locale_ctype_ptr_l>
 800b376:	2208      	movs	r2, #8
 800b378:	1900      	adds	r0, r0, r4
 800b37a:	7843      	ldrb	r3, [r0, #1]
 800b37c:	1c75      	adds	r5, r6, #1
 800b37e:	4013      	ands	r3, r2
 800b380:	d136      	bne.n	800b3f0 <_strtol_l.isra.0+0x90>
 800b382:	2c2d      	cmp	r4, #45	; 0x2d
 800b384:	d136      	bne.n	800b3f4 <_strtol_l.isra.0+0x94>
 800b386:	1cb5      	adds	r5, r6, #2
 800b388:	7874      	ldrb	r4, [r6, #1]
 800b38a:	2601      	movs	r6, #1
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	d062      	beq.n	800b456 <_strtol_l.isra.0+0xf6>
 800b390:	2f10      	cmp	r7, #16
 800b392:	d109      	bne.n	800b3a8 <_strtol_l.isra.0+0x48>
 800b394:	2c30      	cmp	r4, #48	; 0x30
 800b396:	d107      	bne.n	800b3a8 <_strtol_l.isra.0+0x48>
 800b398:	2220      	movs	r2, #32
 800b39a:	782b      	ldrb	r3, [r5, #0]
 800b39c:	4393      	bics	r3, r2
 800b39e:	2b58      	cmp	r3, #88	; 0x58
 800b3a0:	d154      	bne.n	800b44c <_strtol_l.isra.0+0xec>
 800b3a2:	2710      	movs	r7, #16
 800b3a4:	786c      	ldrb	r4, [r5, #1]
 800b3a6:	3502      	adds	r5, #2
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <_strtol_l.isra.0+0x100>)
 800b3aa:	0039      	movs	r1, r7
 800b3ac:	18f3      	adds	r3, r6, r3
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	9303      	str	r3, [sp, #12]
 800b3b2:	f7f4 ff41 	bl	8000238 <__aeabi_uidivmod>
 800b3b6:	9104      	str	r1, [sp, #16]
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4249      	negs	r1, r1
 800b3be:	0002      	movs	r2, r0
 800b3c0:	468c      	mov	ip, r1
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	0021      	movs	r1, r4
 800b3c6:	3930      	subs	r1, #48	; 0x30
 800b3c8:	2909      	cmp	r1, #9
 800b3ca:	d81a      	bhi.n	800b402 <_strtol_l.isra.0+0xa2>
 800b3cc:	000c      	movs	r4, r1
 800b3ce:	42a7      	cmp	r7, r4
 800b3d0:	dd23      	ble.n	800b41a <_strtol_l.isra.0+0xba>
 800b3d2:	1c59      	adds	r1, r3, #1
 800b3d4:	d009      	beq.n	800b3ea <_strtol_l.isra.0+0x8a>
 800b3d6:	4663      	mov	r3, ip
 800b3d8:	4282      	cmp	r2, r0
 800b3da:	d306      	bcc.n	800b3ea <_strtol_l.isra.0+0x8a>
 800b3dc:	d102      	bne.n	800b3e4 <_strtol_l.isra.0+0x84>
 800b3de:	9904      	ldr	r1, [sp, #16]
 800b3e0:	42a1      	cmp	r1, r4
 800b3e2:	db02      	blt.n	800b3ea <_strtol_l.isra.0+0x8a>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4378      	muls	r0, r7
 800b3e8:	1820      	adds	r0, r4, r0
 800b3ea:	782c      	ldrb	r4, [r5, #0]
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	e7e9      	b.n	800b3c4 <_strtol_l.isra.0+0x64>
 800b3f0:	002e      	movs	r6, r5
 800b3f2:	e7bc      	b.n	800b36e <_strtol_l.isra.0+0xe>
 800b3f4:	2c2b      	cmp	r4, #43	; 0x2b
 800b3f6:	d001      	beq.n	800b3fc <_strtol_l.isra.0+0x9c>
 800b3f8:	001e      	movs	r6, r3
 800b3fa:	e7c7      	b.n	800b38c <_strtol_l.isra.0+0x2c>
 800b3fc:	1cb5      	adds	r5, r6, #2
 800b3fe:	7874      	ldrb	r4, [r6, #1]
 800b400:	e7fa      	b.n	800b3f8 <_strtol_l.isra.0+0x98>
 800b402:	0021      	movs	r1, r4
 800b404:	3941      	subs	r1, #65	; 0x41
 800b406:	2919      	cmp	r1, #25
 800b408:	d801      	bhi.n	800b40e <_strtol_l.isra.0+0xae>
 800b40a:	3c37      	subs	r4, #55	; 0x37
 800b40c:	e7df      	b.n	800b3ce <_strtol_l.isra.0+0x6e>
 800b40e:	0021      	movs	r1, r4
 800b410:	3961      	subs	r1, #97	; 0x61
 800b412:	2919      	cmp	r1, #25
 800b414:	d801      	bhi.n	800b41a <_strtol_l.isra.0+0xba>
 800b416:	3c57      	subs	r4, #87	; 0x57
 800b418:	e7d9      	b.n	800b3ce <_strtol_l.isra.0+0x6e>
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	d108      	bne.n	800b430 <_strtol_l.isra.0+0xd0>
 800b41e:	9a05      	ldr	r2, [sp, #20]
 800b420:	3323      	adds	r3, #35	; 0x23
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	9b02      	ldr	r3, [sp, #8]
 800b426:	9803      	ldr	r0, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d109      	bne.n	800b440 <_strtol_l.isra.0+0xe0>
 800b42c:	b007      	add	sp, #28
 800b42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b430:	2e00      	cmp	r6, #0
 800b432:	d000      	beq.n	800b436 <_strtol_l.isra.0+0xd6>
 800b434:	4240      	negs	r0, r0
 800b436:	9a02      	ldr	r2, [sp, #8]
 800b438:	2a00      	cmp	r2, #0
 800b43a:	d0f7      	beq.n	800b42c <_strtol_l.isra.0+0xcc>
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <_strtol_l.isra.0+0xe4>
 800b440:	1e6b      	subs	r3, r5, #1
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	9a01      	ldr	r2, [sp, #4]
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e7ef      	b.n	800b42c <_strtol_l.isra.0+0xcc>
 800b44c:	2430      	movs	r4, #48	; 0x30
 800b44e:	2f00      	cmp	r7, #0
 800b450:	d1aa      	bne.n	800b3a8 <_strtol_l.isra.0+0x48>
 800b452:	2708      	movs	r7, #8
 800b454:	e7a8      	b.n	800b3a8 <_strtol_l.isra.0+0x48>
 800b456:	2c30      	cmp	r4, #48	; 0x30
 800b458:	d09e      	beq.n	800b398 <_strtol_l.isra.0+0x38>
 800b45a:	270a      	movs	r7, #10
 800b45c:	e7a4      	b.n	800b3a8 <_strtol_l.isra.0+0x48>
 800b45e:	46c0      	nop			; (mov r8, r8)
 800b460:	7fffffff 	.word	0x7fffffff

0800b464 <_strtol_r>:
 800b464:	b513      	push	{r0, r1, r4, lr}
 800b466:	4c05      	ldr	r4, [pc, #20]	; (800b47c <_strtol_r+0x18>)
 800b468:	6824      	ldr	r4, [r4, #0]
 800b46a:	6a24      	ldr	r4, [r4, #32]
 800b46c:	2c00      	cmp	r4, #0
 800b46e:	d100      	bne.n	800b472 <_strtol_r+0xe>
 800b470:	4c03      	ldr	r4, [pc, #12]	; (800b480 <_strtol_r+0x1c>)
 800b472:	9400      	str	r4, [sp, #0]
 800b474:	f7ff ff74 	bl	800b360 <_strtol_l.isra.0>
 800b478:	bd16      	pop	{r1, r2, r4, pc}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	2000001c 	.word	0x2000001c
 800b480:	20000080 	.word	0x20000080

0800b484 <quorem>:
 800b484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b486:	6903      	ldr	r3, [r0, #16]
 800b488:	690c      	ldr	r4, [r1, #16]
 800b48a:	b089      	sub	sp, #36	; 0x24
 800b48c:	0007      	movs	r7, r0
 800b48e:	9105      	str	r1, [sp, #20]
 800b490:	2600      	movs	r6, #0
 800b492:	42a3      	cmp	r3, r4
 800b494:	db65      	blt.n	800b562 <quorem+0xde>
 800b496:	000b      	movs	r3, r1
 800b498:	3c01      	subs	r4, #1
 800b49a:	3314      	adds	r3, #20
 800b49c:	00a5      	lsls	r5, r4, #2
 800b49e:	9303      	str	r3, [sp, #12]
 800b4a0:	195b      	adds	r3, r3, r5
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	3314      	adds	r3, #20
 800b4a8:	9302      	str	r3, [sp, #8]
 800b4aa:	195d      	adds	r5, r3, r5
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	6828      	ldr	r0, [r5, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	1c59      	adds	r1, r3, #1
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	f7f4 fe39 	bl	800012c <__udivsi3>
 800b4ba:	9001      	str	r0, [sp, #4]
 800b4bc:	42b0      	cmp	r0, r6
 800b4be:	d029      	beq.n	800b514 <quorem+0x90>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	9802      	ldr	r0, [sp, #8]
 800b4c4:	469c      	mov	ip, r3
 800b4c6:	9606      	str	r6, [sp, #24]
 800b4c8:	4662      	mov	r2, ip
 800b4ca:	ca08      	ldmia	r2!, {r3}
 800b4cc:	4694      	mov	ip, r2
 800b4ce:	9a01      	ldr	r2, [sp, #4]
 800b4d0:	b299      	uxth	r1, r3
 800b4d2:	4351      	muls	r1, r2
 800b4d4:	0c1b      	lsrs	r3, r3, #16
 800b4d6:	4353      	muls	r3, r2
 800b4d8:	1989      	adds	r1, r1, r6
 800b4da:	0c0a      	lsrs	r2, r1, #16
 800b4dc:	189b      	adds	r3, r3, r2
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	0c1e      	lsrs	r6, r3, #16
 800b4e2:	6803      	ldr	r3, [r0, #0]
 800b4e4:	b289      	uxth	r1, r1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	18d2      	adds	r2, r2, r3
 800b4ec:	6803      	ldr	r3, [r0, #0]
 800b4ee:	1a52      	subs	r2, r2, r1
 800b4f0:	0c19      	lsrs	r1, r3, #16
 800b4f2:	466b      	mov	r3, sp
 800b4f4:	8b9b      	ldrh	r3, [r3, #28]
 800b4f6:	1acb      	subs	r3, r1, r3
 800b4f8:	1411      	asrs	r1, r2, #16
 800b4fa:	185b      	adds	r3, r3, r1
 800b4fc:	1419      	asrs	r1, r3, #16
 800b4fe:	b292      	uxth	r2, r2
 800b500:	041b      	lsls	r3, r3, #16
 800b502:	431a      	orrs	r2, r3
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	9106      	str	r1, [sp, #24]
 800b508:	c004      	stmia	r0!, {r2}
 800b50a:	4563      	cmp	r3, ip
 800b50c:	d2dc      	bcs.n	800b4c8 <quorem+0x44>
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d02d      	beq.n	800b570 <quorem+0xec>
 800b514:	9905      	ldr	r1, [sp, #20]
 800b516:	0038      	movs	r0, r7
 800b518:	f001 fbcc 	bl	800ccb4 <__mcmp>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	db1f      	blt.n	800b560 <quorem+0xdc>
 800b520:	2500      	movs	r5, #0
 800b522:	9b01      	ldr	r3, [sp, #4]
 800b524:	9802      	ldr	r0, [sp, #8]
 800b526:	3301      	adds	r3, #1
 800b528:	9903      	ldr	r1, [sp, #12]
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	6802      	ldr	r2, [r0, #0]
 800b52e:	c908      	ldmia	r1!, {r3}
 800b530:	b292      	uxth	r2, r2
 800b532:	1955      	adds	r5, r2, r5
 800b534:	b29a      	uxth	r2, r3
 800b536:	1aaa      	subs	r2, r5, r2
 800b538:	6805      	ldr	r5, [r0, #0]
 800b53a:	0c1b      	lsrs	r3, r3, #16
 800b53c:	0c2d      	lsrs	r5, r5, #16
 800b53e:	1aeb      	subs	r3, r5, r3
 800b540:	1415      	asrs	r5, r2, #16
 800b542:	195b      	adds	r3, r3, r5
 800b544:	141d      	asrs	r5, r3, #16
 800b546:	b292      	uxth	r2, r2
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	4313      	orrs	r3, r2
 800b54c:	c008      	stmia	r0!, {r3}
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	428b      	cmp	r3, r1
 800b552:	d2eb      	bcs.n	800b52c <quorem+0xa8>
 800b554:	9a02      	ldr	r2, [sp, #8]
 800b556:	00a3      	lsls	r3, r4, #2
 800b558:	18d3      	adds	r3, r2, r3
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	d011      	beq.n	800b584 <quorem+0x100>
 800b560:	9e01      	ldr	r6, [sp, #4]
 800b562:	0030      	movs	r0, r6
 800b564:	b009      	add	sp, #36	; 0x24
 800b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <quorem+0xf4>
 800b56e:	3c01      	subs	r4, #1
 800b570:	9b02      	ldr	r3, [sp, #8]
 800b572:	3d04      	subs	r5, #4
 800b574:	42ab      	cmp	r3, r5
 800b576:	d3f7      	bcc.n	800b568 <quorem+0xe4>
 800b578:	613c      	str	r4, [r7, #16]
 800b57a:	e7cb      	b.n	800b514 <quorem+0x90>
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	2a00      	cmp	r2, #0
 800b580:	d104      	bne.n	800b58c <quorem+0x108>
 800b582:	3c01      	subs	r4, #1
 800b584:	9a02      	ldr	r2, [sp, #8]
 800b586:	3b04      	subs	r3, #4
 800b588:	429a      	cmp	r2, r3
 800b58a:	d3f7      	bcc.n	800b57c <quorem+0xf8>
 800b58c:	613c      	str	r4, [r7, #16]
 800b58e:	e7e7      	b.n	800b560 <quorem+0xdc>

0800b590 <_dtoa_r>:
 800b590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b592:	0016      	movs	r6, r2
 800b594:	001f      	movs	r7, r3
 800b596:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b598:	b09b      	sub	sp, #108	; 0x6c
 800b59a:	9002      	str	r0, [sp, #8]
 800b59c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800b59e:	9606      	str	r6, [sp, #24]
 800b5a0:	9707      	str	r7, [sp, #28]
 800b5a2:	2c00      	cmp	r4, #0
 800b5a4:	d108      	bne.n	800b5b8 <_dtoa_r+0x28>
 800b5a6:	2010      	movs	r0, #16
 800b5a8:	f7fe f8a2 	bl	80096f0 <malloc>
 800b5ac:	9b02      	ldr	r3, [sp, #8]
 800b5ae:	6258      	str	r0, [r3, #36]	; 0x24
 800b5b0:	6044      	str	r4, [r0, #4]
 800b5b2:	6084      	str	r4, [r0, #8]
 800b5b4:	6004      	str	r4, [r0, #0]
 800b5b6:	60c4      	str	r4, [r0, #12]
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	6819      	ldr	r1, [r3, #0]
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d00b      	beq.n	800b5da <_dtoa_r+0x4a>
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4093      	lsls	r3, r2
 800b5c8:	604a      	str	r2, [r1, #4]
 800b5ca:	608b      	str	r3, [r1, #8]
 800b5cc:	9802      	ldr	r0, [sp, #8]
 800b5ce:	f001 f956 	bl	800c87e <_Bfree>
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	9b02      	ldr	r3, [sp, #8]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	2f00      	cmp	r7, #0
 800b5dc:	da20      	bge.n	800b620 <_dtoa_r+0x90>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	007b      	lsls	r3, r7, #1
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	9307      	str	r3, [sp, #28]
 800b5e8:	9c07      	ldr	r4, [sp, #28]
 800b5ea:	4bb2      	ldr	r3, [pc, #712]	; (800b8b4 <_dtoa_r+0x324>)
 800b5ec:	0022      	movs	r2, r4
 800b5ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5f0:	401a      	ands	r2, r3
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d117      	bne.n	800b626 <_dtoa_r+0x96>
 800b5f6:	4bb0      	ldr	r3, [pc, #704]	; (800b8b8 <_dtoa_r+0x328>)
 800b5f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	9b06      	ldr	r3, [sp, #24]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d103      	bne.n	800b60a <_dtoa_r+0x7a>
 800b602:	0324      	lsls	r4, r4, #12
 800b604:	d101      	bne.n	800b60a <_dtoa_r+0x7a>
 800b606:	f000 fd87 	bl	800c118 <_dtoa_r+0xb88>
 800b60a:	4bac      	ldr	r3, [pc, #688]	; (800b8bc <_dtoa_r+0x32c>)
 800b60c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b60e:	9308      	str	r3, [sp, #32]
 800b610:	2a00      	cmp	r2, #0
 800b612:	d002      	beq.n	800b61a <_dtoa_r+0x8a>
 800b614:	4baa      	ldr	r3, [pc, #680]	; (800b8c0 <_dtoa_r+0x330>)
 800b616:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	9808      	ldr	r0, [sp, #32]
 800b61c:	b01b      	add	sp, #108	; 0x6c
 800b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b620:	2300      	movs	r3, #0
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	e7e0      	b.n	800b5e8 <_dtoa_r+0x58>
 800b626:	9e06      	ldr	r6, [sp, #24]
 800b628:	9f07      	ldr	r7, [sp, #28]
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	0030      	movs	r0, r6
 800b630:	0039      	movs	r1, r7
 800b632:	f7f4 ff01 	bl	8000438 <__aeabi_dcmpeq>
 800b636:	1e05      	subs	r5, r0, #0
 800b638:	d00b      	beq.n	800b652 <_dtoa_r+0xc2>
 800b63a:	2301      	movs	r3, #1
 800b63c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	4ba0      	ldr	r3, [pc, #640]	; (800b8c4 <_dtoa_r+0x334>)
 800b642:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b644:	9308      	str	r3, [sp, #32]
 800b646:	2a00      	cmp	r2, #0
 800b648:	d0e7      	beq.n	800b61a <_dtoa_r+0x8a>
 800b64a:	4a9f      	ldr	r2, [pc, #636]	; (800b8c8 <_dtoa_r+0x338>)
 800b64c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b64e:	600a      	str	r2, [r1, #0]
 800b650:	e7e3      	b.n	800b61a <_dtoa_r+0x8a>
 800b652:	ab18      	add	r3, sp, #96	; 0x60
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	ab19      	add	r3, sp, #100	; 0x64
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	0032      	movs	r2, r6
 800b65c:	003b      	movs	r3, r7
 800b65e:	9802      	ldr	r0, [sp, #8]
 800b660:	f001 fc18 	bl	800ce94 <__d2b>
 800b664:	0063      	lsls	r3, r4, #1
 800b666:	9003      	str	r0, [sp, #12]
 800b668:	0d5b      	lsrs	r3, r3, #21
 800b66a:	d074      	beq.n	800b756 <_dtoa_r+0x1c6>
 800b66c:	033a      	lsls	r2, r7, #12
 800b66e:	4c97      	ldr	r4, [pc, #604]	; (800b8cc <_dtoa_r+0x33c>)
 800b670:	0b12      	lsrs	r2, r2, #12
 800b672:	4314      	orrs	r4, r2
 800b674:	0021      	movs	r1, r4
 800b676:	4a96      	ldr	r2, [pc, #600]	; (800b8d0 <_dtoa_r+0x340>)
 800b678:	0030      	movs	r0, r6
 800b67a:	9516      	str	r5, [sp, #88]	; 0x58
 800b67c:	189e      	adds	r6, r3, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	4b94      	ldr	r3, [pc, #592]	; (800b8d4 <_dtoa_r+0x344>)
 800b682:	f7f6 f8fd 	bl	8001880 <__aeabi_dsub>
 800b686:	4a94      	ldr	r2, [pc, #592]	; (800b8d8 <_dtoa_r+0x348>)
 800b688:	4b94      	ldr	r3, [pc, #592]	; (800b8dc <_dtoa_r+0x34c>)
 800b68a:	f7f5 fe87 	bl	800139c <__aeabi_dmul>
 800b68e:	4a94      	ldr	r2, [pc, #592]	; (800b8e0 <_dtoa_r+0x350>)
 800b690:	4b94      	ldr	r3, [pc, #592]	; (800b8e4 <_dtoa_r+0x354>)
 800b692:	f7f4 ff5d 	bl	8000550 <__aeabi_dadd>
 800b696:	0004      	movs	r4, r0
 800b698:	0030      	movs	r0, r6
 800b69a:	000d      	movs	r5, r1
 800b69c:	f7f6 fc8a 	bl	8001fb4 <__aeabi_i2d>
 800b6a0:	4a91      	ldr	r2, [pc, #580]	; (800b8e8 <_dtoa_r+0x358>)
 800b6a2:	4b92      	ldr	r3, [pc, #584]	; (800b8ec <_dtoa_r+0x35c>)
 800b6a4:	f7f5 fe7a 	bl	800139c <__aeabi_dmul>
 800b6a8:	0002      	movs	r2, r0
 800b6aa:	000b      	movs	r3, r1
 800b6ac:	0020      	movs	r0, r4
 800b6ae:	0029      	movs	r1, r5
 800b6b0:	f7f4 ff4e 	bl	8000550 <__aeabi_dadd>
 800b6b4:	0004      	movs	r4, r0
 800b6b6:	000d      	movs	r5, r1
 800b6b8:	f7f6 fc46 	bl	8001f48 <__aeabi_d2iz>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	0007      	movs	r7, r0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	0020      	movs	r0, r4
 800b6c4:	0029      	movs	r1, r5
 800b6c6:	f7f4 febd 	bl	8000444 <__aeabi_dcmplt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d009      	beq.n	800b6e2 <_dtoa_r+0x152>
 800b6ce:	0038      	movs	r0, r7
 800b6d0:	f7f6 fc70 	bl	8001fb4 <__aeabi_i2d>
 800b6d4:	002b      	movs	r3, r5
 800b6d6:	0022      	movs	r2, r4
 800b6d8:	f7f4 feae 	bl	8000438 <__aeabi_dcmpeq>
 800b6dc:	4243      	negs	r3, r0
 800b6de:	4158      	adcs	r0, r3
 800b6e0:	1a3f      	subs	r7, r7, r0
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	9314      	str	r3, [sp, #80]	; 0x50
 800b6e6:	2f16      	cmp	r7, #22
 800b6e8:	d80d      	bhi.n	800b706 <_dtoa_r+0x176>
 800b6ea:	4981      	ldr	r1, [pc, #516]	; (800b8f0 <_dtoa_r+0x360>)
 800b6ec:	00fb      	lsls	r3, r7, #3
 800b6ee:	18c9      	adds	r1, r1, r3
 800b6f0:	6808      	ldr	r0, [r1, #0]
 800b6f2:	6849      	ldr	r1, [r1, #4]
 800b6f4:	9a06      	ldr	r2, [sp, #24]
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	f7f4 feb8 	bl	800046c <__aeabi_dcmpgt>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d046      	beq.n	800b78e <_dtoa_r+0x1fe>
 800b700:	2300      	movs	r3, #0
 800b702:	3f01      	subs	r7, #1
 800b704:	9314      	str	r3, [sp, #80]	; 0x50
 800b706:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b708:	1b9e      	subs	r6, r3, r6
 800b70a:	2300      	movs	r3, #0
 800b70c:	930a      	str	r3, [sp, #40]	; 0x28
 800b70e:	0033      	movs	r3, r6
 800b710:	3b01      	subs	r3, #1
 800b712:	930b      	str	r3, [sp, #44]	; 0x2c
 800b714:	d504      	bpl.n	800b720 <_dtoa_r+0x190>
 800b716:	2301      	movs	r3, #1
 800b718:	1b9b      	subs	r3, r3, r6
 800b71a:	930a      	str	r3, [sp, #40]	; 0x28
 800b71c:	2300      	movs	r3, #0
 800b71e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b720:	2f00      	cmp	r7, #0
 800b722:	db36      	blt.n	800b792 <_dtoa_r+0x202>
 800b724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b726:	9711      	str	r7, [sp, #68]	; 0x44
 800b728:	19db      	adds	r3, r3, r7
 800b72a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b72c:	2300      	movs	r3, #0
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b732:	2401      	movs	r4, #1
 800b734:	2b09      	cmp	r3, #9
 800b736:	d900      	bls.n	800b73a <_dtoa_r+0x1aa>
 800b738:	e084      	b.n	800b844 <_dtoa_r+0x2b4>
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	dd02      	ble.n	800b744 <_dtoa_r+0x1b4>
 800b73e:	2400      	movs	r4, #0
 800b740:	3b04      	subs	r3, #4
 800b742:	9320      	str	r3, [sp, #128]	; 0x80
 800b744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b746:	1e98      	subs	r0, r3, #2
 800b748:	2803      	cmp	r0, #3
 800b74a:	d900      	bls.n	800b74e <_dtoa_r+0x1be>
 800b74c:	e084      	b.n	800b858 <_dtoa_r+0x2c8>
 800b74e:	f7f4 fce3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b752:	7775      	.short	0x7775
 800b754:	6a28      	.short	0x6a28
 800b756:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b75a:	189e      	adds	r6, r3, r2
 800b75c:	4b65      	ldr	r3, [pc, #404]	; (800b8f4 <_dtoa_r+0x364>)
 800b75e:	18f2      	adds	r2, r6, r3
 800b760:	2a20      	cmp	r2, #32
 800b762:	dd0f      	ble.n	800b784 <_dtoa_r+0x1f4>
 800b764:	2340      	movs	r3, #64	; 0x40
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	409c      	lsls	r4, r3
 800b76a:	4b63      	ldr	r3, [pc, #396]	; (800b8f8 <_dtoa_r+0x368>)
 800b76c:	9806      	ldr	r0, [sp, #24]
 800b76e:	18f3      	adds	r3, r6, r3
 800b770:	40d8      	lsrs	r0, r3
 800b772:	4320      	orrs	r0, r4
 800b774:	f7f6 fc58 	bl	8002028 <__aeabi_ui2d>
 800b778:	2301      	movs	r3, #1
 800b77a:	4c60      	ldr	r4, [pc, #384]	; (800b8fc <_dtoa_r+0x36c>)
 800b77c:	3e01      	subs	r6, #1
 800b77e:	1909      	adds	r1, r1, r4
 800b780:	9316      	str	r3, [sp, #88]	; 0x58
 800b782:	e77c      	b.n	800b67e <_dtoa_r+0xee>
 800b784:	2320      	movs	r3, #32
 800b786:	9806      	ldr	r0, [sp, #24]
 800b788:	1a9b      	subs	r3, r3, r2
 800b78a:	4098      	lsls	r0, r3
 800b78c:	e7f2      	b.n	800b774 <_dtoa_r+0x1e4>
 800b78e:	9014      	str	r0, [sp, #80]	; 0x50
 800b790:	e7b9      	b.n	800b706 <_dtoa_r+0x176>
 800b792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b794:	1bdb      	subs	r3, r3, r7
 800b796:	930a      	str	r3, [sp, #40]	; 0x28
 800b798:	427b      	negs	r3, r7
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	2300      	movs	r3, #0
 800b79e:	9311      	str	r3, [sp, #68]	; 0x44
 800b7a0:	e7c6      	b.n	800b730 <_dtoa_r+0x1a0>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dd59      	ble.n	800b860 <_dtoa_r+0x2d0>
 800b7ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b0:	9a02      	ldr	r2, [sp, #8]
 800b7b2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	606a      	str	r2, [r5, #4]
 800b7b8:	3204      	adds	r2, #4
 800b7ba:	0010      	movs	r0, r2
 800b7bc:	3014      	adds	r0, #20
 800b7be:	6869      	ldr	r1, [r5, #4]
 800b7c0:	4298      	cmp	r0, r3
 800b7c2:	d952      	bls.n	800b86a <_dtoa_r+0x2da>
 800b7c4:	9802      	ldr	r0, [sp, #8]
 800b7c6:	f001 f822 	bl	800c80e <_Balloc>
 800b7ca:	9b02      	ldr	r3, [sp, #8]
 800b7cc:	6028      	str	r0, [r5, #0]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d6:	2b0e      	cmp	r3, #14
 800b7d8:	d900      	bls.n	800b7dc <_dtoa_r+0x24c>
 800b7da:	e10a      	b.n	800b9f2 <_dtoa_r+0x462>
 800b7dc:	2c00      	cmp	r4, #0
 800b7de:	d100      	bne.n	800b7e2 <_dtoa_r+0x252>
 800b7e0:	e107      	b.n	800b9f2 <_dtoa_r+0x462>
 800b7e2:	9b06      	ldr	r3, [sp, #24]
 800b7e4:	9c07      	ldr	r4, [sp, #28]
 800b7e6:	9312      	str	r3, [sp, #72]	; 0x48
 800b7e8:	9413      	str	r4, [sp, #76]	; 0x4c
 800b7ea:	2f00      	cmp	r7, #0
 800b7ec:	dc00      	bgt.n	800b7f0 <_dtoa_r+0x260>
 800b7ee:	e089      	b.n	800b904 <_dtoa_r+0x374>
 800b7f0:	210f      	movs	r1, #15
 800b7f2:	003a      	movs	r2, r7
 800b7f4:	4b3e      	ldr	r3, [pc, #248]	; (800b8f0 <_dtoa_r+0x360>)
 800b7f6:	400a      	ands	r2, r1
 800b7f8:	00d2      	lsls	r2, r2, #3
 800b7fa:	189b      	adds	r3, r3, r2
 800b7fc:	681d      	ldr	r5, [r3, #0]
 800b7fe:	685e      	ldr	r6, [r3, #4]
 800b800:	2302      	movs	r3, #2
 800b802:	113c      	asrs	r4, r7, #4
 800b804:	930e      	str	r3, [sp, #56]	; 0x38
 800b806:	06e3      	lsls	r3, r4, #27
 800b808:	d50b      	bpl.n	800b822 <_dtoa_r+0x292>
 800b80a:	4b3d      	ldr	r3, [pc, #244]	; (800b900 <_dtoa_r+0x370>)
 800b80c:	400c      	ands	r4, r1
 800b80e:	6a1a      	ldr	r2, [r3, #32]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b814:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b816:	f7f5 f9b7 	bl	8000b88 <__aeabi_ddiv>
 800b81a:	2303      	movs	r3, #3
 800b81c:	9006      	str	r0, [sp, #24]
 800b81e:	9107      	str	r1, [sp, #28]
 800b820:	930e      	str	r3, [sp, #56]	; 0x38
 800b822:	2300      	movs	r3, #0
 800b824:	e03a      	b.n	800b89c <_dtoa_r+0x30c>
 800b826:	2301      	movs	r3, #1
 800b828:	930d      	str	r3, [sp, #52]	; 0x34
 800b82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b82c:	18fb      	adds	r3, r7, r3
 800b82e:	930c      	str	r3, [sp, #48]	; 0x30
 800b830:	3301      	adds	r3, #1
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2b00      	cmp	r3, #0
 800b836:	dcbb      	bgt.n	800b7b0 <_dtoa_r+0x220>
 800b838:	2301      	movs	r3, #1
 800b83a:	e7b9      	b.n	800b7b0 <_dtoa_r+0x220>
 800b83c:	2300      	movs	r3, #0
 800b83e:	e7b1      	b.n	800b7a4 <_dtoa_r+0x214>
 800b840:	2300      	movs	r3, #0
 800b842:	e7f1      	b.n	800b828 <_dtoa_r+0x298>
 800b844:	2300      	movs	r3, #0
 800b846:	940d      	str	r4, [sp, #52]	; 0x34
 800b848:	9320      	str	r3, [sp, #128]	; 0x80
 800b84a:	3b01      	subs	r3, #1
 800b84c:	2200      	movs	r2, #0
 800b84e:	930c      	str	r3, [sp, #48]	; 0x30
 800b850:	9309      	str	r3, [sp, #36]	; 0x24
 800b852:	3313      	adds	r3, #19
 800b854:	9221      	str	r2, [sp, #132]	; 0x84
 800b856:	e7ab      	b.n	800b7b0 <_dtoa_r+0x220>
 800b858:	2301      	movs	r3, #1
 800b85a:	930d      	str	r3, [sp, #52]	; 0x34
 800b85c:	3b02      	subs	r3, #2
 800b85e:	e7f5      	b.n	800b84c <_dtoa_r+0x2bc>
 800b860:	2301      	movs	r3, #1
 800b862:	930c      	str	r3, [sp, #48]	; 0x30
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	001a      	movs	r2, r3
 800b868:	e7f4      	b.n	800b854 <_dtoa_r+0x2c4>
 800b86a:	3101      	adds	r1, #1
 800b86c:	6069      	str	r1, [r5, #4]
 800b86e:	0052      	lsls	r2, r2, #1
 800b870:	e7a3      	b.n	800b7ba <_dtoa_r+0x22a>
 800b872:	2301      	movs	r3, #1
 800b874:	421c      	tst	r4, r3
 800b876:	d00e      	beq.n	800b896 <_dtoa_r+0x306>
 800b878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b87a:	4a21      	ldr	r2, [pc, #132]	; (800b900 <_dtoa_r+0x370>)
 800b87c:	3301      	adds	r3, #1
 800b87e:	930e      	str	r3, [sp, #56]	; 0x38
 800b880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b882:	0028      	movs	r0, r5
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	189b      	adds	r3, r3, r2
 800b888:	0031      	movs	r1, r6
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f7f5 fd85 	bl	800139c <__aeabi_dmul>
 800b892:	0005      	movs	r5, r0
 800b894:	000e      	movs	r6, r1
 800b896:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b898:	1064      	asrs	r4, r4, #1
 800b89a:	3301      	adds	r3, #1
 800b89c:	9310      	str	r3, [sp, #64]	; 0x40
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	d1e7      	bne.n	800b872 <_dtoa_r+0x2e2>
 800b8a2:	9806      	ldr	r0, [sp, #24]
 800b8a4:	9907      	ldr	r1, [sp, #28]
 800b8a6:	002a      	movs	r2, r5
 800b8a8:	0033      	movs	r3, r6
 800b8aa:	f7f5 f96d 	bl	8000b88 <__aeabi_ddiv>
 800b8ae:	9006      	str	r0, [sp, #24]
 800b8b0:	9107      	str	r1, [sp, #28]
 800b8b2:	e042      	b.n	800b93a <_dtoa_r+0x3aa>
 800b8b4:	7ff00000 	.word	0x7ff00000
 800b8b8:	0000270f 	.word	0x0000270f
 800b8bc:	0800d869 	.word	0x0800d869
 800b8c0:	0800d86c 	.word	0x0800d86c
 800b8c4:	0800d7e4 	.word	0x0800d7e4
 800b8c8:	0800d7e5 	.word	0x0800d7e5
 800b8cc:	3ff00000 	.word	0x3ff00000
 800b8d0:	fffffc01 	.word	0xfffffc01
 800b8d4:	3ff80000 	.word	0x3ff80000
 800b8d8:	636f4361 	.word	0x636f4361
 800b8dc:	3fd287a7 	.word	0x3fd287a7
 800b8e0:	8b60c8b3 	.word	0x8b60c8b3
 800b8e4:	3fc68a28 	.word	0x3fc68a28
 800b8e8:	509f79fb 	.word	0x509f79fb
 800b8ec:	3fd34413 	.word	0x3fd34413
 800b8f0:	0800d8a0 	.word	0x0800d8a0
 800b8f4:	00000432 	.word	0x00000432
 800b8f8:	00000412 	.word	0x00000412
 800b8fc:	fe100000 	.word	0xfe100000
 800b900:	0800d878 	.word	0x0800d878
 800b904:	2302      	movs	r3, #2
 800b906:	930e      	str	r3, [sp, #56]	; 0x38
 800b908:	2f00      	cmp	r7, #0
 800b90a:	d016      	beq.n	800b93a <_dtoa_r+0x3aa>
 800b90c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b90e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b910:	427c      	negs	r4, r7
 800b912:	330d      	adds	r3, #13
 800b914:	4023      	ands	r3, r4
 800b916:	4ace      	ldr	r2, [pc, #824]	; (800bc50 <_dtoa_r+0x6c0>)
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	18d3      	adds	r3, r2, r3
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f7f5 fd3c 	bl	800139c <__aeabi_dmul>
 800b924:	2300      	movs	r3, #0
 800b926:	2601      	movs	r6, #1
 800b928:	001d      	movs	r5, r3
 800b92a:	9006      	str	r0, [sp, #24]
 800b92c:	9107      	str	r1, [sp, #28]
 800b92e:	1124      	asrs	r4, r4, #4
 800b930:	2c00      	cmp	r4, #0
 800b932:	d000      	beq.n	800b936 <_dtoa_r+0x3a6>
 800b934:	e08c      	b.n	800ba50 <_dtoa_r+0x4c0>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1b9      	bne.n	800b8ae <_dtoa_r+0x31e>
 800b93a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d100      	bne.n	800b942 <_dtoa_r+0x3b2>
 800b940:	e096      	b.n	800ba70 <_dtoa_r+0x4e0>
 800b942:	9c06      	ldr	r4, [sp, #24]
 800b944:	9d07      	ldr	r5, [sp, #28]
 800b946:	2200      	movs	r2, #0
 800b948:	4bc2      	ldr	r3, [pc, #776]	; (800bc54 <_dtoa_r+0x6c4>)
 800b94a:	0020      	movs	r0, r4
 800b94c:	0029      	movs	r1, r5
 800b94e:	f7f4 fd79 	bl	8000444 <__aeabi_dcmplt>
 800b952:	2800      	cmp	r0, #0
 800b954:	d100      	bne.n	800b958 <_dtoa_r+0x3c8>
 800b956:	e08b      	b.n	800ba70 <_dtoa_r+0x4e0>
 800b958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d100      	bne.n	800b960 <_dtoa_r+0x3d0>
 800b95e:	e087      	b.n	800ba70 <_dtoa_r+0x4e0>
 800b960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd41      	ble.n	800b9ea <_dtoa_r+0x45a>
 800b966:	4bbc      	ldr	r3, [pc, #752]	; (800bc58 <_dtoa_r+0x6c8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	0020      	movs	r0, r4
 800b96c:	0029      	movs	r1, r5
 800b96e:	f7f5 fd15 	bl	800139c <__aeabi_dmul>
 800b972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b974:	9006      	str	r0, [sp, #24]
 800b976:	9107      	str	r1, [sp, #28]
 800b978:	3301      	adds	r3, #1
 800b97a:	930e      	str	r3, [sp, #56]	; 0x38
 800b97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b97e:	1e7e      	subs	r6, r7, #1
 800b980:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b982:	9310      	str	r3, [sp, #64]	; 0x40
 800b984:	f7f6 fb16 	bl	8001fb4 <__aeabi_i2d>
 800b988:	9a06      	ldr	r2, [sp, #24]
 800b98a:	9b07      	ldr	r3, [sp, #28]
 800b98c:	f7f5 fd06 	bl	800139c <__aeabi_dmul>
 800b990:	2200      	movs	r2, #0
 800b992:	4bb2      	ldr	r3, [pc, #712]	; (800bc5c <_dtoa_r+0x6cc>)
 800b994:	f7f4 fddc 	bl	8000550 <__aeabi_dadd>
 800b998:	4ab1      	ldr	r2, [pc, #708]	; (800bc60 <_dtoa_r+0x6d0>)
 800b99a:	900e      	str	r0, [sp, #56]	; 0x38
 800b99c:	910f      	str	r1, [sp, #60]	; 0x3c
 800b99e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b9a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9a2:	4694      	mov	ip, r2
 800b9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9a6:	4463      	add	r3, ip
 800b9a8:	9315      	str	r3, [sp, #84]	; 0x54
 800b9aa:	001d      	movs	r5, r3
 800b9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d161      	bne.n	800ba76 <_dtoa_r+0x4e6>
 800b9b2:	9806      	ldr	r0, [sp, #24]
 800b9b4:	9907      	ldr	r1, [sp, #28]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4baa      	ldr	r3, [pc, #680]	; (800bc64 <_dtoa_r+0x6d4>)
 800b9ba:	f7f5 ff61 	bl	8001880 <__aeabi_dsub>
 800b9be:	0022      	movs	r2, r4
 800b9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9c2:	9006      	str	r0, [sp, #24]
 800b9c4:	9107      	str	r1, [sp, #28]
 800b9c6:	f7f4 fd51 	bl	800046c <__aeabi_dcmpgt>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d000      	beq.n	800b9d0 <_dtoa_r+0x440>
 800b9ce:	e2a8      	b.n	800bf22 <_dtoa_r+0x992>
 800b9d0:	48a5      	ldr	r0, [pc, #660]	; (800bc68 <_dtoa_r+0x6d8>)
 800b9d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b9d4:	4684      	mov	ip, r0
 800b9d6:	4461      	add	r1, ip
 800b9d8:	000b      	movs	r3, r1
 800b9da:	9806      	ldr	r0, [sp, #24]
 800b9dc:	9907      	ldr	r1, [sp, #28]
 800b9de:	0022      	movs	r2, r4
 800b9e0:	f7f4 fd30 	bl	8000444 <__aeabi_dcmplt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d000      	beq.n	800b9ea <_dtoa_r+0x45a>
 800b9e8:	e295      	b.n	800bf16 <_dtoa_r+0x986>
 800b9ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b9ee:	9306      	str	r3, [sp, #24]
 800b9f0:	9407      	str	r4, [sp, #28]
 800b9f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	da00      	bge.n	800b9fa <_dtoa_r+0x46a>
 800b9f8:	e15c      	b.n	800bcb4 <_dtoa_r+0x724>
 800b9fa:	2f0e      	cmp	r7, #14
 800b9fc:	dd00      	ble.n	800ba00 <_dtoa_r+0x470>
 800b9fe:	e159      	b.n	800bcb4 <_dtoa_r+0x724>
 800ba00:	4b93      	ldr	r3, [pc, #588]	; (800bc50 <_dtoa_r+0x6c0>)
 800ba02:	00fa      	lsls	r2, r7, #3
 800ba04:	189b      	adds	r3, r3, r2
 800ba06:	685c      	ldr	r4, [r3, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	9405      	str	r4, [sp, #20]
 800ba0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	db00      	blt.n	800ba16 <_dtoa_r+0x486>
 800ba14:	e0d8      	b.n	800bbc8 <_dtoa_r+0x638>
 800ba16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	dd00      	ble.n	800ba1e <_dtoa_r+0x48e>
 800ba1c:	e0d4      	b.n	800bbc8 <_dtoa_r+0x638>
 800ba1e:	d000      	beq.n	800ba22 <_dtoa_r+0x492>
 800ba20:	e27d      	b.n	800bf1e <_dtoa_r+0x98e>
 800ba22:	9804      	ldr	r0, [sp, #16]
 800ba24:	9905      	ldr	r1, [sp, #20]
 800ba26:	2200      	movs	r2, #0
 800ba28:	4b8e      	ldr	r3, [pc, #568]	; (800bc64 <_dtoa_r+0x6d4>)
 800ba2a:	f7f5 fcb7 	bl	800139c <__aeabi_dmul>
 800ba2e:	9a06      	ldr	r2, [sp, #24]
 800ba30:	9b07      	ldr	r3, [sp, #28]
 800ba32:	f7f4 fd25 	bl	8000480 <__aeabi_dcmpge>
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	001e      	movs	r6, r3
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d000      	beq.n	800ba42 <_dtoa_r+0x4b2>
 800ba40:	e24f      	b.n	800bee2 <_dtoa_r+0x952>
 800ba42:	9b08      	ldr	r3, [sp, #32]
 800ba44:	9a08      	ldr	r2, [sp, #32]
 800ba46:	1c5d      	adds	r5, r3, #1
 800ba48:	2331      	movs	r3, #49	; 0x31
 800ba4a:	3701      	adds	r7, #1
 800ba4c:	7013      	strb	r3, [r2, #0]
 800ba4e:	e24b      	b.n	800bee8 <_dtoa_r+0x958>
 800ba50:	4234      	tst	r4, r6
 800ba52:	d00a      	beq.n	800ba6a <_dtoa_r+0x4da>
 800ba54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba56:	4a85      	ldr	r2, [pc, #532]	; (800bc6c <_dtoa_r+0x6dc>)
 800ba58:	3301      	adds	r3, #1
 800ba5a:	930e      	str	r3, [sp, #56]	; 0x38
 800ba5c:	00eb      	lsls	r3, r5, #3
 800ba5e:	189b      	adds	r3, r3, r2
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f7f5 fc9a 	bl	800139c <__aeabi_dmul>
 800ba68:	0033      	movs	r3, r6
 800ba6a:	1064      	asrs	r4, r4, #1
 800ba6c:	3501      	adds	r5, #1
 800ba6e:	e75f      	b.n	800b930 <_dtoa_r+0x3a0>
 800ba70:	003e      	movs	r6, r7
 800ba72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba74:	e784      	b.n	800b980 <_dtoa_r+0x3f0>
 800ba76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba78:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ba7a:	1e5a      	subs	r2, r3, #1
 800ba7c:	4b74      	ldr	r3, [pc, #464]	; (800bc50 <_dtoa_r+0x6c0>)
 800ba7e:	00d2      	lsls	r2, r2, #3
 800ba80:	189b      	adds	r3, r3, r2
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	2900      	cmp	r1, #0
 800ba88:	d049      	beq.n	800bb1e <_dtoa_r+0x58e>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	4978      	ldr	r1, [pc, #480]	; (800bc70 <_dtoa_r+0x6e0>)
 800ba8e:	f7f5 f87b 	bl	8000b88 <__aeabi_ddiv>
 800ba92:	002b      	movs	r3, r5
 800ba94:	0022      	movs	r2, r4
 800ba96:	f7f5 fef3 	bl	8001880 <__aeabi_dsub>
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	900e      	str	r0, [sp, #56]	; 0x38
 800ba9e:	910f      	str	r1, [sp, #60]	; 0x3c
 800baa0:	9315      	str	r3, [sp, #84]	; 0x54
 800baa2:	9806      	ldr	r0, [sp, #24]
 800baa4:	9907      	ldr	r1, [sp, #28]
 800baa6:	f7f6 fa4f 	bl	8001f48 <__aeabi_d2iz>
 800baaa:	0004      	movs	r4, r0
 800baac:	f7f6 fa82 	bl	8001fb4 <__aeabi_i2d>
 800bab0:	0002      	movs	r2, r0
 800bab2:	000b      	movs	r3, r1
 800bab4:	9806      	ldr	r0, [sp, #24]
 800bab6:	9907      	ldr	r1, [sp, #28]
 800bab8:	f7f5 fee2 	bl	8001880 <__aeabi_dsub>
 800babc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800babe:	3430      	adds	r4, #48	; 0x30
 800bac0:	1c5d      	adds	r5, r3, #1
 800bac2:	701c      	strb	r4, [r3, #0]
 800bac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bac8:	9006      	str	r0, [sp, #24]
 800baca:	9107      	str	r1, [sp, #28]
 800bacc:	f7f4 fcba 	bl	8000444 <__aeabi_dcmplt>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d16c      	bne.n	800bbae <_dtoa_r+0x61e>
 800bad4:	9a06      	ldr	r2, [sp, #24]
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	2000      	movs	r0, #0
 800bada:	495e      	ldr	r1, [pc, #376]	; (800bc54 <_dtoa_r+0x6c4>)
 800badc:	f7f5 fed0 	bl	8001880 <__aeabi_dsub>
 800bae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bae4:	f7f4 fcae 	bl	8000444 <__aeabi_dcmplt>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d000      	beq.n	800baee <_dtoa_r+0x55e>
 800baec:	e0c3      	b.n	800bc76 <_dtoa_r+0x6e6>
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baf2:	1aeb      	subs	r3, r5, r3
 800baf4:	429a      	cmp	r2, r3
 800baf6:	dc00      	bgt.n	800bafa <_dtoa_r+0x56a>
 800baf8:	e777      	b.n	800b9ea <_dtoa_r+0x45a>
 800bafa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bafc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b55      	ldr	r3, [pc, #340]	; (800bc58 <_dtoa_r+0x6c8>)
 800bb02:	f7f5 fc4b 	bl	800139c <__aeabi_dmul>
 800bb06:	2200      	movs	r2, #0
 800bb08:	900e      	str	r0, [sp, #56]	; 0x38
 800bb0a:	910f      	str	r1, [sp, #60]	; 0x3c
 800bb0c:	9806      	ldr	r0, [sp, #24]
 800bb0e:	9907      	ldr	r1, [sp, #28]
 800bb10:	4b51      	ldr	r3, [pc, #324]	; (800bc58 <_dtoa_r+0x6c8>)
 800bb12:	f7f5 fc43 	bl	800139c <__aeabi_dmul>
 800bb16:	9515      	str	r5, [sp, #84]	; 0x54
 800bb18:	9006      	str	r0, [sp, #24]
 800bb1a:	9107      	str	r1, [sp, #28]
 800bb1c:	e7c1      	b.n	800baa2 <_dtoa_r+0x512>
 800bb1e:	0020      	movs	r0, r4
 800bb20:	0029      	movs	r1, r5
 800bb22:	f7f5 fc3b 	bl	800139c <__aeabi_dmul>
 800bb26:	9c08      	ldr	r4, [sp, #32]
 800bb28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb2a:	0023      	movs	r3, r4
 800bb2c:	4694      	mov	ip, r2
 800bb2e:	900e      	str	r0, [sp, #56]	; 0x38
 800bb30:	910f      	str	r1, [sp, #60]	; 0x3c
 800bb32:	4463      	add	r3, ip
 800bb34:	9315      	str	r3, [sp, #84]	; 0x54
 800bb36:	9806      	ldr	r0, [sp, #24]
 800bb38:	9907      	ldr	r1, [sp, #28]
 800bb3a:	f7f6 fa05 	bl	8001f48 <__aeabi_d2iz>
 800bb3e:	0005      	movs	r5, r0
 800bb40:	f7f6 fa38 	bl	8001fb4 <__aeabi_i2d>
 800bb44:	000b      	movs	r3, r1
 800bb46:	0002      	movs	r2, r0
 800bb48:	9806      	ldr	r0, [sp, #24]
 800bb4a:	9907      	ldr	r1, [sp, #28]
 800bb4c:	f7f5 fe98 	bl	8001880 <__aeabi_dsub>
 800bb50:	3530      	adds	r5, #48	; 0x30
 800bb52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb54:	7025      	strb	r5, [r4, #0]
 800bb56:	3401      	adds	r4, #1
 800bb58:	9006      	str	r0, [sp, #24]
 800bb5a:	9107      	str	r1, [sp, #28]
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d12a      	bne.n	800bbb6 <_dtoa_r+0x626>
 800bb60:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bb62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb64:	9a08      	ldr	r2, [sp, #32]
 800bb66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb68:	4694      	mov	ip, r2
 800bb6a:	4463      	add	r3, ip
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	001d      	movs	r5, r3
 800bb70:	4b3f      	ldr	r3, [pc, #252]	; (800bc70 <_dtoa_r+0x6e0>)
 800bb72:	f7f4 fced 	bl	8000550 <__aeabi_dadd>
 800bb76:	0002      	movs	r2, r0
 800bb78:	000b      	movs	r3, r1
 800bb7a:	9806      	ldr	r0, [sp, #24]
 800bb7c:	9907      	ldr	r1, [sp, #28]
 800bb7e:	f7f4 fc75 	bl	800046c <__aeabi_dcmpgt>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d000      	beq.n	800bb88 <_dtoa_r+0x5f8>
 800bb86:	e076      	b.n	800bc76 <_dtoa_r+0x6e6>
 800bb88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4938      	ldr	r1, [pc, #224]	; (800bc70 <_dtoa_r+0x6e0>)
 800bb90:	f7f5 fe76 	bl	8001880 <__aeabi_dsub>
 800bb94:	0002      	movs	r2, r0
 800bb96:	000b      	movs	r3, r1
 800bb98:	9806      	ldr	r0, [sp, #24]
 800bb9a:	9907      	ldr	r1, [sp, #28]
 800bb9c:	f7f4 fc52 	bl	8000444 <__aeabi_dcmplt>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d100      	bne.n	800bba6 <_dtoa_r+0x616>
 800bba4:	e721      	b.n	800b9ea <_dtoa_r+0x45a>
 800bba6:	1e6b      	subs	r3, r5, #1
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	2a30      	cmp	r2, #48	; 0x30
 800bbac:	d001      	beq.n	800bbb2 <_dtoa_r+0x622>
 800bbae:	0037      	movs	r7, r6
 800bbb0:	e03f      	b.n	800bc32 <_dtoa_r+0x6a2>
 800bbb2:	001d      	movs	r5, r3
 800bbb4:	e7f7      	b.n	800bba6 <_dtoa_r+0x616>
 800bbb6:	9806      	ldr	r0, [sp, #24]
 800bbb8:	9907      	ldr	r1, [sp, #28]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <_dtoa_r+0x6c8>)
 800bbbe:	f7f5 fbed 	bl	800139c <__aeabi_dmul>
 800bbc2:	9006      	str	r0, [sp, #24]
 800bbc4:	9107      	str	r1, [sp, #28]
 800bbc6:	e7b6      	b.n	800bb36 <_dtoa_r+0x5a6>
 800bbc8:	9e08      	ldr	r6, [sp, #32]
 800bbca:	9a04      	ldr	r2, [sp, #16]
 800bbcc:	9b05      	ldr	r3, [sp, #20]
 800bbce:	9806      	ldr	r0, [sp, #24]
 800bbd0:	9907      	ldr	r1, [sp, #28]
 800bbd2:	f7f4 ffd9 	bl	8000b88 <__aeabi_ddiv>
 800bbd6:	f7f6 f9b7 	bl	8001f48 <__aeabi_d2iz>
 800bbda:	0004      	movs	r4, r0
 800bbdc:	f7f6 f9ea 	bl	8001fb4 <__aeabi_i2d>
 800bbe0:	9a04      	ldr	r2, [sp, #16]
 800bbe2:	9b05      	ldr	r3, [sp, #20]
 800bbe4:	f7f5 fbda 	bl	800139c <__aeabi_dmul>
 800bbe8:	0002      	movs	r2, r0
 800bbea:	000b      	movs	r3, r1
 800bbec:	9806      	ldr	r0, [sp, #24]
 800bbee:	9907      	ldr	r1, [sp, #28]
 800bbf0:	f7f5 fe46 	bl	8001880 <__aeabi_dsub>
 800bbf4:	0023      	movs	r3, r4
 800bbf6:	3330      	adds	r3, #48	; 0x30
 800bbf8:	7033      	strb	r3, [r6, #0]
 800bbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbfc:	9b08      	ldr	r3, [sp, #32]
 800bbfe:	1c75      	adds	r5, r6, #1
 800bc00:	1aeb      	subs	r3, r5, r3
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d148      	bne.n	800bc98 <_dtoa_r+0x708>
 800bc06:	0002      	movs	r2, r0
 800bc08:	000b      	movs	r3, r1
 800bc0a:	f7f4 fca1 	bl	8000550 <__aeabi_dadd>
 800bc0e:	9a04      	ldr	r2, [sp, #16]
 800bc10:	9b05      	ldr	r3, [sp, #20]
 800bc12:	9006      	str	r0, [sp, #24]
 800bc14:	9107      	str	r1, [sp, #28]
 800bc16:	f7f4 fc29 	bl	800046c <__aeabi_dcmpgt>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d12a      	bne.n	800bc74 <_dtoa_r+0x6e4>
 800bc1e:	9a04      	ldr	r2, [sp, #16]
 800bc20:	9b05      	ldr	r3, [sp, #20]
 800bc22:	9806      	ldr	r0, [sp, #24]
 800bc24:	9907      	ldr	r1, [sp, #28]
 800bc26:	f7f4 fc07 	bl	8000438 <__aeabi_dcmpeq>
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d001      	beq.n	800bc32 <_dtoa_r+0x6a2>
 800bc2e:	07e3      	lsls	r3, r4, #31
 800bc30:	d420      	bmi.n	800bc74 <_dtoa_r+0x6e4>
 800bc32:	9903      	ldr	r1, [sp, #12]
 800bc34:	9802      	ldr	r0, [sp, #8]
 800bc36:	f000 fe22 	bl	800c87e <_Bfree>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	702b      	strb	r3, [r5, #0]
 800bc3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc40:	3701      	adds	r7, #1
 800bc42:	601f      	str	r7, [r3, #0]
 800bc44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d100      	bne.n	800bc4c <_dtoa_r+0x6bc>
 800bc4a:	e4e6      	b.n	800b61a <_dtoa_r+0x8a>
 800bc4c:	601d      	str	r5, [r3, #0]
 800bc4e:	e4e4      	b.n	800b61a <_dtoa_r+0x8a>
 800bc50:	0800d8a0 	.word	0x0800d8a0
 800bc54:	3ff00000 	.word	0x3ff00000
 800bc58:	40240000 	.word	0x40240000
 800bc5c:	401c0000 	.word	0x401c0000
 800bc60:	fcc00000 	.word	0xfcc00000
 800bc64:	40140000 	.word	0x40140000
 800bc68:	7cc00000 	.word	0x7cc00000
 800bc6c:	0800d878 	.word	0x0800d878
 800bc70:	3fe00000 	.word	0x3fe00000
 800bc74:	003e      	movs	r6, r7
 800bc76:	1e6b      	subs	r3, r5, #1
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	2a39      	cmp	r2, #57	; 0x39
 800bc7c:	d106      	bne.n	800bc8c <_dtoa_r+0x6fc>
 800bc7e:	9a08      	ldr	r2, [sp, #32]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d107      	bne.n	800bc94 <_dtoa_r+0x704>
 800bc84:	2330      	movs	r3, #48	; 0x30
 800bc86:	7013      	strb	r3, [r2, #0]
 800bc88:	0013      	movs	r3, r2
 800bc8a:	3601      	adds	r6, #1
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	3201      	adds	r2, #1
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	e78c      	b.n	800bbae <_dtoa_r+0x61e>
 800bc94:	001d      	movs	r5, r3
 800bc96:	e7ee      	b.n	800bc76 <_dtoa_r+0x6e6>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4ba4      	ldr	r3, [pc, #656]	; (800bf2c <_dtoa_r+0x99c>)
 800bc9c:	f7f5 fb7e 	bl	800139c <__aeabi_dmul>
 800bca0:	2200      	movs	r2, #0
 800bca2:	2300      	movs	r3, #0
 800bca4:	9006      	str	r0, [sp, #24]
 800bca6:	9107      	str	r1, [sp, #28]
 800bca8:	002e      	movs	r6, r5
 800bcaa:	f7f4 fbc5 	bl	8000438 <__aeabi_dcmpeq>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d08b      	beq.n	800bbca <_dtoa_r+0x63a>
 800bcb2:	e7be      	b.n	800bc32 <_dtoa_r+0x6a2>
 800bcb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	d100      	bne.n	800bcbc <_dtoa_r+0x72c>
 800bcba:	e0da      	b.n	800be72 <_dtoa_r+0x8e2>
 800bcbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bcbe:	2a01      	cmp	r2, #1
 800bcc0:	dd00      	ble.n	800bcc4 <_dtoa_r+0x734>
 800bcc2:	e0bd      	b.n	800be40 <_dtoa_r+0x8b0>
 800bcc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	d100      	bne.n	800bccc <_dtoa_r+0x73c>
 800bcca:	e0b5      	b.n	800be38 <_dtoa_r+0x8a8>
 800bccc:	4a98      	ldr	r2, [pc, #608]	; (800bf30 <_dtoa_r+0x9a0>)
 800bcce:	189b      	adds	r3, r3, r2
 800bcd0:	9d04      	ldr	r5, [sp, #16]
 800bcd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bcd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	18d2      	adds	r2, r2, r3
 800bcda:	920a      	str	r2, [sp, #40]	; 0x28
 800bcdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcde:	9802      	ldr	r0, [sp, #8]
 800bce0:	18d3      	adds	r3, r2, r3
 800bce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bce4:	f000 fea9 	bl	800ca3a <__i2b>
 800bce8:	0006      	movs	r6, r0
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	dd0e      	ble.n	800bd0c <_dtoa_r+0x77c>
 800bcee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dd0b      	ble.n	800bd0c <_dtoa_r+0x77c>
 800bcf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcf6:	0023      	movs	r3, r4
 800bcf8:	4294      	cmp	r4, r2
 800bcfa:	dd00      	ble.n	800bcfe <_dtoa_r+0x76e>
 800bcfc:	0013      	movs	r3, r2
 800bcfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd00:	1ae4      	subs	r4, r4, r3
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	920a      	str	r2, [sp, #40]	; 0x28
 800bd06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd0c:	9b04      	ldr	r3, [sp, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d01f      	beq.n	800bd52 <_dtoa_r+0x7c2>
 800bd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d100      	bne.n	800bd1a <_dtoa_r+0x78a>
 800bd18:	e0af      	b.n	800be7a <_dtoa_r+0x8ea>
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	d011      	beq.n	800bd42 <_dtoa_r+0x7b2>
 800bd1e:	0031      	movs	r1, r6
 800bd20:	002a      	movs	r2, r5
 800bd22:	9802      	ldr	r0, [sp, #8]
 800bd24:	f000 ff22 	bl	800cb6c <__pow5mult>
 800bd28:	9a03      	ldr	r2, [sp, #12]
 800bd2a:	0001      	movs	r1, r0
 800bd2c:	0006      	movs	r6, r0
 800bd2e:	9802      	ldr	r0, [sp, #8]
 800bd30:	f000 fe8c 	bl	800ca4c <__multiply>
 800bd34:	9903      	ldr	r1, [sp, #12]
 800bd36:	9010      	str	r0, [sp, #64]	; 0x40
 800bd38:	9802      	ldr	r0, [sp, #8]
 800bd3a:	f000 fda0 	bl	800c87e <_Bfree>
 800bd3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	9b04      	ldr	r3, [sp, #16]
 800bd44:	1b5a      	subs	r2, r3, r5
 800bd46:	d004      	beq.n	800bd52 <_dtoa_r+0x7c2>
 800bd48:	9903      	ldr	r1, [sp, #12]
 800bd4a:	9802      	ldr	r0, [sp, #8]
 800bd4c:	f000 ff0e 	bl	800cb6c <__pow5mult>
 800bd50:	9003      	str	r0, [sp, #12]
 800bd52:	2101      	movs	r1, #1
 800bd54:	9802      	ldr	r0, [sp, #8]
 800bd56:	f000 fe70 	bl	800ca3a <__i2b>
 800bd5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd5c:	9004      	str	r0, [sp, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d100      	bne.n	800bd64 <_dtoa_r+0x7d4>
 800bd62:	e1e3      	b.n	800c12c <_dtoa_r+0xb9c>
 800bd64:	001a      	movs	r2, r3
 800bd66:	0001      	movs	r1, r0
 800bd68:	9802      	ldr	r0, [sp, #8]
 800bd6a:	f000 feff 	bl	800cb6c <__pow5mult>
 800bd6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bd70:	9004      	str	r0, [sp, #16]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	dd00      	ble.n	800bd78 <_dtoa_r+0x7e8>
 800bd76:	e082      	b.n	800be7e <_dtoa_r+0x8ee>
 800bd78:	2500      	movs	r5, #0
 800bd7a:	9b06      	ldr	r3, [sp, #24]
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	d10e      	bne.n	800bd9e <_dtoa_r+0x80e>
 800bd80:	9b07      	ldr	r3, [sp, #28]
 800bd82:	031b      	lsls	r3, r3, #12
 800bd84:	42ab      	cmp	r3, r5
 800bd86:	d10a      	bne.n	800bd9e <_dtoa_r+0x80e>
 800bd88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	4213      	tst	r3, r2
 800bd8e:	d006      	beq.n	800bd9e <_dtoa_r+0x80e>
 800bd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd92:	3501      	adds	r5, #1
 800bd94:	3301      	adds	r3, #1
 800bd96:	930a      	str	r3, [sp, #40]	; 0x28
 800bd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bda0:	2001      	movs	r0, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d16c      	bne.n	800be80 <_dtoa_r+0x8f0>
 800bda6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda8:	1818      	adds	r0, r3, r0
 800bdaa:	231f      	movs	r3, #31
 800bdac:	4018      	ands	r0, r3
 800bdae:	d07e      	beq.n	800beae <_dtoa_r+0x91e>
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	1a1b      	subs	r3, r3, r0
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	dd70      	ble.n	800be9a <_dtoa_r+0x90a>
 800bdb8:	231c      	movs	r3, #28
 800bdba:	1a18      	subs	r0, r3, r0
 800bdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdbe:	1824      	adds	r4, r4, r0
 800bdc0:	181b      	adds	r3, r3, r0
 800bdc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc6:	181b      	adds	r3, r3, r0
 800bdc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd05      	ble.n	800bddc <_dtoa_r+0x84c>
 800bdd0:	001a      	movs	r2, r3
 800bdd2:	9903      	ldr	r1, [sp, #12]
 800bdd4:	9802      	ldr	r0, [sp, #8]
 800bdd6:	f000 ff1b 	bl	800cc10 <__lshift>
 800bdda:	9003      	str	r0, [sp, #12]
 800bddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dd05      	ble.n	800bdee <_dtoa_r+0x85e>
 800bde2:	001a      	movs	r2, r3
 800bde4:	9904      	ldr	r1, [sp, #16]
 800bde6:	9802      	ldr	r0, [sp, #8]
 800bde8:	f000 ff12 	bl	800cc10 <__lshift>
 800bdec:	9004      	str	r0, [sp, #16]
 800bdee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d05e      	beq.n	800beb2 <_dtoa_r+0x922>
 800bdf4:	9904      	ldr	r1, [sp, #16]
 800bdf6:	9803      	ldr	r0, [sp, #12]
 800bdf8:	f000 ff5c 	bl	800ccb4 <__mcmp>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	da58      	bge.n	800beb2 <_dtoa_r+0x922>
 800be00:	2300      	movs	r3, #0
 800be02:	220a      	movs	r2, #10
 800be04:	9903      	ldr	r1, [sp, #12]
 800be06:	9802      	ldr	r0, [sp, #8]
 800be08:	f000 fd52 	bl	800c8b0 <__multadd>
 800be0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be0e:	3f01      	subs	r7, #1
 800be10:	9003      	str	r0, [sp, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d100      	bne.n	800be18 <_dtoa_r+0x888>
 800be16:	e190      	b.n	800c13a <_dtoa_r+0xbaa>
 800be18:	2300      	movs	r3, #0
 800be1a:	0031      	movs	r1, r6
 800be1c:	220a      	movs	r2, #10
 800be1e:	9802      	ldr	r0, [sp, #8]
 800be20:	f000 fd46 	bl	800c8b0 <__multadd>
 800be24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be26:	0006      	movs	r6, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dd00      	ble.n	800be2e <_dtoa_r+0x89e>
 800be2c:	e088      	b.n	800bf40 <_dtoa_r+0x9b0>
 800be2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be30:	2b02      	cmp	r3, #2
 800be32:	dc00      	bgt.n	800be36 <_dtoa_r+0x8a6>
 800be34:	e084      	b.n	800bf40 <_dtoa_r+0x9b0>
 800be36:	e044      	b.n	800bec2 <_dtoa_r+0x932>
 800be38:	2336      	movs	r3, #54	; 0x36
 800be3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	e747      	b.n	800bcd0 <_dtoa_r+0x740>
 800be40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be42:	1e5d      	subs	r5, r3, #1
 800be44:	9b04      	ldr	r3, [sp, #16]
 800be46:	42ab      	cmp	r3, r5
 800be48:	db08      	blt.n	800be5c <_dtoa_r+0x8cc>
 800be4a:	1b5d      	subs	r5, r3, r5
 800be4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da0c      	bge.n	800be6c <_dtoa_r+0x8dc>
 800be52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be56:	1a9c      	subs	r4, r3, r2
 800be58:	2300      	movs	r3, #0
 800be5a:	e73b      	b.n	800bcd4 <_dtoa_r+0x744>
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	9504      	str	r5, [sp, #16]
 800be60:	1aea      	subs	r2, r5, r3
 800be62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be64:	2500      	movs	r5, #0
 800be66:	189b      	adds	r3, r3, r2
 800be68:	9311      	str	r3, [sp, #68]	; 0x44
 800be6a:	e7ef      	b.n	800be4c <_dtoa_r+0x8bc>
 800be6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be70:	e730      	b.n	800bcd4 <_dtoa_r+0x744>
 800be72:	9d04      	ldr	r5, [sp, #16]
 800be74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be76:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800be78:	e737      	b.n	800bcea <_dtoa_r+0x75a>
 800be7a:	9a04      	ldr	r2, [sp, #16]
 800be7c:	e764      	b.n	800bd48 <_dtoa_r+0x7b8>
 800be7e:	2500      	movs	r5, #0
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	9a04      	ldr	r2, [sp, #16]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	9310      	str	r3, [sp, #64]	; 0x40
 800be88:	3303      	adds	r3, #3
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	18d3      	adds	r3, r2, r3
 800be8e:	6858      	ldr	r0, [r3, #4]
 800be90:	f000 fd8a 	bl	800c9a8 <__hi0bits>
 800be94:	2320      	movs	r3, #32
 800be96:	1a18      	subs	r0, r3, r0
 800be98:	e785      	b.n	800bda6 <_dtoa_r+0x816>
 800be9a:	2b04      	cmp	r3, #4
 800be9c:	d095      	beq.n	800bdca <_dtoa_r+0x83a>
 800be9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea0:	331c      	adds	r3, #28
 800bea2:	18d2      	adds	r2, r2, r3
 800bea4:	920a      	str	r2, [sp, #40]	; 0x28
 800bea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bea8:	18e4      	adds	r4, r4, r3
 800beaa:	18d3      	adds	r3, r2, r3
 800beac:	e78c      	b.n	800bdc8 <_dtoa_r+0x838>
 800beae:	0003      	movs	r3, r0
 800beb0:	e7f5      	b.n	800be9e <_dtoa_r+0x90e>
 800beb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dc3d      	bgt.n	800bf34 <_dtoa_r+0x9a4>
 800beb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800beba:	2b02      	cmp	r3, #2
 800bebc:	dd3a      	ble.n	800bf34 <_dtoa_r+0x9a4>
 800bebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec0:	930c      	str	r3, [sp, #48]	; 0x30
 800bec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10c      	bne.n	800bee2 <_dtoa_r+0x952>
 800bec8:	9904      	ldr	r1, [sp, #16]
 800beca:	2205      	movs	r2, #5
 800becc:	9802      	ldr	r0, [sp, #8]
 800bece:	f000 fcef 	bl	800c8b0 <__multadd>
 800bed2:	9004      	str	r0, [sp, #16]
 800bed4:	0001      	movs	r1, r0
 800bed6:	9803      	ldr	r0, [sp, #12]
 800bed8:	f000 feec 	bl	800ccb4 <__mcmp>
 800bedc:	2800      	cmp	r0, #0
 800bede:	dd00      	ble.n	800bee2 <_dtoa_r+0x952>
 800bee0:	e5af      	b.n	800ba42 <_dtoa_r+0x4b2>
 800bee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee4:	9d08      	ldr	r5, [sp, #32]
 800bee6:	43df      	mvns	r7, r3
 800bee8:	2300      	movs	r3, #0
 800beea:	9309      	str	r3, [sp, #36]	; 0x24
 800beec:	9904      	ldr	r1, [sp, #16]
 800beee:	9802      	ldr	r0, [sp, #8]
 800bef0:	f000 fcc5 	bl	800c87e <_Bfree>
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d100      	bne.n	800befa <_dtoa_r+0x96a>
 800bef8:	e69b      	b.n	800bc32 <_dtoa_r+0x6a2>
 800befa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <_dtoa_r+0x97c>
 800bf00:	42b3      	cmp	r3, r6
 800bf02:	d003      	beq.n	800bf0c <_dtoa_r+0x97c>
 800bf04:	0019      	movs	r1, r3
 800bf06:	9802      	ldr	r0, [sp, #8]
 800bf08:	f000 fcb9 	bl	800c87e <_Bfree>
 800bf0c:	0031      	movs	r1, r6
 800bf0e:	9802      	ldr	r0, [sp, #8]
 800bf10:	f000 fcb5 	bl	800c87e <_Bfree>
 800bf14:	e68d      	b.n	800bc32 <_dtoa_r+0x6a2>
 800bf16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	001e      	movs	r6, r3
 800bf1c:	e7e1      	b.n	800bee2 <_dtoa_r+0x952>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e7fa      	b.n	800bf18 <_dtoa_r+0x988>
 800bf22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf24:	0037      	movs	r7, r6
 800bf26:	9304      	str	r3, [sp, #16]
 800bf28:	001e      	movs	r6, r3
 800bf2a:	e58a      	b.n	800ba42 <_dtoa_r+0x4b2>
 800bf2c:	40240000 	.word	0x40240000
 800bf30:	00000433 	.word	0x00000433
 800bf34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d100      	bne.n	800bf3c <_dtoa_r+0x9ac>
 800bf3a:	e0b2      	b.n	800c0a2 <_dtoa_r+0xb12>
 800bf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	dd05      	ble.n	800bf50 <_dtoa_r+0x9c0>
 800bf44:	0031      	movs	r1, r6
 800bf46:	0022      	movs	r2, r4
 800bf48:	9802      	ldr	r0, [sp, #8]
 800bf4a:	f000 fe61 	bl	800cc10 <__lshift>
 800bf4e:	0006      	movs	r6, r0
 800bf50:	0030      	movs	r0, r6
 800bf52:	2d00      	cmp	r5, #0
 800bf54:	d011      	beq.n	800bf7a <_dtoa_r+0x9ea>
 800bf56:	6871      	ldr	r1, [r6, #4]
 800bf58:	9802      	ldr	r0, [sp, #8]
 800bf5a:	f000 fc58 	bl	800c80e <_Balloc>
 800bf5e:	0031      	movs	r1, r6
 800bf60:	0004      	movs	r4, r0
 800bf62:	6933      	ldr	r3, [r6, #16]
 800bf64:	310c      	adds	r1, #12
 800bf66:	1c9a      	adds	r2, r3, #2
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	300c      	adds	r0, #12
 800bf6c:	f7fd fbca 	bl	8009704 <memcpy>
 800bf70:	2201      	movs	r2, #1
 800bf72:	0021      	movs	r1, r4
 800bf74:	9802      	ldr	r0, [sp, #8]
 800bf76:	f000 fe4b 	bl	800cc10 <__lshift>
 800bf7a:	9609      	str	r6, [sp, #36]	; 0x24
 800bf7c:	0006      	movs	r6, r0
 800bf7e:	9b08      	ldr	r3, [sp, #32]
 800bf80:	930a      	str	r3, [sp, #40]	; 0x28
 800bf82:	9904      	ldr	r1, [sp, #16]
 800bf84:	9803      	ldr	r0, [sp, #12]
 800bf86:	f7ff fa7d 	bl	800b484 <quorem>
 800bf8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf8c:	900d      	str	r0, [sp, #52]	; 0x34
 800bf8e:	0004      	movs	r4, r0
 800bf90:	9803      	ldr	r0, [sp, #12]
 800bf92:	f000 fe8f 	bl	800ccb4 <__mcmp>
 800bf96:	0032      	movs	r2, r6
 800bf98:	9010      	str	r0, [sp, #64]	; 0x40
 800bf9a:	9904      	ldr	r1, [sp, #16]
 800bf9c:	9802      	ldr	r0, [sp, #8]
 800bf9e:	f000 fea3 	bl	800cce8 <__mdiff>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfa6:	68c3      	ldr	r3, [r0, #12]
 800bfa8:	3430      	adds	r4, #48	; 0x30
 800bfaa:	0005      	movs	r5, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d104      	bne.n	800bfba <_dtoa_r+0xa2a>
 800bfb0:	0001      	movs	r1, r0
 800bfb2:	9803      	ldr	r0, [sp, #12]
 800bfb4:	f000 fe7e 	bl	800ccb4 <__mcmp>
 800bfb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfba:	0029      	movs	r1, r5
 800bfbc:	9802      	ldr	r0, [sp, #8]
 800bfbe:	f000 fc5e 	bl	800c87e <_Bfree>
 800bfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	d10e      	bne.n	800bfe8 <_dtoa_r+0xa58>
 800bfca:	9a06      	ldr	r2, [sp, #24]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	4213      	tst	r3, r2
 800bfd0:	d10a      	bne.n	800bfe8 <_dtoa_r+0xa58>
 800bfd2:	2c39      	cmp	r4, #57	; 0x39
 800bfd4:	d026      	beq.n	800c024 <_dtoa_r+0xa94>
 800bfd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dd01      	ble.n	800bfe0 <_dtoa_r+0xa50>
 800bfdc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bfde:	3431      	adds	r4, #49	; 0x31
 800bfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe2:	1c5d      	adds	r5, r3, #1
 800bfe4:	701c      	strb	r4, [r3, #0]
 800bfe6:	e781      	b.n	800beec <_dtoa_r+0x95c>
 800bfe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	db07      	blt.n	800bffe <_dtoa_r+0xa6e>
 800bfee:	001d      	movs	r5, r3
 800bff0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bff2:	431d      	orrs	r5, r3
 800bff4:	d122      	bne.n	800c03c <_dtoa_r+0xaac>
 800bff6:	2301      	movs	r3, #1
 800bff8:	9a06      	ldr	r2, [sp, #24]
 800bffa:	4213      	tst	r3, r2
 800bffc:	d11e      	bne.n	800c03c <_dtoa_r+0xaac>
 800bffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c000:	2b00      	cmp	r3, #0
 800c002:	dded      	ble.n	800bfe0 <_dtoa_r+0xa50>
 800c004:	9903      	ldr	r1, [sp, #12]
 800c006:	2201      	movs	r2, #1
 800c008:	9802      	ldr	r0, [sp, #8]
 800c00a:	f000 fe01 	bl	800cc10 <__lshift>
 800c00e:	9904      	ldr	r1, [sp, #16]
 800c010:	9003      	str	r0, [sp, #12]
 800c012:	f000 fe4f 	bl	800ccb4 <__mcmp>
 800c016:	2800      	cmp	r0, #0
 800c018:	dc02      	bgt.n	800c020 <_dtoa_r+0xa90>
 800c01a:	d1e1      	bne.n	800bfe0 <_dtoa_r+0xa50>
 800c01c:	07e3      	lsls	r3, r4, #31
 800c01e:	d5df      	bpl.n	800bfe0 <_dtoa_r+0xa50>
 800c020:	2c39      	cmp	r4, #57	; 0x39
 800c022:	d1db      	bne.n	800bfdc <_dtoa_r+0xa4c>
 800c024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c028:	1c5d      	adds	r5, r3, #1
 800c02a:	2339      	movs	r3, #57	; 0x39
 800c02c:	7013      	strb	r3, [r2, #0]
 800c02e:	1e6b      	subs	r3, r5, #1
 800c030:	781a      	ldrb	r2, [r3, #0]
 800c032:	2a39      	cmp	r2, #57	; 0x39
 800c034:	d067      	beq.n	800c106 <_dtoa_r+0xb76>
 800c036:	3201      	adds	r2, #1
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	e757      	b.n	800beec <_dtoa_r+0x95c>
 800c03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03e:	1c5d      	adds	r5, r3, #1
 800c040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c042:	2b00      	cmp	r3, #0
 800c044:	dd04      	ble.n	800c050 <_dtoa_r+0xac0>
 800c046:	2c39      	cmp	r4, #57	; 0x39
 800c048:	d0ec      	beq.n	800c024 <_dtoa_r+0xa94>
 800c04a:	3401      	adds	r4, #1
 800c04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c04e:	e7c9      	b.n	800bfe4 <_dtoa_r+0xa54>
 800c050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c054:	701c      	strb	r4, [r3, #0]
 800c056:	9b08      	ldr	r3, [sp, #32]
 800c058:	1aeb      	subs	r3, r5, r3
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d03e      	beq.n	800c0dc <_dtoa_r+0xb4c>
 800c05e:	2300      	movs	r3, #0
 800c060:	220a      	movs	r2, #10
 800c062:	9903      	ldr	r1, [sp, #12]
 800c064:	9802      	ldr	r0, [sp, #8]
 800c066:	f000 fc23 	bl	800c8b0 <__multadd>
 800c06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06c:	9003      	str	r0, [sp, #12]
 800c06e:	42b3      	cmp	r3, r6
 800c070:	d109      	bne.n	800c086 <_dtoa_r+0xaf6>
 800c072:	2300      	movs	r3, #0
 800c074:	220a      	movs	r2, #10
 800c076:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c078:	9802      	ldr	r0, [sp, #8]
 800c07a:	f000 fc19 	bl	800c8b0 <__multadd>
 800c07e:	9009      	str	r0, [sp, #36]	; 0x24
 800c080:	0006      	movs	r6, r0
 800c082:	950a      	str	r5, [sp, #40]	; 0x28
 800c084:	e77d      	b.n	800bf82 <_dtoa_r+0x9f2>
 800c086:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c088:	2300      	movs	r3, #0
 800c08a:	220a      	movs	r2, #10
 800c08c:	9802      	ldr	r0, [sp, #8]
 800c08e:	f000 fc0f 	bl	800c8b0 <__multadd>
 800c092:	2300      	movs	r3, #0
 800c094:	9009      	str	r0, [sp, #36]	; 0x24
 800c096:	220a      	movs	r2, #10
 800c098:	0031      	movs	r1, r6
 800c09a:	9802      	ldr	r0, [sp, #8]
 800c09c:	f000 fc08 	bl	800c8b0 <__multadd>
 800c0a0:	e7ee      	b.n	800c080 <_dtoa_r+0xaf0>
 800c0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a4:	930c      	str	r3, [sp, #48]	; 0x30
 800c0a6:	9b08      	ldr	r3, [sp, #32]
 800c0a8:	9306      	str	r3, [sp, #24]
 800c0aa:	9904      	ldr	r1, [sp, #16]
 800c0ac:	9803      	ldr	r0, [sp, #12]
 800c0ae:	f7ff f9e9 	bl	800b484 <quorem>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	3030      	adds	r0, #48	; 0x30
 800c0b6:	1c5d      	adds	r5, r3, #1
 800c0b8:	7018      	strb	r0, [r3, #0]
 800c0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0bc:	9b08      	ldr	r3, [sp, #32]
 800c0be:	0004      	movs	r4, r0
 800c0c0:	1aeb      	subs	r3, r5, r3
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	dd08      	ble.n	800c0d8 <_dtoa_r+0xb48>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	9903      	ldr	r1, [sp, #12]
 800c0cc:	9802      	ldr	r0, [sp, #8]
 800c0ce:	f000 fbef 	bl	800c8b0 <__multadd>
 800c0d2:	9506      	str	r5, [sp, #24]
 800c0d4:	9003      	str	r0, [sp, #12]
 800c0d6:	e7e8      	b.n	800c0aa <_dtoa_r+0xb1a>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9309      	str	r3, [sp, #36]	; 0x24
 800c0dc:	9903      	ldr	r1, [sp, #12]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	9802      	ldr	r0, [sp, #8]
 800c0e2:	f000 fd95 	bl	800cc10 <__lshift>
 800c0e6:	9904      	ldr	r1, [sp, #16]
 800c0e8:	9003      	str	r0, [sp, #12]
 800c0ea:	f000 fde3 	bl	800ccb4 <__mcmp>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	dc9d      	bgt.n	800c02e <_dtoa_r+0xa9e>
 800c0f2:	d101      	bne.n	800c0f8 <_dtoa_r+0xb68>
 800c0f4:	07e3      	lsls	r3, r4, #31
 800c0f6:	d49a      	bmi.n	800c02e <_dtoa_r+0xa9e>
 800c0f8:	1e6b      	subs	r3, r5, #1
 800c0fa:	781a      	ldrb	r2, [r3, #0]
 800c0fc:	2a30      	cmp	r2, #48	; 0x30
 800c0fe:	d000      	beq.n	800c102 <_dtoa_r+0xb72>
 800c100:	e6f4      	b.n	800beec <_dtoa_r+0x95c>
 800c102:	001d      	movs	r5, r3
 800c104:	e7f8      	b.n	800c0f8 <_dtoa_r+0xb68>
 800c106:	9a08      	ldr	r2, [sp, #32]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d103      	bne.n	800c114 <_dtoa_r+0xb84>
 800c10c:	2331      	movs	r3, #49	; 0x31
 800c10e:	3701      	adds	r7, #1
 800c110:	7013      	strb	r3, [r2, #0]
 800c112:	e6eb      	b.n	800beec <_dtoa_r+0x95c>
 800c114:	001d      	movs	r5, r3
 800c116:	e78a      	b.n	800c02e <_dtoa_r+0xa9e>
 800c118:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <_dtoa_r+0xbb8>)
 800c11a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <_dtoa_r+0xbbc>)
 800c120:	2a00      	cmp	r2, #0
 800c122:	d001      	beq.n	800c128 <_dtoa_r+0xb98>
 800c124:	f7ff fa77 	bl	800b616 <_dtoa_r+0x86>
 800c128:	f7ff fa77 	bl	800b61a <_dtoa_r+0x8a>
 800c12c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c12e:	2b01      	cmp	r3, #1
 800c130:	dc00      	bgt.n	800c134 <_dtoa_r+0xba4>
 800c132:	e621      	b.n	800bd78 <_dtoa_r+0x7e8>
 800c134:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c136:	2001      	movs	r0, #1
 800c138:	e635      	b.n	800bda6 <_dtoa_r+0x816>
 800c13a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dcb2      	bgt.n	800c0a6 <_dtoa_r+0xb16>
 800c140:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c142:	2b02      	cmp	r3, #2
 800c144:	ddaf      	ble.n	800c0a6 <_dtoa_r+0xb16>
 800c146:	e6bc      	b.n	800bec2 <_dtoa_r+0x932>
 800c148:	0800d860 	.word	0x0800d860
 800c14c:	0800d868 	.word	0x0800d868

0800c150 <rshift>:
 800c150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c152:	0004      	movs	r4, r0
 800c154:	6905      	ldr	r5, [r0, #16]
 800c156:	3414      	adds	r4, #20
 800c158:	114b      	asrs	r3, r1, #5
 800c15a:	0026      	movs	r6, r4
 800c15c:	429d      	cmp	r5, r3
 800c15e:	dd14      	ble.n	800c18a <rshift+0x3a>
 800c160:	221f      	movs	r2, #31
 800c162:	00ad      	lsls	r5, r5, #2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4011      	ands	r1, r2
 800c168:	1965      	adds	r5, r4, r5
 800c16a:	18e3      	adds	r3, r4, r3
 800c16c:	0022      	movs	r2, r4
 800c16e:	2900      	cmp	r1, #0
 800c170:	d01e      	beq.n	800c1b0 <rshift+0x60>
 800c172:	cb04      	ldmia	r3!, {r2}
 800c174:	2720      	movs	r7, #32
 800c176:	40ca      	lsrs	r2, r1
 800c178:	46a4      	mov	ip, r4
 800c17a:	1a7f      	subs	r7, r7, r1
 800c17c:	4666      	mov	r6, ip
 800c17e:	429d      	cmp	r5, r3
 800c180:	d80b      	bhi.n	800c19a <rshift+0x4a>
 800c182:	6032      	str	r2, [r6, #0]
 800c184:	2a00      	cmp	r2, #0
 800c186:	d000      	beq.n	800c18a <rshift+0x3a>
 800c188:	3604      	adds	r6, #4
 800c18a:	1b33      	subs	r3, r6, r4
 800c18c:	109b      	asrs	r3, r3, #2
 800c18e:	6103      	str	r3, [r0, #16]
 800c190:	42a6      	cmp	r6, r4
 800c192:	d101      	bne.n	800c198 <rshift+0x48>
 800c194:	2300      	movs	r3, #0
 800c196:	6143      	str	r3, [r0, #20]
 800c198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19a:	681e      	ldr	r6, [r3, #0]
 800c19c:	40be      	lsls	r6, r7
 800c19e:	4332      	orrs	r2, r6
 800c1a0:	4666      	mov	r6, ip
 800c1a2:	c604      	stmia	r6!, {r2}
 800c1a4:	cb04      	ldmia	r3!, {r2}
 800c1a6:	46b4      	mov	ip, r6
 800c1a8:	40ca      	lsrs	r2, r1
 800c1aa:	e7e7      	b.n	800c17c <rshift+0x2c>
 800c1ac:	cb02      	ldmia	r3!, {r1}
 800c1ae:	c202      	stmia	r2!, {r1}
 800c1b0:	0016      	movs	r6, r2
 800c1b2:	429d      	cmp	r5, r3
 800c1b4:	d8fa      	bhi.n	800c1ac <rshift+0x5c>
 800c1b6:	e7e8      	b.n	800c18a <rshift+0x3a>

0800c1b8 <__hexdig_fun>:
 800c1b8:	0003      	movs	r3, r0
 800c1ba:	3b30      	subs	r3, #48	; 0x30
 800c1bc:	2b09      	cmp	r3, #9
 800c1be:	d803      	bhi.n	800c1c8 <__hexdig_fun+0x10>
 800c1c0:	3820      	subs	r0, #32
 800c1c2:	b2c3      	uxtb	r3, r0
 800c1c4:	0018      	movs	r0, r3
 800c1c6:	4770      	bx	lr
 800c1c8:	0003      	movs	r3, r0
 800c1ca:	3b61      	subs	r3, #97	; 0x61
 800c1cc:	2b05      	cmp	r3, #5
 800c1ce:	d801      	bhi.n	800c1d4 <__hexdig_fun+0x1c>
 800c1d0:	3847      	subs	r0, #71	; 0x47
 800c1d2:	e7f6      	b.n	800c1c2 <__hexdig_fun+0xa>
 800c1d4:	0002      	movs	r2, r0
 800c1d6:	3a41      	subs	r2, #65	; 0x41
 800c1d8:	2300      	movs	r3, #0
 800c1da:	2a05      	cmp	r2, #5
 800c1dc:	d8f2      	bhi.n	800c1c4 <__hexdig_fun+0xc>
 800c1de:	3827      	subs	r0, #39	; 0x27
 800c1e0:	e7ef      	b.n	800c1c2 <__hexdig_fun+0xa>

0800c1e2 <__gethex>:
 800c1e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e4:	b08d      	sub	sp, #52	; 0x34
 800c1e6:	9005      	str	r0, [sp, #20]
 800c1e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c1ea:	9109      	str	r1, [sp, #36]	; 0x24
 800c1ec:	9202      	str	r2, [sp, #8]
 800c1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f0:	f000 fae2 	bl	800c7b8 <__localeconv_l>
 800c1f4:	6803      	ldr	r3, [r0, #0]
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	9307      	str	r3, [sp, #28]
 800c1fa:	f7f3 ff85 	bl	8000108 <strlen>
 800c1fe:	2202      	movs	r2, #2
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	4252      	negs	r2, r2
 800c204:	181b      	adds	r3, r3, r0
 800c206:	3b01      	subs	r3, #1
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	9004      	str	r0, [sp, #16]
 800c20c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c210:	6819      	ldr	r1, [r3, #0]
 800c212:	1c8b      	adds	r3, r1, #2
 800c214:	1a52      	subs	r2, r2, r1
 800c216:	18d1      	adds	r1, r2, r3
 800c218:	9301      	str	r3, [sp, #4]
 800c21a:	9108      	str	r1, [sp, #32]
 800c21c:	9901      	ldr	r1, [sp, #4]
 800c21e:	3301      	adds	r3, #1
 800c220:	7808      	ldrb	r0, [r1, #0]
 800c222:	2830      	cmp	r0, #48	; 0x30
 800c224:	d0f7      	beq.n	800c216 <__gethex+0x34>
 800c226:	f7ff ffc7 	bl	800c1b8 <__hexdig_fun>
 800c22a:	1e07      	subs	r7, r0, #0
 800c22c:	d000      	beq.n	800c230 <__gethex+0x4e>
 800c22e:	e06f      	b.n	800c310 <__gethex+0x12e>
 800c230:	9a04      	ldr	r2, [sp, #16]
 800c232:	9907      	ldr	r1, [sp, #28]
 800c234:	9801      	ldr	r0, [sp, #4]
 800c236:	f001 f84f 	bl	800d2d8 <strncmp>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d000      	beq.n	800c240 <__gethex+0x5e>
 800c23e:	e06d      	b.n	800c31c <__gethex+0x13a>
 800c240:	9b01      	ldr	r3, [sp, #4]
 800c242:	9a04      	ldr	r2, [sp, #16]
 800c244:	189c      	adds	r4, r3, r2
 800c246:	7820      	ldrb	r0, [r4, #0]
 800c248:	f7ff ffb6 	bl	800c1b8 <__hexdig_fun>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d069      	beq.n	800c324 <__gethex+0x142>
 800c250:	9401      	str	r4, [sp, #4]
 800c252:	9b01      	ldr	r3, [sp, #4]
 800c254:	7818      	ldrb	r0, [r3, #0]
 800c256:	2830      	cmp	r0, #48	; 0x30
 800c258:	d009      	beq.n	800c26e <__gethex+0x8c>
 800c25a:	f7ff ffad 	bl	800c1b8 <__hexdig_fun>
 800c25e:	4243      	negs	r3, r0
 800c260:	4143      	adcs	r3, r0
 800c262:	9303      	str	r3, [sp, #12]
 800c264:	2301      	movs	r3, #1
 800c266:	0026      	movs	r6, r4
 800c268:	9308      	str	r3, [sp, #32]
 800c26a:	9c01      	ldr	r4, [sp, #4]
 800c26c:	e004      	b.n	800c278 <__gethex+0x96>
 800c26e:	9b01      	ldr	r3, [sp, #4]
 800c270:	3301      	adds	r3, #1
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	e7ed      	b.n	800c252 <__gethex+0x70>
 800c276:	3401      	adds	r4, #1
 800c278:	7820      	ldrb	r0, [r4, #0]
 800c27a:	f7ff ff9d 	bl	800c1b8 <__hexdig_fun>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d1f9      	bne.n	800c276 <__gethex+0x94>
 800c282:	9a04      	ldr	r2, [sp, #16]
 800c284:	9907      	ldr	r1, [sp, #28]
 800c286:	0020      	movs	r0, r4
 800c288:	f001 f826 	bl	800d2d8 <strncmp>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d109      	bne.n	800c2a4 <__gethex+0xc2>
 800c290:	2e00      	cmp	r6, #0
 800c292:	d10a      	bne.n	800c2aa <__gethex+0xc8>
 800c294:	9b04      	ldr	r3, [sp, #16]
 800c296:	18e4      	adds	r4, r4, r3
 800c298:	0026      	movs	r6, r4
 800c29a:	7820      	ldrb	r0, [r4, #0]
 800c29c:	f7ff ff8c 	bl	800c1b8 <__hexdig_fun>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d139      	bne.n	800c318 <__gethex+0x136>
 800c2a4:	2700      	movs	r7, #0
 800c2a6:	42be      	cmp	r6, r7
 800c2a8:	d001      	beq.n	800c2ae <__gethex+0xcc>
 800c2aa:	1b37      	subs	r7, r6, r4
 800c2ac:	00bf      	lsls	r7, r7, #2
 800c2ae:	7823      	ldrb	r3, [r4, #0]
 800c2b0:	2b50      	cmp	r3, #80	; 0x50
 800c2b2:	d001      	beq.n	800c2b8 <__gethex+0xd6>
 800c2b4:	2b70      	cmp	r3, #112	; 0x70
 800c2b6:	d142      	bne.n	800c33e <__gethex+0x15c>
 800c2b8:	7863      	ldrb	r3, [r4, #1]
 800c2ba:	2b2b      	cmp	r3, #43	; 0x2b
 800c2bc:	d034      	beq.n	800c328 <__gethex+0x146>
 800c2be:	2b2d      	cmp	r3, #45	; 0x2d
 800c2c0:	d036      	beq.n	800c330 <__gethex+0x14e>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	1c66      	adds	r6, r4, #1
 800c2c6:	9306      	str	r3, [sp, #24]
 800c2c8:	7830      	ldrb	r0, [r6, #0]
 800c2ca:	f7ff ff75 	bl	800c1b8 <__hexdig_fun>
 800c2ce:	1e43      	subs	r3, r0, #1
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b18      	cmp	r3, #24
 800c2d4:	d833      	bhi.n	800c33e <__gethex+0x15c>
 800c2d6:	3810      	subs	r0, #16
 800c2d8:	0005      	movs	r5, r0
 800c2da:	3601      	adds	r6, #1
 800c2dc:	7830      	ldrb	r0, [r6, #0]
 800c2de:	f7ff ff6b 	bl	800c1b8 <__hexdig_fun>
 800c2e2:	1e43      	subs	r3, r0, #1
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b18      	cmp	r3, #24
 800c2e8:	d924      	bls.n	800c334 <__gethex+0x152>
 800c2ea:	9b06      	ldr	r3, [sp, #24]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d000      	beq.n	800c2f2 <__gethex+0x110>
 800c2f0:	426d      	negs	r5, r5
 800c2f2:	197f      	adds	r7, r7, r5
 800c2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f6:	601e      	str	r6, [r3, #0]
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d021      	beq.n	800c342 <__gethex+0x160>
 800c2fe:	9b08      	ldr	r3, [sp, #32]
 800c300:	2606      	movs	r6, #6
 800c302:	425a      	negs	r2, r3
 800c304:	4153      	adcs	r3, r2
 800c306:	425b      	negs	r3, r3
 800c308:	401e      	ands	r6, r3
 800c30a:	0030      	movs	r0, r6
 800c30c:	b00d      	add	sp, #52	; 0x34
 800c30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c310:	2300      	movs	r3, #0
 800c312:	9303      	str	r3, [sp, #12]
 800c314:	001e      	movs	r6, r3
 800c316:	e7a8      	b.n	800c26a <__gethex+0x88>
 800c318:	3401      	adds	r4, #1
 800c31a:	e7be      	b.n	800c29a <__gethex+0xb8>
 800c31c:	9c01      	ldr	r4, [sp, #4]
 800c31e:	2301      	movs	r3, #1
 800c320:	9303      	str	r3, [sp, #12]
 800c322:	e7c4      	b.n	800c2ae <__gethex+0xcc>
 800c324:	0007      	movs	r7, r0
 800c326:	e7fa      	b.n	800c31e <__gethex+0x13c>
 800c328:	2300      	movs	r3, #0
 800c32a:	9306      	str	r3, [sp, #24]
 800c32c:	1ca6      	adds	r6, r4, #2
 800c32e:	e7cb      	b.n	800c2c8 <__gethex+0xe6>
 800c330:	2301      	movs	r3, #1
 800c332:	e7fa      	b.n	800c32a <__gethex+0x148>
 800c334:	230a      	movs	r3, #10
 800c336:	435d      	muls	r5, r3
 800c338:	182d      	adds	r5, r5, r0
 800c33a:	3d10      	subs	r5, #16
 800c33c:	e7cd      	b.n	800c2da <__gethex+0xf8>
 800c33e:	0026      	movs	r6, r4
 800c340:	e7d8      	b.n	800c2f4 <__gethex+0x112>
 800c342:	9b01      	ldr	r3, [sp, #4]
 800c344:	9903      	ldr	r1, [sp, #12]
 800c346:	1ae3      	subs	r3, r4, r3
 800c348:	3b01      	subs	r3, #1
 800c34a:	2b07      	cmp	r3, #7
 800c34c:	dc47      	bgt.n	800c3de <__gethex+0x1fc>
 800c34e:	9805      	ldr	r0, [sp, #20]
 800c350:	f000 fa5d 	bl	800c80e <_Balloc>
 800c354:	0003      	movs	r3, r0
 800c356:	3314      	adds	r3, #20
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	9308      	str	r3, [sp, #32]
 800c35c:	2300      	movs	r3, #0
 800c35e:	0005      	movs	r5, r0
 800c360:	001e      	movs	r6, r3
 800c362:	9306      	str	r3, [sp, #24]
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	42a3      	cmp	r3, r4
 800c368:	d33c      	bcc.n	800c3e4 <__gethex+0x202>
 800c36a:	9c08      	ldr	r4, [sp, #32]
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	c440      	stmia	r4!, {r6}
 800c370:	1ae4      	subs	r4, r4, r3
 800c372:	10a4      	asrs	r4, r4, #2
 800c374:	612c      	str	r4, [r5, #16]
 800c376:	0030      	movs	r0, r6
 800c378:	f000 fb16 	bl	800c9a8 <__hi0bits>
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	0164      	lsls	r4, r4, #5
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	1a26      	subs	r6, r4, r0
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	429e      	cmp	r6, r3
 800c388:	dd5f      	ble.n	800c44a <__gethex+0x268>
 800c38a:	1af6      	subs	r6, r6, r3
 800c38c:	0031      	movs	r1, r6
 800c38e:	0028      	movs	r0, r5
 800c390:	f000 fe11 	bl	800cfb6 <__any_on>
 800c394:	1e04      	subs	r4, r0, #0
 800c396:	d00f      	beq.n	800c3b8 <__gethex+0x1d6>
 800c398:	2401      	movs	r4, #1
 800c39a:	211f      	movs	r1, #31
 800c39c:	0020      	movs	r0, r4
 800c39e:	1e73      	subs	r3, r6, #1
 800c3a0:	4019      	ands	r1, r3
 800c3a2:	4088      	lsls	r0, r1
 800c3a4:	0001      	movs	r1, r0
 800c3a6:	115a      	asrs	r2, r3, #5
 800c3a8:	9803      	ldr	r0, [sp, #12]
 800c3aa:	0092      	lsls	r2, r2, #2
 800c3ac:	5812      	ldr	r2, [r2, r0]
 800c3ae:	420a      	tst	r2, r1
 800c3b0:	d002      	beq.n	800c3b8 <__gethex+0x1d6>
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	dc41      	bgt.n	800c43a <__gethex+0x258>
 800c3b6:	2402      	movs	r4, #2
 800c3b8:	0031      	movs	r1, r6
 800c3ba:	0028      	movs	r0, r5
 800c3bc:	f7ff fec8 	bl	800c150 <rshift>
 800c3c0:	19bf      	adds	r7, r7, r6
 800c3c2:	9b02      	ldr	r3, [sp, #8]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	9304      	str	r3, [sp, #16]
 800c3c8:	42bb      	cmp	r3, r7
 800c3ca:	da4e      	bge.n	800c46a <__gethex+0x288>
 800c3cc:	0029      	movs	r1, r5
 800c3ce:	9805      	ldr	r0, [sp, #20]
 800c3d0:	f000 fa55 	bl	800c87e <_Bfree>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3d8:	26a3      	movs	r6, #163	; 0xa3
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	e795      	b.n	800c30a <__gethex+0x128>
 800c3de:	3101      	adds	r1, #1
 800c3e0:	105b      	asrs	r3, r3, #1
 800c3e2:	e7b2      	b.n	800c34a <__gethex+0x168>
 800c3e4:	1e63      	subs	r3, r4, #1
 800c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d015      	beq.n	800c41c <__gethex+0x23a>
 800c3f0:	9b06      	ldr	r3, [sp, #24]
 800c3f2:	2b20      	cmp	r3, #32
 800c3f4:	d105      	bne.n	800c402 <__gethex+0x220>
 800c3f6:	9b08      	ldr	r3, [sp, #32]
 800c3f8:	601e      	str	r6, [r3, #0]
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	9308      	str	r3, [sp, #32]
 800c400:	9606      	str	r6, [sp, #24]
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	7818      	ldrb	r0, [r3, #0]
 800c406:	f7ff fed7 	bl	800c1b8 <__hexdig_fun>
 800c40a:	230f      	movs	r3, #15
 800c40c:	4018      	ands	r0, r3
 800c40e:	9b06      	ldr	r3, [sp, #24]
 800c410:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c412:	4098      	lsls	r0, r3
 800c414:	3304      	adds	r3, #4
 800c416:	4306      	orrs	r6, r0
 800c418:	9306      	str	r3, [sp, #24]
 800c41a:	e7a3      	b.n	800c364 <__gethex+0x182>
 800c41c:	2301      	movs	r3, #1
 800c41e:	9a04      	ldr	r2, [sp, #16]
 800c420:	1a9c      	subs	r4, r3, r2
 800c422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c424:	191c      	adds	r4, r3, r4
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	429c      	cmp	r4, r3
 800c42a:	d3e1      	bcc.n	800c3f0 <__gethex+0x20e>
 800c42c:	9907      	ldr	r1, [sp, #28]
 800c42e:	0020      	movs	r0, r4
 800c430:	f000 ff52 	bl	800d2d8 <strncmp>
 800c434:	2800      	cmp	r0, #0
 800c436:	d1db      	bne.n	800c3f0 <__gethex+0x20e>
 800c438:	e794      	b.n	800c364 <__gethex+0x182>
 800c43a:	1eb1      	subs	r1, r6, #2
 800c43c:	0028      	movs	r0, r5
 800c43e:	f000 fdba 	bl	800cfb6 <__any_on>
 800c442:	2800      	cmp	r0, #0
 800c444:	d0b7      	beq.n	800c3b6 <__gethex+0x1d4>
 800c446:	2403      	movs	r4, #3
 800c448:	e7b6      	b.n	800c3b8 <__gethex+0x1d6>
 800c44a:	9b01      	ldr	r3, [sp, #4]
 800c44c:	2400      	movs	r4, #0
 800c44e:	429e      	cmp	r6, r3
 800c450:	dab7      	bge.n	800c3c2 <__gethex+0x1e0>
 800c452:	1b9e      	subs	r6, r3, r6
 800c454:	0029      	movs	r1, r5
 800c456:	0032      	movs	r2, r6
 800c458:	9805      	ldr	r0, [sp, #20]
 800c45a:	f000 fbd9 	bl	800cc10 <__lshift>
 800c45e:	0003      	movs	r3, r0
 800c460:	3314      	adds	r3, #20
 800c462:	0005      	movs	r5, r0
 800c464:	1bbf      	subs	r7, r7, r6
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	e7ab      	b.n	800c3c2 <__gethex+0x1e0>
 800c46a:	9b02      	ldr	r3, [sp, #8]
 800c46c:	685e      	ldr	r6, [r3, #4]
 800c46e:	42be      	cmp	r6, r7
 800c470:	dd6b      	ble.n	800c54a <__gethex+0x368>
 800c472:	9b01      	ldr	r3, [sp, #4]
 800c474:	1bf6      	subs	r6, r6, r7
 800c476:	42b3      	cmp	r3, r6
 800c478:	dc32      	bgt.n	800c4e0 <__gethex+0x2fe>
 800c47a:	9b02      	ldr	r3, [sp, #8]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d026      	beq.n	800c4d0 <__gethex+0x2ee>
 800c482:	2b03      	cmp	r3, #3
 800c484:	d028      	beq.n	800c4d8 <__gethex+0x2f6>
 800c486:	2b01      	cmp	r3, #1
 800c488:	d119      	bne.n	800c4be <__gethex+0x2dc>
 800c48a:	9b01      	ldr	r3, [sp, #4]
 800c48c:	42b3      	cmp	r3, r6
 800c48e:	d116      	bne.n	800c4be <__gethex+0x2dc>
 800c490:	2b01      	cmp	r3, #1
 800c492:	dc0d      	bgt.n	800c4b0 <__gethex+0x2ce>
 800c494:	9b02      	ldr	r3, [sp, #8]
 800c496:	2662      	movs	r6, #98	; 0x62
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	9a01      	ldr	r2, [sp, #4]
 800c49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	9a03      	ldr	r2, [sp, #12]
 800c4a6:	612b      	str	r3, [r5, #16]
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4ac:	601d      	str	r5, [r3, #0]
 800c4ae:	e72c      	b.n	800c30a <__gethex+0x128>
 800c4b0:	9901      	ldr	r1, [sp, #4]
 800c4b2:	0028      	movs	r0, r5
 800c4b4:	3901      	subs	r1, #1
 800c4b6:	f000 fd7e 	bl	800cfb6 <__any_on>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d1ea      	bne.n	800c494 <__gethex+0x2b2>
 800c4be:	0029      	movs	r1, r5
 800c4c0:	9805      	ldr	r0, [sp, #20]
 800c4c2:	f000 f9dc 	bl	800c87e <_Bfree>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c4ca:	2650      	movs	r6, #80	; 0x50
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	e71c      	b.n	800c30a <__gethex+0x128>
 800c4d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0de      	beq.n	800c494 <__gethex+0x2b2>
 800c4d6:	e7f2      	b.n	800c4be <__gethex+0x2dc>
 800c4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1da      	bne.n	800c494 <__gethex+0x2b2>
 800c4de:	e7ee      	b.n	800c4be <__gethex+0x2dc>
 800c4e0:	1e77      	subs	r7, r6, #1
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	d12f      	bne.n	800c546 <__gethex+0x364>
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d004      	beq.n	800c4f4 <__gethex+0x312>
 800c4ea:	0039      	movs	r1, r7
 800c4ec:	0028      	movs	r0, r5
 800c4ee:	f000 fd62 	bl	800cfb6 <__any_on>
 800c4f2:	0004      	movs	r4, r0
 800c4f4:	231f      	movs	r3, #31
 800c4f6:	117a      	asrs	r2, r7, #5
 800c4f8:	401f      	ands	r7, r3
 800c4fa:	3b1e      	subs	r3, #30
 800c4fc:	40bb      	lsls	r3, r7
 800c4fe:	9903      	ldr	r1, [sp, #12]
 800c500:	0092      	lsls	r2, r2, #2
 800c502:	5852      	ldr	r2, [r2, r1]
 800c504:	421a      	tst	r2, r3
 800c506:	d001      	beq.n	800c50c <__gethex+0x32a>
 800c508:	2302      	movs	r3, #2
 800c50a:	431c      	orrs	r4, r3
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	0031      	movs	r1, r6
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	2602      	movs	r6, #2
 800c514:	0028      	movs	r0, r5
 800c516:	9301      	str	r3, [sp, #4]
 800c518:	f7ff fe1a 	bl	800c150 <rshift>
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	685f      	ldr	r7, [r3, #4]
 800c520:	2c00      	cmp	r4, #0
 800c522:	d040      	beq.n	800c5a6 <__gethex+0x3c4>
 800c524:	9b02      	ldr	r3, [sp, #8]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d010      	beq.n	800c54e <__gethex+0x36c>
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d012      	beq.n	800c556 <__gethex+0x374>
 800c530:	2b01      	cmp	r3, #1
 800c532:	d106      	bne.n	800c542 <__gethex+0x360>
 800c534:	07a2      	lsls	r2, r4, #30
 800c536:	d504      	bpl.n	800c542 <__gethex+0x360>
 800c538:	9a03      	ldr	r2, [sp, #12]
 800c53a:	6812      	ldr	r2, [r2, #0]
 800c53c:	4314      	orrs	r4, r2
 800c53e:	421c      	tst	r4, r3
 800c540:	d10c      	bne.n	800c55c <__gethex+0x37a>
 800c542:	2310      	movs	r3, #16
 800c544:	e02e      	b.n	800c5a4 <__gethex+0x3c2>
 800c546:	2401      	movs	r4, #1
 800c548:	e7d4      	b.n	800c4f4 <__gethex+0x312>
 800c54a:	2601      	movs	r6, #1
 800c54c:	e7e8      	b.n	800c520 <__gethex+0x33e>
 800c54e:	2301      	movs	r3, #1
 800c550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c552:	1a9b      	subs	r3, r3, r2
 800c554:	9313      	str	r3, [sp, #76]	; 0x4c
 800c556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0f2      	beq.n	800c542 <__gethex+0x360>
 800c55c:	692c      	ldr	r4, [r5, #16]
 800c55e:	00a3      	lsls	r3, r4, #2
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	002b      	movs	r3, r5
 800c564:	00a2      	lsls	r2, r4, #2
 800c566:	3314      	adds	r3, #20
 800c568:	1899      	adds	r1, r3, r2
 800c56a:	2200      	movs	r2, #0
 800c56c:	4694      	mov	ip, r2
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	1c50      	adds	r0, r2, #1
 800c572:	d01d      	beq.n	800c5b0 <__gethex+0x3ce>
 800c574:	3201      	adds	r2, #1
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	002b      	movs	r3, r5
 800c57a:	3314      	adds	r3, #20
 800c57c:	2e02      	cmp	r6, #2
 800c57e:	d13a      	bne.n	800c5f6 <__gethex+0x414>
 800c580:	9a02      	ldr	r2, [sp, #8]
 800c582:	9901      	ldr	r1, [sp, #4]
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	3a01      	subs	r2, #1
 800c588:	428a      	cmp	r2, r1
 800c58a:	d10a      	bne.n	800c5a2 <__gethex+0x3c0>
 800c58c:	114a      	asrs	r2, r1, #5
 800c58e:	211f      	movs	r1, #31
 800c590:	9801      	ldr	r0, [sp, #4]
 800c592:	0092      	lsls	r2, r2, #2
 800c594:	4001      	ands	r1, r0
 800c596:	2001      	movs	r0, #1
 800c598:	0004      	movs	r4, r0
 800c59a:	408c      	lsls	r4, r1
 800c59c:	58d3      	ldr	r3, [r2, r3]
 800c59e:	4223      	tst	r3, r4
 800c5a0:	d148      	bne.n	800c634 <__gethex+0x452>
 800c5a2:	2320      	movs	r3, #32
 800c5a4:	431e      	orrs	r6, r3
 800c5a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5a8:	601d      	str	r5, [r3, #0]
 800c5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ac:	601f      	str	r7, [r3, #0]
 800c5ae:	e6ac      	b.n	800c30a <__gethex+0x128>
 800c5b0:	4662      	mov	r2, ip
 800c5b2:	c304      	stmia	r3!, {r2}
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	d8da      	bhi.n	800c56e <__gethex+0x38c>
 800c5b8:	68ab      	ldr	r3, [r5, #8]
 800c5ba:	429c      	cmp	r4, r3
 800c5bc:	db12      	blt.n	800c5e4 <__gethex+0x402>
 800c5be:	686b      	ldr	r3, [r5, #4]
 800c5c0:	9805      	ldr	r0, [sp, #20]
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	f000 f923 	bl	800c80e <_Balloc>
 800c5c8:	0029      	movs	r1, r5
 800c5ca:	692b      	ldr	r3, [r5, #16]
 800c5cc:	9003      	str	r0, [sp, #12]
 800c5ce:	1c9a      	adds	r2, r3, #2
 800c5d0:	0092      	lsls	r2, r2, #2
 800c5d2:	310c      	adds	r1, #12
 800c5d4:	300c      	adds	r0, #12
 800c5d6:	f7fd f895 	bl	8009704 <memcpy>
 800c5da:	0029      	movs	r1, r5
 800c5dc:	9805      	ldr	r0, [sp, #20]
 800c5de:	f000 f94e 	bl	800c87e <_Bfree>
 800c5e2:	9d03      	ldr	r5, [sp, #12]
 800c5e4:	692b      	ldr	r3, [r5, #16]
 800c5e6:	1c5a      	adds	r2, r3, #1
 800c5e8:	612a      	str	r2, [r5, #16]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	18eb      	adds	r3, r5, r3
 800c5f2:	605a      	str	r2, [r3, #4]
 800c5f4:	e7c0      	b.n	800c578 <__gethex+0x396>
 800c5f6:	692a      	ldr	r2, [r5, #16]
 800c5f8:	42a2      	cmp	r2, r4
 800c5fa:	dd0a      	ble.n	800c612 <__gethex+0x430>
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	0028      	movs	r0, r5
 800c600:	f7ff fda6 	bl	800c150 <rshift>
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	3701      	adds	r7, #1
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2601      	movs	r6, #1
 800c60c:	42bb      	cmp	r3, r7
 800c60e:	dac8      	bge.n	800c5a2 <__gethex+0x3c0>
 800c610:	e6dc      	b.n	800c3cc <__gethex+0x1ea>
 800c612:	241f      	movs	r4, #31
 800c614:	9a01      	ldr	r2, [sp, #4]
 800c616:	2601      	movs	r6, #1
 800c618:	4022      	ands	r2, r4
 800c61a:	1e14      	subs	r4, r2, #0
 800c61c:	d0c1      	beq.n	800c5a2 <__gethex+0x3c0>
 800c61e:	9a04      	ldr	r2, [sp, #16]
 800c620:	189b      	adds	r3, r3, r2
 800c622:	3b04      	subs	r3, #4
 800c624:	6818      	ldr	r0, [r3, #0]
 800c626:	f000 f9bf 	bl	800c9a8 <__hi0bits>
 800c62a:	2120      	movs	r1, #32
 800c62c:	1b0c      	subs	r4, r1, r4
 800c62e:	42a0      	cmp	r0, r4
 800c630:	dbe4      	blt.n	800c5fc <__gethex+0x41a>
 800c632:	e7b6      	b.n	800c5a2 <__gethex+0x3c0>
 800c634:	0006      	movs	r6, r0
 800c636:	e7b4      	b.n	800c5a2 <__gethex+0x3c0>

0800c638 <L_shift>:
 800c638:	2308      	movs	r3, #8
 800c63a:	b570      	push	{r4, r5, r6, lr}
 800c63c:	2520      	movs	r5, #32
 800c63e:	1a9a      	subs	r2, r3, r2
 800c640:	0092      	lsls	r2, r2, #2
 800c642:	1aad      	subs	r5, r5, r2
 800c644:	6843      	ldr	r3, [r0, #4]
 800c646:	6806      	ldr	r6, [r0, #0]
 800c648:	001c      	movs	r4, r3
 800c64a:	40ac      	lsls	r4, r5
 800c64c:	40d3      	lsrs	r3, r2
 800c64e:	4334      	orrs	r4, r6
 800c650:	6004      	str	r4, [r0, #0]
 800c652:	6043      	str	r3, [r0, #4]
 800c654:	3004      	adds	r0, #4
 800c656:	4288      	cmp	r0, r1
 800c658:	d3f4      	bcc.n	800c644 <L_shift+0xc>
 800c65a:	bd70      	pop	{r4, r5, r6, pc}

0800c65c <__match>:
 800c65c:	b530      	push	{r4, r5, lr}
 800c65e:	6803      	ldr	r3, [r0, #0]
 800c660:	780c      	ldrb	r4, [r1, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	2c00      	cmp	r4, #0
 800c666:	d102      	bne.n	800c66e <__match+0x12>
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	2001      	movs	r0, #1
 800c66c:	bd30      	pop	{r4, r5, pc}
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	0015      	movs	r5, r2
 800c672:	3d41      	subs	r5, #65	; 0x41
 800c674:	2d19      	cmp	r5, #25
 800c676:	d800      	bhi.n	800c67a <__match+0x1e>
 800c678:	3220      	adds	r2, #32
 800c67a:	3101      	adds	r1, #1
 800c67c:	42a2      	cmp	r2, r4
 800c67e:	d0ef      	beq.n	800c660 <__match+0x4>
 800c680:	2000      	movs	r0, #0
 800c682:	e7f3      	b.n	800c66c <__match+0x10>

0800c684 <__hexnan>:
 800c684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c686:	b08b      	sub	sp, #44	; 0x2c
 800c688:	9201      	str	r2, [sp, #4]
 800c68a:	680a      	ldr	r2, [r1, #0]
 800c68c:	9901      	ldr	r1, [sp, #4]
 800c68e:	1153      	asrs	r3, r2, #5
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	18cb      	adds	r3, r1, r3
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	231f      	movs	r3, #31
 800c698:	401a      	ands	r2, r3
 800c69a:	9008      	str	r0, [sp, #32]
 800c69c:	9206      	str	r2, [sp, #24]
 800c69e:	d002      	beq.n	800c6a6 <__hexnan+0x22>
 800c6a0:	9b04      	ldr	r3, [sp, #16]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9b04      	ldr	r3, [sp, #16]
 800c6a8:	2500      	movs	r5, #0
 800c6aa:	1f1e      	subs	r6, r3, #4
 800c6ac:	0037      	movs	r7, r6
 800c6ae:	0034      	movs	r4, r6
 800c6b0:	9b08      	ldr	r3, [sp, #32]
 800c6b2:	6035      	str	r5, [r6, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9507      	str	r5, [sp, #28]
 800c6b8:	9305      	str	r3, [sp, #20]
 800c6ba:	9502      	str	r5, [sp, #8]
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c2:	9b05      	ldr	r3, [sp, #20]
 800c6c4:	785b      	ldrb	r3, [r3, #1]
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d028      	beq.n	800c71e <__hexnan+0x9a>
 800c6cc:	9803      	ldr	r0, [sp, #12]
 800c6ce:	f7ff fd73 	bl	800c1b8 <__hexdig_fun>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d145      	bne.n	800c762 <__hexnan+0xde>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	2b20      	cmp	r3, #32
 800c6da:	d819      	bhi.n	800c710 <__hexnan+0x8c>
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	9a07      	ldr	r2, [sp, #28]
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	dd12      	ble.n	800c70a <__hexnan+0x86>
 800c6e4:	42bc      	cmp	r4, r7
 800c6e6:	d206      	bcs.n	800c6f6 <__hexnan+0x72>
 800c6e8:	2d07      	cmp	r5, #7
 800c6ea:	dc04      	bgt.n	800c6f6 <__hexnan+0x72>
 800c6ec:	002a      	movs	r2, r5
 800c6ee:	0039      	movs	r1, r7
 800c6f0:	0020      	movs	r0, r4
 800c6f2:	f7ff ffa1 	bl	800c638 <L_shift>
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	2508      	movs	r5, #8
 800c6fa:	429c      	cmp	r4, r3
 800c6fc:	d905      	bls.n	800c70a <__hexnan+0x86>
 800c6fe:	1f27      	subs	r7, r4, #4
 800c700:	2500      	movs	r5, #0
 800c702:	003c      	movs	r4, r7
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	603d      	str	r5, [r7, #0]
 800c708:	9307      	str	r3, [sp, #28]
 800c70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	e7d5      	b.n	800c6bc <__hexnan+0x38>
 800c710:	9b03      	ldr	r3, [sp, #12]
 800c712:	2b29      	cmp	r3, #41	; 0x29
 800c714:	d14a      	bne.n	800c7ac <__hexnan+0x128>
 800c716:	9b05      	ldr	r3, [sp, #20]
 800c718:	9a08      	ldr	r2, [sp, #32]
 800c71a:	3302      	adds	r3, #2
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	9b02      	ldr	r3, [sp, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d043      	beq.n	800c7ac <__hexnan+0x128>
 800c724:	42bc      	cmp	r4, r7
 800c726:	d206      	bcs.n	800c736 <__hexnan+0xb2>
 800c728:	2d07      	cmp	r5, #7
 800c72a:	dc04      	bgt.n	800c736 <__hexnan+0xb2>
 800c72c:	002a      	movs	r2, r5
 800c72e:	0039      	movs	r1, r7
 800c730:	0020      	movs	r0, r4
 800c732:	f7ff ff81 	bl	800c638 <L_shift>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	429c      	cmp	r4, r3
 800c73a:	d926      	bls.n	800c78a <__hexnan+0x106>
 800c73c:	cc04      	ldmia	r4!, {r2}
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	3304      	adds	r3, #4
 800c742:	42a6      	cmp	r6, r4
 800c744:	d2fa      	bcs.n	800c73c <__hexnan+0xb8>
 800c746:	2200      	movs	r2, #0
 800c748:	c304      	stmia	r3!, {r2}
 800c74a:	429e      	cmp	r6, r3
 800c74c:	d2fc      	bcs.n	800c748 <__hexnan+0xc4>
 800c74e:	6833      	ldr	r3, [r6, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d104      	bne.n	800c75e <__hexnan+0xda>
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	429e      	cmp	r6, r3
 800c758:	d126      	bne.n	800c7a8 <__hexnan+0x124>
 800c75a:	2301      	movs	r3, #1
 800c75c:	6033      	str	r3, [r6, #0]
 800c75e:	2005      	movs	r0, #5
 800c760:	e025      	b.n	800c7ae <__hexnan+0x12a>
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	3501      	adds	r5, #1
 800c766:	3301      	adds	r3, #1
 800c768:	9302      	str	r3, [sp, #8]
 800c76a:	2d08      	cmp	r5, #8
 800c76c:	dd06      	ble.n	800c77c <__hexnan+0xf8>
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	429c      	cmp	r4, r3
 800c772:	d9ca      	bls.n	800c70a <__hexnan+0x86>
 800c774:	2300      	movs	r3, #0
 800c776:	2501      	movs	r5, #1
 800c778:	3c04      	subs	r4, #4
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	220f      	movs	r2, #15
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	4010      	ands	r0, r2
 800c782:	011b      	lsls	r3, r3, #4
 800c784:	4318      	orrs	r0, r3
 800c786:	6020      	str	r0, [r4, #0]
 800c788:	e7bf      	b.n	800c70a <__hexnan+0x86>
 800c78a:	9b06      	ldr	r3, [sp, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0de      	beq.n	800c74e <__hexnan+0xca>
 800c790:	2120      	movs	r1, #32
 800c792:	9a06      	ldr	r2, [sp, #24]
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	1a89      	subs	r1, r1, r2
 800c798:	2201      	movs	r2, #1
 800c79a:	4252      	negs	r2, r2
 800c79c:	40ca      	lsrs	r2, r1
 800c79e:	3b04      	subs	r3, #4
 800c7a0:	6819      	ldr	r1, [r3, #0]
 800c7a2:	400a      	ands	r2, r1
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	e7d2      	b.n	800c74e <__hexnan+0xca>
 800c7a8:	3e04      	subs	r6, #4
 800c7aa:	e7d0      	b.n	800c74e <__hexnan+0xca>
 800c7ac:	2004      	movs	r0, #4
 800c7ae:	b00b      	add	sp, #44	; 0x2c
 800c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7b2 <__locale_ctype_ptr_l>:
 800c7b2:	30ec      	adds	r0, #236	; 0xec
 800c7b4:	6800      	ldr	r0, [r0, #0]
 800c7b6:	4770      	bx	lr

0800c7b8 <__localeconv_l>:
 800c7b8:	30f0      	adds	r0, #240	; 0xf0
 800c7ba:	4770      	bx	lr

0800c7bc <_localeconv_r>:
 800c7bc:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <_localeconv_r+0x10>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6a18      	ldr	r0, [r3, #32]
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d100      	bne.n	800c7c8 <_localeconv_r+0xc>
 800c7c6:	4802      	ldr	r0, [pc, #8]	; (800c7d0 <_localeconv_r+0x14>)
 800c7c8:	30f0      	adds	r0, #240	; 0xf0
 800c7ca:	4770      	bx	lr
 800c7cc:	2000001c 	.word	0x2000001c
 800c7d0:	20000080 	.word	0x20000080

0800c7d4 <__ascii_mbtowc>:
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	d100      	bne.n	800c7dc <__ascii_mbtowc+0x8>
 800c7da:	a901      	add	r1, sp, #4
 800c7dc:	1e10      	subs	r0, r2, #0
 800c7de:	d006      	beq.n	800c7ee <__ascii_mbtowc+0x1a>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d006      	beq.n	800c7f2 <__ascii_mbtowc+0x1e>
 800c7e4:	7813      	ldrb	r3, [r2, #0]
 800c7e6:	600b      	str	r3, [r1, #0]
 800c7e8:	7810      	ldrb	r0, [r2, #0]
 800c7ea:	1e43      	subs	r3, r0, #1
 800c7ec:	4198      	sbcs	r0, r3
 800c7ee:	b002      	add	sp, #8
 800c7f0:	4770      	bx	lr
 800c7f2:	2002      	movs	r0, #2
 800c7f4:	4240      	negs	r0, r0
 800c7f6:	e7fa      	b.n	800c7ee <__ascii_mbtowc+0x1a>

0800c7f8 <memchr>:
 800c7f8:	b2c9      	uxtb	r1, r1
 800c7fa:	1882      	adds	r2, r0, r2
 800c7fc:	4290      	cmp	r0, r2
 800c7fe:	d101      	bne.n	800c804 <memchr+0xc>
 800c800:	2000      	movs	r0, #0
 800c802:	4770      	bx	lr
 800c804:	7803      	ldrb	r3, [r0, #0]
 800c806:	428b      	cmp	r3, r1
 800c808:	d0fb      	beq.n	800c802 <memchr+0xa>
 800c80a:	3001      	adds	r0, #1
 800c80c:	e7f6      	b.n	800c7fc <memchr+0x4>

0800c80e <_Balloc>:
 800c80e:	b570      	push	{r4, r5, r6, lr}
 800c810:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c812:	0004      	movs	r4, r0
 800c814:	000d      	movs	r5, r1
 800c816:	2e00      	cmp	r6, #0
 800c818:	d107      	bne.n	800c82a <_Balloc+0x1c>
 800c81a:	2010      	movs	r0, #16
 800c81c:	f7fc ff68 	bl	80096f0 <malloc>
 800c820:	6260      	str	r0, [r4, #36]	; 0x24
 800c822:	6046      	str	r6, [r0, #4]
 800c824:	6086      	str	r6, [r0, #8]
 800c826:	6006      	str	r6, [r0, #0]
 800c828:	60c6      	str	r6, [r0, #12]
 800c82a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c82c:	68f3      	ldr	r3, [r6, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d013      	beq.n	800c85a <_Balloc+0x4c>
 800c832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c834:	00aa      	lsls	r2, r5, #2
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	189b      	adds	r3, r3, r2
 800c83a:	6818      	ldr	r0, [r3, #0]
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d118      	bne.n	800c872 <_Balloc+0x64>
 800c840:	2101      	movs	r1, #1
 800c842:	000e      	movs	r6, r1
 800c844:	40ae      	lsls	r6, r5
 800c846:	1d72      	adds	r2, r6, #5
 800c848:	0092      	lsls	r2, r2, #2
 800c84a:	0020      	movs	r0, r4
 800c84c:	f000 fbd5 	bl	800cffa <_calloc_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	d00c      	beq.n	800c86e <_Balloc+0x60>
 800c854:	6045      	str	r5, [r0, #4]
 800c856:	6086      	str	r6, [r0, #8]
 800c858:	e00d      	b.n	800c876 <_Balloc+0x68>
 800c85a:	2221      	movs	r2, #33	; 0x21
 800c85c:	2104      	movs	r1, #4
 800c85e:	0020      	movs	r0, r4
 800c860:	f000 fbcb 	bl	800cffa <_calloc_r>
 800c864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c866:	60f0      	str	r0, [r6, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1e1      	bne.n	800c832 <_Balloc+0x24>
 800c86e:	2000      	movs	r0, #0
 800c870:	bd70      	pop	{r4, r5, r6, pc}
 800c872:	6802      	ldr	r2, [r0, #0]
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	2300      	movs	r3, #0
 800c878:	6103      	str	r3, [r0, #16]
 800c87a:	60c3      	str	r3, [r0, #12]
 800c87c:	e7f8      	b.n	800c870 <_Balloc+0x62>

0800c87e <_Bfree>:
 800c87e:	b570      	push	{r4, r5, r6, lr}
 800c880:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c882:	0006      	movs	r6, r0
 800c884:	000d      	movs	r5, r1
 800c886:	2c00      	cmp	r4, #0
 800c888:	d107      	bne.n	800c89a <_Bfree+0x1c>
 800c88a:	2010      	movs	r0, #16
 800c88c:	f7fc ff30 	bl	80096f0 <malloc>
 800c890:	6270      	str	r0, [r6, #36]	; 0x24
 800c892:	6044      	str	r4, [r0, #4]
 800c894:	6084      	str	r4, [r0, #8]
 800c896:	6004      	str	r4, [r0, #0]
 800c898:	60c4      	str	r4, [r0, #12]
 800c89a:	2d00      	cmp	r5, #0
 800c89c:	d007      	beq.n	800c8ae <_Bfree+0x30>
 800c89e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c8a0:	686a      	ldr	r2, [r5, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	0092      	lsls	r2, r2, #2
 800c8a6:	189b      	adds	r3, r3, r2
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	602a      	str	r2, [r5, #0]
 800c8ac:	601d      	str	r5, [r3, #0]
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}

0800c8b0 <__multadd>:
 800c8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8b2:	001e      	movs	r6, r3
 800c8b4:	2314      	movs	r3, #20
 800c8b6:	469c      	mov	ip, r3
 800c8b8:	0007      	movs	r7, r0
 800c8ba:	000c      	movs	r4, r1
 800c8bc:	2000      	movs	r0, #0
 800c8be:	690d      	ldr	r5, [r1, #16]
 800c8c0:	448c      	add	ip, r1
 800c8c2:	4663      	mov	r3, ip
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	b299      	uxth	r1, r3
 800c8ca:	4663      	mov	r3, ip
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4351      	muls	r1, r2
 800c8d0:	0c1b      	lsrs	r3, r3, #16
 800c8d2:	4353      	muls	r3, r2
 800c8d4:	1989      	adds	r1, r1, r6
 800c8d6:	0c0e      	lsrs	r6, r1, #16
 800c8d8:	199b      	adds	r3, r3, r6
 800c8da:	b289      	uxth	r1, r1
 800c8dc:	0c1e      	lsrs	r6, r3, #16
 800c8de:	041b      	lsls	r3, r3, #16
 800c8e0:	185b      	adds	r3, r3, r1
 800c8e2:	4661      	mov	r1, ip
 800c8e4:	c108      	stmia	r1!, {r3}
 800c8e6:	468c      	mov	ip, r1
 800c8e8:	4285      	cmp	r5, r0
 800c8ea:	dcea      	bgt.n	800c8c2 <__multadd+0x12>
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	d01b      	beq.n	800c928 <__multadd+0x78>
 800c8f0:	68a3      	ldr	r3, [r4, #8]
 800c8f2:	42ab      	cmp	r3, r5
 800c8f4:	dc12      	bgt.n	800c91c <__multadd+0x6c>
 800c8f6:	6863      	ldr	r3, [r4, #4]
 800c8f8:	0038      	movs	r0, r7
 800c8fa:	1c59      	adds	r1, r3, #1
 800c8fc:	f7ff ff87 	bl	800c80e <_Balloc>
 800c900:	0021      	movs	r1, r4
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	9001      	str	r0, [sp, #4]
 800c906:	1c9a      	adds	r2, r3, #2
 800c908:	0092      	lsls	r2, r2, #2
 800c90a:	310c      	adds	r1, #12
 800c90c:	300c      	adds	r0, #12
 800c90e:	f7fc fef9 	bl	8009704 <memcpy>
 800c912:	0021      	movs	r1, r4
 800c914:	0038      	movs	r0, r7
 800c916:	f7ff ffb2 	bl	800c87e <_Bfree>
 800c91a:	9c01      	ldr	r4, [sp, #4]
 800c91c:	1d2b      	adds	r3, r5, #4
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	18e3      	adds	r3, r4, r3
 800c922:	3501      	adds	r5, #1
 800c924:	605e      	str	r6, [r3, #4]
 800c926:	6125      	str	r5, [r4, #16]
 800c928:	0020      	movs	r0, r4
 800c92a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800c92c <__s2b>:
 800c92c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c92e:	0006      	movs	r6, r0
 800c930:	0018      	movs	r0, r3
 800c932:	000c      	movs	r4, r1
 800c934:	3008      	adds	r0, #8
 800c936:	2109      	movs	r1, #9
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	0015      	movs	r5, r2
 800c93c:	f7f3 fc80 	bl	8000240 <__divsi3>
 800c940:	2301      	movs	r3, #1
 800c942:	2100      	movs	r1, #0
 800c944:	4283      	cmp	r3, r0
 800c946:	db1f      	blt.n	800c988 <__s2b+0x5c>
 800c948:	0030      	movs	r0, r6
 800c94a:	f7ff ff60 	bl	800c80e <_Balloc>
 800c94e:	9b08      	ldr	r3, [sp, #32]
 800c950:	6143      	str	r3, [r0, #20]
 800c952:	2301      	movs	r3, #1
 800c954:	6103      	str	r3, [r0, #16]
 800c956:	2d09      	cmp	r5, #9
 800c958:	dd19      	ble.n	800c98e <__s2b+0x62>
 800c95a:	0023      	movs	r3, r4
 800c95c:	3309      	adds	r3, #9
 800c95e:	001f      	movs	r7, r3
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	1964      	adds	r4, r4, r5
 800c964:	783b      	ldrb	r3, [r7, #0]
 800c966:	0001      	movs	r1, r0
 800c968:	3b30      	subs	r3, #48	; 0x30
 800c96a:	220a      	movs	r2, #10
 800c96c:	0030      	movs	r0, r6
 800c96e:	3701      	adds	r7, #1
 800c970:	f7ff ff9e 	bl	800c8b0 <__multadd>
 800c974:	42a7      	cmp	r7, r4
 800c976:	d1f5      	bne.n	800c964 <__s2b+0x38>
 800c978:	9b00      	ldr	r3, [sp, #0]
 800c97a:	195c      	adds	r4, r3, r5
 800c97c:	3c08      	subs	r4, #8
 800c97e:	002f      	movs	r7, r5
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	429f      	cmp	r7, r3
 800c984:	db06      	blt.n	800c994 <__s2b+0x68>
 800c986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	3101      	adds	r1, #1
 800c98c:	e7da      	b.n	800c944 <__s2b+0x18>
 800c98e:	340a      	adds	r4, #10
 800c990:	2509      	movs	r5, #9
 800c992:	e7f4      	b.n	800c97e <__s2b+0x52>
 800c994:	1b63      	subs	r3, r4, r5
 800c996:	5ddb      	ldrb	r3, [r3, r7]
 800c998:	0001      	movs	r1, r0
 800c99a:	3b30      	subs	r3, #48	; 0x30
 800c99c:	220a      	movs	r2, #10
 800c99e:	0030      	movs	r0, r6
 800c9a0:	f7ff ff86 	bl	800c8b0 <__multadd>
 800c9a4:	3701      	adds	r7, #1
 800c9a6:	e7eb      	b.n	800c980 <__s2b+0x54>

0800c9a8 <__hi0bits>:
 800c9a8:	0003      	movs	r3, r0
 800c9aa:	0c02      	lsrs	r2, r0, #16
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	4282      	cmp	r2, r0
 800c9b0:	d101      	bne.n	800c9b6 <__hi0bits+0xe>
 800c9b2:	041b      	lsls	r3, r3, #16
 800c9b4:	3010      	adds	r0, #16
 800c9b6:	0e1a      	lsrs	r2, r3, #24
 800c9b8:	d101      	bne.n	800c9be <__hi0bits+0x16>
 800c9ba:	3008      	adds	r0, #8
 800c9bc:	021b      	lsls	r3, r3, #8
 800c9be:	0f1a      	lsrs	r2, r3, #28
 800c9c0:	d101      	bne.n	800c9c6 <__hi0bits+0x1e>
 800c9c2:	3004      	adds	r0, #4
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	0f9a      	lsrs	r2, r3, #30
 800c9c8:	d101      	bne.n	800c9ce <__hi0bits+0x26>
 800c9ca:	3002      	adds	r0, #2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	db03      	blt.n	800c9da <__hi0bits+0x32>
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	d400      	bmi.n	800c9da <__hi0bits+0x32>
 800c9d8:	2020      	movs	r0, #32
 800c9da:	4770      	bx	lr

0800c9dc <__lo0bits>:
 800c9dc:	2207      	movs	r2, #7
 800c9de:	6803      	ldr	r3, [r0, #0]
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	0001      	movs	r1, r0
 800c9e4:	401a      	ands	r2, r3
 800c9e6:	d00d      	beq.n	800ca04 <__lo0bits+0x28>
 800c9e8:	2401      	movs	r4, #1
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	4223      	tst	r3, r4
 800c9ee:	d105      	bne.n	800c9fc <__lo0bits+0x20>
 800c9f0:	3002      	adds	r0, #2
 800c9f2:	4203      	tst	r3, r0
 800c9f4:	d003      	beq.n	800c9fe <__lo0bits+0x22>
 800c9f6:	40e3      	lsrs	r3, r4
 800c9f8:	0020      	movs	r0, r4
 800c9fa:	600b      	str	r3, [r1, #0]
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	089b      	lsrs	r3, r3, #2
 800ca00:	600b      	str	r3, [r1, #0]
 800ca02:	e7fb      	b.n	800c9fc <__lo0bits+0x20>
 800ca04:	b29c      	uxth	r4, r3
 800ca06:	0010      	movs	r0, r2
 800ca08:	2c00      	cmp	r4, #0
 800ca0a:	d101      	bne.n	800ca10 <__lo0bits+0x34>
 800ca0c:	2010      	movs	r0, #16
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	2a00      	cmp	r2, #0
 800ca14:	d101      	bne.n	800ca1a <__lo0bits+0x3e>
 800ca16:	3008      	adds	r0, #8
 800ca18:	0a1b      	lsrs	r3, r3, #8
 800ca1a:	071a      	lsls	r2, r3, #28
 800ca1c:	d101      	bne.n	800ca22 <__lo0bits+0x46>
 800ca1e:	3004      	adds	r0, #4
 800ca20:	091b      	lsrs	r3, r3, #4
 800ca22:	079a      	lsls	r2, r3, #30
 800ca24:	d101      	bne.n	800ca2a <__lo0bits+0x4e>
 800ca26:	3002      	adds	r0, #2
 800ca28:	089b      	lsrs	r3, r3, #2
 800ca2a:	07da      	lsls	r2, r3, #31
 800ca2c:	d4e8      	bmi.n	800ca00 <__lo0bits+0x24>
 800ca2e:	085b      	lsrs	r3, r3, #1
 800ca30:	d001      	beq.n	800ca36 <__lo0bits+0x5a>
 800ca32:	3001      	adds	r0, #1
 800ca34:	e7e4      	b.n	800ca00 <__lo0bits+0x24>
 800ca36:	2020      	movs	r0, #32
 800ca38:	e7e0      	b.n	800c9fc <__lo0bits+0x20>

0800ca3a <__i2b>:
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	000c      	movs	r4, r1
 800ca3e:	2101      	movs	r1, #1
 800ca40:	f7ff fee5 	bl	800c80e <_Balloc>
 800ca44:	2301      	movs	r3, #1
 800ca46:	6144      	str	r4, [r0, #20]
 800ca48:	6103      	str	r3, [r0, #16]
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <__multiply>:
 800ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	0014      	movs	r4, r2
 800ca52:	6912      	ldr	r2, [r2, #16]
 800ca54:	b089      	sub	sp, #36	; 0x24
 800ca56:	000d      	movs	r5, r1
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	da01      	bge.n	800ca60 <__multiply+0x14>
 800ca5c:	0025      	movs	r5, r4
 800ca5e:	000c      	movs	r4, r1
 800ca60:	692f      	ldr	r7, [r5, #16]
 800ca62:	6926      	ldr	r6, [r4, #16]
 800ca64:	6869      	ldr	r1, [r5, #4]
 800ca66:	19bb      	adds	r3, r7, r6
 800ca68:	9302      	str	r3, [sp, #8]
 800ca6a:	68ab      	ldr	r3, [r5, #8]
 800ca6c:	19ba      	adds	r2, r7, r6
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	da00      	bge.n	800ca74 <__multiply+0x28>
 800ca72:	3101      	adds	r1, #1
 800ca74:	f7ff fecb 	bl	800c80e <_Balloc>
 800ca78:	0002      	movs	r2, r0
 800ca7a:	19bb      	adds	r3, r7, r6
 800ca7c:	3214      	adds	r2, #20
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	18d3      	adds	r3, r2, r3
 800ca82:	469c      	mov	ip, r3
 800ca84:	2100      	movs	r1, #0
 800ca86:	0013      	movs	r3, r2
 800ca88:	9004      	str	r0, [sp, #16]
 800ca8a:	4563      	cmp	r3, ip
 800ca8c:	d31d      	bcc.n	800caca <__multiply+0x7e>
 800ca8e:	3514      	adds	r5, #20
 800ca90:	00bf      	lsls	r7, r7, #2
 800ca92:	19eb      	adds	r3, r5, r7
 800ca94:	3414      	adds	r4, #20
 800ca96:	00b6      	lsls	r6, r6, #2
 800ca98:	9305      	str	r3, [sp, #20]
 800ca9a:	19a3      	adds	r3, r4, r6
 800ca9c:	9503      	str	r5, [sp, #12]
 800ca9e:	9401      	str	r4, [sp, #4]
 800caa0:	9307      	str	r3, [sp, #28]
 800caa2:	9b07      	ldr	r3, [sp, #28]
 800caa4:	9901      	ldr	r1, [sp, #4]
 800caa6:	4299      	cmp	r1, r3
 800caa8:	d311      	bcc.n	800cace <__multiply+0x82>
 800caaa:	9b02      	ldr	r3, [sp, #8]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd06      	ble.n	800cabe <__multiply+0x72>
 800cab0:	2304      	movs	r3, #4
 800cab2:	425b      	negs	r3, r3
 800cab4:	449c      	add	ip, r3
 800cab6:	4663      	mov	r3, ip
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d051      	beq.n	800cb62 <__multiply+0x116>
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	9a02      	ldr	r2, [sp, #8]
 800cac2:	0018      	movs	r0, r3
 800cac4:	611a      	str	r2, [r3, #16]
 800cac6:	b009      	add	sp, #36	; 0x24
 800cac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caca:	c302      	stmia	r3!, {r1}
 800cacc:	e7dd      	b.n	800ca8a <__multiply+0x3e>
 800cace:	9b01      	ldr	r3, [sp, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	b298      	uxth	r0, r3
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d01c      	beq.n	800cb12 <__multiply+0xc6>
 800cad8:	0015      	movs	r5, r2
 800cada:	2600      	movs	r6, #0
 800cadc:	9f03      	ldr	r7, [sp, #12]
 800cade:	cf02      	ldmia	r7!, {r1}
 800cae0:	682c      	ldr	r4, [r5, #0]
 800cae2:	b28b      	uxth	r3, r1
 800cae4:	4343      	muls	r3, r0
 800cae6:	0c09      	lsrs	r1, r1, #16
 800cae8:	4341      	muls	r1, r0
 800caea:	b2a4      	uxth	r4, r4
 800caec:	191b      	adds	r3, r3, r4
 800caee:	199b      	adds	r3, r3, r6
 800caf0:	000e      	movs	r6, r1
 800caf2:	6829      	ldr	r1, [r5, #0]
 800caf4:	9506      	str	r5, [sp, #24]
 800caf6:	0c09      	lsrs	r1, r1, #16
 800caf8:	1871      	adds	r1, r6, r1
 800cafa:	0c1e      	lsrs	r6, r3, #16
 800cafc:	1989      	adds	r1, r1, r6
 800cafe:	0c0e      	lsrs	r6, r1, #16
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	0409      	lsls	r1, r1, #16
 800cb04:	430b      	orrs	r3, r1
 800cb06:	c508      	stmia	r5!, {r3}
 800cb08:	9b05      	ldr	r3, [sp, #20]
 800cb0a:	42bb      	cmp	r3, r7
 800cb0c:	d8e7      	bhi.n	800cade <__multiply+0x92>
 800cb0e:	9b06      	ldr	r3, [sp, #24]
 800cb10:	605e      	str	r6, [r3, #4]
 800cb12:	9b01      	ldr	r3, [sp, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	0c1d      	lsrs	r5, r3, #16
 800cb18:	d01e      	beq.n	800cb58 <__multiply+0x10c>
 800cb1a:	0010      	movs	r0, r2
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	6813      	ldr	r3, [r2, #0]
 800cb20:	9e03      	ldr	r6, [sp, #12]
 800cb22:	6831      	ldr	r1, [r6, #0]
 800cb24:	6804      	ldr	r4, [r0, #0]
 800cb26:	b289      	uxth	r1, r1
 800cb28:	4369      	muls	r1, r5
 800cb2a:	0c24      	lsrs	r4, r4, #16
 800cb2c:	1909      	adds	r1, r1, r4
 800cb2e:	19c9      	adds	r1, r1, r7
 800cb30:	040f      	lsls	r7, r1, #16
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	433b      	orrs	r3, r7
 800cb36:	6003      	str	r3, [r0, #0]
 800cb38:	ce80      	ldmia	r6!, {r7}
 800cb3a:	6843      	ldr	r3, [r0, #4]
 800cb3c:	0c3f      	lsrs	r7, r7, #16
 800cb3e:	436f      	muls	r7, r5
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	18fb      	adds	r3, r7, r3
 800cb44:	0c09      	lsrs	r1, r1, #16
 800cb46:	185b      	adds	r3, r3, r1
 800cb48:	9905      	ldr	r1, [sp, #20]
 800cb4a:	9006      	str	r0, [sp, #24]
 800cb4c:	0c1f      	lsrs	r7, r3, #16
 800cb4e:	3004      	adds	r0, #4
 800cb50:	42b1      	cmp	r1, r6
 800cb52:	d8e6      	bhi.n	800cb22 <__multiply+0xd6>
 800cb54:	9906      	ldr	r1, [sp, #24]
 800cb56:	604b      	str	r3, [r1, #4]
 800cb58:	9b01      	ldr	r3, [sp, #4]
 800cb5a:	3204      	adds	r2, #4
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	e79f      	b.n	800caa2 <__multiply+0x56>
 800cb62:	9b02      	ldr	r3, [sp, #8]
 800cb64:	3b01      	subs	r3, #1
 800cb66:	9302      	str	r3, [sp, #8]
 800cb68:	e79f      	b.n	800caaa <__multiply+0x5e>
	...

0800cb6c <__pow5mult>:
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb70:	4013      	ands	r3, r2
 800cb72:	0005      	movs	r5, r0
 800cb74:	000e      	movs	r6, r1
 800cb76:	0014      	movs	r4, r2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d008      	beq.n	800cb8e <__pow5mult+0x22>
 800cb7c:	4922      	ldr	r1, [pc, #136]	; (800cc08 <__pow5mult+0x9c>)
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	009a      	lsls	r2, r3, #2
 800cb82:	5852      	ldr	r2, [r2, r1]
 800cb84:	2300      	movs	r3, #0
 800cb86:	0031      	movs	r1, r6
 800cb88:	f7ff fe92 	bl	800c8b0 <__multadd>
 800cb8c:	0006      	movs	r6, r0
 800cb8e:	10a3      	asrs	r3, r4, #2
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	d036      	beq.n	800cc02 <__pow5mult+0x96>
 800cb94:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800cb96:	2c00      	cmp	r4, #0
 800cb98:	d107      	bne.n	800cbaa <__pow5mult+0x3e>
 800cb9a:	2010      	movs	r0, #16
 800cb9c:	f7fc fda8 	bl	80096f0 <malloc>
 800cba0:	6268      	str	r0, [r5, #36]	; 0x24
 800cba2:	6044      	str	r4, [r0, #4]
 800cba4:	6084      	str	r4, [r0, #8]
 800cba6:	6004      	str	r4, [r0, #0]
 800cba8:	60c4      	str	r4, [r0, #12]
 800cbaa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800cbac:	68bc      	ldr	r4, [r7, #8]
 800cbae:	2c00      	cmp	r4, #0
 800cbb0:	d107      	bne.n	800cbc2 <__pow5mult+0x56>
 800cbb2:	4916      	ldr	r1, [pc, #88]	; (800cc0c <__pow5mult+0xa0>)
 800cbb4:	0028      	movs	r0, r5
 800cbb6:	f7ff ff40 	bl	800ca3a <__i2b>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	0004      	movs	r4, r0
 800cbbe:	60b8      	str	r0, [r7, #8]
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	9b01      	ldr	r3, [sp, #4]
 800cbc6:	4213      	tst	r3, r2
 800cbc8:	d00a      	beq.n	800cbe0 <__pow5mult+0x74>
 800cbca:	0031      	movs	r1, r6
 800cbcc:	0022      	movs	r2, r4
 800cbce:	0028      	movs	r0, r5
 800cbd0:	f7ff ff3c 	bl	800ca4c <__multiply>
 800cbd4:	0007      	movs	r7, r0
 800cbd6:	0031      	movs	r1, r6
 800cbd8:	0028      	movs	r0, r5
 800cbda:	f7ff fe50 	bl	800c87e <_Bfree>
 800cbde:	003e      	movs	r6, r7
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	105b      	asrs	r3, r3, #1
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	d00c      	beq.n	800cc02 <__pow5mult+0x96>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d107      	bne.n	800cbfe <__pow5mult+0x92>
 800cbee:	0022      	movs	r2, r4
 800cbf0:	0021      	movs	r1, r4
 800cbf2:	0028      	movs	r0, r5
 800cbf4:	f7ff ff2a 	bl	800ca4c <__multiply>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	6020      	str	r0, [r4, #0]
 800cbfc:	6003      	str	r3, [r0, #0]
 800cbfe:	0004      	movs	r4, r0
 800cc00:	e7df      	b.n	800cbc2 <__pow5mult+0x56>
 800cc02:	0030      	movs	r0, r6
 800cc04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	0800d968 	.word	0x0800d968
 800cc0c:	00000271 	.word	0x00000271

0800cc10 <__lshift>:
 800cc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc12:	000d      	movs	r5, r1
 800cc14:	0017      	movs	r7, r2
 800cc16:	692b      	ldr	r3, [r5, #16]
 800cc18:	1154      	asrs	r4, r2, #5
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	18e3      	adds	r3, r4, r3
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	3301      	adds	r3, #1
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	6849      	ldr	r1, [r1, #4]
 800cc26:	68ab      	ldr	r3, [r5, #8]
 800cc28:	9002      	str	r0, [sp, #8]
 800cc2a:	9a00      	ldr	r2, [sp, #0]
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	db35      	blt.n	800cc9c <__lshift+0x8c>
 800cc30:	9802      	ldr	r0, [sp, #8]
 800cc32:	f7ff fdec 	bl	800c80e <_Balloc>
 800cc36:	2300      	movs	r3, #0
 800cc38:	0002      	movs	r2, r0
 800cc3a:	0006      	movs	r6, r0
 800cc3c:	0019      	movs	r1, r3
 800cc3e:	3214      	adds	r2, #20
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	db2e      	blt.n	800cca2 <__lshift+0x92>
 800cc44:	43e3      	mvns	r3, r4
 800cc46:	17db      	asrs	r3, r3, #31
 800cc48:	401c      	ands	r4, r3
 800cc4a:	002b      	movs	r3, r5
 800cc4c:	00a4      	lsls	r4, r4, #2
 800cc4e:	1914      	adds	r4, r2, r4
 800cc50:	692a      	ldr	r2, [r5, #16]
 800cc52:	3314      	adds	r3, #20
 800cc54:	0092      	lsls	r2, r2, #2
 800cc56:	189a      	adds	r2, r3, r2
 800cc58:	4694      	mov	ip, r2
 800cc5a:	221f      	movs	r2, #31
 800cc5c:	4017      	ands	r7, r2
 800cc5e:	d024      	beq.n	800ccaa <__lshift+0x9a>
 800cc60:	3201      	adds	r2, #1
 800cc62:	1bd2      	subs	r2, r2, r7
 800cc64:	9203      	str	r2, [sp, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	6819      	ldr	r1, [r3, #0]
 800cc6a:	0020      	movs	r0, r4
 800cc6c:	40b9      	lsls	r1, r7
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	c404      	stmia	r4!, {r2}
 800cc72:	cb04      	ldmia	r3!, {r2}
 800cc74:	9903      	ldr	r1, [sp, #12]
 800cc76:	40ca      	lsrs	r2, r1
 800cc78:	459c      	cmp	ip, r3
 800cc7a:	d8f5      	bhi.n	800cc68 <__lshift+0x58>
 800cc7c:	6042      	str	r2, [r0, #4]
 800cc7e:	2a00      	cmp	r2, #0
 800cc80:	d002      	beq.n	800cc88 <__lshift+0x78>
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	3302      	adds	r3, #2
 800cc86:	9300      	str	r3, [sp, #0]
 800cc88:	9b00      	ldr	r3, [sp, #0]
 800cc8a:	9802      	ldr	r0, [sp, #8]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	6133      	str	r3, [r6, #16]
 800cc90:	0029      	movs	r1, r5
 800cc92:	f7ff fdf4 	bl	800c87e <_Bfree>
 800cc96:	0030      	movs	r0, r6
 800cc98:	b005      	add	sp, #20
 800cc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc9c:	3101      	adds	r1, #1
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	e7c3      	b.n	800cc2a <__lshift+0x1a>
 800cca2:	0098      	lsls	r0, r3, #2
 800cca4:	5011      	str	r1, [r2, r0]
 800cca6:	3301      	adds	r3, #1
 800cca8:	e7ca      	b.n	800cc40 <__lshift+0x30>
 800ccaa:	cb04      	ldmia	r3!, {r2}
 800ccac:	c404      	stmia	r4!, {r2}
 800ccae:	459c      	cmp	ip, r3
 800ccb0:	d8fb      	bhi.n	800ccaa <__lshift+0x9a>
 800ccb2:	e7e9      	b.n	800cc88 <__lshift+0x78>

0800ccb4 <__mcmp>:
 800ccb4:	690a      	ldr	r2, [r1, #16]
 800ccb6:	6903      	ldr	r3, [r0, #16]
 800ccb8:	b530      	push	{r4, r5, lr}
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	d10d      	bne.n	800ccda <__mcmp+0x26>
 800ccbe:	0092      	lsls	r2, r2, #2
 800ccc0:	3014      	adds	r0, #20
 800ccc2:	3114      	adds	r1, #20
 800ccc4:	1884      	adds	r4, r0, r2
 800ccc6:	1889      	adds	r1, r1, r2
 800ccc8:	3c04      	subs	r4, #4
 800ccca:	3904      	subs	r1, #4
 800cccc:	6825      	ldr	r5, [r4, #0]
 800ccce:	680a      	ldr	r2, [r1, #0]
 800ccd0:	4295      	cmp	r5, r2
 800ccd2:	d004      	beq.n	800ccde <__mcmp+0x2a>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	4295      	cmp	r5, r2
 800ccd8:	d304      	bcc.n	800cce4 <__mcmp+0x30>
 800ccda:	0018      	movs	r0, r3
 800ccdc:	bd30      	pop	{r4, r5, pc}
 800ccde:	42a0      	cmp	r0, r4
 800cce0:	d3f2      	bcc.n	800ccc8 <__mcmp+0x14>
 800cce2:	e7fa      	b.n	800ccda <__mcmp+0x26>
 800cce4:	425b      	negs	r3, r3
 800cce6:	e7f8      	b.n	800ccda <__mcmp+0x26>

0800cce8 <__mdiff>:
 800cce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccea:	000d      	movs	r5, r1
 800ccec:	b085      	sub	sp, #20
 800ccee:	0007      	movs	r7, r0
 800ccf0:	0011      	movs	r1, r2
 800ccf2:	0028      	movs	r0, r5
 800ccf4:	0014      	movs	r4, r2
 800ccf6:	f7ff ffdd 	bl	800ccb4 <__mcmp>
 800ccfa:	1e06      	subs	r6, r0, #0
 800ccfc:	d108      	bne.n	800cd10 <__mdiff+0x28>
 800ccfe:	0001      	movs	r1, r0
 800cd00:	0038      	movs	r0, r7
 800cd02:	f7ff fd84 	bl	800c80e <_Balloc>
 800cd06:	2301      	movs	r3, #1
 800cd08:	6146      	str	r6, [r0, #20]
 800cd0a:	6103      	str	r3, [r0, #16]
 800cd0c:	b005      	add	sp, #20
 800cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd10:	2301      	movs	r3, #1
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	2800      	cmp	r0, #0
 800cd16:	db04      	blt.n	800cd22 <__mdiff+0x3a>
 800cd18:	0023      	movs	r3, r4
 800cd1a:	002c      	movs	r4, r5
 800cd1c:	001d      	movs	r5, r3
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	6861      	ldr	r1, [r4, #4]
 800cd24:	0038      	movs	r0, r7
 800cd26:	f7ff fd72 	bl	800c80e <_Balloc>
 800cd2a:	002f      	movs	r7, r5
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	9b01      	ldr	r3, [sp, #4]
 800cd30:	6926      	ldr	r6, [r4, #16]
 800cd32:	60c3      	str	r3, [r0, #12]
 800cd34:	3414      	adds	r4, #20
 800cd36:	00b3      	lsls	r3, r6, #2
 800cd38:	18e3      	adds	r3, r4, r3
 800cd3a:	9302      	str	r3, [sp, #8]
 800cd3c:	692b      	ldr	r3, [r5, #16]
 800cd3e:	3714      	adds	r7, #20
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	18fb      	adds	r3, r7, r3
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	0003      	movs	r3, r0
 800cd48:	4694      	mov	ip, r2
 800cd4a:	3314      	adds	r3, #20
 800cd4c:	cc20      	ldmia	r4!, {r5}
 800cd4e:	cf04      	ldmia	r7!, {r2}
 800cd50:	9201      	str	r2, [sp, #4]
 800cd52:	b2aa      	uxth	r2, r5
 800cd54:	4494      	add	ip, r2
 800cd56:	466a      	mov	r2, sp
 800cd58:	4661      	mov	r1, ip
 800cd5a:	8892      	ldrh	r2, [r2, #4]
 800cd5c:	0c2d      	lsrs	r5, r5, #16
 800cd5e:	1a8a      	subs	r2, r1, r2
 800cd60:	9901      	ldr	r1, [sp, #4]
 800cd62:	0c09      	lsrs	r1, r1, #16
 800cd64:	1a69      	subs	r1, r5, r1
 800cd66:	1415      	asrs	r5, r2, #16
 800cd68:	1949      	adds	r1, r1, r5
 800cd6a:	140d      	asrs	r5, r1, #16
 800cd6c:	b292      	uxth	r2, r2
 800cd6e:	0409      	lsls	r1, r1, #16
 800cd70:	430a      	orrs	r2, r1
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	9a03      	ldr	r2, [sp, #12]
 800cd76:	46ac      	mov	ip, r5
 800cd78:	3304      	adds	r3, #4
 800cd7a:	42ba      	cmp	r2, r7
 800cd7c:	d8e6      	bhi.n	800cd4c <__mdiff+0x64>
 800cd7e:	9902      	ldr	r1, [sp, #8]
 800cd80:	001a      	movs	r2, r3
 800cd82:	428c      	cmp	r4, r1
 800cd84:	d305      	bcc.n	800cd92 <__mdiff+0xaa>
 800cd86:	3a04      	subs	r2, #4
 800cd88:	6813      	ldr	r3, [r2, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00e      	beq.n	800cdac <__mdiff+0xc4>
 800cd8e:	6106      	str	r6, [r0, #16]
 800cd90:	e7bc      	b.n	800cd0c <__mdiff+0x24>
 800cd92:	cc04      	ldmia	r4!, {r2}
 800cd94:	b291      	uxth	r1, r2
 800cd96:	4461      	add	r1, ip
 800cd98:	140d      	asrs	r5, r1, #16
 800cd9a:	0c12      	lsrs	r2, r2, #16
 800cd9c:	1952      	adds	r2, r2, r5
 800cd9e:	1415      	asrs	r5, r2, #16
 800cda0:	b289      	uxth	r1, r1
 800cda2:	0412      	lsls	r2, r2, #16
 800cda4:	430a      	orrs	r2, r1
 800cda6:	46ac      	mov	ip, r5
 800cda8:	c304      	stmia	r3!, {r2}
 800cdaa:	e7e8      	b.n	800cd7e <__mdiff+0x96>
 800cdac:	3e01      	subs	r6, #1
 800cdae:	e7ea      	b.n	800cd86 <__mdiff+0x9e>

0800cdb0 <__ulp>:
 800cdb0:	000b      	movs	r3, r1
 800cdb2:	4910      	ldr	r1, [pc, #64]	; (800cdf4 <__ulp+0x44>)
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	4019      	ands	r1, r3
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <__ulp+0x48>)
 800cdba:	18c9      	adds	r1, r1, r3
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	dd04      	ble.n	800cdca <__ulp+0x1a>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	000b      	movs	r3, r1
 800cdc4:	0010      	movs	r0, r2
 800cdc6:	0019      	movs	r1, r3
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	4249      	negs	r1, r1
 800cdcc:	1509      	asrs	r1, r1, #20
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	2913      	cmp	r1, #19
 800cdd4:	dc04      	bgt.n	800cde0 <__ulp+0x30>
 800cdd6:	2080      	movs	r0, #128	; 0x80
 800cdd8:	0300      	lsls	r0, r0, #12
 800cdda:	4108      	asrs	r0, r1
 800cddc:	0003      	movs	r3, r0
 800cdde:	e7f1      	b.n	800cdc4 <__ulp+0x14>
 800cde0:	3914      	subs	r1, #20
 800cde2:	2001      	movs	r0, #1
 800cde4:	291e      	cmp	r1, #30
 800cde6:	dc02      	bgt.n	800cdee <__ulp+0x3e>
 800cde8:	241f      	movs	r4, #31
 800cdea:	1a61      	subs	r1, r4, r1
 800cdec:	4088      	lsls	r0, r1
 800cdee:	0002      	movs	r2, r0
 800cdf0:	e7e8      	b.n	800cdc4 <__ulp+0x14>
 800cdf2:	46c0      	nop			; (mov r8, r8)
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	fcc00000 	.word	0xfcc00000

0800cdfc <__b2d>:
 800cdfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdfe:	0006      	movs	r6, r0
 800ce00:	6903      	ldr	r3, [r0, #16]
 800ce02:	3614      	adds	r6, #20
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	18f3      	adds	r3, r6, r3
 800ce08:	1f1d      	subs	r5, r3, #4
 800ce0a:	682c      	ldr	r4, [r5, #0]
 800ce0c:	000f      	movs	r7, r1
 800ce0e:	0020      	movs	r0, r4
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	f7ff fdc9 	bl	800c9a8 <__hi0bits>
 800ce16:	2320      	movs	r3, #32
 800ce18:	1a1b      	subs	r3, r3, r0
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	491c      	ldr	r1, [pc, #112]	; (800ce90 <__b2d+0x94>)
 800ce1e:	280a      	cmp	r0, #10
 800ce20:	dc16      	bgt.n	800ce50 <__b2d+0x54>
 800ce22:	230b      	movs	r3, #11
 800ce24:	0027      	movs	r7, r4
 800ce26:	1a1b      	subs	r3, r3, r0
 800ce28:	40df      	lsrs	r7, r3
 800ce2a:	4339      	orrs	r1, r7
 800ce2c:	469c      	mov	ip, r3
 800ce2e:	000b      	movs	r3, r1
 800ce30:	2100      	movs	r1, #0
 800ce32:	42ae      	cmp	r6, r5
 800ce34:	d202      	bcs.n	800ce3c <__b2d+0x40>
 800ce36:	9901      	ldr	r1, [sp, #4]
 800ce38:	3908      	subs	r1, #8
 800ce3a:	6809      	ldr	r1, [r1, #0]
 800ce3c:	3015      	adds	r0, #21
 800ce3e:	4084      	lsls	r4, r0
 800ce40:	4660      	mov	r0, ip
 800ce42:	40c1      	lsrs	r1, r0
 800ce44:	430c      	orrs	r4, r1
 800ce46:	0022      	movs	r2, r4
 800ce48:	0010      	movs	r0, r2
 800ce4a:	0019      	movs	r1, r3
 800ce4c:	b003      	add	sp, #12
 800ce4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce50:	2700      	movs	r7, #0
 800ce52:	42ae      	cmp	r6, r5
 800ce54:	d202      	bcs.n	800ce5c <__b2d+0x60>
 800ce56:	9d01      	ldr	r5, [sp, #4]
 800ce58:	3d08      	subs	r5, #8
 800ce5a:	682f      	ldr	r7, [r5, #0]
 800ce5c:	380b      	subs	r0, #11
 800ce5e:	4684      	mov	ip, r0
 800ce60:	1e03      	subs	r3, r0, #0
 800ce62:	d012      	beq.n	800ce8a <__b2d+0x8e>
 800ce64:	409c      	lsls	r4, r3
 800ce66:	2020      	movs	r0, #32
 800ce68:	4321      	orrs	r1, r4
 800ce6a:	003c      	movs	r4, r7
 800ce6c:	1ac0      	subs	r0, r0, r3
 800ce6e:	40c4      	lsrs	r4, r0
 800ce70:	4321      	orrs	r1, r4
 800ce72:	000b      	movs	r3, r1
 800ce74:	2100      	movs	r1, #0
 800ce76:	42b5      	cmp	r5, r6
 800ce78:	d901      	bls.n	800ce7e <__b2d+0x82>
 800ce7a:	3d04      	subs	r5, #4
 800ce7c:	6829      	ldr	r1, [r5, #0]
 800ce7e:	4664      	mov	r4, ip
 800ce80:	40c1      	lsrs	r1, r0
 800ce82:	40a7      	lsls	r7, r4
 800ce84:	430f      	orrs	r7, r1
 800ce86:	003a      	movs	r2, r7
 800ce88:	e7de      	b.n	800ce48 <__b2d+0x4c>
 800ce8a:	4321      	orrs	r1, r4
 800ce8c:	000b      	movs	r3, r1
 800ce8e:	e7fa      	b.n	800ce86 <__b2d+0x8a>
 800ce90:	3ff00000 	.word	0x3ff00000

0800ce94 <__d2b>:
 800ce94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce96:	001d      	movs	r5, r3
 800ce98:	2101      	movs	r1, #1
 800ce9a:	0014      	movs	r4, r2
 800ce9c:	9f08      	ldr	r7, [sp, #32]
 800ce9e:	f7ff fcb6 	bl	800c80e <_Balloc>
 800cea2:	032b      	lsls	r3, r5, #12
 800cea4:	006d      	lsls	r5, r5, #1
 800cea6:	0006      	movs	r6, r0
 800cea8:	0b1b      	lsrs	r3, r3, #12
 800ceaa:	0d6d      	lsrs	r5, r5, #21
 800ceac:	d124      	bne.n	800cef8 <__d2b+0x64>
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	2c00      	cmp	r4, #0
 800ceb2:	d027      	beq.n	800cf04 <__d2b+0x70>
 800ceb4:	4668      	mov	r0, sp
 800ceb6:	9400      	str	r4, [sp, #0]
 800ceb8:	f7ff fd90 	bl	800c9dc <__lo0bits>
 800cebc:	9c00      	ldr	r4, [sp, #0]
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d01e      	beq.n	800cf00 <__d2b+0x6c>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	2120      	movs	r1, #32
 800cec6:	001a      	movs	r2, r3
 800cec8:	1a09      	subs	r1, r1, r0
 800ceca:	408a      	lsls	r2, r1
 800cecc:	40c3      	lsrs	r3, r0
 800cece:	4322      	orrs	r2, r4
 800ced0:	6172      	str	r2, [r6, #20]
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	9c01      	ldr	r4, [sp, #4]
 800ced6:	61b4      	str	r4, [r6, #24]
 800ced8:	1e63      	subs	r3, r4, #1
 800ceda:	419c      	sbcs	r4, r3
 800cedc:	3401      	adds	r4, #1
 800cede:	6134      	str	r4, [r6, #16]
 800cee0:	2d00      	cmp	r5, #0
 800cee2:	d018      	beq.n	800cf16 <__d2b+0x82>
 800cee4:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <__d2b+0x9c>)
 800cee6:	18ed      	adds	r5, r5, r3
 800cee8:	2335      	movs	r3, #53	; 0x35
 800ceea:	182d      	adds	r5, r5, r0
 800ceec:	603d      	str	r5, [r7, #0]
 800ceee:	1a18      	subs	r0, r3, r0
 800cef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cef2:	6018      	str	r0, [r3, #0]
 800cef4:	0030      	movs	r0, r6
 800cef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cef8:	2280      	movs	r2, #128	; 0x80
 800cefa:	0352      	lsls	r2, r2, #13
 800cefc:	4313      	orrs	r3, r2
 800cefe:	e7d6      	b.n	800ceae <__d2b+0x1a>
 800cf00:	6174      	str	r4, [r6, #20]
 800cf02:	e7e7      	b.n	800ced4 <__d2b+0x40>
 800cf04:	a801      	add	r0, sp, #4
 800cf06:	f7ff fd69 	bl	800c9dc <__lo0bits>
 800cf0a:	2401      	movs	r4, #1
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	6134      	str	r4, [r6, #16]
 800cf10:	6173      	str	r3, [r6, #20]
 800cf12:	3020      	adds	r0, #32
 800cf14:	e7e4      	b.n	800cee0 <__d2b+0x4c>
 800cf16:	4b07      	ldr	r3, [pc, #28]	; (800cf34 <__d2b+0xa0>)
 800cf18:	18c0      	adds	r0, r0, r3
 800cf1a:	4b07      	ldr	r3, [pc, #28]	; (800cf38 <__d2b+0xa4>)
 800cf1c:	6038      	str	r0, [r7, #0]
 800cf1e:	18e3      	adds	r3, r4, r3
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	18f3      	adds	r3, r6, r3
 800cf24:	6958      	ldr	r0, [r3, #20]
 800cf26:	f7ff fd3f 	bl	800c9a8 <__hi0bits>
 800cf2a:	0164      	lsls	r4, r4, #5
 800cf2c:	1a20      	subs	r0, r4, r0
 800cf2e:	e7df      	b.n	800cef0 <__d2b+0x5c>
 800cf30:	fffffbcd 	.word	0xfffffbcd
 800cf34:	fffffbce 	.word	0xfffffbce
 800cf38:	3fffffff 	.word	0x3fffffff

0800cf3c <__ratio>:
 800cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	000f      	movs	r7, r1
 800cf42:	a902      	add	r1, sp, #8
 800cf44:	0006      	movs	r6, r0
 800cf46:	f7ff ff59 	bl	800cdfc <__b2d>
 800cf4a:	0004      	movs	r4, r0
 800cf4c:	000d      	movs	r5, r1
 800cf4e:	0038      	movs	r0, r7
 800cf50:	a903      	add	r1, sp, #12
 800cf52:	9400      	str	r4, [sp, #0]
 800cf54:	9501      	str	r5, [sp, #4]
 800cf56:	f7ff ff51 	bl	800cdfc <__b2d>
 800cf5a:	6936      	ldr	r6, [r6, #16]
 800cf5c:	693f      	ldr	r7, [r7, #16]
 800cf5e:	0002      	movs	r2, r0
 800cf60:	1bf7      	subs	r7, r6, r7
 800cf62:	017e      	lsls	r6, r7, #5
 800cf64:	46b4      	mov	ip, r6
 800cf66:	9f03      	ldr	r7, [sp, #12]
 800cf68:	9e02      	ldr	r6, [sp, #8]
 800cf6a:	000b      	movs	r3, r1
 800cf6c:	1bf6      	subs	r6, r6, r7
 800cf6e:	4466      	add	r6, ip
 800cf70:	0537      	lsls	r7, r6, #20
 800cf72:	2e00      	cmp	r6, #0
 800cf74:	dd07      	ble.n	800cf86 <__ratio+0x4a>
 800cf76:	1979      	adds	r1, r7, r5
 800cf78:	9101      	str	r1, [sp, #4]
 800cf7a:	9800      	ldr	r0, [sp, #0]
 800cf7c:	9901      	ldr	r1, [sp, #4]
 800cf7e:	f7f3 fe03 	bl	8000b88 <__aeabi_ddiv>
 800cf82:	b005      	add	sp, #20
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	1bcb      	subs	r3, r1, r7
 800cf88:	e7f7      	b.n	800cf7a <__ratio+0x3e>

0800cf8a <__copybits>:
 800cf8a:	0013      	movs	r3, r2
 800cf8c:	3901      	subs	r1, #1
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	1149      	asrs	r1, r1, #5
 800cf92:	6912      	ldr	r2, [r2, #16]
 800cf94:	3101      	adds	r1, #1
 800cf96:	0089      	lsls	r1, r1, #2
 800cf98:	3314      	adds	r3, #20
 800cf9a:	0092      	lsls	r2, r2, #2
 800cf9c:	1841      	adds	r1, r0, r1
 800cf9e:	189a      	adds	r2, r3, r2
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d803      	bhi.n	800cfac <__copybits+0x22>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4281      	cmp	r1, r0
 800cfa8:	d803      	bhi.n	800cfb2 <__copybits+0x28>
 800cfaa:	bd10      	pop	{r4, pc}
 800cfac:	cb10      	ldmia	r3!, {r4}
 800cfae:	c010      	stmia	r0!, {r4}
 800cfb0:	e7f6      	b.n	800cfa0 <__copybits+0x16>
 800cfb2:	c008      	stmia	r0!, {r3}
 800cfb4:	e7f7      	b.n	800cfa6 <__copybits+0x1c>

0800cfb6 <__any_on>:
 800cfb6:	0002      	movs	r2, r0
 800cfb8:	6900      	ldr	r0, [r0, #16]
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	3214      	adds	r2, #20
 800cfbe:	114b      	asrs	r3, r1, #5
 800cfc0:	4298      	cmp	r0, r3
 800cfc2:	db12      	blt.n	800cfea <__any_on+0x34>
 800cfc4:	dd0b      	ble.n	800cfde <__any_on+0x28>
 800cfc6:	201f      	movs	r0, #31
 800cfc8:	4001      	ands	r1, r0
 800cfca:	d008      	beq.n	800cfde <__any_on+0x28>
 800cfcc:	0098      	lsls	r0, r3, #2
 800cfce:	5884      	ldr	r4, [r0, r2]
 800cfd0:	0020      	movs	r0, r4
 800cfd2:	40c8      	lsrs	r0, r1
 800cfd4:	4088      	lsls	r0, r1
 800cfd6:	0001      	movs	r1, r0
 800cfd8:	2001      	movs	r0, #1
 800cfda:	428c      	cmp	r4, r1
 800cfdc:	d104      	bne.n	800cfe8 <__any_on+0x32>
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	18d3      	adds	r3, r2, r3
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d803      	bhi.n	800cfee <__any_on+0x38>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	bd10      	pop	{r4, pc}
 800cfea:	0003      	movs	r3, r0
 800cfec:	e7f7      	b.n	800cfde <__any_on+0x28>
 800cfee:	3b04      	subs	r3, #4
 800cff0:	6819      	ldr	r1, [r3, #0]
 800cff2:	2900      	cmp	r1, #0
 800cff4:	d0f5      	beq.n	800cfe2 <__any_on+0x2c>
 800cff6:	2001      	movs	r0, #1
 800cff8:	e7f6      	b.n	800cfe8 <__any_on+0x32>

0800cffa <_calloc_r>:
 800cffa:	434a      	muls	r2, r1
 800cffc:	b570      	push	{r4, r5, r6, lr}
 800cffe:	0011      	movs	r1, r2
 800d000:	0014      	movs	r4, r2
 800d002:	f7fc fbdb 	bl	80097bc <_malloc_r>
 800d006:	1e05      	subs	r5, r0, #0
 800d008:	d003      	beq.n	800d012 <_calloc_r+0x18>
 800d00a:	0022      	movs	r2, r4
 800d00c:	2100      	movs	r1, #0
 800d00e:	f7fc fb82 	bl	8009716 <memset>
 800d012:	0028      	movs	r0, r5
 800d014:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d018 <__ssputs_r>:
 800d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01a:	688e      	ldr	r6, [r1, #8]
 800d01c:	b085      	sub	sp, #20
 800d01e:	0007      	movs	r7, r0
 800d020:	000c      	movs	r4, r1
 800d022:	9203      	str	r2, [sp, #12]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	429e      	cmp	r6, r3
 800d028:	d83c      	bhi.n	800d0a4 <__ssputs_r+0x8c>
 800d02a:	2390      	movs	r3, #144	; 0x90
 800d02c:	898a      	ldrh	r2, [r1, #12]
 800d02e:	00db      	lsls	r3, r3, #3
 800d030:	421a      	tst	r2, r3
 800d032:	d034      	beq.n	800d09e <__ssputs_r+0x86>
 800d034:	2503      	movs	r5, #3
 800d036:	6909      	ldr	r1, [r1, #16]
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	1a5b      	subs	r3, r3, r1
 800d03c:	9302      	str	r3, [sp, #8]
 800d03e:	6963      	ldr	r3, [r4, #20]
 800d040:	9802      	ldr	r0, [sp, #8]
 800d042:	435d      	muls	r5, r3
 800d044:	0feb      	lsrs	r3, r5, #31
 800d046:	195d      	adds	r5, r3, r5
 800d048:	9b01      	ldr	r3, [sp, #4]
 800d04a:	106d      	asrs	r5, r5, #1
 800d04c:	3301      	adds	r3, #1
 800d04e:	181b      	adds	r3, r3, r0
 800d050:	42ab      	cmp	r3, r5
 800d052:	d900      	bls.n	800d056 <__ssputs_r+0x3e>
 800d054:	001d      	movs	r5, r3
 800d056:	0553      	lsls	r3, r2, #21
 800d058:	d532      	bpl.n	800d0c0 <__ssputs_r+0xa8>
 800d05a:	0029      	movs	r1, r5
 800d05c:	0038      	movs	r0, r7
 800d05e:	f7fc fbad 	bl	80097bc <_malloc_r>
 800d062:	1e06      	subs	r6, r0, #0
 800d064:	d109      	bne.n	800d07a <__ssputs_r+0x62>
 800d066:	230c      	movs	r3, #12
 800d068:	603b      	str	r3, [r7, #0]
 800d06a:	2340      	movs	r3, #64	; 0x40
 800d06c:	2001      	movs	r0, #1
 800d06e:	89a2      	ldrh	r2, [r4, #12]
 800d070:	4240      	negs	r0, r0
 800d072:	4313      	orrs	r3, r2
 800d074:	81a3      	strh	r3, [r4, #12]
 800d076:	b005      	add	sp, #20
 800d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07a:	9a02      	ldr	r2, [sp, #8]
 800d07c:	6921      	ldr	r1, [r4, #16]
 800d07e:	f7fc fb41 	bl	8009704 <memcpy>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	4a14      	ldr	r2, [pc, #80]	; (800d0d8 <__ssputs_r+0xc0>)
 800d086:	401a      	ands	r2, r3
 800d088:	2380      	movs	r3, #128	; 0x80
 800d08a:	4313      	orrs	r3, r2
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	9b02      	ldr	r3, [sp, #8]
 800d090:	6126      	str	r6, [r4, #16]
 800d092:	18f6      	adds	r6, r6, r3
 800d094:	6026      	str	r6, [r4, #0]
 800d096:	6165      	str	r5, [r4, #20]
 800d098:	9e01      	ldr	r6, [sp, #4]
 800d09a:	1aed      	subs	r5, r5, r3
 800d09c:	60a5      	str	r5, [r4, #8]
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	429e      	cmp	r6, r3
 800d0a2:	d900      	bls.n	800d0a6 <__ssputs_r+0x8e>
 800d0a4:	9e01      	ldr	r6, [sp, #4]
 800d0a6:	0032      	movs	r2, r6
 800d0a8:	9903      	ldr	r1, [sp, #12]
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	f000 f931 	bl	800d312 <memmove>
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	1b9b      	subs	r3, r3, r6
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	199e      	adds	r6, r3, r6
 800d0bc:	6026      	str	r6, [r4, #0]
 800d0be:	e7da      	b.n	800d076 <__ssputs_r+0x5e>
 800d0c0:	002a      	movs	r2, r5
 800d0c2:	0038      	movs	r0, r7
 800d0c4:	f000 f938 	bl	800d338 <_realloc_r>
 800d0c8:	1e06      	subs	r6, r0, #0
 800d0ca:	d1e0      	bne.n	800d08e <__ssputs_r+0x76>
 800d0cc:	6921      	ldr	r1, [r4, #16]
 800d0ce:	0038      	movs	r0, r7
 800d0d0:	f7fc fb2a 	bl	8009728 <_free_r>
 800d0d4:	e7c7      	b.n	800d066 <__ssputs_r+0x4e>
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	fffffb7f 	.word	0xfffffb7f

0800d0dc <_svfiprintf_r>:
 800d0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0de:	b0a1      	sub	sp, #132	; 0x84
 800d0e0:	9003      	str	r0, [sp, #12]
 800d0e2:	001d      	movs	r5, r3
 800d0e4:	898b      	ldrh	r3, [r1, #12]
 800d0e6:	000f      	movs	r7, r1
 800d0e8:	0016      	movs	r6, r2
 800d0ea:	061b      	lsls	r3, r3, #24
 800d0ec:	d511      	bpl.n	800d112 <_svfiprintf_r+0x36>
 800d0ee:	690b      	ldr	r3, [r1, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10e      	bne.n	800d112 <_svfiprintf_r+0x36>
 800d0f4:	2140      	movs	r1, #64	; 0x40
 800d0f6:	f7fc fb61 	bl	80097bc <_malloc_r>
 800d0fa:	6038      	str	r0, [r7, #0]
 800d0fc:	6138      	str	r0, [r7, #16]
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d105      	bne.n	800d10e <_svfiprintf_r+0x32>
 800d102:	230c      	movs	r3, #12
 800d104:	9a03      	ldr	r2, [sp, #12]
 800d106:	3801      	subs	r0, #1
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	b021      	add	sp, #132	; 0x84
 800d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d10e:	2340      	movs	r3, #64	; 0x40
 800d110:	617b      	str	r3, [r7, #20]
 800d112:	2300      	movs	r3, #0
 800d114:	ac08      	add	r4, sp, #32
 800d116:	6163      	str	r3, [r4, #20]
 800d118:	3320      	adds	r3, #32
 800d11a:	7663      	strb	r3, [r4, #25]
 800d11c:	3310      	adds	r3, #16
 800d11e:	76a3      	strb	r3, [r4, #26]
 800d120:	9507      	str	r5, [sp, #28]
 800d122:	0035      	movs	r5, r6
 800d124:	782b      	ldrb	r3, [r5, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <_svfiprintf_r+0x52>
 800d12a:	2b25      	cmp	r3, #37	; 0x25
 800d12c:	d146      	bne.n	800d1bc <_svfiprintf_r+0xe0>
 800d12e:	1bab      	subs	r3, r5, r6
 800d130:	9305      	str	r3, [sp, #20]
 800d132:	d00c      	beq.n	800d14e <_svfiprintf_r+0x72>
 800d134:	0032      	movs	r2, r6
 800d136:	0039      	movs	r1, r7
 800d138:	9803      	ldr	r0, [sp, #12]
 800d13a:	f7ff ff6d 	bl	800d018 <__ssputs_r>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	d100      	bne.n	800d144 <_svfiprintf_r+0x68>
 800d142:	e0ae      	b.n	800d2a2 <_svfiprintf_r+0x1c6>
 800d144:	6962      	ldr	r2, [r4, #20]
 800d146:	9b05      	ldr	r3, [sp, #20]
 800d148:	4694      	mov	ip, r2
 800d14a:	4463      	add	r3, ip
 800d14c:	6163      	str	r3, [r4, #20]
 800d14e:	782b      	ldrb	r3, [r5, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d100      	bne.n	800d156 <_svfiprintf_r+0x7a>
 800d154:	e0a5      	b.n	800d2a2 <_svfiprintf_r+0x1c6>
 800d156:	2201      	movs	r2, #1
 800d158:	2300      	movs	r3, #0
 800d15a:	4252      	negs	r2, r2
 800d15c:	6062      	str	r2, [r4, #4]
 800d15e:	a904      	add	r1, sp, #16
 800d160:	3254      	adds	r2, #84	; 0x54
 800d162:	1852      	adds	r2, r2, r1
 800d164:	1c6e      	adds	r6, r5, #1
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	60e3      	str	r3, [r4, #12]
 800d16a:	60a3      	str	r3, [r4, #8]
 800d16c:	7013      	strb	r3, [r2, #0]
 800d16e:	65a3      	str	r3, [r4, #88]	; 0x58
 800d170:	7831      	ldrb	r1, [r6, #0]
 800d172:	2205      	movs	r2, #5
 800d174:	4853      	ldr	r0, [pc, #332]	; (800d2c4 <_svfiprintf_r+0x1e8>)
 800d176:	f7ff fb3f 	bl	800c7f8 <memchr>
 800d17a:	1c75      	adds	r5, r6, #1
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d11f      	bne.n	800d1c0 <_svfiprintf_r+0xe4>
 800d180:	6822      	ldr	r2, [r4, #0]
 800d182:	06d3      	lsls	r3, r2, #27
 800d184:	d504      	bpl.n	800d190 <_svfiprintf_r+0xb4>
 800d186:	2353      	movs	r3, #83	; 0x53
 800d188:	a904      	add	r1, sp, #16
 800d18a:	185b      	adds	r3, r3, r1
 800d18c:	2120      	movs	r1, #32
 800d18e:	7019      	strb	r1, [r3, #0]
 800d190:	0713      	lsls	r3, r2, #28
 800d192:	d504      	bpl.n	800d19e <_svfiprintf_r+0xc2>
 800d194:	2353      	movs	r3, #83	; 0x53
 800d196:	a904      	add	r1, sp, #16
 800d198:	185b      	adds	r3, r3, r1
 800d19a:	212b      	movs	r1, #43	; 0x2b
 800d19c:	7019      	strb	r1, [r3, #0]
 800d19e:	7833      	ldrb	r3, [r6, #0]
 800d1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a2:	d016      	beq.n	800d1d2 <_svfiprintf_r+0xf6>
 800d1a4:	0035      	movs	r5, r6
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	200a      	movs	r0, #10
 800d1aa:	68e3      	ldr	r3, [r4, #12]
 800d1ac:	782a      	ldrb	r2, [r5, #0]
 800d1ae:	1c6e      	adds	r6, r5, #1
 800d1b0:	3a30      	subs	r2, #48	; 0x30
 800d1b2:	2a09      	cmp	r2, #9
 800d1b4:	d94e      	bls.n	800d254 <_svfiprintf_r+0x178>
 800d1b6:	2900      	cmp	r1, #0
 800d1b8:	d018      	beq.n	800d1ec <_svfiprintf_r+0x110>
 800d1ba:	e010      	b.n	800d1de <_svfiprintf_r+0x102>
 800d1bc:	3501      	adds	r5, #1
 800d1be:	e7b1      	b.n	800d124 <_svfiprintf_r+0x48>
 800d1c0:	4b40      	ldr	r3, [pc, #256]	; (800d2c4 <_svfiprintf_r+0x1e8>)
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	1ac0      	subs	r0, r0, r3
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4083      	lsls	r3, r0
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	002e      	movs	r6, r5
 800d1d0:	e7ce      	b.n	800d170 <_svfiprintf_r+0x94>
 800d1d2:	9b07      	ldr	r3, [sp, #28]
 800d1d4:	1d19      	adds	r1, r3, #4
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	9107      	str	r1, [sp, #28]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	db01      	blt.n	800d1e2 <_svfiprintf_r+0x106>
 800d1de:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1e0:	e004      	b.n	800d1ec <_svfiprintf_r+0x110>
 800d1e2:	425b      	negs	r3, r3
 800d1e4:	60e3      	str	r3, [r4, #12]
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	6023      	str	r3, [r4, #0]
 800d1ec:	782b      	ldrb	r3, [r5, #0]
 800d1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d1f0:	d10a      	bne.n	800d208 <_svfiprintf_r+0x12c>
 800d1f2:	786b      	ldrb	r3, [r5, #1]
 800d1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f6:	d135      	bne.n	800d264 <_svfiprintf_r+0x188>
 800d1f8:	9b07      	ldr	r3, [sp, #28]
 800d1fa:	3502      	adds	r5, #2
 800d1fc:	1d1a      	adds	r2, r3, #4
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	9207      	str	r2, [sp, #28]
 800d202:	2b00      	cmp	r3, #0
 800d204:	db2b      	blt.n	800d25e <_svfiprintf_r+0x182>
 800d206:	9309      	str	r3, [sp, #36]	; 0x24
 800d208:	4e2f      	ldr	r6, [pc, #188]	; (800d2c8 <_svfiprintf_r+0x1ec>)
 800d20a:	7829      	ldrb	r1, [r5, #0]
 800d20c:	2203      	movs	r2, #3
 800d20e:	0030      	movs	r0, r6
 800d210:	f7ff faf2 	bl	800c7f8 <memchr>
 800d214:	2800      	cmp	r0, #0
 800d216:	d006      	beq.n	800d226 <_svfiprintf_r+0x14a>
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	1b80      	subs	r0, r0, r6
 800d21c:	4083      	lsls	r3, r0
 800d21e:	6822      	ldr	r2, [r4, #0]
 800d220:	3501      	adds	r5, #1
 800d222:	4313      	orrs	r3, r2
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	7829      	ldrb	r1, [r5, #0]
 800d228:	2206      	movs	r2, #6
 800d22a:	4828      	ldr	r0, [pc, #160]	; (800d2cc <_svfiprintf_r+0x1f0>)
 800d22c:	1c6e      	adds	r6, r5, #1
 800d22e:	7621      	strb	r1, [r4, #24]
 800d230:	f7ff fae2 	bl	800c7f8 <memchr>
 800d234:	2800      	cmp	r0, #0
 800d236:	d03c      	beq.n	800d2b2 <_svfiprintf_r+0x1d6>
 800d238:	4b25      	ldr	r3, [pc, #148]	; (800d2d0 <_svfiprintf_r+0x1f4>)
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d125      	bne.n	800d28a <_svfiprintf_r+0x1ae>
 800d23e:	2207      	movs	r2, #7
 800d240:	9b07      	ldr	r3, [sp, #28]
 800d242:	3307      	adds	r3, #7
 800d244:	4393      	bics	r3, r2
 800d246:	3308      	adds	r3, #8
 800d248:	9307      	str	r3, [sp, #28]
 800d24a:	6963      	ldr	r3, [r4, #20]
 800d24c:	9a04      	ldr	r2, [sp, #16]
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	6163      	str	r3, [r4, #20]
 800d252:	e766      	b.n	800d122 <_svfiprintf_r+0x46>
 800d254:	4343      	muls	r3, r0
 800d256:	2101      	movs	r1, #1
 800d258:	189b      	adds	r3, r3, r2
 800d25a:	0035      	movs	r5, r6
 800d25c:	e7a6      	b.n	800d1ac <_svfiprintf_r+0xd0>
 800d25e:	2301      	movs	r3, #1
 800d260:	425b      	negs	r3, r3
 800d262:	e7d0      	b.n	800d206 <_svfiprintf_r+0x12a>
 800d264:	2300      	movs	r3, #0
 800d266:	200a      	movs	r0, #10
 800d268:	001a      	movs	r2, r3
 800d26a:	3501      	adds	r5, #1
 800d26c:	6063      	str	r3, [r4, #4]
 800d26e:	7829      	ldrb	r1, [r5, #0]
 800d270:	1c6e      	adds	r6, r5, #1
 800d272:	3930      	subs	r1, #48	; 0x30
 800d274:	2909      	cmp	r1, #9
 800d276:	d903      	bls.n	800d280 <_svfiprintf_r+0x1a4>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0c5      	beq.n	800d208 <_svfiprintf_r+0x12c>
 800d27c:	9209      	str	r2, [sp, #36]	; 0x24
 800d27e:	e7c3      	b.n	800d208 <_svfiprintf_r+0x12c>
 800d280:	4342      	muls	r2, r0
 800d282:	2301      	movs	r3, #1
 800d284:	1852      	adds	r2, r2, r1
 800d286:	0035      	movs	r5, r6
 800d288:	e7f1      	b.n	800d26e <_svfiprintf_r+0x192>
 800d28a:	ab07      	add	r3, sp, #28
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	003a      	movs	r2, r7
 800d290:	4b10      	ldr	r3, [pc, #64]	; (800d2d4 <_svfiprintf_r+0x1f8>)
 800d292:	0021      	movs	r1, r4
 800d294:	9803      	ldr	r0, [sp, #12]
 800d296:	f7fc fb8b 	bl	80099b0 <_printf_float>
 800d29a:	9004      	str	r0, [sp, #16]
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	d1d3      	bne.n	800d24a <_svfiprintf_r+0x16e>
 800d2a2:	89bb      	ldrh	r3, [r7, #12]
 800d2a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d2a6:	065b      	lsls	r3, r3, #25
 800d2a8:	d400      	bmi.n	800d2ac <_svfiprintf_r+0x1d0>
 800d2aa:	e72e      	b.n	800d10a <_svfiprintf_r+0x2e>
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	4240      	negs	r0, r0
 800d2b0:	e72b      	b.n	800d10a <_svfiprintf_r+0x2e>
 800d2b2:	ab07      	add	r3, sp, #28
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	003a      	movs	r2, r7
 800d2b8:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <_svfiprintf_r+0x1f8>)
 800d2ba:	0021      	movs	r1, r4
 800d2bc:	9803      	ldr	r0, [sp, #12]
 800d2be:	f7fc fe31 	bl	8009f24 <_printf_i>
 800d2c2:	e7ea      	b.n	800d29a <_svfiprintf_r+0x1be>
 800d2c4:	0800d974 	.word	0x0800d974
 800d2c8:	0800d97a 	.word	0x0800d97a
 800d2cc:	0800d97e 	.word	0x0800d97e
 800d2d0:	080099b1 	.word	0x080099b1
 800d2d4:	0800d019 	.word	0x0800d019

0800d2d8 <strncmp>:
 800d2d8:	2300      	movs	r3, #0
 800d2da:	b530      	push	{r4, r5, lr}
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d00a      	beq.n	800d2f6 <strncmp+0x1e>
 800d2e0:	3a01      	subs	r2, #1
 800d2e2:	5cc4      	ldrb	r4, [r0, r3]
 800d2e4:	5ccd      	ldrb	r5, [r1, r3]
 800d2e6:	42ac      	cmp	r4, r5
 800d2e8:	d104      	bne.n	800d2f4 <strncmp+0x1c>
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d002      	beq.n	800d2f4 <strncmp+0x1c>
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	2c00      	cmp	r4, #0
 800d2f2:	d1f6      	bne.n	800d2e2 <strncmp+0xa>
 800d2f4:	1b63      	subs	r3, r4, r5
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	bd30      	pop	{r4, r5, pc}

0800d2fa <__ascii_wctomb>:
 800d2fa:	1e0b      	subs	r3, r1, #0
 800d2fc:	d004      	beq.n	800d308 <__ascii_wctomb+0xe>
 800d2fe:	2aff      	cmp	r2, #255	; 0xff
 800d300:	d904      	bls.n	800d30c <__ascii_wctomb+0x12>
 800d302:	238a      	movs	r3, #138	; 0x8a
 800d304:	6003      	str	r3, [r0, #0]
 800d306:	3b8b      	subs	r3, #139	; 0x8b
 800d308:	0018      	movs	r0, r3
 800d30a:	4770      	bx	lr
 800d30c:	700a      	strb	r2, [r1, #0]
 800d30e:	2301      	movs	r3, #1
 800d310:	e7fa      	b.n	800d308 <__ascii_wctomb+0xe>

0800d312 <memmove>:
 800d312:	b510      	push	{r4, lr}
 800d314:	4288      	cmp	r0, r1
 800d316:	d902      	bls.n	800d31e <memmove+0xc>
 800d318:	188b      	adds	r3, r1, r2
 800d31a:	4298      	cmp	r0, r3
 800d31c:	d303      	bcc.n	800d326 <memmove+0x14>
 800d31e:	2300      	movs	r3, #0
 800d320:	e007      	b.n	800d332 <memmove+0x20>
 800d322:	5c8b      	ldrb	r3, [r1, r2]
 800d324:	5483      	strb	r3, [r0, r2]
 800d326:	3a01      	subs	r2, #1
 800d328:	d2fb      	bcs.n	800d322 <memmove+0x10>
 800d32a:	bd10      	pop	{r4, pc}
 800d32c:	5ccc      	ldrb	r4, [r1, r3]
 800d32e:	54c4      	strb	r4, [r0, r3]
 800d330:	3301      	adds	r3, #1
 800d332:	429a      	cmp	r2, r3
 800d334:	d1fa      	bne.n	800d32c <memmove+0x1a>
 800d336:	e7f8      	b.n	800d32a <memmove+0x18>

0800d338 <_realloc_r>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	0007      	movs	r7, r0
 800d33c:	000d      	movs	r5, r1
 800d33e:	0016      	movs	r6, r2
 800d340:	2900      	cmp	r1, #0
 800d342:	d105      	bne.n	800d350 <_realloc_r+0x18>
 800d344:	0011      	movs	r1, r2
 800d346:	f7fc fa39 	bl	80097bc <_malloc_r>
 800d34a:	0004      	movs	r4, r0
 800d34c:	0020      	movs	r0, r4
 800d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d350:	2a00      	cmp	r2, #0
 800d352:	d103      	bne.n	800d35c <_realloc_r+0x24>
 800d354:	f7fc f9e8 	bl	8009728 <_free_r>
 800d358:	0034      	movs	r4, r6
 800d35a:	e7f7      	b.n	800d34c <_realloc_r+0x14>
 800d35c:	f000 f812 	bl	800d384 <_malloc_usable_size_r>
 800d360:	002c      	movs	r4, r5
 800d362:	42b0      	cmp	r0, r6
 800d364:	d2f2      	bcs.n	800d34c <_realloc_r+0x14>
 800d366:	0031      	movs	r1, r6
 800d368:	0038      	movs	r0, r7
 800d36a:	f7fc fa27 	bl	80097bc <_malloc_r>
 800d36e:	1e04      	subs	r4, r0, #0
 800d370:	d0ec      	beq.n	800d34c <_realloc_r+0x14>
 800d372:	0029      	movs	r1, r5
 800d374:	0032      	movs	r2, r6
 800d376:	f7fc f9c5 	bl	8009704 <memcpy>
 800d37a:	0029      	movs	r1, r5
 800d37c:	0038      	movs	r0, r7
 800d37e:	f7fc f9d3 	bl	8009728 <_free_r>
 800d382:	e7e3      	b.n	800d34c <_realloc_r+0x14>

0800d384 <_malloc_usable_size_r>:
 800d384:	1f0b      	subs	r3, r1, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	1f18      	subs	r0, r3, #4
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	da01      	bge.n	800d392 <_malloc_usable_size_r+0xe>
 800d38e:	580b      	ldr	r3, [r1, r0]
 800d390:	18c0      	adds	r0, r0, r3
 800d392:	4770      	bx	lr

0800d394 <_init>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	46c0      	nop			; (mov r8, r8)
 800d398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d39a:	bc08      	pop	{r3}
 800d39c:	469e      	mov	lr, r3
 800d39e:	4770      	bx	lr

0800d3a0 <_fini>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	46c0      	nop			; (mov r8, r8)
 800d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a6:	bc08      	pop	{r3}
 800d3a8:	469e      	mov	lr, r3
 800d3aa:	4770      	bx	lr
