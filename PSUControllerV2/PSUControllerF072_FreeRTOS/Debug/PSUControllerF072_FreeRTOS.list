
PSUControllerF072_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006000  08006000  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006000  08006000  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006000  08006000  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  2000007c  08006084  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e0  08006084  000211e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170b4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003adc  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003ac38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa81  00000000  00000000  0003d160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d91  00000000  00000000  00057be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089d38  00000000  00000000  0006b972  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f56aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  000f5728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ce0 	.word	0x08005ce0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08005ce0 	.word	0x08005ce0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <UserDisplayTask>:
 *	@param None
 *	@retval
 *
 */
void UserDisplayTask()
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
	while (1)
	{
	  ILI9341_Draw_Text("TEST6", 10, 10, BLACK, 2, RED);
 8000226:	482e      	ldr	r0, [pc, #184]	; (80002e0 <UserDisplayTask+0xc0>)
 8000228:	4b2e      	ldr	r3, [pc, #184]	; (80002e4 <UserDisplayTask+0xc4>)
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2302      	movs	r3, #2
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2300      	movs	r3, #0
 8000232:	220a      	movs	r2, #10
 8000234:	210a      	movs	r1, #10
 8000236:	f004 f81b 	bl	8004270 <ILI9341_Draw_Text>

	  if(TSC2046_EM_GetTouchScreenState())
 800023a:	f004 ff59 	bl	80050f0 <TSC2046_EM_GetTouchScreenState>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d043      	beq.n	80002ca <UserDisplayTask+0xaa>
	  {
		  ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 8000242:	4829      	ldr	r0, [pc, #164]	; (80002e8 <UserDisplayTask+0xc8>)
 8000244:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <UserDisplayTask+0xc4>)
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2302      	movs	r3, #2
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	220a      	movs	r2, #10
 8000250:	2164      	movs	r1, #100	; 0x64
 8000252:	f004 f80d 	bl	8004270 <ILI9341_Draw_Text>
		  HAL_GPIO_TogglePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin);
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <UserDisplayTask+0xcc>)
 8000258:	2108      	movs	r1, #8
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fdf2 	bl	8001e44 <HAL_GPIO_TogglePin>

		  if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 8000260:	f004 ffb8 	bl	80051d4 <TSC2046_HM_RunConversion>
 8000264:	1e03      	subs	r3, r0, #0
 8000266:	d125      	bne.n	80002b4 <UserDisplayTask+0x94>
		  {
			  ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 8000268:	f005 f8bc 	bl	80053e4 <TSC4026_STM32_HM_GetXpos>
 800026c:	0003      	movs	r3, r0
 800026e:	001c      	movs	r4, r3
 8000270:	f005 f8c2 	bl	80053f8 <TSC4026_STM32_HM_GetYpos>
 8000274:	0003      	movs	r3, r0
 8000276:	0019      	movs	r1, r3
 8000278:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <UserDisplayTask+0xd0>)
 800027a:	2202      	movs	r2, #2
 800027c:	0020      	movs	r0, r4
 800027e:	f003 fe55 	bl	8003f2c <ILI9341_Draw_Filled_Circle>
			  char pos_string[15];
			  snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 8000282:	f005 f8af 	bl	80053e4 <TSC4026_STM32_HM_GetXpos>
 8000286:	0003      	movs	r3, r0
 8000288:	001c      	movs	r4, r3
 800028a:	f005 f8b5 	bl	80053f8 <TSC4026_STM32_HM_GetYpos>
 800028e:	0003      	movs	r3, r0
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <UserDisplayTask+0xd4>)
 8000292:	0038      	movs	r0, r7
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	0023      	movs	r3, r4
 8000298:	210f      	movs	r1, #15
 800029a:	f005 f911 	bl	80054c0 <sniprintf>
			  ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 800029e:	0038      	movs	r0, r7
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <UserDisplayTask+0xc4>)
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2302      	movs	r3, #2
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	220a      	movs	r2, #10
 80002ac:	21b4      	movs	r1, #180	; 0xb4
 80002ae:	f003 ffdf 	bl	8004270 <ILI9341_Draw_Text>
 80002b2:	e7b8      	b.n	8000226 <UserDisplayTask+0x6>
		  }
		  else
		  {
			  ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <UserDisplayTask+0xd8>)
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <UserDisplayTask+0xc4>)
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2302      	movs	r3, #2
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	220a      	movs	r2, #10
 80002c2:	21c8      	movs	r1, #200	; 0xc8
 80002c4:	f003 ffd4 	bl	8004270 <ILI9341_Draw_Text>
 80002c8:	e7ad      	b.n	8000226 <UserDisplayTask+0x6>
		  }
	  }
	  else
	  {
		  ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <UserDisplayTask+0xdc>)
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <UserDisplayTask+0xc4>)
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	220a      	movs	r2, #10
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	f003 ffc9 	bl	8004270 <ILI9341_Draw_Text>
	  ILI9341_Draw_Text("TEST6", 10, 10, BLACK, 2, RED);
 80002de:	e7a2      	b.n	8000226 <UserDisplayTask+0x6>
 80002e0:	08005cf8 	.word	0x08005cf8
 80002e4:	0000d8c3 	.word	0x0000d8c3
 80002e8:	08005d00 	.word	0x08005d00
 80002ec:	48000400 	.word	0x48000400
 80002f0:	0000ffff 	.word	0x0000ffff
 80002f4:	08005d08 	.word	0x08005d08
 80002f8:	08005d18 	.word	0x08005d18
 80002fc:	08005d24 	.word	0x08005d24

08000300 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	230c      	movs	r3, #12
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f005 f8cd 	bl	80054ae <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <MX_ADC_Init+0xb4>)
 8000318:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_ADC_Init+0xb0>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_ADC_Init+0xb0>)
 800032e:	2201      	movs	r2, #1
 8000330:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000334:	2204      	movs	r2, #4
 8000336:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_ADC_Init+0xb0>)
 800033a:	2200      	movs	r2, #0
 800033c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000346:	2201      	movs	r2, #1
 8000348:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <MX_ADC_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000352:	22c2      	movs	r2, #194	; 0xc2
 8000354:	32ff      	adds	r2, #255	; 0xff
 8000356:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_ADC_Init+0xb0>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000360:	2224      	movs	r2, #36	; 0x24
 8000362:	2101      	movs	r1, #1
 8000364:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000368:	2200      	movs	r2, #0
 800036a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_ADC_Init+0xb0>)
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fcba 	bl	8000ce8 <HAL_ADC_Init>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000378:	f000 fa15 	bl	80007a6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0152      	lsls	r2, r2, #5
 8000388:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	0552      	lsls	r2, r2, #21
 8000390:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000392:	1d3a      	adds	r2, r7, #4
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_ADC_Init+0xb0>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fe7f 	bl	800109c <HAL_ADC_ConfigChannel>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003a2:	f000 fa00 	bl	80007a6 <Error_Handler>
  }

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b004      	add	sp, #16
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	20001088 	.word	0x20001088
 80003b4:	40012400 	.word	0x40012400

080003b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	2314      	movs	r3, #20
 80003c2:	18fb      	adds	r3, r7, r3
 80003c4:	0018      	movs	r0, r3
 80003c6:	2314      	movs	r3, #20
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f005 f86f 	bl	80054ae <memset>
  if(adcHandle->Instance==ADC1)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a2d      	ldr	r2, [pc, #180]	; (800048c <HAL_ADC_MspInit+0xd4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d154      	bne.n	8000484 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 80003dc:	699a      	ldr	r2, [r3, #24]
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	0089      	lsls	r1, r1, #2
 80003e4:	430a      	orrs	r2, r1
 80003e6:	619a      	str	r2, [r3, #24]
 80003e8:	4b29      	ldr	r3, [pc, #164]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4013      	ands	r3, r2
 80003f2:	613b      	str	r3, [r7, #16]
 80003f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0289      	lsls	r1, r1, #10
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b22      	ldr	r3, [pc, #136]	; (8000490 <HAL_ADC_MspInit+0xd8>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	4013      	ands	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000412:	2114      	movs	r1, #20
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2203      	movs	r2, #3
 800041e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	187a      	adds	r2, r7, r1
 8000428:	2390      	movs	r3, #144	; 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f001 fb56 	bl	8001ae0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <HAL_ADC_MspInit+0xe0>)
 8000438:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 800045e:	2220      	movs	r2, #32
 8000460:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 f9a0 	bl	80017b0 <HAL_DMA_Init>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000474:	f000 f997 	bl	80007a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a06      	ldr	r2, [pc, #24]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 800047c:	631a      	str	r2, [r3, #48]	; 0x30
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_ADC_MspInit+0xdc>)
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b00a      	add	sp, #40	; 0x28
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	20001044 	.word	0x20001044
 8000498:	40020008 	.word	0x40020008

0800049c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_DMA_Init+0x38>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_DMA_Init+0x38>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	615a      	str	r2, [r3, #20]
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_DMA_Init+0x38>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2103      	movs	r1, #3
 80004be:	2009      	movs	r0, #9
 80004c0:	f001 f944 	bl	800174c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004c4:	2009      	movs	r0, #9
 80004c6:	f001 f956 	bl	8001776 <HAL_NVIC_EnableIRQ>

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40021000 	.word	0x40021000

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x28>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b004      	add	sp, #16
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	20000098 	.word	0x20000098
 8000504:	200000ec 	.word	0x200000ec

08000508 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <MX_FREERTOS_Init+0x30>)
 8000512:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000514:	c313      	stmia	r3!, {r0, r1, r4}
 8000516:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000518:	c313      	stmia	r3!, {r0, r1, r4}
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2100      	movs	r1, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fc63 	bl	8002dee <osThreadCreate>
 8000528:	0002      	movs	r2, r0
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <MX_FREERTOS_Init+0x34>)
 800052c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b009      	add	sp, #36	; 0x24
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	08005d38 	.word	0x08005d38
 800053c:	200010c8 	.word	0x200010c8

08000540 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	UserDisplayTask();
 8000548:	f7ff fe6a 	bl	8000220 <UserDisplayTask>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f002 fc9b 	bl	8002e88 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0xc>

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f004 ffa2 	bl	80054ae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <MX_GPIO_Init+0x134>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b46      	ldr	r3, [pc, #280]	; (8000688 <MX_GPIO_Init+0x134>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0289      	lsls	r1, r1, #10
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <MX_GPIO_Init+0x134>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	029b      	lsls	r3, r3, #10
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b40      	ldr	r3, [pc, #256]	; (8000688 <MX_GPIO_Init+0x134>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <MX_GPIO_Init+0x134>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0309      	lsls	r1, r1, #12
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <MX_GPIO_Init+0x134>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	031b      	lsls	r3, r3, #12
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <MX_GPIO_Init+0x134>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b38      	ldr	r3, [pc, #224]	; (8000688 <MX_GPIO_Init+0x134>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	02c9      	lsls	r1, r1, #11
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <MX_GPIO_Init+0x134>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	02db      	lsls	r3, r3, #11
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_GPIO_Init+0x138>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	2130      	movs	r1, #48	; 0x30
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fc20 	bl	8001e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 80005ca:	4931      	ldr	r1, [pc, #196]	; (8000690 <MX_GPIO_Init+0x13c>)
 80005cc:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_GPIO_Init+0x140>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fc1a 	bl	8001e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 80005d6:	0021      	movs	r1, r4
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2201      	movs	r2, #1
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2203      	movs	r2, #3
 80005ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f0:	000c      	movs	r4, r1
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	4a25      	ldr	r2, [pc, #148]	; (800068c <MX_GPIO_Init+0x138>)
 80005f6:	0019      	movs	r1, r3
 80005f8:	0010      	movs	r0, r2
 80005fa:	f001 fa71 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <MX_GPIO_Init+0x144>)
 8000604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2201      	movs	r2, #1
 800060a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2203      	movs	r2, #3
 8000616:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	000c      	movs	r4, r1
 800061a:	187b      	adds	r3, r7, r1
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <MX_GPIO_Init+0x140>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f001 fa5d 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 8000626:	0021      	movs	r1, r4
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <MX_GPIO_Init+0x148>)
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2201      	movs	r2, #1
 8000638:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 800063a:	000c      	movs	r4, r1
 800063c:	187b      	adds	r3, r7, r1
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_GPIO_Init+0x138>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f001 fa4c 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2208      	movs	r2, #8
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2202      	movs	r2, #2
 800065a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 8000662:	187b      	adds	r3, r7, r1
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_GPIO_Init+0x140>)
 8000666:	0019      	movs	r1, r3
 8000668:	0010      	movs	r0, r2
 800066a:	f001 fa39 	bl	8001ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2103      	movs	r1, #3
 8000672:	2007      	movs	r0, #7
 8000674:	f001 f86a 	bl	800174c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000678:	2007      	movs	r0, #7
 800067a:	f001 f87c 	bl	8001776 <HAL_NVIC_EnableIRQ>

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b009      	add	sp, #36	; 0x24
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000
 800068c:	48000800 	.word	0x48000800
 8000690:	00001009 	.word	0x00001009
 8000694:	48000400 	.word	0x48000400
 8000698:	00001001 	.word	0x00001001
 800069c:	10210000 	.word	0x10210000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fa9a 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f82c 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f7ff ff52 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b0:	f7ff fef4 	bl	800049c <MX_DMA_Init>
  MX_SPI1_Init();
 80006b4:	f000 f87c 	bl	80007b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006b8:	f000 f8b8 	bl	800082c <MX_SPI2_Init>
  MX_TIM17_Init();
 80006bc:	f000 fa14 	bl	8000ae8 <MX_TIM17_Init>
  MX_ADC_Init();
 80006c0:	f7ff fe1e 	bl	8000300 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // init ILI9341 library
  ILI9341_Init();
 80006c4:	f003 fe45 	bl	8004352 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f004 fab7 	bl	8004c3c <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(BLUE);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <main+0x58>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f004 f847 	bl	8004764 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 80006d6:	f004 fd49 	bl	800516c <TSC2046_HM_Init>

  HAL_ADCEx_Calibration_Start(&hadc);
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <main+0x5c>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 feeb 	bl	80014b8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, adc_data, ADC_DATA_SIZE);
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <main+0x60>)
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <main+0x5c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fc3d 	bl	8000f68 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80006ee:	f7ff ff0b 	bl	8000508 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006f2:	f002 fb74 	bl	8002dde <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0x56>
 80006f8:	000002fd 	.word	0x000002fd
 80006fc:	20001088 	.word	0x20001088
 8000700:	200002ec 	.word	0x200002ec

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b093      	sub	sp, #76	; 0x4c
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	2414      	movs	r4, #20
 800070c:	193b      	adds	r3, r7, r4
 800070e:	0018      	movs	r0, r3
 8000710:	2334      	movs	r3, #52	; 0x34
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f004 feca 	bl	80054ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	0018      	movs	r0, r3
 800071e:	2310      	movs	r3, #16
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f004 fec3 	bl	80054ae <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000728:	0021      	movs	r1, r4
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2212      	movs	r2, #18
 800072e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2201      	movs	r2, #1
 8000734:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2210      	movs	r2, #16
 8000740:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2210      	movs	r2, #16
 8000746:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0212      	lsls	r2, r2, #8
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0352      	lsls	r2, r2, #13
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	187b      	adds	r3, r7, r1
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fbae 	bl	8001ec8 <HAL_RCC_OscConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000770:	f000 f819 	bl	80007a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2207      	movs	r2, #7
 8000778:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2202      	movs	r2, #2
 800077e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f001 ff1f 	bl	80025d4 <HAL_RCC_ClockConfig>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079a:	f000 f804 	bl	80007a6 <Error_Handler>
  }
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b013      	add	sp, #76	; 0x4c
 80007a4:	bd90      	pop	{r4, r7, pc}

080007a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_SPI1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_SPI1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_SPI1_Init+0x74>)
 80007bc:	2282      	movs	r2, #130	; 0x82
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ca:	22e0      	movs	r2, #224	; 0xe0
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x74>)
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x74>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x74>)
 80007fe:	2207      	movs	r2, #7
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_SPI1_Init+0x74>)
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f837 	bl	8002884 <HAL_SPI_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f7ff ffc4 	bl	80007a6 <Error_Handler>
  }

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20001130 	.word	0x20001130
 8000828:	40013000 	.word	0x40013000

0800082c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_SPI2_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000838:	2282      	movs	r2, #130	; 0x82
 800083a:	0052      	lsls	r2, r2, #1
 800083c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000846:	22e0      	movs	r2, #224	; 0xe0
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI2_Init+0x74>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000862:	2210      	movs	r2, #16
 8000864:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI2_Init+0x74>)
 800087a:	2207      	movs	r2, #7
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <MX_SPI2_Init+0x74>)
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fff9 	bl	8002884 <HAL_SPI_Init>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000896:	f7ff ff86 	bl	80007a6 <Error_Handler>
  }

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200010cc 	.word	0x200010cc
 80008a4:	40003800 	.word	0x40003800

080008a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	231c      	movs	r3, #28
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	0018      	movs	r0, r3
 80008b6:	2314      	movs	r3, #20
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f004 fdf7 	bl	80054ae <memset>
  if(spiHandle->Instance==SPI1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a39      	ldr	r2, [pc, #228]	; (80009ac <HAL_SPI_MspInit+0x104>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d133      	bne.n	8000932 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0149      	lsls	r1, r1, #5
 80008d4:	430a      	orrs	r2, r1
 80008d6:	619a      	str	r2, [r3, #24]
 80008d8:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008da:	699a      	ldr	r2, [r3, #24]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	015b      	lsls	r3, r3, #5
 80008e0:	4013      	ands	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000902:	211c      	movs	r1, #28
 8000904:	187b      	adds	r3, r7, r1
 8000906:	22e0      	movs	r2, #224	; 0xe0
 8000908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2202      	movs	r2, #2
 800090e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2203      	movs	r2, #3
 800091a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	187a      	adds	r2, r7, r1
 8000924:	2390      	movs	r3, #144	; 0x90
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f001 f8d8 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000930:	e037      	b.n	80009a2 <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_SPI_MspInit+0x10c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d132      	bne.n	80009a2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	01c9      	lsls	r1, r1, #7
 8000946:	430a      	orrs	r2, r1
 8000948:	61da      	str	r2, [r3, #28]
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 800094c:	69da      	ldr	r2, [r3, #28]
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	01db      	lsls	r3, r3, #7
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	02c9      	lsls	r1, r1, #11
 8000962:	430a      	orrs	r2, r1
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_SPI_MspInit+0x108>)
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	02db      	lsls	r3, r3, #11
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8000974:	211c      	movs	r1, #28
 8000976:	187b      	adds	r3, r7, r1
 8000978:	22e0      	movs	r2, #224	; 0xe0
 800097a:	0212      	lsls	r2, r2, #8
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2202      	movs	r2, #2
 8000982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2203      	movs	r2, #3
 800098e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	187b      	adds	r3, r7, r1
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_SPI_MspInit+0x110>)
 800099a:	0019      	movs	r1, r3
 800099c:	0010      	movs	r0, r2
 800099e:	f001 f89f 	bl	8001ae0 <HAL_GPIO_Init>
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b00c      	add	sp, #48	; 0x30
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40013000 	.word	0x40013000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40003800 	.word	0x40003800
 80009b8:	48000400 	.word	0x48000400

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x50>)
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_MspInit+0x50>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	430a      	orrs	r2, r1
 80009cc:	619a      	str	r2, [r3, #24]
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x50>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	2201      	movs	r2, #1
 80009d4:	4013      	ands	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x50>)
 80009dc:	69da      	ldr	r2, [r3, #28]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x50>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0549      	lsls	r1, r1, #21
 80009e4:	430a      	orrs	r2, r1
 80009e6:	61da      	str	r2, [r3, #28]
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x50>)
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	055b      	lsls	r3, r3, #21
 80009f0:	4013      	ands	r3, r2
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009f6:	2302      	movs	r3, #2
 80009f8:	425b      	negs	r3, r3
 80009fa:	2200      	movs	r2, #0
 80009fc:	2103      	movs	r1, #3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fea4 	bl	800174c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f922 	bl	8000c6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a28:	f002 ff38 	bl	800389c <xTaskGetSchedulerState>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d001      	beq.n	8000a36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a32:	f003 f899 	bl	8003b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	TSC2046_IM_PENIRQ_EXTI_Handler();
 8000a40:	f004 fce4 	bl	800540c <TSC2046_IM_PENIRQ_EXTI_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a44:	2040      	movs	r0, #64	; 0x40
 8000a46:	f001 fa19 	bl	8001e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <DMA1_Channel1_IRQHandler+0x14>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 ff58 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20001044 	.word	0x20001044

08000a68 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	TSC2046_IM_HardwareManagerLoopHandler();
 8000a6c:	f004 fcd6 	bl	800541c <TSC2046_IM_HardwareManagerLoopHandler>
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <TIM17_IRQHandler+0x18>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 ffcc 	bl	8002a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20001194 	.word	0x20001194

08000a84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x50>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x16>
		heap_end = &end;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <_sbrk+0x50>)
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <_sbrk+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <_sbrk+0x50>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <_sbrk+0x50>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	18d3      	adds	r3, r2, r3
 8000aa8:	466a      	mov	r2, sp
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d907      	bls.n	8000abe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aae:	f004 fccb 	bl	8005448 <__errno>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	220c      	movs	r2, #12
 8000ab6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	e006      	b.n	8000acc <_sbrk+0x48>
	}

	heap_end += incr;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <_sbrk+0x50>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	18d2      	adds	r2, r2, r3
 8000ac6:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <_sbrk+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200002f0 	.word	0x200002f0
 8000ad8:	200011e0 	.word	0x200011e0

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <MX_TIM17_Init+0x4c>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	00d2      	lsls	r2, r2, #3
 8000b04:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <MX_TIM17_Init+0x48>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 ff4c 	bl	80029b8 <HAL_TIM_Base_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000b24:	f7ff fe3f 	bl	80007a6 <Error_Handler>
  }

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20001194 	.word	0x20001194
 8000b34:	40014800 	.word	0x40014800

08000b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_TIM_Base_MspInit+0x48>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d115      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	02c9      	lsls	r1, r1, #11
 8000b54:	430a      	orrs	r2, r1
 8000b56:	619a      	str	r2, [r3, #24]
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b5a:	699a      	ldr	r2, [r3, #24]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	02db      	lsls	r3, r3, #11
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2103      	movs	r1, #3
 8000b6a:	2016      	movs	r0, #22
 8000b6c:	f000 fdee 	bl	800174c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000b70:	2016      	movs	r0, #22
 8000b72:	f000 fe00 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40014800 	.word	0x40014800
 8000b84:	40021000 	.word	0x40021000

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb2:	f7ff ff93 	bl	8000adc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f004 fc4d 	bl	8005454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fd71 	bl	80006a0 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bcc:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 8000bd0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bd4:	200011e0 	.word	0x200011e0

08000bd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_COMP_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fee3 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa75 	bl	8000108 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa70 	bl	8000108 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fdb3 	bl	8001796 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fd80 	bl	800174c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200011d4 	.word	0x200011d4

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200011d4 	.word	0x200011d4

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_Delay+0x40>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b004      	add	sp, #16
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e125      	b.n	8000f52 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10a      	bne.n	8000d24 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2234      	movs	r2, #52	; 0x34
 8000d18:	2100      	movs	r1, #0
 8000d1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fb4a 	bl	80003b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d28:	2210      	movs	r2, #16
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d000      	beq.n	8000d30 <HAL_ADC_Init+0x48>
 8000d2e:	e103      	b.n	8000f38 <HAL_ADC_Init+0x250>
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d000      	beq.n	8000d3c <HAL_ADC_Init+0x54>
 8000d3a:	e0fd      	b.n	8000f38 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2204      	movs	r2, #4
 8000d44:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d46:	d000      	beq.n	8000d4a <HAL_ADC_Init+0x62>
 8000d48:	e0f6      	b.n	8000f38 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	4a83      	ldr	r2, [pc, #524]	; (8000f5c <HAL_ADC_Init+0x274>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	2202      	movs	r2, #2
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d112      	bne.n	8000d8e <HAL_ADC_Init+0xa6>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d009      	beq.n	8000d8a <HAL_ADC_Init+0xa2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	401a      	ands	r2, r3
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Init+0xa6>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_ADC_Init+0xa8>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d116      	bne.n	8000dc2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2218      	movs	r2, #24
 8000d9c:	4393      	bics	r3, r2
 8000d9e:	0019      	movs	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	0899      	lsrs	r1, r3, #2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4964      	ldr	r1, [pc, #400]	; (8000f60 <HAL_ADC_Init+0x278>)
 8000dce:	400a      	ands	r2, r1
 8000dd0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e1b      	ldrb	r3, [r3, #24]
 8000dd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7e5b      	ldrb	r3, [r3, #25]
 8000ddc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dde:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7e9b      	ldrb	r3, [r3, #26]
 8000de4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000de6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d002      	beq.n	8000df6 <HAL_ADC_Init+0x10e>
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	e000      	b.n	8000df8 <HAL_ADC_Init+0x110>
 8000df6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000df8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000dfe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_Init+0x124>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e000      	b.n	8000e0e <HAL_ADC_Init+0x126>
 8000e0c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2124      	movs	r1, #36	; 0x24
 8000e14:	5c5b      	ldrb	r3, [r3, r1]
 8000e16:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e18:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7edb      	ldrb	r3, [r3, #27]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d115      	bne.n	8000e54 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7e9b      	ldrb	r3, [r3, #26]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	0252      	lsls	r2, r2, #9
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	e00b      	b.n	8000e54 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	2220      	movs	r2, #32
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69da      	ldr	r2, [r3, #28]
 8000e58:	23c2      	movs	r3, #194	; 0xc2
 8000e5a:	33ff      	adds	r3, #255	; 0xff
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d007      	beq.n	8000e70 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68d9      	ldr	r1, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	055b      	lsls	r3, r3, #21
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d01b      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d017      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d00f      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d007      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d003      	beq.n	8000ec4 <HAL_ADC_Init+0x1dc>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d112      	bne.n	8000eea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2107      	movs	r1, #7
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6959      	ldr	r1, [r3, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ede:	2207      	movs	r2, #7
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_ADC_Init+0x27c>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d10b      	bne.n	8000f12 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f04:	2203      	movs	r2, #3
 8000f06:	4393      	bics	r3, r2
 8000f08:	2201      	movs	r2, #1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f10:	e01c      	b.n	8000f4c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f16:	2212      	movs	r2, #18
 8000f18:	4393      	bics	r3, r2
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f26:	2201      	movs	r2, #1
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f36:	e009      	b.n	8000f4c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	781b      	ldrb	r3, [r3, #0]
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	fffffefd 	.word	0xfffffefd
 8000f60:	fffe0219 	.word	0xfffe0219
 8000f64:	833fffe7 	.word	0x833fffe7

08000f68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2317      	movs	r3, #23
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2204      	movs	r2, #4
 8000f84:	4013      	ands	r3, r2
 8000f86:	d15e      	bne.n	8001046 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2234      	movs	r2, #52	; 0x34
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_Start_DMA+0x2e>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e05e      	b.n	8001054 <HAL_ADC_Start_DMA+0xec>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2234      	movs	r2, #52	; 0x34
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	7e5b      	ldrb	r3, [r3, #25]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d007      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fa6:	2317      	movs	r3, #23
 8000fa8:	18fc      	adds	r4, r7, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 f983 	bl	80012b8 <ADC_Enable>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fb6:	2317      	movs	r3, #23
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d146      	bne.n	800104e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_ADC_Start_DMA+0xf4>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0052      	lsls	r2, r2, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2234      	movs	r2, #52	; 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <HAL_ADC_Start_DMA+0xf8>)
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_ADC_Start_DMA+0xfc>)
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_ADC_Start_DMA+0x100>)
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	221c      	movs	r2, #28
 8000ffe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2110      	movs	r1, #16
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3340      	adds	r3, #64	; 0x40
 800102a:	0019      	movs	r1, r3
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f000 fc06 	bl	8001840 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2104      	movs	r1, #4
 8001040:	430a      	orrs	r2, r1
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	e003      	b.n	800104e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001046:	2317      	movs	r3, #23
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2202      	movs	r2, #2
 800104c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800104e:	2317      	movs	r3, #23
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	781b      	ldrb	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b007      	add	sp, #28
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	fffff0fe 	.word	0xfffff0fe
 8001060:	080013b1 	.word	0x080013b1
 8001064:	08001465 	.word	0x08001465
 8001068:	08001483 	.word	0x08001483

0800106c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	055b      	lsls	r3, r3, #21
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d011      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x46>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d00d      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x46>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d009      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x46>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d005      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x46>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d001      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x46>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2234      	movs	r2, #52	; 0x34
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x54>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e0d0      	b.n	8001292 <HAL_ADC_ConfigChannel+0x1f6>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2234      	movs	r2, #52	; 0x34
 80010f4:	2101      	movs	r1, #1
 80010f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	d000      	beq.n	8001106 <HAL_ADC_ConfigChannel+0x6a>
 8001104:	e0b4      	b.n	8001270 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a64      	ldr	r2, [pc, #400]	; (800129c <HAL_ADC_ConfigChannel+0x200>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d100      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x76>
 8001110:	e082      	b.n	8001218 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	409a      	lsls	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	055b      	lsls	r3, r3, #21
 8001130:	429a      	cmp	r2, r3
 8001132:	d037      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	2b01      	cmp	r3, #1
 800113a:	d033      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	2b02      	cmp	r3, #2
 8001142:	d02f      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b03      	cmp	r3, #3
 800114a:	d02b      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	2b04      	cmp	r3, #4
 8001152:	d027      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	2b05      	cmp	r3, #5
 800115a:	d023      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b06      	cmp	r3, #6
 8001162:	d01f      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b07      	cmp	r3, #7
 800116a:	d01b      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2107      	movs	r1, #7
 8001178:	400b      	ands	r3, r1
 800117a:	429a      	cmp	r2, r3
 800117c:	d012      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2107      	movs	r1, #7
 800118a:	438a      	bics	r2, r1
 800118c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6959      	ldr	r1, [r3, #20]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2207      	movs	r2, #7
 800119a:	401a      	ands	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b10      	cmp	r3, #16
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_ConfigChannel+0x120>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b11      	cmp	r3, #17
 80011b2:	d003      	beq.n	80011bc <HAL_ADC_ConfigChannel+0x120>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d163      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_ADC_ConfigChannel+0x204>)
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d009      	beq.n	80011dc <HAL_ADC_ConfigChannel+0x140>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b11      	cmp	r3, #17
 80011ce:	d102      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x13a>
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	03db      	lsls	r3, r3, #15
 80011d4:	e004      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x144>
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	045b      	lsls	r3, r3, #17
 80011da:	e001      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x144>
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	4a2f      	ldr	r2, [pc, #188]	; (80012a0 <HAL_ADC_ConfigChannel+0x204>)
 80011e2:	430b      	orrs	r3, r1
 80011e4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d14a      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_ADC_ConfigChannel+0x208>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	492d      	ldr	r1, [pc, #180]	; (80012a8 <HAL_ADC_ConfigChannel+0x20c>)
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7fe ff87 	bl	8000108 <__udivsi3>
 80011fa:	0003      	movs	r3, r0
 80011fc:	001a      	movs	r2, r3
 80011fe:	0013      	movs	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	189b      	adds	r3, r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001208:	e002      	b.n	8001210 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3b01      	subs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <HAL_ADC_ConfigChannel+0x16e>
 8001216:	e035      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2101      	movs	r1, #1
 8001224:	4099      	lsls	r1, r3
 8001226:	000b      	movs	r3, r1
 8001228:	43d9      	mvns	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d007      	beq.n	800124a <HAL_ADC_ConfigChannel+0x1ae>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b11      	cmp	r3, #17
 8001240:	d003      	beq.n	800124a <HAL_ADC_ConfigChannel+0x1ae>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b12      	cmp	r3, #18
 8001248:	d11c      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_ADC_ConfigChannel+0x204>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d007      	beq.n	8001266 <HAL_ADC_ConfigChannel+0x1ca>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b11      	cmp	r3, #17
 800125c:	d101      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1c6>
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_ADC_ConfigChannel+0x210>)
 8001260:	e002      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1cc>
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_ADC_ConfigChannel+0x214>)
 8001264:	e000      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1cc>
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_ADC_ConfigChannel+0x218>)
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_ADC_ConfigChannel+0x204>)
 800126a:	400b      	ands	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e009      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	2220      	movs	r2, #32
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800127c:	230f      	movs	r3, #15
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2234      	movs	r2, #52	; 0x34
 8001288:	2100      	movs	r1, #0
 800128a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	781b      	ldrb	r3, [r3, #0]
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	00001001 	.word	0x00001001
 80012a0:	40012708 	.word	0x40012708
 80012a4:	20000000 	.word	0x20000000
 80012a8:	000f4240 	.word	0x000f4240
 80012ac:	ffbfffff 	.word	0xffbfffff
 80012b0:	feffffff 	.word	0xfeffffff
 80012b4:	ff7fffff 	.word	0xff7fffff

080012b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2203      	movs	r2, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d112      	bne.n	80012fc <ADC_Enable+0x44>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d009      	beq.n	80012f8 <ADC_Enable+0x40>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	401a      	ands	r2, r3
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d101      	bne.n	80012fc <ADC_Enable+0x44>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <ADC_Enable+0x46>
 80012fc:	2300      	movs	r3, #0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d14b      	bne.n	800139a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <ADC_Enable+0xec>)
 800130a:	4013      	ands	r3, r2
 800130c:	d00d      	beq.n	800132a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	2210      	movs	r2, #16
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2201      	movs	r2, #1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e038      	b.n	800139c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <ADC_Enable+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	491b      	ldr	r1, [pc, #108]	; (80013ac <ADC_Enable+0xf4>)
 8001340:	0018      	movs	r0, r3
 8001342:	f7fe fee1 	bl	8000108 <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800134a:	e002      	b.n	8001352 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3b01      	subs	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f9      	bne.n	800134c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001358:	f7ff fc9a 	bl	8000c90 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001360:	e014      	b.n	800138c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001362:	f7ff fc95 	bl	8000c90 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d90d      	bls.n	800138c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	2210      	movs	r2, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	2201      	movs	r2, #1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e007      	b.n	800139c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	2b01      	cmp	r3, #1
 8001398:	d1e3      	bne.n	8001362 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b004      	add	sp, #16
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	80000017 	.word	0x80000017
 80013a8:	20000000 	.word	0x20000000
 80013ac:	000f4240 	.word	0x000f4240

080013b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	2250      	movs	r2, #80	; 0x50
 80013c4:	4013      	ands	r3, r2
 80013c6:	d140      	bne.n	800144a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	431a      	orrs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4013      	ands	r3, r2
 80013e2:	d12d      	bne.n	8001440 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d129      	bne.n	8001440 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2208      	movs	r2, #8
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d122      	bne.n	8001440 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d110      	bne.n	8001428 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	210c      	movs	r1, #12
 8001412:	438a      	bics	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <ADC_DMAConvCplt+0xb0>)
 800141c:	4013      	ands	r3, r2
 800141e:	2201      	movs	r2, #1
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
 8001426:	e00b      	b.n	8001440 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142c:	2220      	movs	r2, #32
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	2201      	movs	r2, #1
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe12 	bl	800106c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001448:	e005      	b.n	8001456 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	0010      	movs	r0, r2
 8001454:	4798      	blx	r3
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b004      	add	sp, #16
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	fffffefe 	.word	0xfffffefe

08001464 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fe01 	bl	800107c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}

08001482 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	2204      	movs	r2, #4
 80014a2:	431a      	orrs	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fdee 	bl	800108c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c0:	2317      	movs	r3, #23
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_ADCEx_Calibration_Start+0x26>
 80014da:	2302      	movs	r3, #2
 80014dc:	e084      	b.n	80015e8 <HAL_ADCEx_Calibration_Start+0x130>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2234      	movs	r2, #52	; 0x34
 80014e2:	2101      	movs	r1, #1
 80014e4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d112      	bne.n	800151a <HAL_ADCEx_Calibration_Start+0x62>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d009      	beq.n	8001516 <HAL_ADCEx_Calibration_Start+0x5e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	401a      	ands	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	429a      	cmp	r2, r3
 8001514:	d101      	bne.n	800151a <HAL_ADCEx_Calibration_Start+0x62>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_ADCEx_Calibration_Start+0x64>
 800151a:	2300      	movs	r3, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d152      	bne.n	80015c6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_ADCEx_Calibration_Start+0x138>)
 8001526:	4013      	ands	r3, r2
 8001528:	2202      	movs	r2, #2
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2203      	movs	r2, #3
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2103      	movs	r1, #3
 8001548:	438a      	bics	r2, r1
 800154a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0609      	lsls	r1, r1, #24
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800155e:	f7ff fb97 	bl	8000c90 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001566:	e014      	b.n	8001592 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001568:	f7ff fb92 	bl	8000c90 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d90d      	bls.n	8001592 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	2212      	movs	r2, #18
 800157c:	4393      	bics	r3, r2
 800157e:	2210      	movs	r2, #16
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2234      	movs	r2, #52	; 0x34
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e02a      	b.n	80015e8 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0fdb      	lsrs	r3, r3, #31
 800159a:	07da      	lsls	r2, r3, #31
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d0e1      	beq.n	8001568 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68d9      	ldr	r1, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	2203      	movs	r2, #3
 80015ba:	4393      	bics	r3, r2
 80015bc:	2201      	movs	r2, #1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
 80015c4:	e009      	b.n	80015da <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	2220      	movs	r2, #32
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80015d2:	2317      	movs	r3, #23
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2234      	movs	r2, #52	; 0x34
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	2317      	movs	r3, #23
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b006      	add	sp, #24
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	fffffefd 	.word	0xfffffefd

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dfb      	adds	r3, r7, #7
 80015fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b7f      	cmp	r3, #127	; 0x7f
 8001606:	d809      	bhi.n	800161c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	231f      	movs	r3, #31
 8001610:	401a      	ands	r2, r3
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_EnableIRQ+0x30>)
 8001614:	2101      	movs	r1, #1
 8001616:	4091      	lsls	r1, r2
 8001618:	000a      	movs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
  }
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	0002      	movs	r2, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b7f      	cmp	r3, #127	; 0x7f
 800163c:	d828      	bhi.n	8001690 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <__NVIC_SetPriority+0xd4>)
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	33c0      	adds	r3, #192	; 0xc0
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	589b      	ldr	r3, [r3, r2]
 800164e:	1dfa      	adds	r2, r7, #7
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	0011      	movs	r1, r2
 8001654:	2203      	movs	r2, #3
 8001656:	400a      	ands	r2, r1
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	21ff      	movs	r1, #255	; 0xff
 800165c:	4091      	lsls	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	43d2      	mvns	r2, r2
 8001662:	401a      	ands	r2, r3
 8001664:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	019b      	lsls	r3, r3, #6
 800166a:	22ff      	movs	r2, #255	; 0xff
 800166c:	401a      	ands	r2, r3
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0018      	movs	r0, r3
 8001674:	2303      	movs	r3, #3
 8001676:	4003      	ands	r3, r0
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167c:	481f      	ldr	r0, [pc, #124]	; (80016fc <__NVIC_SetPriority+0xd4>)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	430a      	orrs	r2, r1
 8001688:	33c0      	adds	r3, #192	; 0xc0
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800168e:	e031      	b.n	80016f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <__NVIC_SetPriority+0xd8>)
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	0019      	movs	r1, r3
 8001698:	230f      	movs	r3, #15
 800169a:	400b      	ands	r3, r1
 800169c:	3b08      	subs	r3, #8
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3306      	adds	r3, #6
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	18d3      	adds	r3, r2, r3
 80016a6:	3304      	adds	r3, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1dfa      	adds	r2, r7, #7
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	0011      	movs	r1, r2
 80016b0:	2203      	movs	r2, #3
 80016b2:	400a      	ands	r2, r1
 80016b4:	00d2      	lsls	r2, r2, #3
 80016b6:	21ff      	movs	r1, #255	; 0xff
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	43d2      	mvns	r2, r2
 80016be:	401a      	ands	r2, r3
 80016c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	019b      	lsls	r3, r3, #6
 80016c6:	22ff      	movs	r2, #255	; 0xff
 80016c8:	401a      	ands	r2, r3
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	2303      	movs	r3, #3
 80016d2:	4003      	ands	r3, r0
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <__NVIC_SetPriority+0xd8>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	001c      	movs	r4, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	4023      	ands	r3, r4
 80016e4:	3b08      	subs	r3, #8
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	3306      	adds	r3, #6
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	18c3      	adds	r3, r0, r3
 80016f0:	3304      	adds	r3, #4
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b003      	add	sp, #12
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <SysTick_Config+0x40>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e010      	b.n	800173c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SysTick_Config+0x44>)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	3a01      	subs	r2, #1
 8001720:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	2301      	movs	r3, #1
 8001724:	425b      	negs	r3, r3
 8001726:	2103      	movs	r1, #3
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff ff7d 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SysTick_Config+0x44>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x44>)
 8001736:	2207      	movs	r2, #7
 8001738:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	00ffffff 	.word	0x00ffffff
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	210f      	movs	r1, #15
 8001758:	187b      	adds	r3, r7, r1
 800175a:	1c02      	adds	r2, r0, #0
 800175c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	187b      	adds	r3, r7, r1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	0011      	movs	r1, r2
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	0002      	movs	r2, r0
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff ff33 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ffaf 	bl	8001704 <SysTick_Config>
 80017a6:	0003      	movs	r3, r0
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e036      	b.n	8001834 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2221      	movs	r2, #33	; 0x21
 80017ca:	2102      	movs	r1, #2
 80017cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_DMA_Init+0x8c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f946 	bl	8001aa8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2221      	movs	r2, #33	; 0x21
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}  
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	ffffc00f 	.word	0xffffc00f

08001840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800184e:	2317      	movs	r3, #23
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2220      	movs	r2, #32
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_DMA_Start_IT+0x24>
 8001860:	2302      	movs	r3, #2
 8001862:	e04f      	b.n	8001904 <HAL_DMA_Start_IT+0xc4>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2220      	movs	r2, #32
 8001868:	2101      	movs	r1, #1
 800186a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2221      	movs	r2, #33	; 0x21
 8001870:	5c9b      	ldrb	r3, [r3, r2]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d13a      	bne.n	80018ee <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2221      	movs	r2, #33	; 0x21
 800187c:	2102      	movs	r1, #2
 800187e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f8d7 	bl	8001a50 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	210e      	movs	r1, #14
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00f      	b.n	80018dc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	210a      	movs	r1, #10
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2104      	movs	r1, #4
 80018d8:	438a      	bics	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018f6:	2317      	movs	r3, #23
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
} 
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2204      	movs	r2, #4
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	d024      	beq.n	800197e <HAL_DMA_IRQHandler+0x72>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d020      	beq.n	800197e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	4013      	ands	r3, r2
 8001946:	d107      	bne.n	8001958 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2104      	movs	r1, #4
 8001954:	438a      	bics	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001960:	2104      	movs	r1, #4
 8001962:	4091      	lsls	r1, r2
 8001964:	000a      	movs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <HAL_DMA_IRQHandler+0x66>
 8001970:	e06a      	b.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	0010      	movs	r0, r2
 800197a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800197c:	e064      	b.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2202      	movs	r2, #2
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	d02b      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xda>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d027      	beq.n	80019e6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2220      	movs	r2, #32
 800199e:	4013      	ands	r3, r2
 80019a0:	d10b      	bne.n	80019ba <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	210a      	movs	r1, #10
 80019ae:	438a      	bics	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2221      	movs	r2, #33	; 0x21
 80019b6:	2101      	movs	r1, #1
 80019b8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	2102      	movs	r1, #2
 80019c4:	4091      	lsls	r1, r2
 80019c6:	000a      	movs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	2100      	movs	r1, #0
 80019d0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	0010      	movs	r0, r2
 80019e2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80019e4:	e030      	b.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2208      	movs	r2, #8
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	d028      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4013      	ands	r3, r2
 80019fc:	d024      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	210e      	movs	r1, #14
 8001a0a:	438a      	bics	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	2101      	movs	r1, #1
 8001a18:	4091      	lsls	r1, r2
 8001a1a:	000a      	movs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2221      	movs	r2, #33	; 0x21
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	0010      	movs	r0, r2
 8001a44:	4798      	blx	r3
    }
   }
}  
 8001a46:	e7ff      	b.n	8001a48 <HAL_DMA_IRQHandler+0x13c>
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	2101      	movs	r1, #1
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d108      	bne.n	8001a90 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a8e:	e007      	b.n	8001aa0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	60da      	str	r2, [r3, #12]
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <DMA_CalcBaseAndBitshift+0x30>)
 8001ab6:	4694      	mov	ip, r2
 8001ab8:	4463      	add	r3, ip
 8001aba:	2114      	movs	r1, #20
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fb23 	bl	8000108 <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	009a      	lsls	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <DMA_CalcBaseAndBitshift+0x34>)
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	bffdfff8 	.word	0xbffdfff8
 8001adc:	40020000 	.word	0x40020000

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e155      	b.n	8001d9c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	4091      	lsls	r1, r2
 8001afa:	000a      	movs	r2, r1
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d100      	bne.n	8001b08 <HAL_GPIO_Init+0x28>
 8001b06:	e146      	b.n	8001d96 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x38>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2107      	movs	r1, #7
 8001b44:	400b      	ands	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_GPIO_Init+0xd4>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	2201      	movs	r2, #1
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	055b      	lsls	r3, r3, #21
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d100      	bne.n	8001c54 <HAL_GPIO_Init+0x174>
 8001c52:	e0a0      	b.n	8001d96 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <HAL_GPIO_Init+0x2d4>)
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_GPIO_Init+0x2d4>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x2d4>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x2d8>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	589b      	ldr	r3, [r3, r2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	409a      	lsls	r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	2390      	movs	r3, #144	; 0x90
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_GPIO_Init+0x2dc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x1ea>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <HAL_GPIO_Init+0x2e0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x1e6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_GPIO_Init+0x2e4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x1e2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a44      	ldr	r2, [pc, #272]	; (8001dc8 <HAL_GPIO_Init+0x2e8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x1de>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x1f0>
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x1f0>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x1f0>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x1f0>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x1f0>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	2103      	movs	r1, #3
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x2d8>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cee:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	4013      	ands	r3, r2
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43da      	mvns	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	035b      	lsls	r3, r3, #13
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43da      	mvns	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	039b      	lsls	r3, r3, #14
 8001d84:	4013      	ands	r3, r2
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	1e13      	subs	r3, r2, #0
 8001da6:	d000      	beq.n	8001daa <HAL_GPIO_Init+0x2ca>
 8001da8:	e6a2      	b.n	8001af0 <HAL_GPIO_Init+0x10>
  } 
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b006      	add	sp, #24
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	48000400 	.word	0x48000400
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	48000c00 	.word	0x48000c00
 8001dc8:	48001000 	.word	0x48001000
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	000a      	movs	r2, r1
 8001dda:	1cbb      	adds	r3, r7, #2
 8001ddc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	1cba      	adds	r2, r7, #2
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	4013      	ands	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001dea:	230f      	movs	r3, #15
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
  }
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	0008      	movs	r0, r1
 8001e14:	0011      	movs	r1, r2
 8001e16:	1cbb      	adds	r3, r7, #2
 8001e18:	1c02      	adds	r2, r0, #0
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	1c7b      	adds	r3, r7, #1
 8001e1e:	1c0a      	adds	r2, r1, #0
 8001e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e22:	1c7b      	adds	r3, r7, #1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2a:	1cbb      	adds	r3, r7, #2
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e32:	e003      	b.n	8001e3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e34:	1cbb      	adds	r3, r7, #2
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	1cbb      	adds	r3, r7, #2
 8001e50:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	1cba      	adds	r2, r7, #2
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d005      	beq.n	8001e6a <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6a:	1cbb      	adds	r3, r7, #2
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b002      	add	sp, #8
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dbb      	adds	r3, r7, #6
 8001e86:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	1dba      	adds	r2, r7, #6
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	4013      	ands	r3, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e96:	1dba      	adds	r2, r7, #6
 8001e98:	8812      	ldrh	r2, [r2, #0]
 8001e9a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e9c:	1dbb      	adds	r3, r7, #6
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 f807 	bl	8001eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	0002      	movs	r2, r0
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 fb76 	bl	80025c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x20>
 8001ee6:	e08e      	b.n	8002006 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ee8:	4bc5      	ldr	r3, [pc, #788]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	220c      	movs	r2, #12
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00e      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	4bc2      	ldr	r3, [pc, #776]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	220c      	movs	r2, #12
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d117      	bne.n	8001f30 <HAL_RCC_OscConfig+0x68>
 8001f00:	4bbf      	ldr	r3, [pc, #764]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	401a      	ands	r2, r3
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10e      	bne.n	8001f30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4bbb      	ldr	r3, [pc, #748]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d100      	bne.n	8001f20 <HAL_RCC_OscConfig+0x58>
 8001f1e:	e071      	b.n	8002004 <HAL_RCC_OscConfig+0x13c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d000      	beq.n	8001f2a <HAL_RCC_OscConfig+0x62>
 8001f28:	e06c      	b.n	8002004 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f000 fb4c 	bl	80025c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x80>
 8001f38:	4bb1      	ldr	r3, [pc, #708]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4bb0      	ldr	r3, [pc, #704]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0249      	lsls	r1, r1, #9
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e02f      	b.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0xa2>
 8001f50:	4bab      	ldr	r3, [pc, #684]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4baa      	ldr	r3, [pc, #680]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f56:	49ab      	ldr	r1, [pc, #684]	; (8002204 <HAL_RCC_OscConfig+0x33c>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4ba8      	ldr	r3, [pc, #672]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4ba7      	ldr	r3, [pc, #668]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f62:	49a9      	ldr	r1, [pc, #676]	; (8002208 <HAL_RCC_OscConfig+0x340>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e01e      	b.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d10e      	bne.n	8001f90 <HAL_RCC_OscConfig+0xc8>
 8001f72:	4ba3      	ldr	r3, [pc, #652]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4ba2      	ldr	r3, [pc, #648]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	02c9      	lsls	r1, r1, #11
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b9f      	ldr	r3, [pc, #636]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	0249      	lsls	r1, r1, #9
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xe0>
 8001f90:	4b9b      	ldr	r3, [pc, #620]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b9a      	ldr	r3, [pc, #616]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f96:	499b      	ldr	r1, [pc, #620]	; (8002204 <HAL_RCC_OscConfig+0x33c>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4b98      	ldr	r3, [pc, #608]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b97      	ldr	r3, [pc, #604]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001fa2:	4999      	ldr	r1, [pc, #612]	; (8002208 <HAL_RCC_OscConfig+0x340>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fe6e 	bl	8000c90 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fba:	f7fe fe69 	bl	8000c90 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e2fd      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0xf2>
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fe59 	bl	8000c90 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe54 	bl	8000c90 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e2e8      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b82      	ldr	r3, [pc, #520]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x11c>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d100      	bne.n	8002012 <HAL_RCC_OscConfig+0x14a>
 8002010:	e06c      	b.n	80020ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	220c      	movs	r2, #12
 8002018:	4013      	ands	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800201c:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	220c      	movs	r2, #12
 8002022:	4013      	ands	r3, r2
 8002024:	2b08      	cmp	r3, #8
 8002026:	d11f      	bne.n	8002068 <HAL_RCC_OscConfig+0x1a0>
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	401a      	ands	r2, r3
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	429a      	cmp	r2, r3
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	d005      	beq.n	8002050 <HAL_RCC_OscConfig+0x188>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e2bb      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22f8      	movs	r2, #248	; 0xf8
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00da      	lsls	r2, r3, #3
 8002060:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e041      	b.n	80020ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d024      	beq.n	80020ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fe08 	bl	8000c90 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fe03 	bl	8000c90 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e297      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d0f1      	beq.n	8002086 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	22f8      	movs	r2, #248	; 0xf8
 80020a8:	4393      	bics	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00da      	lsls	r2, r3, #3
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e018      	b.n	80020ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b51      	ldr	r3, [pc, #324]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fde3 	bl	8000c90 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fdde 	bl	8000c90 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e272      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2202      	movs	r2, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f1      	bne.n	80020d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4013      	ands	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7fe fdc1 	bl	8000c90 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe fdbc 	bl	8000c90 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e250      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d0f1      	beq.n	8002114 <HAL_RCC_OscConfig+0x24c>
 8002130:	e018      	b.n	8002164 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe fda7 	bl	8000c90 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7fe fda2 	bl	8000c90 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e236      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2202      	movs	r2, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d1f1      	bne.n	8002148 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2204      	movs	r2, #4
 800216a:	4013      	ands	r3, r2
 800216c:	d100      	bne.n	8002170 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002170:	231f      	movs	r3, #31
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	d111      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	0549      	lsls	r1, r1, #21
 800218e:	430a      	orrs	r2, r1
 8002190:	61da      	str	r2, [r3, #28]
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	055b      	lsls	r3, r3, #21
 800219a:	4013      	ands	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x344>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	d11a      	bne.n	80021ea <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_RCC_OscConfig+0x344>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_OscConfig+0x344>)
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0049      	lsls	r1, r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fd65 	bl	8000c90 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021cc:	f7fe fd60 	bl	8000c90 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1f4      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x344>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_RCC_OscConfig+0x348>
 80021f2:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_RCC_OscConfig+0x338>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e035      	b.n	800226c <HAL_RCC_OscConfig+0x3a4>
 8002200:	40021000 	.word	0x40021000
 8002204:	fffeffff 	.word	0xfffeffff
 8002208:	fffbffff 	.word	0xfffbffff
 800220c:	40007000 	.word	0x40007000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x36a>
 8002218:	4bca      	ldr	r3, [pc, #808]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	4bc9      	ldr	r3, [pc, #804]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	621a      	str	r2, [r3, #32]
 8002224:	4bc7      	ldr	r3, [pc, #796]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	4bc6      	ldr	r3, [pc, #792]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800222a:	2104      	movs	r1, #4
 800222c:	438a      	bics	r2, r1
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x3a4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x38c>
 800223a:	4bc2      	ldr	r3, [pc, #776]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	4bc1      	ldr	r3, [pc, #772]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002240:	2104      	movs	r1, #4
 8002242:	430a      	orrs	r2, r1
 8002244:	621a      	str	r2, [r3, #32]
 8002246:	4bbf      	ldr	r3, [pc, #764]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	4bbe      	ldr	r3, [pc, #760]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x3a4>
 8002254:	4bbb      	ldr	r3, [pc, #748]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	4bba      	ldr	r3, [pc, #744]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800225a:	2101      	movs	r1, #1
 800225c:	438a      	bics	r2, r1
 800225e:	621a      	str	r2, [r3, #32]
 8002260:	4bb8      	ldr	r3, [pc, #736]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	4bb7      	ldr	r3, [pc, #732]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002266:	2104      	movs	r1, #4
 8002268:	438a      	bics	r2, r1
 800226a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d014      	beq.n	800229e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe fd0c 	bl	8000c90 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	e009      	b.n	8002292 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fd07 	bl	8000c90 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4aaf      	ldr	r2, [pc, #700]	; (8002548 <HAL_RCC_OscConfig+0x680>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e19a      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4bac      	ldr	r3, [pc, #688]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x3b6>
 800229c:	e013      	b.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fcf7 	bl	8000c90 <HAL_GetTick>
 80022a2:	0003      	movs	r3, r0
 80022a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e009      	b.n	80022bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe fcf2 	bl	8000c90 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	4aa5      	ldr	r2, [pc, #660]	; (8002548 <HAL_RCC_OscConfig+0x680>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e185      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2202      	movs	r2, #2
 80022c2:	4013      	ands	r3, r2
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c6:	231f      	movs	r3, #31
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b9c      	ldr	r3, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	4b9b      	ldr	r3, [pc, #620]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	499d      	ldr	r1, [pc, #628]	; (800254c <HAL_RCC_OscConfig+0x684>)
 80022d8:	400a      	ands	r2, r1
 80022da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4013      	ands	r3, r2
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12a      	bne.n	8002344 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022ee:	4b95      	ldr	r3, [pc, #596]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022f4:	2104      	movs	r1, #4
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fcc3 	bl	8000c90 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002310:	f7fe fcbe 	bl	8000c90 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e152      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d0f1      	beq.n	8002310 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800232c:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	22f8      	movs	r2, #248	; 0xf8
 8002332:	4393      	bics	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	00da      	lsls	r2, r3, #3
 800233c:	4b81      	ldr	r3, [pc, #516]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800233e:	430a      	orrs	r2, r1
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
 8002342:	e034      	b.n	80023ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	3305      	adds	r3, #5
 800234a:	d111      	bne.n	8002370 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800234c:	4b7d      	ldr	r3, [pc, #500]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	4b7c      	ldr	r3, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002352:	2104      	movs	r1, #4
 8002354:	438a      	bics	r2, r1
 8002356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002358:	4b7a      	ldr	r3, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	22f8      	movs	r2, #248	; 0xf8
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	00da      	lsls	r2, r3, #3
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
 800236e:	e01e      	b.n	80023ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002370:	4b74      	ldr	r3, [pc, #464]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002374:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002376:	2104      	movs	r1, #4
 8002378:	430a      	orrs	r2, r1
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800237e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002380:	4b70      	ldr	r3, [pc, #448]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002382:	2101      	movs	r1, #1
 8002384:	438a      	bics	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7fe fc82 	bl	8000c90 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002392:	f7fe fc7d 	bl	8000c90 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e111      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023a4:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	2202      	movs	r2, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f1      	bne.n	8002392 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	4013      	ands	r3, r2
 80023b6:	d05c      	beq.n	8002472 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	220c      	movs	r2, #12
 80023be:	4013      	ands	r3, r2
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d00e      	beq.n	80023e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	220c      	movs	r2, #12
 80023ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d114      	bne.n	80023fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023d0:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	401a      	ands	r2, r3
 80023da:	23c0      	movs	r3, #192	; 0xc0
 80023dc:	025b      	lsls	r3, r3, #9
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	4013      	ands	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_OscConfig+0x5a8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d03c      	beq.n	8002470 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0e6      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01b      	beq.n	800243a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002408:	2180      	movs	r1, #128	; 0x80
 800240a:	0249      	lsls	r1, r1, #9
 800240c:	430a      	orrs	r2, r1
 800240e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fc3e 	bl	8000c90 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241a:	f7fe fc39 	bl	8000c90 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0cd      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800242c:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800242e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	4013      	ands	r3, r2
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x552>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002440:	4943      	ldr	r1, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x688>)
 8002442:	400a      	ands	r2, r1
 8002444:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fc23 	bl	8000c90 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002450:	f7fe fc1e 	bl	8000c90 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e0b2      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	4013      	ands	r3, r2
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x588>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002470:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d100      	bne.n	800247c <HAL_RCC_OscConfig+0x5b4>
 800247a:	e0a4      	b.n	80025c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	220c      	movs	r2, #12
 8002482:	4013      	ands	r3, r2
 8002484:	2b08      	cmp	r3, #8
 8002486:	d100      	bne.n	800248a <HAL_RCC_OscConfig+0x5c2>
 8002488:	e078      	b.n	800257c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b02      	cmp	r3, #2
 8002490:	d14c      	bne.n	800252c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002498:	492e      	ldr	r1, [pc, #184]	; (8002554 <HAL_RCC_OscConfig+0x68c>)
 800249a:	400a      	ands	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fbf7 	bl	8000c90 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fbf2 	bl	8000c90 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e086      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	049b      	lsls	r3, r3, #18
 80024c2:	4013      	ands	r3, r2
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	220f      	movs	r2, #15
 80024cc:	4393      	bics	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_RCC_OscConfig+0x690>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	431a      	orrs	r2, r3
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	0449      	lsls	r1, r1, #17
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fbc5 	bl	8000c90 <HAL_GetTick>
 8002506:	0003      	movs	r3, r0
 8002508:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fbc0 	bl	8000c90 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e054      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	049b      	lsls	r3, r3, #18
 8002526:	4013      	ands	r3, r2
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x644>
 800252a:	e04c      	b.n	80025c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_RCC_OscConfig+0x67c>)
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x68c>)
 8002534:	400a      	ands	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fbaa 	bl	8000c90 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x6a6>
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40021000 	.word	0x40021000
 8002548:	00001388 	.word	0x00001388
 800254c:	efffffff 	.word	0xefffffff
 8002550:	fffeffff 	.word	0xfffeffff
 8002554:	feffffff 	.word	0xfeffffff
 8002558:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fb98 	bl	8000c90 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e02c      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_OscConfig+0x708>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	049b      	lsls	r3, r3, #18
 8002576:	4013      	ands	r3, r2
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x694>
 800257a:	e024      	b.n	80025c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e01f      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_OscConfig+0x708>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x708>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10e      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	220f      	movs	r2, #15
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	23f0      	movs	r3, #240	; 0xf0
 80025b6:	039b      	lsls	r3, r3, #14
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b008      	add	sp, #32
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0bf      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d911      	bls.n	800261a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0a6      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	d015      	beq.n	8002650 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2204      	movs	r2, #4
 800262a:	4013      	ands	r3, r2
 800262c:	d006      	beq.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	21e0      	movs	r1, #224	; 0xe0
 8002636:	00c9      	lsls	r1, r1, #3
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	22f0      	movs	r2, #240	; 0xf0
 8002642:	4393      	bics	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d04c      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	4013      	ands	r3, r2
 800266c:	d120      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e07a      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	049b      	lsls	r3, r3, #18
 8002682:	4013      	ands	r3, r2
 8002684:	d114      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06e      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	025b      	lsls	r3, r3, #9
 800269a:	4013      	ands	r3, r2
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e062      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e05b      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b0:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4393      	bics	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fae4 	bl	8000c90 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026cc:	e009      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ce:	f7fe fadf 	bl	8000c90 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e042      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	220c      	movs	r2, #12
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1ec      	bne.n	80026ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d211      	bcs.n	8002726 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x19c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e020      	b.n	8002768 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2204      	movs	r2, #4
 800272c:	4013      	ands	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_RCC_ClockConfig+0x1a8>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002744:	f000 f820 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002748:	0001      	movs	r1, r0
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1a0>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	220f      	movs	r2, #15
 8002752:	4013      	ands	r3, r2
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1ac>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	000a      	movs	r2, r1
 800275a:	40da      	lsrs	r2, r3
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 800275e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002760:	2003      	movs	r0, #3
 8002762:	f7fe fa4f 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	00001388 	.word	0x00001388
 800277c:	fffff8ff 	.word	0xfffff8ff
 8002780:	08005d7c 	.word	0x08005d7c
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b08f      	sub	sp, #60	; 0x3c
 800278c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800278e:	2314      	movs	r3, #20
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	4a37      	ldr	r2, [pc, #220]	; (8002870 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002794:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002796:	c313      	stmia	r3!, {r0, r1, r4}
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4a35      	ldr	r2, [pc, #212]	; (8002874 <HAL_RCC_GetSysClockFreq+0xec>)
 80027a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027a2:	c313      	stmia	r3!, {r0, r1, r4}
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ac:	2300      	movs	r3, #0
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b0:	2300      	movs	r3, #0
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	220c      	movs	r2, #12
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d006      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x52>
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d043      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0xd0>
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d144      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d8:	e044      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	220f      	movs	r2, #15
 80027e0:	4013      	ands	r3, r2
 80027e2:	2214      	movs	r2, #20
 80027e4:	18ba      	adds	r2, r7, r2
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_RCC_GetSysClockFreq+0xf0>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	220f      	movs	r2, #15
 80027f0:	4013      	ands	r3, r2
 80027f2:	1d3a      	adds	r2, r7, #4
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	401a      	ands	r2, r3
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	025b      	lsls	r3, r3, #9
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280a:	481c      	ldr	r0, [pc, #112]	; (800287c <HAL_RCC_GetSysClockFreq+0xf4>)
 800280c:	f7fd fc7c 	bl	8000108 <__udivsi3>
 8002810:	0003      	movs	r3, r0
 8002812:	001a      	movs	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	4353      	muls	r3, r2
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
 800281a:	e01a      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	23c0      	movs	r3, #192	; 0xc0
 8002820:	025b      	lsls	r3, r3, #9
 8002822:	401a      	ands	r2, r3
 8002824:	23c0      	movs	r3, #192	; 0xc0
 8002826:	025b      	lsls	r3, r3, #9
 8002828:	429a      	cmp	r2, r3
 800282a:	d109      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	4814      	ldr	r0, [pc, #80]	; (8002880 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002830:	f7fd fc6a 	bl	8000108 <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	001a      	movs	r2, r3
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	4353      	muls	r3, r2
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
 800283e:	e008      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002842:	480e      	ldr	r0, [pc, #56]	; (800287c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002844:	f7fd fc60 	bl	8000108 <__udivsi3>
 8002848:	0003      	movs	r3, r0
 800284a:	001a      	movs	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	4353      	muls	r3, r2
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002856:	e005      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_GetSysClockFreq+0xf8>)
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800285c:	e002      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002862:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b00f      	add	sp, #60	; 0x3c
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	08005d54 	.word	0x08005d54
 8002874:	08005d64 	.word	0x08005d64
 8002878:	40021000 	.word	0x40021000
 800287c:	007a1200 	.word	0x007a1200
 8002880:	02dc6c00 	.word	0x02dc6c00

08002884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e08a      	b.n	80029ac <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	225d      	movs	r2, #93	; 0x5d
 80028a0:	5c9b      	ldrb	r3, [r3, r2]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	225c      	movs	r2, #92	; 0x5c
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fd fff8 	bl	80008a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	225d      	movs	r2, #93	; 0x5d
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	23e0      	movs	r3, #224	; 0xe0
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	429a      	cmp	r2, r3
 80028da:	d902      	bls.n	80028e2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	23f0      	movs	r3, #240	; 0xf0
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d008      	beq.n	8002906 <HAL_SPI_Init+0x82>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	23e0      	movs	r3, #224	; 0xe0
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d002      	beq.n	8002906 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	23e0      	movs	r3, #224	; 0xe0
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	429a      	cmp	r2, r3
 8002918:	d903      	bls.n	8002922 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
 8002920:	e002      	b.n	8002928 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	400b      	ands	r3, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	431a      	orrs	r2, r3
 8002956:	0011      	movs	r1, r2
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	2204      	movs	r2, #4
 800296c:	401a      	ands	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	431a      	orrs	r2, r3
 8002980:	0011      	movs	r1, r2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4907      	ldr	r1, [pc, #28]	; (80029b4 <HAL_SPI_Init+0x130>)
 8002998:	400a      	ands	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	225d      	movs	r2, #93	; 0x5d
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	fffff7ff 	.word	0xfffff7ff

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01e      	b.n	8002a08 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	223d      	movs	r2, #61	; 0x3d
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	223c      	movs	r2, #60	; 0x3c
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe f8a9 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	223d      	movs	r2, #61	; 0x3d
 80029ea:	2102      	movs	r1, #2
 80029ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	0019      	movs	r1, r3
 80029f8:	0010      	movs	r0, r2
 80029fa:	f000 f947 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223d      	movs	r2, #61	; 0x3d
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d124      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d11d      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	4252      	negs	r2, r2
 8002a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f902 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 f8f5 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f901 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d125      	bne.n	8002aca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2204      	movs	r2, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d11e      	bne.n	8002aca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2205      	movs	r2, #5
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	23c0      	movs	r3, #192	; 0xc0
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f8d5 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f8c8 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f8d4 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d124      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11d      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2209      	movs	r2, #9
 8002aec:	4252      	negs	r2, r2
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2204      	movs	r2, #4
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4013      	ands	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f8a9 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e007      	b.n	8002b1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f89c 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f8a8 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d125      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2210      	movs	r2, #16
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d11e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2211      	movs	r2, #17
 8002b44:	4252      	negs	r2, r2
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	23c0      	movs	r3, #192	; 0xc0
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f87c 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002b64:	e007      	b.n	8002b76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f000 f86f 	bl	8002c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f87b 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10f      	bne.n	8002baa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4252      	negs	r2, r2
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f849 	bl	8002c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d108      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2281      	movs	r2, #129	; 0x81
 8002bcc:	4252      	negs	r2, r2
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 f8e2 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d10f      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d108      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2241      	movs	r2, #65	; 0x41
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 f83b 	bl	8002c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d10f      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d108      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2221      	movs	r2, #33	; 0x21
 8002c28:	4252      	negs	r2, r2
 8002c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f8ac 	bl	8002d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a34      	ldr	r2, [pc, #208]	; (8002d70 <TIM_Base_SetConfig+0xe4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d008      	beq.n	8002cb6 <TIM_Base_SetConfig+0x2a>
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x2a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <TIM_Base_SetConfig+0xe8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2270      	movs	r2, #112	; 0x70
 8002cba:	4393      	bics	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <TIM_Base_SetConfig+0xe4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	05db      	lsls	r3, r3, #23
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d013      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00f      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <TIM_Base_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <TIM_Base_SetConfig+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <TIM_Base_SetConfig+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x76>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <TIM_Base_SetConfig+0xf8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a20      	ldr	r2, [pc, #128]	; (8002d88 <TIM_Base_SetConfig+0xfc>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	4393      	bics	r3, r2
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <TIM_Base_SetConfig+0xe4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0xce>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <TIM_Base_SetConfig+0xf0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0xce>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <TIM_Base_SetConfig+0xf4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0xce>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <TIM_Base_SetConfig+0xf8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d103      	bne.n	8002d62 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	615a      	str	r2, [r3, #20]
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40002000 	.word	0x40002000
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800
 8002d88:	fffffcff 	.word	0xfffffcff

08002d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002dbc:	1dbb      	adds	r3, r7, #6
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002dc2:	2b84      	cmp	r3, #132	; 0x84
 8002dc4:	d006      	beq.n	8002dd4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002dc6:	1dbb      	adds	r3, r7, #6
 8002dc8:	2200      	movs	r2, #0
 8002dca:	5e9a      	ldrsh	r2, [r3, r2]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002de2:	f000 faa1 	bl	8003328 <vTaskStartScheduler>
  
  return osOK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df0:	b089      	sub	sp, #36	; 0x24
 8002df2:	af04      	add	r7, sp, #16
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <osThreadCreate+0x54>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01c      	beq.n	8002e42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685c      	ldr	r4, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681d      	ldr	r5, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691e      	ldr	r6, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2208      	movs	r2, #8
 8002e18:	5e9b      	ldrsh	r3, [r3, r2]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff ffc6 	bl	8002dac <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	9302      	str	r3, [sp, #8]
 8002e2c:	9201      	str	r2, [sp, #4]
 8002e2e:	9000      	str	r0, [sp, #0]
 8002e30:	000b      	movs	r3, r1
 8002e32:	0032      	movs	r2, r6
 8002e34:	0029      	movs	r1, r5
 8002e36:	0020      	movs	r0, r4
 8002e38:	f000 f8e3 	bl	8003002 <xTaskCreateStatic>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e01d      	b.n	8002e7e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685c      	ldr	r4, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e4e:	b29e      	uxth	r6, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2208      	movs	r2, #8
 8002e54:	5e9b      	ldrsh	r3, [r3, r2]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff ffa8 	bl	8002dac <makeFreeRtosPriority>
 8002e5c:	0001      	movs	r1, r0
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	230c      	movs	r3, #12
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	9100      	str	r1, [sp, #0]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	0032      	movs	r2, r6
 8002e6c:	0029      	movs	r1, r5
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f000 f90a 	bl	8003088 <xTaskCreate>
 8002e74:	0003      	movs	r3, r0
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b005      	add	sp, #20
 8002e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <osDelay+0x16>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	e000      	b.n	8002ea0 <osDelay+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 fa1b 	bl	80032dc <vTaskDelay>
  
  return osOK;
 8002ea6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b004      	add	sp, #16
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3308      	adds	r3, #8
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4252      	negs	r2, r2
 8002ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	001a      	movs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	001a      	movs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	d103      	bne.n	8002f64 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e00c      	b.n	8002f7e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3308      	adds	r3, #8
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e002      	b.n	8002f72 <vListInsert+0x2c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d2f6      	bcs.n	8002f6c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6892      	ldr	r2, [r2, #8]
 8002fc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6852      	ldr	r2, [r2, #4]
 8002fd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d103      	bne.n	8002fe6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}

08003002 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003002:	b590      	push	{r4, r7, lr}
 8003004:	b08d      	sub	sp, #52	; 0x34
 8003006:	af04      	add	r7, sp, #16
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xTaskCreateStatic+0x18>
 8003016:	b672      	cpsid	i
 8003018:	e7fe      	b.n	8003018 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <xTaskCreateStatic+0x22>
 8003020:	b672      	cpsid	i
 8003022:	e7fe      	b.n	8003022 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003024:	2354      	movs	r3, #84	; 0x54
 8003026:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b54      	cmp	r3, #84	; 0x54
 800302c:	d001      	beq.n	8003032 <xTaskCreateStatic+0x30>
 800302e:	b672      	cpsid	i
 8003030:	e7fe      	b.n	8003030 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <xTaskCreateStatic+0x78>
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01d      	beq.n	800307a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2251      	movs	r2, #81	; 0x51
 800304c:	2102      	movs	r1, #2
 800304e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003050:	683c      	ldr	r4, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	9302      	str	r3, [sp, #8]
 8003060:	2318      	movs	r3, #24
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	0023      	movs	r3, r4
 800306c:	f000 f858 	bl	8003120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f8ce 	bl	8003214 <prvAddNewTaskToReadyList>
 8003078:	e001      	b.n	800307e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800307e:	69bb      	ldr	r3, [r7, #24]
	}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b009      	add	sp, #36	; 0x24
 8003086:	bd90      	pop	{r4, r7, pc}

08003088 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b08d      	sub	sp, #52	; 0x34
 800308c:	af04      	add	r7, sp, #16
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fd9e 	bl	8003be0 <pvPortMalloc>
 80030a4:	0003      	movs	r3, r0
 80030a6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80030ae:	2054      	movs	r0, #84	; 0x54
 80030b0:	f000 fd96 	bl	8003be0 <pvPortMalloc>
 80030b4:	0003      	movs	r3, r0
 80030b6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
 80030c4:	e006      	b.n	80030d4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f000 fe2f 	bl	8003d2c <vPortFree>
 80030ce:	e001      	b.n	80030d4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01a      	beq.n	8003110 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2251      	movs	r2, #81	; 0x51
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030e2:	1dbb      	adds	r3, r7, #6
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	683c      	ldr	r4, [r7, #0]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9303      	str	r3, [sp, #12]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	0023      	movs	r3, r4
 80030fe:	f000 f80f 	bl	8003120 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 f885 	bl	8003214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e002      	b.n	8003116 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003110:	2301      	movs	r3, #1
 8003112:	425b      	negs	r3, r3
 8003114:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003116:	69bb      	ldr	r3, [r7, #24]
	}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b009      	add	sp, #36	; 0x24
 800311e:	bd90      	pop	{r4, r7, pc}

08003120 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4936      	ldr	r1, [pc, #216]	; (8003210 <prvInitialiseNewTask+0xf0>)
 8003136:	468c      	mov	ip, r1
 8003138:	4463      	add	r3, ip
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2207      	movs	r2, #7
 8003144:	4393      	bics	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2207      	movs	r2, #7
 800314c:	4013      	ands	r3, r2
 800314e:	d001      	beq.n	8003154 <prvInitialiseNewTask+0x34>
 8003150:	b672      	cpsid	i
 8003152:	e7fe      	b.n	8003152 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e013      	b.n	8003182 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	18d3      	adds	r3, r2, r3
 8003160:	7818      	ldrb	r0, [r3, #0]
 8003162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003164:	2134      	movs	r1, #52	; 0x34
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	185b      	adds	r3, r3, r1
 800316c:	1c02      	adds	r2, r0, #0
 800316e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d9e8      	bls.n	800315a <prvInitialiseNewTask+0x3a>
 8003188:	e000      	b.n	800318c <prvInitialiseNewTask+0x6c>
		{
			break;
 800318a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	2243      	movs	r2, #67	; 0x43
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d901      	bls.n	800319e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319a:	2306      	movs	r3, #6
 800319c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	3304      	adds	r3, #4
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fe99 	bl	8002eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	3318      	adds	r3, #24
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fe94 	bl	8002eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2207      	movs	r2, #7
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	2200      	movs	r2, #0
 80031de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	2250      	movs	r2, #80	; 0x50
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fbc4 	bl	800397c <pxPortInitialiseStack>
 80031f4:	0002      	movs	r2, r0
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	3fffffff 	.word	0x3fffffff

08003214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800321c:	f000 fc48 	bl	8003ab0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <prvAddNewTaskToReadyList+0xb0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <prvAddNewTaskToReadyList+0xb0>)
 8003228:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <prvAddNewTaskToReadyList+0xb4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <prvAddNewTaskToReadyList+0xb4>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <prvAddNewTaskToReadyList+0xb0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d110      	bne.n	8003262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003240:	f000 fa6e 	bl	8003720 <prvInitialiseTaskLists>
 8003244:	e00d      	b.n	8003262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <prvAddNewTaskToReadyList+0xb8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <prvAddNewTaskToReadyList+0xb4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	429a      	cmp	r2, r3
 800325a:	d802      	bhi.n	8003262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <prvAddNewTaskToReadyList+0xb4>)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <prvAddNewTaskToReadyList+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <prvAddNewTaskToReadyList+0xbc>)
 800326a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <prvAddNewTaskToReadyList+0xc0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d903      	bls.n	8003280 <prvAddNewTaskToReadyList+0x6c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <prvAddNewTaskToReadyList+0xc0>)
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	0013      	movs	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	189b      	adds	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <prvAddNewTaskToReadyList+0xc4>)
 800328e:	189a      	adds	r2, r3, r2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	0019      	movs	r1, r3
 8003296:	0010      	movs	r0, r2
 8003298:	f7ff fe33 	bl	8002f02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800329c:	f000 fc1a 	bl	8003ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <prvAddNewTaskToReadyList+0xb8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <prvAddNewTaskToReadyList+0xb4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d201      	bcs.n	80032ba <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032b6:	f000 fbeb 	bl	8003a90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b002      	add	sp, #8
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	200003f4 	.word	0x200003f4
 80032c8:	200002f4 	.word	0x200002f4
 80032cc:	20000400 	.word	0x20000400
 80032d0:	20000410 	.word	0x20000410
 80032d4:	200003fc 	.word	0x200003fc
 80032d8:	200002f8 	.word	0x200002f8

080032dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <vTaskDelay+0x48>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <vTaskDelay+0x1e>
 80032f6:	b672      	cpsid	i
 80032f8:	e7fe      	b.n	80032f8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80032fa:	f000 f863 	bl	80033c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2100      	movs	r1, #0
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fae6 	bl	80038d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003308:	f000 f868 	bl	80033dc <xTaskResumeAll>
 800330c:	0003      	movs	r3, r0
 800330e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003316:	f000 fbbb 	bl	8003a90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	2000041c 	.word	0x2000041c

08003328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003336:	003a      	movs	r2, r7
 8003338:	1d39      	adds	r1, r7, #4
 800333a:	2308      	movs	r3, #8
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	0018      	movs	r0, r3
 8003340:	f7fd f8ca 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003344:	683c      	ldr	r4, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4918      	ldr	r1, [pc, #96]	; (80033ac <vTaskStartScheduler+0x84>)
 800334c:	4818      	ldr	r0, [pc, #96]	; (80033b0 <vTaskStartScheduler+0x88>)
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	0022      	movs	r2, r4
 800335a:	f7ff fe52 	bl	8003002 <xTaskCreateStatic>
 800335e:	0002      	movs	r2, r0
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <vTaskStartScheduler+0x8c>)
 8003362:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <vTaskStartScheduler+0x8c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e001      	b.n	8003376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10d      	bne.n	8003398 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800337c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800337e:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <vTaskStartScheduler+0x90>)
 8003380:	2201      	movs	r2, #1
 8003382:	4252      	negs	r2, r2
 8003384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <vTaskStartScheduler+0x94>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <vTaskStartScheduler+0x98>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003392:	f000 fb59 	bl	8003a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003396:	e004      	b.n	80033a2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	d101      	bne.n	80033a2 <vTaskStartScheduler+0x7a>
 800339e:	b672      	cpsid	i
 80033a0:	e7fe      	b.n	80033a0 <vTaskStartScheduler+0x78>
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b005      	add	sp, #20
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	08005d74 	.word	0x08005d74
 80033b0:	08003701 	.word	0x08003701
 80033b4:	20000418 	.word	0x20000418
 80033b8:	20000414 	.word	0x20000414
 80033bc:	20000400 	.word	0x20000400
 80033c0:	200003f8 	.word	0x200003f8

080033c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <vTaskSuspendAll+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <vTaskSuspendAll+0x14>)
 80033d0:	601a      	str	r2, [r3, #0]
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000041c 	.word	0x2000041c

080033dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <xTaskResumeAll+0xf8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <xTaskResumeAll+0x1a>
 80033f2:	b672      	cpsid	i
 80033f4:	e7fe      	b.n	80033f4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033f6:	f000 fb5b 	bl	8003ab0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <xTaskResumeAll+0xf8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <xTaskResumeAll+0xf8>)
 8003402:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <xTaskResumeAll+0xf8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d15b      	bne.n	80034c4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <xTaskResumeAll+0xfc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d057      	beq.n	80034c4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003414:	e02f      	b.n	8003476 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <xTaskResumeAll+0x100>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3318      	adds	r3, #24
 8003422:	0018      	movs	r0, r3
 8003424:	f7ff fdc5 	bl	8002fb2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3304      	adds	r3, #4
 800342c:	0018      	movs	r0, r3
 800342e:	f7ff fdc0 	bl	8002fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <xTaskResumeAll+0x104>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d903      	bls.n	8003446 <xTaskResumeAll+0x6a>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <xTaskResumeAll+0x104>)
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	0013      	movs	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	189b      	adds	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <xTaskResumeAll+0x108>)
 8003454:	189a      	adds	r2, r3, r2
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	0019      	movs	r1, r3
 800345c:	0010      	movs	r0, r2
 800345e:	f7ff fd50 	bl	8002f02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <xTaskResumeAll+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <xTaskResumeAll+0x110>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <xTaskResumeAll+0x100>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1cb      	bne.n	8003416 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003484:	f000 f9e6 	bl	8003854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <xTaskResumeAll+0x114>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003494:	f000 f82e 	bl	80034f4 <xTaskIncrementTick>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d002      	beq.n	80034a2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <xTaskResumeAll+0x110>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f2      	bne.n	8003494 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <xTaskResumeAll+0x114>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <xTaskResumeAll+0x110>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034c0:	f000 fae6 	bl	8003a90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034c4:	f000 fb06 	bl	8003ad4 <vPortExitCritical>

	return xAlreadyYielded;
 80034c8:	68bb      	ldr	r3, [r7, #8]
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	2000041c 	.word	0x2000041c
 80034d8:	200003f4 	.word	0x200003f4
 80034dc:	200003b4 	.word	0x200003b4
 80034e0:	200003fc 	.word	0x200003fc
 80034e4:	200002f8 	.word	0x200002f8
 80034e8:	200002f4 	.word	0x200002f4
 80034ec:	20000408 	.word	0x20000408
 80034f0:	20000404 	.word	0x20000404

080034f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034fe:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <xTaskIncrementTick+0x13c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d000      	beq.n	8003508 <xTaskIncrementTick+0x14>
 8003506:	e083      	b.n	8003610 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003508:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <xTaskIncrementTick+0x140>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003510:	4b48      	ldr	r3, [pc, #288]	; (8003634 <xTaskIncrementTick+0x140>)
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d117      	bne.n	800354c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800351c:	4b46      	ldr	r3, [pc, #280]	; (8003638 <xTaskIncrementTick+0x144>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <xTaskIncrementTick+0x36>
 8003526:	b672      	cpsid	i
 8003528:	e7fe      	b.n	8003528 <xTaskIncrementTick+0x34>
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <xTaskIncrementTick+0x144>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <xTaskIncrementTick+0x148>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b40      	ldr	r3, [pc, #256]	; (8003638 <xTaskIncrementTick+0x144>)
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	4b40      	ldr	r3, [pc, #256]	; (800363c <xTaskIncrementTick+0x148>)
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	4b40      	ldr	r3, [pc, #256]	; (8003640 <xTaskIncrementTick+0x14c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <xTaskIncrementTick+0x14c>)
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f000 f984 	bl	8003854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800354c:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <xTaskIncrementTick+0x150>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	429a      	cmp	r2, r3
 8003554:	d34e      	bcc.n	80035f4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003556:	4b38      	ldr	r3, [pc, #224]	; (8003638 <xTaskIncrementTick+0x144>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <xTaskIncrementTick+0x70>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <xTaskIncrementTick+0x72>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <xTaskIncrementTick+0x150>)
 800356c:	2201      	movs	r2, #1
 800356e:	4252      	negs	r2, r2
 8003570:	601a      	str	r2, [r3, #0]
					break;
 8003572:	e03f      	b.n	80035f4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003574:	4b30      	ldr	r3, [pc, #192]	; (8003638 <xTaskIncrementTick+0x144>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d203      	bcs.n	8003594 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <xTaskIncrementTick+0x150>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
						break;
 8003592:	e02f      	b.n	80035f4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3304      	adds	r3, #4
 8003598:	0018      	movs	r0, r3
 800359a:	f7ff fd0a 	bl	8002fb2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3318      	adds	r3, #24
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7ff fd01 	bl	8002fb2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <xTaskIncrementTick+0x154>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d903      	bls.n	80035c4 <xTaskIncrementTick+0xd0>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <xTaskIncrementTick+0x154>)
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	0013      	movs	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <xTaskIncrementTick+0x158>)
 80035d2:	189a      	adds	r2, r3, r2
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3304      	adds	r3, #4
 80035d8:	0019      	movs	r1, r3
 80035da:	0010      	movs	r0, r2
 80035dc:	f7ff fc91 	bl	8002f02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <xTaskIncrementTick+0x15c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3b3      	bcc.n	8003556 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f2:	e7b0      	b.n	8003556 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035f4:	4b16      	ldr	r3, [pc, #88]	; (8003650 <xTaskIncrementTick+0x15c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4914      	ldr	r1, [pc, #80]	; (800364c <xTaskIncrementTick+0x158>)
 80035fc:	0013      	movs	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	189b      	adds	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	585b      	ldr	r3, [r3, r1]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d907      	bls.n	800361a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800360a:	2301      	movs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e004      	b.n	800361a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xTaskIncrementTick+0x160>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <xTaskIncrementTick+0x160>)
 8003618:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <xTaskIncrementTick+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003622:	2301      	movs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000041c 	.word	0x2000041c
 8003634:	200003f8 	.word	0x200003f8
 8003638:	200003ac 	.word	0x200003ac
 800363c:	200003b0 	.word	0x200003b0
 8003640:	2000040c 	.word	0x2000040c
 8003644:	20000414 	.word	0x20000414
 8003648:	200003fc 	.word	0x200003fc
 800364c:	200002f8 	.word	0x200002f8
 8003650:	200002f4 	.word	0x200002f4
 8003654:	20000404 	.word	0x20000404
 8003658:	20000408 	.word	0x20000408

0800365c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003662:	4b22      	ldr	r3, [pc, #136]	; (80036ec <vTaskSwitchContext+0x90>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <vTaskSwitchContext+0x94>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003670:	e037      	b.n	80036e2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <vTaskSwitchContext+0x94>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003678:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <vTaskSwitchContext+0x98>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e007      	b.n	8003690 <vTaskSwitchContext+0x34>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <vTaskSwitchContext+0x2e>
 8003686:	b672      	cpsid	i
 8003688:	e7fe      	b.n	8003688 <vTaskSwitchContext+0x2c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3b01      	subs	r3, #1
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	4919      	ldr	r1, [pc, #100]	; (80036f8 <vTaskSwitchContext+0x9c>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	0013      	movs	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	189b      	adds	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	585b      	ldr	r3, [r3, r1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <vTaskSwitchContext+0x24>
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	0013      	movs	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <vTaskSwitchContext+0x9c>)
 80036ae:	189b      	adds	r3, r3, r2
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	3308      	adds	r3, #8
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d104      	bne.n	80036d2 <vTaskSwitchContext+0x76>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <vTaskSwitchContext+0xa0>)
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <vTaskSwitchContext+0x98>)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	601a      	str	r2, [r3, #0]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	2000041c 	.word	0x2000041c
 80036f0:	20000408 	.word	0x20000408
 80036f4:	200003fc 	.word	0x200003fc
 80036f8:	200002f8 	.word	0x200002f8
 80036fc:	200002f4 	.word	0x200002f4

08003700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003708:	f000 f84e 	bl	80037a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <prvIdleTask+0x1c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d9f9      	bls.n	8003708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003714:	f000 f9bc 	bl	8003a90 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003718:	e7f6      	b.n	8003708 <prvIdleTask+0x8>
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	200002f8 	.word	0x200002f8

08003720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	e00c      	b.n	8003746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	0013      	movs	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	189b      	adds	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <prvInitialiseTaskLists+0x68>)
 8003738:	189b      	adds	r3, r3, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff fbb8 	bl	8002eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3301      	adds	r3, #1
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d9ef      	bls.n	800372c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <prvInitialiseTaskLists+0x6c>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7ff fbae 	bl	8002eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <prvInitialiseTaskLists+0x70>)
 8003756:	0018      	movs	r0, r3
 8003758:	f7ff fbaa 	bl	8002eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <prvInitialiseTaskLists+0x74>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff fba6 	bl	8002eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <prvInitialiseTaskLists+0x78>)
 8003766:	0018      	movs	r0, r3
 8003768:	f7ff fba2 	bl	8002eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <prvInitialiseTaskLists+0x7c>)
 800376e:	0018      	movs	r0, r3
 8003770:	f7ff fb9e 	bl	8002eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvInitialiseTaskLists+0x80>)
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <prvInitialiseTaskLists+0x6c>)
 8003778:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <prvInitialiseTaskLists+0x84>)
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <prvInitialiseTaskLists+0x70>)
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200002f8 	.word	0x200002f8
 800378c:	20000384 	.word	0x20000384
 8003790:	20000398 	.word	0x20000398
 8003794:	200003b4 	.word	0x200003b4
 8003798:	200003c8 	.word	0x200003c8
 800379c:	200003e0 	.word	0x200003e0
 80037a0:	200003ac 	.word	0x200003ac
 80037a4:	200003b0 	.word	0x200003b0

080037a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ae:	e01a      	b.n	80037e6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80037b0:	f000 f97e 	bl	8003ab0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <prvCheckTasksWaitingTermination+0x50>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7ff fbf6 	bl	8002fb2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <prvCheckTasksWaitingTermination+0x54>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <prvCheckTasksWaitingTermination+0x54>)
 80037ce:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <prvCheckTasksWaitingTermination+0x58>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvCheckTasksWaitingTermination+0x58>)
 80037d8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80037da:	f000 f97b 	bl	8003ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 f80f 	bl	8003804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <prvCheckTasksWaitingTermination+0x58>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e0      	bne.n	80037b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	200003c8 	.word	0x200003c8
 80037fc:	200003f4 	.word	0x200003f4
 8003800:	200003dc 	.word	0x200003dc

08003804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2251      	movs	r2, #81	; 0x51
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fa86 	bl	8003d2c <vPortFree>
				vPortFree( pxTCB );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 fa82 	bl	8003d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003828:	e010      	b.n	800384c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2251      	movs	r2, #81	; 0x51
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d104      	bne.n	800383e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fa78 	bl	8003d2c <vPortFree>
	}
 800383c:	e006      	b.n	800384c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2251      	movs	r2, #81	; 0x51
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d001      	beq.n	800384c <prvDeleteTCB+0x48>
 8003848:	b672      	cpsid	i
 800384a:	e7fe      	b.n	800384a <prvDeleteTCB+0x46>
	}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <prvResetNextTaskUnblockTime+0x40>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <prvResetNextTaskUnblockTime+0x14>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <prvResetNextTaskUnblockTime+0x16>
 8003868:	2300      	movs	r3, #0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <prvResetNextTaskUnblockTime+0x44>)
 8003870:	2201      	movs	r2, #1
 8003872:	4252      	negs	r2, r2
 8003874:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003876:	e008      	b.n	800388a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <prvResetNextTaskUnblockTime+0x40>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <prvResetNextTaskUnblockTime+0x44>)
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	200003ac 	.word	0x200003ac
 8003898:	20000414 	.word	0x20000414

0800389c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <xTaskGetSchedulerState+0x30>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038aa:	2301      	movs	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	e008      	b.n	80038c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <xTaskGetSchedulerState+0x34>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038b8:	2302      	movs	r3, #2
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e001      	b.n	80038c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038c2:	687b      	ldr	r3, [r7, #4]
	}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000400 	.word	0x20000400
 80038d0:	2000041c 	.word	0x2000041c

080038d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <prvAddCurrentTaskToDelayedList+0x90>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <prvAddCurrentTaskToDelayedList+0x94>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3304      	adds	r3, #4
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff fb61 	bl	8002fb2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3301      	adds	r3, #1
 80038f4:	d10b      	bne.n	800390e <prvAddCurrentTaskToDelayedList+0x3a>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <prvAddCurrentTaskToDelayedList+0x94>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <prvAddCurrentTaskToDelayedList+0x98>)
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff fafb 	bl	8002f02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800390c:	e026      	b.n	800395c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <prvAddCurrentTaskToDelayedList+0x94>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	429a      	cmp	r2, r3
 8003924:	d209      	bcs.n	800393a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <prvAddCurrentTaskToDelayedList+0x94>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3304      	adds	r3, #4
 8003930:	0019      	movs	r1, r3
 8003932:	0010      	movs	r0, r2
 8003934:	f7ff fb07 	bl	8002f46 <vListInsert>
}
 8003938:	e010      	b.n	800395c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvAddCurrentTaskToDelayedList+0x94>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3304      	adds	r3, #4
 8003944:	0019      	movs	r1, r3
 8003946:	0010      	movs	r0, r2
 8003948:	f7ff fafd 	bl	8002f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d202      	bcs.n	800395c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	601a      	str	r2, [r3, #0]
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200003f8 	.word	0x200003f8
 8003968:	200002f4 	.word	0x200002f4
 800396c:	200003e0 	.word	0x200003e0
 8003970:	200003b0 	.word	0x200003b0
 8003974:	200003ac 	.word	0x200003ac
 8003978:	20000414 	.word	0x20000414

0800397c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3b04      	subs	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0452      	lsls	r2, r2, #17
 8003994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3b04      	subs	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b04      	subs	r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <pxPortInitialiseStack+0x50>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b14      	subs	r3, #20
 80039b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b20      	subs	r3, #32
 80039be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039c0:	68fb      	ldr	r3, [r7, #12]
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	080039d1 	.word	0x080039d1

080039d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <prvTaskExitError+0x28>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	d001      	beq.n	80039e6 <prvTaskExitError+0x16>
 80039e2:	b672      	cpsid	i
 80039e4:	e7fe      	b.n	80039e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80039e6:	b672      	cpsid	i
	while( ulDummy == 0 )
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0fc      	beq.n	80039ea <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2000000c 	.word	0x2000000c

080039fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <pxCurrentTCBConst2>)
 8003a12:	6813      	ldr	r3, [r2, #0]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	3020      	adds	r0, #32
 8003a18:	f380 8809 	msr	PSP, r0
 8003a1c:	2002      	movs	r0, #2
 8003a1e:	f380 8814 	msr	CONTROL, r0
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003a28:	46ae      	mov	lr, r5
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	bc04      	pop	{r2}
 8003a2e:	b662      	cpsie	i
 8003a30:	4718      	bx	r3
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46c0      	nop			; (mov r8, r8)

08003a40 <pxCurrentTCBConst2>:
 8003a40:	200002f4 	.word	0x200002f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46c0      	nop			; (mov r8, r8)

08003a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <xPortStartScheduler+0x40>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <xPortStartScheduler+0x40>)
 8003a52:	21ff      	movs	r1, #255	; 0xff
 8003a54:	0409      	lsls	r1, r1, #16
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <xPortStartScheduler+0x40>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <xPortStartScheduler+0x40>)
 8003a60:	21ff      	movs	r1, #255	; 0xff
 8003a62:	0609      	lsls	r1, r1, #24
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003a68:	f000 f898 	bl	8003b9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <xPortStartScheduler+0x44>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003a72:	f7ff ffcd 	bl	8003a10 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a76:	f7ff fdf1 	bl	800365c <vTaskSwitchContext>
	prvTaskExitError();
 8003a7a:	f7ff ffa9 	bl	80039d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	e000ed20 	.word	0xe000ed20
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <vPortYield+0x1c>)
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	0552      	lsls	r2, r2, #21
 8003a9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003a9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003aa0:	f3bf 8f6f 	isb	sy
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003ab4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <vPortEnterCritical+0x20>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <vPortEnterCritical+0x20>)
 8003abe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003ac0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003ac4:	f3bf 8f6f 	isb	sy
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <vPortExitCritical+0x2c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <vPortExitCritical+0x10>
 8003ae0:	b672      	cpsid	i
 8003ae2:	e7fe      	b.n	8003ae2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <vPortExitCritical+0x2c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <vPortExitCritical+0x2c>)
 8003aec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <vPortExitCritical+0x2c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d100      	bne.n	8003af8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003af6:	b662      	cpsie	i
    }
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003b04:	f3ef 8010 	mrs	r0, PRIMASK
 8003b08:	b672      	cpsid	i
 8003b0a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	0018      	movs	r0, r3

08003b10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003b10:	f380 8810 	msr	PRIMASK, r0
 8003b14:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003b16:	46c0      	nop			; (mov r8, r8)
	...

08003b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b20:	f3ef 8009 	mrs	r0, PSP
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <pxCurrentTCBConst>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	3820      	subs	r0, #32
 8003b2a:	6010      	str	r0, [r2, #0]
 8003b2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003b2e:	4644      	mov	r4, r8
 8003b30:	464d      	mov	r5, r9
 8003b32:	4656      	mov	r6, sl
 8003b34:	465f      	mov	r7, fp
 8003b36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003b38:	b508      	push	{r3, lr}
 8003b3a:	b672      	cpsid	i
 8003b3c:	f7ff fd8e 	bl	800365c <vTaskSwitchContext>
 8003b40:	b662      	cpsie	i
 8003b42:	bc0c      	pop	{r2, r3}
 8003b44:	6811      	ldr	r1, [r2, #0]
 8003b46:	6808      	ldr	r0, [r1, #0]
 8003b48:	3010      	adds	r0, #16
 8003b4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003b4c:	46a0      	mov	r8, r4
 8003b4e:	46a9      	mov	r9, r5
 8003b50:	46b2      	mov	sl, r6
 8003b52:	46bb      	mov	fp, r7
 8003b54:	f380 8809 	msr	PSP, r0
 8003b58:	3820      	subs	r0, #32
 8003b5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003b5c:	4718      	bx	r3
 8003b5e:	46c0      	nop			; (mov r8, r8)

08003b60 <pxCurrentTCBConst>:
 8003b60:	200002f4 	.word	0x200002f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46c0      	nop			; (mov r8, r8)

08003b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b6e:	f7ff ffc9 	bl	8003b04 <ulSetInterruptMaskFromISR>
 8003b72:	0003      	movs	r3, r0
 8003b74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b76:	f7ff fcbd 	bl	80034f4 <xTaskIncrementTick>
 8003b7a:	1e03      	subs	r3, r0, #0
 8003b7c:	d003      	beq.n	8003b86 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <xPortSysTickHandler+0x30>)
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	0552      	lsls	r2, r2, #21
 8003b84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff ffc1 	bl	8003b10 <vClearInterruptMaskFromISR>
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <prvSetupTimerInterrupt+0x34>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <prvSetupTimerInterrupt+0x38>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvSetupTimerInterrupt+0x3c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	23fa      	movs	r3, #250	; 0xfa
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	f7fc faa7 	bl	8000108 <__udivsi3>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <prvSetupTimerInterrupt+0x40>)
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003bc4:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <prvSetupTimerInterrupt+0x34>)
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	e000e010 	.word	0xe000e010
 8003bd4:	e000e018 	.word	0xe000e018
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	e000e014 	.word	0xe000e014

08003be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003bec:	f7ff fbea 	bl	80033c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bf0:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <pvPortMalloc+0x138>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bf8:	f000 f8e0 	bl	8003dbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bfc:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <pvPortMalloc+0x13c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4013      	ands	r3, r2
 8003c04:	d000      	beq.n	8003c08 <pvPortMalloc+0x28>
 8003c06:	e079      	b.n	8003cfc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003c0e:	2208      	movs	r2, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2207      	movs	r2, #7
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00a      	beq.n	8003c34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2207      	movs	r2, #7
 8003c22:	4393      	bics	r3, r2
 8003c24:	3308      	adds	r3, #8
 8003c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d001      	beq.n	8003c34 <pvPortMalloc+0x54>
 8003c30:	b672      	cpsid	i
 8003c32:	e7fe      	b.n	8003c32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d060      	beq.n	8003cfc <pvPortMalloc+0x11c>
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <pvPortMalloc+0x140>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d85b      	bhi.n	8003cfc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <pvPortMalloc+0x144>)
 8003c46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003c48:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <pvPortMalloc+0x144>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c4e:	e004      	b.n	8003c5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d903      	bls.n	8003c6c <pvPortMalloc+0x8c>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f1      	bne.n	8003c50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <pvPortMalloc+0x138>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d042      	beq.n	8003cfc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	2308      	movs	r3, #8
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d916      	bls.n	8003cc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	18d3      	adds	r3, r2, r3
 8003c9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d001      	beq.n	8003cac <pvPortMalloc+0xcc>
 8003ca8:	b672      	cpsid	i
 8003caa:	e7fe      	b.n	8003caa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 f8db 	bl	8003e7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <pvPortMalloc+0x140>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	1ad2      	subs	r2, r2, r3
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <pvPortMalloc+0x140>)
 8003cd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <pvPortMalloc+0x140>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <pvPortMalloc+0x148>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d203      	bcs.n	8003ce8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <pvPortMalloc+0x140>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <pvPortMalloc+0x148>)
 8003ce6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <pvPortMalloc+0x13c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003cfc:	f7ff fb6e 	bl	80033dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2207      	movs	r2, #7
 8003d04:	4013      	ands	r3, r2
 8003d06:	d001      	beq.n	8003d0c <pvPortMalloc+0x12c>
 8003d08:	b672      	cpsid	i
 8003d0a:	e7fe      	b.n	8003d0a <pvPortMalloc+0x12a>
	return pvReturn;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b006      	add	sp, #24
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20001028 	.word	0x20001028
 8003d1c:	20001034 	.word	0x20001034
 8003d20:	2000102c 	.word	0x2000102c
 8003d24:	20001020 	.word	0x20001020
 8003d28:	20001030 	.word	0x20001030

08003d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d035      	beq.n	8003daa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d3e:	2308      	movs	r3, #8
 8003d40:	425b      	negs	r3, r3
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	18d3      	adds	r3, r2, r3
 8003d46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <vPortFree+0x88>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4013      	ands	r3, r2
 8003d56:	d101      	bne.n	8003d5c <vPortFree+0x30>
 8003d58:	b672      	cpsid	i
 8003d5a:	e7fe      	b.n	8003d5a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <vPortFree+0x3c>
 8003d64:	b672      	cpsid	i
 8003d66:	e7fe      	b.n	8003d66 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <vPortFree+0x88>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4013      	ands	r3, r2
 8003d72:	d01a      	beq.n	8003daa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d116      	bne.n	8003daa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <vPortFree+0x88>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d8c:	f7ff fb1a 	bl	80033c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <vPortFree+0x8c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	18d2      	adds	r2, r2, r3
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <vPortFree+0x8c>)
 8003d9c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 f86b 	bl	8003e7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003da6:	f7ff fb19 	bl	80033dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	20001034 	.word	0x20001034
 8003db8:	2000102c 	.word	0x2000102c

08003dbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dc2:	23c0      	movs	r3, #192	; 0xc0
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <prvHeapInit+0xa8>)
 8003dca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2207      	movs	r2, #7
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d00c      	beq.n	8003dee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3307      	adds	r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2207      	movs	r2, #7
 8003dde:	4393      	bics	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <prvHeapInit+0xa8>)
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <prvHeapInit+0xac>)
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <prvHeapInit+0xac>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	18d3      	adds	r3, r2, r3
 8003e04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e06:	2208      	movs	r2, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2207      	movs	r2, #7
 8003e12:	4393      	bics	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <prvHeapInit+0xb0>)
 8003e1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <prvHeapInit+0xb0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2200      	movs	r2, #0
 8003e22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <prvHeapInit+0xb0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <prvHeapInit+0xb0>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvHeapInit+0xb4>)
 8003e48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <prvHeapInit+0xb8>)
 8003e50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <prvHeapInit+0xbc>)
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	0612      	lsls	r2, r2, #24
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	20000420 	.word	0x20000420
 8003e68:	20001020 	.word	0x20001020
 8003e6c:	20001028 	.word	0x20001028
 8003e70:	20001030 	.word	0x20001030
 8003e74:	2000102c 	.word	0x2000102c
 8003e78:	20001034 	.word	0x20001034

08003e7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e84:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <prvInsertBlockIntoFreeList+0xa8>)
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e002      	b.n	8003e90 <prvInsertBlockIntoFreeList+0x14>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d8f7      	bhi.n	8003e8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	18d3      	adds	r3, r2, r3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d108      	bne.n	8003ebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	18d2      	adds	r2, r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	18d2      	adds	r2, r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d118      	bne.n	8003f04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <prvInsertBlockIntoFreeList+0xac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d00d      	beq.n	8003efa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	18d2      	adds	r2, r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e008      	b.n	8003f0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <prvInsertBlockIntoFreeList+0xac>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e003      	b.n	8003f0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d002      	beq.n	8003f1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	20001020 	.word	0x20001020
 8003f28:	20001028 	.word	0x20001028

08003f2c <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8003f2c:	b5b0      	push	{r4, r5, r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0005      	movs	r5, r0
 8003f34:	000c      	movs	r4, r1
 8003f36:	0010      	movs	r0, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	1c2a      	adds	r2, r5, #0
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	1c22      	adds	r2, r4, #0
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	1cbb      	adds	r3, r7, #2
 8003f48:	1c02      	adds	r2, r0, #0
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	003b      	movs	r3, r7
 8003f4e:	1c0a      	adds	r2, r1, #0
 8003f50:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8003f52:	1cbb      	adds	r3, r7, #2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 8003f5c:	1cbb      	adds	r3, r7, #2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2201      	movs	r2, #1
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8003f70:	e06d      	b.n	800404e <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8003f72:	1dbb      	adds	r3, r7, #6
 8003f74:	881a      	ldrh	r2, [r3, #0]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e01c      	b.n	8003fb8 <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	b298      	uxth	r0, r3
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	b299      	uxth	r1, r3
 8003f8e:	003b      	movs	r3, r7
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	001a      	movs	r2, r3
 8003f94:	f000 fc10 	bl	80047b8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	1d3a      	adds	r2, r7, #4
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	b299      	uxth	r1, r3
 8003fa8:	003b      	movs	r3, r7
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	001a      	movs	r2, r3
 8003fae:	f000 fc03 	bl	80047b8 <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	1dbb      	adds	r3, r7, #6
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dddb      	ble.n	8003f7e <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e01c      	b.n	800400c <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	b298      	uxth	r0, r3
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	18d3      	adds	r3, r2, r3
 8003fe0:	b299      	uxth	r1, r3
 8003fe2:	003b      	movs	r3, r7
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	f000 fbe6 	bl	80047b8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	b298      	uxth	r0, r3
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	1d3a      	adds	r2, r7, #4
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b299      	uxth	r1, r3
 8003ffc:	003b      	movs	r3, r7
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	001a      	movs	r2, r3
 8004002:	f000 fbd9 	bl	80047b8 <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3301      	adds	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	18d3      	adds	r3, r2, r3
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	429a      	cmp	r2, r3
 8004018:	dddb      	ble.n	8003fd2 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	3301      	adds	r3, #1
 800401e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	3302      	adds	r3, #2
 800402c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	dd09      	ble.n	800404e <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	3b01      	subs	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3302      	adds	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 800404e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	429a      	cmp	r2, r3
 8004054:	da8d      	bge.n	8003f72 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b00a      	add	sp, #40	; 0x28
 800405c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004060 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	0005      	movs	r5, r0
 8004068:	000c      	movs	r4, r1
 800406a:	0010      	movs	r0, r2
 800406c:	0019      	movs	r1, r3
 800406e:	1dfb      	adds	r3, r7, #7
 8004070:	1c2a      	adds	r2, r5, #0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	1c22      	adds	r2, r4, #0
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	1cbb      	adds	r3, r7, #2
 800407c:	1c02      	adds	r2, r0, #0
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	003b      	movs	r3, r7
 8004082:	1c0a      	adds	r2, r1, #0
 8004084:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8004086:	2117      	movs	r1, #23
 8004088:	187b      	adds	r3, r7, r1
 800408a:	1dfa      	adds	r2, r7, #7
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8004090:	187b      	adds	r3, r7, r1
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b1f      	cmp	r3, #31
 8004096:	d803      	bhi.n	80040a0 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e005      	b.n	80040ac <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 80040a0:	2217      	movs	r2, #23
 80040a2:	18bb      	adds	r3, r7, r2
 80040a4:	18ba      	adds	r2, r7, r2
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	3a20      	subs	r2, #32
 80040aa:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80040ac:	2314      	movs	r3, #20
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e016      	b.n	80040e4 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 80040b6:	2317      	movs	r3, #23
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	2514      	movs	r5, #20
 80040be:	197b      	adds	r3, r7, r5
 80040c0:	7818      	ldrb	r0, [r3, #0]
 80040c2:	197b      	adds	r3, r7, r5
 80040c4:	7819      	ldrb	r1, [r3, #0]
 80040c6:	4c69      	ldr	r4, [pc, #420]	; (800426c <ILI9341_Draw_Char+0x20c>)
 80040c8:	0013      	movs	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	18e3      	adds	r3, r4, r3
 80040d2:	5c1a      	ldrb	r2, [r3, r0]
 80040d4:	230c      	movs	r3, #12
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	197b      	adds	r3, r7, r5
 80040e0:	3201      	adds	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	2314      	movs	r3, #20
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d9e3      	bls.n	80040b6 <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80040ee:	2315      	movs	r3, #21
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e0ae      	b.n	8004256 <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80040f8:	2316      	movs	r3, #22
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e09d      	b.n	800423e <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8004102:	2315      	movs	r3, #21
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	220c      	movs	r2, #12
 800410a:	18ba      	adds	r2, r7, r2
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	001a      	movs	r2, r3
 8004110:	2316      	movs	r3, #22
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	411a      	asrs	r2, r3
 8004118:	0013      	movs	r3, r2
 800411a:	2201      	movs	r2, #1
 800411c:	4013      	ands	r3, r2
 800411e:	d043      	beq.n	80041a8 <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8004120:	2328      	movs	r3, #40	; 0x28
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d115      	bne.n	8004156 <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800412a:	2315      	movs	r3, #21
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b29a      	uxth	r2, r3
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	b298      	uxth	r0, r3
 800413a:	2316      	movs	r3, #22
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b29a      	uxth	r2, r3
 8004142:	1cbb      	adds	r3, r7, #2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	18d3      	adds	r3, r2, r3
 8004148:	b299      	uxth	r1, r3
 800414a:	003b      	movs	r3, r7
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	001a      	movs	r2, r3
 8004150:	f000 fb32 	bl	80047b8 <ILI9341_Draw_Pixel>
 8004154:	e06d      	b.n	8004232 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8004156:	2315      	movs	r3, #21
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	2128      	movs	r1, #40	; 0x28
 8004160:	187a      	adds	r2, r7, r1
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	4353      	muls	r3, r2
 8004166:	b29a      	uxth	r2, r3
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	18d3      	adds	r3, r2, r3
 800416e:	b298      	uxth	r0, r3
 8004170:	2316      	movs	r3, #22
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	000c      	movs	r4, r1
 800417a:	187a      	adds	r2, r7, r1
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	4353      	muls	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	1cbb      	adds	r3, r7, #2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	b299      	uxth	r1, r3
 800418a:	0022      	movs	r2, r4
 800418c:	193b      	adds	r3, r7, r4
 800418e:	881c      	ldrh	r4, [r3, #0]
 8004190:	0013      	movs	r3, r2
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	2301      	movs	r3, #1
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	003b      	movs	r3, r7
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0023      	movs	r3, r4
 80041a2:	f000 fc7d 	bl	8004aa0 <ILI9341_Draw_Rectangle>
 80041a6:	e044      	b.n	8004232 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 80041a8:	2328      	movs	r3, #40	; 0x28
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d116      	bne.n	80041e0 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80041b2:	2315      	movs	r3, #21
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	18d3      	adds	r3, r2, r3
 80041c0:	b298      	uxth	r0, r3
 80041c2:	2316      	movs	r3, #22
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	1cbb      	adds	r3, r7, #2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	18d3      	adds	r3, r2, r3
 80041d0:	b299      	uxth	r1, r3
 80041d2:	232c      	movs	r3, #44	; 0x2c
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	001a      	movs	r2, r3
 80041da:	f000 faed 	bl	80047b8 <ILI9341_Draw_Pixel>
 80041de:	e028      	b.n	8004232 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80041e0:	2315      	movs	r3, #21
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2128      	movs	r1, #40	; 0x28
 80041ea:	187a      	adds	r2, r7, r1
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	4353      	muls	r3, r2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	b298      	uxth	r0, r3
 80041fa:	2316      	movs	r3, #22
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	000c      	movs	r4, r1
 8004204:	187a      	adds	r2, r7, r1
 8004206:	8812      	ldrh	r2, [r2, #0]
 8004208:	4353      	muls	r3, r2
 800420a:	b29a      	uxth	r2, r3
 800420c:	1cbb      	adds	r3, r7, #2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	b299      	uxth	r1, r3
 8004214:	0022      	movs	r2, r4
 8004216:	193b      	adds	r3, r7, r4
 8004218:	881c      	ldrh	r4, [r3, #0]
 800421a:	0013      	movs	r3, r2
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	2301      	movs	r3, #1
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	232c      	movs	r3, #44	; 0x2c
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	0023      	movs	r3, r4
 800422e:	f000 fc37 	bl	8004aa0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8004232:	2116      	movs	r1, #22
 8004234:	187b      	adds	r3, r7, r1
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	187b      	adds	r3, r7, r1
 800423a:	3201      	adds	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	2316      	movs	r3, #22
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b07      	cmp	r3, #7
 8004246:	d800      	bhi.n	800424a <ILI9341_Draw_Char+0x1ea>
 8004248:	e75b      	b.n	8004102 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 800424a:	2115      	movs	r1, #21
 800424c:	187b      	adds	r3, r7, r1
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	187b      	adds	r3, r7, r1
 8004252:	3201      	adds	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	2315      	movs	r3, #21
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d800      	bhi.n	8004262 <ILI9341_Draw_Char+0x202>
 8004260:	e74a      	b.n	80040f8 <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b006      	add	sp, #24
 8004268:	bdb0      	pop	{r4, r5, r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	08005d8c 	.word	0x08005d8c

08004270 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	b087      	sub	sp, #28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	000c      	movs	r4, r1
 800427a:	0010      	movs	r0, r2
 800427c:	0019      	movs	r1, r3
 800427e:	250a      	movs	r5, #10
 8004280:	197b      	adds	r3, r7, r5
 8004282:	1c22      	adds	r2, r4, #0
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	2608      	movs	r6, #8
 8004288:	19bb      	adds	r3, r7, r6
 800428a:	1c02      	adds	r2, r0, #0
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	1c0a      	adds	r2, r1, #0
 8004292:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8004294:	197b      	adds	r3, r7, r5
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	3b01      	subs	r3, #1
 800429a:	b298      	uxth	r0, r3
 800429c:	2320      	movs	r3, #32
 800429e:	2208      	movs	r2, #8
 80042a0:	4694      	mov	ip, r2
 80042a2:	44bc      	add	ip, r7
 80042a4:	4463      	add	r3, ip
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	2124      	movs	r1, #36	; 0x24
 80042ae:	2308      	movs	r3, #8
 80042b0:	18fc      	adds	r4, r7, r3
 80042b2:	1863      	adds	r3, r4, r1
 80042b4:	881c      	ldrh	r4, [r3, #0]
 80042b6:	19bb      	adds	r3, r7, r6
 80042b8:	8819      	ldrh	r1, [r3, #0]
 80042ba:	0023      	movs	r3, r4
 80042bc:	f000 f974 	bl	80045a8 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80042c0:	197b      	adds	r3, r7, r5
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	3b02      	subs	r3, #2
 80042c6:	b298      	uxth	r0, r3
 80042c8:	2320      	movs	r3, #32
 80042ca:	2208      	movs	r2, #8
 80042cc:	4694      	mov	ip, r2
 80042ce:	44bc      	add	ip, r7
 80042d0:	4463      	add	r3, ip
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	2124      	movs	r1, #36	; 0x24
 80042da:	2308      	movs	r3, #8
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	185b      	adds	r3, r3, r1
 80042e0:	881c      	ldrh	r4, [r3, #0]
 80042e2:	19bb      	adds	r3, r7, r6
 80042e4:	8819      	ldrh	r1, [r3, #0]
 80042e6:	0023      	movs	r3, r4
 80042e8:	f000 f95e 	bl	80045a8 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 80042ec:	e029      	b.n	8004342 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	7818      	ldrb	r0, [r3, #0]
 80042f6:	1dbb      	adds	r3, r7, #6
 80042f8:	881c      	ldrh	r4, [r3, #0]
 80042fa:	2308      	movs	r3, #8
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	250a      	movs	r5, #10
 8004302:	197b      	adds	r3, r7, r5
 8004304:	8819      	ldrh	r1, [r3, #0]
 8004306:	2324      	movs	r3, #36	; 0x24
 8004308:	2608      	movs	r6, #8
 800430a:	46b4      	mov	ip, r6
 800430c:	44bc      	add	ip, r7
 800430e:	4463      	add	r3, ip
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	2620      	movs	r6, #32
 8004316:	2308      	movs	r3, #8
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	199b      	adds	r3, r3, r6
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	0023      	movs	r3, r4
 8004322:	f7ff fe9d 	bl	8004060 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8004326:	2308      	movs	r3, #8
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	199b      	adds	r3, r3, r6
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	1c1a      	adds	r2, r3, #0
 8004330:	1892      	adds	r2, r2, r2
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	18db      	adds	r3, r3, r3
 8004336:	b299      	uxth	r1, r3
 8004338:	197b      	adds	r3, r7, r5
 800433a:	197a      	adds	r2, r7, r5
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	188a      	adds	r2, r1, r2
 8004340:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1d1      	bne.n	80042ee <ILI9341_Draw_Text+0x7e>
    }


}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b005      	add	sp, #20
 8004350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004352 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8004356:	f000 fcc1 	bl	8004cdc <_LCD_Enable>
	ILI9341_SPI_Init();
 800435a:	f000 f909 	bl	8004570 <ILI9341_SPI_Init>
	_LCD_Reset();
 800435e:	f000 fccb 	bl	8004cf8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8004362:	2001      	movs	r0, #1
 8004364:	f000 fdc8 	bl	8004ef8 <_LCD_SendCommand>
	HAL_Delay(2000);
 8004368:	23fa      	movs	r3, #250	; 0xfa
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	0018      	movs	r0, r3
 800436e:	f7fc fc99 	bl	8000ca4 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8004372:	20cb      	movs	r0, #203	; 0xcb
 8004374:	f000 fdc0 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8004378:	2039      	movs	r0, #57	; 0x39
 800437a:	f000 fdf3 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800437e:	202c      	movs	r0, #44	; 0x2c
 8004380:	f000 fdf0 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x00);
 8004384:	2000      	movs	r0, #0
 8004386:	f000 fded 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x34);
 800438a:	2034      	movs	r0, #52	; 0x34
 800438c:	f000 fdea 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x02);
 8004390:	2002      	movs	r0, #2
 8004392:	f000 fde7 	bl	8004f64 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8004396:	20cf      	movs	r0, #207	; 0xcf
 8004398:	f000 fdae 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800439c:	2000      	movs	r0, #0
 800439e:	f000 fde1 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80043a2:	20c1      	movs	r0, #193	; 0xc1
 80043a4:	f000 fdde 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x30);
 80043a8:	2030      	movs	r0, #48	; 0x30
 80043aa:	f000 fddb 	bl	8004f64 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 80043ae:	20e8      	movs	r0, #232	; 0xe8
 80043b0:	f000 fda2 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 80043b4:	2085      	movs	r0, #133	; 0x85
 80043b6:	f000 fdd5 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x00);
 80043ba:	2000      	movs	r0, #0
 80043bc:	f000 fdd2 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x78);
 80043c0:	2078      	movs	r0, #120	; 0x78
 80043c2:	f000 fdcf 	bl	8004f64 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80043c6:	20ea      	movs	r0, #234	; 0xea
 80043c8:	f000 fd96 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f000 fdc9 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x00);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f000 fdc6 	bl	8004f64 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80043d8:	20ed      	movs	r0, #237	; 0xed
 80043da:	f000 fd8d 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 80043de:	2064      	movs	r0, #100	; 0x64
 80043e0:	f000 fdc0 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x03);
 80043e4:	2003      	movs	r0, #3
 80043e6:	f000 fdbd 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x12);
 80043ea:	2012      	movs	r0, #18
 80043ec:	f000 fdba 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x81);
 80043f0:	2081      	movs	r0, #129	; 0x81
 80043f2:	f000 fdb7 	bl	8004f64 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 80043f6:	20f7      	movs	r0, #247	; 0xf7
 80043f8:	f000 fd7e 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 80043fc:	2020      	movs	r0, #32
 80043fe:	f000 fdb1 	bl	8004f64 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8004402:	20c0      	movs	r0, #192	; 0xc0
 8004404:	f000 fd78 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8004408:	2023      	movs	r0, #35	; 0x23
 800440a:	f000 fdab 	bl	8004f64 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800440e:	20c1      	movs	r0, #193	; 0xc1
 8004410:	f000 fd72 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8004414:	2010      	movs	r0, #16
 8004416:	f000 fda5 	bl	8004f64 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800441a:	20c5      	movs	r0, #197	; 0xc5
 800441c:	f000 fd6c 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8004420:	203e      	movs	r0, #62	; 0x3e
 8004422:	f000 fd9f 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x28);
 8004426:	2028      	movs	r0, #40	; 0x28
 8004428:	f000 fd9c 	bl	8004f64 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800442c:	20c7      	movs	r0, #199	; 0xc7
 800442e:	f000 fd63 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8004432:	2086      	movs	r0, #134	; 0x86
 8004434:	f000 fd96 	bl	8004f64 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8004438:	2036      	movs	r0, #54	; 0x36
 800443a:	f000 fd5d 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800443e:	2048      	movs	r0, #72	; 0x48
 8004440:	f000 fd90 	bl	8004f64 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8004444:	203a      	movs	r0, #58	; 0x3a
 8004446:	f000 fd57 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800444a:	2055      	movs	r0, #85	; 0x55
 800444c:	f000 fd8a 	bl	8004f64 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8004450:	20b1      	movs	r0, #177	; 0xb1
 8004452:	f000 fd51 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8004456:	2000      	movs	r0, #0
 8004458:	f000 fd84 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x18);
 800445c:	2018      	movs	r0, #24
 800445e:	f000 fd81 	bl	8004f64 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8004462:	20b6      	movs	r0, #182	; 0xb6
 8004464:	f000 fd48 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8004468:	2008      	movs	r0, #8
 800446a:	f000 fd7b 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x82);
 800446e:	2082      	movs	r0, #130	; 0x82
 8004470:	f000 fd78 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x27);
 8004474:	2027      	movs	r0, #39	; 0x27
 8004476:	f000 fd75 	bl	8004f64 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800447a:	20f2      	movs	r0, #242	; 0xf2
 800447c:	f000 fd3c 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8004480:	2000      	movs	r0, #0
 8004482:	f000 fd6f 	bl	8004f64 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8004486:	2026      	movs	r0, #38	; 0x26
 8004488:	f000 fd36 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800448c:	2001      	movs	r0, #1
 800448e:	f000 fd69 	bl	8004f64 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8004492:	20e0      	movs	r0, #224	; 0xe0
 8004494:	f000 fd30 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8004498:	200f      	movs	r0, #15
 800449a:	f000 fd63 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x31);
 800449e:	2031      	movs	r0, #49	; 0x31
 80044a0:	f000 fd60 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x2B);
 80044a4:	202b      	movs	r0, #43	; 0x2b
 80044a6:	f000 fd5d 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80044aa:	200c      	movs	r0, #12
 80044ac:	f000 fd5a 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80044b0:	200e      	movs	r0, #14
 80044b2:	f000 fd57 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x08);
 80044b6:	2008      	movs	r0, #8
 80044b8:	f000 fd54 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x4E);
 80044bc:	204e      	movs	r0, #78	; 0x4e
 80044be:	f000 fd51 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0xF1);
 80044c2:	20f1      	movs	r0, #241	; 0xf1
 80044c4:	f000 fd4e 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x37);
 80044c8:	2037      	movs	r0, #55	; 0x37
 80044ca:	f000 fd4b 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x07);
 80044ce:	2007      	movs	r0, #7
 80044d0:	f000 fd48 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x10);
 80044d4:	2010      	movs	r0, #16
 80044d6:	f000 fd45 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x03);
 80044da:	2003      	movs	r0, #3
 80044dc:	f000 fd42 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80044e0:	200e      	movs	r0, #14
 80044e2:	f000 fd3f 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x09);
 80044e6:	2009      	movs	r0, #9
 80044e8:	f000 fd3c 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x00);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f000 fd39 	bl	8004f64 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 80044f2:	20e1      	movs	r0, #225	; 0xe1
 80044f4:	f000 fd00 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80044f8:	2000      	movs	r0, #0
 80044fa:	f000 fd33 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80044fe:	200e      	movs	r0, #14
 8004500:	f000 fd30 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x14);
 8004504:	2014      	movs	r0, #20
 8004506:	f000 fd2d 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x03);
 800450a:	2003      	movs	r0, #3
 800450c:	f000 fd2a 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x11);
 8004510:	2011      	movs	r0, #17
 8004512:	f000 fd27 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x07);
 8004516:	2007      	movs	r0, #7
 8004518:	f000 fd24 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x31);
 800451c:	2031      	movs	r0, #49	; 0x31
 800451e:	f000 fd21 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8004522:	20c1      	movs	r0, #193	; 0xc1
 8004524:	f000 fd1e 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x48);
 8004528:	2048      	movs	r0, #72	; 0x48
 800452a:	f000 fd1b 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x08);
 800452e:	2008      	movs	r0, #8
 8004530:	f000 fd18 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8004534:	200f      	movs	r0, #15
 8004536:	f000 fd15 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800453a:	200c      	movs	r0, #12
 800453c:	f000 fd12 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x31);
 8004540:	2031      	movs	r0, #49	; 0x31
 8004542:	f000 fd0f 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x36);
 8004546:	2036      	movs	r0, #54	; 0x36
 8004548:	f000 fd0c 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800454c:	200f      	movs	r0, #15
 800454e:	f000 fd09 	bl	8004f64 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8004552:	2011      	movs	r0, #17
 8004554:	f000 fcd0 	bl	8004ef8 <_LCD_SendCommand>
	HAL_Delay(240);
 8004558:	20f0      	movs	r0, #240	; 0xf0
 800455a:	f7fc fba3 	bl	8000ca4 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800455e:	2029      	movs	r0, #41	; 0x29
 8004560:	f000 fcca 	bl	8004ef8 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004564:	2000      	movs	r0, #0
 8004566:	f000 fb69 	bl	8004c3c <ILI9341_Set_Rotation>
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <ILI9341_SPI_Init+0x30>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	4013      	ands	r3, r2
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d005      	beq.n	800458c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <ILI9341_SPI_Init+0x30>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <ILI9341_SPI_Init+0x30>)
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <ILI9341_SPI_Init+0x34>)
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <ILI9341_SPI_Init+0x34>)
 8004592:	2110      	movs	r1, #16
 8004594:	438a      	bics	r2, r1
 8004596:	615a      	str	r2, [r3, #20]
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	40013000 	.word	0x40013000
 80045a4:	48000800 	.word	0x48000800

080045a8 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	0005      	movs	r5, r0
 80045b0:	000c      	movs	r4, r1
 80045b2:	0010      	movs	r0, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	1c2a      	adds	r2, r5, #0
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	1c22      	adds	r2, r4, #0
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	1cbb      	adds	r3, r7, #2
 80045c4:	1c02      	adds	r2, r0, #0
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	003b      	movs	r3, r7
 80045ca:	1c0a      	adds	r2, r1, #0
 80045cc:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <ILI9341_Draw_Vertical_Line+0x104>)
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	1dba      	adds	r2, r7, #6
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d300      	bcc.n	80045de <ILI9341_Draw_Vertical_Line+0x36>
 80045dc:	e062      	b.n	80046a4 <ILI9341_Draw_Vertical_Line+0xfc>
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <ILI9341_Draw_Vertical_Line+0x108>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	1d3a      	adds	r2, r7, #4
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d25b      	bcs.n	80046a4 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	1cbb      	adds	r3, r7, #2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <ILI9341_Draw_Vertical_Line+0x108>)
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	b292      	uxth	r2, r2
 80045fe:	4293      	cmp	r3, r2
 8004600:	db07      	blt.n	8004612 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <ILI9341_Draw_Vertical_Line+0x108>)
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b299      	uxth	r1, r3
 8004608:	1cbb      	adds	r3, r7, #2
 800460a:	1d3a      	adds	r2, r7, #4
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	1a8a      	subs	r2, r1, r2
 8004610:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8004612:	1d3a      	adds	r2, r7, #4
 8004614:	1cbb      	adds	r3, r7, #2
 8004616:	8812      	ldrh	r2, [r2, #0]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	18d3      	adds	r3, r2, r3
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29c      	uxth	r4, r3
 8004622:	1dbb      	adds	r3, r7, #6
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	1d3b      	adds	r3, r7, #4
 8004628:	8819      	ldrh	r1, [r3, #0]
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	8818      	ldrh	r0, [r3, #0]
 800462e:	0023      	movs	r3, r4
 8004630:	f000 f840 	bl	80046b4 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800463c:	1cbb      	adds	r3, r7, #2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	4013      	ands	r3, r2
 8004644:	d00e      	beq.n	8004664 <ILI9341_Draw_Vertical_Line+0xbc>
 8004646:	1cbb      	adds	r3, r7, #2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d90a      	bls.n	8004664 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 800464e:	230f      	movs	r3, #15
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8004656:	1cbb      	adds	r3, r7, #2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	b29b      	uxth	r3, r3
 800465e:	1cba      	adds	r2, r7, #2
 8004660:	18db      	adds	r3, r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8004664:	230f      	movs	r3, #15
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	1cbb      	adds	r3, r7, #2
 8004672:	8812      	ldrh	r2, [r2, #0]
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	18d3      	adds	r3, r2, r3
 8004678:	b299      	uxth	r1, r3
 800467a:	003b      	movs	r3, r7
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	1dbb      	adds	r3, r7, #6
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	0018      	movs	r0, r3
 8004684:	f000 f898 	bl	80047b8 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8004688:	1cbb      	adds	r3, r7, #2
 800468a:	881c      	ldrh	r4, [r3, #0]
 800468c:	003b      	movs	r3, r7
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	8819      	ldrh	r1, [r3, #0]
 8004694:	1dbb      	adds	r3, r7, #6
 8004696:	8818      	ldrh	r0, [r3, #0]
 8004698:	2303      	movs	r3, #3
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	0023      	movs	r3, r4
 800469e:	f000 fb4b 	bl	8004d38 <_LCD_Write_Frame>
 80046a2:	e000      	b.n	80046a6 <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80046a4:	46c0      	nop			; (mov r8, r8)
}
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}
 80046ac:	20000012 	.word	0x20000012
 80046b0:	20000010 	.word	0x20000010

080046b4 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	0005      	movs	r5, r0
 80046bc:	000c      	movs	r4, r1
 80046be:	0010      	movs	r0, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	1dbb      	adds	r3, r7, #6
 80046c4:	1c2a      	adds	r2, r5, #0
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	1c22      	adds	r2, r4, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	1cbb      	adds	r3, r7, #2
 80046d0:	1c02      	adds	r2, r0, #0
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	003b      	movs	r3, r7
 80046d6:	1c0a      	adds	r2, r1, #0
 80046d8:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 80046da:	202a      	movs	r0, #42	; 0x2a
 80046dc:	f000 fc0c 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 80046e0:	1dbb      	adds	r3, r7, #6
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 fc3a 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(sc);
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 fc34 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 80046fc:	1cbb      	adds	r3, r7, #2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	b29b      	uxth	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	0018      	movs	r0, r3
 8004708:	f000 fc2c 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(ec);
 800470c:	1cbb      	adds	r3, r7, #2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	0018      	movs	r0, r3
 8004714:	f000 fc26 	bl	8004f64 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8004718:	202b      	movs	r0, #43	; 0x2b
 800471a:	f000 fbed 	bl	8004ef8 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fc1b 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(sp);
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	0018      	movs	r0, r3
 8004736:	f000 fc15 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800473a:	003b      	movs	r3, r7
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	b29b      	uxth	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fc0d 	bl	8004f64 <_LCD_SendData>
	_LCD_SendData(ep);
 800474a:	003b      	movs	r3, r7
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fc07 	bl	8004f64 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8004756:	202c      	movs	r0, #44	; 0x2c
 8004758:	f000 fbce 	bl	8004ef8 <_LCD_SendCommand>
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bdb0      	pop	{r4, r5, r7, pc}

08004764 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af02      	add	r7, sp, #8
 800476a:	0002      	movs	r2, r0
 800476c:	1dbb      	adds	r3, r7, #6
 800476e:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <ILI9341_Fill_Screen+0x4c>)
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29a      	uxth	r2, r3
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <ILI9341_Fill_Screen+0x50>)
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	2100      	movs	r1, #0
 800477e:	2000      	movs	r0, #0
 8004780:	f7ff ff98 	bl	80046b4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <ILI9341_Fill_Screen+0x4c>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	001a      	movs	r2, r3
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <ILI9341_Fill_Screen+0x50>)
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	4353      	muls	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	1dbb      	adds	r3, r7, #6
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	2304      	movs	r3, #4
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	000b      	movs	r3, r1
 80047a0:	2100      	movs	r1, #0
 80047a2:	2000      	movs	r0, #0
 80047a4:	f000 fac8 	bl	8004d38 <_LCD_Write_Frame>
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000012 	.word	0x20000012
 80047b4:	20000010 	.word	0x20000010

080047b8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b08f      	sub	sp, #60	; 0x3c
 80047bc:	af00      	add	r7, sp, #0
 80047be:	0004      	movs	r4, r0
 80047c0:	0008      	movs	r0, r1
 80047c2:	0011      	movs	r1, r2
 80047c4:	1dbb      	adds	r3, r7, #6
 80047c6:	1c22      	adds	r2, r4, #0
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	1c02      	adds	r2, r0, #0
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	1cbb      	adds	r3, r7, #2
 80047d2:	1c0a      	adds	r2, r1, #0
 80047d4:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80047d6:	4bae      	ldr	r3, [pc, #696]	; (8004a90 <ILI9341_Draw_Pixel+0x2d8>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	1dba      	adds	r2, r7, #6
 80047de:	8812      	ldrh	r2, [r2, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d300      	bcc.n	80047e6 <ILI9341_Draw_Pixel+0x2e>
 80047e4:	e150      	b.n	8004a88 <ILI9341_Draw_Pixel+0x2d0>
 80047e6:	4bab      	ldr	r3, [pc, #684]	; (8004a94 <ILI9341_Draw_Pixel+0x2dc>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	1d3a      	adds	r2, r7, #4
 80047ee:	8812      	ldrh	r2, [r2, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d300      	bcc.n	80047f6 <ILI9341_Draw_Pixel+0x3e>
 80047f4:	e148      	b.n	8004a88 <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80047f6:	4ba8      	ldr	r3, [pc, #672]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	4ba7      	ldr	r3, [pc, #668]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80047fc:	2101      	movs	r1, #1
 80047fe:	438a      	bics	r2, r1
 8004800:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004802:	4ba6      	ldr	r3, [pc, #664]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	4ba5      	ldr	r3, [pc, #660]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004808:	2110      	movs	r1, #16
 800480a:	438a      	bics	r2, r1
 800480c:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800480e:	220a      	movs	r2, #10
 8004810:	2100      	movs	r1, #0
 8004812:	202a      	movs	r0, #42	; 0x2a
 8004814:	f000 fbdc 	bl	8004fd0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004818:	2300      	movs	r3, #0
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
 800481c:	e008      	b.n	8004830 <ILI9341_Draw_Pixel+0x78>
 800481e:	4b9f      	ldr	r3, [pc, #636]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	4b9e      	ldr	r3, [pc, #632]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004824:	2110      	movs	r1, #16
 8004826:	438a      	bics	r2, r1
 8004828:	615a      	str	r2, [r3, #20]
 800482a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482c:	3301      	adds	r3, #1
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b02      	cmp	r3, #2
 8004834:	ddf3      	ble.n	800481e <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004836:	4b98      	ldr	r3, [pc, #608]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	4b97      	ldr	r3, [pc, #604]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 800483c:	2101      	movs	r1, #1
 800483e:	430a      	orrs	r2, r1
 8004840:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004842:	4b96      	ldr	r3, [pc, #600]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	4b95      	ldr	r3, [pc, #596]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004848:	2110      	movs	r1, #16
 800484a:	430a      	orrs	r2, r1
 800484c:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800484e:	4b93      	ldr	r3, [pc, #588]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	4b92      	ldr	r3, [pc, #584]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004854:	2110      	movs	r1, #16
 8004856:	438a      	bics	r2, r1
 8004858:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800485a:	1dbb      	adds	r3, r7, #6
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	b2da      	uxtb	r2, r3
 8004864:	2114      	movs	r1, #20
 8004866:	187b      	adds	r3, r7, r1
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	1dbb      	adds	r3, r7, #6
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	187b      	adds	r3, r7, r1
 8004872:	705a      	strb	r2, [r3, #1]
 8004874:	1dbb      	adds	r3, r7, #6
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	121b      	asrs	r3, r3, #8
 800487c:	b2da      	uxtb	r2, r3
 800487e:	187b      	adds	r3, r7, r1
 8004880:	709a      	strb	r2, [r3, #2]
 8004882:	1dbb      	adds	r3, r7, #6
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3301      	adds	r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	187b      	adds	r3, r7, r1
 800488e:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8004890:	1878      	adds	r0, r7, r1
 8004892:	230a      	movs	r3, #10
 8004894:	2200      	movs	r2, #0
 8004896:	2104      	movs	r1, #4
 8004898:	f000 fbd4 	bl	8005044 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800489c:	2300      	movs	r3, #0
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
 80048a0:	e008      	b.n	80048b4 <ILI9341_Draw_Pixel+0xfc>
 80048a2:	4b7e      	ldr	r3, [pc, #504]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	4b7d      	ldr	r3, [pc, #500]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048a8:	2110      	movs	r1, #16
 80048aa:	438a      	bics	r2, r1
 80048ac:	615a      	str	r2, [r3, #20]
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	3301      	adds	r3, #1
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	ddf3      	ble.n	80048a2 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80048ba:	4b78      	ldr	r3, [pc, #480]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	4b77      	ldr	r3, [pc, #476]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048c0:	2110      	movs	r1, #16
 80048c2:	430a      	orrs	r2, r1
 80048c4:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80048c6:	4b74      	ldr	r3, [pc, #464]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	4b73      	ldr	r3, [pc, #460]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	438a      	bics	r2, r1
 80048d0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80048d2:	4b72      	ldr	r3, [pc, #456]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	4b71      	ldr	r3, [pc, #452]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048d8:	2110      	movs	r1, #16
 80048da:	438a      	bics	r2, r1
 80048dc:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 80048de:	220a      	movs	r2, #10
 80048e0:	2100      	movs	r1, #0
 80048e2:	202b      	movs	r0, #43	; 0x2b
 80048e4:	f000 fb74 	bl	8004fd0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ec:	e008      	b.n	8004900 <ILI9341_Draw_Pixel+0x148>
 80048ee:	4b6b      	ldr	r3, [pc, #428]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	4b6a      	ldr	r3, [pc, #424]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80048f4:	2110      	movs	r1, #16
 80048f6:	438a      	bics	r2, r1
 80048f8:	615a      	str	r2, [r3, #20]
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	3301      	adds	r3, #1
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b02      	cmp	r3, #2
 8004904:	ddf3      	ble.n	80048ee <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004906:	4b64      	ldr	r3, [pc, #400]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 800490c:	2101      	movs	r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004912:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004918:	2110      	movs	r1, #16
 800491a:	430a      	orrs	r2, r1
 800491c:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800491e:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	4b5e      	ldr	r3, [pc, #376]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004924:	2110      	movs	r1, #16
 8004926:	438a      	bics	r2, r1
 8004928:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	2110      	movs	r1, #16
 8004936:	187b      	adds	r3, r7, r1
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	187b      	adds	r3, r7, r1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	121b      	asrs	r3, r3, #8
 800494c:	b2da      	uxtb	r2, r3
 800494e:	187b      	adds	r3, r7, r1
 8004950:	709a      	strb	r2, [r3, #2]
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	3301      	adds	r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	187b      	adds	r3, r7, r1
 800495e:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8004960:	1878      	adds	r0, r7, r1
 8004962:	230a      	movs	r3, #10
 8004964:	2200      	movs	r2, #0
 8004966:	2104      	movs	r1, #4
 8004968:	f000 fb6c 	bl	8005044 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800496c:	2300      	movs	r3, #0
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004970:	e008      	b.n	8004984 <ILI9341_Draw_Pixel+0x1cc>
 8004972:	4b4a      	ldr	r3, [pc, #296]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004978:	2110      	movs	r1, #16
 800497a:	438a      	bics	r2, r1
 800497c:	615a      	str	r2, [r3, #20]
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	3301      	adds	r3, #1
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2b02      	cmp	r3, #2
 8004988:	ddf3      	ble.n	8004972 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800498a:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004990:	2110      	movs	r1, #16
 8004992:	430a      	orrs	r2, r1
 8004994:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8004996:	4b40      	ldr	r3, [pc, #256]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 800499c:	2101      	movs	r1, #1
 800499e:	438a      	bics	r2, r1
 80049a0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80049a2:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049a8:	2110      	movs	r1, #16
 80049aa:	438a      	bics	r2, r1
 80049ac:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 80049ae:	220a      	movs	r2, #10
 80049b0:	2100      	movs	r1, #0
 80049b2:	202c      	movs	r0, #44	; 0x2c
 80049b4:	f000 fb0c 	bl	8004fd0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e008      	b.n	80049d0 <ILI9341_Draw_Pixel+0x218>
 80049be:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049c4:	2110      	movs	r1, #16
 80049c6:	438a      	bics	r2, r1
 80049c8:	615a      	str	r2, [r3, #20]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	3301      	adds	r3, #1
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	ddf3      	ble.n	80049be <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <ILI9341_Draw_Pixel+0x2e0>)
 80049dc:	2101      	movs	r1, #1
 80049de:	430a      	orrs	r2, r1
 80049e0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049e8:	2110      	movs	r1, #16
 80049ea:	430a      	orrs	r2, r1
 80049ec:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 80049f4:	2110      	movs	r1, #16
 80049f6:	438a      	bics	r2, r1
 80049f8:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80049fa:	1cbb      	adds	r3, r7, #2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	210c      	movs	r1, #12
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	1cbb      	adds	r3, r7, #2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8004a14:	1878      	adds	r0, r7, r1
 8004a16:	2301      	movs	r3, #1
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	f000 fb12 	bl	8005044 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	e008      	b.n	8004a38 <ILI9341_Draw_Pixel+0x280>
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a2c:	2110      	movs	r1, #16
 8004a2e:	438a      	bics	r2, r1
 8004a30:	615a      	str	r2, [r3, #20]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	3301      	adds	r3, #1
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	ddf3      	ble.n	8004a26 <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e008      	b.n	8004a56 <ILI9341_Draw_Pixel+0x29e>
 8004a44:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a4a:	2110      	movs	r1, #16
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	615a      	str	r2, [r3, #20]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	ddf3      	ble.n	8004a44 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e008      	b.n	8004a74 <ILI9341_Draw_Pixel+0x2bc>
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a68:	2110      	movs	r1, #16
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	615a      	str	r2, [r3, #20]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	ddf3      	ble.n	8004a62 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <ILI9341_Draw_Pixel+0x2e4>)
 8004a80:	2110      	movs	r1, #16
 8004a82:	430a      	orrs	r2, r1
 8004a84:	615a      	str	r2, [r3, #20]
 8004a86:	e000      	b.n	8004a8a <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004a88:	46c0      	nop			; (mov r8, r8)


}
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b00f      	add	sp, #60	; 0x3c
 8004a8e:	bd90      	pop	{r4, r7, pc}
 8004a90:	20000012 	.word	0x20000012
 8004a94:	20000010 	.word	0x20000010
 8004a98:	48000400 	.word	0x48000400
 8004a9c:	48000800 	.word	0x48000800

08004aa0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	0005      	movs	r5, r0
 8004aa8:	000c      	movs	r4, r1
 8004aaa:	0010      	movs	r0, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	1dbb      	adds	r3, r7, #6
 8004ab0:	1c2a      	adds	r2, r5, #0
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	1c22      	adds	r2, r4, #0
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	1cbb      	adds	r3, r7, #2
 8004abc:	1c02      	adds	r2, r0, #0
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	003b      	movs	r3, r7
 8004ac2:	1c0a      	adds	r2, r1, #0
 8004ac4:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	; (8004c34 <ILI9341_Draw_Rectangle+0x194>)
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	1dba      	adds	r2, r7, #6
 8004ace:	8812      	ldrh	r2, [r2, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d300      	bcc.n	8004ad6 <ILI9341_Draw_Rectangle+0x36>
 8004ad4:	e0a9      	b.n	8004c2a <ILI9341_Draw_Rectangle+0x18a>
 8004ad6:	4b58      	ldr	r3, [pc, #352]	; (8004c38 <ILI9341_Draw_Rectangle+0x198>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	1d3a      	adds	r2, r7, #4
 8004ade:	8812      	ldrh	r2, [r2, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d300      	bcc.n	8004ae6 <ILI9341_Draw_Rectangle+0x46>
 8004ae4:	e0a1      	b.n	8004c2a <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	1cbb      	adds	r3, r7, #2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	4a50      	ldr	r2, [pc, #320]	; (8004c34 <ILI9341_Draw_Rectangle+0x194>)
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	b292      	uxth	r2, r2
 8004af8:	4293      	cmp	r3, r2
 8004afa:	db07      	blt.n	8004b0c <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8004afc:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <ILI9341_Draw_Rectangle+0x194>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b299      	uxth	r1, r3
 8004b02:	1cbb      	adds	r3, r7, #2
 8004b04:	1dba      	adds	r2, r7, #6
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	1a8a      	subs	r2, r1, r2
 8004b0a:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	881a      	ldrh	r2, [r3, #0]
 8004b10:	003b      	movs	r3, r7
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	4a47      	ldr	r2, [pc, #284]	; (8004c38 <ILI9341_Draw_Rectangle+0x198>)
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	db07      	blt.n	8004b32 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8004b22:	4b45      	ldr	r3, [pc, #276]	; (8004c38 <ILI9341_Draw_Rectangle+0x198>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b299      	uxth	r1, r3
 8004b28:	003b      	movs	r3, r7
 8004b2a:	1d3a      	adds	r2, r7, #4
 8004b2c:	8812      	ldrh	r2, [r2, #0]
 8004b2e:	1a8a      	subs	r2, r1, r2
 8004b30:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8004b32:	1dba      	adds	r2, r7, #6
 8004b34:	1cbb      	adds	r3, r7, #2
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8004b42:	1d3a      	adds	r2, r7, #4
 8004b44:	003b      	movs	r3, r7
 8004b46:	8812      	ldrh	r2, [r2, #0]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	8819      	ldrh	r1, [r3, #0]
 8004b56:	1dbb      	adds	r3, r7, #6
 8004b58:	8818      	ldrh	r0, [r3, #0]
 8004b5a:	0013      	movs	r3, r2
 8004b5c:	0022      	movs	r2, r4
 8004b5e:	f7ff fda9 	bl	80046b4 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8004b62:	200e      	movs	r0, #14
 8004b64:	183b      	adds	r3, r7, r0
 8004b66:	003a      	movs	r2, r7
 8004b68:	1cb9      	adds	r1, r7, #2
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	8809      	ldrh	r1, [r1, #0]
 8004b6e:	434a      	muls	r2, r1
 8004b70:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8004b72:	230d      	movs	r3, #13
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8004b7a:	183b      	adds	r3, r7, r0
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d010      	beq.n	8004ba6 <ILI9341_Draw_Rectangle+0x106>
 8004b84:	230e      	movs	r3, #14
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d90b      	bls.n	8004ba6 <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 8004b8e:	230d      	movs	r3, #13
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8004b96:	220e      	movs	r2, #14
 8004b98:	18bb      	adds	r3, r7, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	18ba      	adds	r2, r7, r2
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8004ba6:	230e      	movs	r3, #14
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	881c      	ldrh	r4, [r3, #0]
 8004bac:	2320      	movs	r3, #32
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	8819      	ldrh	r1, [r3, #0]
 8004bb6:	1dbb      	adds	r3, r7, #6
 8004bb8:	8818      	ldrh	r0, [r3, #0]
 8004bba:	2324      	movs	r3, #36	; 0x24
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	0023      	movs	r3, r4
 8004bc4:	f000 f8b8 	bl	8004d38 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8004bc8:	230d      	movs	r3, #13
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02c      	beq.n	8004c2c <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004bd2:	1dba      	adds	r2, r7, #6
 8004bd4:	1cbb      	adds	r3, r7, #2
 8004bd6:	8812      	ldrh	r2, [r2, #0]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	18d3      	adds	r3, r2, r3
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b02      	subs	r3, #2
 8004be0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004be2:	1d3a      	adds	r2, r7, #4
 8004be4:	003b      	movs	r3, r7
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2420      	movs	r4, #32
 8004bf4:	193a      	adds	r2, r7, r4
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	f7ff fddd 	bl	80047b8 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8004bfe:	1dba      	adds	r2, r7, #6
 8004c00:	1cbb      	adds	r3, r7, #2
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8004c0e:	1d3a      	adds	r2, r7, #4
 8004c10:	003b      	movs	r3, r7
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	193a      	adds	r2, r7, r4
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	0019      	movs	r1, r3
 8004c24:	f7ff fdc8 	bl	80047b8 <ILI9341_Draw_Pixel>
 8004c28:	e000      	b.n	8004c2c <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8004c2a:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bdb0      	pop	{r4, r5, r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	20000012 	.word	0x20000012
 8004c38:	20000010 	.word	0x20000010

08004c3c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	0002      	movs	r2, r0
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 8004c48:	240f      	movs	r4, #15
 8004c4a:	193b      	adds	r3, r7, r4
 8004c4c:	1dfa      	adds	r2, r7, #7
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8004c52:	2036      	movs	r0, #54	; 0x36
 8004c54:	f000 f950 	bl	8004ef8 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d013      	beq.n	8004c88 <ILI9341_Set_Rotation+0x4c>
 8004c60:	dc02      	bgt.n	8004c68 <ILI9341_Set_Rotation+0x2c>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004c66:	e030      	b.n	8004cca <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d018      	beq.n	8004c9e <ILI9341_Set_Rotation+0x62>
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d021      	beq.n	8004cb4 <ILI9341_Set_Rotation+0x78>
			break;
 8004c70:	e02b      	b.n	8004cca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8004c72:	2048      	movs	r0, #72	; 0x48
 8004c74:	f000 f976 	bl	8004f64 <_LCD_SendData>
			LCD_WIDTH = 240;
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <ILI9341_Set_Rotation+0x98>)
 8004c7a:	22f0      	movs	r2, #240	; 0xf0
 8004c7c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <ILI9341_Set_Rotation+0x9c>)
 8004c80:	22a0      	movs	r2, #160	; 0xa0
 8004c82:	0052      	lsls	r2, r2, #1
 8004c84:	801a      	strh	r2, [r3, #0]
			break;
 8004c86:	e020      	b.n	8004cca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8004c88:	2028      	movs	r0, #40	; 0x28
 8004c8a:	f000 f96b 	bl	8004f64 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <ILI9341_Set_Rotation+0x98>)
 8004c90:	22a0      	movs	r2, #160	; 0xa0
 8004c92:	0052      	lsls	r2, r2, #1
 8004c94:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <ILI9341_Set_Rotation+0x9c>)
 8004c98:	22f0      	movs	r2, #240	; 0xf0
 8004c9a:	801a      	strh	r2, [r3, #0]
			break;
 8004c9c:	e015      	b.n	8004cca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 8004c9e:	2088      	movs	r0, #136	; 0x88
 8004ca0:	f000 f960 	bl	8004f64 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <ILI9341_Set_Rotation+0x98>)
 8004ca6:	22f0      	movs	r2, #240	; 0xf0
 8004ca8:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <ILI9341_Set_Rotation+0x9c>)
 8004cac:	22a0      	movs	r2, #160	; 0xa0
 8004cae:	0052      	lsls	r2, r2, #1
 8004cb0:	801a      	strh	r2, [r3, #0]
			break;
 8004cb2:	e00a      	b.n	8004cca <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8004cb4:	20e8      	movs	r0, #232	; 0xe8
 8004cb6:	f000 f955 	bl	8004f64 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <ILI9341_Set_Rotation+0x98>)
 8004cbc:	22a0      	movs	r2, #160	; 0xa0
 8004cbe:	0052      	lsls	r2, r2, #1
 8004cc0:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <ILI9341_Set_Rotation+0x9c>)
 8004cc4:	22f0      	movs	r2, #240	; 0xf0
 8004cc6:	801a      	strh	r2, [r3, #0]
			break;
 8004cc8:	46c0      	nop			; (mov r8, r8)
	}
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b005      	add	sp, #20
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	20000012 	.word	0x20000012
 8004cd8:	20000010 	.word	0x20000010

08004cdc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <_LCD_Enable+0x18>)
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <_LCD_Enable+0x18>)
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	615a      	str	r2, [r3, #20]
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	48000800 	.word	0x48000800

08004cf8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <_LCD_Reset+0x3c>)
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <_LCD_Reset+0x3c>)
 8004d02:	2120      	movs	r1, #32
 8004d04:	438a      	bics	r2, r1
 8004d06:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8004d08:	20c8      	movs	r0, #200	; 0xc8
 8004d0a:	f7fb ffcb 	bl	8000ca4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <_LCD_Reset+0x3c>)
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <_LCD_Reset+0x3c>)
 8004d14:	2110      	movs	r1, #16
 8004d16:	438a      	bics	r2, r1
 8004d18:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 8004d1a:	20c8      	movs	r0, #200	; 0xc8
 8004d1c:	f7fb ffc2 	bl	8000ca4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <_LCD_Reset+0x3c>)
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <_LCD_Reset+0x3c>)
 8004d26:	2120      	movs	r1, #32
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	615a      	str	r2, [r3, #20]
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	48000800 	.word	0x48000800

08004d38 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	b095      	sub	sp, #84	; 0x54
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	0006      	movs	r6, r0
 8004d40:	0008      	movs	r0, r1
 8004d42:	0011      	movs	r1, r2
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	230e      	movs	r3, #14
 8004d48:	2218      	movs	r2, #24
 8004d4a:	4694      	mov	ip, r2
 8004d4c:	44bc      	add	ip, r7
 8004d4e:	4463      	add	r3, ip
 8004d50:	1c32      	adds	r2, r6, #0
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	230c      	movs	r3, #12
 8004d56:	2218      	movs	r2, #24
 8004d58:	4694      	mov	ip, r2
 8004d5a:	44bc      	add	ip, r7
 8004d5c:	4463      	add	r3, ip
 8004d5e:	1c02      	adds	r2, r0, #0
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	230a      	movs	r3, #10
 8004d64:	2218      	movs	r2, #24
 8004d66:	4694      	mov	ip, r2
 8004d68:	44bc      	add	ip, r7
 8004d6a:	4463      	add	r3, ip
 8004d6c:	1c0a      	adds	r2, r1, #0
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	466b      	mov	r3, sp
 8004d72:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4a5b      	ldr	r2, [pc, #364]	; (8004eec <_LCD_Write_Frame+0x1b4>)
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d202      	bcs.n	8004d8a <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
 8004d88:	e002      	b.n	8004d90 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <_LCD_Write_Frame+0x1b4>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8004d90:	230a      	movs	r3, #10
 8004d92:	2218      	movs	r2, #24
 8004d94:	4694      	mov	ip, r2
 8004d96:	44bc      	add	ip, r7
 8004d98:	4463      	add	r3, ip
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	231f      	movs	r3, #31
 8004da2:	2118      	movs	r1, #24
 8004da4:	468c      	mov	ip, r1
 8004da6:	44bc      	add	ip, r7
 8004da8:	4463      	add	r3, ip
 8004daa:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8004dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dae:	001a      	movs	r2, r3
 8004db0:	3a01      	subs	r2, #1
 8004db2:	633a      	str	r2, [r7, #48]	; 0x30
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	60fa      	str	r2, [r7, #12]
 8004dba:	68b8      	ldr	r0, [r7, #8]
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	0f52      	lsrs	r2, r2, #29
 8004dc2:	000e      	movs	r6, r1
 8004dc4:	00f6      	lsls	r6, r6, #3
 8004dc6:	617e      	str	r6, [r7, #20]
 8004dc8:	697e      	ldr	r6, [r7, #20]
 8004dca:	4316      	orrs	r6, r2
 8004dcc:	617e      	str	r6, [r7, #20]
 8004dce:	0002      	movs	r2, r0
 8004dd0:	00d2      	lsls	r2, r2, #3
 8004dd2:	613a      	str	r2, [r7, #16]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	6838      	ldr	r0, [r7, #0]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	0002      	movs	r2, r0
 8004de0:	0f52      	lsrs	r2, r2, #29
 8004de2:	000e      	movs	r6, r1
 8004de4:	00f5      	lsls	r5, r6, #3
 8004de6:	4315      	orrs	r5, r2
 8004de8:	0002      	movs	r2, r0
 8004dea:	00d4      	lsls	r4, r2, #3
 8004dec:	3307      	adds	r3, #7
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	466a      	mov	r2, sp
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	469d      	mov	sp, r3
 8004df8:	466b      	mov	r3, sp
 8004dfa:	3300      	adds	r3, #0
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e02:	e017      	b.n	8004e34 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8004e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	221f      	movs	r2, #31
 8004e0c:	2118      	movs	r1, #24
 8004e0e:	468c      	mov	ip, r1
 8004e10:	44bc      	add	ip, r7
 8004e12:	4462      	add	r2, ip
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	2118      	movs	r1, #24
 8004e20:	468c      	mov	ip, r1
 8004e22:	44bc      	add	ip, r7
 8004e24:	4462      	add	r2, ip
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	b2d1      	uxtb	r1, r2
 8004e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	3302      	adds	r3, #2
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d3e3      	bcc.n	8004e04 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8004e50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e54:	f7fb f958 	bl	8000108 <__udivsi3>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7fb f9d7 	bl	8000214 <__aeabi_uidivmod>
 8004e66:	000b      	movs	r3, r1
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004e6a:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <_LCD_Write_Frame+0x1b8>)
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <_LCD_Write_Frame+0x1b8>)
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004e7c:	2110      	movs	r1, #16
 8004e7e:	438a      	bics	r2, r1
 8004e80:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8004e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8c:	e008      	b.n	8004ea0 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8004e8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e92:	230a      	movs	r3, #10
 8004e94:	2200      	movs	r2, #0
 8004e96:	f000 f8d5 	bl	8005044 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3f2      	bcc.n	8004e8e <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8004ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eac:	230a      	movs	r3, #10
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f000 f8c8 	bl	8005044 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	e008      	b.n	8004ecc <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004ec0:	2110      	movs	r1, #16
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	3301      	adds	r3, #1
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	ddf3      	ble.n	8004eba <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <_LCD_Write_Frame+0x1bc>)
 8004ed8:	2110      	movs	r1, #16
 8004eda:	430a      	orrs	r2, r1
 8004edc:	615a      	str	r2, [r3, #20]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	469d      	mov	sp, r3

}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b015      	add	sp, #84	; 0x54
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	20000014 	.word	0x20000014
 8004ef0:	48000400 	.word	0x48000400
 8004ef4:	48000800 	.word	0x48000800

08004ef8 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	0002      	movs	r2, r0
 8004f00:	1dfb      	adds	r3, r7, #7
 8004f02:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f0a:	2110      	movs	r1, #16
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <_LCD_SendCommand+0x68>)
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <_LCD_SendCommand+0x68>)
 8004f16:	2101      	movs	r1, #1
 8004f18:	438a      	bics	r2, r1
 8004f1a:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 f853 	bl	8004fd0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e008      	b.n	8004f42 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f36:	2110      	movs	r1, #16
 8004f38:	438a      	bics	r2, r1
 8004f3a:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	ddf3      	ble.n	8004f30 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <_LCD_SendCommand+0x64>)
 8004f4e:	2110      	movs	r1, #16
 8004f50:	430a      	orrs	r2, r1
 8004f52:	615a      	str	r2, [r3, #20]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	48000800 	.word	0x48000800
 8004f60:	48000400 	.word	0x48000400

08004f64 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	1dfb      	adds	r3, r7, #7
 8004f6e:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8004f70:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <_LCD_SendData+0x64>)
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <_LCD_SendData+0x64>)
 8004f76:	2101      	movs	r1, #1
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <_LCD_SendData+0x68>)
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <_LCD_SendData+0x68>)
 8004f82:	2110      	movs	r1, #16
 8004f84:	438a      	bics	r2, r1
 8004f86:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2100      	movs	r1, #0
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f81d 	bl	8004fd0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e008      	b.n	8004fae <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <_LCD_SendData+0x68>)
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <_LCD_SendData+0x68>)
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	438a      	bics	r2, r1
 8004fa6:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	ddf3      	ble.n	8004f9c <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <_LCD_SendData+0x68>)
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <_LCD_SendData+0x68>)
 8004fba:	2110      	movs	r1, #16
 8004fbc:	438a      	bics	r2, r1
 8004fbe:	615a      	str	r2, [r3, #20]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b004      	add	sp, #16
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	48000400 	.word	0x48000400
 8004fcc:	48000800 	.word	0x48000800

08004fd0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	0004      	movs	r4, r0
 8004fd8:	0008      	movs	r0, r1
 8004fda:	0011      	movs	r1, r2
 8004fdc:	1dfb      	adds	r3, r7, #7
 8004fde:	1c22      	adds	r2, r4, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	1dbb      	adds	r3, r7, #6
 8004fe4:	1c02      	adds	r2, r0, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	1d7b      	adds	r3, r7, #5
 8004fea:	1c0a      	adds	r2, r1, #0
 8004fec:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e003      	b.n	8004ffc <_SPI_SendByte+0x2c>
   		asm("nop");
 8004ff4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	1dbb      	adds	r3, r7, #6
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	dbf6      	blt.n	8004ff4 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <_SPI_SendByte+0x6c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2202      	movs	r2, #2
 800500c:	4013      	ands	r3, r2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d103      	bne.n	800501a <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8005012:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <_SPI_SendByte+0x70>)
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	e003      	b.n	8005028 <_SPI_SendByte+0x58>
   		asm("nop");
 8005020:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3301      	adds	r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	1d7b      	adds	r3, r7, #5
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	dbf6      	blt.n	8005020 <_SPI_SendByte+0x50>

#endif

}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b005      	add	sp, #20
 8005038:	bd90      	pop	{r4, r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	40013000 	.word	0x40013000
 8005040:	4001300c 	.word	0x4001300c

08005044 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	0019      	movs	r1, r3
 8005050:	1dfb      	adds	r3, r7, #7
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	1dbb      	adds	r3, r7, #6
 8005056:	1c0a      	adds	r2, r1, #0
 8005058:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e003      	b.n	8005068 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8005060:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3301      	adds	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	dbf6      	blt.n	8005060 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8005076:	e01d      	b.n	80050b4 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <_SPI_SendByteMultiByte+0xa4>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2202      	movs	r2, #2
 800507e:	4013      	ands	r3, r2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d117      	bne.n	80050b4 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d90a      	bls.n	80050a0 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <_SPI_SendByteMultiByte+0xa4>)
 8005090:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3b02      	subs	r3, #2
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	e009      	b.n	80050b4 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 80050a0:	4a12      	ldr	r2, [pc, #72]	; (80050ec <_SPI_SendByteMultiByte+0xa8>)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1de      	bne.n	8005078 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <_SPI_SendByteMultiByte+0xa4>)
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <_SPI_SendByteMultiByte+0xa4>)
 80050c0:	2140      	movs	r1, #64	; 0x40
 80050c2:	438a      	bics	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e003      	b.n	80050d4 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 80050cc:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	3301      	adds	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	1dbb      	adds	r3, r7, #6
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	429a      	cmp	r2, r3
 80050dc:	dbf6      	blt.n	80050cc <_SPI_SendByteMultiByte+0x88>

#endif

}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b008      	add	sp, #32
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	40013000 	.word	0x40013000
 80050ec:	4001300c 	.word	0x4001300c

080050f0 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 80050f4:	4b02      	ldr	r3, [pc, #8]	; (8005100 <TSC2046_EM_GetTouchScreenState+0x10>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	20001038 	.word	0x20001038

08005104 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	0002      	movs	r2, r0
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <TSC2046_EM_ProcessEvent+0x4c>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	3300      	adds	r3, #0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d815      	bhi.n	8005146 <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <TSC2046_EM_ProcessEvent+0x24>
 8005122:	2b01      	cmp	r3, #1
 8005124:	d007      	beq.n	8005136 <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 8005126:	e00d      	b.n	8005144 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 8005128:	f000 f81a 	bl	8005160 <TSC2046_EM_EnableIdleState>
 800512c:	0003      	movs	r3, r0
 800512e:	001a      	movs	r2, r3
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <TSC2046_EM_ProcessEvent+0x4c>)
 8005132:	701a      	strb	r2, [r3, #0]
					break;
 8005134:	e006      	b.n	8005144 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 8005136:	f000 f80d 	bl	8005154 <TSC2046_EM_EnableConversionState>
 800513a:	0003      	movs	r3, r0
 800513c:	001a      	movs	r2, r3
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <TSC2046_EM_ProcessEvent+0x4c>)
 8005140:	701a      	strb	r2, [r3, #0]
					break;
 8005142:	46c0      	nop			; (mov r8, r8)
			break;
 8005144:	46c0      	nop			; (mov r8, r8)
	}
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	20001038 	.word	0x20001038

08005154 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 8005158:	2301      	movs	r3, #1
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8005164:	2300      	movs	r3, #0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 8005174:	2200      	movs	r2, #0
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TSC2046_HM_Init+0x60>)
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 8005184:	2101      	movs	r1, #1
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <TSC2046_HM_Init+0x5c>)
 8005190:	2101      	movs	r1, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	e00e      	b.n	80051ba <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <TSC2046_HM_Init+0x64>)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	2100      	movs	r1, #0
 80051a4:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <TSC2046_HM_Init+0x64>)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	18d3      	adds	r3, r2, r3
 80051ae:	3302      	adds	r3, #2
 80051b0:	2200      	movs	r2, #0
 80051b2:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3301      	adds	r3, #1
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dded      	ble.n	800519c <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40014800 	.word	0x40014800
 80051cc:	00000fff 	.word	0x00000fff
 80051d0:	200011d8 	.word	0x200011d8

080051d4 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 80051e0:	f7ff ff86 	bl	80050f0 <TSC2046_EM_GetTouchScreenState>
 80051e4:	0003      	movs	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d138      	bne.n	800525c <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 80051ea:	f000 f8b7 	bl	800535c <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	e02d      	b.n	8005250 <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 80051f4:	f000 f8a2 	bl	800533c <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 80051f8:	20d0      	movs	r0, #208	; 0xd0
 80051fa:	f000 f8c3 	bl	8005384 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 80051fe:	f000 f8d9 	bl	80053b4 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8005202:	20d0      	movs	r0, #208	; 0xd0
 8005204:	f000 f8be 	bl	8005384 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 8005208:	f000 f8d4 	bl	80053b4 <_SpiReceive16>
 800520c:	0003      	movs	r3, r0
 800520e:	0019      	movs	r1, r3
 8005210:	4a1a      	ldr	r2, [pc, #104]	; (800527c <TSC2046_HM_RunConversion+0xa8>)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	3302      	adds	r3, #2
 800521a:	1c0a      	adds	r2, r1, #0
 800521c:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 800521e:	f000 f87f 	bl	8005320 <_SetCsPinHigh>

				_SetCsPinLow();
 8005222:	f000 f88b 	bl	800533c <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8005226:	2090      	movs	r0, #144	; 0x90
 8005228:	f000 f8ac 	bl	8005384 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 800522c:	f000 f8c2 	bl	80053b4 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8005230:	2090      	movs	r0, #144	; 0x90
 8005232:	f000 f8a7 	bl	8005384 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 8005236:	f000 f8bd 	bl	80053b4 <_SpiReceive16>
 800523a:	0003      	movs	r3, r0
 800523c:	0019      	movs	r1, r3
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <TSC2046_HM_RunConversion+0xa8>)
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 8005246:	f000 f86b 	bl	8005320 <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	ddce      	ble.n	80051f4 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 8005256:	f000 f813 	bl	8005280 <TSC2046_HM_ConvertToQVGA>
 800525a:	e008      	b.n	800526e <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <TSC2046_HM_RunConversion+0xa8>)
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <TSC2046_HM_RunConversion+0xa8>)
 8005264:	2200      	movs	r2, #0
 8005266:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 8005268:	1dfb      	adds	r3, r7, #7
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800526e:	1dfb      	adds	r3, r7, #7
 8005270:	781b      	ldrb	r3, [r3, #0]

}
 8005272:	0018      	movs	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	b002      	add	sp, #8
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	200011d8 	.word	0x200011d8

08005280 <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	22a0      	movs	r2, #160	; 0xa0
 800528a:	0052      	lsls	r2, r2, #1
 800528c:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	22f0      	movs	r2, #240	; 0xf0
 8005292:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8005294:	4b21      	ldr	r3, [pc, #132]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005296:	881a      	ldrh	r2, [r3, #0]
 8005298:	1dbb      	adds	r3, r7, #6
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7fa ff32 	bl	8000108 <__udivsi3>
 80052a4:	0003      	movs	r3, r0
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	4b1c      	ldr	r3, [pc, #112]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052aa:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052ae:	885a      	ldrh	r2, [r3, #2]
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	0019      	movs	r1, r3
 80052b6:	0010      	movs	r0, r2
 80052b8:	f7fa ff26 	bl	8000108 <__udivsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	b29a      	uxth	r2, r3
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052c2:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	3b0a      	subs	r3, #10
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052ce:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052d2:	885b      	ldrh	r3, [r3, #2]
 80052d4:	3b0a      	subs	r3, #10
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052da:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052de:	881c      	ldrh	r4, [r3, #0]
 80052e0:	1dbb      	adds	r3, r7, #6
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2150      	movs	r1, #80	; 0x50
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fa ff0e 	bl	8000108 <__udivsi3>
 80052ec:	0003      	movs	r3, r0
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	4363      	muls	r3, r4
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052f6:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 80052fa:	885c      	ldrh	r4, [r3, #2]
 80052fc:	1d3b      	adds	r3, r7, #4
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2164      	movs	r1, #100	; 0x64
 8005302:	0018      	movs	r0, r3
 8005304:	f7fa ff00 	bl	8000108 <__udivsi3>
 8005308:	0003      	movs	r3, r0
 800530a:	b29b      	uxth	r3, r3
 800530c:	4363      	muls	r3, r4
 800530e:	b29a      	uxth	r2, r3
 8005310:	4b02      	ldr	r3, [pc, #8]	; (800531c <TSC2046_HM_ConvertToQVGA+0x9c>)
 8005312:	805a      	strh	r2, [r3, #2]

}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b003      	add	sp, #12
 800531a:	bd90      	pop	{r4, r7, pc}
 800531c:	200011d8 	.word	0x200011d8

08005320 <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <_SetCsPinHigh+0x18>)
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <_SetCsPinHigh+0x18>)
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	0149      	lsls	r1, r1, #5
 800532e:	430a      	orrs	r2, r1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	48000400 	.word	0x48000400

0800533c <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <_SetCsPinLow+0x18>)
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <_SetCsPinLow+0x18>)
 8005346:	4904      	ldr	r1, [pc, #16]	; (8005358 <_SetCsPinLow+0x1c>)
 8005348:	400a      	ands	r2, r1
 800534a:	615a      	str	r2, [r3, #20]
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	48000400 	.word	0x48000400
 8005358:	ffffefff 	.word	0xffffefff

0800535c <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <_EnableSPI+0x24>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	4013      	ands	r3, r2
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d005      	beq.n	8005378 <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <_EnableSPI+0x24>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <_EnableSPI+0x24>)
 8005372:	2140      	movs	r1, #64	; 0x40
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
	}

}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	40003800 	.word	0x40003800

08005384 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	0002      	movs	r2, r0
 800538c:	1dfb      	adds	r3, r7, #7
 800538e:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <_SpiTransmit8+0x28>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2202      	movs	r2, #2
 8005396:	4013      	ands	r3, r2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d103      	bne.n	80053a4 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <_SpiTransmit8+0x2c>)
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	7013      	strb	r3, [r2, #0]
	}
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40003800 	.word	0x40003800
 80053b0:	4000380c 	.word	0x4000380c

080053b4 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 80053ba:	1dbb      	adds	r3, r7, #6
 80053bc:	2200      	movs	r2, #0
 80053be:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <_SpiReceive16+0x2c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d103      	bne.n	80053d4 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <_SpiReceive16+0x2c>)
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	1dbb      	adds	r3, r7, #6
 80053d2:	801a      	strh	r2, [r3, #0]
	}
	return data;
 80053d4:	1dbb      	adds	r3, r7, #6
 80053d6:	881b      	ldrh	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b002      	add	sp, #8
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40003800 	.word	0x40003800

080053e4 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 80053e8:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <TSC4026_STM32_HM_GetXpos+0x10>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	200011d8 	.word	0x200011d8

080053f8 <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <TSC4026_STM32_HM_GetYpos+0x10>)
 80053fe:	885b      	ldrh	r3, [r3, #2]
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200011d8 	.word	0x200011d8

0800540c <TSC2046_IM_PENIRQ_EXTI_Handler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_PENIRQ_EXTI_Handler()
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
//	uint32_t interrupt_time = TSC2046_HW_DEBOUNCE_TIMER->CNT;

//	if( (interrupt_time - touchscreen_last_interrupt_time) > MAX_TOUCHSCREEN_DEBOUNCE_DELAY )
//	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 8005410:	2001      	movs	r0, #1
 8005412:	f7ff fe77 	bl	8005104 <TSC2046_EM_ProcessEvent>
//	}
//	touchscreen_last_interrupt_time = interrupt_time;
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <TSC2046_IM_HardwareManagerLoopHandler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_HardwareManagerLoopHandler()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin) == 0)
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <TSC2046_IM_HardwareManagerLoopHandler+0x28>)
 8005422:	2140      	movs	r1, #64	; 0x40
 8005424:	0018      	movs	r0, r3
 8005426:	f7fc fcd3 	bl	8001dd0 <HAL_GPIO_ReadPin>
 800542a:	1e03      	subs	r3, r0, #0
 800542c:	d103      	bne.n	8005436 <TSC2046_IM_HardwareManagerLoopHandler+0x1a>
	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 800542e:	2001      	movs	r0, #1
 8005430:	f7ff fe68 	bl	8005104 <TSC2046_EM_ProcessEvent>
	}
	else
	{
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
	}
}
 8005434:	e002      	b.n	800543c <TSC2046_IM_HardwareManagerLoopHandler+0x20>
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
 8005436:	2000      	movs	r0, #0
 8005438:	f7ff fe64 	bl	8005104 <TSC2046_EM_ProcessEvent>
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	48000800 	.word	0x48000800

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	20000018 	.word	0x20000018

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	2600      	movs	r6, #0
 8005458:	4d0c      	ldr	r5, [pc, #48]	; (800548c <__libc_init_array+0x38>)
 800545a:	4c0d      	ldr	r4, [pc, #52]	; (8005490 <__libc_init_array+0x3c>)
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	2600      	movs	r6, #0
 8005466:	f000 fc3b 	bl	8005ce0 <_init>
 800546a:	4d0a      	ldr	r5, [pc, #40]	; (8005494 <__libc_init_array+0x40>)
 800546c:	4c0a      	ldr	r4, [pc, #40]	; (8005498 <__libc_init_array+0x44>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	00b3      	lsls	r3, r6, #2
 800547a:	58eb      	ldr	r3, [r5, r3]
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	00b3      	lsls	r3, r6, #2
 8005484:	58eb      	ldr	r3, [r5, r3]
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	08006000 	.word	0x08006000
 8005490:	08006000 	.word	0x08006000
 8005494:	08006000 	.word	0x08006000
 8005498:	08006004 	.word	0x08006004

0800549c <memcpy>:
 800549c:	2300      	movs	r3, #0
 800549e:	b510      	push	{r4, lr}
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d100      	bne.n	80054a6 <memcpy+0xa>
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	5ccc      	ldrb	r4, [r1, r3]
 80054a8:	54c4      	strb	r4, [r0, r3]
 80054aa:	3301      	adds	r3, #1
 80054ac:	e7f8      	b.n	80054a0 <memcpy+0x4>

080054ae <memset>:
 80054ae:	0003      	movs	r3, r0
 80054b0:	1812      	adds	r2, r2, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d100      	bne.n	80054b8 <memset+0xa>
 80054b6:	4770      	bx	lr
 80054b8:	7019      	strb	r1, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	e7f9      	b.n	80054b2 <memset+0x4>
	...

080054c0 <sniprintf>:
 80054c0:	b40c      	push	{r2, r3}
 80054c2:	b530      	push	{r4, r5, lr}
 80054c4:	4b16      	ldr	r3, [pc, #88]	; (8005520 <sniprintf+0x60>)
 80054c6:	b09d      	sub	sp, #116	; 0x74
 80054c8:	1e0c      	subs	r4, r1, #0
 80054ca:	681d      	ldr	r5, [r3, #0]
 80054cc:	da08      	bge.n	80054e0 <sniprintf+0x20>
 80054ce:	238b      	movs	r3, #139	; 0x8b
 80054d0:	2001      	movs	r0, #1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	4240      	negs	r0, r0
 80054d6:	b01d      	add	sp, #116	; 0x74
 80054d8:	bc30      	pop	{r4, r5}
 80054da:	bc08      	pop	{r3}
 80054dc:	b002      	add	sp, #8
 80054de:	4718      	bx	r3
 80054e0:	2382      	movs	r3, #130	; 0x82
 80054e2:	a902      	add	r1, sp, #8
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	818b      	strh	r3, [r1, #12]
 80054e8:	2300      	movs	r3, #0
 80054ea:	9002      	str	r0, [sp, #8]
 80054ec:	6108      	str	r0, [r1, #16]
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d000      	beq.n	80054f4 <sniprintf+0x34>
 80054f2:	1e63      	subs	r3, r4, #1
 80054f4:	608b      	str	r3, [r1, #8]
 80054f6:	614b      	str	r3, [r1, #20]
 80054f8:	2301      	movs	r3, #1
 80054fa:	425b      	negs	r3, r3
 80054fc:	81cb      	strh	r3, [r1, #14]
 80054fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005500:	ab21      	add	r3, sp, #132	; 0x84
 8005502:	0028      	movs	r0, r5
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 f86f 	bl	80055e8 <_svfiprintf_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	da01      	bge.n	8005512 <sniprintf+0x52>
 800550e:	238b      	movs	r3, #139	; 0x8b
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	2c00      	cmp	r4, #0
 8005514:	d0df      	beq.n	80054d6 <sniprintf+0x16>
 8005516:	2300      	movs	r3, #0
 8005518:	9a02      	ldr	r2, [sp, #8]
 800551a:	7013      	strb	r3, [r2, #0]
 800551c:	e7db      	b.n	80054d6 <sniprintf+0x16>
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	20000018 	.word	0x20000018

08005524 <__ssputs_r>:
 8005524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005526:	688e      	ldr	r6, [r1, #8]
 8005528:	b085      	sub	sp, #20
 800552a:	0007      	movs	r7, r0
 800552c:	000c      	movs	r4, r1
 800552e:	9203      	str	r2, [sp, #12]
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	429e      	cmp	r6, r3
 8005534:	d83c      	bhi.n	80055b0 <__ssputs_r+0x8c>
 8005536:	2390      	movs	r3, #144	; 0x90
 8005538:	898a      	ldrh	r2, [r1, #12]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	421a      	tst	r2, r3
 800553e:	d034      	beq.n	80055aa <__ssputs_r+0x86>
 8005540:	2503      	movs	r5, #3
 8005542:	6909      	ldr	r1, [r1, #16]
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	1a5b      	subs	r3, r3, r1
 8005548:	9302      	str	r3, [sp, #8]
 800554a:	6963      	ldr	r3, [r4, #20]
 800554c:	9802      	ldr	r0, [sp, #8]
 800554e:	435d      	muls	r5, r3
 8005550:	0feb      	lsrs	r3, r5, #31
 8005552:	195d      	adds	r5, r3, r5
 8005554:	9b01      	ldr	r3, [sp, #4]
 8005556:	106d      	asrs	r5, r5, #1
 8005558:	3301      	adds	r3, #1
 800555a:	181b      	adds	r3, r3, r0
 800555c:	42ab      	cmp	r3, r5
 800555e:	d900      	bls.n	8005562 <__ssputs_r+0x3e>
 8005560:	001d      	movs	r5, r3
 8005562:	0553      	lsls	r3, r2, #21
 8005564:	d532      	bpl.n	80055cc <__ssputs_r+0xa8>
 8005566:	0029      	movs	r1, r5
 8005568:	0038      	movs	r0, r7
 800556a:	f000 fb19 	bl	8005ba0 <_malloc_r>
 800556e:	1e06      	subs	r6, r0, #0
 8005570:	d109      	bne.n	8005586 <__ssputs_r+0x62>
 8005572:	230c      	movs	r3, #12
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	2001      	movs	r0, #1
 800557a:	89a2      	ldrh	r2, [r4, #12]
 800557c:	4240      	negs	r0, r0
 800557e:	4313      	orrs	r3, r2
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	b005      	add	sp, #20
 8005584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005586:	9a02      	ldr	r2, [sp, #8]
 8005588:	6921      	ldr	r1, [r4, #16]
 800558a:	f7ff ff87 	bl	800549c <memcpy>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <__ssputs_r+0xc0>)
 8005592:	401a      	ands	r2, r3
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	4313      	orrs	r3, r2
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	6126      	str	r6, [r4, #16]
 800559e:	18f6      	adds	r6, r6, r3
 80055a0:	6026      	str	r6, [r4, #0]
 80055a2:	6165      	str	r5, [r4, #20]
 80055a4:	9e01      	ldr	r6, [sp, #4]
 80055a6:	1aed      	subs	r5, r5, r3
 80055a8:	60a5      	str	r5, [r4, #8]
 80055aa:	9b01      	ldr	r3, [sp, #4]
 80055ac:	429e      	cmp	r6, r3
 80055ae:	d900      	bls.n	80055b2 <__ssputs_r+0x8e>
 80055b0:	9e01      	ldr	r6, [sp, #4]
 80055b2:	0032      	movs	r2, r6
 80055b4:	9903      	ldr	r1, [sp, #12]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	f000 fa95 	bl	8005ae6 <memmove>
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	2000      	movs	r0, #0
 80055c0:	1b9b      	subs	r3, r3, r6
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	199e      	adds	r6, r3, r6
 80055c8:	6026      	str	r6, [r4, #0]
 80055ca:	e7da      	b.n	8005582 <__ssputs_r+0x5e>
 80055cc:	002a      	movs	r2, r5
 80055ce:	0038      	movs	r0, r7
 80055d0:	f000 fb44 	bl	8005c5c <_realloc_r>
 80055d4:	1e06      	subs	r6, r0, #0
 80055d6:	d1e0      	bne.n	800559a <__ssputs_r+0x76>
 80055d8:	6921      	ldr	r1, [r4, #16]
 80055da:	0038      	movs	r0, r7
 80055dc:	f000 fa96 	bl	8005b0c <_free_r>
 80055e0:	e7c7      	b.n	8005572 <__ssputs_r+0x4e>
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	fffffb7f 	.word	0xfffffb7f

080055e8 <_svfiprintf_r>:
 80055e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ea:	b0a1      	sub	sp, #132	; 0x84
 80055ec:	9003      	str	r0, [sp, #12]
 80055ee:	001d      	movs	r5, r3
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	000f      	movs	r7, r1
 80055f4:	0016      	movs	r6, r2
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	d511      	bpl.n	800561e <_svfiprintf_r+0x36>
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10e      	bne.n	800561e <_svfiprintf_r+0x36>
 8005600:	2140      	movs	r1, #64	; 0x40
 8005602:	f000 facd 	bl	8005ba0 <_malloc_r>
 8005606:	6038      	str	r0, [r7, #0]
 8005608:	6138      	str	r0, [r7, #16]
 800560a:	2800      	cmp	r0, #0
 800560c:	d105      	bne.n	800561a <_svfiprintf_r+0x32>
 800560e:	230c      	movs	r3, #12
 8005610:	9a03      	ldr	r2, [sp, #12]
 8005612:	3801      	subs	r0, #1
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	b021      	add	sp, #132	; 0x84
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	2300      	movs	r3, #0
 8005620:	ac08      	add	r4, sp, #32
 8005622:	6163      	str	r3, [r4, #20]
 8005624:	3320      	adds	r3, #32
 8005626:	7663      	strb	r3, [r4, #25]
 8005628:	3310      	adds	r3, #16
 800562a:	76a3      	strb	r3, [r4, #26]
 800562c:	9507      	str	r5, [sp, #28]
 800562e:	0035      	movs	r5, r6
 8005630:	782b      	ldrb	r3, [r5, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <_svfiprintf_r+0x52>
 8005636:	2b25      	cmp	r3, #37	; 0x25
 8005638:	d146      	bne.n	80056c8 <_svfiprintf_r+0xe0>
 800563a:	1bab      	subs	r3, r5, r6
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	d00c      	beq.n	800565a <_svfiprintf_r+0x72>
 8005640:	0032      	movs	r2, r6
 8005642:	0039      	movs	r1, r7
 8005644:	9803      	ldr	r0, [sp, #12]
 8005646:	f7ff ff6d 	bl	8005524 <__ssputs_r>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d100      	bne.n	8005650 <_svfiprintf_r+0x68>
 800564e:	e0ae      	b.n	80057ae <_svfiprintf_r+0x1c6>
 8005650:	6962      	ldr	r2, [r4, #20]
 8005652:	9b05      	ldr	r3, [sp, #20]
 8005654:	4694      	mov	ip, r2
 8005656:	4463      	add	r3, ip
 8005658:	6163      	str	r3, [r4, #20]
 800565a:	782b      	ldrb	r3, [r5, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d100      	bne.n	8005662 <_svfiprintf_r+0x7a>
 8005660:	e0a5      	b.n	80057ae <_svfiprintf_r+0x1c6>
 8005662:	2201      	movs	r2, #1
 8005664:	2300      	movs	r3, #0
 8005666:	4252      	negs	r2, r2
 8005668:	6062      	str	r2, [r4, #4]
 800566a:	a904      	add	r1, sp, #16
 800566c:	3254      	adds	r2, #84	; 0x54
 800566e:	1852      	adds	r2, r2, r1
 8005670:	1c6e      	adds	r6, r5, #1
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	60e3      	str	r3, [r4, #12]
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	7013      	strb	r3, [r2, #0]
 800567a:	65a3      	str	r3, [r4, #88]	; 0x58
 800567c:	7831      	ldrb	r1, [r6, #0]
 800567e:	2205      	movs	r2, #5
 8005680:	4853      	ldr	r0, [pc, #332]	; (80057d0 <_svfiprintf_r+0x1e8>)
 8005682:	f000 fa25 	bl	8005ad0 <memchr>
 8005686:	1c75      	adds	r5, r6, #1
 8005688:	2800      	cmp	r0, #0
 800568a:	d11f      	bne.n	80056cc <_svfiprintf_r+0xe4>
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	06d3      	lsls	r3, r2, #27
 8005690:	d504      	bpl.n	800569c <_svfiprintf_r+0xb4>
 8005692:	2353      	movs	r3, #83	; 0x53
 8005694:	a904      	add	r1, sp, #16
 8005696:	185b      	adds	r3, r3, r1
 8005698:	2120      	movs	r1, #32
 800569a:	7019      	strb	r1, [r3, #0]
 800569c:	0713      	lsls	r3, r2, #28
 800569e:	d504      	bpl.n	80056aa <_svfiprintf_r+0xc2>
 80056a0:	2353      	movs	r3, #83	; 0x53
 80056a2:	a904      	add	r1, sp, #16
 80056a4:	185b      	adds	r3, r3, r1
 80056a6:	212b      	movs	r1, #43	; 0x2b
 80056a8:	7019      	strb	r1, [r3, #0]
 80056aa:	7833      	ldrb	r3, [r6, #0]
 80056ac:	2b2a      	cmp	r3, #42	; 0x2a
 80056ae:	d016      	beq.n	80056de <_svfiprintf_r+0xf6>
 80056b0:	0035      	movs	r5, r6
 80056b2:	2100      	movs	r1, #0
 80056b4:	200a      	movs	r0, #10
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	782a      	ldrb	r2, [r5, #0]
 80056ba:	1c6e      	adds	r6, r5, #1
 80056bc:	3a30      	subs	r2, #48	; 0x30
 80056be:	2a09      	cmp	r2, #9
 80056c0:	d94e      	bls.n	8005760 <_svfiprintf_r+0x178>
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d018      	beq.n	80056f8 <_svfiprintf_r+0x110>
 80056c6:	e010      	b.n	80056ea <_svfiprintf_r+0x102>
 80056c8:	3501      	adds	r5, #1
 80056ca:	e7b1      	b.n	8005630 <_svfiprintf_r+0x48>
 80056cc:	4b40      	ldr	r3, [pc, #256]	; (80057d0 <_svfiprintf_r+0x1e8>)
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	1ac0      	subs	r0, r0, r3
 80056d2:	2301      	movs	r3, #1
 80056d4:	4083      	lsls	r3, r0
 80056d6:	4313      	orrs	r3, r2
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	002e      	movs	r6, r5
 80056dc:	e7ce      	b.n	800567c <_svfiprintf_r+0x94>
 80056de:	9b07      	ldr	r3, [sp, #28]
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	9107      	str	r1, [sp, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db01      	blt.n	80056ee <_svfiprintf_r+0x106>
 80056ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ec:	e004      	b.n	80056f8 <_svfiprintf_r+0x110>
 80056ee:	425b      	negs	r3, r3
 80056f0:	60e3      	str	r3, [r4, #12]
 80056f2:	2302      	movs	r3, #2
 80056f4:	4313      	orrs	r3, r2
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	782b      	ldrb	r3, [r5, #0]
 80056fa:	2b2e      	cmp	r3, #46	; 0x2e
 80056fc:	d10a      	bne.n	8005714 <_svfiprintf_r+0x12c>
 80056fe:	786b      	ldrb	r3, [r5, #1]
 8005700:	2b2a      	cmp	r3, #42	; 0x2a
 8005702:	d135      	bne.n	8005770 <_svfiprintf_r+0x188>
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	3502      	adds	r5, #2
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9207      	str	r2, [sp, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	db2b      	blt.n	800576a <_svfiprintf_r+0x182>
 8005712:	9309      	str	r3, [sp, #36]	; 0x24
 8005714:	4e2f      	ldr	r6, [pc, #188]	; (80057d4 <_svfiprintf_r+0x1ec>)
 8005716:	7829      	ldrb	r1, [r5, #0]
 8005718:	2203      	movs	r2, #3
 800571a:	0030      	movs	r0, r6
 800571c:	f000 f9d8 	bl	8005ad0 <memchr>
 8005720:	2800      	cmp	r0, #0
 8005722:	d006      	beq.n	8005732 <_svfiprintf_r+0x14a>
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	1b80      	subs	r0, r0, r6
 8005728:	4083      	lsls	r3, r0
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	3501      	adds	r5, #1
 800572e:	4313      	orrs	r3, r2
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	7829      	ldrb	r1, [r5, #0]
 8005734:	2206      	movs	r2, #6
 8005736:	4828      	ldr	r0, [pc, #160]	; (80057d8 <_svfiprintf_r+0x1f0>)
 8005738:	1c6e      	adds	r6, r5, #1
 800573a:	7621      	strb	r1, [r4, #24]
 800573c:	f000 f9c8 	bl	8005ad0 <memchr>
 8005740:	2800      	cmp	r0, #0
 8005742:	d03c      	beq.n	80057be <_svfiprintf_r+0x1d6>
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <_svfiprintf_r+0x1f4>)
 8005746:	2b00      	cmp	r3, #0
 8005748:	d125      	bne.n	8005796 <_svfiprintf_r+0x1ae>
 800574a:	2207      	movs	r2, #7
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	3307      	adds	r3, #7
 8005750:	4393      	bics	r3, r2
 8005752:	3308      	adds	r3, #8
 8005754:	9307      	str	r3, [sp, #28]
 8005756:	6963      	ldr	r3, [r4, #20]
 8005758:	9a04      	ldr	r2, [sp, #16]
 800575a:	189b      	adds	r3, r3, r2
 800575c:	6163      	str	r3, [r4, #20]
 800575e:	e766      	b.n	800562e <_svfiprintf_r+0x46>
 8005760:	4343      	muls	r3, r0
 8005762:	2101      	movs	r1, #1
 8005764:	189b      	adds	r3, r3, r2
 8005766:	0035      	movs	r5, r6
 8005768:	e7a6      	b.n	80056b8 <_svfiprintf_r+0xd0>
 800576a:	2301      	movs	r3, #1
 800576c:	425b      	negs	r3, r3
 800576e:	e7d0      	b.n	8005712 <_svfiprintf_r+0x12a>
 8005770:	2300      	movs	r3, #0
 8005772:	200a      	movs	r0, #10
 8005774:	001a      	movs	r2, r3
 8005776:	3501      	adds	r5, #1
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	7829      	ldrb	r1, [r5, #0]
 800577c:	1c6e      	adds	r6, r5, #1
 800577e:	3930      	subs	r1, #48	; 0x30
 8005780:	2909      	cmp	r1, #9
 8005782:	d903      	bls.n	800578c <_svfiprintf_r+0x1a4>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0c5      	beq.n	8005714 <_svfiprintf_r+0x12c>
 8005788:	9209      	str	r2, [sp, #36]	; 0x24
 800578a:	e7c3      	b.n	8005714 <_svfiprintf_r+0x12c>
 800578c:	4342      	muls	r2, r0
 800578e:	2301      	movs	r3, #1
 8005790:	1852      	adds	r2, r2, r1
 8005792:	0035      	movs	r5, r6
 8005794:	e7f1      	b.n	800577a <_svfiprintf_r+0x192>
 8005796:	ab07      	add	r3, sp, #28
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	003a      	movs	r2, r7
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <_svfiprintf_r+0x1f8>)
 800579e:	0021      	movs	r1, r4
 80057a0:	9803      	ldr	r0, [sp, #12]
 80057a2:	e000      	b.n	80057a6 <_svfiprintf_r+0x1be>
 80057a4:	bf00      	nop
 80057a6:	9004      	str	r0, [sp, #16]
 80057a8:	9b04      	ldr	r3, [sp, #16]
 80057aa:	3301      	adds	r3, #1
 80057ac:	d1d3      	bne.n	8005756 <_svfiprintf_r+0x16e>
 80057ae:	89bb      	ldrh	r3, [r7, #12]
 80057b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057b2:	065b      	lsls	r3, r3, #25
 80057b4:	d400      	bmi.n	80057b8 <_svfiprintf_r+0x1d0>
 80057b6:	e72e      	b.n	8005616 <_svfiprintf_r+0x2e>
 80057b8:	2001      	movs	r0, #1
 80057ba:	4240      	negs	r0, r0
 80057bc:	e72b      	b.n	8005616 <_svfiprintf_r+0x2e>
 80057be:	ab07      	add	r3, sp, #28
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	003a      	movs	r2, r7
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <_svfiprintf_r+0x1f8>)
 80057c6:	0021      	movs	r1, r4
 80057c8:	9803      	ldr	r0, [sp, #12]
 80057ca:	f000 f879 	bl	80058c0 <_printf_i>
 80057ce:	e7ea      	b.n	80057a6 <_svfiprintf_r+0x1be>
 80057d0:	08005fcc 	.word	0x08005fcc
 80057d4:	08005fd2 	.word	0x08005fd2
 80057d8:	08005fd6 	.word	0x08005fd6
 80057dc:	00000000 	.word	0x00000000
 80057e0:	08005525 	.word	0x08005525

080057e4 <_printf_common>:
 80057e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e6:	0015      	movs	r5, r2
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	688a      	ldr	r2, [r1, #8]
 80057ec:	690b      	ldr	r3, [r1, #16]
 80057ee:	9000      	str	r0, [sp, #0]
 80057f0:	000c      	movs	r4, r1
 80057f2:	4293      	cmp	r3, r2
 80057f4:	da00      	bge.n	80057f8 <_printf_common+0x14>
 80057f6:	0013      	movs	r3, r2
 80057f8:	0022      	movs	r2, r4
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	3243      	adds	r2, #67	; 0x43
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	2a00      	cmp	r2, #0
 8005802:	d001      	beq.n	8005808 <_printf_common+0x24>
 8005804:	3301      	adds	r3, #1
 8005806:	602b      	str	r3, [r5, #0]
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	069b      	lsls	r3, r3, #26
 800580c:	d502      	bpl.n	8005814 <_printf_common+0x30>
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	3302      	adds	r3, #2
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	2706      	movs	r7, #6
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	401f      	ands	r7, r3
 800581a:	d027      	beq.n	800586c <_printf_common+0x88>
 800581c:	0023      	movs	r3, r4
 800581e:	3343      	adds	r3, #67	; 0x43
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	1e5a      	subs	r2, r3, #1
 8005824:	4193      	sbcs	r3, r2
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	0692      	lsls	r2, r2, #26
 800582a:	d430      	bmi.n	800588e <_printf_common+0xaa>
 800582c:	0022      	movs	r2, r4
 800582e:	9901      	ldr	r1, [sp, #4]
 8005830:	3243      	adds	r2, #67	; 0x43
 8005832:	9800      	ldr	r0, [sp, #0]
 8005834:	9e08      	ldr	r6, [sp, #32]
 8005836:	47b0      	blx	r6
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d025      	beq.n	8005888 <_printf_common+0xa4>
 800583c:	2306      	movs	r3, #6
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	682a      	ldr	r2, [r5, #0]
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	4003      	ands	r3, r0
 8005846:	2500      	movs	r5, #0
 8005848:	2b04      	cmp	r3, #4
 800584a:	d103      	bne.n	8005854 <_printf_common+0x70>
 800584c:	1a8d      	subs	r5, r1, r2
 800584e:	43eb      	mvns	r3, r5
 8005850:	17db      	asrs	r3, r3, #31
 8005852:	401d      	ands	r5, r3
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	6922      	ldr	r2, [r4, #16]
 8005858:	4293      	cmp	r3, r2
 800585a:	dd01      	ble.n	8005860 <_printf_common+0x7c>
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	18ed      	adds	r5, r5, r3
 8005860:	2700      	movs	r7, #0
 8005862:	42bd      	cmp	r5, r7
 8005864:	d120      	bne.n	80058a8 <_printf_common+0xc4>
 8005866:	2000      	movs	r0, #0
 8005868:	e010      	b.n	800588c <_printf_common+0xa8>
 800586a:	3701      	adds	r7, #1
 800586c:	68e3      	ldr	r3, [r4, #12]
 800586e:	682a      	ldr	r2, [r5, #0]
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	42bb      	cmp	r3, r7
 8005874:	ddd2      	ble.n	800581c <_printf_common+0x38>
 8005876:	0022      	movs	r2, r4
 8005878:	2301      	movs	r3, #1
 800587a:	3219      	adds	r2, #25
 800587c:	9901      	ldr	r1, [sp, #4]
 800587e:	9800      	ldr	r0, [sp, #0]
 8005880:	9e08      	ldr	r6, [sp, #32]
 8005882:	47b0      	blx	r6
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d1f0      	bne.n	800586a <_printf_common+0x86>
 8005888:	2001      	movs	r0, #1
 800588a:	4240      	negs	r0, r0
 800588c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800588e:	2030      	movs	r0, #48	; 0x30
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	3143      	adds	r1, #67	; 0x43
 8005894:	7008      	strb	r0, [r1, #0]
 8005896:	0021      	movs	r1, r4
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	3145      	adds	r1, #69	; 0x45
 800589c:	7809      	ldrb	r1, [r1, #0]
 800589e:	18a2      	adds	r2, r4, r2
 80058a0:	3243      	adds	r2, #67	; 0x43
 80058a2:	3302      	adds	r3, #2
 80058a4:	7011      	strb	r1, [r2, #0]
 80058a6:	e7c1      	b.n	800582c <_printf_common+0x48>
 80058a8:	0022      	movs	r2, r4
 80058aa:	2301      	movs	r3, #1
 80058ac:	321a      	adds	r2, #26
 80058ae:	9901      	ldr	r1, [sp, #4]
 80058b0:	9800      	ldr	r0, [sp, #0]
 80058b2:	9e08      	ldr	r6, [sp, #32]
 80058b4:	47b0      	blx	r6
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d0e6      	beq.n	8005888 <_printf_common+0xa4>
 80058ba:	3701      	adds	r7, #1
 80058bc:	e7d1      	b.n	8005862 <_printf_common+0x7e>
	...

080058c0 <_printf_i>:
 80058c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	9204      	str	r2, [sp, #16]
 80058c6:	000a      	movs	r2, r1
 80058c8:	3243      	adds	r2, #67	; 0x43
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	9003      	str	r0, [sp, #12]
 80058ce:	9202      	str	r2, [sp, #8]
 80058d0:	7e0a      	ldrb	r2, [r1, #24]
 80058d2:	000c      	movs	r4, r1
 80058d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058d6:	2a6e      	cmp	r2, #110	; 0x6e
 80058d8:	d100      	bne.n	80058dc <_printf_i+0x1c>
 80058da:	e086      	b.n	80059ea <_printf_i+0x12a>
 80058dc:	d81f      	bhi.n	800591e <_printf_i+0x5e>
 80058de:	2a63      	cmp	r2, #99	; 0x63
 80058e0:	d033      	beq.n	800594a <_printf_i+0x8a>
 80058e2:	d808      	bhi.n	80058f6 <_printf_i+0x36>
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d100      	bne.n	80058ea <_printf_i+0x2a>
 80058e8:	e08c      	b.n	8005a04 <_printf_i+0x144>
 80058ea:	2a58      	cmp	r2, #88	; 0x58
 80058ec:	d04d      	beq.n	800598a <_printf_i+0xca>
 80058ee:	0025      	movs	r5, r4
 80058f0:	3542      	adds	r5, #66	; 0x42
 80058f2:	702a      	strb	r2, [r5, #0]
 80058f4:	e030      	b.n	8005958 <_printf_i+0x98>
 80058f6:	2a64      	cmp	r2, #100	; 0x64
 80058f8:	d001      	beq.n	80058fe <_printf_i+0x3e>
 80058fa:	2a69      	cmp	r2, #105	; 0x69
 80058fc:	d1f7      	bne.n	80058ee <_printf_i+0x2e>
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1d0a      	adds	r2, r1, #4
 8005904:	0628      	lsls	r0, r5, #24
 8005906:	d529      	bpl.n	800595c <_printf_i+0x9c>
 8005908:	6808      	ldr	r0, [r1, #0]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	2800      	cmp	r0, #0
 800590e:	da03      	bge.n	8005918 <_printf_i+0x58>
 8005910:	232d      	movs	r3, #45	; 0x2d
 8005912:	9a02      	ldr	r2, [sp, #8]
 8005914:	4240      	negs	r0, r0
 8005916:	7013      	strb	r3, [r2, #0]
 8005918:	4e6b      	ldr	r6, [pc, #428]	; (8005ac8 <_printf_i+0x208>)
 800591a:	270a      	movs	r7, #10
 800591c:	e04f      	b.n	80059be <_printf_i+0xfe>
 800591e:	2a73      	cmp	r2, #115	; 0x73
 8005920:	d074      	beq.n	8005a0c <_printf_i+0x14c>
 8005922:	d808      	bhi.n	8005936 <_printf_i+0x76>
 8005924:	2a6f      	cmp	r2, #111	; 0x6f
 8005926:	d01f      	beq.n	8005968 <_printf_i+0xa8>
 8005928:	2a70      	cmp	r2, #112	; 0x70
 800592a:	d1e0      	bne.n	80058ee <_printf_i+0x2e>
 800592c:	2220      	movs	r2, #32
 800592e:	6809      	ldr	r1, [r1, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	e003      	b.n	800593e <_printf_i+0x7e>
 8005936:	2a75      	cmp	r2, #117	; 0x75
 8005938:	d016      	beq.n	8005968 <_printf_i+0xa8>
 800593a:	2a78      	cmp	r2, #120	; 0x78
 800593c:	d1d7      	bne.n	80058ee <_printf_i+0x2e>
 800593e:	0022      	movs	r2, r4
 8005940:	2178      	movs	r1, #120	; 0x78
 8005942:	3245      	adds	r2, #69	; 0x45
 8005944:	7011      	strb	r1, [r2, #0]
 8005946:	4e61      	ldr	r6, [pc, #388]	; (8005acc <_printf_i+0x20c>)
 8005948:	e022      	b.n	8005990 <_printf_i+0xd0>
 800594a:	0025      	movs	r5, r4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	3542      	adds	r5, #66	; 0x42
 8005950:	1d11      	adds	r1, r2, #4
 8005952:	6019      	str	r1, [r3, #0]
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	702b      	strb	r3, [r5, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	e065      	b.n	8005a28 <_printf_i+0x168>
 800595c:	6808      	ldr	r0, [r1, #0]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	0669      	lsls	r1, r5, #25
 8005962:	d5d3      	bpl.n	800590c <_printf_i+0x4c>
 8005964:	b200      	sxth	r0, r0
 8005966:	e7d1      	b.n	800590c <_printf_i+0x4c>
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	6825      	ldr	r5, [r4, #0]
 800596c:	1d08      	adds	r0, r1, #4
 800596e:	6018      	str	r0, [r3, #0]
 8005970:	6808      	ldr	r0, [r1, #0]
 8005972:	062e      	lsls	r6, r5, #24
 8005974:	d505      	bpl.n	8005982 <_printf_i+0xc2>
 8005976:	4e54      	ldr	r6, [pc, #336]	; (8005ac8 <_printf_i+0x208>)
 8005978:	2708      	movs	r7, #8
 800597a:	2a6f      	cmp	r2, #111	; 0x6f
 800597c:	d01b      	beq.n	80059b6 <_printf_i+0xf6>
 800597e:	270a      	movs	r7, #10
 8005980:	e019      	b.n	80059b6 <_printf_i+0xf6>
 8005982:	066d      	lsls	r5, r5, #25
 8005984:	d5f7      	bpl.n	8005976 <_printf_i+0xb6>
 8005986:	b280      	uxth	r0, r0
 8005988:	e7f5      	b.n	8005976 <_printf_i+0xb6>
 800598a:	3145      	adds	r1, #69	; 0x45
 800598c:	4e4e      	ldr	r6, [pc, #312]	; (8005ac8 <_printf_i+0x208>)
 800598e:	700a      	strb	r2, [r1, #0]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	1d01      	adds	r1, r0, #4
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	6019      	str	r1, [r3, #0]
 800599a:	0615      	lsls	r5, r2, #24
 800599c:	d521      	bpl.n	80059e2 <_printf_i+0x122>
 800599e:	07d3      	lsls	r3, r2, #31
 80059a0:	d502      	bpl.n	80059a8 <_printf_i+0xe8>
 80059a2:	2320      	movs	r3, #32
 80059a4:	431a      	orrs	r2, r3
 80059a6:	6022      	str	r2, [r4, #0]
 80059a8:	2710      	movs	r7, #16
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d103      	bne.n	80059b6 <_printf_i+0xf6>
 80059ae:	2320      	movs	r3, #32
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	439a      	bics	r2, r3
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	0023      	movs	r3, r4
 80059b8:	2200      	movs	r2, #0
 80059ba:	3343      	adds	r3, #67	; 0x43
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db58      	blt.n	8005a78 <_printf_i+0x1b8>
 80059c6:	2204      	movs	r2, #4
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	4391      	bics	r1, r2
 80059cc:	6021      	str	r1, [r4, #0]
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d154      	bne.n	8005a7c <_printf_i+0x1bc>
 80059d2:	9d02      	ldr	r5, [sp, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d05a      	beq.n	8005a8e <_printf_i+0x1ce>
 80059d8:	0025      	movs	r5, r4
 80059da:	7833      	ldrb	r3, [r6, #0]
 80059dc:	3542      	adds	r5, #66	; 0x42
 80059de:	702b      	strb	r3, [r5, #0]
 80059e0:	e055      	b.n	8005a8e <_printf_i+0x1ce>
 80059e2:	0655      	lsls	r5, r2, #25
 80059e4:	d5db      	bpl.n	800599e <_printf_i+0xde>
 80059e6:	b280      	uxth	r0, r0
 80059e8:	e7d9      	b.n	800599e <_printf_i+0xde>
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	680d      	ldr	r5, [r1, #0]
 80059ee:	1d10      	adds	r0, r2, #4
 80059f0:	6949      	ldr	r1, [r1, #20]
 80059f2:	6018      	str	r0, [r3, #0]
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	062e      	lsls	r6, r5, #24
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0x13e>
 80059fa:	6019      	str	r1, [r3, #0]
 80059fc:	e002      	b.n	8005a04 <_printf_i+0x144>
 80059fe:	066d      	lsls	r5, r5, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0x13a>
 8005a02:	8019      	strh	r1, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	9d02      	ldr	r5, [sp, #8]
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	e04f      	b.n	8005aac <_printf_i+0x1ec>
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	1d11      	adds	r1, r2, #4
 8005a10:	6019      	str	r1, [r3, #0]
 8005a12:	6815      	ldr	r5, [r2, #0]
 8005a14:	2100      	movs	r1, #0
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	0028      	movs	r0, r5
 8005a1a:	f000 f859 	bl	8005ad0 <memchr>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d001      	beq.n	8005a26 <_printf_i+0x166>
 8005a22:	1b40      	subs	r0, r0, r5
 8005a24:	6060      	str	r0, [r4, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9a02      	ldr	r2, [sp, #8]
 8005a2e:	7013      	strb	r3, [r2, #0]
 8005a30:	e03c      	b.n	8005aac <_printf_i+0x1ec>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	002a      	movs	r2, r5
 8005a36:	9904      	ldr	r1, [sp, #16]
 8005a38:	9803      	ldr	r0, [sp, #12]
 8005a3a:	9d05      	ldr	r5, [sp, #20]
 8005a3c:	47a8      	blx	r5
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d03e      	beq.n	8005ac0 <_printf_i+0x200>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	079b      	lsls	r3, r3, #30
 8005a46:	d415      	bmi.n	8005a74 <_printf_i+0x1b4>
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	4298      	cmp	r0, r3
 8005a4e:	da39      	bge.n	8005ac4 <_printf_i+0x204>
 8005a50:	0018      	movs	r0, r3
 8005a52:	e037      	b.n	8005ac4 <_printf_i+0x204>
 8005a54:	0022      	movs	r2, r4
 8005a56:	2301      	movs	r3, #1
 8005a58:	3219      	adds	r2, #25
 8005a5a:	9904      	ldr	r1, [sp, #16]
 8005a5c:	9803      	ldr	r0, [sp, #12]
 8005a5e:	9e05      	ldr	r6, [sp, #20]
 8005a60:	47b0      	blx	r6
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d02c      	beq.n	8005ac0 <_printf_i+0x200>
 8005a66:	3501      	adds	r5, #1
 8005a68:	68e3      	ldr	r3, [r4, #12]
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	42ab      	cmp	r3, r5
 8005a70:	dcf0      	bgt.n	8005a54 <_printf_i+0x194>
 8005a72:	e7e9      	b.n	8005a48 <_printf_i+0x188>
 8005a74:	2500      	movs	r5, #0
 8005a76:	e7f7      	b.n	8005a68 <_printf_i+0x1a8>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d0ad      	beq.n	80059d8 <_printf_i+0x118>
 8005a7c:	9d02      	ldr	r5, [sp, #8]
 8005a7e:	0039      	movs	r1, r7
 8005a80:	f7fa fbc8 	bl	8000214 <__aeabi_uidivmod>
 8005a84:	5c73      	ldrb	r3, [r6, r1]
 8005a86:	3d01      	subs	r5, #1
 8005a88:	702b      	strb	r3, [r5, #0]
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d1f7      	bne.n	8005a7e <_printf_i+0x1be>
 8005a8e:	2f08      	cmp	r7, #8
 8005a90:	d109      	bne.n	8005aa6 <_printf_i+0x1e6>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	07db      	lsls	r3, r3, #31
 8005a96:	d506      	bpl.n	8005aa6 <_printf_i+0x1e6>
 8005a98:	6863      	ldr	r3, [r4, #4]
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	dc02      	bgt.n	8005aa6 <_printf_i+0x1e6>
 8005aa0:	2330      	movs	r3, #48	; 0x30
 8005aa2:	3d01      	subs	r5, #1
 8005aa4:	702b      	strb	r3, [r5, #0]
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	1b5b      	subs	r3, r3, r5
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	9b05      	ldr	r3, [sp, #20]
 8005aae:	aa07      	add	r2, sp, #28
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	9803      	ldr	r0, [sp, #12]
 8005ab8:	f7ff fe94 	bl	80057e4 <_printf_common>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d1b8      	bne.n	8005a32 <_printf_i+0x172>
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	4240      	negs	r0, r0
 8005ac4:	b009      	add	sp, #36	; 0x24
 8005ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac8:	08005fdd 	.word	0x08005fdd
 8005acc:	08005fee 	.word	0x08005fee

08005ad0 <memchr>:
 8005ad0:	b2c9      	uxtb	r1, r1
 8005ad2:	1882      	adds	r2, r0, r2
 8005ad4:	4290      	cmp	r0, r2
 8005ad6:	d101      	bne.n	8005adc <memchr+0xc>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	4770      	bx	lr
 8005adc:	7803      	ldrb	r3, [r0, #0]
 8005ade:	428b      	cmp	r3, r1
 8005ae0:	d0fb      	beq.n	8005ada <memchr+0xa>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	e7f6      	b.n	8005ad4 <memchr+0x4>

08005ae6 <memmove>:
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4288      	cmp	r0, r1
 8005aea:	d902      	bls.n	8005af2 <memmove+0xc>
 8005aec:	188b      	adds	r3, r1, r2
 8005aee:	4298      	cmp	r0, r3
 8005af0:	d303      	bcc.n	8005afa <memmove+0x14>
 8005af2:	2300      	movs	r3, #0
 8005af4:	e007      	b.n	8005b06 <memmove+0x20>
 8005af6:	5c8b      	ldrb	r3, [r1, r2]
 8005af8:	5483      	strb	r3, [r0, r2]
 8005afa:	3a01      	subs	r2, #1
 8005afc:	d2fb      	bcs.n	8005af6 <memmove+0x10>
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	5ccc      	ldrb	r4, [r1, r3]
 8005b02:	54c4      	strb	r4, [r0, r3]
 8005b04:	3301      	adds	r3, #1
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d1fa      	bne.n	8005b00 <memmove+0x1a>
 8005b0a:	e7f8      	b.n	8005afe <memmove+0x18>

08005b0c <_free_r>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	0005      	movs	r5, r0
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d010      	beq.n	8005b36 <_free_r+0x2a>
 8005b14:	1f0c      	subs	r4, r1, #4
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da00      	bge.n	8005b1e <_free_r+0x12>
 8005b1c:	18e4      	adds	r4, r4, r3
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f000 f8d4 	bl	8005ccc <__malloc_lock>
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <_free_r+0x90>)
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <_free_r+0x2c>
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6014      	str	r4, [r2, #0]
 8005b30:	0028      	movs	r0, r5
 8005b32:	f000 f8cc 	bl	8005cce <__malloc_unlock>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d909      	bls.n	8005b50 <_free_r+0x44>
 8005b3c:	6821      	ldr	r1, [r4, #0]
 8005b3e:	1860      	adds	r0, r4, r1
 8005b40:	4283      	cmp	r3, r0
 8005b42:	d1f3      	bne.n	8005b2c <_free_r+0x20>
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	1841      	adds	r1, r0, r1
 8005b4a:	6021      	str	r1, [r4, #0]
 8005b4c:	e7ee      	b.n	8005b2c <_free_r+0x20>
 8005b4e:	0013      	movs	r3, r2
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d001      	beq.n	8005b5a <_free_r+0x4e>
 8005b56:	42a2      	cmp	r2, r4
 8005b58:	d9f9      	bls.n	8005b4e <_free_r+0x42>
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	1858      	adds	r0, r3, r1
 8005b5e:	42a0      	cmp	r0, r4
 8005b60:	d10b      	bne.n	8005b7a <_free_r+0x6e>
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	1809      	adds	r1, r1, r0
 8005b66:	1858      	adds	r0, r3, r1
 8005b68:	6019      	str	r1, [r3, #0]
 8005b6a:	4282      	cmp	r2, r0
 8005b6c:	d1e0      	bne.n	8005b30 <_free_r+0x24>
 8005b6e:	6810      	ldr	r0, [r2, #0]
 8005b70:	6852      	ldr	r2, [r2, #4]
 8005b72:	1841      	adds	r1, r0, r1
 8005b74:	6019      	str	r1, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	e7da      	b.n	8005b30 <_free_r+0x24>
 8005b7a:	42a0      	cmp	r0, r4
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x78>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	e7d5      	b.n	8005b30 <_free_r+0x24>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	1860      	adds	r0, r4, r1
 8005b88:	4282      	cmp	r2, r0
 8005b8a:	d103      	bne.n	8005b94 <_free_r+0x88>
 8005b8c:	6810      	ldr	r0, [r2, #0]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	1841      	adds	r1, r0, r1
 8005b92:	6021      	str	r1, [r4, #0]
 8005b94:	6062      	str	r2, [r4, #4]
 8005b96:	605c      	str	r4, [r3, #4]
 8005b98:	e7ca      	b.n	8005b30 <_free_r+0x24>
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	2000103c 	.word	0x2000103c

08005ba0 <_malloc_r>:
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	b570      	push	{r4, r5, r6, lr}
 8005ba4:	1ccd      	adds	r5, r1, #3
 8005ba6:	439d      	bics	r5, r3
 8005ba8:	3508      	adds	r5, #8
 8005baa:	0006      	movs	r6, r0
 8005bac:	2d0c      	cmp	r5, #12
 8005bae:	d21e      	bcs.n	8005bee <_malloc_r+0x4e>
 8005bb0:	250c      	movs	r5, #12
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	d81d      	bhi.n	8005bf2 <_malloc_r+0x52>
 8005bb6:	0030      	movs	r0, r6
 8005bb8:	f000 f888 	bl	8005ccc <__malloc_lock>
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <_malloc_r+0xb4>)
 8005bbe:	6814      	ldr	r4, [r2, #0]
 8005bc0:	0021      	movs	r1, r4
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d119      	bne.n	8005bfa <_malloc_r+0x5a>
 8005bc6:	4c24      	ldr	r4, [pc, #144]	; (8005c58 <_malloc_r+0xb8>)
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <_malloc_r+0x36>
 8005bce:	0030      	movs	r0, r6
 8005bd0:	f000 f86a 	bl	8005ca8 <_sbrk_r>
 8005bd4:	6020      	str	r0, [r4, #0]
 8005bd6:	0029      	movs	r1, r5
 8005bd8:	0030      	movs	r0, r6
 8005bda:	f000 f865 	bl	8005ca8 <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d12b      	bne.n	8005c3a <_malloc_r+0x9a>
 8005be2:	230c      	movs	r3, #12
 8005be4:	0030      	movs	r0, r6
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	f000 f871 	bl	8005cce <__malloc_unlock>
 8005bec:	e003      	b.n	8005bf6 <_malloc_r+0x56>
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	dadf      	bge.n	8005bb2 <_malloc_r+0x12>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	680b      	ldr	r3, [r1, #0]
 8005bfc:	1b5b      	subs	r3, r3, r5
 8005bfe:	d419      	bmi.n	8005c34 <_malloc_r+0x94>
 8005c00:	2b0b      	cmp	r3, #11
 8005c02:	d903      	bls.n	8005c0c <_malloc_r+0x6c>
 8005c04:	600b      	str	r3, [r1, #0]
 8005c06:	18cc      	adds	r4, r1, r3
 8005c08:	6025      	str	r5, [r4, #0]
 8005c0a:	e003      	b.n	8005c14 <_malloc_r+0x74>
 8005c0c:	684b      	ldr	r3, [r1, #4]
 8005c0e:	428c      	cmp	r4, r1
 8005c10:	d10d      	bne.n	8005c2e <_malloc_r+0x8e>
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	0030      	movs	r0, r6
 8005c16:	f000 f85a 	bl	8005cce <__malloc_unlock>
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	2207      	movs	r2, #7
 8005c1e:	300b      	adds	r0, #11
 8005c20:	1d23      	adds	r3, r4, #4
 8005c22:	4390      	bics	r0, r2
 8005c24:	1ac3      	subs	r3, r0, r3
 8005c26:	d0e7      	beq.n	8005bf8 <_malloc_r+0x58>
 8005c28:	425a      	negs	r2, r3
 8005c2a:	50e2      	str	r2, [r4, r3]
 8005c2c:	e7e4      	b.n	8005bf8 <_malloc_r+0x58>
 8005c2e:	6063      	str	r3, [r4, #4]
 8005c30:	000c      	movs	r4, r1
 8005c32:	e7ef      	b.n	8005c14 <_malloc_r+0x74>
 8005c34:	000c      	movs	r4, r1
 8005c36:	6849      	ldr	r1, [r1, #4]
 8005c38:	e7c3      	b.n	8005bc2 <_malloc_r+0x22>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	1cc4      	adds	r4, r0, #3
 8005c3e:	439c      	bics	r4, r3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d0e1      	beq.n	8005c08 <_malloc_r+0x68>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	0030      	movs	r0, r6
 8005c48:	f000 f82e 	bl	8005ca8 <_sbrk_r>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d1db      	bne.n	8005c08 <_malloc_r+0x68>
 8005c50:	e7c7      	b.n	8005be2 <_malloc_r+0x42>
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	2000103c 	.word	0x2000103c
 8005c58:	20001040 	.word	0x20001040

08005c5c <_realloc_r>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	0007      	movs	r7, r0
 8005c60:	000d      	movs	r5, r1
 8005c62:	0016      	movs	r6, r2
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d105      	bne.n	8005c74 <_realloc_r+0x18>
 8005c68:	0011      	movs	r1, r2
 8005c6a:	f7ff ff99 	bl	8005ba0 <_malloc_r>
 8005c6e:	0004      	movs	r4, r0
 8005c70:	0020      	movs	r0, r4
 8005c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	d103      	bne.n	8005c80 <_realloc_r+0x24>
 8005c78:	f7ff ff48 	bl	8005b0c <_free_r>
 8005c7c:	0034      	movs	r4, r6
 8005c7e:	e7f7      	b.n	8005c70 <_realloc_r+0x14>
 8005c80:	f000 f826 	bl	8005cd0 <_malloc_usable_size_r>
 8005c84:	002c      	movs	r4, r5
 8005c86:	42b0      	cmp	r0, r6
 8005c88:	d2f2      	bcs.n	8005c70 <_realloc_r+0x14>
 8005c8a:	0031      	movs	r1, r6
 8005c8c:	0038      	movs	r0, r7
 8005c8e:	f7ff ff87 	bl	8005ba0 <_malloc_r>
 8005c92:	1e04      	subs	r4, r0, #0
 8005c94:	d0ec      	beq.n	8005c70 <_realloc_r+0x14>
 8005c96:	0029      	movs	r1, r5
 8005c98:	0032      	movs	r2, r6
 8005c9a:	f7ff fbff 	bl	800549c <memcpy>
 8005c9e:	0029      	movs	r1, r5
 8005ca0:	0038      	movs	r0, r7
 8005ca2:	f7ff ff33 	bl	8005b0c <_free_r>
 8005ca6:	e7e3      	b.n	8005c70 <_realloc_r+0x14>

08005ca8 <_sbrk_r>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b570      	push	{r4, r5, r6, lr}
 8005cac:	4c06      	ldr	r4, [pc, #24]	; (8005cc8 <_sbrk_r+0x20>)
 8005cae:	0005      	movs	r5, r0
 8005cb0:	0008      	movs	r0, r1
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	f7fa fee6 	bl	8000a84 <_sbrk>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d103      	bne.n	8005cc4 <_sbrk_r+0x1c>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d000      	beq.n	8005cc4 <_sbrk_r+0x1c>
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	200011dc 	.word	0x200011dc

08005ccc <__malloc_lock>:
 8005ccc:	4770      	bx	lr

08005cce <__malloc_unlock>:
 8005cce:	4770      	bx	lr

08005cd0 <_malloc_usable_size_r>:
 8005cd0:	1f0b      	subs	r3, r1, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1f18      	subs	r0, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da01      	bge.n	8005cde <_malloc_usable_size_r+0xe>
 8005cda:	580b      	ldr	r3, [r1, r0]
 8005cdc:	18c0      	adds	r0, r0, r3
 8005cde:	4770      	bx	lr

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
