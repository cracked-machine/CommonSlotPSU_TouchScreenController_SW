
PSUControllerF072_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcbc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800bd80  0800bd80  0001bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c440  0800c440  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c440  0800c440  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c440  0800c440  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c440  0800c440  0001c440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002038  200001ec  0800c634  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002224  0800c634  00022224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cae  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a57  00000000  00000000  00038ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003c920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003dd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ac59  00000000  00000000  0003ef48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134b8  00000000  00000000  00059ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a13e  00000000  00000000  0006d059  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  000f7214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bd64 	.word	0x0800bd64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800bd64 	.word	0x0800bd64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff4f 	bl	80012cc <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fea7 	bl	800118c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff41 	bl	80012cc <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff37 	bl	80012cc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fec9 	bl	8001204 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 febf 	bl	8001204 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f7ff ffef 	bl	8000480 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 fd4d 	bl	8001f48 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 f9e2 	bl	8001880 <__aeabi_dsub>
 80004bc:	f001 fd44 	bl	8001f48 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_ui2f>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	1e04      	subs	r4, r0, #0
 80004d4:	d034      	beq.n	8000540 <__aeabi_ui2f+0x70>
 80004d6:	f001 feaf 	bl	8002238 <__clzsi2>
 80004da:	229e      	movs	r2, #158	; 0x9e
 80004dc:	1a12      	subs	r2, r2, r0
 80004de:	2a96      	cmp	r2, #150	; 0x96
 80004e0:	dc07      	bgt.n	80004f2 <__aeabi_ui2f+0x22>
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	2808      	cmp	r0, #8
 80004e6:	dd2e      	ble.n	8000546 <__aeabi_ui2f+0x76>
 80004e8:	3808      	subs	r0, #8
 80004ea:	4084      	lsls	r4, r0
 80004ec:	0260      	lsls	r0, r4, #9
 80004ee:	0a40      	lsrs	r0, r0, #9
 80004f0:	e021      	b.n	8000536 <__aeabi_ui2f+0x66>
 80004f2:	2a99      	cmp	r2, #153	; 0x99
 80004f4:	dd09      	ble.n	800050a <__aeabi_ui2f+0x3a>
 80004f6:	0003      	movs	r3, r0
 80004f8:	0021      	movs	r1, r4
 80004fa:	331b      	adds	r3, #27
 80004fc:	4099      	lsls	r1, r3
 80004fe:	1e4b      	subs	r3, r1, #1
 8000500:	4199      	sbcs	r1, r3
 8000502:	2305      	movs	r3, #5
 8000504:	1a1b      	subs	r3, r3, r0
 8000506:	40dc      	lsrs	r4, r3
 8000508:	430c      	orrs	r4, r1
 800050a:	2805      	cmp	r0, #5
 800050c:	dd01      	ble.n	8000512 <__aeabi_ui2f+0x42>
 800050e:	1f43      	subs	r3, r0, #5
 8000510:	409c      	lsls	r4, r3
 8000512:	0023      	movs	r3, r4
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <__aeabi_ui2f+0x7c>)
 8000516:	400b      	ands	r3, r1
 8000518:	0765      	lsls	r5, r4, #29
 800051a:	d009      	beq.n	8000530 <__aeabi_ui2f+0x60>
 800051c:	250f      	movs	r5, #15
 800051e:	402c      	ands	r4, r5
 8000520:	2c04      	cmp	r4, #4
 8000522:	d005      	beq.n	8000530 <__aeabi_ui2f+0x60>
 8000524:	3304      	adds	r3, #4
 8000526:	015c      	lsls	r4, r3, #5
 8000528:	d502      	bpl.n	8000530 <__aeabi_ui2f+0x60>
 800052a:	229f      	movs	r2, #159	; 0x9f
 800052c:	400b      	ands	r3, r1
 800052e:	1a12      	subs	r2, r2, r0
 8000530:	019b      	lsls	r3, r3, #6
 8000532:	0a58      	lsrs	r0, r3, #9
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	05d2      	lsls	r2, r2, #23
 800053a:	0a40      	lsrs	r0, r0, #9
 800053c:	4310      	orrs	r0, r2
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	2200      	movs	r2, #0
 8000542:	2000      	movs	r0, #0
 8000544:	e7f7      	b.n	8000536 <__aeabi_ui2f+0x66>
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0a40      	lsrs	r0, r0, #9
 800054a:	e7f4      	b.n	8000536 <__aeabi_ui2f+0x66>
 800054c:	fbffffff 	.word	0xfbffffff

08000550 <__aeabi_dadd>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	464f      	mov	r7, r9
 8000554:	4646      	mov	r6, r8
 8000556:	46d6      	mov	lr, sl
 8000558:	000c      	movs	r4, r1
 800055a:	0309      	lsls	r1, r1, #12
 800055c:	b5c0      	push	{r6, r7, lr}
 800055e:	0a49      	lsrs	r1, r1, #9
 8000560:	0f47      	lsrs	r7, r0, #29
 8000562:	005e      	lsls	r6, r3, #1
 8000564:	4339      	orrs	r1, r7
 8000566:	031f      	lsls	r7, r3, #12
 8000568:	0fdb      	lsrs	r3, r3, #31
 800056a:	469c      	mov	ip, r3
 800056c:	0065      	lsls	r5, r4, #1
 800056e:	0a7b      	lsrs	r3, r7, #9
 8000570:	0f57      	lsrs	r7, r2, #29
 8000572:	431f      	orrs	r7, r3
 8000574:	0d6d      	lsrs	r5, r5, #21
 8000576:	0fe4      	lsrs	r4, r4, #31
 8000578:	0d76      	lsrs	r6, r6, #21
 800057a:	46a1      	mov	r9, r4
 800057c:	00c0      	lsls	r0, r0, #3
 800057e:	46b8      	mov	r8, r7
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	1bab      	subs	r3, r5, r6
 8000584:	4564      	cmp	r4, ip
 8000586:	d07b      	beq.n	8000680 <__aeabi_dadd+0x130>
 8000588:	2b00      	cmp	r3, #0
 800058a:	dd5f      	ble.n	800064c <__aeabi_dadd+0xfc>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d000      	beq.n	8000592 <__aeabi_dadd+0x42>
 8000590:	e0a4      	b.n	80006dc <__aeabi_dadd+0x18c>
 8000592:	003e      	movs	r6, r7
 8000594:	4316      	orrs	r6, r2
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x4a>
 8000598:	e112      	b.n	80007c0 <__aeabi_dadd+0x270>
 800059a:	1e5e      	subs	r6, r3, #1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d000      	beq.n	80005a2 <__aeabi_dadd+0x52>
 80005a0:	e19e      	b.n	80008e0 <__aeabi_dadd+0x390>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	4180      	sbcs	r0, r0
 80005aa:	2501      	movs	r5, #1
 80005ac:	1ac9      	subs	r1, r1, r3
 80005ae:	4240      	negs	r0, r0
 80005b0:	1a09      	subs	r1, r1, r0
 80005b2:	020b      	lsls	r3, r1, #8
 80005b4:	d400      	bmi.n	80005b8 <__aeabi_dadd+0x68>
 80005b6:	e131      	b.n	800081c <__aeabi_dadd+0x2cc>
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	0a4e      	lsrs	r6, r1, #9
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_dadd+0x72>
 80005c0:	e16e      	b.n	80008a0 <__aeabi_dadd+0x350>
 80005c2:	0030      	movs	r0, r6
 80005c4:	f001 fe38 	bl	8002238 <__clzsi2>
 80005c8:	0003      	movs	r3, r0
 80005ca:	3b08      	subs	r3, #8
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_dadd+0x82>
 80005d0:	e161      	b.n	8000896 <__aeabi_dadd+0x346>
 80005d2:	2220      	movs	r2, #32
 80005d4:	0039      	movs	r1, r7
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	409e      	lsls	r6, r3
 80005da:	40d1      	lsrs	r1, r2
 80005dc:	409f      	lsls	r7, r3
 80005de:	430e      	orrs	r6, r1
 80005e0:	429d      	cmp	r5, r3
 80005e2:	dd00      	ble.n	80005e6 <__aeabi_dadd+0x96>
 80005e4:	e151      	b.n	800088a <__aeabi_dadd+0x33a>
 80005e6:	1b5d      	subs	r5, r3, r5
 80005e8:	1c6b      	adds	r3, r5, #1
 80005ea:	2b1f      	cmp	r3, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0xa0>
 80005ee:	e17c      	b.n	80008ea <__aeabi_dadd+0x39a>
 80005f0:	2120      	movs	r1, #32
 80005f2:	1ac9      	subs	r1, r1, r3
 80005f4:	003d      	movs	r5, r7
 80005f6:	0030      	movs	r0, r6
 80005f8:	408f      	lsls	r7, r1
 80005fa:	4088      	lsls	r0, r1
 80005fc:	40dd      	lsrs	r5, r3
 80005fe:	1e79      	subs	r1, r7, #1
 8000600:	418f      	sbcs	r7, r1
 8000602:	0031      	movs	r1, r6
 8000604:	2207      	movs	r2, #7
 8000606:	4328      	orrs	r0, r5
 8000608:	40d9      	lsrs	r1, r3
 800060a:	2500      	movs	r5, #0
 800060c:	4307      	orrs	r7, r0
 800060e:	403a      	ands	r2, r7
 8000610:	2a00      	cmp	r2, #0
 8000612:	d009      	beq.n	8000628 <__aeabi_dadd+0xd8>
 8000614:	230f      	movs	r3, #15
 8000616:	403b      	ands	r3, r7
 8000618:	2b04      	cmp	r3, #4
 800061a:	d005      	beq.n	8000628 <__aeabi_dadd+0xd8>
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	42bb      	cmp	r3, r7
 8000620:	41bf      	sbcs	r7, r7
 8000622:	427f      	negs	r7, r7
 8000624:	19c9      	adds	r1, r1, r7
 8000626:	001f      	movs	r7, r3
 8000628:	020b      	lsls	r3, r1, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0xde>
 800062c:	e226      	b.n	8000a7c <__aeabi_dadd+0x52c>
 800062e:	1c6a      	adds	r2, r5, #1
 8000630:	4bc6      	ldr	r3, [pc, #792]	; (800094c <__aeabi_dadd+0x3fc>)
 8000632:	0555      	lsls	r5, r2, #21
 8000634:	0d6d      	lsrs	r5, r5, #21
 8000636:	429a      	cmp	r2, r3
 8000638:	d100      	bne.n	800063c <__aeabi_dadd+0xec>
 800063a:	e106      	b.n	800084a <__aeabi_dadd+0x2fa>
 800063c:	4ac4      	ldr	r2, [pc, #784]	; (8000950 <__aeabi_dadd+0x400>)
 800063e:	08ff      	lsrs	r7, r7, #3
 8000640:	400a      	ands	r2, r1
 8000642:	0753      	lsls	r3, r2, #29
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	433b      	orrs	r3, r7
 8000648:	0b12      	lsrs	r2, r2, #12
 800064a:	e08e      	b.n	800076a <__aeabi_dadd+0x21a>
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_dadd+0x102>
 8000650:	e0b8      	b.n	80007c4 <__aeabi_dadd+0x274>
 8000652:	1c6b      	adds	r3, r5, #1
 8000654:	055b      	lsls	r3, r3, #21
 8000656:	0d5b      	lsrs	r3, r3, #21
 8000658:	2b01      	cmp	r3, #1
 800065a:	dc00      	bgt.n	800065e <__aeabi_dadd+0x10e>
 800065c:	e130      	b.n	80008c0 <__aeabi_dadd+0x370>
 800065e:	1a87      	subs	r7, r0, r2
 8000660:	4643      	mov	r3, r8
 8000662:	42b8      	cmp	r0, r7
 8000664:	41b6      	sbcs	r6, r6
 8000666:	1acb      	subs	r3, r1, r3
 8000668:	4276      	negs	r6, r6
 800066a:	1b9e      	subs	r6, r3, r6
 800066c:	0233      	lsls	r3, r6, #8
 800066e:	d500      	bpl.n	8000672 <__aeabi_dadd+0x122>
 8000670:	e14c      	b.n	800090c <__aeabi_dadd+0x3bc>
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	d1a1      	bne.n	80005bc <__aeabi_dadd+0x6c>
 8000678:	2200      	movs	r2, #0
 800067a:	2400      	movs	r4, #0
 800067c:	2500      	movs	r5, #0
 800067e:	e070      	b.n	8000762 <__aeabi_dadd+0x212>
 8000680:	2b00      	cmp	r3, #0
 8000682:	dc00      	bgt.n	8000686 <__aeabi_dadd+0x136>
 8000684:	e0e5      	b.n	8000852 <__aeabi_dadd+0x302>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x13c>
 800068a:	e083      	b.n	8000794 <__aeabi_dadd+0x244>
 800068c:	4eaf      	ldr	r6, [pc, #700]	; (800094c <__aeabi_dadd+0x3fc>)
 800068e:	42b5      	cmp	r5, r6
 8000690:	d060      	beq.n	8000754 <__aeabi_dadd+0x204>
 8000692:	2680      	movs	r6, #128	; 0x80
 8000694:	0436      	lsls	r6, r6, #16
 8000696:	4337      	orrs	r7, r6
 8000698:	46b8      	mov	r8, r7
 800069a:	2b38      	cmp	r3, #56	; 0x38
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_dadd+0x150>
 800069e:	e13e      	b.n	800091e <__aeabi_dadd+0x3ce>
 80006a0:	4643      	mov	r3, r8
 80006a2:	4313      	orrs	r3, r2
 80006a4:	001f      	movs	r7, r3
 80006a6:	1e7a      	subs	r2, r7, #1
 80006a8:	4197      	sbcs	r7, r2
 80006aa:	183f      	adds	r7, r7, r0
 80006ac:	4287      	cmp	r7, r0
 80006ae:	4180      	sbcs	r0, r0
 80006b0:	4240      	negs	r0, r0
 80006b2:	1809      	adds	r1, r1, r0
 80006b4:	020b      	lsls	r3, r1, #8
 80006b6:	d400      	bmi.n	80006ba <__aeabi_dadd+0x16a>
 80006b8:	e0b0      	b.n	800081c <__aeabi_dadd+0x2cc>
 80006ba:	4ba4      	ldr	r3, [pc, #656]	; (800094c <__aeabi_dadd+0x3fc>)
 80006bc:	3501      	adds	r5, #1
 80006be:	429d      	cmp	r5, r3
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x174>
 80006c2:	e0c3      	b.n	800084c <__aeabi_dadd+0x2fc>
 80006c4:	4aa2      	ldr	r2, [pc, #648]	; (8000950 <__aeabi_dadd+0x400>)
 80006c6:	087b      	lsrs	r3, r7, #1
 80006c8:	400a      	ands	r2, r1
 80006ca:	2101      	movs	r1, #1
 80006cc:	400f      	ands	r7, r1
 80006ce:	431f      	orrs	r7, r3
 80006d0:	0851      	lsrs	r1, r2, #1
 80006d2:	07d3      	lsls	r3, r2, #31
 80006d4:	2207      	movs	r2, #7
 80006d6:	431f      	orrs	r7, r3
 80006d8:	403a      	ands	r2, r7
 80006da:	e799      	b.n	8000610 <__aeabi_dadd+0xc0>
 80006dc:	4e9b      	ldr	r6, [pc, #620]	; (800094c <__aeabi_dadd+0x3fc>)
 80006de:	42b5      	cmp	r5, r6
 80006e0:	d038      	beq.n	8000754 <__aeabi_dadd+0x204>
 80006e2:	2680      	movs	r6, #128	; 0x80
 80006e4:	0436      	lsls	r6, r6, #16
 80006e6:	4337      	orrs	r7, r6
 80006e8:	46b8      	mov	r8, r7
 80006ea:	2b38      	cmp	r3, #56	; 0x38
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x1a0>
 80006ee:	e0dc      	b.n	80008aa <__aeabi_dadd+0x35a>
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_dadd+0x1a6>
 80006f4:	e130      	b.n	8000958 <__aeabi_dadd+0x408>
 80006f6:	001e      	movs	r6, r3
 80006f8:	4647      	mov	r7, r8
 80006fa:	3e20      	subs	r6, #32
 80006fc:	40f7      	lsrs	r7, r6
 80006fe:	46bc      	mov	ip, r7
 8000700:	2b20      	cmp	r3, #32
 8000702:	d004      	beq.n	800070e <__aeabi_dadd+0x1be>
 8000704:	2640      	movs	r6, #64	; 0x40
 8000706:	1af3      	subs	r3, r6, r3
 8000708:	4646      	mov	r6, r8
 800070a:	409e      	lsls	r6, r3
 800070c:	4332      	orrs	r2, r6
 800070e:	0017      	movs	r7, r2
 8000710:	4663      	mov	r3, ip
 8000712:	1e7a      	subs	r2, r7, #1
 8000714:	4197      	sbcs	r7, r2
 8000716:	431f      	orrs	r7, r3
 8000718:	e0cc      	b.n	80008b4 <__aeabi_dadd+0x364>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x1d0>
 800071e:	e204      	b.n	8000b2a <__aeabi_dadd+0x5da>
 8000720:	4643      	mov	r3, r8
 8000722:	4313      	orrs	r3, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x1d8>
 8000726:	e159      	b.n	80009dc <__aeabi_dadd+0x48c>
 8000728:	074b      	lsls	r3, r1, #29
 800072a:	08c0      	lsrs	r0, r0, #3
 800072c:	4318      	orrs	r0, r3
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	08c9      	lsrs	r1, r1, #3
 8000732:	031b      	lsls	r3, r3, #12
 8000734:	4219      	tst	r1, r3
 8000736:	d008      	beq.n	800074a <__aeabi_dadd+0x1fa>
 8000738:	4645      	mov	r5, r8
 800073a:	08ed      	lsrs	r5, r5, #3
 800073c:	421d      	tst	r5, r3
 800073e:	d104      	bne.n	800074a <__aeabi_dadd+0x1fa>
 8000740:	4643      	mov	r3, r8
 8000742:	08d0      	lsrs	r0, r2, #3
 8000744:	0759      	lsls	r1, r3, #29
 8000746:	4308      	orrs	r0, r1
 8000748:	0029      	movs	r1, r5
 800074a:	0f42      	lsrs	r2, r0, #29
 800074c:	00c9      	lsls	r1, r1, #3
 800074e:	4d7f      	ldr	r5, [pc, #508]	; (800094c <__aeabi_dadd+0x3fc>)
 8000750:	4311      	orrs	r1, r2
 8000752:	00c0      	lsls	r0, r0, #3
 8000754:	074b      	lsls	r3, r1, #29
 8000756:	08ca      	lsrs	r2, r1, #3
 8000758:	497c      	ldr	r1, [pc, #496]	; (800094c <__aeabi_dadd+0x3fc>)
 800075a:	08c0      	lsrs	r0, r0, #3
 800075c:	4303      	orrs	r3, r0
 800075e:	428d      	cmp	r5, r1
 8000760:	d068      	beq.n	8000834 <__aeabi_dadd+0x2e4>
 8000762:	0312      	lsls	r2, r2, #12
 8000764:	056d      	lsls	r5, r5, #21
 8000766:	0b12      	lsrs	r2, r2, #12
 8000768:	0d6d      	lsrs	r5, r5, #21
 800076a:	2100      	movs	r1, #0
 800076c:	0312      	lsls	r2, r2, #12
 800076e:	0018      	movs	r0, r3
 8000770:	0b13      	lsrs	r3, r2, #12
 8000772:	0d0a      	lsrs	r2, r1, #20
 8000774:	0512      	lsls	r2, r2, #20
 8000776:	431a      	orrs	r2, r3
 8000778:	4b76      	ldr	r3, [pc, #472]	; (8000954 <__aeabi_dadd+0x404>)
 800077a:	052d      	lsls	r5, r5, #20
 800077c:	4013      	ands	r3, r2
 800077e:	432b      	orrs	r3, r5
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	07e4      	lsls	r4, r4, #31
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	4323      	orrs	r3, r4
 8000788:	0019      	movs	r1, r3
 800078a:	bc1c      	pop	{r2, r3, r4}
 800078c:	4690      	mov	r8, r2
 800078e:	4699      	mov	r9, r3
 8000790:	46a2      	mov	sl, r4
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	003e      	movs	r6, r7
 8000796:	4316      	orrs	r6, r2
 8000798:	d012      	beq.n	80007c0 <__aeabi_dadd+0x270>
 800079a:	1e5e      	subs	r6, r3, #1
 800079c:	2e00      	cmp	r6, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x252>
 80007a0:	e100      	b.n	80009a4 <__aeabi_dadd+0x454>
 80007a2:	1887      	adds	r7, r0, r2
 80007a4:	4287      	cmp	r7, r0
 80007a6:	4180      	sbcs	r0, r0
 80007a8:	4441      	add	r1, r8
 80007aa:	4240      	negs	r0, r0
 80007ac:	1809      	adds	r1, r1, r0
 80007ae:	2501      	movs	r5, #1
 80007b0:	020b      	lsls	r3, r1, #8
 80007b2:	d533      	bpl.n	800081c <__aeabi_dadd+0x2cc>
 80007b4:	2502      	movs	r5, #2
 80007b6:	e785      	b.n	80006c4 <__aeabi_dadd+0x174>
 80007b8:	4664      	mov	r4, ip
 80007ba:	0033      	movs	r3, r6
 80007bc:	4641      	mov	r1, r8
 80007be:	0010      	movs	r0, r2
 80007c0:	001d      	movs	r5, r3
 80007c2:	e7c7      	b.n	8000754 <__aeabi_dadd+0x204>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x27a>
 80007c8:	e0da      	b.n	8000980 <__aeabi_dadd+0x430>
 80007ca:	000c      	movs	r4, r1
 80007cc:	4304      	orrs	r4, r0
 80007ce:	d0f3      	beq.n	80007b8 <__aeabi_dadd+0x268>
 80007d0:	1c5c      	adds	r4, r3, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x286>
 80007d4:	e19f      	b.n	8000b16 <__aeabi_dadd+0x5c6>
 80007d6:	4c5d      	ldr	r4, [pc, #372]	; (800094c <__aeabi_dadd+0x3fc>)
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x28e>
 80007dc:	e12f      	b.n	8000a3e <__aeabi_dadd+0x4ee>
 80007de:	43db      	mvns	r3, r3
 80007e0:	2b38      	cmp	r3, #56	; 0x38
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x296>
 80007e4:	e166      	b.n	8000ab4 <__aeabi_dadd+0x564>
 80007e6:	2b1f      	cmp	r3, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x29c>
 80007ea:	e183      	b.n	8000af4 <__aeabi_dadd+0x5a4>
 80007ec:	2420      	movs	r4, #32
 80007ee:	0005      	movs	r5, r0
 80007f0:	1ae4      	subs	r4, r4, r3
 80007f2:	000f      	movs	r7, r1
 80007f4:	40dd      	lsrs	r5, r3
 80007f6:	40d9      	lsrs	r1, r3
 80007f8:	40a0      	lsls	r0, r4
 80007fa:	4643      	mov	r3, r8
 80007fc:	40a7      	lsls	r7, r4
 80007fe:	1a5b      	subs	r3, r3, r1
 8000800:	1e44      	subs	r4, r0, #1
 8000802:	41a0      	sbcs	r0, r4
 8000804:	4698      	mov	r8, r3
 8000806:	432f      	orrs	r7, r5
 8000808:	4338      	orrs	r0, r7
 800080a:	1a17      	subs	r7, r2, r0
 800080c:	42ba      	cmp	r2, r7
 800080e:	4192      	sbcs	r2, r2
 8000810:	4643      	mov	r3, r8
 8000812:	4252      	negs	r2, r2
 8000814:	1a99      	subs	r1, r3, r2
 8000816:	4664      	mov	r4, ip
 8000818:	0035      	movs	r5, r6
 800081a:	e6ca      	b.n	80005b2 <__aeabi_dadd+0x62>
 800081c:	2207      	movs	r2, #7
 800081e:	403a      	ands	r2, r7
 8000820:	2a00      	cmp	r2, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x2d6>
 8000824:	e6f6      	b.n	8000614 <__aeabi_dadd+0xc4>
 8000826:	074b      	lsls	r3, r1, #29
 8000828:	08ca      	lsrs	r2, r1, #3
 800082a:	4948      	ldr	r1, [pc, #288]	; (800094c <__aeabi_dadd+0x3fc>)
 800082c:	08ff      	lsrs	r7, r7, #3
 800082e:	433b      	orrs	r3, r7
 8000830:	428d      	cmp	r5, r1
 8000832:	d196      	bne.n	8000762 <__aeabi_dadd+0x212>
 8000834:	0019      	movs	r1, r3
 8000836:	4311      	orrs	r1, r2
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x2ec>
 800083a:	e19e      	b.n	8000b7a <__aeabi_dadd+0x62a>
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0309      	lsls	r1, r1, #12
 8000840:	430a      	orrs	r2, r1
 8000842:	0312      	lsls	r2, r2, #12
 8000844:	0b12      	lsrs	r2, r2, #12
 8000846:	4d41      	ldr	r5, [pc, #260]	; (800094c <__aeabi_dadd+0x3fc>)
 8000848:	e78f      	b.n	800076a <__aeabi_dadd+0x21a>
 800084a:	0015      	movs	r5, r2
 800084c:	2200      	movs	r2, #0
 800084e:	2300      	movs	r3, #0
 8000850:	e78b      	b.n	800076a <__aeabi_dadd+0x21a>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_dadd+0x308>
 8000856:	e0c7      	b.n	80009e8 <__aeabi_dadd+0x498>
 8000858:	1c6b      	adds	r3, r5, #1
 800085a:	055f      	lsls	r7, r3, #21
 800085c:	0d7f      	lsrs	r7, r7, #21
 800085e:	2f01      	cmp	r7, #1
 8000860:	dc00      	bgt.n	8000864 <__aeabi_dadd+0x314>
 8000862:	e0f1      	b.n	8000a48 <__aeabi_dadd+0x4f8>
 8000864:	4d39      	ldr	r5, [pc, #228]	; (800094c <__aeabi_dadd+0x3fc>)
 8000866:	42ab      	cmp	r3, r5
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x31c>
 800086a:	e0b9      	b.n	80009e0 <__aeabi_dadd+0x490>
 800086c:	1885      	adds	r5, r0, r2
 800086e:	000a      	movs	r2, r1
 8000870:	4285      	cmp	r5, r0
 8000872:	4189      	sbcs	r1, r1
 8000874:	4442      	add	r2, r8
 8000876:	4249      	negs	r1, r1
 8000878:	1851      	adds	r1, r2, r1
 800087a:	2207      	movs	r2, #7
 800087c:	07cf      	lsls	r7, r1, #31
 800087e:	086d      	lsrs	r5, r5, #1
 8000880:	432f      	orrs	r7, r5
 8000882:	0849      	lsrs	r1, r1, #1
 8000884:	403a      	ands	r2, r7
 8000886:	001d      	movs	r5, r3
 8000888:	e6c2      	b.n	8000610 <__aeabi_dadd+0xc0>
 800088a:	2207      	movs	r2, #7
 800088c:	4930      	ldr	r1, [pc, #192]	; (8000950 <__aeabi_dadd+0x400>)
 800088e:	1aed      	subs	r5, r5, r3
 8000890:	4031      	ands	r1, r6
 8000892:	403a      	ands	r2, r7
 8000894:	e6bc      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000896:	003e      	movs	r6, r7
 8000898:	3828      	subs	r0, #40	; 0x28
 800089a:	4086      	lsls	r6, r0
 800089c:	2700      	movs	r7, #0
 800089e:	e69f      	b.n	80005e0 <__aeabi_dadd+0x90>
 80008a0:	0038      	movs	r0, r7
 80008a2:	f001 fcc9 	bl	8002238 <__clzsi2>
 80008a6:	3020      	adds	r0, #32
 80008a8:	e68e      	b.n	80005c8 <__aeabi_dadd+0x78>
 80008aa:	4643      	mov	r3, r8
 80008ac:	4313      	orrs	r3, r2
 80008ae:	001f      	movs	r7, r3
 80008b0:	1e7a      	subs	r2, r7, #1
 80008b2:	4197      	sbcs	r7, r2
 80008b4:	1bc7      	subs	r7, r0, r7
 80008b6:	42b8      	cmp	r0, r7
 80008b8:	4180      	sbcs	r0, r0
 80008ba:	4240      	negs	r0, r0
 80008bc:	1a09      	subs	r1, r1, r0
 80008be:	e678      	b.n	80005b2 <__aeabi_dadd+0x62>
 80008c0:	000e      	movs	r6, r1
 80008c2:	003b      	movs	r3, r7
 80008c4:	4306      	orrs	r6, r0
 80008c6:	4313      	orrs	r3, r2
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d161      	bne.n	8000990 <__aeabi_dadd+0x440>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x382>
 80008d0:	e0f4      	b.n	8000abc <__aeabi_dadd+0x56c>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x388>
 80008d6:	e11b      	b.n	8000b10 <__aeabi_dadd+0x5c0>
 80008d8:	4664      	mov	r4, ip
 80008da:	0039      	movs	r1, r7
 80008dc:	0010      	movs	r0, r2
 80008de:	e739      	b.n	8000754 <__aeabi_dadd+0x204>
 80008e0:	4f1a      	ldr	r7, [pc, #104]	; (800094c <__aeabi_dadd+0x3fc>)
 80008e2:	42bb      	cmp	r3, r7
 80008e4:	d07a      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80008e6:	0033      	movs	r3, r6
 80008e8:	e6ff      	b.n	80006ea <__aeabi_dadd+0x19a>
 80008ea:	0030      	movs	r0, r6
 80008ec:	3d1f      	subs	r5, #31
 80008ee:	40e8      	lsrs	r0, r5
 80008f0:	2b20      	cmp	r3, #32
 80008f2:	d003      	beq.n	80008fc <__aeabi_dadd+0x3ac>
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	1acb      	subs	r3, r1, r3
 80008f8:	409e      	lsls	r6, r3
 80008fa:	4337      	orrs	r7, r6
 80008fc:	1e7b      	subs	r3, r7, #1
 80008fe:	419f      	sbcs	r7, r3
 8000900:	2207      	movs	r2, #7
 8000902:	4307      	orrs	r7, r0
 8000904:	403a      	ands	r2, r7
 8000906:	2100      	movs	r1, #0
 8000908:	2500      	movs	r5, #0
 800090a:	e789      	b.n	8000820 <__aeabi_dadd+0x2d0>
 800090c:	1a17      	subs	r7, r2, r0
 800090e:	4643      	mov	r3, r8
 8000910:	42ba      	cmp	r2, r7
 8000912:	41b6      	sbcs	r6, r6
 8000914:	1a59      	subs	r1, r3, r1
 8000916:	4276      	negs	r6, r6
 8000918:	1b8e      	subs	r6, r1, r6
 800091a:	4664      	mov	r4, ip
 800091c:	e64e      	b.n	80005bc <__aeabi_dadd+0x6c>
 800091e:	2b1f      	cmp	r3, #31
 8000920:	dd00      	ble.n	8000924 <__aeabi_dadd+0x3d4>
 8000922:	e0ad      	b.n	8000a80 <__aeabi_dadd+0x530>
 8000924:	2620      	movs	r6, #32
 8000926:	4647      	mov	r7, r8
 8000928:	1af6      	subs	r6, r6, r3
 800092a:	40b7      	lsls	r7, r6
 800092c:	46b9      	mov	r9, r7
 800092e:	0017      	movs	r7, r2
 8000930:	46b2      	mov	sl, r6
 8000932:	40df      	lsrs	r7, r3
 8000934:	464e      	mov	r6, r9
 8000936:	433e      	orrs	r6, r7
 8000938:	0037      	movs	r7, r6
 800093a:	4656      	mov	r6, sl
 800093c:	40b2      	lsls	r2, r6
 800093e:	1e56      	subs	r6, r2, #1
 8000940:	41b2      	sbcs	r2, r6
 8000942:	4317      	orrs	r7, r2
 8000944:	4642      	mov	r2, r8
 8000946:	40da      	lsrs	r2, r3
 8000948:	1889      	adds	r1, r1, r2
 800094a:	e6ae      	b.n	80006aa <__aeabi_dadd+0x15a>
 800094c:	000007ff 	.word	0x000007ff
 8000950:	ff7fffff 	.word	0xff7fffff
 8000954:	800fffff 	.word	0x800fffff
 8000958:	2620      	movs	r6, #32
 800095a:	4647      	mov	r7, r8
 800095c:	1af6      	subs	r6, r6, r3
 800095e:	40b7      	lsls	r7, r6
 8000960:	46b9      	mov	r9, r7
 8000962:	0017      	movs	r7, r2
 8000964:	46b2      	mov	sl, r6
 8000966:	40df      	lsrs	r7, r3
 8000968:	464e      	mov	r6, r9
 800096a:	433e      	orrs	r6, r7
 800096c:	0037      	movs	r7, r6
 800096e:	4656      	mov	r6, sl
 8000970:	40b2      	lsls	r2, r6
 8000972:	1e56      	subs	r6, r2, #1
 8000974:	41b2      	sbcs	r2, r6
 8000976:	4317      	orrs	r7, r2
 8000978:	4642      	mov	r2, r8
 800097a:	40da      	lsrs	r2, r3
 800097c:	1a89      	subs	r1, r1, r2
 800097e:	e799      	b.n	80008b4 <__aeabi_dadd+0x364>
 8000980:	4c7f      	ldr	r4, [pc, #508]	; (8000b80 <__aeabi_dadd+0x630>)
 8000982:	42a6      	cmp	r6, r4
 8000984:	d05b      	beq.n	8000a3e <__aeabi_dadd+0x4ee>
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	0424      	lsls	r4, r4, #16
 800098a:	425b      	negs	r3, r3
 800098c:	4321      	orrs	r1, r4
 800098e:	e727      	b.n	80007e0 <__aeabi_dadd+0x290>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d10c      	bne.n	80009ae <__aeabi_dadd+0x45e>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dadd+0x44a>
 8000998:	e0cb      	b.n	8000b32 <__aeabi_dadd+0x5e2>
 800099a:	4664      	mov	r4, ip
 800099c:	0039      	movs	r1, r7
 800099e:	0010      	movs	r0, r2
 80009a0:	4d77      	ldr	r5, [pc, #476]	; (8000b80 <__aeabi_dadd+0x630>)
 80009a2:	e6d7      	b.n	8000754 <__aeabi_dadd+0x204>
 80009a4:	4f76      	ldr	r7, [pc, #472]	; (8000b80 <__aeabi_dadd+0x630>)
 80009a6:	42bb      	cmp	r3, r7
 80009a8:	d018      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80009aa:	0033      	movs	r3, r6
 80009ac:	e675      	b.n	800069a <__aeabi_dadd+0x14a>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d014      	beq.n	80009dc <__aeabi_dadd+0x48c>
 80009b2:	074b      	lsls	r3, r1, #29
 80009b4:	08c0      	lsrs	r0, r0, #3
 80009b6:	4318      	orrs	r0, r3
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	031b      	lsls	r3, r3, #12
 80009be:	4219      	tst	r1, r3
 80009c0:	d007      	beq.n	80009d2 <__aeabi_dadd+0x482>
 80009c2:	08fc      	lsrs	r4, r7, #3
 80009c4:	421c      	tst	r4, r3
 80009c6:	d104      	bne.n	80009d2 <__aeabi_dadd+0x482>
 80009c8:	0779      	lsls	r1, r7, #29
 80009ca:	08d0      	lsrs	r0, r2, #3
 80009cc:	4308      	orrs	r0, r1
 80009ce:	46e1      	mov	r9, ip
 80009d0:	0021      	movs	r1, r4
 80009d2:	464c      	mov	r4, r9
 80009d4:	0f42      	lsrs	r2, r0, #29
 80009d6:	00c9      	lsls	r1, r1, #3
 80009d8:	4311      	orrs	r1, r2
 80009da:	00c0      	lsls	r0, r0, #3
 80009dc:	4d68      	ldr	r5, [pc, #416]	; (8000b80 <__aeabi_dadd+0x630>)
 80009de:	e6b9      	b.n	8000754 <__aeabi_dadd+0x204>
 80009e0:	001d      	movs	r5, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	2300      	movs	r3, #0
 80009e6:	e6c0      	b.n	800076a <__aeabi_dadd+0x21a>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d15b      	bne.n	8000aa4 <__aeabi_dadd+0x554>
 80009ec:	000d      	movs	r5, r1
 80009ee:	4305      	orrs	r5, r0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x4a4>
 80009f2:	e6e2      	b.n	80007ba <__aeabi_dadd+0x26a>
 80009f4:	1c5d      	adds	r5, r3, #1
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x4aa>
 80009f8:	e0b0      	b.n	8000b5c <__aeabi_dadd+0x60c>
 80009fa:	4d61      	ldr	r5, [pc, #388]	; (8000b80 <__aeabi_dadd+0x630>)
 80009fc:	42ae      	cmp	r6, r5
 80009fe:	d01f      	beq.n	8000a40 <__aeabi_dadd+0x4f0>
 8000a00:	43db      	mvns	r3, r3
 8000a02:	2b38      	cmp	r3, #56	; 0x38
 8000a04:	dc71      	bgt.n	8000aea <__aeabi_dadd+0x59a>
 8000a06:	2b1f      	cmp	r3, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x4bc>
 8000a0a:	e096      	b.n	8000b3a <__aeabi_dadd+0x5ea>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000f      	movs	r7, r1
 8000a10:	1aed      	subs	r5, r5, r3
 8000a12:	40af      	lsls	r7, r5
 8000a14:	46b9      	mov	r9, r7
 8000a16:	0007      	movs	r7, r0
 8000a18:	46aa      	mov	sl, r5
 8000a1a:	40df      	lsrs	r7, r3
 8000a1c:	464d      	mov	r5, r9
 8000a1e:	433d      	orrs	r5, r7
 8000a20:	002f      	movs	r7, r5
 8000a22:	4655      	mov	r5, sl
 8000a24:	40a8      	lsls	r0, r5
 8000a26:	40d9      	lsrs	r1, r3
 8000a28:	1e45      	subs	r5, r0, #1
 8000a2a:	41a8      	sbcs	r0, r5
 8000a2c:	4488      	add	r8, r1
 8000a2e:	4307      	orrs	r7, r0
 8000a30:	18bf      	adds	r7, r7, r2
 8000a32:	4297      	cmp	r7, r2
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4251      	negs	r1, r2
 8000a38:	4441      	add	r1, r8
 8000a3a:	0035      	movs	r5, r6
 8000a3c:	e63a      	b.n	80006b4 <__aeabi_dadd+0x164>
 8000a3e:	4664      	mov	r4, ip
 8000a40:	0035      	movs	r5, r6
 8000a42:	4641      	mov	r1, r8
 8000a44:	0010      	movs	r0, r2
 8000a46:	e685      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a48:	000b      	movs	r3, r1
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x502>
 8000a50:	e663      	b.n	800071a <__aeabi_dadd+0x1ca>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f5      	beq.n	8000a42 <__aeabi_dadd+0x4f2>
 8000a56:	4643      	mov	r3, r8
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dadd+0x50e>
 8000a5c:	e67a      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a5e:	1887      	adds	r7, r0, r2
 8000a60:	4287      	cmp	r7, r0
 8000a62:	4180      	sbcs	r0, r0
 8000a64:	2207      	movs	r2, #7
 8000a66:	4441      	add	r1, r8
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1809      	adds	r1, r1, r0
 8000a6c:	403a      	ands	r2, r7
 8000a6e:	020b      	lsls	r3, r1, #8
 8000a70:	d400      	bmi.n	8000a74 <__aeabi_dadd+0x524>
 8000a72:	e6d5      	b.n	8000820 <__aeabi_dadd+0x2d0>
 8000a74:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <__aeabi_dadd+0x634>)
 8000a76:	3501      	adds	r5, #1
 8000a78:	4019      	ands	r1, r3
 8000a7a:	e5c9      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000a7c:	0038      	movs	r0, r7
 8000a7e:	e669      	b.n	8000754 <__aeabi_dadd+0x204>
 8000a80:	001e      	movs	r6, r3
 8000a82:	4647      	mov	r7, r8
 8000a84:	3e20      	subs	r6, #32
 8000a86:	40f7      	lsrs	r7, r6
 8000a88:	46bc      	mov	ip, r7
 8000a8a:	2b20      	cmp	r3, #32
 8000a8c:	d004      	beq.n	8000a98 <__aeabi_dadd+0x548>
 8000a8e:	2640      	movs	r6, #64	; 0x40
 8000a90:	1af3      	subs	r3, r6, r3
 8000a92:	4646      	mov	r6, r8
 8000a94:	409e      	lsls	r6, r3
 8000a96:	4332      	orrs	r2, r6
 8000a98:	0017      	movs	r7, r2
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	1e7a      	subs	r2, r7, #1
 8000a9e:	4197      	sbcs	r7, r2
 8000aa0:	431f      	orrs	r7, r3
 8000aa2:	e602      	b.n	80006aa <__aeabi_dadd+0x15a>
 8000aa4:	4d36      	ldr	r5, [pc, #216]	; (8000b80 <__aeabi_dadd+0x630>)
 8000aa6:	42ae      	cmp	r6, r5
 8000aa8:	d0ca      	beq.n	8000a40 <__aeabi_dadd+0x4f0>
 8000aaa:	2580      	movs	r5, #128	; 0x80
 8000aac:	042d      	lsls	r5, r5, #16
 8000aae:	425b      	negs	r3, r3
 8000ab0:	4329      	orrs	r1, r5
 8000ab2:	e7a6      	b.n	8000a02 <__aeabi_dadd+0x4b2>
 8000ab4:	4308      	orrs	r0, r1
 8000ab6:	1e41      	subs	r1, r0, #1
 8000ab8:	4188      	sbcs	r0, r1
 8000aba:	e6a6      	b.n	800080a <__aeabi_dadd+0x2ba>
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x572>
 8000ac0:	e648      	b.n	8000754 <__aeabi_dadd+0x204>
 8000ac2:	1a87      	subs	r7, r0, r2
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	42b8      	cmp	r0, r7
 8000ac8:	41b6      	sbcs	r6, r6
 8000aca:	1acb      	subs	r3, r1, r3
 8000acc:	4276      	negs	r6, r6
 8000ace:	1b9e      	subs	r6, r3, r6
 8000ad0:	0233      	lsls	r3, r6, #8
 8000ad2:	d54b      	bpl.n	8000b6c <__aeabi_dadd+0x61c>
 8000ad4:	1a17      	subs	r7, r2, r0
 8000ad6:	4643      	mov	r3, r8
 8000ad8:	42ba      	cmp	r2, r7
 8000ada:	4192      	sbcs	r2, r2
 8000adc:	1a59      	subs	r1, r3, r1
 8000ade:	4252      	negs	r2, r2
 8000ae0:	1a89      	subs	r1, r1, r2
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4664      	mov	r4, ip
 8000ae6:	403a      	ands	r2, r7
 8000ae8:	e592      	b.n	8000610 <__aeabi_dadd+0xc0>
 8000aea:	4301      	orrs	r1, r0
 8000aec:	000f      	movs	r7, r1
 8000aee:	1e79      	subs	r1, r7, #1
 8000af0:	418f      	sbcs	r7, r1
 8000af2:	e79d      	b.n	8000a30 <__aeabi_dadd+0x4e0>
 8000af4:	001c      	movs	r4, r3
 8000af6:	000f      	movs	r7, r1
 8000af8:	3c20      	subs	r4, #32
 8000afa:	40e7      	lsrs	r7, r4
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d003      	beq.n	8000b08 <__aeabi_dadd+0x5b8>
 8000b00:	2440      	movs	r4, #64	; 0x40
 8000b02:	1ae3      	subs	r3, r4, r3
 8000b04:	4099      	lsls	r1, r3
 8000b06:	4308      	orrs	r0, r1
 8000b08:	1e41      	subs	r1, r0, #1
 8000b0a:	4188      	sbcs	r0, r1
 8000b0c:	4338      	orrs	r0, r7
 8000b0e:	e67c      	b.n	800080a <__aeabi_dadd+0x2ba>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2400      	movs	r4, #0
 8000b14:	e625      	b.n	8000762 <__aeabi_dadd+0x212>
 8000b16:	1a17      	subs	r7, r2, r0
 8000b18:	4643      	mov	r3, r8
 8000b1a:	42ba      	cmp	r2, r7
 8000b1c:	4192      	sbcs	r2, r2
 8000b1e:	1a59      	subs	r1, r3, r1
 8000b20:	4252      	negs	r2, r2
 8000b22:	1a89      	subs	r1, r1, r2
 8000b24:	4664      	mov	r4, ip
 8000b26:	0035      	movs	r5, r6
 8000b28:	e543      	b.n	80005b2 <__aeabi_dadd+0x62>
 8000b2a:	4641      	mov	r1, r8
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	4d14      	ldr	r5, [pc, #80]	; (8000b80 <__aeabi_dadd+0x630>)
 8000b30:	e610      	b.n	8000754 <__aeabi_dadd+0x204>
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	0312      	lsls	r2, r2, #12
 8000b38:	e680      	b.n	800083c <__aeabi_dadd+0x2ec>
 8000b3a:	001d      	movs	r5, r3
 8000b3c:	000f      	movs	r7, r1
 8000b3e:	3d20      	subs	r5, #32
 8000b40:	40ef      	lsrs	r7, r5
 8000b42:	46bc      	mov	ip, r7
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d003      	beq.n	8000b50 <__aeabi_dadd+0x600>
 8000b48:	2540      	movs	r5, #64	; 0x40
 8000b4a:	1aeb      	subs	r3, r5, r3
 8000b4c:	4099      	lsls	r1, r3
 8000b4e:	4308      	orrs	r0, r1
 8000b50:	0007      	movs	r7, r0
 8000b52:	4663      	mov	r3, ip
 8000b54:	1e78      	subs	r0, r7, #1
 8000b56:	4187      	sbcs	r7, r0
 8000b58:	431f      	orrs	r7, r3
 8000b5a:	e769      	b.n	8000a30 <__aeabi_dadd+0x4e0>
 8000b5c:	1887      	adds	r7, r0, r2
 8000b5e:	4297      	cmp	r7, r2
 8000b60:	419b      	sbcs	r3, r3
 8000b62:	4441      	add	r1, r8
 8000b64:	425b      	negs	r3, r3
 8000b66:	18c9      	adds	r1, r1, r3
 8000b68:	0035      	movs	r5, r6
 8000b6a:	e5a3      	b.n	80006b4 <__aeabi_dadd+0x164>
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	d0ce      	beq.n	8000b10 <__aeabi_dadd+0x5c0>
 8000b72:	2207      	movs	r2, #7
 8000b74:	0031      	movs	r1, r6
 8000b76:	403a      	ands	r2, r7
 8000b78:	e652      	b.n	8000820 <__aeabi_dadd+0x2d0>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	e5f4      	b.n	800076a <__aeabi_dadd+0x21a>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff

08000b88 <__aeabi_ddiv>:
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	4657      	mov	r7, sl
 8000b8c:	46de      	mov	lr, fp
 8000b8e:	464e      	mov	r6, r9
 8000b90:	4645      	mov	r5, r8
 8000b92:	b5e0      	push	{r5, r6, r7, lr}
 8000b94:	4683      	mov	fp, r0
 8000b96:	0007      	movs	r7, r0
 8000b98:	030e      	lsls	r6, r1, #12
 8000b9a:	0048      	lsls	r0, r1, #1
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	4692      	mov	sl, r2
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	0b36      	lsrs	r6, r6, #12
 8000ba4:	0d40      	lsrs	r0, r0, #21
 8000ba6:	0fcd      	lsrs	r5, r1, #31
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_ddiv+0x26>
 8000bac:	e09d      	b.n	8000cea <__aeabi_ddiv+0x162>
 8000bae:	4b95      	ldr	r3, [pc, #596]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	d039      	beq.n	8000c28 <__aeabi_ddiv+0xa0>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00f6      	lsls	r6, r6, #3
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	431e      	orrs	r6, r3
 8000bbc:	4a92      	ldr	r2, [pc, #584]	; (8000e08 <__aeabi_ddiv+0x280>)
 8000bbe:	0f7b      	lsrs	r3, r7, #29
 8000bc0:	4333      	orrs	r3, r6
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	4463      	add	r3, ip
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2600      	movs	r6, #0
 8000bd0:	00ff      	lsls	r7, r7, #3
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	0323      	lsls	r3, r4, #12
 8000bd6:	0b1b      	lsrs	r3, r3, #12
 8000bd8:	4698      	mov	r8, r3
 8000bda:	0063      	lsls	r3, r4, #1
 8000bdc:	0fe4      	lsrs	r4, r4, #31
 8000bde:	4652      	mov	r2, sl
 8000be0:	0d5b      	lsrs	r3, r3, #21
 8000be2:	9401      	str	r4, [sp, #4]
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0x60>
 8000be6:	e0b3      	b.n	8000d50 <__aeabi_ddiv+0x1c8>
 8000be8:	4986      	ldr	r1, [pc, #536]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_ddiv+0x68>
 8000bee:	e09e      	b.n	8000d2e <__aeabi_ddiv+0x1a6>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	00d1      	lsls	r1, r2, #3
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	0412      	lsls	r2, r2, #16
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	0f49      	lsrs	r1, r1, #29
 8000bfe:	4311      	orrs	r1, r2
 8000c00:	468b      	mov	fp, r1
 8000c02:	4981      	ldr	r1, [pc, #516]	; (8000e08 <__aeabi_ddiv+0x280>)
 8000c04:	4652      	mov	r2, sl
 8000c06:	468c      	mov	ip, r1
 8000c08:	9900      	ldr	r1, [sp, #0]
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	002b      	movs	r3, r5
 8000c16:	4063      	eors	r3, r4
 8000c18:	469a      	mov	sl, r3
 8000c1a:	2e0f      	cmp	r6, #15
 8000c1c:	d900      	bls.n	8000c20 <__aeabi_ddiv+0x98>
 8000c1e:	e105      	b.n	8000e2c <__aeabi_ddiv+0x2a4>
 8000c20:	4b7a      	ldr	r3, [pc, #488]	; (8000e0c <__aeabi_ddiv+0x284>)
 8000c22:	00b6      	lsls	r6, r6, #2
 8000c24:	599b      	ldr	r3, [r3, r6]
 8000c26:	469f      	mov	pc, r3
 8000c28:	465b      	mov	r3, fp
 8000c2a:	4333      	orrs	r3, r6
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_ddiv+0xaa>
 8000c30:	e0b8      	b.n	8000da4 <__aeabi_ddiv+0x21c>
 8000c32:	2302      	movs	r3, #2
 8000c34:	2608      	movs	r6, #8
 8000c36:	2700      	movs	r7, #0
 8000c38:	9000      	str	r0, [sp, #0]
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	e7ca      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000c3e:	46cb      	mov	fp, r9
 8000c40:	003a      	movs	r2, r7
 8000c42:	9902      	ldr	r1, [sp, #8]
 8000c44:	9501      	str	r5, [sp, #4]
 8000c46:	9b01      	ldr	r3, [sp, #4]
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2902      	cmp	r1, #2
 8000c4c:	d027      	beq.n	8000c9e <__aeabi_ddiv+0x116>
 8000c4e:	2903      	cmp	r1, #3
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0xcc>
 8000c52:	e280      	b.n	8001156 <__aeabi_ddiv+0x5ce>
 8000c54:	2901      	cmp	r1, #1
 8000c56:	d044      	beq.n	8000ce2 <__aeabi_ddiv+0x15a>
 8000c58:	496d      	ldr	r1, [pc, #436]	; (8000e10 <__aeabi_ddiv+0x288>)
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	4463      	add	r3, ip
 8000c60:	001c      	movs	r4, r3
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	dd38      	ble.n	8000cd8 <__aeabi_ddiv+0x150>
 8000c66:	0753      	lsls	r3, r2, #29
 8000c68:	d000      	beq.n	8000c6c <__aeabi_ddiv+0xe4>
 8000c6a:	e213      	b.n	8001094 <__aeabi_ddiv+0x50c>
 8000c6c:	08d2      	lsrs	r2, r2, #3
 8000c6e:	465b      	mov	r3, fp
 8000c70:	01db      	lsls	r3, r3, #7
 8000c72:	d509      	bpl.n	8000c88 <__aeabi_ddiv+0x100>
 8000c74:	4659      	mov	r1, fp
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <__aeabi_ddiv+0x28c>)
 8000c78:	4019      	ands	r1, r3
 8000c7a:	468b      	mov	fp, r1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	468c      	mov	ip, r1
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	4463      	add	r3, ip
 8000c86:	001c      	movs	r4, r3
 8000c88:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <__aeabi_ddiv+0x290>)
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	dc07      	bgt.n	8000c9e <__aeabi_ddiv+0x116>
 8000c8e:	465b      	mov	r3, fp
 8000c90:	0564      	lsls	r4, r4, #21
 8000c92:	075f      	lsls	r7, r3, #29
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	4317      	orrs	r7, r2
 8000c98:	0b1b      	lsrs	r3, r3, #12
 8000c9a:	0d62      	lsrs	r2, r4, #21
 8000c9c:	e002      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	0b1c      	lsrs	r4, r3, #12
 8000caa:	0d0b      	lsrs	r3, r1, #20
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	0514      	lsls	r4, r2, #20
 8000cb2:	4a5a      	ldr	r2, [pc, #360]	; (8000e1c <__aeabi_ddiv+0x294>)
 8000cb4:	0038      	movs	r0, r7
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	0064      	lsls	r4, r4, #1
 8000cbe:	07db      	lsls	r3, r3, #31
 8000cc0:	0864      	lsrs	r4, r4, #1
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cca:	4690      	mov	r8, r2
 8000ccc:	4699      	mov	r9, r3
 8000cce:	46a2      	mov	sl, r4
 8000cd0:	46ab      	mov	fp, r5
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4252      	negs	r2, r2
 8000cd8:	2301      	movs	r3, #1
 8000cda:	1b1b      	subs	r3, r3, r4
 8000cdc:	2b38      	cmp	r3, #56	; 0x38
 8000cde:	dc00      	bgt.n	8000ce2 <__aeabi_ddiv+0x15a>
 8000ce0:	e1ad      	b.n	800103e <__aeabi_ddiv+0x4b6>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2700      	movs	r7, #0
 8000ce8:	e7dc      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000cea:	465b      	mov	r3, fp
 8000cec:	4333      	orrs	r3, r6
 8000cee:	4699      	mov	r9, r3
 8000cf0:	d05e      	beq.n	8000db0 <__aeabi_ddiv+0x228>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x170>
 8000cf6:	e18a      	b.n	800100e <__aeabi_ddiv+0x486>
 8000cf8:	0030      	movs	r0, r6
 8000cfa:	f001 fa9d 	bl	8002238 <__clzsi2>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	3b0b      	subs	r3, #11
 8000d02:	2b1c      	cmp	r3, #28
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_ddiv+0x180>
 8000d06:	e17b      	b.n	8001000 <__aeabi_ddiv+0x478>
 8000d08:	221d      	movs	r2, #29
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	465a      	mov	r2, fp
 8000d0e:	0001      	movs	r1, r0
 8000d10:	40da      	lsrs	r2, r3
 8000d12:	3908      	subs	r1, #8
 8000d14:	408e      	lsls	r6, r1
 8000d16:	0013      	movs	r3, r2
 8000d18:	465f      	mov	r7, fp
 8000d1a:	4333      	orrs	r3, r6
 8000d1c:	4699      	mov	r9, r3
 8000d1e:	408f      	lsls	r7, r1
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <__aeabi_ddiv+0x298>)
 8000d22:	2600      	movs	r6, #0
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	e752      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4653      	mov	r3, sl
 8000d32:	430b      	orrs	r3, r1
 8000d34:	493b      	ldr	r1, [pc, #236]	; (8000e24 <__aeabi_ddiv+0x29c>)
 8000d36:	469b      	mov	fp, r3
 8000d38:	468c      	mov	ip, r1
 8000d3a:	9b00      	ldr	r3, [sp, #0]
 8000d3c:	4463      	add	r3, ip
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	465b      	mov	r3, fp
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d13b      	bne.n	8000dbe <__aeabi_ddiv+0x236>
 8000d46:	2302      	movs	r3, #2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	431e      	orrs	r6, r3
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	e761      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000d50:	4643      	mov	r3, r8
 8000d52:	4313      	orrs	r3, r2
 8000d54:	469b      	mov	fp, r3
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_ddiv+0x240>
 8000d58:	4643      	mov	r3, r8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x1d8>
 8000d5e:	e162      	b.n	8001026 <__aeabi_ddiv+0x49e>
 8000d60:	4640      	mov	r0, r8
 8000d62:	f001 fa69 	bl	8002238 <__clzsi2>
 8000d66:	0003      	movs	r3, r0
 8000d68:	3b0b      	subs	r3, #11
 8000d6a:	2b1c      	cmp	r3, #28
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_ddiv+0x1e8>
 8000d6e:	e153      	b.n	8001018 <__aeabi_ddiv+0x490>
 8000d70:	0002      	movs	r2, r0
 8000d72:	4641      	mov	r1, r8
 8000d74:	3a08      	subs	r2, #8
 8000d76:	4091      	lsls	r1, r2
 8000d78:	4688      	mov	r8, r1
 8000d7a:	211d      	movs	r1, #29
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	4651      	mov	r1, sl
 8000d80:	40d9      	lsrs	r1, r3
 8000d82:	000b      	movs	r3, r1
 8000d84:	4641      	mov	r1, r8
 8000d86:	430b      	orrs	r3, r1
 8000d88:	469b      	mov	fp, r3
 8000d8a:	4653      	mov	r3, sl
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	001a      	movs	r2, r3
 8000d90:	9b00      	ldr	r3, [sp, #0]
 8000d92:	4925      	ldr	r1, [pc, #148]	; (8000e28 <__aeabi_ddiv+0x2a0>)
 8000d94:	469c      	mov	ip, r3
 8000d96:	4460      	add	r0, ip
 8000d98:	0003      	movs	r3, r0
 8000d9a:	468c      	mov	ip, r1
 8000d9c:	4463      	add	r3, ip
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2100      	movs	r1, #0
 8000da2:	e737      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000da4:	2303      	movs	r3, #3
 8000da6:	46b1      	mov	r9, r6
 8000da8:	9000      	str	r0, [sp, #0]
 8000daa:	260c      	movs	r6, #12
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	e711      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	2604      	movs	r6, #4
 8000db8:	2700      	movs	r7, #0
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	e70a      	b.n	8000bd4 <__aeabi_ddiv+0x4c>
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	46c3      	mov	fp, r8
 8000dc2:	431e      	orrs	r6, r3
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	e725      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	431e      	orrs	r6, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	e720      	b.n	8000c14 <__aeabi_ddiv+0x8c>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	2700      	movs	r7, #0
 8000dda:	031b      	lsls	r3, r3, #12
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000dde:	e761      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	4649      	mov	r1, r9
 8000de4:	031b      	lsls	r3, r3, #12
 8000de6:	4219      	tst	r1, r3
 8000de8:	d100      	bne.n	8000dec <__aeabi_ddiv+0x264>
 8000dea:	e0e2      	b.n	8000fb2 <__aeabi_ddiv+0x42a>
 8000dec:	4659      	mov	r1, fp
 8000dee:	4219      	tst	r1, r3
 8000df0:	d000      	beq.n	8000df4 <__aeabi_ddiv+0x26c>
 8000df2:	e0de      	b.n	8000fb2 <__aeabi_ddiv+0x42a>
 8000df4:	430b      	orrs	r3, r1
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	0017      	movs	r7, r2
 8000dfa:	0b1b      	lsrs	r3, r3, #12
 8000dfc:	46a2      	mov	sl, r4
 8000dfe:	4a01      	ldr	r2, [pc, #4]	; (8000e04 <__aeabi_ddiv+0x27c>)
 8000e00:	e750      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	000007ff 	.word	0x000007ff
 8000e08:	fffffc01 	.word	0xfffffc01
 8000e0c:	0800be58 	.word	0x0800be58
 8000e10:	000003ff 	.word	0x000003ff
 8000e14:	feffffff 	.word	0xfeffffff
 8000e18:	000007fe 	.word	0x000007fe
 8000e1c:	800fffff 	.word	0x800fffff
 8000e20:	fffffc0d 	.word	0xfffffc0d
 8000e24:	fffff801 	.word	0xfffff801
 8000e28:	000003f3 	.word	0x000003f3
 8000e2c:	45d9      	cmp	r9, fp
 8000e2e:	d900      	bls.n	8000e32 <__aeabi_ddiv+0x2aa>
 8000e30:	e0cb      	b.n	8000fca <__aeabi_ddiv+0x442>
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0x2ae>
 8000e34:	e0c6      	b.n	8000fc4 <__aeabi_ddiv+0x43c>
 8000e36:	003c      	movs	r4, r7
 8000e38:	4648      	mov	r0, r9
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	9b00      	ldr	r3, [sp, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	465b      	mov	r3, fp
 8000e44:	0e16      	lsrs	r6, r2, #24
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	0213      	lsls	r3, r2, #8
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	0433      	lsls	r3, r6, #16
 8000e50:	0c1b      	lsrs	r3, r3, #16
 8000e52:	4699      	mov	r9, r3
 8000e54:	0c31      	lsrs	r1, r6, #16
 8000e56:	9101      	str	r1, [sp, #4]
 8000e58:	f7ff f9ee 	bl	8000238 <__aeabi_uidivmod>
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4342      	muls	r2, r0
 8000e60:	040b      	lsls	r3, r1, #16
 8000e62:	0c21      	lsrs	r1, r4, #16
 8000e64:	0005      	movs	r5, r0
 8000e66:	4319      	orrs	r1, r3
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d907      	bls.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e6c:	1989      	adds	r1, r1, r6
 8000e6e:	3d01      	subs	r5, #1
 8000e70:	428e      	cmp	r6, r1
 8000e72:	d803      	bhi.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e74:	428a      	cmp	r2, r1
 8000e76:	d901      	bls.n	8000e7c <__aeabi_ddiv+0x2f4>
 8000e78:	1e85      	subs	r5, r0, #2
 8000e7a:	1989      	adds	r1, r1, r6
 8000e7c:	1a88      	subs	r0, r1, r2
 8000e7e:	9901      	ldr	r1, [sp, #4]
 8000e80:	f7ff f9da 	bl	8000238 <__aeabi_uidivmod>
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	468c      	mov	ip, r1
 8000e88:	464a      	mov	r2, r9
 8000e8a:	0421      	lsls	r1, r4, #16
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	4342      	muls	r2, r0
 8000e90:	0c09      	lsrs	r1, r1, #16
 8000e92:	0003      	movs	r3, r0
 8000e94:	4321      	orrs	r1, r4
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d904      	bls.n	8000ea4 <__aeabi_ddiv+0x31c>
 8000e9a:	1989      	adds	r1, r1, r6
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	428e      	cmp	r6, r1
 8000ea0:	d800      	bhi.n	8000ea4 <__aeabi_ddiv+0x31c>
 8000ea2:	e0f1      	b.n	8001088 <__aeabi_ddiv+0x500>
 8000ea4:	042d      	lsls	r5, r5, #16
 8000ea6:	431d      	orrs	r5, r3
 8000ea8:	46ab      	mov	fp, r5
 8000eaa:	4643      	mov	r3, r8
 8000eac:	1a89      	subs	r1, r1, r2
 8000eae:	4642      	mov	r2, r8
 8000eb0:	0c28      	lsrs	r0, r5, #16
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	0c1d      	lsrs	r5, r3, #16
 8000eb6:	465b      	mov	r3, fp
 8000eb8:	0c14      	lsrs	r4, r2, #16
 8000eba:	0022      	movs	r2, r4
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	435a      	muls	r2, r3
 8000ec2:	9403      	str	r4, [sp, #12]
 8000ec4:	436b      	muls	r3, r5
 8000ec6:	4344      	muls	r4, r0
 8000ec8:	9502      	str	r5, [sp, #8]
 8000eca:	4368      	muls	r0, r5
 8000ecc:	191b      	adds	r3, r3, r4
 8000ece:	0c15      	lsrs	r5, r2, #16
 8000ed0:	18eb      	adds	r3, r5, r3
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	d903      	bls.n	8000ede <__aeabi_ddiv+0x356>
 8000ed6:	2480      	movs	r4, #128	; 0x80
 8000ed8:	0264      	lsls	r4, r4, #9
 8000eda:	46a4      	mov	ip, r4
 8000edc:	4460      	add	r0, ip
 8000ede:	0c1c      	lsrs	r4, r3, #16
 8000ee0:	0415      	lsls	r5, r2, #16
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	0c2d      	lsrs	r5, r5, #16
 8000ee6:	1820      	adds	r0, r4, r0
 8000ee8:	195d      	adds	r5, r3, r5
 8000eea:	4281      	cmp	r1, r0
 8000eec:	d377      	bcc.n	8000fde <__aeabi_ddiv+0x456>
 8000eee:	d073      	beq.n	8000fd8 <__aeabi_ddiv+0x450>
 8000ef0:	1a0c      	subs	r4, r1, r0
 8000ef2:	4aa2      	ldr	r2, [pc, #648]	; (800117c <__aeabi_ddiv+0x5f4>)
 8000ef4:	1b7d      	subs	r5, r7, r5
 8000ef6:	42af      	cmp	r7, r5
 8000ef8:	41bf      	sbcs	r7, r7
 8000efa:	4694      	mov	ip, r2
 8000efc:	9b00      	ldr	r3, [sp, #0]
 8000efe:	427f      	negs	r7, r7
 8000f00:	4463      	add	r3, ip
 8000f02:	1be0      	subs	r0, r4, r7
 8000f04:	001c      	movs	r4, r3
 8000f06:	4286      	cmp	r6, r0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_ddiv+0x384>
 8000f0a:	e0db      	b.n	80010c4 <__aeabi_ddiv+0x53c>
 8000f0c:	9901      	ldr	r1, [sp, #4]
 8000f0e:	f7ff f993 	bl	8000238 <__aeabi_uidivmod>
 8000f12:	464a      	mov	r2, r9
 8000f14:	4342      	muls	r2, r0
 8000f16:	040b      	lsls	r3, r1, #16
 8000f18:	0c29      	lsrs	r1, r5, #16
 8000f1a:	0007      	movs	r7, r0
 8000f1c:	4319      	orrs	r1, r3
 8000f1e:	428a      	cmp	r2, r1
 8000f20:	d907      	bls.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f22:	1989      	adds	r1, r1, r6
 8000f24:	3f01      	subs	r7, #1
 8000f26:	428e      	cmp	r6, r1
 8000f28:	d803      	bhi.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f2a:	428a      	cmp	r2, r1
 8000f2c:	d901      	bls.n	8000f32 <__aeabi_ddiv+0x3aa>
 8000f2e:	1e87      	subs	r7, r0, #2
 8000f30:	1989      	adds	r1, r1, r6
 8000f32:	1a88      	subs	r0, r1, r2
 8000f34:	9901      	ldr	r1, [sp, #4]
 8000f36:	f7ff f97f 	bl	8000238 <__aeabi_uidivmod>
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	464a      	mov	r2, r9
 8000f3e:	4689      	mov	r9, r1
 8000f40:	0429      	lsls	r1, r5, #16
 8000f42:	464d      	mov	r5, r9
 8000f44:	4342      	muls	r2, r0
 8000f46:	0c09      	lsrs	r1, r1, #16
 8000f48:	0003      	movs	r3, r0
 8000f4a:	4329      	orrs	r1, r5
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d907      	bls.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f50:	1989      	adds	r1, r1, r6
 8000f52:	3b01      	subs	r3, #1
 8000f54:	428e      	cmp	r6, r1
 8000f56:	d803      	bhi.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f58:	428a      	cmp	r2, r1
 8000f5a:	d901      	bls.n	8000f60 <__aeabi_ddiv+0x3d8>
 8000f5c:	1e83      	subs	r3, r0, #2
 8000f5e:	1989      	adds	r1, r1, r6
 8000f60:	043f      	lsls	r7, r7, #16
 8000f62:	1a89      	subs	r1, r1, r2
 8000f64:	003a      	movs	r2, r7
 8000f66:	9f03      	ldr	r7, [sp, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	0038      	movs	r0, r7
 8000f6c:	0413      	lsls	r3, r2, #16
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	4358      	muls	r0, r3
 8000f72:	4681      	mov	r9, r0
 8000f74:	9802      	ldr	r0, [sp, #8]
 8000f76:	0c15      	lsrs	r5, r2, #16
 8000f78:	436f      	muls	r7, r5
 8000f7a:	4343      	muls	r3, r0
 8000f7c:	4345      	muls	r5, r0
 8000f7e:	4648      	mov	r0, r9
 8000f80:	0c00      	lsrs	r0, r0, #16
 8000f82:	4684      	mov	ip, r0
 8000f84:	19db      	adds	r3, r3, r7
 8000f86:	4463      	add	r3, ip
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	d903      	bls.n	8000f94 <__aeabi_ddiv+0x40c>
 8000f8c:	2080      	movs	r0, #128	; 0x80
 8000f8e:	0240      	lsls	r0, r0, #9
 8000f90:	4684      	mov	ip, r0
 8000f92:	4465      	add	r5, ip
 8000f94:	4648      	mov	r0, r9
 8000f96:	0c1f      	lsrs	r7, r3, #16
 8000f98:	0400      	lsls	r0, r0, #16
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	0c00      	lsrs	r0, r0, #16
 8000f9e:	197d      	adds	r5, r7, r5
 8000fa0:	1818      	adds	r0, r3, r0
 8000fa2:	42a9      	cmp	r1, r5
 8000fa4:	d200      	bcs.n	8000fa8 <__aeabi_ddiv+0x420>
 8000fa6:	e084      	b.n	80010b2 <__aeabi_ddiv+0x52a>
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x424>
 8000faa:	e07f      	b.n	80010ac <__aeabi_ddiv+0x524>
 8000fac:	2301      	movs	r3, #1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	e657      	b.n	8000c62 <__aeabi_ddiv+0xda>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	464a      	mov	r2, r9
 8000fb6:	031b      	lsls	r3, r3, #12
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	031b      	lsls	r3, r3, #12
 8000fbc:	0b1b      	lsrs	r3, r3, #12
 8000fbe:	46aa      	mov	sl, r5
 8000fc0:	4a6f      	ldr	r2, [pc, #444]	; (8001180 <__aeabi_ddiv+0x5f8>)
 8000fc2:	e66f      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8000fc4:	42ba      	cmp	r2, r7
 8000fc6:	d900      	bls.n	8000fca <__aeabi_ddiv+0x442>
 8000fc8:	e735      	b.n	8000e36 <__aeabi_ddiv+0x2ae>
 8000fca:	464b      	mov	r3, r9
 8000fcc:	07dc      	lsls	r4, r3, #31
 8000fce:	0858      	lsrs	r0, r3, #1
 8000fd0:	087b      	lsrs	r3, r7, #1
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	07ff      	lsls	r7, r7, #31
 8000fd6:	e734      	b.n	8000e42 <__aeabi_ddiv+0x2ba>
 8000fd8:	2400      	movs	r4, #0
 8000fda:	42af      	cmp	r7, r5
 8000fdc:	d289      	bcs.n	8000ef2 <__aeabi_ddiv+0x36a>
 8000fde:	4447      	add	r7, r8
 8000fe0:	4547      	cmp	r7, r8
 8000fe2:	41a4      	sbcs	r4, r4
 8000fe4:	465b      	mov	r3, fp
 8000fe6:	4264      	negs	r4, r4
 8000fe8:	19a4      	adds	r4, r4, r6
 8000fea:	1864      	adds	r4, r4, r1
 8000fec:	3b01      	subs	r3, #1
 8000fee:	42a6      	cmp	r6, r4
 8000ff0:	d21e      	bcs.n	8001030 <__aeabi_ddiv+0x4a8>
 8000ff2:	42a0      	cmp	r0, r4
 8000ff4:	d86d      	bhi.n	80010d2 <__aeabi_ddiv+0x54a>
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x472>
 8000ff8:	e0b6      	b.n	8001168 <__aeabi_ddiv+0x5e0>
 8000ffa:	1a24      	subs	r4, r4, r0
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	e778      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 8001000:	0003      	movs	r3, r0
 8001002:	465a      	mov	r2, fp
 8001004:	3b28      	subs	r3, #40	; 0x28
 8001006:	409a      	lsls	r2, r3
 8001008:	2700      	movs	r7, #0
 800100a:	4691      	mov	r9, r2
 800100c:	e688      	b.n	8000d20 <__aeabi_ddiv+0x198>
 800100e:	4658      	mov	r0, fp
 8001010:	f001 f912 	bl	8002238 <__clzsi2>
 8001014:	3020      	adds	r0, #32
 8001016:	e672      	b.n	8000cfe <__aeabi_ddiv+0x176>
 8001018:	0003      	movs	r3, r0
 800101a:	4652      	mov	r2, sl
 800101c:	3b28      	subs	r3, #40	; 0x28
 800101e:	409a      	lsls	r2, r3
 8001020:	4693      	mov	fp, r2
 8001022:	2200      	movs	r2, #0
 8001024:	e6b4      	b.n	8000d90 <__aeabi_ddiv+0x208>
 8001026:	4650      	mov	r0, sl
 8001028:	f001 f906 	bl	8002238 <__clzsi2>
 800102c:	3020      	adds	r0, #32
 800102e:	e69a      	b.n	8000d66 <__aeabi_ddiv+0x1de>
 8001030:	42a6      	cmp	r6, r4
 8001032:	d1e2      	bne.n	8000ffa <__aeabi_ddiv+0x472>
 8001034:	45b8      	cmp	r8, r7
 8001036:	d9dc      	bls.n	8000ff2 <__aeabi_ddiv+0x46a>
 8001038:	1a34      	subs	r4, r6, r0
 800103a:	469b      	mov	fp, r3
 800103c:	e759      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 800103e:	2b1f      	cmp	r3, #31
 8001040:	dc65      	bgt.n	800110e <__aeabi_ddiv+0x586>
 8001042:	4c50      	ldr	r4, [pc, #320]	; (8001184 <__aeabi_ddiv+0x5fc>)
 8001044:	9900      	ldr	r1, [sp, #0]
 8001046:	46a4      	mov	ip, r4
 8001048:	465c      	mov	r4, fp
 800104a:	4461      	add	r1, ip
 800104c:	0008      	movs	r0, r1
 800104e:	408c      	lsls	r4, r1
 8001050:	0011      	movs	r1, r2
 8001052:	4082      	lsls	r2, r0
 8001054:	40d9      	lsrs	r1, r3
 8001056:	1e50      	subs	r0, r2, #1
 8001058:	4182      	sbcs	r2, r0
 800105a:	430c      	orrs	r4, r1
 800105c:	4314      	orrs	r4, r2
 800105e:	465a      	mov	r2, fp
 8001060:	40da      	lsrs	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	0762      	lsls	r2, r4, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ddiv+0x4f4>
 8001068:	220f      	movs	r2, #15
 800106a:	4022      	ands	r2, r4
 800106c:	2a04      	cmp	r2, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ddiv+0x4f4>
 8001070:	0022      	movs	r2, r4
 8001072:	1d14      	adds	r4, r2, #4
 8001074:	4294      	cmp	r4, r2
 8001076:	4189      	sbcs	r1, r1
 8001078:	4249      	negs	r1, r1
 800107a:	185b      	adds	r3, r3, r1
 800107c:	021a      	lsls	r2, r3, #8
 800107e:	d562      	bpl.n	8001146 <__aeabi_ddiv+0x5be>
 8001080:	2201      	movs	r2, #1
 8001082:	2300      	movs	r3, #0
 8001084:	2700      	movs	r7, #0
 8001086:	e60d      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001088:	428a      	cmp	r2, r1
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x506>
 800108c:	e70a      	b.n	8000ea4 <__aeabi_ddiv+0x31c>
 800108e:	1e83      	subs	r3, r0, #2
 8001090:	1989      	adds	r1, r1, r6
 8001092:	e707      	b.n	8000ea4 <__aeabi_ddiv+0x31c>
 8001094:	230f      	movs	r3, #15
 8001096:	4013      	ands	r3, r2
 8001098:	2b04      	cmp	r3, #4
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x516>
 800109c:	e5e6      	b.n	8000c6c <__aeabi_ddiv+0xe4>
 800109e:	1d17      	adds	r7, r2, #4
 80010a0:	4297      	cmp	r7, r2
 80010a2:	4192      	sbcs	r2, r2
 80010a4:	4253      	negs	r3, r2
 80010a6:	449b      	add	fp, r3
 80010a8:	08fa      	lsrs	r2, r7, #3
 80010aa:	e5e0      	b.n	8000c6e <__aeabi_ddiv+0xe6>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_ddiv+0x52a>
 80010b0:	e5d7      	b.n	8000c62 <__aeabi_ddiv+0xda>
 80010b2:	1871      	adds	r1, r6, r1
 80010b4:	1e53      	subs	r3, r2, #1
 80010b6:	42b1      	cmp	r1, r6
 80010b8:	d327      	bcc.n	800110a <__aeabi_ddiv+0x582>
 80010ba:	42a9      	cmp	r1, r5
 80010bc:	d315      	bcc.n	80010ea <__aeabi_ddiv+0x562>
 80010be:	d058      	beq.n	8001172 <__aeabi_ddiv+0x5ea>
 80010c0:	001a      	movs	r2, r3
 80010c2:	e773      	b.n	8000fac <__aeabi_ddiv+0x424>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_ddiv+0x542>
 80010c8:	e604      	b.n	8000cd4 <__aeabi_ddiv+0x14c>
 80010ca:	2301      	movs	r3, #1
 80010cc:	2200      	movs	r2, #0
 80010ce:	449b      	add	fp, r3
 80010d0:	e5cd      	b.n	8000c6e <__aeabi_ddiv+0xe6>
 80010d2:	2302      	movs	r3, #2
 80010d4:	4447      	add	r7, r8
 80010d6:	4547      	cmp	r7, r8
 80010d8:	4189      	sbcs	r1, r1
 80010da:	425b      	negs	r3, r3
 80010dc:	469c      	mov	ip, r3
 80010de:	4249      	negs	r1, r1
 80010e0:	1989      	adds	r1, r1, r6
 80010e2:	190c      	adds	r4, r1, r4
 80010e4:	44e3      	add	fp, ip
 80010e6:	1a24      	subs	r4, r4, r0
 80010e8:	e703      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 80010ea:	4643      	mov	r3, r8
 80010ec:	005f      	lsls	r7, r3, #1
 80010ee:	4547      	cmp	r7, r8
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	46b8      	mov	r8, r7
 80010f4:	425b      	negs	r3, r3
 80010f6:	199e      	adds	r6, r3, r6
 80010f8:	3a02      	subs	r2, #2
 80010fa:	1989      	adds	r1, r1, r6
 80010fc:	42a9      	cmp	r1, r5
 80010fe:	d000      	beq.n	8001102 <__aeabi_ddiv+0x57a>
 8001100:	e754      	b.n	8000fac <__aeabi_ddiv+0x424>
 8001102:	4540      	cmp	r0, r8
 8001104:	d000      	beq.n	8001108 <__aeabi_ddiv+0x580>
 8001106:	e751      	b.n	8000fac <__aeabi_ddiv+0x424>
 8001108:	e5ab      	b.n	8000c62 <__aeabi_ddiv+0xda>
 800110a:	001a      	movs	r2, r3
 800110c:	e7f6      	b.n	80010fc <__aeabi_ddiv+0x574>
 800110e:	211f      	movs	r1, #31
 8001110:	465f      	mov	r7, fp
 8001112:	4249      	negs	r1, r1
 8001114:	1b0c      	subs	r4, r1, r4
 8001116:	40e7      	lsrs	r7, r4
 8001118:	2b20      	cmp	r3, #32
 800111a:	d007      	beq.n	800112c <__aeabi_ddiv+0x5a4>
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <__aeabi_ddiv+0x600>)
 800111e:	9b00      	ldr	r3, [sp, #0]
 8001120:	468c      	mov	ip, r1
 8001122:	4463      	add	r3, ip
 8001124:	0018      	movs	r0, r3
 8001126:	465b      	mov	r3, fp
 8001128:	4083      	lsls	r3, r0
 800112a:	431a      	orrs	r2, r3
 800112c:	1e50      	subs	r0, r2, #1
 800112e:	4182      	sbcs	r2, r0
 8001130:	433a      	orrs	r2, r7
 8001132:	2707      	movs	r7, #7
 8001134:	2300      	movs	r3, #0
 8001136:	4017      	ands	r7, r2
 8001138:	d009      	beq.n	800114e <__aeabi_ddiv+0x5c6>
 800113a:	210f      	movs	r1, #15
 800113c:	2300      	movs	r3, #0
 800113e:	4011      	ands	r1, r2
 8001140:	0014      	movs	r4, r2
 8001142:	2904      	cmp	r1, #4
 8001144:	d195      	bne.n	8001072 <__aeabi_ddiv+0x4ea>
 8001146:	0022      	movs	r2, r4
 8001148:	075f      	lsls	r7, r3, #29
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	0b1b      	lsrs	r3, r3, #12
 800114e:	08d2      	lsrs	r2, r2, #3
 8001150:	4317      	orrs	r7, r2
 8001152:	2200      	movs	r2, #0
 8001154:	e5a6      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	4659      	mov	r1, fp
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	430b      	orrs	r3, r1
 800115e:	031b      	lsls	r3, r3, #12
 8001160:	0017      	movs	r7, r2
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <__aeabi_ddiv+0x5f8>)
 8001166:	e59d      	b.n	8000ca4 <__aeabi_ddiv+0x11c>
 8001168:	42bd      	cmp	r5, r7
 800116a:	d8b2      	bhi.n	80010d2 <__aeabi_ddiv+0x54a>
 800116c:	469b      	mov	fp, r3
 800116e:	2400      	movs	r4, #0
 8001170:	e6bf      	b.n	8000ef2 <__aeabi_ddiv+0x36a>
 8001172:	4580      	cmp	r8, r0
 8001174:	d3b9      	bcc.n	80010ea <__aeabi_ddiv+0x562>
 8001176:	001a      	movs	r2, r3
 8001178:	e7c3      	b.n	8001102 <__aeabi_ddiv+0x57a>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	000003ff 	.word	0x000003ff
 8001180:	000007ff 	.word	0x000007ff
 8001184:	0000041e 	.word	0x0000041e
 8001188:	0000043e 	.word	0x0000043e

0800118c <__eqdf2>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	464f      	mov	r7, r9
 8001190:	4646      	mov	r6, r8
 8001192:	46d6      	mov	lr, sl
 8001194:	4684      	mov	ip, r0
 8001196:	b5c0      	push	{r6, r7, lr}
 8001198:	4680      	mov	r8, r0
 800119a:	4e19      	ldr	r6, [pc, #100]	; (8001200 <__eqdf2+0x74>)
 800119c:	0318      	lsls	r0, r3, #12
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	004d      	lsls	r5, r1, #1
 80011a2:	0b00      	lsrs	r0, r0, #12
 80011a4:	005c      	lsls	r4, r3, #1
 80011a6:	4682      	mov	sl, r0
 80011a8:	0b3f      	lsrs	r7, r7, #12
 80011aa:	0d6d      	lsrs	r5, r5, #21
 80011ac:	0fc9      	lsrs	r1, r1, #31
 80011ae:	4691      	mov	r9, r2
 80011b0:	0d64      	lsrs	r4, r4, #21
 80011b2:	0fdb      	lsrs	r3, r3, #31
 80011b4:	2001      	movs	r0, #1
 80011b6:	42b5      	cmp	r5, r6
 80011b8:	d00a      	beq.n	80011d0 <__eqdf2+0x44>
 80011ba:	42b4      	cmp	r4, r6
 80011bc:	d003      	beq.n	80011c6 <__eqdf2+0x3a>
 80011be:	42a5      	cmp	r5, r4
 80011c0:	d101      	bne.n	80011c6 <__eqdf2+0x3a>
 80011c2:	4557      	cmp	r7, sl
 80011c4:	d00c      	beq.n	80011e0 <__eqdf2+0x54>
 80011c6:	bc1c      	pop	{r2, r3, r4}
 80011c8:	4690      	mov	r8, r2
 80011ca:	4699      	mov	r9, r3
 80011cc:	46a2      	mov	sl, r4
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d0:	4666      	mov	r6, ip
 80011d2:	433e      	orrs	r6, r7
 80011d4:	d1f7      	bne.n	80011c6 <__eqdf2+0x3a>
 80011d6:	42ac      	cmp	r4, r5
 80011d8:	d1f5      	bne.n	80011c6 <__eqdf2+0x3a>
 80011da:	4654      	mov	r4, sl
 80011dc:	4314      	orrs	r4, r2
 80011de:	d1f2      	bne.n	80011c6 <__eqdf2+0x3a>
 80011e0:	2001      	movs	r0, #1
 80011e2:	45c8      	cmp	r8, r9
 80011e4:	d1ef      	bne.n	80011c6 <__eqdf2+0x3a>
 80011e6:	4299      	cmp	r1, r3
 80011e8:	d007      	beq.n	80011fa <__eqdf2+0x6e>
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	d1eb      	bne.n	80011c6 <__eqdf2+0x3a>
 80011ee:	4663      	mov	r3, ip
 80011f0:	431f      	orrs	r7, r3
 80011f2:	0038      	movs	r0, r7
 80011f4:	1e47      	subs	r7, r0, #1
 80011f6:	41b8      	sbcs	r0, r7
 80011f8:	e7e5      	b.n	80011c6 <__eqdf2+0x3a>
 80011fa:	2000      	movs	r0, #0
 80011fc:	e7e3      	b.n	80011c6 <__eqdf2+0x3a>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	000007ff 	.word	0x000007ff

08001204 <__gedf2>:
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	464f      	mov	r7, r9
 8001208:	4646      	mov	r6, r8
 800120a:	46d6      	mov	lr, sl
 800120c:	004d      	lsls	r5, r1, #1
 800120e:	b5c0      	push	{r6, r7, lr}
 8001210:	030e      	lsls	r6, r1, #12
 8001212:	0fc9      	lsrs	r1, r1, #31
 8001214:	468a      	mov	sl, r1
 8001216:	492c      	ldr	r1, [pc, #176]	; (80012c8 <__gedf2+0xc4>)
 8001218:	031f      	lsls	r7, r3, #12
 800121a:	005c      	lsls	r4, r3, #1
 800121c:	4680      	mov	r8, r0
 800121e:	0b36      	lsrs	r6, r6, #12
 8001220:	0d6d      	lsrs	r5, r5, #21
 8001222:	4691      	mov	r9, r2
 8001224:	0b3f      	lsrs	r7, r7, #12
 8001226:	0d64      	lsrs	r4, r4, #21
 8001228:	0fdb      	lsrs	r3, r3, #31
 800122a:	428d      	cmp	r5, r1
 800122c:	d01e      	beq.n	800126c <__gedf2+0x68>
 800122e:	428c      	cmp	r4, r1
 8001230:	d016      	beq.n	8001260 <__gedf2+0x5c>
 8001232:	2d00      	cmp	r5, #0
 8001234:	d11e      	bne.n	8001274 <__gedf2+0x70>
 8001236:	4330      	orrs	r0, r6
 8001238:	4684      	mov	ip, r0
 800123a:	2c00      	cmp	r4, #0
 800123c:	d101      	bne.n	8001242 <__gedf2+0x3e>
 800123e:	433a      	orrs	r2, r7
 8001240:	d023      	beq.n	800128a <__gedf2+0x86>
 8001242:	4662      	mov	r2, ip
 8001244:	2a00      	cmp	r2, #0
 8001246:	d01a      	beq.n	800127e <__gedf2+0x7a>
 8001248:	459a      	cmp	sl, r3
 800124a:	d029      	beq.n	80012a0 <__gedf2+0x9c>
 800124c:	4651      	mov	r1, sl
 800124e:	2002      	movs	r0, #2
 8001250:	3901      	subs	r1, #1
 8001252:	4008      	ands	r0, r1
 8001254:	3801      	subs	r0, #1
 8001256:	bc1c      	pop	{r2, r3, r4}
 8001258:	4690      	mov	r8, r2
 800125a:	4699      	mov	r9, r3
 800125c:	46a2      	mov	sl, r4
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	0039      	movs	r1, r7
 8001262:	4311      	orrs	r1, r2
 8001264:	d0e5      	beq.n	8001232 <__gedf2+0x2e>
 8001266:	2002      	movs	r0, #2
 8001268:	4240      	negs	r0, r0
 800126a:	e7f4      	b.n	8001256 <__gedf2+0x52>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fa      	bne.n	8001266 <__gedf2+0x62>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d00f      	beq.n	8001294 <__gedf2+0x90>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d10f      	bne.n	8001298 <__gedf2+0x94>
 8001278:	433a      	orrs	r2, r7
 800127a:	d0e7      	beq.n	800124c <__gedf2+0x48>
 800127c:	e00c      	b.n	8001298 <__gedf2+0x94>
 800127e:	2201      	movs	r2, #1
 8001280:	3b01      	subs	r3, #1
 8001282:	4393      	bics	r3, r2
 8001284:	0018      	movs	r0, r3
 8001286:	3001      	adds	r0, #1
 8001288:	e7e5      	b.n	8001256 <__gedf2+0x52>
 800128a:	4663      	mov	r3, ip
 800128c:	2000      	movs	r0, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0e1      	beq.n	8001256 <__gedf2+0x52>
 8001292:	e7db      	b.n	800124c <__gedf2+0x48>
 8001294:	433a      	orrs	r2, r7
 8001296:	d1e6      	bne.n	8001266 <__gedf2+0x62>
 8001298:	459a      	cmp	sl, r3
 800129a:	d1d7      	bne.n	800124c <__gedf2+0x48>
 800129c:	42a5      	cmp	r5, r4
 800129e:	dcd5      	bgt.n	800124c <__gedf2+0x48>
 80012a0:	42a5      	cmp	r5, r4
 80012a2:	db05      	blt.n	80012b0 <__gedf2+0xac>
 80012a4:	42be      	cmp	r6, r7
 80012a6:	d8d1      	bhi.n	800124c <__gedf2+0x48>
 80012a8:	d008      	beq.n	80012bc <__gedf2+0xb8>
 80012aa:	2000      	movs	r0, #0
 80012ac:	42be      	cmp	r6, r7
 80012ae:	d2d2      	bcs.n	8001256 <__gedf2+0x52>
 80012b0:	4650      	mov	r0, sl
 80012b2:	2301      	movs	r3, #1
 80012b4:	3801      	subs	r0, #1
 80012b6:	4398      	bics	r0, r3
 80012b8:	3001      	adds	r0, #1
 80012ba:	e7cc      	b.n	8001256 <__gedf2+0x52>
 80012bc:	45c8      	cmp	r8, r9
 80012be:	d8c5      	bhi.n	800124c <__gedf2+0x48>
 80012c0:	2000      	movs	r0, #0
 80012c2:	45c8      	cmp	r8, r9
 80012c4:	d3f4      	bcc.n	80012b0 <__gedf2+0xac>
 80012c6:	e7c6      	b.n	8001256 <__gedf2+0x52>
 80012c8:	000007ff 	.word	0x000007ff

080012cc <__ledf2>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	464f      	mov	r7, r9
 80012d0:	4646      	mov	r6, r8
 80012d2:	46d6      	mov	lr, sl
 80012d4:	004d      	lsls	r5, r1, #1
 80012d6:	b5c0      	push	{r6, r7, lr}
 80012d8:	030e      	lsls	r6, r1, #12
 80012da:	0fc9      	lsrs	r1, r1, #31
 80012dc:	468a      	mov	sl, r1
 80012de:	492e      	ldr	r1, [pc, #184]	; (8001398 <__ledf2+0xcc>)
 80012e0:	031f      	lsls	r7, r3, #12
 80012e2:	005c      	lsls	r4, r3, #1
 80012e4:	4680      	mov	r8, r0
 80012e6:	0b36      	lsrs	r6, r6, #12
 80012e8:	0d6d      	lsrs	r5, r5, #21
 80012ea:	4691      	mov	r9, r2
 80012ec:	0b3f      	lsrs	r7, r7, #12
 80012ee:	0d64      	lsrs	r4, r4, #21
 80012f0:	0fdb      	lsrs	r3, r3, #31
 80012f2:	428d      	cmp	r5, r1
 80012f4:	d018      	beq.n	8001328 <__ledf2+0x5c>
 80012f6:	428c      	cmp	r4, r1
 80012f8:	d011      	beq.n	800131e <__ledf2+0x52>
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	d118      	bne.n	8001330 <__ledf2+0x64>
 80012fe:	4330      	orrs	r0, r6
 8001300:	4684      	mov	ip, r0
 8001302:	2c00      	cmp	r4, #0
 8001304:	d11e      	bne.n	8001344 <__ledf2+0x78>
 8001306:	433a      	orrs	r2, r7
 8001308:	d11c      	bne.n	8001344 <__ledf2+0x78>
 800130a:	4663      	mov	r3, ip
 800130c:	2000      	movs	r0, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <__ledf2+0xa8>
 8001312:	4651      	mov	r1, sl
 8001314:	2002      	movs	r0, #2
 8001316:	3901      	subs	r1, #1
 8001318:	4008      	ands	r0, r1
 800131a:	3801      	subs	r0, #1
 800131c:	e02a      	b.n	8001374 <__ledf2+0xa8>
 800131e:	0039      	movs	r1, r7
 8001320:	4311      	orrs	r1, r2
 8001322:	d0ea      	beq.n	80012fa <__ledf2+0x2e>
 8001324:	2002      	movs	r0, #2
 8001326:	e025      	b.n	8001374 <__ledf2+0xa8>
 8001328:	4330      	orrs	r0, r6
 800132a:	d1fb      	bne.n	8001324 <__ledf2+0x58>
 800132c:	42ac      	cmp	r4, r5
 800132e:	d026      	beq.n	800137e <__ledf2+0xb2>
 8001330:	2c00      	cmp	r4, #0
 8001332:	d126      	bne.n	8001382 <__ledf2+0xb6>
 8001334:	433a      	orrs	r2, r7
 8001336:	d124      	bne.n	8001382 <__ledf2+0xb6>
 8001338:	4651      	mov	r1, sl
 800133a:	2002      	movs	r0, #2
 800133c:	3901      	subs	r1, #1
 800133e:	4008      	ands	r0, r1
 8001340:	3801      	subs	r0, #1
 8001342:	e017      	b.n	8001374 <__ledf2+0xa8>
 8001344:	4662      	mov	r2, ip
 8001346:	2a00      	cmp	r2, #0
 8001348:	d00f      	beq.n	800136a <__ledf2+0x9e>
 800134a:	459a      	cmp	sl, r3
 800134c:	d1e1      	bne.n	8001312 <__ledf2+0x46>
 800134e:	42a5      	cmp	r5, r4
 8001350:	db05      	blt.n	800135e <__ledf2+0x92>
 8001352:	42be      	cmp	r6, r7
 8001354:	d8dd      	bhi.n	8001312 <__ledf2+0x46>
 8001356:	d019      	beq.n	800138c <__ledf2+0xc0>
 8001358:	2000      	movs	r0, #0
 800135a:	42be      	cmp	r6, r7
 800135c:	d20a      	bcs.n	8001374 <__ledf2+0xa8>
 800135e:	4650      	mov	r0, sl
 8001360:	2301      	movs	r3, #1
 8001362:	3801      	subs	r0, #1
 8001364:	4398      	bics	r0, r3
 8001366:	3001      	adds	r0, #1
 8001368:	e004      	b.n	8001374 <__ledf2+0xa8>
 800136a:	2201      	movs	r2, #1
 800136c:	3b01      	subs	r3, #1
 800136e:	4393      	bics	r3, r2
 8001370:	0018      	movs	r0, r3
 8001372:	3001      	adds	r0, #1
 8001374:	bc1c      	pop	{r2, r3, r4}
 8001376:	4690      	mov	r8, r2
 8001378:	4699      	mov	r9, r3
 800137a:	46a2      	mov	sl, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	433a      	orrs	r2, r7
 8001380:	d1d0      	bne.n	8001324 <__ledf2+0x58>
 8001382:	459a      	cmp	sl, r3
 8001384:	d1c5      	bne.n	8001312 <__ledf2+0x46>
 8001386:	42a5      	cmp	r5, r4
 8001388:	dcc3      	bgt.n	8001312 <__ledf2+0x46>
 800138a:	e7e0      	b.n	800134e <__ledf2+0x82>
 800138c:	45c8      	cmp	r8, r9
 800138e:	d8c0      	bhi.n	8001312 <__ledf2+0x46>
 8001390:	2000      	movs	r0, #0
 8001392:	45c8      	cmp	r8, r9
 8001394:	d3e3      	bcc.n	800135e <__ledf2+0x92>
 8001396:	e7ed      	b.n	8001374 <__ledf2+0xa8>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__aeabi_dmul>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4657      	mov	r7, sl
 80013a0:	46de      	mov	lr, fp
 80013a2:	464e      	mov	r6, r9
 80013a4:	4645      	mov	r5, r8
 80013a6:	b5e0      	push	{r5, r6, r7, lr}
 80013a8:	4683      	mov	fp, r0
 80013aa:	0006      	movs	r6, r0
 80013ac:	030f      	lsls	r7, r1, #12
 80013ae:	0048      	lsls	r0, r1, #1
 80013b0:	b087      	sub	sp, #28
 80013b2:	4692      	mov	sl, r2
 80013b4:	001d      	movs	r5, r3
 80013b6:	0b3f      	lsrs	r7, r7, #12
 80013b8:	0d40      	lsrs	r0, r0, #21
 80013ba:	0fcc      	lsrs	r4, r1, #31
 80013bc:	2800      	cmp	r0, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0x26>
 80013c0:	e06f      	b.n	80014a2 <__aeabi_dmul+0x106>
 80013c2:	4bde      	ldr	r3, [pc, #888]	; (800173c <__aeabi_dmul+0x3a0>)
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d038      	beq.n	800143a <__aeabi_dmul+0x9e>
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	00ff      	lsls	r7, r7, #3
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	431f      	orrs	r7, r3
 80013d0:	0f73      	lsrs	r3, r6, #29
 80013d2:	433b      	orrs	r3, r7
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	4bda      	ldr	r3, [pc, #872]	; (8001740 <__aeabi_dmul+0x3a4>)
 80013d8:	2700      	movs	r7, #0
 80013da:	4699      	mov	r9, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	469b      	mov	fp, r3
 80013e0:	00f6      	lsls	r6, r6, #3
 80013e2:	4481      	add	r9, r0
 80013e4:	032b      	lsls	r3, r5, #12
 80013e6:	0069      	lsls	r1, r5, #1
 80013e8:	0b1b      	lsrs	r3, r3, #12
 80013ea:	4652      	mov	r2, sl
 80013ec:	4698      	mov	r8, r3
 80013ee:	0d49      	lsrs	r1, r1, #21
 80013f0:	0fed      	lsrs	r5, r5, #31
 80013f2:	2900      	cmp	r1, #0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dmul+0x5c>
 80013f6:	e085      	b.n	8001504 <__aeabi_dmul+0x168>
 80013f8:	4bd0      	ldr	r3, [pc, #832]	; (800173c <__aeabi_dmul+0x3a0>)
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d100      	bne.n	8001400 <__aeabi_dmul+0x64>
 80013fe:	e073      	b.n	80014e8 <__aeabi_dmul+0x14c>
 8001400:	4643      	mov	r3, r8
 8001402:	00da      	lsls	r2, r3, #3
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	4313      	orrs	r3, r2
 800140a:	4652      	mov	r2, sl
 800140c:	48cc      	ldr	r0, [pc, #816]	; (8001740 <__aeabi_dmul+0x3a4>)
 800140e:	0f52      	lsrs	r2, r2, #29
 8001410:	4684      	mov	ip, r0
 8001412:	4313      	orrs	r3, r2
 8001414:	4652      	mov	r2, sl
 8001416:	2000      	movs	r0, #0
 8001418:	4461      	add	r1, ip
 800141a:	00d2      	lsls	r2, r2, #3
 800141c:	4489      	add	r9, r1
 800141e:	0021      	movs	r1, r4
 8001420:	4069      	eors	r1, r5
 8001422:	9100      	str	r1, [sp, #0]
 8001424:	468c      	mov	ip, r1
 8001426:	2101      	movs	r1, #1
 8001428:	4449      	add	r1, r9
 800142a:	468a      	mov	sl, r1
 800142c:	2f0f      	cmp	r7, #15
 800142e:	d900      	bls.n	8001432 <__aeabi_dmul+0x96>
 8001430:	e090      	b.n	8001554 <__aeabi_dmul+0x1b8>
 8001432:	49c4      	ldr	r1, [pc, #784]	; (8001744 <__aeabi_dmul+0x3a8>)
 8001434:	00bf      	lsls	r7, r7, #2
 8001436:	59cf      	ldr	r7, [r1, r7]
 8001438:	46bf      	mov	pc, r7
 800143a:	465b      	mov	r3, fp
 800143c:	433b      	orrs	r3, r7
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	d000      	beq.n	8001444 <__aeabi_dmul+0xa8>
 8001442:	e16a      	b.n	800171a <__aeabi_dmul+0x37e>
 8001444:	2302      	movs	r3, #2
 8001446:	2708      	movs	r7, #8
 8001448:	2600      	movs	r6, #0
 800144a:	4681      	mov	r9, r0
 800144c:	469b      	mov	fp, r3
 800144e:	e7c9      	b.n	80013e4 <__aeabi_dmul+0x48>
 8001450:	0032      	movs	r2, r6
 8001452:	4658      	mov	r0, fp
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	4661      	mov	r1, ip
 8001458:	9100      	str	r1, [sp, #0]
 800145a:	2802      	cmp	r0, #2
 800145c:	d100      	bne.n	8001460 <__aeabi_dmul+0xc4>
 800145e:	e075      	b.n	800154c <__aeabi_dmul+0x1b0>
 8001460:	2803      	cmp	r0, #3
 8001462:	d100      	bne.n	8001466 <__aeabi_dmul+0xca>
 8001464:	e1fe      	b.n	8001864 <__aeabi_dmul+0x4c8>
 8001466:	2801      	cmp	r0, #1
 8001468:	d000      	beq.n	800146c <__aeabi_dmul+0xd0>
 800146a:	e12c      	b.n	80016c6 <__aeabi_dmul+0x32a>
 800146c:	2300      	movs	r3, #0
 800146e:	2700      	movs	r7, #0
 8001470:	2600      	movs	r6, #0
 8001472:	2500      	movs	r5, #0
 8001474:	033f      	lsls	r7, r7, #12
 8001476:	0d2a      	lsrs	r2, r5, #20
 8001478:	0b3f      	lsrs	r7, r7, #12
 800147a:	48b3      	ldr	r0, [pc, #716]	; (8001748 <__aeabi_dmul+0x3ac>)
 800147c:	0512      	lsls	r2, r2, #20
 800147e:	433a      	orrs	r2, r7
 8001480:	4002      	ands	r2, r0
 8001482:	051b      	lsls	r3, r3, #20
 8001484:	4313      	orrs	r3, r2
 8001486:	9a00      	ldr	r2, [sp, #0]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	07d1      	lsls	r1, r2, #31
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	430b      	orrs	r3, r1
 8001490:	0030      	movs	r0, r6
 8001492:	0019      	movs	r1, r3
 8001494:	b007      	add	sp, #28
 8001496:	bc3c      	pop	{r2, r3, r4, r5}
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
 800149c:	46a2      	mov	sl, r4
 800149e:	46ab      	mov	fp, r5
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	465b      	mov	r3, fp
 80014a4:	433b      	orrs	r3, r7
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	d100      	bne.n	80014ac <__aeabi_dmul+0x110>
 80014aa:	e12f      	b.n	800170c <__aeabi_dmul+0x370>
 80014ac:	2f00      	cmp	r7, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dmul+0x116>
 80014b0:	e1a5      	b.n	80017fe <__aeabi_dmul+0x462>
 80014b2:	0038      	movs	r0, r7
 80014b4:	f000 fec0 	bl	8002238 <__clzsi2>
 80014b8:	0003      	movs	r3, r0
 80014ba:	3b0b      	subs	r3, #11
 80014bc:	2b1c      	cmp	r3, #28
 80014be:	dd00      	ble.n	80014c2 <__aeabi_dmul+0x126>
 80014c0:	e196      	b.n	80017f0 <__aeabi_dmul+0x454>
 80014c2:	221d      	movs	r2, #29
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	465a      	mov	r2, fp
 80014c8:	0001      	movs	r1, r0
 80014ca:	40da      	lsrs	r2, r3
 80014cc:	465e      	mov	r6, fp
 80014ce:	3908      	subs	r1, #8
 80014d0:	408f      	lsls	r7, r1
 80014d2:	0013      	movs	r3, r2
 80014d4:	408e      	lsls	r6, r1
 80014d6:	433b      	orrs	r3, r7
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b9c      	ldr	r3, [pc, #624]	; (800174c <__aeabi_dmul+0x3b0>)
 80014dc:	2700      	movs	r7, #0
 80014de:	1a1b      	subs	r3, r3, r0
 80014e0:	4699      	mov	r9, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	469b      	mov	fp, r3
 80014e6:	e77d      	b.n	80013e4 <__aeabi_dmul+0x48>
 80014e8:	4641      	mov	r1, r8
 80014ea:	4653      	mov	r3, sl
 80014ec:	430b      	orrs	r3, r1
 80014ee:	4993      	ldr	r1, [pc, #588]	; (800173c <__aeabi_dmul+0x3a0>)
 80014f0:	468c      	mov	ip, r1
 80014f2:	44e1      	add	r9, ip
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d000      	beq.n	80014fa <__aeabi_dmul+0x15e>
 80014f8:	e11a      	b.n	8001730 <__aeabi_dmul+0x394>
 80014fa:	2202      	movs	r2, #2
 80014fc:	2002      	movs	r0, #2
 80014fe:	4317      	orrs	r7, r2
 8001500:	2200      	movs	r2, #0
 8001502:	e78c      	b.n	800141e <__aeabi_dmul+0x82>
 8001504:	4313      	orrs	r3, r2
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x16e>
 8001508:	e10d      	b.n	8001726 <__aeabi_dmul+0x38a>
 800150a:	4643      	mov	r3, r8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x176>
 8001510:	e181      	b.n	8001816 <__aeabi_dmul+0x47a>
 8001512:	4640      	mov	r0, r8
 8001514:	f000 fe90 	bl	8002238 <__clzsi2>
 8001518:	0002      	movs	r2, r0
 800151a:	3a0b      	subs	r2, #11
 800151c:	2a1c      	cmp	r2, #28
 800151e:	dd00      	ble.n	8001522 <__aeabi_dmul+0x186>
 8001520:	e172      	b.n	8001808 <__aeabi_dmul+0x46c>
 8001522:	0001      	movs	r1, r0
 8001524:	4643      	mov	r3, r8
 8001526:	3908      	subs	r1, #8
 8001528:	408b      	lsls	r3, r1
 800152a:	4698      	mov	r8, r3
 800152c:	231d      	movs	r3, #29
 800152e:	1a9a      	subs	r2, r3, r2
 8001530:	4653      	mov	r3, sl
 8001532:	40d3      	lsrs	r3, r2
 8001534:	001a      	movs	r2, r3
 8001536:	4643      	mov	r3, r8
 8001538:	4313      	orrs	r3, r2
 800153a:	4652      	mov	r2, sl
 800153c:	408a      	lsls	r2, r1
 800153e:	4649      	mov	r1, r9
 8001540:	1a08      	subs	r0, r1, r0
 8001542:	4982      	ldr	r1, [pc, #520]	; (800174c <__aeabi_dmul+0x3b0>)
 8001544:	4689      	mov	r9, r1
 8001546:	4481      	add	r9, r0
 8001548:	2000      	movs	r0, #0
 800154a:	e768      	b.n	800141e <__aeabi_dmul+0x82>
 800154c:	4b7b      	ldr	r3, [pc, #492]	; (800173c <__aeabi_dmul+0x3a0>)
 800154e:	2700      	movs	r7, #0
 8001550:	2600      	movs	r6, #0
 8001552:	e78e      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001554:	0c14      	lsrs	r4, r2, #16
 8001556:	0412      	lsls	r2, r2, #16
 8001558:	0c12      	lsrs	r2, r2, #16
 800155a:	0011      	movs	r1, r2
 800155c:	0c37      	lsrs	r7, r6, #16
 800155e:	0436      	lsls	r6, r6, #16
 8001560:	0c35      	lsrs	r5, r6, #16
 8001562:	4379      	muls	r1, r7
 8001564:	0028      	movs	r0, r5
 8001566:	468c      	mov	ip, r1
 8001568:	002e      	movs	r6, r5
 800156a:	4360      	muls	r0, r4
 800156c:	4460      	add	r0, ip
 800156e:	4683      	mov	fp, r0
 8001570:	4356      	muls	r6, r2
 8001572:	0021      	movs	r1, r4
 8001574:	0c30      	lsrs	r0, r6, #16
 8001576:	4680      	mov	r8, r0
 8001578:	4658      	mov	r0, fp
 800157a:	4379      	muls	r1, r7
 800157c:	4440      	add	r0, r8
 800157e:	9102      	str	r1, [sp, #8]
 8001580:	4584      	cmp	ip, r0
 8001582:	d906      	bls.n	8001592 <__aeabi_dmul+0x1f6>
 8001584:	4688      	mov	r8, r1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	468c      	mov	ip, r1
 800158c:	44e0      	add	r8, ip
 800158e:	4641      	mov	r1, r8
 8001590:	9102      	str	r1, [sp, #8]
 8001592:	0436      	lsls	r6, r6, #16
 8001594:	0c01      	lsrs	r1, r0, #16
 8001596:	0c36      	lsrs	r6, r6, #16
 8001598:	0400      	lsls	r0, r0, #16
 800159a:	468b      	mov	fp, r1
 800159c:	1981      	adds	r1, r0, r6
 800159e:	0c1e      	lsrs	r6, r3, #16
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	0c1b      	lsrs	r3, r3, #16
 80015a4:	9103      	str	r1, [sp, #12]
 80015a6:	0019      	movs	r1, r3
 80015a8:	4379      	muls	r1, r7
 80015aa:	468c      	mov	ip, r1
 80015ac:	0028      	movs	r0, r5
 80015ae:	4375      	muls	r5, r6
 80015b0:	4465      	add	r5, ip
 80015b2:	46a8      	mov	r8, r5
 80015b4:	4358      	muls	r0, r3
 80015b6:	0c05      	lsrs	r5, r0, #16
 80015b8:	4445      	add	r5, r8
 80015ba:	4377      	muls	r7, r6
 80015bc:	42a9      	cmp	r1, r5
 80015be:	d903      	bls.n	80015c8 <__aeabi_dmul+0x22c>
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0249      	lsls	r1, r1, #9
 80015c4:	468c      	mov	ip, r1
 80015c6:	4467      	add	r7, ip
 80015c8:	0c29      	lsrs	r1, r5, #16
 80015ca:	468c      	mov	ip, r1
 80015cc:	0039      	movs	r1, r7
 80015ce:	0400      	lsls	r0, r0, #16
 80015d0:	0c00      	lsrs	r0, r0, #16
 80015d2:	042d      	lsls	r5, r5, #16
 80015d4:	182d      	adds	r5, r5, r0
 80015d6:	4461      	add	r1, ip
 80015d8:	44ab      	add	fp, r5
 80015da:	9105      	str	r1, [sp, #20]
 80015dc:	4659      	mov	r1, fp
 80015de:	9104      	str	r1, [sp, #16]
 80015e0:	9901      	ldr	r1, [sp, #4]
 80015e2:	040f      	lsls	r7, r1, #16
 80015e4:	0c3f      	lsrs	r7, r7, #16
 80015e6:	0c08      	lsrs	r0, r1, #16
 80015e8:	0039      	movs	r1, r7
 80015ea:	4351      	muls	r1, r2
 80015ec:	4342      	muls	r2, r0
 80015ee:	4690      	mov	r8, r2
 80015f0:	0002      	movs	r2, r0
 80015f2:	468c      	mov	ip, r1
 80015f4:	0c09      	lsrs	r1, r1, #16
 80015f6:	468b      	mov	fp, r1
 80015f8:	4362      	muls	r2, r4
 80015fa:	437c      	muls	r4, r7
 80015fc:	4444      	add	r4, r8
 80015fe:	445c      	add	r4, fp
 8001600:	45a0      	cmp	r8, r4
 8001602:	d903      	bls.n	800160c <__aeabi_dmul+0x270>
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0249      	lsls	r1, r1, #9
 8001608:	4688      	mov	r8, r1
 800160a:	4442      	add	r2, r8
 800160c:	0c21      	lsrs	r1, r4, #16
 800160e:	4688      	mov	r8, r1
 8001610:	4661      	mov	r1, ip
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	0c09      	lsrs	r1, r1, #16
 8001616:	468c      	mov	ip, r1
 8001618:	0039      	movs	r1, r7
 800161a:	4359      	muls	r1, r3
 800161c:	4343      	muls	r3, r0
 800161e:	4370      	muls	r0, r6
 8001620:	437e      	muls	r6, r7
 8001622:	0c0f      	lsrs	r7, r1, #16
 8001624:	18f6      	adds	r6, r6, r3
 8001626:	0424      	lsls	r4, r4, #16
 8001628:	19be      	adds	r6, r7, r6
 800162a:	4464      	add	r4, ip
 800162c:	4442      	add	r2, r8
 800162e:	468c      	mov	ip, r1
 8001630:	42b3      	cmp	r3, r6
 8001632:	d903      	bls.n	800163c <__aeabi_dmul+0x2a0>
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	4698      	mov	r8, r3
 800163a:	4440      	add	r0, r8
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	4661      	mov	r1, ip
 8001640:	4698      	mov	r8, r3
 8001642:	9b04      	ldr	r3, [sp, #16]
 8001644:	0437      	lsls	r7, r6, #16
 8001646:	4443      	add	r3, r8
 8001648:	469b      	mov	fp, r3
 800164a:	45ab      	cmp	fp, r5
 800164c:	41ad      	sbcs	r5, r5
 800164e:	426b      	negs	r3, r5
 8001650:	040d      	lsls	r5, r1, #16
 8001652:	9905      	ldr	r1, [sp, #20]
 8001654:	0c2d      	lsrs	r5, r5, #16
 8001656:	468c      	mov	ip, r1
 8001658:	197f      	adds	r7, r7, r5
 800165a:	4467      	add	r7, ip
 800165c:	18fd      	adds	r5, r7, r3
 800165e:	46a8      	mov	r8, r5
 8001660:	465d      	mov	r5, fp
 8001662:	192d      	adds	r5, r5, r4
 8001664:	42a5      	cmp	r5, r4
 8001666:	41a4      	sbcs	r4, r4
 8001668:	4693      	mov	fp, r2
 800166a:	4264      	negs	r4, r4
 800166c:	46a4      	mov	ip, r4
 800166e:	44c3      	add	fp, r8
 8001670:	44dc      	add	ip, fp
 8001672:	428f      	cmp	r7, r1
 8001674:	41bf      	sbcs	r7, r7
 8001676:	4598      	cmp	r8, r3
 8001678:	419b      	sbcs	r3, r3
 800167a:	4593      	cmp	fp, r2
 800167c:	4192      	sbcs	r2, r2
 800167e:	45a4      	cmp	ip, r4
 8001680:	41a4      	sbcs	r4, r4
 8001682:	425b      	negs	r3, r3
 8001684:	427f      	negs	r7, r7
 8001686:	431f      	orrs	r7, r3
 8001688:	0c36      	lsrs	r6, r6, #16
 800168a:	4252      	negs	r2, r2
 800168c:	4264      	negs	r4, r4
 800168e:	19bf      	adds	r7, r7, r6
 8001690:	4322      	orrs	r2, r4
 8001692:	18bf      	adds	r7, r7, r2
 8001694:	4662      	mov	r2, ip
 8001696:	1838      	adds	r0, r7, r0
 8001698:	0243      	lsls	r3, r0, #9
 800169a:	0dd2      	lsrs	r2, r2, #23
 800169c:	9903      	ldr	r1, [sp, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	026a      	lsls	r2, r5, #9
 80016a2:	430a      	orrs	r2, r1
 80016a4:	1e50      	subs	r0, r2, #1
 80016a6:	4182      	sbcs	r2, r0
 80016a8:	4661      	mov	r1, ip
 80016aa:	0ded      	lsrs	r5, r5, #23
 80016ac:	432a      	orrs	r2, r5
 80016ae:	024e      	lsls	r6, r1, #9
 80016b0:	4332      	orrs	r2, r6
 80016b2:	01d9      	lsls	r1, r3, #7
 80016b4:	d400      	bmi.n	80016b8 <__aeabi_dmul+0x31c>
 80016b6:	e0b3      	b.n	8001820 <__aeabi_dmul+0x484>
 80016b8:	2601      	movs	r6, #1
 80016ba:	0850      	lsrs	r0, r2, #1
 80016bc:	4032      	ands	r2, r6
 80016be:	4302      	orrs	r2, r0
 80016c0:	07de      	lsls	r6, r3, #31
 80016c2:	4332      	orrs	r2, r6
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	4c22      	ldr	r4, [pc, #136]	; (8001750 <__aeabi_dmul+0x3b4>)
 80016c8:	4454      	add	r4, sl
 80016ca:	2c00      	cmp	r4, #0
 80016cc:	dd62      	ble.n	8001794 <__aeabi_dmul+0x3f8>
 80016ce:	0751      	lsls	r1, r2, #29
 80016d0:	d009      	beq.n	80016e6 <__aeabi_dmul+0x34a>
 80016d2:	200f      	movs	r0, #15
 80016d4:	4010      	ands	r0, r2
 80016d6:	2804      	cmp	r0, #4
 80016d8:	d005      	beq.n	80016e6 <__aeabi_dmul+0x34a>
 80016da:	1d10      	adds	r0, r2, #4
 80016dc:	4290      	cmp	r0, r2
 80016de:	4192      	sbcs	r2, r2
 80016e0:	4252      	negs	r2, r2
 80016e2:	189b      	adds	r3, r3, r2
 80016e4:	0002      	movs	r2, r0
 80016e6:	01d9      	lsls	r1, r3, #7
 80016e8:	d504      	bpl.n	80016f4 <__aeabi_dmul+0x358>
 80016ea:	2480      	movs	r4, #128	; 0x80
 80016ec:	4819      	ldr	r0, [pc, #100]	; (8001754 <__aeabi_dmul+0x3b8>)
 80016ee:	00e4      	lsls	r4, r4, #3
 80016f0:	4003      	ands	r3, r0
 80016f2:	4454      	add	r4, sl
 80016f4:	4818      	ldr	r0, [pc, #96]	; (8001758 <__aeabi_dmul+0x3bc>)
 80016f6:	4284      	cmp	r4, r0
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dmul+0x360>
 80016fa:	e727      	b.n	800154c <__aeabi_dmul+0x1b0>
 80016fc:	075e      	lsls	r6, r3, #29
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	08d2      	lsrs	r2, r2, #3
 8001702:	0b1f      	lsrs	r7, r3, #12
 8001704:	0563      	lsls	r3, r4, #21
 8001706:	4316      	orrs	r6, r2
 8001708:	0d5b      	lsrs	r3, r3, #21
 800170a:	e6b2      	b.n	8001472 <__aeabi_dmul+0xd6>
 800170c:	2300      	movs	r3, #0
 800170e:	4699      	mov	r9, r3
 8001710:	3301      	adds	r3, #1
 8001712:	2704      	movs	r7, #4
 8001714:	2600      	movs	r6, #0
 8001716:	469b      	mov	fp, r3
 8001718:	e664      	b.n	80013e4 <__aeabi_dmul+0x48>
 800171a:	2303      	movs	r3, #3
 800171c:	9701      	str	r7, [sp, #4]
 800171e:	4681      	mov	r9, r0
 8001720:	270c      	movs	r7, #12
 8001722:	469b      	mov	fp, r3
 8001724:	e65e      	b.n	80013e4 <__aeabi_dmul+0x48>
 8001726:	2201      	movs	r2, #1
 8001728:	2001      	movs	r0, #1
 800172a:	4317      	orrs	r7, r2
 800172c:	2200      	movs	r2, #0
 800172e:	e676      	b.n	800141e <__aeabi_dmul+0x82>
 8001730:	2303      	movs	r3, #3
 8001732:	2003      	movs	r0, #3
 8001734:	431f      	orrs	r7, r3
 8001736:	4643      	mov	r3, r8
 8001738:	e671      	b.n	800141e <__aeabi_dmul+0x82>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	000007ff 	.word	0x000007ff
 8001740:	fffffc01 	.word	0xfffffc01
 8001744:	0800be98 	.word	0x0800be98
 8001748:	800fffff 	.word	0x800fffff
 800174c:	fffffc0d 	.word	0xfffffc0d
 8001750:	000003ff 	.word	0x000003ff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	000007fe 	.word	0x000007fe
 800175c:	2300      	movs	r3, #0
 800175e:	2780      	movs	r7, #128	; 0x80
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	2600      	movs	r6, #0
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001768:	e683      	b.n	8001472 <__aeabi_dmul+0xd6>
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	0032      	movs	r2, r6
 800176e:	46a4      	mov	ip, r4
 8001770:	4658      	mov	r0, fp
 8001772:	e670      	b.n	8001456 <__aeabi_dmul+0xba>
 8001774:	46ac      	mov	ip, r5
 8001776:	e66e      	b.n	8001456 <__aeabi_dmul+0xba>
 8001778:	2780      	movs	r7, #128	; 0x80
 800177a:	9901      	ldr	r1, [sp, #4]
 800177c:	033f      	lsls	r7, r7, #12
 800177e:	4239      	tst	r1, r7
 8001780:	d02d      	beq.n	80017de <__aeabi_dmul+0x442>
 8001782:	423b      	tst	r3, r7
 8001784:	d12b      	bne.n	80017de <__aeabi_dmul+0x442>
 8001786:	431f      	orrs	r7, r3
 8001788:	033f      	lsls	r7, r7, #12
 800178a:	0b3f      	lsrs	r7, r7, #12
 800178c:	9500      	str	r5, [sp, #0]
 800178e:	0016      	movs	r6, r2
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001792:	e66e      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001794:	2501      	movs	r5, #1
 8001796:	1b2d      	subs	r5, r5, r4
 8001798:	2d38      	cmp	r5, #56	; 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dmul+0x402>
 800179c:	e666      	b.n	800146c <__aeabi_dmul+0xd0>
 800179e:	2d1f      	cmp	r5, #31
 80017a0:	dc40      	bgt.n	8001824 <__aeabi_dmul+0x488>
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <__aeabi_dmul+0x4dc>)
 80017a4:	001c      	movs	r4, r3
 80017a6:	4450      	add	r0, sl
 80017a8:	0016      	movs	r6, r2
 80017aa:	4082      	lsls	r2, r0
 80017ac:	4084      	lsls	r4, r0
 80017ae:	40ee      	lsrs	r6, r5
 80017b0:	1e50      	subs	r0, r2, #1
 80017b2:	4182      	sbcs	r2, r0
 80017b4:	4334      	orrs	r4, r6
 80017b6:	4314      	orrs	r4, r2
 80017b8:	40eb      	lsrs	r3, r5
 80017ba:	0762      	lsls	r2, r4, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x436>
 80017be:	220f      	movs	r2, #15
 80017c0:	4022      	ands	r2, r4
 80017c2:	2a04      	cmp	r2, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x436>
 80017c6:	0022      	movs	r2, r4
 80017c8:	1d14      	adds	r4, r2, #4
 80017ca:	4294      	cmp	r4, r2
 80017cc:	4180      	sbcs	r0, r0
 80017ce:	4240      	negs	r0, r0
 80017d0:	181b      	adds	r3, r3, r0
 80017d2:	021a      	lsls	r2, r3, #8
 80017d4:	d53e      	bpl.n	8001854 <__aeabi_dmul+0x4b8>
 80017d6:	2301      	movs	r3, #1
 80017d8:	2700      	movs	r7, #0
 80017da:	2600      	movs	r6, #0
 80017dc:	e649      	b.n	8001472 <__aeabi_dmul+0xd6>
 80017de:	2780      	movs	r7, #128	; 0x80
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	033f      	lsls	r7, r7, #12
 80017e4:	431f      	orrs	r7, r3
 80017e6:	033f      	lsls	r7, r7, #12
 80017e8:	0b3f      	lsrs	r7, r7, #12
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <__aeabi_dmul+0x4d8>)
 80017ee:	e640      	b.n	8001472 <__aeabi_dmul+0xd6>
 80017f0:	0003      	movs	r3, r0
 80017f2:	465a      	mov	r2, fp
 80017f4:	3b28      	subs	r3, #40	; 0x28
 80017f6:	409a      	lsls	r2, r3
 80017f8:	2600      	movs	r6, #0
 80017fa:	9201      	str	r2, [sp, #4]
 80017fc:	e66d      	b.n	80014da <__aeabi_dmul+0x13e>
 80017fe:	4658      	mov	r0, fp
 8001800:	f000 fd1a 	bl	8002238 <__clzsi2>
 8001804:	3020      	adds	r0, #32
 8001806:	e657      	b.n	80014b8 <__aeabi_dmul+0x11c>
 8001808:	0003      	movs	r3, r0
 800180a:	4652      	mov	r2, sl
 800180c:	3b28      	subs	r3, #40	; 0x28
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	2200      	movs	r2, #0
 8001814:	e693      	b.n	800153e <__aeabi_dmul+0x1a2>
 8001816:	4650      	mov	r0, sl
 8001818:	f000 fd0e 	bl	8002238 <__clzsi2>
 800181c:	3020      	adds	r0, #32
 800181e:	e67b      	b.n	8001518 <__aeabi_dmul+0x17c>
 8001820:	46ca      	mov	sl, r9
 8001822:	e750      	b.n	80016c6 <__aeabi_dmul+0x32a>
 8001824:	201f      	movs	r0, #31
 8001826:	001e      	movs	r6, r3
 8001828:	4240      	negs	r0, r0
 800182a:	1b04      	subs	r4, r0, r4
 800182c:	40e6      	lsrs	r6, r4
 800182e:	2d20      	cmp	r5, #32
 8001830:	d003      	beq.n	800183a <__aeabi_dmul+0x49e>
 8001832:	4c12      	ldr	r4, [pc, #72]	; (800187c <__aeabi_dmul+0x4e0>)
 8001834:	4454      	add	r4, sl
 8001836:	40a3      	lsls	r3, r4
 8001838:	431a      	orrs	r2, r3
 800183a:	1e50      	subs	r0, r2, #1
 800183c:	4182      	sbcs	r2, r0
 800183e:	4332      	orrs	r2, r6
 8001840:	2607      	movs	r6, #7
 8001842:	2700      	movs	r7, #0
 8001844:	4016      	ands	r6, r2
 8001846:	d009      	beq.n	800185c <__aeabi_dmul+0x4c0>
 8001848:	200f      	movs	r0, #15
 800184a:	2300      	movs	r3, #0
 800184c:	4010      	ands	r0, r2
 800184e:	0014      	movs	r4, r2
 8001850:	2804      	cmp	r0, #4
 8001852:	d1b9      	bne.n	80017c8 <__aeabi_dmul+0x42c>
 8001854:	0022      	movs	r2, r4
 8001856:	075e      	lsls	r6, r3, #29
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	0b1f      	lsrs	r7, r3, #12
 800185c:	08d2      	lsrs	r2, r2, #3
 800185e:	4316      	orrs	r6, r2
 8001860:	2300      	movs	r3, #0
 8001862:	e606      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001864:	2780      	movs	r7, #128	; 0x80
 8001866:	033f      	lsls	r7, r7, #12
 8001868:	431f      	orrs	r7, r3
 800186a:	033f      	lsls	r7, r7, #12
 800186c:	0b3f      	lsrs	r7, r7, #12
 800186e:	0016      	movs	r6, r2
 8001870:	4b00      	ldr	r3, [pc, #0]	; (8001874 <__aeabi_dmul+0x4d8>)
 8001872:	e5fe      	b.n	8001472 <__aeabi_dmul+0xd6>
 8001874:	000007ff 	.word	0x000007ff
 8001878:	0000041e 	.word	0x0000041e
 800187c:	0000043e 	.word	0x0000043e

08001880 <__aeabi_dsub>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	4657      	mov	r7, sl
 8001884:	464e      	mov	r6, r9
 8001886:	4645      	mov	r5, r8
 8001888:	46de      	mov	lr, fp
 800188a:	000c      	movs	r4, r1
 800188c:	0309      	lsls	r1, r1, #12
 800188e:	b5e0      	push	{r5, r6, r7, lr}
 8001890:	0a49      	lsrs	r1, r1, #9
 8001892:	0f46      	lsrs	r6, r0, #29
 8001894:	005f      	lsls	r7, r3, #1
 8001896:	4331      	orrs	r1, r6
 8001898:	031e      	lsls	r6, r3, #12
 800189a:	0fdb      	lsrs	r3, r3, #31
 800189c:	0a76      	lsrs	r6, r6, #9
 800189e:	469b      	mov	fp, r3
 80018a0:	0f53      	lsrs	r3, r2, #29
 80018a2:	4333      	orrs	r3, r6
 80018a4:	4ec8      	ldr	r6, [pc, #800]	; (8001bc8 <__aeabi_dsub+0x348>)
 80018a6:	0065      	lsls	r5, r4, #1
 80018a8:	00c0      	lsls	r0, r0, #3
 80018aa:	0fe4      	lsrs	r4, r4, #31
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	0d6d      	lsrs	r5, r5, #21
 80018b0:	46a2      	mov	sl, r4
 80018b2:	4681      	mov	r9, r0
 80018b4:	0d7f      	lsrs	r7, r7, #21
 80018b6:	469c      	mov	ip, r3
 80018b8:	4690      	mov	r8, r2
 80018ba:	42b7      	cmp	r7, r6
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x40>
 80018be:	e0b9      	b.n	8001a34 <__aeabi_dsub+0x1b4>
 80018c0:	465b      	mov	r3, fp
 80018c2:	2601      	movs	r6, #1
 80018c4:	4073      	eors	r3, r6
 80018c6:	469b      	mov	fp, r3
 80018c8:	1bee      	subs	r6, r5, r7
 80018ca:	45a3      	cmp	fp, r4
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x50>
 80018ce:	e083      	b.n	80019d8 <__aeabi_dsub+0x158>
 80018d0:	2e00      	cmp	r6, #0
 80018d2:	dd63      	ble.n	800199c <__aeabi_dsub+0x11c>
 80018d4:	2f00      	cmp	r7, #0
 80018d6:	d000      	beq.n	80018da <__aeabi_dsub+0x5a>
 80018d8:	e0b1      	b.n	8001a3e <__aeabi_dsub+0x1be>
 80018da:	4663      	mov	r3, ip
 80018dc:	4313      	orrs	r3, r2
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0x62>
 80018e0:	e123      	b.n	8001b2a <__aeabi_dsub+0x2aa>
 80018e2:	1e73      	subs	r3, r6, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d000      	beq.n	80018ea <__aeabi_dsub+0x6a>
 80018e8:	e1ba      	b.n	8001c60 <__aeabi_dsub+0x3e0>
 80018ea:	1a86      	subs	r6, r0, r2
 80018ec:	4663      	mov	r3, ip
 80018ee:	42b0      	cmp	r0, r6
 80018f0:	4180      	sbcs	r0, r0
 80018f2:	2501      	movs	r5, #1
 80018f4:	1ac9      	subs	r1, r1, r3
 80018f6:	4240      	negs	r0, r0
 80018f8:	1a09      	subs	r1, r1, r0
 80018fa:	020b      	lsls	r3, r1, #8
 80018fc:	d400      	bmi.n	8001900 <__aeabi_dsub+0x80>
 80018fe:	e147      	b.n	8001b90 <__aeabi_dsub+0x310>
 8001900:	0249      	lsls	r1, r1, #9
 8001902:	0a4b      	lsrs	r3, r1, #9
 8001904:	4698      	mov	r8, r3
 8001906:	4643      	mov	r3, r8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d100      	bne.n	800190e <__aeabi_dsub+0x8e>
 800190c:	e189      	b.n	8001c22 <__aeabi_dsub+0x3a2>
 800190e:	4640      	mov	r0, r8
 8001910:	f000 fc92 	bl	8002238 <__clzsi2>
 8001914:	0003      	movs	r3, r0
 8001916:	3b08      	subs	r3, #8
 8001918:	2b1f      	cmp	r3, #31
 800191a:	dd00      	ble.n	800191e <__aeabi_dsub+0x9e>
 800191c:	e17c      	b.n	8001c18 <__aeabi_dsub+0x398>
 800191e:	2220      	movs	r2, #32
 8001920:	0030      	movs	r0, r6
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	4641      	mov	r1, r8
 8001926:	40d0      	lsrs	r0, r2
 8001928:	4099      	lsls	r1, r3
 800192a:	0002      	movs	r2, r0
 800192c:	409e      	lsls	r6, r3
 800192e:	430a      	orrs	r2, r1
 8001930:	429d      	cmp	r5, r3
 8001932:	dd00      	ble.n	8001936 <__aeabi_dsub+0xb6>
 8001934:	e16a      	b.n	8001c0c <__aeabi_dsub+0x38c>
 8001936:	1b5d      	subs	r5, r3, r5
 8001938:	1c6b      	adds	r3, r5, #1
 800193a:	2b1f      	cmp	r3, #31
 800193c:	dd00      	ble.n	8001940 <__aeabi_dsub+0xc0>
 800193e:	e194      	b.n	8001c6a <__aeabi_dsub+0x3ea>
 8001940:	2120      	movs	r1, #32
 8001942:	0010      	movs	r0, r2
 8001944:	0035      	movs	r5, r6
 8001946:	1ac9      	subs	r1, r1, r3
 8001948:	408e      	lsls	r6, r1
 800194a:	40da      	lsrs	r2, r3
 800194c:	4088      	lsls	r0, r1
 800194e:	40dd      	lsrs	r5, r3
 8001950:	1e71      	subs	r1, r6, #1
 8001952:	418e      	sbcs	r6, r1
 8001954:	0011      	movs	r1, r2
 8001956:	2207      	movs	r2, #7
 8001958:	4328      	orrs	r0, r5
 800195a:	2500      	movs	r5, #0
 800195c:	4306      	orrs	r6, r0
 800195e:	4032      	ands	r2, r6
 8001960:	2a00      	cmp	r2, #0
 8001962:	d009      	beq.n	8001978 <__aeabi_dsub+0xf8>
 8001964:	230f      	movs	r3, #15
 8001966:	4033      	ands	r3, r6
 8001968:	2b04      	cmp	r3, #4
 800196a:	d005      	beq.n	8001978 <__aeabi_dsub+0xf8>
 800196c:	1d33      	adds	r3, r6, #4
 800196e:	42b3      	cmp	r3, r6
 8001970:	41b6      	sbcs	r6, r6
 8001972:	4276      	negs	r6, r6
 8001974:	1989      	adds	r1, r1, r6
 8001976:	001e      	movs	r6, r3
 8001978:	020b      	lsls	r3, r1, #8
 800197a:	d400      	bmi.n	800197e <__aeabi_dsub+0xfe>
 800197c:	e23d      	b.n	8001dfa <__aeabi_dsub+0x57a>
 800197e:	1c6a      	adds	r2, r5, #1
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001982:	0555      	lsls	r5, r2, #21
 8001984:	0d6d      	lsrs	r5, r5, #21
 8001986:	429a      	cmp	r2, r3
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x10c>
 800198a:	e119      	b.n	8001bc0 <__aeabi_dsub+0x340>
 800198c:	4a8f      	ldr	r2, [pc, #572]	; (8001bcc <__aeabi_dsub+0x34c>)
 800198e:	08f6      	lsrs	r6, r6, #3
 8001990:	400a      	ands	r2, r1
 8001992:	0757      	lsls	r7, r2, #29
 8001994:	0252      	lsls	r2, r2, #9
 8001996:	4337      	orrs	r7, r6
 8001998:	0b12      	lsrs	r2, r2, #12
 800199a:	e09b      	b.n	8001ad4 <__aeabi_dsub+0x254>
 800199c:	2e00      	cmp	r6, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dsub+0x122>
 80019a0:	e0c5      	b.n	8001b2e <__aeabi_dsub+0x2ae>
 80019a2:	1c6e      	adds	r6, r5, #1
 80019a4:	0576      	lsls	r6, r6, #21
 80019a6:	0d76      	lsrs	r6, r6, #21
 80019a8:	2e01      	cmp	r6, #1
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dsub+0x12e>
 80019ac:	e148      	b.n	8001c40 <__aeabi_dsub+0x3c0>
 80019ae:	4667      	mov	r7, ip
 80019b0:	1a86      	subs	r6, r0, r2
 80019b2:	1bcb      	subs	r3, r1, r7
 80019b4:	42b0      	cmp	r0, r6
 80019b6:	41bf      	sbcs	r7, r7
 80019b8:	427f      	negs	r7, r7
 80019ba:	46b8      	mov	r8, r7
 80019bc:	001f      	movs	r7, r3
 80019be:	4643      	mov	r3, r8
 80019c0:	1aff      	subs	r7, r7, r3
 80019c2:	003b      	movs	r3, r7
 80019c4:	46b8      	mov	r8, r7
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	d500      	bpl.n	80019cc <__aeabi_dsub+0x14c>
 80019ca:	e15f      	b.n	8001c8c <__aeabi_dsub+0x40c>
 80019cc:	4337      	orrs	r7, r6
 80019ce:	d19a      	bne.n	8001906 <__aeabi_dsub+0x86>
 80019d0:	2200      	movs	r2, #0
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e079      	b.n	8001acc <__aeabi_dsub+0x24c>
 80019d8:	2e00      	cmp	r6, #0
 80019da:	dc00      	bgt.n	80019de <__aeabi_dsub+0x15e>
 80019dc:	e0fa      	b.n	8001bd4 <__aeabi_dsub+0x354>
 80019de:	2f00      	cmp	r7, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x164>
 80019e2:	e08d      	b.n	8001b00 <__aeabi_dsub+0x280>
 80019e4:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <__aeabi_dsub+0x348>)
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d067      	beq.n	8001aba <__aeabi_dsub+0x23a>
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	4667      	mov	r7, ip
 80019ee:	041b      	lsls	r3, r3, #16
 80019f0:	431f      	orrs	r7, r3
 80019f2:	46bc      	mov	ip, r7
 80019f4:	2e38      	cmp	r6, #56	; 0x38
 80019f6:	dc00      	bgt.n	80019fa <__aeabi_dsub+0x17a>
 80019f8:	e152      	b.n	8001ca0 <__aeabi_dsub+0x420>
 80019fa:	4663      	mov	r3, ip
 80019fc:	4313      	orrs	r3, r2
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	4193      	sbcs	r3, r2
 8001a02:	181e      	adds	r6, r3, r0
 8001a04:	4286      	cmp	r6, r0
 8001a06:	4180      	sbcs	r0, r0
 8001a08:	4240      	negs	r0, r0
 8001a0a:	1809      	adds	r1, r1, r0
 8001a0c:	020b      	lsls	r3, r1, #8
 8001a0e:	d400      	bmi.n	8001a12 <__aeabi_dsub+0x192>
 8001a10:	e0be      	b.n	8001b90 <__aeabi_dsub+0x310>
 8001a12:	4b6d      	ldr	r3, [pc, #436]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001a14:	3501      	adds	r5, #1
 8001a16:	429d      	cmp	r5, r3
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x19c>
 8001a1a:	e0d2      	b.n	8001bc2 <__aeabi_dsub+0x342>
 8001a1c:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <__aeabi_dsub+0x34c>)
 8001a1e:	0873      	lsrs	r3, r6, #1
 8001a20:	400a      	ands	r2, r1
 8001a22:	2101      	movs	r1, #1
 8001a24:	400e      	ands	r6, r1
 8001a26:	431e      	orrs	r6, r3
 8001a28:	0851      	lsrs	r1, r2, #1
 8001a2a:	07d3      	lsls	r3, r2, #31
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	431e      	orrs	r6, r3
 8001a30:	4032      	ands	r2, r6
 8001a32:	e795      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001a34:	001e      	movs	r6, r3
 8001a36:	4316      	orrs	r6, r2
 8001a38:	d000      	beq.n	8001a3c <__aeabi_dsub+0x1bc>
 8001a3a:	e745      	b.n	80018c8 <__aeabi_dsub+0x48>
 8001a3c:	e740      	b.n	80018c0 <__aeabi_dsub+0x40>
 8001a3e:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001a40:	429d      	cmp	r5, r3
 8001a42:	d03a      	beq.n	8001aba <__aeabi_dsub+0x23a>
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	4667      	mov	r7, ip
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431f      	orrs	r7, r3
 8001a4c:	46bc      	mov	ip, r7
 8001a4e:	2e38      	cmp	r6, #56	; 0x38
 8001a50:	dd00      	ble.n	8001a54 <__aeabi_dsub+0x1d4>
 8001a52:	e0eb      	b.n	8001c2c <__aeabi_dsub+0x3ac>
 8001a54:	2e1f      	cmp	r6, #31
 8001a56:	dc00      	bgt.n	8001a5a <__aeabi_dsub+0x1da>
 8001a58:	e13a      	b.n	8001cd0 <__aeabi_dsub+0x450>
 8001a5a:	0033      	movs	r3, r6
 8001a5c:	4667      	mov	r7, ip
 8001a5e:	3b20      	subs	r3, #32
 8001a60:	40df      	lsrs	r7, r3
 8001a62:	003b      	movs	r3, r7
 8001a64:	2e20      	cmp	r6, #32
 8001a66:	d005      	beq.n	8001a74 <__aeabi_dsub+0x1f4>
 8001a68:	2740      	movs	r7, #64	; 0x40
 8001a6a:	1bbf      	subs	r7, r7, r6
 8001a6c:	4666      	mov	r6, ip
 8001a6e:	40be      	lsls	r6, r7
 8001a70:	4332      	orrs	r2, r6
 8001a72:	4690      	mov	r8, r2
 8001a74:	4646      	mov	r6, r8
 8001a76:	1e72      	subs	r2, r6, #1
 8001a78:	4196      	sbcs	r6, r2
 8001a7a:	4333      	orrs	r3, r6
 8001a7c:	e0da      	b.n	8001c34 <__aeabi_dsub+0x3b4>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x204>
 8001a82:	e214      	b.n	8001eae <__aeabi_dsub+0x62e>
 8001a84:	4663      	mov	r3, ip
 8001a86:	4313      	orrs	r3, r2
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x20c>
 8001a8a:	e168      	b.n	8001d5e <__aeabi_dsub+0x4de>
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	074e      	lsls	r6, r1, #29
 8001a90:	08c0      	lsrs	r0, r0, #3
 8001a92:	08c9      	lsrs	r1, r1, #3
 8001a94:	031b      	lsls	r3, r3, #12
 8001a96:	4306      	orrs	r6, r0
 8001a98:	4219      	tst	r1, r3
 8001a9a:	d008      	beq.n	8001aae <__aeabi_dsub+0x22e>
 8001a9c:	4660      	mov	r0, ip
 8001a9e:	08c0      	lsrs	r0, r0, #3
 8001aa0:	4218      	tst	r0, r3
 8001aa2:	d104      	bne.n	8001aae <__aeabi_dsub+0x22e>
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	0001      	movs	r1, r0
 8001aa8:	08d2      	lsrs	r2, r2, #3
 8001aaa:	075e      	lsls	r6, r3, #29
 8001aac:	4316      	orrs	r6, r2
 8001aae:	00f3      	lsls	r3, r6, #3
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	00c9      	lsls	r1, r1, #3
 8001ab4:	0f72      	lsrs	r2, r6, #29
 8001ab6:	4d44      	ldr	r5, [pc, #272]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	464b      	mov	r3, r9
 8001abc:	08de      	lsrs	r6, r3, #3
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001ac0:	074f      	lsls	r7, r1, #29
 8001ac2:	4337      	orrs	r7, r6
 8001ac4:	08ca      	lsrs	r2, r1, #3
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x24c>
 8001aca:	e06e      	b.n	8001baa <__aeabi_dsub+0x32a>
 8001acc:	0312      	lsls	r2, r2, #12
 8001ace:	056d      	lsls	r5, r5, #21
 8001ad0:	0b12      	lsrs	r2, r2, #12
 8001ad2:	0d6d      	lsrs	r5, r5, #21
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	0312      	lsls	r2, r2, #12
 8001ad8:	0b13      	lsrs	r3, r2, #12
 8001ada:	0d0a      	lsrs	r2, r1, #20
 8001adc:	0512      	lsls	r2, r2, #20
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <__aeabi_dsub+0x350>)
 8001ae2:	052d      	lsls	r5, r5, #20
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	432b      	orrs	r3, r5
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	07e4      	lsls	r4, r4, #31
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	4323      	orrs	r3, r4
 8001af0:	0038      	movs	r0, r7
 8001af2:	0019      	movs	r1, r3
 8001af4:	bc3c      	pop	{r2, r3, r4, r5}
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	46a2      	mov	sl, r4
 8001afc:	46ab      	mov	fp, r5
 8001afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b00:	4663      	mov	r3, ip
 8001b02:	4313      	orrs	r3, r2
 8001b04:	d011      	beq.n	8001b2a <__aeabi_dsub+0x2aa>
 8001b06:	1e73      	subs	r3, r6, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x28e>
 8001b0c:	e107      	b.n	8001d1e <__aeabi_dsub+0x49e>
 8001b0e:	1886      	adds	r6, r0, r2
 8001b10:	4286      	cmp	r6, r0
 8001b12:	4180      	sbcs	r0, r0
 8001b14:	4461      	add	r1, ip
 8001b16:	4240      	negs	r0, r0
 8001b18:	1809      	adds	r1, r1, r0
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	020b      	lsls	r3, r1, #8
 8001b1e:	d537      	bpl.n	8001b90 <__aeabi_dsub+0x310>
 8001b20:	2502      	movs	r5, #2
 8001b22:	e77b      	b.n	8001a1c <__aeabi_dsub+0x19c>
 8001b24:	003e      	movs	r6, r7
 8001b26:	4661      	mov	r1, ip
 8001b28:	4691      	mov	r9, r2
 8001b2a:	0035      	movs	r5, r6
 8001b2c:	e7c5      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001b2e:	465c      	mov	r4, fp
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x2b6>
 8001b34:	e0e1      	b.n	8001cfa <__aeabi_dsub+0x47a>
 8001b36:	000b      	movs	r3, r1
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	d0f3      	beq.n	8001b24 <__aeabi_dsub+0x2a4>
 8001b3c:	1c73      	adds	r3, r6, #1
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x2c2>
 8001b40:	e1ac      	b.n	8001e9c <__aeabi_dsub+0x61c>
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001b44:	429f      	cmp	r7, r3
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x2ca>
 8001b48:	e13a      	b.n	8001dc0 <__aeabi_dsub+0x540>
 8001b4a:	43f3      	mvns	r3, r6
 8001b4c:	2b38      	cmp	r3, #56	; 0x38
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x2d2>
 8001b50:	e16f      	b.n	8001e32 <__aeabi_dsub+0x5b2>
 8001b52:	2b1f      	cmp	r3, #31
 8001b54:	dd00      	ble.n	8001b58 <__aeabi_dsub+0x2d8>
 8001b56:	e18c      	b.n	8001e72 <__aeabi_dsub+0x5f2>
 8001b58:	2520      	movs	r5, #32
 8001b5a:	000e      	movs	r6, r1
 8001b5c:	1aed      	subs	r5, r5, r3
 8001b5e:	40ae      	lsls	r6, r5
 8001b60:	46b0      	mov	r8, r6
 8001b62:	0006      	movs	r6, r0
 8001b64:	46aa      	mov	sl, r5
 8001b66:	40de      	lsrs	r6, r3
 8001b68:	4645      	mov	r5, r8
 8001b6a:	4335      	orrs	r5, r6
 8001b6c:	002e      	movs	r6, r5
 8001b6e:	4655      	mov	r5, sl
 8001b70:	40d9      	lsrs	r1, r3
 8001b72:	40a8      	lsls	r0, r5
 8001b74:	4663      	mov	r3, ip
 8001b76:	1e45      	subs	r5, r0, #1
 8001b78:	41a8      	sbcs	r0, r5
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	469c      	mov	ip, r3
 8001b7e:	4330      	orrs	r0, r6
 8001b80:	1a16      	subs	r6, r2, r0
 8001b82:	42b2      	cmp	r2, r6
 8001b84:	4192      	sbcs	r2, r2
 8001b86:	4663      	mov	r3, ip
 8001b88:	4252      	negs	r2, r2
 8001b8a:	1a99      	subs	r1, r3, r2
 8001b8c:	003d      	movs	r5, r7
 8001b8e:	e6b4      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001b90:	2207      	movs	r2, #7
 8001b92:	4032      	ands	r2, r6
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x31a>
 8001b98:	e6e4      	b.n	8001964 <__aeabi_dsub+0xe4>
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001b9c:	08f6      	lsrs	r6, r6, #3
 8001b9e:	074f      	lsls	r7, r1, #29
 8001ba0:	4337      	orrs	r7, r6
 8001ba2:	08ca      	lsrs	r2, r1, #3
 8001ba4:	429d      	cmp	r5, r3
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x32a>
 8001ba8:	e790      	b.n	8001acc <__aeabi_dsub+0x24c>
 8001baa:	003b      	movs	r3, r7
 8001bac:	4313      	orrs	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x332>
 8001bb0:	e1a6      	b.n	8001f00 <__aeabi_dsub+0x680>
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	031b      	lsls	r3, r3, #12
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	0312      	lsls	r2, r2, #12
 8001bba:	0b12      	lsrs	r2, r2, #12
 8001bbc:	4d02      	ldr	r5, [pc, #8]	; (8001bc8 <__aeabi_dsub+0x348>)
 8001bbe:	e789      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001bc0:	0015      	movs	r5, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2700      	movs	r7, #0
 8001bc6:	e785      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001bc8:	000007ff 	.word	0x000007ff
 8001bcc:	ff7fffff 	.word	0xff7fffff
 8001bd0:	800fffff 	.word	0x800fffff
 8001bd4:	2e00      	cmp	r6, #0
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dsub+0x35a>
 8001bd8:	e0c7      	b.n	8001d6a <__aeabi_dsub+0x4ea>
 8001bda:	1c6b      	adds	r3, r5, #1
 8001bdc:	055e      	lsls	r6, r3, #21
 8001bde:	0d76      	lsrs	r6, r6, #21
 8001be0:	2e01      	cmp	r6, #1
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dsub+0x366>
 8001be4:	e0f0      	b.n	8001dc8 <__aeabi_dsub+0x548>
 8001be6:	4dc8      	ldr	r5, [pc, #800]	; (8001f08 <__aeabi_dsub+0x688>)
 8001be8:	42ab      	cmp	r3, r5
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x36e>
 8001bec:	e0b9      	b.n	8001d62 <__aeabi_dsub+0x4e2>
 8001bee:	1885      	adds	r5, r0, r2
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	4285      	cmp	r5, r0
 8001bf4:	4189      	sbcs	r1, r1
 8001bf6:	4462      	add	r2, ip
 8001bf8:	4249      	negs	r1, r1
 8001bfa:	1851      	adds	r1, r2, r1
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	07ce      	lsls	r6, r1, #31
 8001c00:	086d      	lsrs	r5, r5, #1
 8001c02:	432e      	orrs	r6, r5
 8001c04:	0849      	lsrs	r1, r1, #1
 8001c06:	4032      	ands	r2, r6
 8001c08:	001d      	movs	r5, r3
 8001c0a:	e6a9      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001c0c:	49bf      	ldr	r1, [pc, #764]	; (8001f0c <__aeabi_dsub+0x68c>)
 8001c0e:	1aed      	subs	r5, r5, r3
 8001c10:	4011      	ands	r1, r2
 8001c12:	2207      	movs	r2, #7
 8001c14:	4032      	ands	r2, r6
 8001c16:	e6a3      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001c18:	0032      	movs	r2, r6
 8001c1a:	3828      	subs	r0, #40	; 0x28
 8001c1c:	4082      	lsls	r2, r0
 8001c1e:	2600      	movs	r6, #0
 8001c20:	e686      	b.n	8001930 <__aeabi_dsub+0xb0>
 8001c22:	0030      	movs	r0, r6
 8001c24:	f000 fb08 	bl	8002238 <__clzsi2>
 8001c28:	3020      	adds	r0, #32
 8001c2a:	e673      	b.n	8001914 <__aeabi_dsub+0x94>
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	4193      	sbcs	r3, r2
 8001c34:	1ac6      	subs	r6, r0, r3
 8001c36:	42b0      	cmp	r0, r6
 8001c38:	4180      	sbcs	r0, r0
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	1a09      	subs	r1, r1, r0
 8001c3e:	e65c      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001c40:	000e      	movs	r6, r1
 8001c42:	4667      	mov	r7, ip
 8001c44:	4306      	orrs	r6, r0
 8001c46:	4317      	orrs	r7, r2
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d15e      	bne.n	8001d0a <__aeabi_dsub+0x48a>
 8001c4c:	2e00      	cmp	r6, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x3d2>
 8001c50:	e0f3      	b.n	8001e3a <__aeabi_dsub+0x5ba>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x3d8>
 8001c56:	e11e      	b.n	8001e96 <__aeabi_dsub+0x616>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	e72c      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001c60:	4fa9      	ldr	r7, [pc, #676]	; (8001f08 <__aeabi_dsub+0x688>)
 8001c62:	42be      	cmp	r6, r7
 8001c64:	d07b      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001c66:	001e      	movs	r6, r3
 8001c68:	e6f1      	b.n	8001a4e <__aeabi_dsub+0x1ce>
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	3d1f      	subs	r5, #31
 8001c6e:	40e8      	lsrs	r0, r5
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d003      	beq.n	8001c7c <__aeabi_dsub+0x3fc>
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	1acb      	subs	r3, r1, r3
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	4316      	orrs	r6, r2
 8001c7c:	1e73      	subs	r3, r6, #1
 8001c7e:	419e      	sbcs	r6, r3
 8001c80:	2207      	movs	r2, #7
 8001c82:	4306      	orrs	r6, r0
 8001c84:	4032      	ands	r2, r6
 8001c86:	2100      	movs	r1, #0
 8001c88:	2500      	movs	r5, #0
 8001c8a:	e783      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001c8c:	1a16      	subs	r6, r2, r0
 8001c8e:	4663      	mov	r3, ip
 8001c90:	42b2      	cmp	r2, r6
 8001c92:	4180      	sbcs	r0, r0
 8001c94:	1a59      	subs	r1, r3, r1
 8001c96:	4240      	negs	r0, r0
 8001c98:	1a0b      	subs	r3, r1, r0
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	465c      	mov	r4, fp
 8001c9e:	e632      	b.n	8001906 <__aeabi_dsub+0x86>
 8001ca0:	2e1f      	cmp	r6, #31
 8001ca2:	dd00      	ble.n	8001ca6 <__aeabi_dsub+0x426>
 8001ca4:	e0ab      	b.n	8001dfe <__aeabi_dsub+0x57e>
 8001ca6:	2720      	movs	r7, #32
 8001ca8:	1bbb      	subs	r3, r7, r6
 8001caa:	469a      	mov	sl, r3
 8001cac:	4663      	mov	r3, ip
 8001cae:	4657      	mov	r7, sl
 8001cb0:	40bb      	lsls	r3, r7
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	464f      	mov	r7, r9
 8001cb8:	40f3      	lsrs	r3, r6
 8001cba:	431f      	orrs	r7, r3
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	4657      	mov	r7, sl
 8001cc0:	40ba      	lsls	r2, r7
 8001cc2:	1e57      	subs	r7, r2, #1
 8001cc4:	41ba      	sbcs	r2, r7
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	4662      	mov	r2, ip
 8001cca:	40f2      	lsrs	r2, r6
 8001ccc:	1889      	adds	r1, r1, r2
 8001cce:	e698      	b.n	8001a02 <__aeabi_dsub+0x182>
 8001cd0:	2720      	movs	r7, #32
 8001cd2:	1bbb      	subs	r3, r7, r6
 8001cd4:	469a      	mov	sl, r3
 8001cd6:	4663      	mov	r3, ip
 8001cd8:	4657      	mov	r7, sl
 8001cda:	40bb      	lsls	r3, r7
 8001cdc:	4699      	mov	r9, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	464f      	mov	r7, r9
 8001ce2:	40f3      	lsrs	r3, r6
 8001ce4:	431f      	orrs	r7, r3
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	4657      	mov	r7, sl
 8001cea:	40ba      	lsls	r2, r7
 8001cec:	1e57      	subs	r7, r2, #1
 8001cee:	41ba      	sbcs	r2, r7
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	40f2      	lsrs	r2, r6
 8001cf6:	1a89      	subs	r1, r1, r2
 8001cf8:	e79c      	b.n	8001c34 <__aeabi_dsub+0x3b4>
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <__aeabi_dsub+0x688>)
 8001cfc:	429f      	cmp	r7, r3
 8001cfe:	d05f      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001d00:	2580      	movs	r5, #128	; 0x80
 8001d02:	042d      	lsls	r5, r5, #16
 8001d04:	4273      	negs	r3, r6
 8001d06:	4329      	orrs	r1, r5
 8001d08:	e720      	b.n	8001b4c <__aeabi_dsub+0x2cc>
 8001d0a:	2e00      	cmp	r6, #0
 8001d0c:	d10c      	bne.n	8001d28 <__aeabi_dsub+0x4a8>
 8001d0e:	2f00      	cmp	r7, #0
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x494>
 8001d12:	e0d0      	b.n	8001eb6 <__aeabi_dsub+0x636>
 8001d14:	465c      	mov	r4, fp
 8001d16:	4661      	mov	r1, ip
 8001d18:	4691      	mov	r9, r2
 8001d1a:	4d7b      	ldr	r5, [pc, #492]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d1c:	e6cd      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001d1e:	4f7a      	ldr	r7, [pc, #488]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d20:	42be      	cmp	r6, r7
 8001d22:	d01c      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001d24:	001e      	movs	r6, r3
 8001d26:	e665      	b.n	80019f4 <__aeabi_dsub+0x174>
 8001d28:	2f00      	cmp	r7, #0
 8001d2a:	d018      	beq.n	8001d5e <__aeabi_dsub+0x4de>
 8001d2c:	08c0      	lsrs	r0, r0, #3
 8001d2e:	074e      	lsls	r6, r1, #29
 8001d30:	4306      	orrs	r6, r0
 8001d32:	2080      	movs	r0, #128	; 0x80
 8001d34:	08c9      	lsrs	r1, r1, #3
 8001d36:	0300      	lsls	r0, r0, #12
 8001d38:	4201      	tst	r1, r0
 8001d3a:	d008      	beq.n	8001d4e <__aeabi_dsub+0x4ce>
 8001d3c:	4663      	mov	r3, ip
 8001d3e:	08dc      	lsrs	r4, r3, #3
 8001d40:	4204      	tst	r4, r0
 8001d42:	d104      	bne.n	8001d4e <__aeabi_dsub+0x4ce>
 8001d44:	0021      	movs	r1, r4
 8001d46:	46da      	mov	sl, fp
 8001d48:	08d2      	lsrs	r2, r2, #3
 8001d4a:	075e      	lsls	r6, r3, #29
 8001d4c:	4316      	orrs	r6, r2
 8001d4e:	00f3      	lsls	r3, r6, #3
 8001d50:	4699      	mov	r9, r3
 8001d52:	2401      	movs	r4, #1
 8001d54:	4653      	mov	r3, sl
 8001d56:	00c9      	lsls	r1, r1, #3
 8001d58:	0f72      	lsrs	r2, r6, #29
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	401c      	ands	r4, r3
 8001d5e:	4d6a      	ldr	r5, [pc, #424]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d60:	e6ab      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001d62:	001d      	movs	r5, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	2700      	movs	r7, #0
 8001d68:	e6b4      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d159      	bne.n	8001e22 <__aeabi_dsub+0x5a2>
 8001d6e:	000b      	movs	r3, r1
 8001d70:	4303      	orrs	r3, r0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x4f6>
 8001d74:	e6d6      	b.n	8001b24 <__aeabi_dsub+0x2a4>
 8001d76:	1c73      	adds	r3, r6, #1
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4fc>
 8001d7a:	e0b2      	b.n	8001ee2 <__aeabi_dsub+0x662>
 8001d7c:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <__aeabi_dsub+0x688>)
 8001d7e:	429f      	cmp	r7, r3
 8001d80:	d01e      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001d82:	43f3      	mvns	r3, r6
 8001d84:	2b38      	cmp	r3, #56	; 0x38
 8001d86:	dc6f      	bgt.n	8001e68 <__aeabi_dsub+0x5e8>
 8001d88:	2b1f      	cmp	r3, #31
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dsub+0x50e>
 8001d8c:	e097      	b.n	8001ebe <__aeabi_dsub+0x63e>
 8001d8e:	2520      	movs	r5, #32
 8001d90:	000e      	movs	r6, r1
 8001d92:	1aed      	subs	r5, r5, r3
 8001d94:	40ae      	lsls	r6, r5
 8001d96:	46b0      	mov	r8, r6
 8001d98:	0006      	movs	r6, r0
 8001d9a:	46aa      	mov	sl, r5
 8001d9c:	40de      	lsrs	r6, r3
 8001d9e:	4645      	mov	r5, r8
 8001da0:	4335      	orrs	r5, r6
 8001da2:	002e      	movs	r6, r5
 8001da4:	4655      	mov	r5, sl
 8001da6:	40a8      	lsls	r0, r5
 8001da8:	40d9      	lsrs	r1, r3
 8001daa:	1e45      	subs	r5, r0, #1
 8001dac:	41a8      	sbcs	r0, r5
 8001dae:	448c      	add	ip, r1
 8001db0:	4306      	orrs	r6, r0
 8001db2:	18b6      	adds	r6, r6, r2
 8001db4:	4296      	cmp	r6, r2
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	4251      	negs	r1, r2
 8001dba:	4461      	add	r1, ip
 8001dbc:	003d      	movs	r5, r7
 8001dbe:	e625      	b.n	8001a0c <__aeabi_dsub+0x18c>
 8001dc0:	003d      	movs	r5, r7
 8001dc2:	4661      	mov	r1, ip
 8001dc4:	4691      	mov	r9, r2
 8001dc6:	e678      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dc8:	000b      	movs	r3, r1
 8001dca:	4303      	orrs	r3, r0
 8001dcc:	2d00      	cmp	r5, #0
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x552>
 8001dd0:	e655      	b.n	8001a7e <__aeabi_dsub+0x1fe>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f5      	beq.n	8001dc2 <__aeabi_dsub+0x542>
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x55e>
 8001ddc:	e66d      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dde:	1886      	adds	r6, r0, r2
 8001de0:	4286      	cmp	r6, r0
 8001de2:	4180      	sbcs	r0, r0
 8001de4:	4461      	add	r1, ip
 8001de6:	4240      	negs	r0, r0
 8001de8:	1809      	adds	r1, r1, r0
 8001dea:	2200      	movs	r2, #0
 8001dec:	020b      	lsls	r3, r1, #8
 8001dee:	d400      	bmi.n	8001df2 <__aeabi_dsub+0x572>
 8001df0:	e6d0      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <__aeabi_dsub+0x68c>)
 8001df4:	3501      	adds	r5, #1
 8001df6:	4019      	ands	r1, r3
 8001df8:	e5b2      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001dfa:	46b1      	mov	r9, r6
 8001dfc:	e65d      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001dfe:	0033      	movs	r3, r6
 8001e00:	4667      	mov	r7, ip
 8001e02:	3b20      	subs	r3, #32
 8001e04:	40df      	lsrs	r7, r3
 8001e06:	003b      	movs	r3, r7
 8001e08:	2e20      	cmp	r6, #32
 8001e0a:	d005      	beq.n	8001e18 <__aeabi_dsub+0x598>
 8001e0c:	2740      	movs	r7, #64	; 0x40
 8001e0e:	1bbf      	subs	r7, r7, r6
 8001e10:	4666      	mov	r6, ip
 8001e12:	40be      	lsls	r6, r7
 8001e14:	4332      	orrs	r2, r6
 8001e16:	4690      	mov	r8, r2
 8001e18:	4646      	mov	r6, r8
 8001e1a:	1e72      	subs	r2, r6, #1
 8001e1c:	4196      	sbcs	r6, r2
 8001e1e:	4333      	orrs	r3, r6
 8001e20:	e5ef      	b.n	8001a02 <__aeabi_dsub+0x182>
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <__aeabi_dsub+0x688>)
 8001e24:	429f      	cmp	r7, r3
 8001e26:	d0cb      	beq.n	8001dc0 <__aeabi_dsub+0x540>
 8001e28:	2580      	movs	r5, #128	; 0x80
 8001e2a:	042d      	lsls	r5, r5, #16
 8001e2c:	4273      	negs	r3, r6
 8001e2e:	4329      	orrs	r1, r5
 8001e30:	e7a8      	b.n	8001d84 <__aeabi_dsub+0x504>
 8001e32:	4308      	orrs	r0, r1
 8001e34:	1e41      	subs	r1, r0, #1
 8001e36:	4188      	sbcs	r0, r1
 8001e38:	e6a2      	b.n	8001b80 <__aeabi_dsub+0x300>
 8001e3a:	2f00      	cmp	r7, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x5c0>
 8001e3e:	e63c      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001e40:	4663      	mov	r3, ip
 8001e42:	1a86      	subs	r6, r0, r2
 8001e44:	1acf      	subs	r7, r1, r3
 8001e46:	42b0      	cmp	r0, r6
 8001e48:	419b      	sbcs	r3, r3
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	1afb      	subs	r3, r7, r3
 8001e4e:	4698      	mov	r8, r3
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	d54e      	bpl.n	8001ef2 <__aeabi_dsub+0x672>
 8001e54:	1a16      	subs	r6, r2, r0
 8001e56:	4663      	mov	r3, ip
 8001e58:	42b2      	cmp	r2, r6
 8001e5a:	4192      	sbcs	r2, r2
 8001e5c:	1a59      	subs	r1, r3, r1
 8001e5e:	4252      	negs	r2, r2
 8001e60:	1a89      	subs	r1, r1, r2
 8001e62:	465c      	mov	r4, fp
 8001e64:	2200      	movs	r2, #0
 8001e66:	e57b      	b.n	8001960 <__aeabi_dsub+0xe0>
 8001e68:	4301      	orrs	r1, r0
 8001e6a:	000e      	movs	r6, r1
 8001e6c:	1e71      	subs	r1, r6, #1
 8001e6e:	418e      	sbcs	r6, r1
 8001e70:	e79f      	b.n	8001db2 <__aeabi_dsub+0x532>
 8001e72:	001d      	movs	r5, r3
 8001e74:	000e      	movs	r6, r1
 8001e76:	3d20      	subs	r5, #32
 8001e78:	40ee      	lsrs	r6, r5
 8001e7a:	46b0      	mov	r8, r6
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d004      	beq.n	8001e8a <__aeabi_dsub+0x60a>
 8001e80:	2540      	movs	r5, #64	; 0x40
 8001e82:	1aeb      	subs	r3, r5, r3
 8001e84:	4099      	lsls	r1, r3
 8001e86:	4308      	orrs	r0, r1
 8001e88:	4681      	mov	r9, r0
 8001e8a:	4648      	mov	r0, r9
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	1e41      	subs	r1, r0, #1
 8001e90:	4188      	sbcs	r0, r1
 8001e92:	4318      	orrs	r0, r3
 8001e94:	e674      	b.n	8001b80 <__aeabi_dsub+0x300>
 8001e96:	2200      	movs	r2, #0
 8001e98:	2400      	movs	r4, #0
 8001e9a:	e617      	b.n	8001acc <__aeabi_dsub+0x24c>
 8001e9c:	1a16      	subs	r6, r2, r0
 8001e9e:	4663      	mov	r3, ip
 8001ea0:	42b2      	cmp	r2, r6
 8001ea2:	4192      	sbcs	r2, r2
 8001ea4:	1a59      	subs	r1, r3, r1
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	1a89      	subs	r1, r1, r2
 8001eaa:	003d      	movs	r5, r7
 8001eac:	e525      	b.n	80018fa <__aeabi_dsub+0x7a>
 8001eae:	4661      	mov	r1, ip
 8001eb0:	4691      	mov	r9, r2
 8001eb2:	4d15      	ldr	r5, [pc, #84]	; (8001f08 <__aeabi_dsub+0x688>)
 8001eb4:	e601      	b.n	8001aba <__aeabi_dsub+0x23a>
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	2400      	movs	r4, #0
 8001eba:	0312      	lsls	r2, r2, #12
 8001ebc:	e679      	b.n	8001bb2 <__aeabi_dsub+0x332>
 8001ebe:	001d      	movs	r5, r3
 8001ec0:	000e      	movs	r6, r1
 8001ec2:	3d20      	subs	r5, #32
 8001ec4:	40ee      	lsrs	r6, r5
 8001ec6:	46b0      	mov	r8, r6
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d004      	beq.n	8001ed6 <__aeabi_dsub+0x656>
 8001ecc:	2540      	movs	r5, #64	; 0x40
 8001ece:	1aeb      	subs	r3, r5, r3
 8001ed0:	4099      	lsls	r1, r3
 8001ed2:	4308      	orrs	r0, r1
 8001ed4:	4681      	mov	r9, r0
 8001ed6:	464e      	mov	r6, r9
 8001ed8:	4643      	mov	r3, r8
 8001eda:	1e71      	subs	r1, r6, #1
 8001edc:	418e      	sbcs	r6, r1
 8001ede:	431e      	orrs	r6, r3
 8001ee0:	e767      	b.n	8001db2 <__aeabi_dsub+0x532>
 8001ee2:	1886      	adds	r6, r0, r2
 8001ee4:	4296      	cmp	r6, r2
 8001ee6:	419b      	sbcs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	425b      	negs	r3, r3
 8001eec:	18c9      	adds	r1, r1, r3
 8001eee:	003d      	movs	r5, r7
 8001ef0:	e58c      	b.n	8001a0c <__aeabi_dsub+0x18c>
 8001ef2:	4647      	mov	r7, r8
 8001ef4:	4337      	orrs	r7, r6
 8001ef6:	d0ce      	beq.n	8001e96 <__aeabi_dsub+0x616>
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4641      	mov	r1, r8
 8001efc:	4032      	ands	r2, r6
 8001efe:	e649      	b.n	8001b94 <__aeabi_dsub+0x314>
 8001f00:	2700      	movs	r7, #0
 8001f02:	003a      	movs	r2, r7
 8001f04:	e5e6      	b.n	8001ad4 <__aeabi_dsub+0x254>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	000007ff 	.word	0x000007ff
 8001f0c:	ff7fffff 	.word	0xff7fffff

08001f10 <__aeabi_dcmpun>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0c      	ldr	r6, [pc, #48]	; (8001f44 <__aeabi_dcmpun+0x34>)
 8001f14:	030d      	lsls	r5, r1, #12
 8001f16:	031c      	lsls	r4, r3, #12
 8001f18:	0049      	lsls	r1, r1, #1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	0b2d      	lsrs	r5, r5, #12
 8001f1e:	0d49      	lsrs	r1, r1, #21
 8001f20:	0b24      	lsrs	r4, r4, #12
 8001f22:	0d5b      	lsrs	r3, r3, #21
 8001f24:	42b1      	cmp	r1, r6
 8001f26:	d008      	beq.n	8001f3a <__aeabi_dcmpun+0x2a>
 8001f28:	4906      	ldr	r1, [pc, #24]	; (8001f44 <__aeabi_dcmpun+0x34>)
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d103      	bne.n	8001f38 <__aeabi_dcmpun+0x28>
 8001f30:	4314      	orrs	r4, r2
 8001f32:	0020      	movs	r0, r4
 8001f34:	1e44      	subs	r4, r0, #1
 8001f36:	41a0      	sbcs	r0, r4
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
 8001f3a:	4305      	orrs	r5, r0
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	d1fa      	bne.n	8001f38 <__aeabi_dcmpun+0x28>
 8001f42:	e7f1      	b.n	8001f28 <__aeabi_dcmpun+0x18>
 8001f44:	000007ff 	.word	0x000007ff

08001f48 <__aeabi_d2iz>:
 8001f48:	b530      	push	{r4, r5, lr}
 8001f4a:	4d14      	ldr	r5, [pc, #80]	; (8001f9c <__aeabi_d2iz+0x54>)
 8001f4c:	030a      	lsls	r2, r1, #12
 8001f4e:	004b      	lsls	r3, r1, #1
 8001f50:	0b12      	lsrs	r2, r2, #12
 8001f52:	0d5b      	lsrs	r3, r3, #21
 8001f54:	0fc9      	lsrs	r1, r1, #31
 8001f56:	2400      	movs	r4, #0
 8001f58:	42ab      	cmp	r3, r5
 8001f5a:	dd11      	ble.n	8001f80 <__aeabi_d2iz+0x38>
 8001f5c:	4c10      	ldr	r4, [pc, #64]	; (8001fa0 <__aeabi_d2iz+0x58>)
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	dc10      	bgt.n	8001f84 <__aeabi_d2iz+0x3c>
 8001f62:	2480      	movs	r4, #128	; 0x80
 8001f64:	0364      	lsls	r4, r4, #13
 8001f66:	4322      	orrs	r2, r4
 8001f68:	4c0e      	ldr	r4, [pc, #56]	; (8001fa4 <__aeabi_d2iz+0x5c>)
 8001f6a:	1ae4      	subs	r4, r4, r3
 8001f6c:	2c1f      	cmp	r4, #31
 8001f6e:	dd0c      	ble.n	8001f8a <__aeabi_d2iz+0x42>
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <__aeabi_d2iz+0x60>)
 8001f72:	1ac3      	subs	r3, r0, r3
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	0013      	movs	r3, r2
 8001f78:	425c      	negs	r4, r3
 8001f7a:	2900      	cmp	r1, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_d2iz+0x38>
 8001f7e:	001c      	movs	r4, r3
 8001f80:	0020      	movs	r0, r4
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <__aeabi_d2iz+0x64>)
 8001f86:	18cc      	adds	r4, r1, r3
 8001f88:	e7fa      	b.n	8001f80 <__aeabi_d2iz+0x38>
 8001f8a:	4d09      	ldr	r5, [pc, #36]	; (8001fb0 <__aeabi_d2iz+0x68>)
 8001f8c:	40e0      	lsrs	r0, r4
 8001f8e:	46ac      	mov	ip, r5
 8001f90:	4463      	add	r3, ip
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	4303      	orrs	r3, r0
 8001f98:	e7ee      	b.n	8001f78 <__aeabi_d2iz+0x30>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	000003fe 	.word	0x000003fe
 8001fa0:	0000041d 	.word	0x0000041d
 8001fa4:	00000433 	.word	0x00000433
 8001fa8:	00000413 	.word	0x00000413
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	fffffbed 	.word	0xfffffbed

08001fb4 <__aeabi_i2d>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d02d      	beq.n	8002016 <__aeabi_i2d+0x62>
 8001fba:	17c3      	asrs	r3, r0, #31
 8001fbc:	18c5      	adds	r5, r0, r3
 8001fbe:	405d      	eors	r5, r3
 8001fc0:	0fc4      	lsrs	r4, r0, #31
 8001fc2:	0028      	movs	r0, r5
 8001fc4:	f000 f938 	bl	8002238 <__clzsi2>
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <__aeabi_i2d+0x6c>)
 8001fca:	1a1b      	subs	r3, r3, r0
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	0d5b      	lsrs	r3, r3, #21
 8001fd0:	280a      	cmp	r0, #10
 8001fd2:	dd15      	ble.n	8002000 <__aeabi_i2d+0x4c>
 8001fd4:	380b      	subs	r0, #11
 8001fd6:	4085      	lsls	r5, r0
 8001fd8:	2200      	movs	r2, #0
 8001fda:	032d      	lsls	r5, r5, #12
 8001fdc:	0b2d      	lsrs	r5, r5, #12
 8001fde:	2100      	movs	r1, #0
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	032d      	lsls	r5, r5, #12
 8001fe4:	0d0a      	lsrs	r2, r1, #20
 8001fe6:	0b2d      	lsrs	r5, r5, #12
 8001fe8:	0512      	lsls	r2, r2, #20
 8001fea:	432a      	orrs	r2, r5
 8001fec:	4d0d      	ldr	r5, [pc, #52]	; (8002024 <__aeabi_i2d+0x70>)
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	402a      	ands	r2, r5
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	07e4      	lsls	r4, r4, #31
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	0002      	movs	r2, r0
 8002002:	0029      	movs	r1, r5
 8002004:	3215      	adds	r2, #21
 8002006:	4091      	lsls	r1, r2
 8002008:	000a      	movs	r2, r1
 800200a:	210b      	movs	r1, #11
 800200c:	1a08      	subs	r0, r1, r0
 800200e:	40c5      	lsrs	r5, r0
 8002010:	032d      	lsls	r5, r5, #12
 8002012:	0b2d      	lsrs	r5, r5, #12
 8002014:	e7e3      	b.n	8001fde <__aeabi_i2d+0x2a>
 8002016:	2400      	movs	r4, #0
 8002018:	2300      	movs	r3, #0
 800201a:	2500      	movs	r5, #0
 800201c:	2200      	movs	r2, #0
 800201e:	e7de      	b.n	8001fde <__aeabi_i2d+0x2a>
 8002020:	0000041e 	.word	0x0000041e
 8002024:	800fffff 	.word	0x800fffff

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d025      	beq.n	800207a <__aeabi_ui2d+0x52>
 800202e:	f000 f903 	bl	8002238 <__clzsi2>
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <__aeabi_ui2d+0x5c>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	280a      	cmp	r0, #10
 800203c:	dd12      	ble.n	8002064 <__aeabi_ui2d+0x3c>
 800203e:	380b      	subs	r0, #11
 8002040:	4084      	lsls	r4, r0
 8002042:	2200      	movs	r2, #0
 8002044:	0324      	lsls	r4, r4, #12
 8002046:	0b24      	lsrs	r4, r4, #12
 8002048:	2100      	movs	r1, #0
 800204a:	0010      	movs	r0, r2
 800204c:	0324      	lsls	r4, r4, #12
 800204e:	0d0a      	lsrs	r2, r1, #20
 8002050:	0b24      	lsrs	r4, r4, #12
 8002052:	0512      	lsls	r2, r2, #20
 8002054:	4322      	orrs	r2, r4
 8002056:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <__aeabi_ui2d+0x60>)
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	4022      	ands	r2, r4
 800205c:	4313      	orrs	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	0859      	lsrs	r1, r3, #1
 8002062:	bd10      	pop	{r4, pc}
 8002064:	0002      	movs	r2, r0
 8002066:	0021      	movs	r1, r4
 8002068:	3215      	adds	r2, #21
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	210b      	movs	r1, #11
 8002070:	1a08      	subs	r0, r1, r0
 8002072:	40c4      	lsrs	r4, r0
 8002074:	0324      	lsls	r4, r4, #12
 8002076:	0b24      	lsrs	r4, r4, #12
 8002078:	e7e6      	b.n	8002048 <__aeabi_ui2d+0x20>
 800207a:	2300      	movs	r3, #0
 800207c:	2400      	movs	r4, #0
 800207e:	2200      	movs	r2, #0
 8002080:	e7e2      	b.n	8002048 <__aeabi_ui2d+0x20>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	0000041e 	.word	0x0000041e
 8002088:	800fffff 	.word	0x800fffff

0800208c <__aeabi_f2d>:
 800208c:	0041      	lsls	r1, r0, #1
 800208e:	0e09      	lsrs	r1, r1, #24
 8002090:	1c4b      	adds	r3, r1, #1
 8002092:	b570      	push	{r4, r5, r6, lr}
 8002094:	b2db      	uxtb	r3, r3
 8002096:	0246      	lsls	r6, r0, #9
 8002098:	0a75      	lsrs	r5, r6, #9
 800209a:	0fc4      	lsrs	r4, r0, #31
 800209c:	2b01      	cmp	r3, #1
 800209e:	dd14      	ble.n	80020ca <__aeabi_f2d+0x3e>
 80020a0:	23e0      	movs	r3, #224	; 0xe0
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	076d      	lsls	r5, r5, #29
 80020a6:	0b36      	lsrs	r6, r6, #12
 80020a8:	18cb      	adds	r3, r1, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	0d0a      	lsrs	r2, r1, #20
 80020ae:	0028      	movs	r0, r5
 80020b0:	0512      	lsls	r2, r2, #20
 80020b2:	4d1c      	ldr	r5, [pc, #112]	; (8002124 <__aeabi_f2d+0x98>)
 80020b4:	4332      	orrs	r2, r6
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	402a      	ands	r2, r5
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	4313      	orrs	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	07e4      	lsls	r4, r4, #31
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	4323      	orrs	r3, r4
 80020c6:	0019      	movs	r1, r3
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	2900      	cmp	r1, #0
 80020cc:	d114      	bne.n	80020f8 <__aeabi_f2d+0x6c>
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	d01e      	beq.n	8002110 <__aeabi_f2d+0x84>
 80020d2:	0028      	movs	r0, r5
 80020d4:	f000 f8b0 	bl	8002238 <__clzsi2>
 80020d8:	280a      	cmp	r0, #10
 80020da:	dc1c      	bgt.n	8002116 <__aeabi_f2d+0x8a>
 80020dc:	230b      	movs	r3, #11
 80020de:	002a      	movs	r2, r5
 80020e0:	1a1b      	subs	r3, r3, r0
 80020e2:	40da      	lsrs	r2, r3
 80020e4:	0003      	movs	r3, r0
 80020e6:	3315      	adds	r3, #21
 80020e8:	409d      	lsls	r5, r3
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <__aeabi_f2d+0x9c>)
 80020ec:	0312      	lsls	r2, r2, #12
 80020ee:	1a1b      	subs	r3, r3, r0
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	0b16      	lsrs	r6, r2, #12
 80020f4:	0d5b      	lsrs	r3, r3, #21
 80020f6:	e7d8      	b.n	80020aa <__aeabi_f2d+0x1e>
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	d006      	beq.n	800210a <__aeabi_f2d+0x7e>
 80020fc:	0b32      	lsrs	r2, r6, #12
 80020fe:	2680      	movs	r6, #128	; 0x80
 8002100:	0336      	lsls	r6, r6, #12
 8002102:	076d      	lsls	r5, r5, #29
 8002104:	4316      	orrs	r6, r2
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <__aeabi_f2d+0xa0>)
 8002108:	e7cf      	b.n	80020aa <__aeabi_f2d+0x1e>
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <__aeabi_f2d+0xa0>)
 800210c:	2600      	movs	r6, #0
 800210e:	e7cc      	b.n	80020aa <__aeabi_f2d+0x1e>
 8002110:	2300      	movs	r3, #0
 8002112:	2600      	movs	r6, #0
 8002114:	e7c9      	b.n	80020aa <__aeabi_f2d+0x1e>
 8002116:	0003      	movs	r3, r0
 8002118:	002a      	movs	r2, r5
 800211a:	3b0b      	subs	r3, #11
 800211c:	409a      	lsls	r2, r3
 800211e:	2500      	movs	r5, #0
 8002120:	e7e3      	b.n	80020ea <__aeabi_f2d+0x5e>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	800fffff 	.word	0x800fffff
 8002128:	00000389 	.word	0x00000389
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2f>:
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	004c      	lsls	r4, r1, #1
 8002134:	0d64      	lsrs	r4, r4, #21
 8002136:	030b      	lsls	r3, r1, #12
 8002138:	1c62      	adds	r2, r4, #1
 800213a:	0a5b      	lsrs	r3, r3, #9
 800213c:	0f46      	lsrs	r6, r0, #29
 800213e:	0552      	lsls	r2, r2, #21
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	431e      	orrs	r6, r3
 8002144:	00c5      	lsls	r5, r0, #3
 8002146:	0d52      	lsrs	r2, r2, #21
 8002148:	2a01      	cmp	r2, #1
 800214a:	dd29      	ble.n	80021a0 <__aeabi_d2f+0x70>
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <__aeabi_d2f+0xfc>)
 800214e:	18e7      	adds	r7, r4, r3
 8002150:	2ffe      	cmp	r7, #254	; 0xfe
 8002152:	dc1c      	bgt.n	800218e <__aeabi_d2f+0x5e>
 8002154:	2f00      	cmp	r7, #0
 8002156:	dd3b      	ble.n	80021d0 <__aeabi_d2f+0xa0>
 8002158:	0180      	lsls	r0, r0, #6
 800215a:	1e43      	subs	r3, r0, #1
 800215c:	4198      	sbcs	r0, r3
 800215e:	2207      	movs	r2, #7
 8002160:	00f3      	lsls	r3, r6, #3
 8002162:	0f6d      	lsrs	r5, r5, #29
 8002164:	4303      	orrs	r3, r0
 8002166:	432b      	orrs	r3, r5
 8002168:	401a      	ands	r2, r3
 800216a:	2a00      	cmp	r2, #0
 800216c:	d004      	beq.n	8002178 <__aeabi_d2f+0x48>
 800216e:	220f      	movs	r2, #15
 8002170:	401a      	ands	r2, r3
 8002172:	2a04      	cmp	r2, #4
 8002174:	d000      	beq.n	8002178 <__aeabi_d2f+0x48>
 8002176:	3304      	adds	r3, #4
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	04d2      	lsls	r2, r2, #19
 800217c:	401a      	ands	r2, r3
 800217e:	d024      	beq.n	80021ca <__aeabi_d2f+0x9a>
 8002180:	3701      	adds	r7, #1
 8002182:	b2fa      	uxtb	r2, r7
 8002184:	2fff      	cmp	r7, #255	; 0xff
 8002186:	d002      	beq.n	800218e <__aeabi_d2f+0x5e>
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	0a58      	lsrs	r0, r3, #9
 800218c:	e001      	b.n	8002192 <__aeabi_d2f+0x62>
 800218e:	22ff      	movs	r2, #255	; 0xff
 8002190:	2000      	movs	r0, #0
 8002192:	0240      	lsls	r0, r0, #9
 8002194:	05d2      	lsls	r2, r2, #23
 8002196:	0a40      	lsrs	r0, r0, #9
 8002198:	07c9      	lsls	r1, r1, #31
 800219a:	4310      	orrs	r0, r2
 800219c:	4308      	orrs	r0, r1
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a0:	4335      	orrs	r5, r6
 80021a2:	2c00      	cmp	r4, #0
 80021a4:	d104      	bne.n	80021b0 <__aeabi_d2f+0x80>
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	d10a      	bne.n	80021c0 <__aeabi_d2f+0x90>
 80021aa:	2200      	movs	r2, #0
 80021ac:	2000      	movs	r0, #0
 80021ae:	e7f0      	b.n	8002192 <__aeabi_d2f+0x62>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d0ec      	beq.n	800218e <__aeabi_d2f+0x5e>
 80021b4:	2080      	movs	r0, #128	; 0x80
 80021b6:	03c0      	lsls	r0, r0, #15
 80021b8:	4330      	orrs	r0, r6
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	e7e9      	b.n	8002192 <__aeabi_d2f+0x62>
 80021be:	2400      	movs	r4, #0
 80021c0:	2300      	movs	r3, #0
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	0a58      	lsrs	r0, r3, #9
 80021c6:	b2e2      	uxtb	r2, r4
 80021c8:	e7e3      	b.n	8002192 <__aeabi_d2f+0x62>
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	003c      	movs	r4, r7
 80021ce:	e7f8      	b.n	80021c2 <__aeabi_d2f+0x92>
 80021d0:	003b      	movs	r3, r7
 80021d2:	3317      	adds	r3, #23
 80021d4:	dbf3      	blt.n	80021be <__aeabi_d2f+0x8e>
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4333      	orrs	r3, r6
 80021dc:	261e      	movs	r6, #30
 80021de:	1bf6      	subs	r6, r6, r7
 80021e0:	2e1f      	cmp	r6, #31
 80021e2:	dd14      	ble.n	800220e <__aeabi_d2f+0xde>
 80021e4:	2202      	movs	r2, #2
 80021e6:	4252      	negs	r2, r2
 80021e8:	1bd7      	subs	r7, r2, r7
 80021ea:	001a      	movs	r2, r3
 80021ec:	40fa      	lsrs	r2, r7
 80021ee:	0017      	movs	r7, r2
 80021f0:	2e20      	cmp	r6, #32
 80021f2:	d004      	beq.n	80021fe <__aeabi_d2f+0xce>
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <__aeabi_d2f+0x100>)
 80021f6:	4694      	mov	ip, r2
 80021f8:	4464      	add	r4, ip
 80021fa:	40a3      	lsls	r3, r4
 80021fc:	431d      	orrs	r5, r3
 80021fe:	002b      	movs	r3, r5
 8002200:	1e5d      	subs	r5, r3, #1
 8002202:	41ab      	sbcs	r3, r5
 8002204:	2207      	movs	r2, #7
 8002206:	433b      	orrs	r3, r7
 8002208:	401a      	ands	r2, r3
 800220a:	2700      	movs	r7, #0
 800220c:	e7ad      	b.n	800216a <__aeabi_d2f+0x3a>
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <__aeabi_d2f+0x104>)
 8002210:	0028      	movs	r0, r5
 8002212:	18a2      	adds	r2, r4, r2
 8002214:	4095      	lsls	r5, r2
 8002216:	4093      	lsls	r3, r2
 8002218:	1e6c      	subs	r4, r5, #1
 800221a:	41a5      	sbcs	r5, r4
 800221c:	40f0      	lsrs	r0, r6
 800221e:	2207      	movs	r2, #7
 8002220:	432b      	orrs	r3, r5
 8002222:	4303      	orrs	r3, r0
 8002224:	401a      	ands	r2, r3
 8002226:	2700      	movs	r7, #0
 8002228:	e79f      	b.n	800216a <__aeabi_d2f+0x3a>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	fffffc80 	.word	0xfffffc80
 8002230:	fffffca2 	.word	0xfffffca2
 8002234:	fffffc82 	.word	0xfffffc82

08002238 <__clzsi2>:
 8002238:	211c      	movs	r1, #28
 800223a:	2301      	movs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0xe>
 8002242:	0c00      	lsrs	r0, r0, #16
 8002244:	3910      	subs	r1, #16
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	4298      	cmp	r0, r3
 800224a:	d301      	bcc.n	8002250 <__clzsi2+0x18>
 800224c:	0a00      	lsrs	r0, r0, #8
 800224e:	3908      	subs	r1, #8
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0x22>
 8002256:	0900      	lsrs	r0, r0, #4
 8002258:	3904      	subs	r1, #4
 800225a:	a202      	add	r2, pc, #8	; (adr r2, 8002264 <__clzsi2+0x2c>)
 800225c:	5c10      	ldrb	r0, [r2, r0]
 800225e:	1840      	adds	r0, r0, r1
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	02020304 	.word	0x02020304
 8002268:	01010101 	.word	0x01010101
	...

08002274 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	0018      	movs	r0, r3
 800227e:	230c      	movs	r3, #12
 8002280:	001a      	movs	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	f005 ff2f 	bl	80080e6 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <MX_ADC_Init+0xb0>)
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <MX_ADC_Init+0xb4>)
 800228c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <MX_ADC_Init+0xb0>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <MX_ADC_Init+0xb0>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <MX_ADC_Init+0xb0>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_ADC_Init+0xb0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_ADC_Init+0xb0>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <MX_ADC_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <MX_ADC_Init+0xb0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_ADC_Init+0xb0>)
 80022c6:	22c2      	movs	r2, #194	; 0xc2
 80022c8:	32ff      	adds	r2, #255	; 0xff
 80022ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_ADC_Init+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_ADC_Init+0xb0>)
 80022d4:	2224      	movs	r2, #36	; 0x24
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_ADC_Init+0xb0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_ADC_Init+0xb0>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fd04 	bl	8002cf0 <HAL_ADC_Init>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80022ec:	f000 fa9b 	bl	8002826 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	0152      	lsls	r2, r2, #5
 80022fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002306:	1d3a      	adds	r2, r7, #4
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_ADC_Init+0xb0>)
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f000 ff21 	bl	8003154 <HAL_ADC_ConfigChannel>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002316:	f000 fa86 	bl	8002826 <Error_Handler>
  }

}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	20000608 	.word	0x20000608
 8002328:	40012400 	.word	0x40012400

0800232c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	2314      	movs	r3, #20
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	0018      	movs	r0, r3
 800233a:	2314      	movs	r3, #20
 800233c:	001a      	movs	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f005 fed1 	bl	80080e6 <memset>
  if(adcHandle->Instance==ADC1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_ADC_MspInit+0x84>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0089      	lsls	r1, r1, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0289      	lsls	r1, r1, #10
 8002374:	430a      	orrs	r2, r1
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_ADC_MspInit+0x88>)
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002386:	2114      	movs	r1, #20
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2203      	movs	r2, #3
 8002392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	187a      	adds	r2, r7, r1
 800239c:	2390      	movs	r3, #144	; 0x90
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 f9dc 	bl	8003760 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b00a      	add	sp, #40	; 0x28
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012400 	.word	0x40012400
 80023b4:	40021000 	.word	0x40021000

080023b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <vApplicationGetIdleTaskMemory+0x28>)
 80023c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80023ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b004      	add	sp, #16
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000208 	.word	0x20000208
 80023e4:	200002bc 	.word	0x200002bc

080023e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b09a      	sub	sp, #104	; 0x68
 80023ec:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreStaticDef(myBinarySem01, &myBinarySem01ControlBlock);
 80023ee:	2160      	movs	r1, #96	; 0x60
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <MX_FREERTOS_Init+0xb0>)
 80023fa:	605a      	str	r2, [r3, #4]
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2101      	movs	r1, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f002 fb56 	bl	8004ab2 <osSemaphoreCreate>
 8002406:	0002      	movs	r2, r0
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <MX_FREERTOS_Init+0xb4>)
 800240a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreStaticDef(myBinarySem02, &myBinarySem02ControlBlock);
 800240c:	2158      	movs	r1, #88	; 0x58
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	187b      	adds	r3, r7, r1
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <MX_FREERTOS_Init+0xb8>)
 8002418:	605a      	str	r2, [r3, #4]
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2101      	movs	r1, #1
 800241e:	0018      	movs	r0, r3
 8002420:	f002 fb47 	bl	8004ab2 <osSemaphoreCreate>
 8002424:	0002      	movs	r2, r0
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_FREERTOS_Init+0xbc>)
 8002428:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DisplayTask */
  osThreadStaticDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 512, DisplayTaskBuffer, &DisplayTaskControlBlock);
 800242a:	213c      	movs	r1, #60	; 0x3c
 800242c:	187b      	adds	r3, r7, r1
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <MX_FREERTOS_Init+0xc0>)
 8002430:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002432:	c331      	stmia	r3!, {r0, r4, r5}
 8002434:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002436:	c331      	stmia	r3!, {r0, r4, r5}
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	601a      	str	r2, [r3, #0]
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2100      	movs	r1, #0
 8002440:	0018      	movs	r0, r3
 8002442:	f002 fafc 	bl	8004a3e <osThreadCreate>
 8002446:	0002      	movs	r2, r0
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_FREERTOS_Init+0xc4>)
 800244a:	601a      	str	r2, [r3, #0]

  /* definition and creation of AdcTask */
  osThreadStaticDef(AdcTask, StartAdcTask, osPriorityLow, 0, 512, AdcTaskBuffer, &AdcTaskControlBlock);
 800244c:	2120      	movs	r1, #32
 800244e:	187b      	adds	r3, r7, r1
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <MX_FREERTOS_Init+0xc8>)
 8002452:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002454:	c331      	stmia	r3!, {r0, r4, r5}
 8002456:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002458:	c331      	stmia	r3!, {r0, r4, r5}
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	601a      	str	r2, [r3, #0]
  AdcTaskHandle = osThreadCreate(osThread(AdcTask), NULL);
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2100      	movs	r1, #0
 8002462:	0018      	movs	r0, r3
 8002464:	f002 faeb 	bl	8004a3e <osThreadCreate>
 8002468:	0002      	movs	r2, r0
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_FREERTOS_Init+0xcc>)
 800246c:	601a      	str	r2, [r3, #0]

  /* definition and creation of PenIrqTask */
  osThreadStaticDef(PenIrqTask, StartPenIrqTask, osPriorityHigh, 0, 512, PenIrqTaskBuffer, &PenIrqTaskControlBlock);
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <MX_FREERTOS_Init+0xd0>)
 8002472:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002474:	c313      	stmia	r3!, {r0, r1, r4}
 8002476:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002478:	c313      	stmia	r3!, {r0, r1, r4}
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	601a      	str	r2, [r3, #0]
  PenIrqTaskHandle = osThreadCreate(osThread(PenIrqTask), NULL);
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2100      	movs	r1, #0
 8002482:	0018      	movs	r0, r3
 8002484:	f002 fadb 	bl	8004a3e <osThreadCreate>
 8002488:	0002      	movs	r2, r0
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_FREERTOS_Init+0xd4>)
 800248c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b01a      	add	sp, #104	; 0x68
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	200018c0 	.word	0x200018c0
 800249c:	200018b8 	.word	0x200018b8
 80024a0:	200017bc 	.word	0x200017bc
 80024a4:	20000e50 	.word	0x20000e50
 80024a8:	0800bd8c 	.word	0x0800bd8c
 80024ac:	200018bc 	.word	0x200018bc
 80024b0:	0800bdb0 	.word	0x0800bdb0
 80024b4:	20000e4c 	.word	0x20000e4c
 80024b8:	0800bdd8 	.word	0x0800bdd8
 80024bc:	20000648 	.word	0x20000648

080024c0 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */

	UserDisplayManager();
 80024c8:	f005 fc7c 	bl	8007dc4 <UserDisplayManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f002 fadc 	bl	8004a8a <osDelay>
 80024d2:	e7fb      	b.n	80024cc <StartDisplayTask+0xc>

080024d4 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const * argument)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
	UserAdcManager();
 80024dc:	f005 fc88 	bl	8007df0 <UserAdcManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f002 fad2 	bl	8004a8a <osDelay>
 80024e6:	e7fb      	b.n	80024e0 <StartAdcTask+0xc>

080024e8 <StartPenIrqTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPenIrqTask */
void StartPenIrqTask(void const * argument)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPenIrqTask */
	UserPenIrqManager();
 80024f0:	f005 fc52 	bl	8007d98 <UserPenIrqManager>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f002 fac8 	bl	8004a8a <osDelay>
 80024fa:	e7fb      	b.n	80024f4 <StartPenIrqTask+0xc>

080024fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	240c      	movs	r4, #12
 8002504:	193b      	adds	r3, r7, r4
 8002506:	0018      	movs	r0, r3
 8002508:	2314      	movs	r3, #20
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f005 fdea 	bl	80080e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <MX_GPIO_Init+0x134>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <MX_GPIO_Init+0x134>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0289      	lsls	r1, r1, #10
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	4b43      	ldr	r3, [pc, #268]	; (8002630 <MX_GPIO_Init+0x134>)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	4b40      	ldr	r3, [pc, #256]	; (8002630 <MX_GPIO_Init+0x134>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <MX_GPIO_Init+0x134>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0309      	lsls	r1, r1, #12
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <MX_GPIO_Init+0x134>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	031b      	lsls	r3, r3, #12
 8002544:	4013      	ands	r3, r2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <MX_GPIO_Init+0x134>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <MX_GPIO_Init+0x134>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	02c9      	lsls	r1, r1, #11
 8002554:	430a      	orrs	r2, r1
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <MX_GPIO_Init+0x134>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4013      	ands	r3, r2
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <MX_GPIO_Init+0x138>)
 8002568:	2200      	movs	r2, #0
 800256a:	2130      	movs	r1, #48	; 0x30
 800256c:	0018      	movs	r0, r3
 800256e:	f001 fa8c 	bl	8003a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 8002572:	4931      	ldr	r1, [pc, #196]	; (8002638 <MX_GPIO_Init+0x13c>)
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <MX_GPIO_Init+0x140>)
 8002576:	2200      	movs	r2, #0
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fa86 	bl	8003a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 800257e:	0021      	movs	r1, r4
 8002580:	187b      	adds	r3, r7, r1
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2201      	movs	r2, #1
 800258a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2203      	movs	r2, #3
 8002596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002598:	000c      	movs	r4, r1
 800259a:	187b      	adds	r3, r7, r1
 800259c:	4a25      	ldr	r2, [pc, #148]	; (8002634 <MX_GPIO_Init+0x138>)
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f001 f8dd 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 80025a6:	0021      	movs	r1, r4
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <MX_GPIO_Init+0x144>)
 80025ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	2201      	movs	r2, #1
 80025b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2203      	movs	r2, #3
 80025be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	000c      	movs	r4, r1
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <MX_GPIO_Init+0x140>)
 80025c6:	0019      	movs	r1, r3
 80025c8:	0010      	movs	r0, r2
 80025ca:	f001 f8c9 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 80025ce:	0021      	movs	r1, r4
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <MX_GPIO_Init+0x148>)
 80025da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2201      	movs	r2, #1
 80025e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80025e2:	000c      	movs	r4, r1
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_GPIO_Init+0x138>)
 80025e8:	0019      	movs	r1, r3
 80025ea:	0010      	movs	r0, r2
 80025ec:	f001 f8b8 	bl	8003760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 80025f0:	0021      	movs	r1, r4
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	2208      	movs	r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2201      	movs	r2, #1
 80025fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2202      	movs	r2, #2
 8002602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 800260a:	187b      	adds	r3, r7, r1
 800260c:	4a0b      	ldr	r2, [pc, #44]	; (800263c <MX_GPIO_Init+0x140>)
 800260e:	0019      	movs	r1, r3
 8002610:	0010      	movs	r0, r2
 8002612:	f001 f8a5 	bl	8003760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2007      	movs	r0, #7
 800261c:	f001 f86e 	bl	80036fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002620:	2007      	movs	r0, #7
 8002622:	f001 f880 	bl	8003726 <HAL_NVIC_EnableIRQ>

}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b009      	add	sp, #36	; 0x24
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40021000 	.word	0x40021000
 8002634:	48000800 	.word	0x48000800
 8002638:	00001009 	.word	0x00001009
 800263c:	48000400 	.word	0x48000400
 8002640:	00001001 	.word	0x00001001
 8002644:	10210000 	.word	0x10210000

08002648 <_sbrk_r>:

// Use of vTaskSuspendAll() in _sbrk_r() is normally redundant, as newlib malloc family routines call
// __malloc_lock before calling _sbrk_r(). Note vTaskSuspendAll/xTaskResumeAll support nesting.

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <_sbrk_r+0x9c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <_sbrk_r+0x2e>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <_sbrk_r+0xa0>)
 800265c:	4923      	ldr	r1, [pc, #140]	; (80026ec <_sbrk_r+0xa4>)
 800265e:	185a      	adds	r2, r3, r1
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <_sbrk_r+0xa8>)
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <_sbrk_r+0xac>)
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <_sbrk_r+0xa0>)
 800266a:	185a      	adds	r2, r3, r1
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <_sbrk_r+0xa8>)
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	001a      	movs	r2, r3
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <_sbrk_r+0x9c>)
 8002674:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002676:	f003 fe13 	bl	80062a0 <xTaskGetSchedulerState>
 800267a:	0003      	movs	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <_sbrk_r+0x3c>
 8002680:	466b      	mov	r3, sp
 8002682:	e000      	b.n	8002686 <_sbrk_r+0x3e>
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <_sbrk_r+0xb0>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002686:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8002688:	f003 fac8 	bl	8005c1c <vTaskSuspendAll>
    if (currentHeapEnd + incr > limit) {
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <_sbrk_r+0xb4>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	429a      	cmp	r2, r3
 8002698:	d207      	bcs.n	80026aa <_sbrk_r+0x62>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	220c      	movs	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 80026a0:	f003 fac8 	bl	8005c34 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80026a4:	2301      	movs	r3, #1
 80026a6:	425b      	negs	r3, r3
 80026a8:	e017      	b.n	80026da <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    char *previousHeapEnd = currentHeapEnd;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <_sbrk_r+0xb4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]
    currentHeapEnd += incr;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <_sbrk_r+0xb4>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	18d2      	adds	r2, r2, r3
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk_r+0xb4>)
 80026ba:	601a      	str	r2, [r3, #0]
    heapBytesRemaining -= incr;
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <_sbrk_r+0xac>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <_sbrk_r+0xac>)
 80026c6:	601a      	str	r2, [r3, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <_sbrk_r+0xb8>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	18d2      	adds	r2, r2, r3
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <_sbrk_r+0xb8>)
 80026d2:	601a      	str	r2, [r3, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 80026d4:	f003 faae 	bl	8005c34 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 80026d8:	68bb      	ldr	r3, [r7, #8]
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000210c 	.word	0x2000210c
 80026e8:	20004000 	.word	0x20004000
 80026ec:	fffff000 	.word	0xfffff000
 80026f0:	20002228 	.word	0x20002228
 80026f4:	200004bc 	.word	0x200004bc
 80026f8:	20003000 	.word	0x20003000
 80026fc:	20000000 	.word	0x20000000
 8002700:	200004c0 	.word	0x200004c0

08002704 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)   {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    //bool insideAnISR = xPortIsInsideInterrupt();
    //configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
  vTaskSuspendAll();
 800270c:	f003 fa86 	bl	8005c1c <vTaskSuspendAll>
  #endif
};
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
  (void)xTaskResumeAll();
 8002720:	f003 fa88 	bl	8005c34 <xTaskResumeAll>
  #endif
};
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b002      	add	sp, #8
 800272a:	bd80      	pop	{r7, pc}

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002730:	f000 fa58 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002734:	f000 f826 	bl	8002784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002738:	f7ff fee0 	bl	80024fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800273c:	f000 f878 	bl	8002830 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002740:	f000 f8b4 	bl	80028ac <MX_SPI2_Init>
  MX_TIM17_Init();
 8002744:	f000 f9d4 	bl	8002af0 <MX_TIM17_Init>
  MX_ADC_Init();
 8002748:	f7ff fd94 	bl	8002274 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // init ILI9341 library
  ILI9341_Init();
 800274c:	f004 faab 	bl	8006ca6 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002750:	2001      	movs	r0, #1
 8002752:	f004 ff1d 	bl	8007590 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(LBLUE);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <main+0x50>)
 8002758:	0018      	movs	r0, r3
 800275a:	f004 fcad 	bl	80070b8 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 800275e:	f005 f9af 	bl	8007ac0 <TSC2046_HM_Init>


  HAL_ADCEx_Calibration_Start(&hadc);
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <main+0x54>)
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fe7f 	bl	8003468 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <main+0x54>)
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fbff 	bl	8002f70 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002772:	f7ff fe39 	bl	80023e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002776:	f002 f95a 	bl	8004a2e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800277a:	e7fe      	b.n	800277a <main+0x4e>
 800277c:	00004cf6 	.word	0x00004cf6
 8002780:	20000608 	.word	0x20000608

08002784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b093      	sub	sp, #76	; 0x4c
 8002788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278a:	2414      	movs	r4, #20
 800278c:	193b      	adds	r3, r7, r4
 800278e:	0018      	movs	r0, r3
 8002790:	2334      	movs	r3, #52	; 0x34
 8002792:	001a      	movs	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f005 fca6 	bl	80080e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	0018      	movs	r0, r3
 800279e:	2310      	movs	r3, #16
 80027a0:	001a      	movs	r2, r3
 80027a2:	2100      	movs	r1, #0
 80027a4:	f005 fc9f 	bl	80080e6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80027a8:	0021      	movs	r1, r4
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2212      	movs	r2, #18
 80027ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2201      	movs	r2, #1
 80027b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2201      	movs	r2, #1
 80027ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2210      	movs	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2210      	movs	r2, #16
 80027c6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	2202      	movs	r2, #2
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ce:	187b      	adds	r3, r7, r1
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	0212      	lsls	r2, r2, #8
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0352      	lsls	r2, r2, #13
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	0018      	movs	r0, r3
 80027e8:	f001 f988 	bl	8003afc <HAL_RCC_OscConfig>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80027f0:	f000 f819 	bl	8002826 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2207      	movs	r2, #7
 80027f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2202      	movs	r2, #2
 80027fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2101      	movs	r1, #1
 8002810:	0018      	movs	r0, r3
 8002812:	f001 fcf9 	bl	8004208 <HAL_RCC_ClockConfig>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800281a:	f000 f804 	bl	8002826 <Error_Handler>
  }
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b013      	add	sp, #76	; 0x4c
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002836:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <MX_SPI1_Init+0x78>)
 8002838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_SPI1_Init+0x74>)
 800283c:	2282      	movs	r2, #130	; 0x82
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_SPI1_Init+0x74>)
 800284a:	22e0      	movs	r2, #224	; 0xe0
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_SPI1_Init+0x74>)
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002866:	2208      	movs	r2, #8
 8002868:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_SPI1_Init+0x74>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002878:	2200      	movs	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_SPI1_Init+0x74>)
 800287e:	2207      	movs	r2, #7
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_SPI1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002890:	0018      	movs	r0, r3
 8002892:	f001 fe11 	bl	80044b8 <HAL_SPI_Init>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d001      	beq.n	800289e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800289a:	f7ff ffc4 	bl	8002826 <Error_Handler>
  }

}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20002178 	.word	0x20002178
 80028a8:	40013000 	.word	0x40013000

080028ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <MX_SPI2_Init+0x74>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <MX_SPI2_Init+0x78>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_SPI2_Init+0x74>)
 80028b8:	2282      	movs	r2, #130	; 0x82
 80028ba:	0052      	lsls	r2, r2, #1
 80028bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <MX_SPI2_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_SPI2_Init+0x74>)
 80028c6:	22e0      	movs	r2, #224	; 0xe0
 80028c8:	00d2      	lsls	r2, r2, #3
 80028ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_SPI2_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <MX_SPI2_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_SPI2_Init+0x74>)
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_SPI2_Init+0x74>)
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_SPI2_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_SPI2_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_SPI2_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_SPI2_Init+0x74>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_SPI2_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_SPI2_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <MX_SPI2_Init+0x74>)
 800290c:	0018      	movs	r0, r3
 800290e:	f001 fdd3 	bl	80044b8 <HAL_SPI_Init>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002916:	f7ff ff86 	bl	8002826 <Error_Handler>
  }

}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20002114 	.word	0x20002114
 8002924:	40003800 	.word	0x40003800

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	231c      	movs	r3, #28
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	0018      	movs	r0, r3
 8002936:	2314      	movs	r3, #20
 8002938:	001a      	movs	r2, r3
 800293a:	2100      	movs	r1, #0
 800293c:	f005 fbd3 	bl	80080e6 <memset>
  if(spiHandle->Instance==SPI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <HAL_SPI_MspInit+0x104>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d133      	bne.n	80029b2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0149      	lsls	r1, r1, #5
 8002954:	430a      	orrs	r2, r1
 8002956:	619a      	str	r2, [r3, #24]
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	0289      	lsls	r1, r1, #10
 8002970:	430a      	orrs	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002982:	211c      	movs	r1, #28
 8002984:	187b      	adds	r3, r7, r1
 8002986:	22e0      	movs	r2, #224	; 0xe0
 8002988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2202      	movs	r2, #2
 800298e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2203      	movs	r2, #3
 800299a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	187a      	adds	r2, r7, r1
 80029a4:	2390      	movs	r3, #144	; 0x90
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	0011      	movs	r1, r2
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fed8 	bl	8003760 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029b0:	e037      	b.n	8002a22 <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_SPI_MspInit+0x10c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d132      	bne.n	8002a22 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	01c9      	lsls	r1, r1, #7
 80029c6:	430a      	orrs	r2, r1
 80029c8:	61da      	str	r2, [r3, #28]
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	01db      	lsls	r3, r3, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	02c9      	lsls	r1, r1, #11
 80029e2:	430a      	orrs	r2, r1
 80029e4:	615a      	str	r2, [r3, #20]
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_SPI_MspInit+0x108>)
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	02db      	lsls	r3, r3, #11
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 80029f4:	211c      	movs	r1, #28
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	22e0      	movs	r2, #224	; 0xe0
 80029fa:	0212      	lsls	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2202      	movs	r2, #2
 8002a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_SPI_MspInit+0x110>)
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	f000 fe9f 	bl	8003760 <HAL_GPIO_Init>
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b00c      	add	sp, #48	; 0x30
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40013000 	.word	0x40013000
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40003800 	.word	0x40003800
 8002a38:	48000400 	.word	0x48000400

08002a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_MspInit+0x50>)
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_MspInit+0x50>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	619a      	str	r2, [r3, #24]
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_MspInit+0x50>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_MspInit+0x50>)
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_MspInit+0x50>)
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0549      	lsls	r1, r1, #21
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_MspInit+0x50>)
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	055b      	lsls	r3, r3, #21
 8002a70:	4013      	ands	r3, r2
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002a76:	2302      	movs	r3, #2
 8002a78:	425b      	negs	r3, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 fe3c 	bl	80036fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa4:	f000 f8e6 	bl	8002c74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002aa8:	f003 fbfa 	bl	80062a0 <xTaskGetSchedulerState>
 8002aac:	0003      	movs	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d001      	beq.n	8002ab6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ab2:	f003 fea9 	bl	8006808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ac0:	2040      	movs	r0, #64	; 0x40
 8002ac2:	f000 ffff 	bl	8003ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
//	TSC2046_IM_HardwareManagerLoopHandler();
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <TIM17_IRQHandler+0x14>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f001 fdb6 	bl	8004644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200021dc 	.word	0x200021dc

08002ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <MX_TIM17_Init+0x4c>)
 8002af8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	00d2      	lsls	r2, r2, #3
 8002b0c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_TIM17_Init+0x48>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 fd62 	bl	80045ec <HAL_TIM_Base_Init>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002b2c:	f7ff fe7b 	bl	8002826 <Error_Handler>
  }

}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	200021dc 	.word	0x200021dc
 8002b3c:	40014800 	.word	0x40014800

08002b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <HAL_TIM_Base_MspInit+0x48>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d115      	bne.n	8002b7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_TIM_Base_MspInit+0x4c>)
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_TIM_Base_MspInit+0x4c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	02c9      	lsls	r1, r1, #11
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_TIM_Base_MspInit+0x4c>)
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	02db      	lsls	r3, r3, #11
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2016      	movs	r0, #22
 8002b74:	f000 fdc2 	bl	80036fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002b78:	2016      	movs	r0, #22
 8002b7a:	f000 fdd4 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40014800 	.word	0x40014800
 8002b8c:	40021000 	.word	0x40021000

08002b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8002b96:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <LoopForever+0xe>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bac:	4c0b      	ldr	r4, [pc, #44]	; (8002bdc <LoopForever+0x16>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bba:	f7ff ff93 	bl	8002ae4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bbe:	f005 fa5b 	bl	8008078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc2:	f7ff fdb3 	bl	800272c <main>

08002bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bc6:	e7fe      	b.n	8002bc6 <LoopForever>
  ldr   r0, =_estack
 8002bc8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002bd4:	0800c448 	.word	0x0800c448
  ldr r2, =_sbss
 8002bd8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002bdc:	20002224 	.word	0x20002224

08002be0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC1_COMP_IRQHandler>
	...

08002be4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_Init+0x24>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_Init+0x24>)
 8002bee:	2110      	movs	r1, #16
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f000 f809 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfa:	f7ff ff1f 	bl	8002a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_InitTick+0x5c>)
 8002c16:	681c      	ldr	r4, [r3, #0]
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_InitTick+0x60>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	23fa      	movs	r3, #250	; 0xfa
 8002c20:	0098      	lsls	r0, r3, #2
 8002c22:	f7fd fa83 	bl	800012c <__udivsi3>
 8002c26:	0003      	movs	r3, r0
 8002c28:	0019      	movs	r1, r3
 8002c2a:	0020      	movs	r0, r4
 8002c2c:	f7fd fa7e 	bl	800012c <__udivsi3>
 8002c30:	0003      	movs	r3, r0
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 fd87 	bl	8003746 <HAL_SYSTICK_Config>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00f      	b.n	8002c60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d80b      	bhi.n	8002c5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fd54 	bl	80036fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_InitTick+0x64>)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b003      	add	sp, #12
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	20000008 	.word	0x20000008

08002c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_IncTick+0x1c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_IncTick+0x20>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	18d2      	adds	r2, r2, r3
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_IncTick+0x20>)
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	2000000c 	.word	0x2000000c
 8002c94:	2000221c 	.word	0x2000221c

08002c98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <HAL_GetTick+0x10>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	2000221c 	.word	0x2000221c

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_Delay+0x40>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	001a      	movs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	f7ff ffe0 	bl	8002c98 <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000000c 	.word	0x2000000c

08002cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e125      	b.n	8002f5a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2234      	movs	r2, #52	; 0x34
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fb00 	bl	800232c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_Init+0x48>
 8002d36:	e103      	b.n	8002f40 <HAL_ADC_Init+0x250>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_Init+0x54>
 8002d42:	e0fd      	b.n	8002f40 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d4e:	d000      	beq.n	8002d52 <HAL_ADC_Init+0x62>
 8002d50:	e0f6      	b.n	8002f40 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4a83      	ldr	r2, [pc, #524]	; (8002f64 <HAL_ADC_Init+0x274>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d112      	bne.n	8002d96 <HAL_ADC_Init+0xa6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d009      	beq.n	8002d92 <HAL_ADC_Init+0xa2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	401a      	ands	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_Init+0xa6>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_ADC_Init+0xa8>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2218      	movs	r2, #24
 8002da4:	4393      	bics	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	0899      	lsrs	r1, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4964      	ldr	r1, [pc, #400]	; (8002f68 <HAL_ADC_Init+0x278>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e1b      	ldrb	r3, [r3, #24]
 8002dde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e5b      	ldrb	r3, [r3, #25]
 8002de4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002de6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7e9b      	ldrb	r3, [r3, #26]
 8002dec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_Init+0x10e>
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	015b      	lsls	r3, r3, #5
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_Init+0x110>
 8002dfe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e00:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e06:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_Init+0x124>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_Init+0x126>
 8002e14:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002e16:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2124      	movs	r1, #36	; 0x24
 8002e1c:	5c5b      	ldrb	r3, [r3, r1]
 8002e1e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e20:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7edb      	ldrb	r3, [r3, #27]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d115      	bne.n	8002e5c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7e9b      	ldrb	r3, [r3, #26]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	0252      	lsls	r2, r2, #9
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	e00b      	b.n	8002e5c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	2220      	movs	r2, #32
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2201      	movs	r2, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	23c2      	movs	r3, #194	; 0xc2
 8002e62:	33ff      	adds	r3, #255	; 0xff
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	055b      	lsls	r3, r3, #21
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d01b      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d017      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d013      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d00f      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00b      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d007      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d003      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b07      	cmp	r3, #7
 8002eca:	d112      	bne.n	8002ef2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2107      	movs	r1, #7
 8002ed8:	438a      	bics	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6959      	ldr	r1, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_ADC_Init+0x27c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10b      	bne.n	8002f1a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4393      	bics	r3, r2
 8002f10:	2201      	movs	r2, #1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f18:	e01c      	b.n	8002f54 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2212      	movs	r2, #18
 8002f20:	4393      	bics	r3, r2
 8002f22:	2210      	movs	r2, #16
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f36:	230f      	movs	r3, #15
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f3e:	e009      	b.n	8002f54 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2210      	movs	r2, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	230f      	movs	r3, #15
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	fffffefd 	.word	0xfffffefd
 8002f68:	fffe0219 	.word	0xfffe0219
 8002f6c:	833fffe7 	.word	0x833fffe7

08002f70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	230f      	movs	r3, #15
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d138      	bne.n	8002ffe <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2234      	movs	r2, #52	; 0x34
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Start+0x2a>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e038      	b.n	800300c <HAL_ADC_Start+0x9c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2234      	movs	r2, #52	; 0x34
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e5b      	ldrb	r3, [r3, #25]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d007      	beq.n	8002fba <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002faa:	230f      	movs	r3, #15
 8002fac:	18fc      	adds	r4, r7, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f9dd 	bl	8003370 <ADC_Enable>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fba:	230f      	movs	r3, #15
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d120      	bne.n	8003006 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_ADC_Start+0xa4>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	0052      	lsls	r2, r2, #1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2234      	movs	r2, #52	; 0x34
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	221c      	movs	r2, #28
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e003      	b.n	8003006 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ffe:	230f      	movs	r3, #15
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003006:	230f      	movs	r3, #15
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b005      	add	sp, #20
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	fffff0fe 	.word	0xfffff0fe

08003018 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b08      	cmp	r3, #8
 8003028:	d102      	bne.n	8003030 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800302a:	2308      	movs	r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e014      	b.n	800305a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	4013      	ands	r3, r2
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10b      	bne.n	8003056 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	2220      	movs	r2, #32
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2234      	movs	r2, #52	; 0x34
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003056:	230c      	movs	r3, #12
 8003058:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800305a:	f7ff fe1d 	bl	8002c98 <HAL_GetTick>
 800305e:	0003      	movs	r3, r0
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003062:	e019      	b.n	8003098 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	d016      	beq.n	8003098 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_ADC_PollForConversion+0x68>
 8003070:	f7ff fe12 	bl	8002c98 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d20b      	bcs.n	8003098 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	2204      	movs	r2, #4
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2234      	movs	r2, #52	; 0x34
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e04a      	b.n	800312e <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	d0df      	beq.n	8003064 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	23c0      	movs	r3, #192	; 0xc0
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d12d      	bne.n	800311c <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d129      	bne.n	800311c <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2208      	movs	r2, #8
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d122      	bne.n	800311c <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2204      	movs	r2, #4
 80030de:	4013      	ands	r3, r2
 80030e0:	d110      	bne.n	8003104 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	210c      	movs	r1, #12
 80030ee:	438a      	bics	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HAL_ADC_PollForConversion+0x120>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	2201      	movs	r2, #1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
 8003102:	e00b      	b.n	800311c <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	2220      	movs	r2, #32
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2201      	movs	r2, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7e1b      	ldrb	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	220c      	movs	r2, #12
 800312a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	fffffefe 	.word	0xfffffefe

0800313c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315e:	230f      	movs	r3, #15
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	055b      	lsls	r3, r3, #21
 8003172:	429a      	cmp	r2, r3
 8003174:	d011      	beq.n	800319a <HAL_ADC_ConfigChannel+0x46>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d00d      	beq.n	800319a <HAL_ADC_ConfigChannel+0x46>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	2b02      	cmp	r3, #2
 8003184:	d009      	beq.n	800319a <HAL_ADC_ConfigChannel+0x46>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	2b03      	cmp	r3, #3
 800318c:	d005      	beq.n	800319a <HAL_ADC_ConfigChannel+0x46>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	2b04      	cmp	r3, #4
 8003194:	d001      	beq.n	800319a <HAL_ADC_ConfigChannel+0x46>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2234      	movs	r2, #52	; 0x34
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x54>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0d0      	b.n	800334a <HAL_ADC_ConfigChannel+0x1f6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2234      	movs	r2, #52	; 0x34
 80031ac:	2101      	movs	r1, #1
 80031ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2204      	movs	r2, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	d000      	beq.n	80031be <HAL_ADC_ConfigChannel+0x6a>
 80031bc:	e0b4      	b.n	8003328 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a64      	ldr	r2, [pc, #400]	; (8003354 <HAL_ADC_ConfigChannel+0x200>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x76>
 80031c8:	e082      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	055b      	lsls	r3, r3, #21
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d037      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d033      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d02f      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	2b03      	cmp	r3, #3
 8003202:	d02b      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b04      	cmp	r3, #4
 800320a:	d027      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2b05      	cmp	r3, #5
 8003212:	d023      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b06      	cmp	r3, #6
 800321a:	d01f      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b07      	cmp	r3, #7
 8003222:	d01b      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2107      	movs	r1, #7
 8003230:	400b      	ands	r3, r1
 8003232:	429a      	cmp	r2, r3
 8003234:	d012      	beq.n	800325c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2107      	movs	r1, #7
 8003242:	438a      	bics	r2, r1
 8003244:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6959      	ldr	r1, [r3, #20]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2207      	movs	r2, #7
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b10      	cmp	r3, #16
 8003262:	d007      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x120>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b11      	cmp	r3, #17
 800326a:	d003      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x120>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b12      	cmp	r3, #18
 8003272:	d163      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_ADC_ConfigChannel+0x204>)
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b10      	cmp	r3, #16
 800327e:	d009      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x140>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b11      	cmp	r3, #17
 8003286:	d102      	bne.n	800328e <HAL_ADC_ConfigChannel+0x13a>
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	03db      	lsls	r3, r3, #15
 800328c:	e004      	b.n	8003298 <HAL_ADC_ConfigChannel+0x144>
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	045b      	lsls	r3, r3, #17
 8003292:	e001      	b.n	8003298 <HAL_ADC_ConfigChannel+0x144>
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <HAL_ADC_ConfigChannel+0x204>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d14a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_ADC_ConfigChannel+0x208>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	492d      	ldr	r1, [pc, #180]	; (8003360 <HAL_ADC_ConfigChannel+0x20c>)
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fc ff3d 	bl	800012c <__udivsi3>
 80032b2:	0003      	movs	r3, r0
 80032b4:	001a      	movs	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x16e>
 80032ce:	e035      	b.n	800333c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	4099      	lsls	r1, r3
 80032de:	000b      	movs	r3, r1
 80032e0:	43d9      	mvns	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	400a      	ands	r2, r1
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d007      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x1ae>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d003      	beq.n	8003302 <HAL_ADC_ConfigChannel+0x1ae>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b12      	cmp	r3, #18
 8003300:	d11c      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_ADC_ConfigChannel+0x204>)
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b10      	cmp	r3, #16
 800330c:	d007      	beq.n	800331e <HAL_ADC_ConfigChannel+0x1ca>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b11      	cmp	r3, #17
 8003314:	d101      	bne.n	800331a <HAL_ADC_ConfigChannel+0x1c6>
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_ADC_ConfigChannel+0x210>)
 8003318:	e002      	b.n	8003320 <HAL_ADC_ConfigChannel+0x1cc>
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_ADC_ConfigChannel+0x214>)
 800331c:	e000      	b.n	8003320 <HAL_ADC_ConfigChannel+0x1cc>
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_ADC_ConfigChannel+0x218>)
 8003320:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <HAL_ADC_ConfigChannel+0x204>)
 8003322:	400b      	ands	r3, r1
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e009      	b.n	800333c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2220      	movs	r2, #32
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2234      	movs	r2, #52	; 0x34
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003344:	230f      	movs	r3, #15
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	781b      	ldrb	r3, [r3, #0]
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	00001001 	.word	0x00001001
 8003358:	40012708 	.word	0x40012708
 800335c:	20000004 	.word	0x20000004
 8003360:	000f4240 	.word	0x000f4240
 8003364:	ffbfffff 	.word	0xffbfffff
 8003368:	feffffff 	.word	0xfeffffff
 800336c:	ff7fffff 	.word	0xff7fffff

08003370 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2203      	movs	r2, #3
 8003388:	4013      	ands	r3, r2
 800338a:	2b01      	cmp	r3, #1
 800338c:	d112      	bne.n	80033b4 <ADC_Enable+0x44>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
 8003398:	2b01      	cmp	r3, #1
 800339a:	d009      	beq.n	80033b0 <ADC_Enable+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	401a      	ands	r2, r3
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d101      	bne.n	80033b4 <ADC_Enable+0x44>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <ADC_Enable+0x46>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d14b      	bne.n	8003452 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <ADC_Enable+0xec>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2210      	movs	r2, #16
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2201      	movs	r2, #1
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e038      	b.n	8003454 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <ADC_Enable+0xf0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	491b      	ldr	r1, [pc, #108]	; (8003464 <ADC_Enable+0xf4>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fc fe97 	bl	800012c <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003402:	e002      	b.n	800340a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3b01      	subs	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003410:	f7ff fc42 	bl	8002c98 <HAL_GetTick>
 8003414:	0003      	movs	r3, r0
 8003416:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003418:	e014      	b.n	8003444 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800341a:	f7ff fc3d 	bl	8002c98 <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d90d      	bls.n	8003444 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2210      	movs	r2, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2201      	movs	r2, #1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	2b01      	cmp	r3, #1
 8003450:	d1e3      	bne.n	800341a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b004      	add	sp, #16
 800345a:	bd80      	pop	{r7, pc}
 800345c:	80000017 	.word	0x80000017
 8003460:	20000004 	.word	0x20000004
 8003464:	000f4240 	.word	0x000f4240

08003468 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003470:	2317      	movs	r3, #23
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2234      	movs	r2, #52	; 0x34
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_ADCEx_Calibration_Start+0x26>
 800348a:	2302      	movs	r3, #2
 800348c:	e084      	b.n	8003598 <HAL_ADCEx_Calibration_Start+0x130>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2234      	movs	r2, #52	; 0x34
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d112      	bne.n	80034ca <HAL_ADCEx_Calibration_Start+0x62>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d009      	beq.n	80034c6 <HAL_ADCEx_Calibration_Start+0x5e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	401a      	ands	r2, r3
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d101      	bne.n	80034ca <HAL_ADCEx_Calibration_Start+0x62>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_ADCEx_Calibration_Start+0x64>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d152      	bne.n	8003576 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <HAL_ADCEx_Calibration_Start+0x138>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	2202      	movs	r2, #2
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2103      	movs	r1, #3
 80034f8:	438a      	bics	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	0609      	lsls	r1, r1, #24
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800350e:	f7ff fbc3 	bl	8002c98 <HAL_GetTick>
 8003512:	0003      	movs	r3, r0
 8003514:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003516:	e014      	b.n	8003542 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003518:	f7ff fbbe 	bl	8002c98 <HAL_GetTick>
 800351c:	0002      	movs	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d90d      	bls.n	8003542 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	2212      	movs	r2, #18
 800352c:	4393      	bics	r3, r2
 800352e:	2210      	movs	r2, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2234      	movs	r2, #52	; 0x34
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02a      	b.n	8003598 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	0fdb      	lsrs	r3, r3, #31
 800354a:	07da      	lsls	r2, r3, #31
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	429a      	cmp	r2, r3
 8003552:	d0e1      	beq.n	8003518 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68d9      	ldr	r1, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	2203      	movs	r2, #3
 800356a:	4393      	bics	r3, r2
 800356c:	2201      	movs	r2, #1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
 8003574:	e009      	b.n	800358a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	2220      	movs	r2, #32
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003582:	2317      	movs	r3, #23
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2234      	movs	r2, #52	; 0x34
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003592:	2317      	movs	r3, #23
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b006      	add	sp, #24
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fffffefd 	.word	0xfffffefd

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	0002      	movs	r2, r0
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b7f      	cmp	r3, #127	; 0x7f
 80035b6:	d809      	bhi.n	80035cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	001a      	movs	r2, r3
 80035be:	231f      	movs	r3, #31
 80035c0:	401a      	ands	r2, r3
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_EnableIRQ+0x30>)
 80035c4:	2101      	movs	r1, #1
 80035c6:	4091      	lsls	r1, r2
 80035c8:	000a      	movs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
  }
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000e100 	.word	0xe000e100

080035d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	0002      	movs	r2, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	1dfb      	adds	r3, r7, #7
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b7f      	cmp	r3, #127	; 0x7f
 80035ec:	d828      	bhi.n	8003640 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035ee:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <__NVIC_SetPriority+0xd4>)
 80035f0:	1dfb      	adds	r3, r7, #7
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	33c0      	adds	r3, #192	; 0xc0
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	589b      	ldr	r3, [r3, r2]
 80035fe:	1dfa      	adds	r2, r7, #7
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	0011      	movs	r1, r2
 8003604:	2203      	movs	r2, #3
 8003606:	400a      	ands	r2, r1
 8003608:	00d2      	lsls	r2, r2, #3
 800360a:	21ff      	movs	r1, #255	; 0xff
 800360c:	4091      	lsls	r1, r2
 800360e:	000a      	movs	r2, r1
 8003610:	43d2      	mvns	r2, r2
 8003612:	401a      	ands	r2, r3
 8003614:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	401a      	ands	r2, r3
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	0018      	movs	r0, r3
 8003624:	2303      	movs	r3, #3
 8003626:	4003      	ands	r3, r0
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800362c:	481f      	ldr	r0, [pc, #124]	; (80036ac <__NVIC_SetPriority+0xd4>)
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b25b      	sxtb	r3, r3
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	430a      	orrs	r2, r1
 8003638:	33c0      	adds	r3, #192	; 0xc0
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800363e:	e031      	b.n	80036a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003640:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <__NVIC_SetPriority+0xd8>)
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	0019      	movs	r1, r3
 8003648:	230f      	movs	r3, #15
 800364a:	400b      	ands	r3, r1
 800364c:	3b08      	subs	r3, #8
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3306      	adds	r3, #6
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	3304      	adds	r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1dfa      	adds	r2, r7, #7
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	0011      	movs	r1, r2
 8003660:	2203      	movs	r2, #3
 8003662:	400a      	ands	r2, r1
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	21ff      	movs	r1, #255	; 0xff
 8003668:	4091      	lsls	r1, r2
 800366a:	000a      	movs	r2, r1
 800366c:	43d2      	mvns	r2, r2
 800366e:	401a      	ands	r2, r3
 8003670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	401a      	ands	r2, r3
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	2303      	movs	r3, #3
 8003682:	4003      	ands	r3, r0
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <__NVIC_SetPriority+0xd8>)
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	001c      	movs	r4, r3
 8003690:	230f      	movs	r3, #15
 8003692:	4023      	ands	r3, r4
 8003694:	3b08      	subs	r3, #8
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	430a      	orrs	r2, r1
 800369a:	3306      	adds	r3, #6
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	18c3      	adds	r3, r0, r3
 80036a0:	3304      	adds	r3, #4
 80036a2:	601a      	str	r2, [r3, #0]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b003      	add	sp, #12
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <SysTick_Config+0x40>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e010      	b.n	80036ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <SysTick_Config+0x44>)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	2301      	movs	r3, #1
 80036d4:	425b      	negs	r3, r3
 80036d6:	2103      	movs	r1, #3
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff ff7d 	bl	80035d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <SysTick_Config+0x44>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x44>)
 80036e6:	2207      	movs	r2, #7
 80036e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00ffffff 	.word	0x00ffffff
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	210f      	movs	r1, #15
 8003708:	187b      	adds	r3, r7, r1
 800370a:	1c02      	adds	r2, r0, #0
 800370c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	187b      	adds	r3, r7, r1
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b25b      	sxtb	r3, r3
 8003716:	0011      	movs	r1, r2
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ff5d 	bl	80035d8 <__NVIC_SetPriority>
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b004      	add	sp, #16
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	0002      	movs	r2, r0
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	b25b      	sxtb	r3, r3
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff ff33 	bl	80035a4 <__NVIC_EnableIRQ>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b002      	add	sp, #8
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff ffaf 	bl	80036b4 <SysTick_Config>
 8003756:	0003      	movs	r3, r0
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376e:	e155      	b.n	8003a1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4091      	lsls	r1, r2
 800377a:	000a      	movs	r2, r1
 800377c:	4013      	ands	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d100      	bne.n	8003788 <HAL_GPIO_Init+0x28>
 8003786:	e146      	b.n	8003a16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x38>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b12      	cmp	r3, #18
 8003796:	d123      	bne.n	80037e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	08da      	lsrs	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3208      	adds	r2, #8
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	58d3      	ldr	r3, [r2, r3]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2207      	movs	r2, #7
 80037aa:	4013      	ands	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	220f      	movs	r2, #15
 80037b0:	409a      	lsls	r2, r3
 80037b2:	0013      	movs	r3, r2
 80037b4:	43da      	mvns	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2107      	movs	r1, #7
 80037c4:	400b      	ands	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	409a      	lsls	r2, r3
 80037ca:	0013      	movs	r3, r2
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	6939      	ldr	r1, [r7, #16]
 80037de:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	409a      	lsls	r2, r3
 80037ee:	0013      	movs	r3, r2
 80037f0:	43da      	mvns	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	409a      	lsls	r2, r3
 8003806:	0013      	movs	r3, r2
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00b      	beq.n	8003834 <HAL_GPIO_Init+0xd4>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d007      	beq.n	8003834 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003828:	2b11      	cmp	r3, #17
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b12      	cmp	r3, #18
 8003832:	d130      	bne.n	8003896 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	409a      	lsls	r2, r3
 8003842:	0013      	movs	r3, r2
 8003844:	43da      	mvns	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	0013      	movs	r3, r2
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800386a:	2201      	movs	r2, #1
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
 8003870:	0013      	movs	r3, r2
 8003872:	43da      	mvns	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	2201      	movs	r2, #1
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	409a      	lsls	r2, r3
 8003888:	0013      	movs	r3, r2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	409a      	lsls	r2, r3
 80038a4:	0013      	movs	r3, r2
 80038a6:	43da      	mvns	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	0013      	movs	r3, r2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	055b      	lsls	r3, r3, #21
 80038ce:	4013      	ands	r3, r2
 80038d0:	d100      	bne.n	80038d4 <HAL_GPIO_Init+0x174>
 80038d2:	e0a0      	b.n	8003a16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d4:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_GPIO_Init+0x2d4>)
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <HAL_GPIO_Init+0x2d4>)
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	619a      	str	r2, [r3, #24]
 80038e0:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <HAL_GPIO_Init+0x2d4>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038ec:	4a52      	ldr	r2, [pc, #328]	; (8003a38 <HAL_GPIO_Init+0x2d8>)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	589b      	ldr	r3, [r3, r2]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2203      	movs	r2, #3
 80038fe:	4013      	ands	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	409a      	lsls	r2, r3
 8003906:	0013      	movs	r3, r2
 8003908:	43da      	mvns	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	2390      	movs	r3, #144	; 0x90
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	429a      	cmp	r2, r3
 8003918:	d019      	beq.n	800394e <HAL_GPIO_Init+0x1ee>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a47      	ldr	r2, [pc, #284]	; (8003a3c <HAL_GPIO_Init+0x2dc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0x1ea>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_GPIO_Init+0x2e0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_Init+0x1e6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a45      	ldr	r2, [pc, #276]	; (8003a44 <HAL_GPIO_Init+0x2e4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x1e2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <HAL_GPIO_Init+0x2e8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_Init+0x1de>
 800393a:	2304      	movs	r3, #4
 800393c:	e008      	b.n	8003950 <HAL_GPIO_Init+0x1f0>
 800393e:	2305      	movs	r3, #5
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x1f0>
 8003942:	2303      	movs	r3, #3
 8003944:	e004      	b.n	8003950 <HAL_GPIO_Init+0x1f0>
 8003946:	2302      	movs	r3, #2
 8003948:	e002      	b.n	8003950 <HAL_GPIO_Init+0x1f0>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_GPIO_Init+0x1f0>
 800394e:	2300      	movs	r3, #0
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	2103      	movs	r1, #3
 8003954:	400a      	ands	r2, r1
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	4093      	lsls	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003960:	4935      	ldr	r1, [pc, #212]	; (8003a38 <HAL_GPIO_Init+0x2d8>)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	3302      	adds	r3, #2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43da      	mvns	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	4013      	ands	r3, r2
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003998:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43da      	mvns	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	4013      	ands	r3, r2
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	035b      	lsls	r3, r3, #13
 80039da:	4013      	ands	r3, r2
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	039b      	lsls	r3, r3, #14
 8003a04:	4013      	ands	r3, r2
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_GPIO_Init+0x2ec>)
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	40da      	lsrs	r2, r3
 8003a24:	1e13      	subs	r3, r2, #0
 8003a26:	d000      	beq.n	8003a2a <HAL_GPIO_Init+0x2ca>
 8003a28:	e6a2      	b.n	8003770 <HAL_GPIO_Init+0x10>
  } 
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b006      	add	sp, #24
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	48000400 	.word	0x48000400
 8003a40:	48000800 	.word	0x48000800
 8003a44:	48000c00 	.word	0x48000c00
 8003a48:	48001000 	.word	0x48001000
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	000a      	movs	r2, r1
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	1cba      	adds	r2, r7, #2
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	4013      	ands	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e003      	b.n	8003a7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a74:	230f      	movs	r3, #15
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
  }
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	0008      	movs	r0, r1
 8003a94:	0011      	movs	r1, r2
 8003a96:	1cbb      	adds	r3, r7, #2
 8003a98:	1c02      	adds	r2, r0, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	1c7b      	adds	r3, r7, #1
 8003a9e:	1c0a      	adds	r2, r1, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa2:	1c7b      	adds	r3, r7, #1
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab2:	e003      	b.n	8003abc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ab4:	1cbb      	adds	r3, r7, #2
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	0002      	movs	r2, r0
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	1dba      	adds	r2, r7, #6
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d008      	beq.n	8003aee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003ade:	1dba      	adds	r2, r7, #6
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f004 f99b 	bl	8007e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f000 fb76 	bl	80041fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d100      	bne.n	8003b1c <HAL_RCC_OscConfig+0x20>
 8003b1a:	e08e      	b.n	8003c3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b1c:	4bc5      	ldr	r3, [pc, #788]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	220c      	movs	r2, #12
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00e      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b28:	4bc2      	ldr	r3, [pc, #776]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	220c      	movs	r2, #12
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d117      	bne.n	8003b64 <HAL_RCC_OscConfig+0x68>
 8003b34:	4bbf      	ldr	r3, [pc, #764]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	23c0      	movs	r3, #192	; 0xc0
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d10e      	bne.n	8003b64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4bbb      	ldr	r3, [pc, #748]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d100      	bne.n	8003b54 <HAL_RCC_OscConfig+0x58>
 8003b52:	e071      	b.n	8003c38 <HAL_RCC_OscConfig+0x13c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d000      	beq.n	8003b5e <HAL_RCC_OscConfig+0x62>
 8003b5c:	e06c      	b.n	8003c38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f000 fb4c 	bl	80041fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x80>
 8003b6c:	4bb1      	ldr	r3, [pc, #708]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4bb0      	ldr	r3, [pc, #704]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0249      	lsls	r1, r1, #9
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e02f      	b.n	8003bdc <HAL_RCC_OscConfig+0xe0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_OscConfig+0xa2>
 8003b84:	4bab      	ldr	r3, [pc, #684]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4baa      	ldr	r3, [pc, #680]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b8a:	49ab      	ldr	r1, [pc, #684]	; (8003e38 <HAL_RCC_OscConfig+0x33c>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	4ba8      	ldr	r3, [pc, #672]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4ba7      	ldr	r3, [pc, #668]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003b96:	49a9      	ldr	r1, [pc, #676]	; (8003e3c <HAL_RCC_OscConfig+0x340>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e01e      	b.n	8003bdc <HAL_RCC_OscConfig+0xe0>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xc8>
 8003ba6:	4ba3      	ldr	r3, [pc, #652]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4ba2      	ldr	r3, [pc, #648]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	02c9      	lsls	r1, r1, #11
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	4b9f      	ldr	r3, [pc, #636]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b9e      	ldr	r3, [pc, #632]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0249      	lsls	r1, r1, #9
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xe0>
 8003bc4:	4b9b      	ldr	r3, [pc, #620]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bca:	499b      	ldr	r1, [pc, #620]	; (8003e38 <HAL_RCC_OscConfig+0x33c>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4b98      	ldr	r3, [pc, #608]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b97      	ldr	r3, [pc, #604]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003bd6:	4999      	ldr	r1, [pc, #612]	; (8003e3c <HAL_RCC_OscConfig+0x340>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7ff f858 	bl	8002c98 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bee:	f7ff f853 	bl	8002c98 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e2fd      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c00:	4b8c      	ldr	r3, [pc, #560]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0xf2>
 8003c0c:	e015      	b.n	8003c3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7ff f843 	bl	8002c98 <HAL_GetTick>
 8003c12:	0003      	movs	r3, r0
 8003c14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7ff f83e 	bl	8002c98 <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e2e8      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	4013      	ands	r3, r2
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x11c>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	d100      	bne.n	8003c46 <HAL_RCC_OscConfig+0x14a>
 8003c44:	e06c      	b.n	8003d20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	220c      	movs	r2, #12
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c50:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	220c      	movs	r2, #12
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d11f      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1a0>
 8003c5c:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	23c0      	movs	r3, #192	; 0xc0
 8003c62:	025b      	lsls	r3, r3, #9
 8003c64:	401a      	ands	r2, r3
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d116      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	4b71      	ldr	r3, [pc, #452]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_OscConfig+0x188>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e2bb      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b6b      	ldr	r3, [pc, #428]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	22f8      	movs	r2, #248	; 0xf8
 8003c8a:	4393      	bics	r3, r2
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	e041      	b.n	8003d20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d024      	beq.n	8003cee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca4:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fff2 	bl	8002c98 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fe ffed 	bl	8002c98 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e297      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d0f1      	beq.n	8003cba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	22f8      	movs	r2, #248	; 0xf8
 8003cdc:	4393      	bics	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00da      	lsls	r2, r3, #3
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e018      	b.n	8003d20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe ffcd 	bl	8002c98 <HAL_GetTick>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d04:	f7fe ffc8 	bl	8002c98 <HAL_GetTick>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e272      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d1f1      	bne.n	8003d04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4013      	ands	r3, r2
 8003d28:	d036      	beq.n	8003d98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d019      	beq.n	8003d66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d36:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d38:	2101      	movs	r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe ffab 	bl	8002c98 <HAL_GetTick>
 8003d42:	0003      	movs	r3, r0
 8003d44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe ffa6 	bl	8002c98 <HAL_GetTick>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e250      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d0f1      	beq.n	8003d48 <HAL_RCC_OscConfig+0x24c>
 8003d64:	e018      	b.n	8003d98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d66:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	438a      	bics	r2, r1
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fe ff91 	bl	8002c98 <HAL_GetTick>
 8003d76:	0003      	movs	r3, r0
 8003d78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fe ff8c 	bl	8002c98 <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e236      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8e:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2202      	movs	r2, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	d1f1      	bne.n	8003d7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d100      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2a8>
 8003da2:	e0b5      	b.n	8003f10 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da4:	231f      	movs	r3, #31
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	055b      	lsls	r3, r3, #21
 8003db4:	4013      	ands	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003dbe:	2180      	movs	r1, #128	; 0x80
 8003dc0:	0549      	lsls	r1, r1, #21
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	055b      	lsls	r3, r3, #21
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dd4:	231f      	movs	r3, #31
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_RCC_OscConfig+0x344>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d11a      	bne.n	8003e1e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RCC_OscConfig+0x344>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_RCC_OscConfig+0x344>)
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	0049      	lsls	r1, r1, #1
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df6:	f7fe ff4f 	bl	8002c98 <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fe ff4a 	bl	8002c98 <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f4      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_OscConfig+0x344>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d10e      	bne.n	8003e44 <HAL_RCC_OscConfig+0x348>
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <HAL_RCC_OscConfig+0x338>)
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	e035      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3a4>
 8003e34:	40021000 	.word	0x40021000
 8003e38:	fffeffff 	.word	0xfffeffff
 8003e3c:	fffbffff 	.word	0xfffbffff
 8003e40:	40007000 	.word	0x40007000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x36a>
 8003e4c:	4bca      	ldr	r3, [pc, #808]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	4bc9      	ldr	r3, [pc, #804]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	438a      	bics	r2, r1
 8003e56:	621a      	str	r2, [r3, #32]
 8003e58:	4bc7      	ldr	r3, [pc, #796]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	4bc6      	ldr	r3, [pc, #792]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e5e:	2104      	movs	r1, #4
 8003e60:	438a      	bics	r2, r1
 8003e62:	621a      	str	r2, [r3, #32]
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3a4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x38c>
 8003e6e:	4bc2      	ldr	r3, [pc, #776]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	4bc1      	ldr	r3, [pc, #772]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e74:	2104      	movs	r1, #4
 8003e76:	430a      	orrs	r2, r1
 8003e78:	621a      	str	r2, [r3, #32]
 8003e7a:	4bbf      	ldr	r3, [pc, #764]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	4bbe      	ldr	r3, [pc, #760]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e80:	2101      	movs	r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	621a      	str	r2, [r3, #32]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3a4>
 8003e88:	4bbb      	ldr	r3, [pc, #748]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	4bba      	ldr	r3, [pc, #744]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	438a      	bics	r2, r1
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	4bb8      	ldr	r3, [pc, #736]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	4bb7      	ldr	r3, [pc, #732]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d014      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fe fef6 	bl	8002c98 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e009      	b.n	8003ec6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe fef1 	bl	8002c98 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	4aaf      	ldr	r2, [pc, #700]	; (800417c <HAL_RCC_OscConfig+0x680>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e19a      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4bac      	ldr	r3, [pc, #688]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3b6>
 8003ed0:	e013      	b.n	8003efa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7fe fee1 	bl	8002c98 <HAL_GetTick>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	e009      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fe fedc 	bl	8002c98 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	4aa5      	ldr	r2, [pc, #660]	; (800417c <HAL_RCC_OscConfig+0x680>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e185      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	4ba1      	ldr	r3, [pc, #644]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003efa:	231f      	movs	r3, #31
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	4b9b      	ldr	r3, [pc, #620]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f0a:	499d      	ldr	r1, [pc, #628]	; (8004180 <HAL_RCC_OscConfig+0x684>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2210      	movs	r2, #16
 8003f16:	4013      	ands	r3, r2
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d12a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f22:	4b95      	ldr	r3, [pc, #596]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f26:	4b94      	ldr	r3, [pc, #592]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f28:	2104      	movs	r1, #4
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003f2e:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f32:	4b91      	ldr	r3, [pc, #580]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f34:	2101      	movs	r1, #1
 8003f36:	430a      	orrs	r2, r1
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fead 	bl	8002c98 <HAL_GetTick>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f44:	f7fe fea8 	bl	8002c98 <HAL_GetTick>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e152      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d0f1      	beq.n	8003f44 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f60:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	22f8      	movs	r2, #248	; 0xf8
 8003f66:	4393      	bics	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	00da      	lsls	r2, r3, #3
 8003f70:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
 8003f76:	e034      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	3305      	adds	r3, #5
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f80:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f84:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f86:	2104      	movs	r1, #4
 8003f88:	438a      	bics	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f8c:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	22f8      	movs	r2, #248	; 0xf8
 8003f92:	4393      	bics	r3, r2
 8003f94:	0019      	movs	r1, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	00da      	lsls	r2, r3, #3
 8003f9c:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa2:	e01e      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fa4:	4b74      	ldr	r3, [pc, #464]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa8:	4b73      	ldr	r3, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003faa:	2104      	movs	r1, #4
 8003fac:	430a      	orrs	r2, r1
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003fb0:	4b71      	ldr	r3, [pc, #452]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb4:	4b70      	ldr	r3, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	438a      	bics	r2, r1
 8003fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fe6c 	bl	8002c98 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fc6:	f7fe fe67 	bl	8002c98 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e111      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fd8:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d1f1      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d05c      	beq.n	80040a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003fec:	4b62      	ldr	r3, [pc, #392]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	220c      	movs	r2, #12
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d00e      	beq.n	8004016 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003ff8:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004000:	2b08      	cmp	r3, #8
 8004002:	d114      	bne.n	800402e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	23c0      	movs	r3, #192	; 0xc0
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	401a      	ands	r2, r3
 800400e:	23c0      	movs	r3, #192	; 0xc0
 8004010:	025b      	lsls	r3, r3, #9
 8004012:	429a      	cmp	r2, r3
 8004014:	d10b      	bne.n	800402e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004016:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	025b      	lsls	r3, r3, #9
 800401e:	4013      	ands	r3, r2
 8004020:	d040      	beq.n	80040a4 <HAL_RCC_OscConfig+0x5a8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d03c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0e6      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01b      	beq.n	800406e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004036:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403a:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0249      	lsls	r1, r1, #9
 8004040:	430a      	orrs	r2, r1
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fe28 	bl	8002c98 <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404e:	f7fe fe23 	bl	8002c98 <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0cd      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	025b      	lsls	r3, r3, #9
 8004068:	4013      	ands	r3, r2
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x552>
 800406c:	e01b      	b.n	80040a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004074:	4943      	ldr	r1, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0x688>)
 8004076:	400a      	ands	r2, r1
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe fe0d 	bl	8002c98 <HAL_GetTick>
 800407e:	0003      	movs	r3, r0
 8004080:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004084:	f7fe fe08 	bl	8002c98 <HAL_GetTick>
 8004088:	0002      	movs	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0b2      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	4013      	ands	r3, r2
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x588>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80040a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d100      	bne.n	80040b0 <HAL_RCC_OscConfig+0x5b4>
 80040ae:	e0a4      	b.n	80041fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	220c      	movs	r2, #12
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d100      	bne.n	80040be <HAL_RCC_OscConfig+0x5c2>
 80040bc:	e078      	b.n	80041b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d14c      	bne.n	8004160 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 80040cc:	492e      	ldr	r1, [pc, #184]	; (8004188 <HAL_RCC_OscConfig+0x68c>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe fde1 	bl	8002c98 <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fe fddc 	bl	8002c98 <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e086      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ee:	4b22      	ldr	r3, [pc, #136]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	049b      	lsls	r3, r3, #18
 80040f6:	4013      	ands	r3, r2
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fa:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	220f      	movs	r2, #15
 8004100:	4393      	bics	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 800410a:	430a      	orrs	r2, r1
 800410c:	62da      	str	r2, [r3, #44]	; 0x2c
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_RCC_OscConfig+0x690>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	431a      	orrs	r2, r3
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	0449      	lsls	r1, r1, #17
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fe fdaf 	bl	8002c98 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fdaa 	bl	8002c98 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e054      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	049b      	lsls	r3, r3, #18
 800415a:	4013      	ands	r3, r2
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x644>
 800415e:	e04c      	b.n	80041fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <HAL_RCC_OscConfig+0x67c>)
 8004166:	4908      	ldr	r1, [pc, #32]	; (8004188 <HAL_RCC_OscConfig+0x68c>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fd94 	bl	8002c98 <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	e015      	b.n	80041a2 <HAL_RCC_OscConfig+0x6a6>
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40021000 	.word	0x40021000
 800417c:	00001388 	.word	0x00001388
 8004180:	efffffff 	.word	0xefffffff
 8004184:	fffeffff 	.word	0xfffeffff
 8004188:	feffffff 	.word	0xfeffffff
 800418c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe fd82 	bl	8002c98 <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e02c      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <HAL_RCC_OscConfig+0x708>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	049b      	lsls	r3, r3, #18
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x694>
 80041ae:	e024      	b.n	80041fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e01f      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_OscConfig+0x708>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x708>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	23c0      	movs	r3, #192	; 0xc0
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d10e      	bne.n	80041f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	220f      	movs	r2, #15
 80041dc:	401a      	ands	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	23f0      	movs	r3, #240	; 0xf0
 80041ea:	039b      	lsls	r3, r3, #14
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d001      	beq.n	80041fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b008      	add	sp, #32
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0bf      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d911      	bls.n	800424e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	4393      	bics	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	4b5b      	ldr	r3, [pc, #364]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2201      	movs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0a6      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2202      	movs	r2, #2
 8004254:	4013      	ands	r3, r2
 8004256:	d015      	beq.n	8004284 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2204      	movs	r2, #4
 800425e:	4013      	ands	r3, r2
 8004260:	d006      	beq.n	8004270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004268:	21e0      	movs	r1, #224	; 0xe0
 800426a:	00c9      	lsls	r1, r1, #3
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	22f0      	movs	r2, #240	; 0xf0
 8004276:	4393      	bics	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	4013      	ands	r3, r2
 800428c:	d04c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	4013      	ands	r3, r2
 80042a0:	d120      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07a      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	4013      	ands	r3, r2
 80042b8:	d114      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06e      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 80042c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	4013      	ands	r3, r2
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e062      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2202      	movs	r2, #2
 80042dc:	4013      	ands	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e05b      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2203      	movs	r2, #3
 80042ea:	4393      	bics	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fe fcce 	bl	8002c98 <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004300:	e009      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004302:	f7fe fcc9 	bl	8002c98 <HAL_GetTick>
 8004306:	0002      	movs	r2, r0
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_RCC_ClockConfig+0x1a4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e042      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	220c      	movs	r2, #12
 800431c:	401a      	ands	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1ec      	bne.n	8004302 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d211      	bcs.n	800435a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	4393      	bics	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_RCC_ClockConfig+0x19c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e020      	b.n	800439c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2204      	movs	r2, #4
 8004360:	4013      	ands	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4a11      	ldr	r2, [pc, #68]	; (80043b0 <HAL_RCC_ClockConfig+0x1a8>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004378:	f000 f820 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800437c:	0001      	movs	r1, r0
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x1a0>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	220f      	movs	r2, #15
 8004386:	4013      	ands	r3, r2
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1ac>)
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	000a      	movs	r2, r1
 800438e:	40da      	lsrs	r2, r3
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004394:	2000      	movs	r0, #0
 8004396:	f7fe fc39 	bl	8002c0c <HAL_InitTick>
  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40022000 	.word	0x40022000
 80043a8:	40021000 	.word	0x40021000
 80043ac:	00001388 	.word	0x00001388
 80043b0:	fffff8ff 	.word	0xfffff8ff
 80043b4:	0800bed8 	.word	0x0800bed8
 80043b8:	20000004 	.word	0x20000004

080043bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b08f      	sub	sp, #60	; 0x3c
 80043c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80043c2:	2314      	movs	r3, #20
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	4a37      	ldr	r2, [pc, #220]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80043c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ca:	c313      	stmia	r3!, {r0, r1, r4}
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4a35      	ldr	r2, [pc, #212]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xec>)
 80043d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043d6:	c313      	stmia	r3!, {r0, r1, r4}
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e0:	2300      	movs	r3, #0
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e4:	2300      	movs	r3, #0
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80043f0:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_GetSysClockFreq+0xf0>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	220c      	movs	r2, #12
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d006      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x52>
 8004400:	2b0c      	cmp	r3, #12
 8004402:	d043      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0xd0>
 8004404:	2b04      	cmp	r3, #4
 8004406:	d144      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800440c:	e044      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	0c9b      	lsrs	r3, r3, #18
 8004412:	220f      	movs	r2, #15
 8004414:	4013      	ands	r3, r2
 8004416:	2214      	movs	r2, #20
 8004418:	18ba      	adds	r2, r7, r2
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_RCC_GetSysClockFreq+0xf0>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	220f      	movs	r2, #15
 8004424:	4013      	ands	r3, r2
 8004426:	1d3a      	adds	r2, r7, #4
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	23c0      	movs	r3, #192	; 0xc0
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	401a      	ands	r2, r3
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	025b      	lsls	r3, r3, #9
 8004438:	429a      	cmp	r2, r3
 800443a:	d109      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800443c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800443e:	481c      	ldr	r0, [pc, #112]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004440:	f7fb fe74 	bl	800012c <__udivsi3>
 8004444:	0003      	movs	r3, r0
 8004446:	001a      	movs	r2, r3
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	4353      	muls	r3, r2
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
 800444e:	e01a      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	23c0      	movs	r3, #192	; 0xc0
 8004454:	025b      	lsls	r3, r3, #9
 8004456:	401a      	ands	r2, r3
 8004458:	23c0      	movs	r3, #192	; 0xc0
 800445a:	025b      	lsls	r3, r3, #9
 800445c:	429a      	cmp	r2, r3
 800445e:	d109      	bne.n	8004474 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004462:	4814      	ldr	r0, [pc, #80]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004464:	f7fb fe62 	bl	800012c <__udivsi3>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	4353      	muls	r3, r2
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
 8004472:	e008      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004476:	480e      	ldr	r0, [pc, #56]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004478:	f7fb fe58 	bl	800012c <__udivsi3>
 800447c:	0003      	movs	r3, r0
 800447e:	001a      	movs	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	4353      	muls	r3, r2
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800448a:	e005      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004490:	e002      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004496:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b00f      	add	sp, #60	; 0x3c
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	0800bdf4 	.word	0x0800bdf4
 80044a8:	0800be04 	.word	0x0800be04
 80044ac:	40021000 	.word	0x40021000
 80044b0:	007a1200 	.word	0x007a1200
 80044b4:	02dc6c00 	.word	0x02dc6c00

080044b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e08a      	b.n	80045e0 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	225d      	movs	r2, #93	; 0x5d
 80044d4:	5c9b      	ldrb	r3, [r3, r2]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	225c      	movs	r2, #92	; 0x5c
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fe fa1e 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	225d      	movs	r2, #93	; 0x5d
 80044f0:	2102      	movs	r1, #2
 80044f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	438a      	bics	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	23e0      	movs	r3, #224	; 0xe0
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	429a      	cmp	r2, r3
 800450e:	d902      	bls.n	8004516 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e002      	b.n	800451c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	015b      	lsls	r3, r3, #5
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	23f0      	movs	r3, #240	; 0xf0
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	429a      	cmp	r2, r3
 8004526:	d008      	beq.n	800453a <HAL_SPI_Init+0x82>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	23e0      	movs	r3, #224	; 0xe0
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	429a      	cmp	r2, r3
 8004532:	d002      	beq.n	800453a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10c      	bne.n	800455c <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	23e0      	movs	r3, #224	; 0xe0
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	429a      	cmp	r2, r3
 800454c:	d903      	bls.n	8004556 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
 8004554:	e002      	b.n	800455c <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6999      	ldr	r1, [r3, #24]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	400b      	ands	r3, r1
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	431a      	orrs	r2, r3
 800458a:	0011      	movs	r1, r2
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	2204      	movs	r2, #4
 80045a0:	401a      	ands	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	0011      	movs	r1, r2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4907      	ldr	r1, [pc, #28]	; (80045e8 <HAL_SPI_Init+0x130>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	225d      	movs	r2, #93	; 0x5d
 80045da:	2101      	movs	r1, #1
 80045dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b004      	add	sp, #16
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	fffff7ff 	.word	0xfffff7ff

080045ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01e      	b.n	800463c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	223d      	movs	r2, #61	; 0x3d
 8004602:	5c9b      	ldrb	r3, [r3, r2]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	223c      	movs	r2, #60	; 0x3c
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0018      	movs	r0, r3
 8004616:	f7fe fa93 	bl	8002b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	223d      	movs	r2, #61	; 0x3d
 800461e:	2102      	movs	r1, #2
 8004620:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	0019      	movs	r1, r3
 800462c:	0010      	movs	r0, r2
 800462e:	f000 f947 	bl	80048c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	223d      	movs	r2, #61	; 0x3d
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2202      	movs	r2, #2
 8004654:	4013      	ands	r3, r2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d124      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	4013      	ands	r3, r2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11d      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2203      	movs	r2, #3
 800466e:	4252      	negs	r2, r2
 8004670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2203      	movs	r2, #3
 8004680:	4013      	ands	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0018      	movs	r0, r3
 8004688:	f000 f902 	bl	8004890 <HAL_TIM_IC_CaptureCallback>
 800468c:	e007      	b.n	800469e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f8f5 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 f901 	bl	80048a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2204      	movs	r2, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d125      	bne.n	80046fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2204      	movs	r2, #4
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d11e      	bne.n	80046fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2205      	movs	r2, #5
 80046c6:	4252      	negs	r2, r2
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	23c0      	movs	r3, #192	; 0xc0
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 f8d5 	bl	8004890 <HAL_TIM_IC_CaptureCallback>
 80046e6:	e007      	b.n	80046f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 f8c8 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f8d4 	bl	80048a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2208      	movs	r2, #8
 8004706:	4013      	ands	r3, r2
 8004708:	2b08      	cmp	r3, #8
 800470a:	d124      	bne.n	8004756 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2208      	movs	r2, #8
 8004714:	4013      	ands	r3, r2
 8004716:	2b08      	cmp	r3, #8
 8004718:	d11d      	bne.n	8004756 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2209      	movs	r2, #9
 8004720:	4252      	negs	r2, r2
 8004722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2204      	movs	r2, #4
 8004728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2203      	movs	r2, #3
 8004732:	4013      	ands	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f000 f8a9 	bl	8004890 <HAL_TIM_IC_CaptureCallback>
 800473e:	e007      	b.n	8004750 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f89c 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f8a8 	bl	80048a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2210      	movs	r2, #16
 800475e:	4013      	ands	r3, r2
 8004760:	2b10      	cmp	r3, #16
 8004762:	d125      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2210      	movs	r2, #16
 800476c:	4013      	ands	r3, r2
 800476e:	2b10      	cmp	r3, #16
 8004770:	d11e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2211      	movs	r2, #17
 8004778:	4252      	negs	r2, r2
 800477a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2208      	movs	r2, #8
 8004780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	23c0      	movs	r3, #192	; 0xc0
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f87c 	bl	8004890 <HAL_TIM_IC_CaptureCallback>
 8004798:	e007      	b.n	80047aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 f86f 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0018      	movs	r0, r3
 80047a6:	f000 f87b 	bl	80048a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2201      	movs	r2, #1
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10f      	bne.n	80047de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d108      	bne.n	80047de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2202      	movs	r2, #2
 80047d2:	4252      	negs	r2, r2
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f849 	bl	8004870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d10f      	bne.n	800480c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b80      	cmp	r3, #128	; 0x80
 80047f8:	d108      	bne.n	800480c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2281      	movs	r2, #129	; 0x81
 8004800:	4252      	negs	r2, r2
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f8e2 	bl	80049d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2240      	movs	r2, #64	; 0x40
 8004814:	4013      	ands	r3, r2
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d10f      	bne.n	800483a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	4013      	ands	r3, r2
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d108      	bne.n	800483a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2241      	movs	r2, #65	; 0x41
 800482e:	4252      	negs	r2, r2
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 f83b 	bl	80048b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2220      	movs	r2, #32
 8004842:	4013      	ands	r3, r2
 8004844:	2b20      	cmp	r3, #32
 8004846:	d10f      	bne.n	8004868 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	4013      	ands	r3, r2
 8004852:	2b20      	cmp	r3, #32
 8004854:	d108      	bne.n	8004868 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2221      	movs	r2, #33	; 0x21
 800485c:	4252      	negs	r2, r2
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f8ac 	bl	80049c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <TIM_Base_SetConfig+0xe4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d008      	beq.n	80048ea <TIM_Base_SetConfig+0x2a>
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	05db      	lsls	r3, r3, #23
 80048de:	429a      	cmp	r2, r3
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0x2a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <TIM_Base_SetConfig+0xe8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2270      	movs	r2, #112	; 0x70
 80048ee:	4393      	bics	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_Base_SetConfig+0xe4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	05db      	lsls	r3, r3, #23
 800490a:	429a      	cmp	r2, r3
 800490c:	d013      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <TIM_Base_SetConfig+0xe8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00f      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <TIM_Base_SetConfig+0xec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <TIM_Base_SetConfig+0xf0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <TIM_Base_SetConfig+0xf4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_Base_SetConfig+0x76>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <TIM_Base_SetConfig+0xf8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d108      	bne.n	8004948 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a20      	ldr	r2, [pc, #128]	; (80049bc <TIM_Base_SetConfig+0xfc>)
 800493a:	4013      	ands	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	4393      	bics	r3, r2
 800494e:	001a      	movs	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <TIM_Base_SetConfig+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0xce>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <TIM_Base_SetConfig+0xf0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0xce>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <TIM_Base_SetConfig+0xf4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0xce>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <TIM_Base_SetConfig+0xf8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d103      	bne.n	8004996 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	615a      	str	r2, [r3, #20]
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40002000 	.word	0x40002000
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800
 80049bc:	fffffcff 	.word	0xfffffcff

080049c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}

080049e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	0002      	movs	r2, r0
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049f0:	1dbb      	adds	r3, r7, #6
 80049f2:	2200      	movs	r2, #0
 80049f4:	5e9b      	ldrsh	r3, [r3, r2]
 80049f6:	2b84      	cmp	r3, #132	; 0x84
 80049f8:	d006      	beq.n	8004a08 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80049fa:	1dbb      	adds	r3, r7, #6
 80049fc:	2200      	movs	r2, #0
 80049fe:	5e9a      	ldrsh	r2, [r3, r2]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	3303      	adds	r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a18:	f3ef 8305 	mrs	r3, IPSR
 8004a1c:	607b      	str	r3, [r7, #4]
  return(result);
 8004a1e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	4193      	sbcs	r3, r2
 8004a24:	b2db      	uxtb	r3, r3
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a32:	f001 f89b 	bl	8005b6c <vTaskStartScheduler>
  
  return osOK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a40:	b089      	sub	sp, #36	; 0x24
 8004a42:	af04      	add	r7, sp, #16
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685c      	ldr	r4, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681d      	ldr	r5, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691e      	ldr	r6, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	5e9b      	ldrsh	r3, [r3, r2]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7ff ffc0 	bl	80049e0 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	9302      	str	r3, [sp, #8]
 8004a6c:	9201      	str	r2, [sp, #4]
 8004a6e:	9000      	str	r0, [sp, #0]
 8004a70:	000b      	movs	r3, r1
 8004a72:	0032      	movs	r2, r6
 8004a74:	0029      	movs	r1, r5
 8004a76:	0020      	movs	r0, r4
 8004a78:	f000 fddd 	bl	8005636 <xTaskCreateStatic>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	60fb      	str	r3, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b005      	add	sp, #20
 8004a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <osDelay+0x16>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	e000      	b.n	8004aa2 <osDelay+0x18>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 fefa 	bl	800589c <vTaskDelay>
  
  return osOK;
 8004aa8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af02      	add	r7, sp, #8
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
      return NULL;
#endif    
    }
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 ) // configSUPPORT_DYNAMIC_ALLOCATION == 0
  if(count == 1) {
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10b      	bne.n	8004ada <osSemaphoreCreate+0x28>
    return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	0013      	movs	r3, r2
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f000 f9ae 	bl	8004e32 <xQueueGenericCreateStatic>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	e000      	b.n	8004adc <osSemaphoreCreate+0x2a>
  else
  {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004ada:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	e036      	b.n	8004b6a <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	d103      	bne.n	8004b0e <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 8004b06:	2301      	movs	r3, #1
 8004b08:	425b      	negs	r3, r3
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e009      	b.n	8004b22 <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <osSemaphoreWait+0x3e>
      ticks = 1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004b22:	f7ff ff76 	bl	8004a12 <inHandlerMode>
 8004b26:	1e03      	subs	r3, r0, #0
 8004b28:	d013      	beq.n	8004b52 <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	18fa      	adds	r2, r7, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 fbe9 	bl	800530a <xQueueReceiveFromISR>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <osSemaphoreWait+0x5e>
      return osErrorOS;
 8004b3e:	23ff      	movs	r3, #255	; 0xff
 8004b40:	e013      	b.n	8004b6a <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00f      	beq.n	8004b68 <osSemaphoreWait+0x84>
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <osSemaphoreWait+0x90>)
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	0552      	lsls	r2, r2, #21
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e00a      	b.n	8004b68 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 fafc 	bl	8005156 <xQueueSemaphoreTake>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d001      	beq.n	8004b68 <osSemaphoreWait+0x84>
    return osErrorOS;
 8004b64:	23ff      	movs	r3, #255	; 0xff
 8004b66:	e000      	b.n	8004b6a <osSemaphoreWait+0x86>
  }
  
  return osOK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b004      	add	sp, #16
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004b88:	f7ff ff43 	bl	8004a12 <inHandlerMode>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d013      	beq.n	8004bb8 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004b90:	2308      	movs	r3, #8
 8004b92:	18fa      	adds	r2, r7, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fa77 	bl	800508c <xQueueGiveFromISR>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004ba4:	23ff      	movs	r3, #255	; 0xff
 8004ba6:	e013      	b.n	8004bd0 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00f      	beq.n	8004bce <osSemaphoreRelease+0x56>
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <osSemaphoreRelease+0x60>)
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	0552      	lsls	r2, r2, #21
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e00a      	b.n	8004bce <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f000 f9a0 	bl	8004f04 <xQueueGenericSend>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d001      	beq.n	8004bce <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8004bca:	23ff      	movs	r3, #255	; 0xff
 8004bcc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004bce:	68fb      	ldr	r3, [r7, #12]
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b004      	add	sp, #16
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 fe7e 	bl	80058e8 <vTaskSuspend>
  
  return osOK;
 8004bec:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8004c00:	f7ff ff07 	bl	8004a12 <inHandlerMode>
 8004c04:	1e03      	subs	r3, r0, #0
 8004c06:	d00b      	beq.n	8004c20 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 ff50 	bl	8005ab0 <xTaskResumeFromISR>
 8004c10:	0003      	movs	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <osThreadResume+0x3c>)
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	0552      	lsls	r2, r2, #21
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e003      	b.n	8004c28 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 fef6 	bl	8005a14 <vTaskResume>
  }
  return osOK;
 8004c28:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3308      	adds	r3, #8
 8004c44:	001a      	movs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4252      	negs	r2, r2
 8004c50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3308      	adds	r3, #8
 8004c56:	001a      	movs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	001a      	movs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b004      	add	sp, #16
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	d103      	bne.n	8004cec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e00c      	b.n	8004d06 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e002      	b.n	8004cfa <vListInsert+0x2c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d2f6      	bcs.n	8004cf4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6892      	ldr	r2, [r2, #8]
 8004d50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6852      	ldr	r2, [r2, #4]
 8004d5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d103      	bne.n	8004d6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b004      	add	sp, #16
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <xQueueGenericReset+0x18>
 8004d9e:	b672      	cpsid	i
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004da2:	f001 fcd5 	bl	8006750 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	434b      	muls	r3, r1
 8004db4:	18d2      	adds	r2, r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	1e59      	subs	r1, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	434b      	muls	r3, r1
 8004dd8:	18d2      	adds	r2, r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2244      	movs	r2, #68	; 0x44
 8004de2:	21ff      	movs	r1, #255	; 0xff
 8004de4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2245      	movs	r2, #69	; 0x45
 8004dea:	21ff      	movs	r1, #255	; 0xff
 8004dec:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10d      	bne.n	8004e10 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d013      	beq.n	8004e24 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3310      	adds	r3, #16
 8004e00:	0018      	movs	r0, r3
 8004e02:	f001 f8cf 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004e06:	1e03      	subs	r3, r0, #0
 8004e08:	d00c      	beq.n	8004e24 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e0a:	f001 fc91 	bl	8006730 <vPortYield>
 8004e0e:	e009      	b.n	8004e24 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3310      	adds	r3, #16
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff ff0f 	bl	8004c38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7ff ff0a 	bl	8004c38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e24:	f001 fca6 	bl	8006774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e28:	2301      	movs	r3, #1
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b004      	add	sp, #16
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e32:	b590      	push	{r4, r7, lr}
 8004e34:	b089      	sub	sp, #36	; 0x24
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericCreateStatic+0x18>
 8004e46:	b672      	cpsid	i
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueGenericCreateStatic+0x22>
 8004e50:	b672      	cpsid	i
 8004e52:	e7fe      	b.n	8004e52 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <xQueueGenericCreateStatic+0x2e>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <xQueueGenericCreateStatic+0x32>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <xQueueGenericCreateStatic+0x34>
 8004e64:	2300      	movs	r3, #0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueGenericCreateStatic+0x3c>
 8004e6a:	b672      	cpsid	i
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <xQueueGenericCreateStatic+0x48>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xQueueGenericCreateStatic+0x4c>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueGenericCreateStatic+0x4e>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <xQueueGenericCreateStatic+0x56>
 8004e84:	b672      	cpsid	i
 8004e86:	e7fe      	b.n	8004e86 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e88:	2348      	movs	r3, #72	; 0x48
 8004e8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b48      	cmp	r3, #72	; 0x48
 8004e90:	d001      	beq.n	8004e96 <xQueueGenericCreateStatic+0x64>
 8004e92:	b672      	cpsid	i
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <xQueueGenericCreateStatic+0x84>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea0:	2328      	movs	r3, #40	; 0x28
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	781c      	ldrb	r4, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	0023      	movs	r3, r4
 8004eb2:	f000 f805 	bl	8004ec0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004eb6:	697b      	ldr	r3, [r7, #20]
	}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b007      	add	sp, #28
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	001a      	movs	r2, r3
 8004ece:	1cfb      	adds	r3, r7, #3
 8004ed0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff ff47 	bl	8004d8a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b004      	add	sp, #16
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <xQueueGenericSend+0x20>
 8004f20:	b672      	cpsid	i
 8004f22:	e7fe      	b.n	8004f22 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x2e>
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <xQueueGenericSend+0x32>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericSend+0x34>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <xQueueGenericSend+0x3c>
 8004f3c:	b672      	cpsid	i
 8004f3e:	e7fe      	b.n	8004f3e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x4a>
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <xQueueGenericSend+0x4e>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <xQueueGenericSend+0x50>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <xQueueGenericSend+0x58>
 8004f58:	b672      	cpsid	i
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5c:	f001 f9a0 	bl	80062a0 <xTaskGetSchedulerState>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d102      	bne.n	8004f6a <xQueueGenericSend+0x66>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <xQueueGenericSend+0x6a>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <xQueueGenericSend+0x6c>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <xQueueGenericSend+0x74>
 8004f74:	b672      	cpsid	i
 8004f76:	e7fe      	b.n	8004f76 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f78:	f001 fbea 	bl	8006750 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <xQueueGenericSend+0x8a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d11e      	bne.n	8004fcc <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f000 fa31 	bl	80053fc <prvCopyDataToQueue>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	0018      	movs	r0, r3
 8004fac:	f000 fffa 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004fb0:	1e03      	subs	r3, r0, #0
 8004fb2:	d007      	beq.n	8004fc4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fb4:	f001 fbbc 	bl	8006730 <vPortYield>
 8004fb8:	e004      	b.n	8004fc4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fc0:	f001 fbb6 	bl	8006730 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fc4:	f001 fbd6 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e05b      	b.n	8005084 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fd2:	f001 fbcf 	bl	8006774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e054      	b.n	8005084 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fe0:	2314      	movs	r3, #20
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f001 f839 	bl	800605c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fee:	f001 fbc1 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ff2:	f000 fe13 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ff6:	f001 fbab 	bl	8006750 <vPortEnterCritical>
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	2244      	movs	r2, #68	; 0x44
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	b25b      	sxtb	r3, r3
 8005002:	3301      	adds	r3, #1
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x10a>
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2244      	movs	r2, #68	; 0x44
 800500a:	2100      	movs	r1, #0
 800500c:	5499      	strb	r1, [r3, r2]
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	2245      	movs	r2, #69	; 0x45
 8005012:	5c9b      	ldrb	r3, [r3, r2]
 8005014:	b25b      	sxtb	r3, r3
 8005016:	3301      	adds	r3, #1
 8005018:	d103      	bne.n	8005022 <xQueueGenericSend+0x11e>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2245      	movs	r2, #69	; 0x45
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]
 8005022:	f001 fba7 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005026:	1d3a      	adds	r2, r7, #4
 8005028:	2314      	movs	r3, #20
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	0011      	movs	r1, r2
 800502e:	0018      	movs	r0, r3
 8005030:	f001 f828 	bl	8006084 <xTaskCheckForTimeOut>
 8005034:	1e03      	subs	r3, r0, #0
 8005036:	d11e      	bne.n	8005076 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	0018      	movs	r0, r3
 800503c:	f000 fae3 	bl	8005606 <prvIsQueueFull>
 8005040:	1e03      	subs	r3, r0, #0
 8005042:	d011      	beq.n	8005068 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	3310      	adds	r3, #16
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f000 ff8b 	bl	8005f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fa62 	bl	800551e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800505a:	f000 fdeb 	bl	8005c34 <xTaskResumeAll>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d18a      	bne.n	8004f78 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005062:	f001 fb65 	bl	8006730 <vPortYield>
 8005066:	e787      	b.n	8004f78 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fa57 	bl	800551e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005070:	f000 fde0 	bl	8005c34 <xTaskResumeAll>
 8005074:	e780      	b.n	8004f78 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 fa50 	bl	800551e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800507e:	f000 fdd9 	bl	8005c34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005082:	2300      	movs	r3, #0
		}
	}
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b00a      	add	sp, #40	; 0x28
 800508a:	bd80      	pop	{r7, pc}

0800508c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <xQueueGiveFromISR+0x18>
 80050a0:	b672      	cpsid	i
 80050a2:	e7fe      	b.n	80050a2 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <xQueueGiveFromISR+0x24>
 80050ac:	b672      	cpsid	i
 80050ae:	e7fe      	b.n	80050ae <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <xQueueGiveFromISR+0x34>
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <xQueueGiveFromISR+0x38>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <xQueueGiveFromISR+0x3a>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <xQueueGiveFromISR+0x42>
 80050ca:	b672      	cpsid	i
 80050cc:	e7fe      	b.n	80050cc <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050ce:	f001 fb69 	bl	80067a4 <ulSetInterruptMaskFromISR>
 80050d2:	0003      	movs	r3, r0
 80050d4:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d22c      	bcs.n	8005140 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050e6:	200f      	movs	r0, #15
 80050e8:	183b      	adds	r3, r7, r0
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	2145      	movs	r1, #69	; 0x45
 80050ee:	5c52      	ldrb	r2, [r2, r1]
 80050f0:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050fa:	183b      	adds	r3, r7, r0
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	d111      	bne.n	8005128 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	3324      	adds	r3, #36	; 0x24
 8005110:	0018      	movs	r0, r3
 8005112:	f000 ff47 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d00f      	beq.n	800513a <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00c      	beq.n	800513a <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e008      	b.n	800513a <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005128:	230f      	movs	r3, #15
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3301      	adds	r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	b259      	sxtb	r1, r3
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2245      	movs	r2, #69	; 0x45
 8005138:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800513a:	2301      	movs	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e001      	b.n	8005144 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	0018      	movs	r0, r3
 8005148:	f001 fb32 	bl	80067b0 <vClearInterruptMaskFromISR>

	return xReturn;
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b008      	add	sp, #32
 8005154:	bd80      	pop	{r7, pc}

08005156 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08a      	sub	sp, #40	; 0x28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <xQueueSemaphoreTake+0x20>
 8005172:	b672      	cpsid	i
 8005174:	e7fe      	b.n	8005174 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <xQueueSemaphoreTake+0x2c>
 800517e:	b672      	cpsid	i
 8005180:	e7fe      	b.n	8005180 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005182:	f001 f88d 	bl	80062a0 <xTaskGetSchedulerState>
 8005186:	1e03      	subs	r3, r0, #0
 8005188:	d102      	bne.n	8005190 <xQueueSemaphoreTake+0x3a>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <xQueueSemaphoreTake+0x3e>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <xQueueSemaphoreTake+0x40>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xQueueSemaphoreTake+0x48>
 800519a:	b672      	cpsid	i
 800519c:	e7fe      	b.n	800519c <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800519e:	f001 fad7 	bl	8006750 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01d      	beq.n	80051ea <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	1e5a      	subs	r2, r3, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80051be:	f001 f9c9 	bl	8006554 <pvTaskIncrementMutexHeldCount>
 80051c2:	0002      	movs	r2, r0
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3310      	adds	r3, #16
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 fee5 	bl	8005fa4 <xTaskRemoveFromEventList>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051de:	f001 faa7 	bl	8006730 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051e2:	f001 fac7 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e08b      	b.n	8005302 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <xQueueSemaphoreTake+0xa4>
 80051f6:	b672      	cpsid	i
 80051f8:	e7fe      	b.n	80051f8 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80051fa:	f001 fabb 	bl	8006774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051fe:	2300      	movs	r3, #0
 8005200:	e07f      	b.n	8005302 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005208:	230c      	movs	r3, #12
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	0018      	movs	r0, r3
 800520e:	f000 ff25 	bl	800605c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005212:	2301      	movs	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005216:	f001 faad 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800521a:	f000 fcff 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800521e:	f001 fa97 	bl	8006750 <vPortEnterCritical>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	2244      	movs	r2, #68	; 0x44
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	b25b      	sxtb	r3, r3
 800522a:	3301      	adds	r3, #1
 800522c:	d103      	bne.n	8005236 <xQueueSemaphoreTake+0xe0>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2244      	movs	r2, #68	; 0x44
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2245      	movs	r2, #69	; 0x45
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	b25b      	sxtb	r3, r3
 800523e:	3301      	adds	r3, #1
 8005240:	d103      	bne.n	800524a <xQueueSemaphoreTake+0xf4>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2245      	movs	r2, #69	; 0x45
 8005246:	2100      	movs	r1, #0
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	f001 fa93 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800524e:	003a      	movs	r2, r7
 8005250:	230c      	movs	r3, #12
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f000 ff14 	bl	8006084 <xTaskCheckForTimeOut>
 800525c:	1e03      	subs	r3, r0, #0
 800525e:	d12e      	bne.n	80052be <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f9b9 	bl	80055da <prvIsQueueEmpty>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d021      	beq.n	80052b0 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005274:	f001 fa6c 	bl	8006750 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f001 f82b 	bl	80062d8 <xTaskPriorityInherit>
 8005282:	0003      	movs	r3, r0
 8005284:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005286:	f001 fa75 	bl	8006774 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	0011      	movs	r1, r2
 8005292:	0018      	movs	r0, r3
 8005294:	f000 fe68 	bl	8005f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	0018      	movs	r0, r3
 800529c:	f000 f93f 	bl	800551e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052a0:	f000 fcc8 	bl	8005c34 <xTaskResumeAll>
 80052a4:	1e03      	subs	r3, r0, #0
 80052a6:	d000      	beq.n	80052aa <xQueueSemaphoreTake+0x154>
 80052a8:	e779      	b.n	800519e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80052aa:	f001 fa41 	bl	8006730 <vPortYield>
 80052ae:	e776      	b.n	800519e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 f933 	bl	800551e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b8:	f000 fcbc 	bl	8005c34 <xTaskResumeAll>
 80052bc:	e76f      	b.n	800519e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 f92c 	bl	800551e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052c6:	f000 fcb5 	bl	8005c34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f984 	bl	80055da <prvIsQueueEmpty>
 80052d2:	1e03      	subs	r3, r0, #0
 80052d4:	d100      	bne.n	80052d8 <xQueueSemaphoreTake+0x182>
 80052d6:	e762      	b.n	800519e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80052de:	f001 fa37 	bl	8006750 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f873 	bl	80053d0 <prvGetDisinheritPriorityAfterTimeout>
 80052ea:	0003      	movs	r3, r0
 80052ec:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	0011      	movs	r1, r2
 80052f6:	0018      	movs	r0, r3
 80052f8:	f001 f8b8 	bl	800646c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80052fc:	f001 fa3a 	bl	8006774 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005300:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b00a      	add	sp, #40	; 0x28
 8005308:	bd80      	pop	{r7, pc}

0800530a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800530a:	b590      	push	{r4, r7, lr}
 800530c:	b08b      	sub	sp, #44	; 0x2c
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <xQueueReceiveFromISR+0x1a>
 8005320:	b672      	cpsid	i
 8005322:	e7fe      	b.n	8005322 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <xQueueReceiveFromISR+0x28>
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <xQueueReceiveFromISR+0x2c>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <xQueueReceiveFromISR+0x2e>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <xQueueReceiveFromISR+0x36>
 800533c:	b672      	cpsid	i
 800533e:	e7fe      	b.n	800533e <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005340:	f001 fa30 	bl	80067a4 <ulSetInterruptMaskFromISR>
 8005344:	0003      	movs	r3, r0
 8005346:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d032      	beq.n	80053ba <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005354:	2417      	movs	r4, #23
 8005356:	193b      	adds	r3, r7, r4
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	2144      	movs	r1, #68	; 0x44
 800535c:	5c52      	ldrb	r2, [r2, r1]
 800535e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	0011      	movs	r1, r2
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f8b3 	bl	80054d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005374:	193b      	adds	r3, r7, r4
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	b25b      	sxtb	r3, r3
 800537a:	3301      	adds	r3, #1
 800537c:	d111      	bne.n	80053a2 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	3310      	adds	r3, #16
 800538a:	0018      	movs	r0, r3
 800538c:	f000 fe0a 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d00f      	beq.n	80053b4 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e008      	b.n	80053b4 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053a2:	2317      	movs	r3, #23
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	b259      	sxtb	r1, r3
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2244      	movs	r2, #68	; 0x44
 80053b2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80053b4:	2301      	movs	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
 80053b8:	e001      	b.n	80053be <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f001 f9f5 	bl	80067b0 <vClearInterruptMaskFromISR>

	return xReturn;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b00b      	add	sp, #44	; 0x2c
 80053ce:	bd90      	pop	{r4, r7, pc}

080053d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2207      	movs	r2, #7
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e001      	b.n	80053f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80053f2:	68fb      	ldr	r3, [r7, #12]
	}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}

080053fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10e      	bne.n	8005438 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d14e      	bne.n	80054c0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	0018      	movs	r0, r3
 8005428:	f000 ffc4 	bl	80063b4 <xTaskPriorityDisinherit>
 800542c:	0003      	movs	r3, r0
 800542e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e043      	b.n	80054c0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d119      	bne.n	8005472 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6898      	ldr	r0, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	0019      	movs	r1, r3
 800544a:	f002 fe43 	bl	80080d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	18d2      	adds	r2, r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d32b      	bcc.n	80054c0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	e026      	b.n	80054c0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68d8      	ldr	r0, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	0019      	movs	r1, r3
 800547e:	f002 fe29 	bl	80080d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	425b      	negs	r3, r3
 800548c:	18d2      	adds	r2, r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d207      	bcs.n	80054ae <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	425b      	negs	r3, r3
 80054a8:	18d2      	adds	r2, r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d105      	bne.n	80054c0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3b01      	subs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054c8:	697b      	ldr	r3, [r7, #20]
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b006      	add	sp, #24
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d018      	beq.n	8005516 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	18d2      	adds	r2, r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d303      	bcc.n	8005506 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68d9      	ldr	r1, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	0018      	movs	r0, r3
 8005512:	f002 fddf 	bl	80080d4 <memcpy>
	}
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b002      	add	sp, #8
 800551c:	bd80      	pop	{r7, pc}

0800551e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005526:	f001 f913 	bl	8006750 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800552a:	230f      	movs	r3, #15
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	2145      	movs	r1, #69	; 0x45
 8005532:	5c52      	ldrb	r2, [r2, r1]
 8005534:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005536:	e013      	b.n	8005560 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fd2d 	bl	8005fa4 <xTaskRemoveFromEventList>
 800554a:	1e03      	subs	r3, r0, #0
 800554c:	d001      	beq.n	8005552 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800554e:	f000 fde9 	bl	8006124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005552:	210f      	movs	r1, #15
 8005554:	187b      	adds	r3, r7, r1
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	3b01      	subs	r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	187b      	adds	r3, r7, r1
 800555e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005560:	230f      	movs	r3, #15
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b25b      	sxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	dce5      	bgt.n	8005538 <prvUnlockQueue+0x1a>
 800556c:	e000      	b.n	8005570 <prvUnlockQueue+0x52>
					break;
 800556e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2245      	movs	r2, #69	; 0x45
 8005574:	21ff      	movs	r1, #255	; 0xff
 8005576:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005578:	f001 f8fc 	bl	8006774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800557c:	f001 f8e8 	bl	8006750 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005580:	230e      	movs	r3, #14
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	2144      	movs	r1, #68	; 0x44
 8005588:	5c52      	ldrb	r2, [r2, r1]
 800558a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800558c:	e013      	b.n	80055b6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3310      	adds	r3, #16
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fd02 	bl	8005fa4 <xTaskRemoveFromEventList>
 80055a0:	1e03      	subs	r3, r0, #0
 80055a2:	d001      	beq.n	80055a8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80055a4:	f000 fdbe 	bl	8006124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055a8:	210e      	movs	r1, #14
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b6:	230e      	movs	r3, #14
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dce5      	bgt.n	800558e <prvUnlockQueue+0x70>
 80055c2:	e000      	b.n	80055c6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80055c4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2244      	movs	r2, #68	; 0x44
 80055ca:	21ff      	movs	r1, #255	; 0xff
 80055cc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80055ce:	f001 f8d1 	bl	8006774 <vPortExitCritical>
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}

080055da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e2:	f001 f8b5 	bl	8006750 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e001      	b.n	80055f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f8:	f001 f8bc 	bl	8006774 <vPortExitCritical>

	return xReturn;
 80055fc:	68fb      	ldr	r3, [r7, #12]
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b004      	add	sp, #16
 8005604:	bd80      	pop	{r7, pc}

08005606 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800560e:	f001 f89f 	bl	8006750 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	429a      	cmp	r2, r3
 800561c:	d102      	bne.n	8005624 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e001      	b.n	8005628 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005628:	f001 f8a4 	bl	8006774 <vPortExitCritical>

	return xReturn;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}

08005636 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005636:	b590      	push	{r4, r7, lr}
 8005638:	b08d      	sub	sp, #52	; 0x34
 800563a:	af04      	add	r7, sp, #16
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xTaskCreateStatic+0x18>
 800564a:	b672      	cpsid	i
 800564c:	e7fe      	b.n	800564c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <xTaskCreateStatic+0x22>
 8005654:	b672      	cpsid	i
 8005656:	e7fe      	b.n	8005656 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005658:	23b4      	movs	r3, #180	; 0xb4
 800565a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2bb4      	cmp	r3, #180	; 0xb4
 8005660:	d001      	beq.n	8005666 <xTaskCreateStatic+0x30>
 8005662:	b672      	cpsid	i
 8005664:	e7fe      	b.n	8005664 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01c      	beq.n	80056a6 <xTaskCreateStatic+0x70>
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	2b00      	cmp	r3, #0
 8005670:	d019      	beq.n	80056a6 <xTaskCreateStatic+0x70>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800567c:	683c      	ldr	r4, [r7, #0]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	2300      	movs	r3, #0
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	2318      	movs	r3, #24
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	0023      	movs	r3, r4
 8005698:	f000 f80c 	bl	80056b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f898 	bl	80057d4 <prvAddNewTaskToReadyList>
 80056a4:	e001      	b.n	80056aa <xTaskCreateStatic+0x74>
		}
		else
		{
			xReturn = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056aa:	69bb      	ldr	r3, [r7, #24]
	}
 80056ac:	0018      	movs	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b009      	add	sp, #36	; 0x24
 80056b2:	bd90      	pop	{r4, r7, pc}

080056b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	493e      	ldr	r1, [pc, #248]	; (80057c4 <prvInitialiseNewTask+0x110>)
 80056ca:	468c      	mov	ip, r1
 80056cc:	4463      	add	r3, ip
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	18d3      	adds	r3, r2, r3
 80056d2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2207      	movs	r2, #7
 80056d8:	4393      	bics	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2207      	movs	r2, #7
 80056e0:	4013      	ands	r3, r2
 80056e2:	d001      	beq.n	80056e8 <prvInitialiseNewTask+0x34>
 80056e4:	b672      	cpsid	i
 80056e6:	e7fe      	b.n	80056e6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e013      	b.n	8005716 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	18d3      	adds	r3, r2, r3
 80056f4:	7818      	ldrb	r0, [r3, #0]
 80056f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f8:	2134      	movs	r1, #52	; 0x34
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	18d3      	adds	r3, r2, r3
 80056fe:	185b      	adds	r3, r3, r1
 8005700:	1c02      	adds	r2, r0, #0
 8005702:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d9e8      	bls.n	80056ee <prvInitialiseNewTask+0x3a>
 800571c:	e000      	b.n	8005720 <prvInitialiseNewTask+0x6c>
		{
			break;
 800571e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	2243      	movs	r2, #67	; 0x43
 8005724:	2100      	movs	r1, #0
 8005726:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b06      	cmp	r3, #6
 800572c:	d901      	bls.n	8005732 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800572e:	2306      	movs	r3, #6
 8005730:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2200      	movs	r2, #0
 8005742:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	3304      	adds	r3, #4
 8005748:	0018      	movs	r0, r3
 800574a:	f7ff fa93 	bl	8004c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	3318      	adds	r3, #24
 8005752:	0018      	movs	r0, r3
 8005754:	f7ff fa8e 	bl	8004c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800575c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2207      	movs	r2, #7
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	22ac      	movs	r2, #172	; 0xac
 8005772:	2100      	movs	r1, #0
 8005774:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	22b0      	movs	r2, #176	; 0xb0
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	334c      	adds	r3, #76	; 0x4c
 8005782:	2260      	movs	r2, #96	; 0x60
 8005784:	2100      	movs	r1, #0
 8005786:	0018      	movs	r0, r3
 8005788:	f002 fcad 	bl	80080e6 <memset>
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	4a0e      	ldr	r2, [pc, #56]	; (80057c8 <prvInitialiseNewTask+0x114>)
 8005790:	651a      	str	r2, [r3, #80]	; 0x50
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <prvInitialiseNewTask+0x118>)
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <prvInitialiseNewTask+0x11c>)
 800579c:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	68f9      	ldr	r1, [r7, #12]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 ff3b 	bl	8006620 <pxPortInitialiseStack>
 80057aa:	0002      	movs	r2, r0
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b006      	add	sp, #24
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	3fffffff 	.word	0x3fffffff
 80057c8:	0800c148 	.word	0x0800c148
 80057cc:	0800c168 	.word	0x0800c168
 80057d0:	0800c128 	.word	0x0800c128

080057d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057dc:	f000 ffb8 	bl	8006750 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <prvAddNewTaskToReadyList+0xb0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <prvAddNewTaskToReadyList+0xb0>)
 80057e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80057ea:	4b27      	ldr	r3, [pc, #156]	; (8005888 <prvAddNewTaskToReadyList+0xb4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <prvAddNewTaskToReadyList+0xb4>)
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <prvAddNewTaskToReadyList+0xb0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d110      	bne.n	8005822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005800:	f000 fcaa 	bl	8006158 <prvInitialiseTaskLists>
 8005804:	e00d      	b.n	8005822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005806:	4b21      	ldr	r3, [pc, #132]	; (800588c <prvAddNewTaskToReadyList+0xb8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800580e:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <prvAddNewTaskToReadyList+0xb4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	429a      	cmp	r2, r3
 800581a:	d802      	bhi.n	8005822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <prvAddNewTaskToReadyList+0xb4>)
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <prvAddNewTaskToReadyList+0xbc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <prvAddNewTaskToReadyList+0xbc>)
 800582a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <prvAddNewTaskToReadyList+0xc0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d903      	bls.n	8005840 <prvAddNewTaskToReadyList+0x6c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <prvAddNewTaskToReadyList+0xc0>)
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	0013      	movs	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	189b      	adds	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a12      	ldr	r2, [pc, #72]	; (8005898 <prvAddNewTaskToReadyList+0xc4>)
 800584e:	189a      	adds	r2, r3, r2
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	0019      	movs	r1, r3
 8005856:	0010      	movs	r0, r2
 8005858:	f7ff fa17 	bl	8004c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800585c:	f000 ff8a 	bl	8006774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <prvAddNewTaskToReadyList+0xb8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <prvAddNewTaskToReadyList+0xb4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	429a      	cmp	r2, r3
 8005874:	d201      	bcs.n	800587a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005876:	f000 ff5b 	bl	8006730 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	46bd      	mov	sp, r7
 800587e:	b002      	add	sp, #8
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	200005c4 	.word	0x200005c4
 8005888:	200004c4 	.word	0x200004c4
 800588c:	200005d0 	.word	0x200005d0
 8005890:	200005e0 	.word	0x200005e0
 8005894:	200005cc 	.word	0x200005cc
 8005898:	200004c8 	.word	0x200004c8

0800589c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d010      	beq.n	80058d0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <vTaskDelay+0x48>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <vTaskDelay+0x1e>
 80058b6:	b672      	cpsid	i
 80058b8:	e7fe      	b.n	80058b8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80058ba:	f000 f9af 	bl	8005c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2100      	movs	r1, #0
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 fe58 	bl	8006578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058c8:	f000 f9b4 	bl	8005c34 <xTaskResumeAll>
 80058cc:	0003      	movs	r3, r0
 80058ce:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80058d6:	f000 ff2b 	bl	8006730 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	200005ec 	.word	0x200005ec

080058e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058f0:	f000 ff2e 	bl	8006750 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <vTaskSuspend+0x18>
 80058fa:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <vTaskSuspend+0xb8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	e000      	b.n	8005902 <vTaskSuspend+0x1a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	0018      	movs	r0, r3
 800590a:	f7ff fa16 	bl	8004d3a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3318      	adds	r3, #24
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff fa0d 	bl	8004d3a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <vTaskSuspend+0xbc>)
 8005926:	0011      	movs	r1, r2
 8005928:	0018      	movs	r0, r3
 800592a:	f7ff f9ae 	bl	8004c8a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	22b0      	movs	r2, #176	; 0xb0
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d103      	bne.n	8005942 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	22b0      	movs	r2, #176	; 0xb0
 800593e:	2100      	movs	r1, #0
 8005940:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005942:	f000 ff17 	bl	8006774 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005946:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <vTaskSuspend+0xc0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800594e:	f000 feff 	bl	8006750 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005952:	f000 fc81 	bl	8006258 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005956:	f000 ff0d 	bl	8006774 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <vTaskSuspend+0xb8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d118      	bne.n	8005996 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8005964:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <vTaskSuspend+0xc0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800596c:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <vTaskSuspend+0xc4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <vTaskSuspend+0x90>
 8005974:	b672      	cpsid	i
 8005976:	e7fe      	b.n	8005976 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8005978:	f000 feda 	bl	8006730 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800597c:	e00b      	b.n	8005996 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <vTaskSuspend+0xbc>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vTaskSuspend+0xc8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d103      	bne.n	8005992 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800598a:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <vTaskSuspend+0xb8>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
	}
 8005990:	e001      	b.n	8005996 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8005992:	f000 fa8f 	bl	8005eb4 <vTaskSwitchContext>
	}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b004      	add	sp, #16
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	200004c4 	.word	0x200004c4
 80059a4:	200005b0 	.word	0x200005b0
 80059a8:	200005d0 	.word	0x200005d0
 80059ac:	200005ec 	.word	0x200005ec
 80059b0:	200005c4 	.word	0x200005c4

080059b4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <prvTaskIsTaskSuspended+0x1a>
 80059ca:	b672      	cpsid	i
 80059cc:	e7fe      	b.n	80059cc <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <prvTaskIsTaskSuspended+0x58>)
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d101      	bne.n	80059dc <prvTaskIsTaskSuspended+0x28>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <prvTaskIsTaskSuspended+0x2a>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00f      	beq.n	8005a02 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <prvTaskIsTaskSuspended+0x5c>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d00a      	beq.n	8005a02 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <prvTaskIsTaskSuspended+0x44>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <prvTaskIsTaskSuspended+0x46>
 80059f8:	2300      	movs	r3, #0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80059fe:	2301      	movs	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a02:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b004      	add	sp, #16
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200005b0 	.word	0x200005b0
 8005a10:	20000584 	.word	0x20000584

08005a14 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <vTaskResume+0x16>
 8005a26:	b672      	cpsid	i
 8005a28:	e7fe      	b.n	8005a28 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d034      	beq.n	8005a9a <vTaskResume+0x86>
 8005a30:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <vTaskResume+0x90>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d02f      	beq.n	8005a9a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8005a3a:	f000 fe89 	bl	8006750 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7ff ffb7 	bl	80059b4 <prvTaskIsTaskSuspended>
 8005a46:	1e03      	subs	r3, r0, #0
 8005a48:	d025      	beq.n	8005a96 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7ff f973 	bl	8004d3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <vTaskResume+0x94>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d903      	bls.n	8005a68 <vTaskResume+0x54>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <vTaskResume+0x94>)
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	0013      	movs	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	189b      	adds	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <vTaskResume+0x98>)
 8005a76:	189a      	adds	r2, r3, r2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	0010      	movs	r0, r2
 8005a80:	f7ff f903 	bl	8004c8a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <vTaskResume+0x90>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d301      	bcc.n	8005a96 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005a92:	f000 fe4d 	bl	8006730 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005a96:	f000 fe6d 	bl	8006774 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	200004c4 	.word	0x200004c4
 8005aa8:	200005cc 	.word	0x200005cc
 8005aac:	200004c8 	.word	0x200004c8

08005ab0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <xTaskResumeFromISR+0x1a>
 8005ac6:	b672      	cpsid	i
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aca:	f000 fe6b 	bl	80067a4 <ulSetInterruptMaskFromISR>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7ff ff6d 	bl	80059b4 <prvTaskIsTaskSuspended>
 8005ada:	1e03      	subs	r3, r0, #0
 8005adc:	d032      	beq.n	8005b44 <xTaskResumeFromISR+0x94>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <xTaskResumeFromISR+0xa8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d126      	bne.n	8005b34 <xTaskResumeFromISR+0x84>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4b1c      	ldr	r3, [pc, #112]	; (8005b5c <xTaskResumeFromISR+0xac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d301      	bcc.n	8005af8 <xTaskResumeFromISR+0x48>
					{
						xYieldRequired = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3304      	adds	r3, #4
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff f91c 	bl	8004d3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <xTaskResumeFromISR+0xb0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d903      	bls.n	8005b16 <xTaskResumeFromISR+0x66>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <xTaskResumeFromISR+0xb0>)
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	0013      	movs	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <xTaskResumeFromISR+0xb4>)
 8005b24:	189a      	adds	r2, r3, r2
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	0010      	movs	r0, r2
 8005b2e:	f7ff f8ac 	bl	8004c8a <vListInsertEnd>
 8005b32:	e007      	b.n	8005b44 <xTaskResumeFromISR+0x94>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	3318      	adds	r3, #24
 8005b38:	001a      	movs	r2, r3
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <xTaskResumeFromISR+0xb8>)
 8005b3c:	0011      	movs	r1, r2
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7ff f8a3 	bl	8004c8a <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 fe32 	bl	80067b0 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8005b4c:	697b      	ldr	r3, [r7, #20]
	}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b006      	add	sp, #24
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	200005ec 	.word	0x200005ec
 8005b5c:	200004c4 	.word	0x200004c4
 8005b60:	200005cc 	.word	0x200005cc
 8005b64:	200004c8 	.word	0x200004c8
 8005b68:	20000584 	.word	0x20000584

08005b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b7a:	003a      	movs	r2, r7
 8005b7c:	1d39      	adds	r1, r7, #4
 8005b7e:	2308      	movs	r3, #8
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	0018      	movs	r0, r3
 8005b84:	f7fc fc18 	bl	80023b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b88:	683c      	ldr	r4, [r7, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	491b      	ldr	r1, [pc, #108]	; (8005bfc <vTaskStartScheduler+0x90>)
 8005b90:	481b      	ldr	r0, [pc, #108]	; (8005c00 <vTaskStartScheduler+0x94>)
 8005b92:	9202      	str	r2, [sp, #8]
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	2300      	movs	r3, #0
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	0022      	movs	r2, r4
 8005b9e:	f7ff fd4a 	bl	8005636 <xTaskCreateStatic>
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <vTaskStartScheduler+0x98>)
 8005ba6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ba8:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <vTaskStartScheduler+0x98>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e001      	b.n	8005bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d113      	bne.n	8005be8 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005bc0:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <vTaskStartScheduler+0x9c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	334c      	adds	r3, #76	; 0x4c
 8005bc8:	001a      	movs	r2, r3
 8005bca:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <vTaskStartScheduler+0xa0>)
 8005bcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <vTaskStartScheduler+0xa4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4252      	negs	r2, r2
 8005bd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <vTaskStartScheduler+0xa8>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bdc:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <vTaskStartScheduler+0xac>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005be2:	f000 fd81 	bl	80066e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005be6:	e004      	b.n	8005bf2 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <vTaskStartScheduler+0x86>
 8005bee:	b672      	cpsid	i
 8005bf0:	e7fe      	b.n	8005bf0 <vTaskStartScheduler+0x84>
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b005      	add	sp, #20
 8005bf8:	bd90      	pop	{r4, r7, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	0800be14 	.word	0x0800be14
 8005c00:	08006139 	.word	0x08006139
 8005c04:	200005e8 	.word	0x200005e8
 8005c08:	200004c4 	.word	0x200004c4
 8005c0c:	2000001c 	.word	0x2000001c
 8005c10:	200005e4 	.word	0x200005e4
 8005c14:	200005d0 	.word	0x200005d0
 8005c18:	200005c8 	.word	0x200005c8

08005c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <vTaskSuspendAll+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <vTaskSuspendAll+0x14>)
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	200005ec 	.word	0x200005ec

08005c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c42:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <xTaskResumeAll+0xf8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <xTaskResumeAll+0x1a>
 8005c4a:	b672      	cpsid	i
 8005c4c:	e7fe      	b.n	8005c4c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c4e:	f000 fd7f 	bl	8006750 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c52:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <xTaskResumeAll+0xf8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <xTaskResumeAll+0xf8>)
 8005c5a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5c:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <xTaskResumeAll+0xf8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d15b      	bne.n	8005d1c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <xTaskResumeAll+0xfc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d057      	beq.n	8005d1c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c6c:	e02f      	b.n	8005cce <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <xTaskResumeAll+0x100>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3318      	adds	r3, #24
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7ff f85d 	bl	8004d3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3304      	adds	r3, #4
 8005c84:	0018      	movs	r0, r3
 8005c86:	f7ff f858 	bl	8004d3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <xTaskResumeAll+0x104>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d903      	bls.n	8005c9e <xTaskResumeAll+0x6a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <xTaskResumeAll+0x104>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	0013      	movs	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a24      	ldr	r2, [pc, #144]	; (8005d3c <xTaskResumeAll+0x108>)
 8005cac:	189a      	adds	r2, r3, r2
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	0010      	movs	r0, r2
 8005cb6:	f7fe ffe8 	bl	8004c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <xTaskResumeAll+0x10c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d302      	bcc.n	8005cce <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <xTaskResumeAll+0x110>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <xTaskResumeAll+0x100>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1cb      	bne.n	8005c6e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cdc:	f000 fabc 	bl	8006258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <xTaskResumeAll+0x114>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00f      	beq.n	8005d0c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cec:	f000 f82e 	bl	8005d4c <xTaskIncrementTick>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d002      	beq.n	8005cfa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005cf4:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <xTaskResumeAll+0x110>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f2      	bne.n	8005cec <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <xTaskResumeAll+0x114>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <xTaskResumeAll+0x110>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d18:	f000 fd0a 	bl	8006730 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1c:	f000 fd2a 	bl	8006774 <vPortExitCritical>

	return xAlreadyYielded;
 8005d20:	68bb      	ldr	r3, [r7, #8]
}
 8005d22:	0018      	movs	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b004      	add	sp, #16
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	200005ec 	.word	0x200005ec
 8005d30:	200005c4 	.word	0x200005c4
 8005d34:	20000584 	.word	0x20000584
 8005d38:	200005cc 	.word	0x200005cc
 8005d3c:	200004c8 	.word	0x200004c8
 8005d40:	200004c4 	.word	0x200004c4
 8005d44:	200005d8 	.word	0x200005d8
 8005d48:	200005d4 	.word	0x200005d4

08005d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d56:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <xTaskIncrementTick+0x13c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d000      	beq.n	8005d60 <xTaskIncrementTick+0x14>
 8005d5e:	e083      	b.n	8005e68 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d60:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d68:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d117      	bne.n	8005da4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d74:	4b46      	ldr	r3, [pc, #280]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <xTaskIncrementTick+0x36>
 8005d7e:	b672      	cpsid	i
 8005d80:	e7fe      	b.n	8005d80 <xTaskIncrementTick+0x34>
 8005d82:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <xTaskIncrementTick+0x148>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b40      	ldr	r3, [pc, #256]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <xTaskIncrementTick+0x148>)
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <xTaskIncrementTick+0x14c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <xTaskIncrementTick+0x14c>)
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f000 fa5a 	bl	8006258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d34e      	bcc.n	8005e4c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <xTaskIncrementTick+0x70>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <xTaskIncrementTick+0x72>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	4252      	negs	r2, r2
 8005dc8:	601a      	str	r2, [r3, #0]
					break;
 8005dca:	e03f      	b.n	8005e4c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dcc:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d203      	bcs.n	8005dec <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
						break;
 8005dea:	e02f      	b.n	8005e4c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3304      	adds	r3, #4
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7fe ffa2 	bl	8004d3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3318      	adds	r3, #24
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7fe ff99 	bl	8004d3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <xTaskIncrementTick+0x154>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d903      	bls.n	8005e1c <xTaskIncrementTick+0xd0>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <xTaskIncrementTick+0x154>)
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	0013      	movs	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <xTaskIncrementTick+0x158>)
 8005e2a:	189a      	adds	r2, r3, r2
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	0019      	movs	r1, r3
 8005e32:	0010      	movs	r0, r2
 8005e34:	f7fe ff29 	bl	8004c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <xTaskIncrementTick+0x15c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3b3      	bcc.n	8005dae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005e46:	2301      	movs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4a:	e7b0      	b.n	8005dae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e4c:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <xTaskIncrementTick+0x15c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	4914      	ldr	r1, [pc, #80]	; (8005ea4 <xTaskIncrementTick+0x158>)
 8005e54:	0013      	movs	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	585b      	ldr	r3, [r3, r1]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d907      	bls.n	8005e72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e004      	b.n	8005e72 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e68:	4b10      	ldr	r3, [pc, #64]	; (8005eac <xTaskIncrementTick+0x160>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <xTaskIncrementTick+0x160>)
 8005e70:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <xTaskIncrementTick+0x164>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b006      	add	sp, #24
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200005ec 	.word	0x200005ec
 8005e8c:	200005c8 	.word	0x200005c8
 8005e90:	2000057c 	.word	0x2000057c
 8005e94:	20000580 	.word	0x20000580
 8005e98:	200005dc 	.word	0x200005dc
 8005e9c:	200005e4 	.word	0x200005e4
 8005ea0:	200005cc 	.word	0x200005cc
 8005ea4:	200004c8 	.word	0x200004c8
 8005ea8:	200004c4 	.word	0x200004c4
 8005eac:	200005d4 	.word	0x200005d4
 8005eb0:	200005d8 	.word	0x200005d8

08005eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eba:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <vTaskSwitchContext+0x9c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <vTaskSwitchContext+0xa0>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ec8:	e03d      	b.n	8005f46 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8005eca:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <vTaskSwitchContext+0xa0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <vTaskSwitchContext+0xa4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	e007      	b.n	8005ee8 <vTaskSwitchContext+0x34>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <vTaskSwitchContext+0x2e>
 8005ede:	b672      	cpsid	i
 8005ee0:	e7fe      	b.n	8005ee0 <vTaskSwitchContext+0x2c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	491c      	ldr	r1, [pc, #112]	; (8005f5c <vTaskSwitchContext+0xa8>)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	0013      	movs	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	189b      	adds	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	585b      	ldr	r3, [r3, r1]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ee      	beq.n	8005ed8 <vTaskSwitchContext+0x24>
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	0013      	movs	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	189b      	adds	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <vTaskSwitchContext+0xa8>)
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <vTaskSwitchContext+0x76>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <vTaskSwitchContext+0xac>)
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <vTaskSwitchContext+0xa4>)
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <vTaskSwitchContext+0xac>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	334c      	adds	r3, #76	; 0x4c
 8005f40:	001a      	movs	r2, r3
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <vTaskSwitchContext+0xb0>)
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b002      	add	sp, #8
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	200005ec 	.word	0x200005ec
 8005f54:	200005d8 	.word	0x200005d8
 8005f58:	200005cc 	.word	0x200005cc
 8005f5c:	200004c8 	.word	0x200004c8
 8005f60:	200004c4 	.word	0x200004c4
 8005f64:	2000001c 	.word	0x2000001c

08005f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <vTaskPlaceOnEventList+0x14>
 8005f78:	b672      	cpsid	i
 8005f7a:	e7fe      	b.n	8005f7a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <vTaskPlaceOnEventList+0x38>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3318      	adds	r3, #24
 8005f82:	001a      	movs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	0011      	movs	r1, r2
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fe fea0 	bl	8004cce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2101      	movs	r1, #1
 8005f92:	0018      	movs	r0, r3
 8005f94:	f000 faf0 	bl	8006578 <prvAddCurrentTaskToDelayedList>
}
 8005f98:	46c0      	nop			; (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200004c4 	.word	0x200004c4

08005fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <xTaskRemoveFromEventList+0x1a>
 8005fba:	b672      	cpsid	i
 8005fbc:	e7fe      	b.n	8005fbc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3318      	adds	r3, #24
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fe feb9 	bl	8004d3a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <xTaskRemoveFromEventList+0xa0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11d      	bne.n	800600c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fe feb0 	bl	8004d3a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <xTaskRemoveFromEventList+0xa4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d903      	bls.n	8005fee <xTaskRemoveFromEventList+0x4a>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	4b17      	ldr	r3, [pc, #92]	; (8006048 <xTaskRemoveFromEventList+0xa4>)
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <xTaskRemoveFromEventList+0xa8>)
 8005ffc:	189a      	adds	r2, r3, r2
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	3304      	adds	r3, #4
 8006002:	0019      	movs	r1, r3
 8006004:	0010      	movs	r0, r2
 8006006:	f7fe fe40 	bl	8004c8a <vListInsertEnd>
 800600a:	e007      	b.n	800601c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	3318      	adds	r3, #24
 8006010:	001a      	movs	r2, r3
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <xTaskRemoveFromEventList+0xac>)
 8006014:	0011      	movs	r1, r2
 8006016:	0018      	movs	r0, r3
 8006018:	f7fe fe37 	bl	8004c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <xTaskRemoveFromEventList+0xb0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	429a      	cmp	r2, r3
 8006028:	d905      	bls.n	8006036 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e001      	b.n	800603a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b004      	add	sp, #16
 8006042:	bd80      	pop	{r7, pc}
 8006044:	200005ec 	.word	0x200005ec
 8006048:	200005cc 	.word	0x200005cc
 800604c:	200004c8 	.word	0x200004c8
 8006050:	20000584 	.word	0x20000584
 8006054:	200004c4 	.word	0x200004c4
 8006058:	200005d8 	.word	0x200005d8

0800605c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <vTaskInternalSetTimeOutState+0x20>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <vTaskInternalSetTimeOutState+0x24>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200005dc 	.word	0x200005dc
 8006080:	200005c8 	.word	0x200005c8

08006084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <xTaskCheckForTimeOut+0x14>
 8006094:	b672      	cpsid	i
 8006096:	e7fe      	b.n	8006096 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <xTaskCheckForTimeOut+0x1e>
 800609e:	b672      	cpsid	i
 80060a0:	e7fe      	b.n	80060a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80060a2:	f000 fb55 	bl	8006750 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060a6:	4b1d      	ldr	r3, [pc, #116]	; (800611c <xTaskCheckForTimeOut+0x98>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	d102      	bne.n	80060c4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e024      	b.n	800610e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b15      	ldr	r3, [pc, #84]	; (8006120 <xTaskCheckForTimeOut+0x9c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d007      	beq.n	80060e0 <xTaskCheckForTimeOut+0x5c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e016      	b.n	800610e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20c      	bcs.n	8006104 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad2      	subs	r2, r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff ffaf 	bl	800605c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e004      	b.n	800610e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800610a:	2301      	movs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800610e:	f000 fb31 	bl	8006774 <vPortExitCritical>

	return xReturn;
 8006112:	697b      	ldr	r3, [r7, #20]
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b006      	add	sp, #24
 800611a:	bd80      	pop	{r7, pc}
 800611c:	200005c8 	.word	0x200005c8
 8006120:	200005dc 	.word	0x200005dc

08006124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <vTaskMissedYield+0x10>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]
}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200005d8 	.word	0x200005d8

08006138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006140:	f000 f84e 	bl	80061e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <prvIdleTask+0x1c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d9f9      	bls.n	8006140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800614c:	f000 faf0 	bl	8006730 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006150:	e7f6      	b.n	8006140 <prvIdleTask+0x8>
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	200004c8 	.word	0x200004c8

08006158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615e:	2300      	movs	r3, #0
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	e00c      	b.n	800617e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	0013      	movs	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	189b      	adds	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <prvInitialiseTaskLists+0x68>)
 8006170:	189b      	adds	r3, r3, r2
 8006172:	0018      	movs	r0, r3
 8006174:	f7fe fd60 	bl	8004c38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3301      	adds	r3, #1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d9ef      	bls.n	8006164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006184:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <prvInitialiseTaskLists+0x6c>)
 8006186:	0018      	movs	r0, r3
 8006188:	f7fe fd56 	bl	8004c38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <prvInitialiseTaskLists+0x70>)
 800618e:	0018      	movs	r0, r3
 8006190:	f7fe fd52 	bl	8004c38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <prvInitialiseTaskLists+0x74>)
 8006196:	0018      	movs	r0, r3
 8006198:	f7fe fd4e 	bl	8004c38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <prvInitialiseTaskLists+0x78>)
 800619e:	0018      	movs	r0, r3
 80061a0:	f7fe fd4a 	bl	8004c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <prvInitialiseTaskLists+0x7c>)
 80061a6:	0018      	movs	r0, r3
 80061a8:	f7fe fd46 	bl	8004c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvInitialiseTaskLists+0x80>)
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <prvInitialiseTaskLists+0x6c>)
 80061b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvInitialiseTaskLists+0x84>)
 80061b4:	4a04      	ldr	r2, [pc, #16]	; (80061c8 <prvInitialiseTaskLists+0x70>)
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b002      	add	sp, #8
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	200004c8 	.word	0x200004c8
 80061c4:	20000554 	.word	0x20000554
 80061c8:	20000568 	.word	0x20000568
 80061cc:	20000584 	.word	0x20000584
 80061d0:	20000598 	.word	0x20000598
 80061d4:	200005b0 	.word	0x200005b0
 80061d8:	2000057c 	.word	0x2000057c
 80061dc:	20000580 	.word	0x20000580

080061e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061e6:	e01a      	b.n	800621e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80061e8:	f000 fab2 	bl	8006750 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061ec:	4b10      	ldr	r3, [pc, #64]	; (8006230 <prvCheckTasksWaitingTermination+0x50>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7fe fd9e 	bl	8004d3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <prvCheckTasksWaitingTermination+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1e5a      	subs	r2, r3, #1
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <prvCheckTasksWaitingTermination+0x54>)
 8006206:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <prvCheckTasksWaitingTermination+0x58>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	1e5a      	subs	r2, r3, #1
 800620e:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <prvCheckTasksWaitingTermination+0x58>)
 8006210:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006212:	f000 faaf 	bl	8006774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0018      	movs	r0, r3
 800621a:	f000 f80f 	bl	800623c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <prvCheckTasksWaitingTermination+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e0      	bne.n	80061e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	46bd      	mov	sp, r7
 800622a:	b002      	add	sp, #8
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	20000598 	.word	0x20000598
 8006234:	200005c4 	.word	0x200005c4
 8006238:	200005ac 	.word	0x200005ac

0800623c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	334c      	adds	r3, #76	; 0x4c
 8006248:	0018      	movs	r0, r3
 800624a:	f002 fe67 	bl	8008f1c <_reclaim_reent>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	46bd      	mov	sp, r7
 8006252:	b002      	add	sp, #8
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <prvResetNextTaskUnblockTime+0x40>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <prvResetNextTaskUnblockTime+0x14>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <prvResetNextTaskUnblockTime+0x16>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <prvResetNextTaskUnblockTime+0x44>)
 8006274:	2201      	movs	r2, #1
 8006276:	4252      	negs	r2, r2
 8006278:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800627a:	e008      	b.n	800628e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <prvResetNextTaskUnblockTime+0x40>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <prvResetNextTaskUnblockTime+0x44>)
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	46bd      	mov	sp, r7
 8006292:	b002      	add	sp, #8
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	2000057c 	.word	0x2000057c
 800629c:	200005e4 	.word	0x200005e4

080062a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <xTaskGetSchedulerState+0x30>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062ae:	2301      	movs	r3, #1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e008      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <xTaskGetSchedulerState+0x34>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062bc:	2302      	movs	r3, #2
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e001      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062c6:	687b      	ldr	r3, [r7, #4]
	}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b002      	add	sp, #8
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200005d0 	.word	0x200005d0
 80062d4:	200005ec 	.word	0x200005ec

080062d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d056      	beq.n	800639c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	4b2d      	ldr	r3, [pc, #180]	; (80063a8 <xTaskPriorityInherit+0xd0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d246      	bcs.n	800638a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	db06      	blt.n	8006312 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006304:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <xTaskPriorityInherit+0xd0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	2207      	movs	r2, #7
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6959      	ldr	r1, [r3, #20]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631a:	0013      	movs	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	189b      	adds	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <xTaskPriorityInherit+0xd4>)
 8006324:	189b      	adds	r3, r3, r2
 8006326:	4299      	cmp	r1, r3
 8006328:	d101      	bne.n	800632e <xTaskPriorityInherit+0x56>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <xTaskPriorityInherit+0x58>
 800632e:	2300      	movs	r3, #0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d022      	beq.n	800637a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	3304      	adds	r3, #4
 8006338:	0018      	movs	r0, r3
 800633a:	f7fe fcfe 	bl	8004d3a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800633e:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <xTaskPriorityInherit+0xd0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <xTaskPriorityInherit+0xd8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <xTaskPriorityInherit+0x84>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <xTaskPriorityInherit+0xd8>)
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	0013      	movs	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	189b      	adds	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a10      	ldr	r2, [pc, #64]	; (80063ac <xTaskPriorityInherit+0xd4>)
 800636a:	189a      	adds	r2, r3, r2
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	3304      	adds	r3, #4
 8006370:	0019      	movs	r1, r3
 8006372:	0010      	movs	r0, r2
 8006374:	f7fe fc89 	bl	8004c8a <vListInsertEnd>
 8006378:	e004      	b.n	8006384 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <xTaskPriorityInherit+0xd0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e008      	b.n	800639c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <xTaskPriorityInherit+0xd0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	429a      	cmp	r2, r3
 8006396:	d201      	bcs.n	800639c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800639c:	68fb      	ldr	r3, [r7, #12]
	}
 800639e:	0018      	movs	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b004      	add	sp, #16
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	200004c4 	.word	0x200004c4
 80063ac:	200004c8 	.word	0x200004c8
 80063b0:	200005cc 	.word	0x200005cc

080063b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d044      	beq.n	8006454 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063ca:	4b25      	ldr	r3, [pc, #148]	; (8006460 <xTaskPriorityDisinherit+0xac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <xTaskPriorityDisinherit+0x24>
 80063d4:	b672      	cpsid	i
 80063d6:	e7fe      	b.n	80063d6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <xTaskPriorityDisinherit+0x30>
 80063e0:	b672      	cpsid	i
 80063e2:	e7fe      	b.n	80063e2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d02c      	beq.n	8006454 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d128      	bne.n	8006454 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3304      	adds	r3, #4
 8006406:	0018      	movs	r0, r3
 8006408:	f7fe fc97 	bl	8004d3a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	2207      	movs	r2, #7
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <xTaskPriorityDisinherit+0xb0>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d903      	bls.n	8006434 <xTaskPriorityDisinherit+0x80>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <xTaskPriorityDisinherit+0xb0>)
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	0013      	movs	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	189b      	adds	r3, r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4a09      	ldr	r2, [pc, #36]	; (8006468 <xTaskPriorityDisinherit+0xb4>)
 8006442:	189a      	adds	r2, r3, r2
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3304      	adds	r3, #4
 8006448:	0019      	movs	r1, r3
 800644a:	0010      	movs	r0, r2
 800644c:	f7fe fc1d 	bl	8004c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006454:	68fb      	ldr	r3, [r7, #12]
	}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	200004c4 	.word	0x200004c4
 8006464:	200005cc 	.word	0x200005cc
 8006468:	200004c8 	.word	0x200004c8

0800646c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800647a:	2301      	movs	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05d      	beq.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800648c:	b672      	cpsid	i
 800648e:	e7fe      	b.n	800648e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d902      	bls.n	80064a0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	e002      	b.n	80064a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d047      	beq.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d142      	bne.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064ba:	4b23      	ldr	r3, [pc, #140]	; (8006548 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d101      	bne.n	80064c8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80064c4:	b672      	cpsid	i
 80064c6:	e7fe      	b.n	80064c6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db04      	blt.n	80064e6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2207      	movs	r2, #7
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0013      	movs	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	189b      	adds	r3, r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	4299      	cmp	r1, r3
 80064fa:	d101      	bne.n	8006500 <vTaskPriorityDisinheritAfterTimeout+0x94>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01c      	beq.n	8006540 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	3304      	adds	r3, #4
 800650a:	0018      	movs	r0, r3
 800650c:	f7fe fc15 	bl	8004d3a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d903      	bls.n	8006524 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	0013      	movs	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	189b      	adds	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4a06      	ldr	r2, [pc, #24]	; (800654c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006532:	189a      	adds	r2, r3, r2
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	3304      	adds	r3, #4
 8006538:	0019      	movs	r1, r3
 800653a:	0010      	movs	r0, r2
 800653c:	f7fe fba5 	bl	8004c8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b006      	add	sp, #24
 8006546:	bd80      	pop	{r7, pc}
 8006548:	200004c4 	.word	0x200004c4
 800654c:	200004c8 	.word	0x200004c8
 8006550:	200005cc 	.word	0x200005cc

08006554 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <pvTaskIncrementMutexHeldCount+0x20>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <pvTaskIncrementMutexHeldCount+0x20>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006566:	3201      	adds	r2, #1
 8006568:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800656a:	4b02      	ldr	r3, [pc, #8]	; (8006574 <pvTaskIncrementMutexHeldCount+0x20>)
 800656c:	681b      	ldr	r3, [r3, #0]
	}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	200004c4 	.word	0x200004c4

08006578 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <prvAddCurrentTaskToDelayedList+0x90>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006588:	4b20      	ldr	r3, [pc, #128]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3304      	adds	r3, #4
 800658e:	0018      	movs	r0, r3
 8006590:	f7fe fbd3 	bl	8004d3a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3301      	adds	r3, #1
 8006598:	d10b      	bne.n	80065b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a0:	4b1a      	ldr	r3, [pc, #104]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <prvAddCurrentTaskToDelayedList+0x98>)
 80065a8:	0011      	movs	r1, r2
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7fe fb6d 	bl	8004c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065b0:	e026      	b.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	18d3      	adds	r3, r2, r3
 80065b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d209      	bcs.n	80065de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3304      	adds	r3, #4
 80065d4:	0019      	movs	r1, r3
 80065d6:	0010      	movs	r0, r2
 80065d8:	f7fe fb79 	bl	8004cce <vListInsert>
}
 80065dc:	e010      	b.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3304      	adds	r3, #4
 80065e8:	0019      	movs	r1, r3
 80065ea:	0010      	movs	r0, r2
 80065ec:	f7fe fb6f 	bl	8004cce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvAddCurrentTaskToDelayedList+0xa4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d202      	bcs.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <prvAddCurrentTaskToDelayedList+0xa4>)
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	601a      	str	r2, [r3, #0]
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b004      	add	sp, #16
 8006606:	bd80      	pop	{r7, pc}
 8006608:	200005c8 	.word	0x200005c8
 800660c:	200004c4 	.word	0x200004c4
 8006610:	200005b0 	.word	0x200005b0
 8006614:	20000580 	.word	0x20000580
 8006618:	2000057c 	.word	0x2000057c
 800661c:	200005e4 	.word	0x200005e4

08006620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3b04      	subs	r3, #4
 8006630:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2280      	movs	r2, #128	; 0x80
 8006636:	0452      	lsls	r2, r2, #17
 8006638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b04      	subs	r3, #4
 800663e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3b04      	subs	r3, #4
 800664a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800664c:	4a08      	ldr	r2, [pc, #32]	; (8006670 <pxPortInitialiseStack+0x50>)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3b14      	subs	r3, #20
 8006656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3b20      	subs	r3, #32
 8006662:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006664:	68fb      	ldr	r3, [r7, #12]
}
 8006666:	0018      	movs	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	b004      	add	sp, #16
 800666c:	bd80      	pop	{r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	08006675 	.word	0x08006675

08006674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <prvTaskExitError+0x28>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	d001      	beq.n	800668a <prvTaskExitError+0x16>
 8006686:	b672      	cpsid	i
 8006688:	e7fe      	b.n	8006688 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800668a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0fc      	beq.n	800668e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000010 	.word	0x20000010

080066a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80066a4:	46c0      	nop			; (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	0000      	movs	r0, r0
 80066ac:	0000      	movs	r0, r0
	...

080066b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80066b0:	4a0b      	ldr	r2, [pc, #44]	; (80066e0 <pxCurrentTCBConst2>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	3020      	adds	r0, #32
 80066b8:	f380 8809 	msr	PSP, r0
 80066bc:	2002      	movs	r0, #2
 80066be:	f380 8814 	msr	CONTROL, r0
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80066c8:	46ae      	mov	lr, r5
 80066ca:	bc08      	pop	{r3}
 80066cc:	bc04      	pop	{r2}
 80066ce:	b662      	cpsie	i
 80066d0:	4718      	bx	r3
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	46c0      	nop			; (mov r8, r8)

080066e0 <pxCurrentTCBConst2>:
 80066e0:	200004c4 	.word	0x200004c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	46c0      	nop			; (mov r8, r8)

080066e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80066ec:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <xPortStartScheduler+0x40>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <xPortStartScheduler+0x40>)
 80066f2:	21ff      	movs	r1, #255	; 0xff
 80066f4:	0409      	lsls	r1, r1, #16
 80066f6:	430a      	orrs	r2, r1
 80066f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <xPortStartScheduler+0x40>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <xPortStartScheduler+0x40>)
 8006700:	21ff      	movs	r1, #255	; 0xff
 8006702:	0609      	lsls	r1, r1, #24
 8006704:	430a      	orrs	r2, r1
 8006706:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006708:	f000 f898 	bl	800683c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800670c:	4b07      	ldr	r3, [pc, #28]	; (800672c <xPortStartScheduler+0x44>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006712:	f7ff ffcd 	bl	80066b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006716:	f7ff fbcd 	bl	8005eb4 <vTaskSwitchContext>
	prvTaskExitError();
 800671a:	f7ff ffab 	bl	8006674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800671e:	2300      	movs	r3, #0
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	e000ed20 	.word	0xe000ed20
 800672c:	20000010 	.word	0x20000010

08006730 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <vPortYield+0x1c>)
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	0552      	lsls	r2, r2, #21
 800673a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800673c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006740:	f3bf 8f6f 	isb	sy
}
 8006744:	46c0      	nop			; (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006754:	b672      	cpsid	i
    uxCriticalNesting++;
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <vPortEnterCritical+0x20>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <vPortEnterCritical+0x20>)
 800675e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006760:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006764:	f3bf 8f6f 	isb	sy
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	20000010 	.word	0x20000010

08006774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <vPortExitCritical+0x2c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <vPortExitCritical+0x10>
 8006780:	b672      	cpsid	i
 8006782:	e7fe      	b.n	8006782 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <vPortExitCritical+0x2c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	1e5a      	subs	r2, r3, #1
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <vPortExitCritical+0x2c>)
 800678c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800678e:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <vPortExitCritical+0x2c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d100      	bne.n	8006798 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006796:	b662      	cpsie	i
    }
}
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	20000010 	.word	0x20000010

080067a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80067a4:	f3ef 8010 	mrs	r0, PRIMASK
 80067a8:	b672      	cpsid	i
 80067aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	0018      	movs	r0, r3

080067b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80067b0:	f380 8810 	msr	PRIMASK, r0
 80067b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80067b6:	46c0      	nop			; (mov r8, r8)
	...

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <pxCurrentTCBConst>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	3820      	subs	r0, #32
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80067ce:	4644      	mov	r4, r8
 80067d0:	464d      	mov	r5, r9
 80067d2:	4656      	mov	r6, sl
 80067d4:	465f      	mov	r7, fp
 80067d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80067d8:	b508      	push	{r3, lr}
 80067da:	b672      	cpsid	i
 80067dc:	f7ff fb6a 	bl	8005eb4 <vTaskSwitchContext>
 80067e0:	b662      	cpsie	i
 80067e2:	bc0c      	pop	{r2, r3}
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	6808      	ldr	r0, [r1, #0]
 80067e8:	3010      	adds	r0, #16
 80067ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067ec:	46a0      	mov	r8, r4
 80067ee:	46a9      	mov	r9, r5
 80067f0:	46b2      	mov	sl, r6
 80067f2:	46bb      	mov	fp, r7
 80067f4:	f380 8809 	msr	PSP, r0
 80067f8:	3820      	subs	r0, #32
 80067fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80067fc:	4718      	bx	r3
 80067fe:	46c0      	nop			; (mov r8, r8)

08006800 <pxCurrentTCBConst>:
 8006800:	200004c4 	.word	0x200004c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006804:	46c0      	nop			; (mov r8, r8)
 8006806:	46c0      	nop			; (mov r8, r8)

08006808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800680e:	f7ff ffc9 	bl	80067a4 <ulSetInterruptMaskFromISR>
 8006812:	0003      	movs	r3, r0
 8006814:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006816:	f7ff fa99 	bl	8005d4c <xTaskIncrementTick>
 800681a:	1e03      	subs	r3, r0, #0
 800681c:	d003      	beq.n	8006826 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <xPortSysTickHandler+0x30>)
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	0552      	lsls	r2, r2, #21
 8006824:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff ffc1 	bl	80067b0 <vClearInterruptMaskFromISR>
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b002      	add	sp, #8
 8006834:	bd80      	pop	{r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <prvSetupTimerInterrupt+0x34>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <prvSetupTimerInterrupt+0x38>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvSetupTimerInterrupt+0x3c>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	23fa      	movs	r3, #250	; 0xfa
 8006852:	0099      	lsls	r1, r3, #2
 8006854:	0010      	movs	r0, r2
 8006856:	f7f9 fc69 	bl	800012c <__udivsi3>
 800685a:	0003      	movs	r3, r0
 800685c:	001a      	movs	r2, r3
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <prvSetupTimerInterrupt+0x40>)
 8006860:	3a01      	subs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <prvSetupTimerInterrupt+0x34>)
 8006866:	2207      	movs	r2, #7
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	e000e010 	.word	0xe000e010
 8006874:	e000e018 	.word	0xe000e018
 8006878:	20000004 	.word	0x20000004
 800687c:	e000e014 	.word	0xe000e014

08006880 <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 8006880:	b5b0      	push	{r4, r5, r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	0005      	movs	r5, r0
 8006888:	000c      	movs	r4, r1
 800688a:	0010      	movs	r0, r2
 800688c:	0019      	movs	r1, r3
 800688e:	1dbb      	adds	r3, r7, #6
 8006890:	1c2a      	adds	r2, r5, #0
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	1d3b      	adds	r3, r7, #4
 8006896:	1c22      	adds	r2, r4, #0
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	1cbb      	adds	r3, r7, #2
 800689c:	1c02      	adds	r2, r0, #0
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	003b      	movs	r3, r7
 80068a2:	1c0a      	adds	r2, r1, #0
 80068a4:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 80068a6:	1cbb      	adds	r3, r7, #2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 80068b0:	1cbb      	adds	r3, r7, #2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	2201      	movs	r2, #1
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 80068c4:	e06d      	b.n	80069a2 <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 80068c6:	1dbb      	adds	r3, r7, #6
 80068c8:	881a      	ldrh	r2, [r3, #0]
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e01c      	b.n	800690c <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b298      	uxth	r0, r3
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	b29a      	uxth	r2, r3
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	18d3      	adds	r3, r2, r3
 80068e0:	b299      	uxth	r1, r3
 80068e2:	003b      	movs	r3, r7
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	001a      	movs	r2, r3
 80068e8:	f000 fc10 	bl	800710c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	b298      	uxth	r0, r3
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	1d3a      	adds	r2, r7, #4
 80068f6:	8812      	ldrh	r2, [r2, #0]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	b299      	uxth	r1, r3
 80068fc:	003b      	movs	r3, r7
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	001a      	movs	r2, r3
 8006902:	f000 fc03 	bl	800710c <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	1dbb      	adds	r3, r7, #6
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	18d3      	adds	r3, r2, r3
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	dddb      	ble.n	80068d2 <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 800691a:	1dbb      	adds	r3, r7, #6
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e01c      	b.n	8006960 <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	b298      	uxth	r0, r3
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	b29a      	uxth	r2, r3
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	18d3      	adds	r3, r2, r3
 8006934:	b299      	uxth	r1, r3
 8006936:	003b      	movs	r3, r7
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	001a      	movs	r2, r3
 800693c:	f000 fbe6 	bl	800710c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	b298      	uxth	r0, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	b29b      	uxth	r3, r3
 8006948:	1d3a      	adds	r2, r7, #4
 800694a:	8812      	ldrh	r2, [r2, #0]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	b299      	uxth	r1, r3
 8006950:	003b      	movs	r3, r7
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	001a      	movs	r2, r3
 8006956:	f000 fbd9 	bl	800710c <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	1dbb      	adds	r3, r7, #6
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	18d3      	adds	r3, r2, r3
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	dddb      	ble.n	8006926 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	3301      	adds	r3, #1
 8006972:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	18d3      	adds	r3, r2, r3
 800697a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	3302      	adds	r3, #2
 8006980:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	005a      	lsls	r2, r3, #1
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	18d3      	adds	r3, r2, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	dd09      	ble.n	80069a2 <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	3b01      	subs	r3, #1
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	18d3      	adds	r3, r2, r3
 800699a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3302      	adds	r3, #2
 80069a0:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	da8d      	bge.n	80068c6 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b00a      	add	sp, #40	; 0x28
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080069b4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	0005      	movs	r5, r0
 80069bc:	000c      	movs	r4, r1
 80069be:	0010      	movs	r0, r2
 80069c0:	0019      	movs	r1, r3
 80069c2:	1dfb      	adds	r3, r7, #7
 80069c4:	1c2a      	adds	r2, r5, #0
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	1c22      	adds	r2, r4, #0
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	1cbb      	adds	r3, r7, #2
 80069d0:	1c02      	adds	r2, r0, #0
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	003b      	movs	r3, r7
 80069d6:	1c0a      	adds	r2, r1, #0
 80069d8:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80069da:	2117      	movs	r1, #23
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	1dfa      	adds	r2, r7, #7
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b1f      	cmp	r3, #31
 80069ea:	d803      	bhi.n	80069f4 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	e005      	b.n	8006a00 <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 80069f4:	2217      	movs	r2, #23
 80069f6:	18bb      	adds	r3, r7, r2
 80069f8:	18ba      	adds	r2, r7, r2
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	3a20      	subs	r2, #32
 80069fe:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006a00:	2314      	movs	r3, #20
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e016      	b.n	8006a38 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8006a0a:	2317      	movs	r3, #23
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	2514      	movs	r5, #20
 8006a12:	197b      	adds	r3, r7, r5
 8006a14:	7818      	ldrb	r0, [r3, #0]
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	7819      	ldrb	r1, [r3, #0]
 8006a1a:	4c69      	ldr	r4, [pc, #420]	; (8006bc0 <ILI9341_Draw_Char+0x20c>)
 8006a1c:	0013      	movs	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	189b      	adds	r3, r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	18e3      	adds	r3, r4, r3
 8006a26:	5c1a      	ldrb	r2, [r3, r0]
 8006a28:	230c      	movs	r3, #12
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006a2e:	197b      	adds	r3, r7, r5
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	197b      	adds	r3, r7, r5
 8006a34:	3201      	adds	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	2314      	movs	r3, #20
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	d9e3      	bls.n	8006a0a <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8006a42:	2315      	movs	r3, #21
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e0ae      	b.n	8006baa <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8006a4c:	2316      	movs	r3, #22
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e09d      	b.n	8006b92 <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 8006a56:	2315      	movs	r3, #21
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	220c      	movs	r2, #12
 8006a5e:	18ba      	adds	r2, r7, r2
 8006a60:	5cd3      	ldrb	r3, [r2, r3]
 8006a62:	001a      	movs	r2, r3
 8006a64:	2316      	movs	r3, #22
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	411a      	asrs	r2, r3
 8006a6c:	0013      	movs	r3, r2
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4013      	ands	r3, r2
 8006a72:	d043      	beq.n	8006afc <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 8006a74:	2328      	movs	r3, #40	; 0x28
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d115      	bne.n	8006aaa <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8006a7e:	2315      	movs	r3, #21
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	1d3b      	adds	r3, r7, #4
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	18d3      	adds	r3, r2, r3
 8006a8c:	b298      	uxth	r0, r3
 8006a8e:	2316      	movs	r3, #22
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	1cbb      	adds	r3, r7, #2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	18d3      	adds	r3, r2, r3
 8006a9c:	b299      	uxth	r1, r3
 8006a9e:	003b      	movs	r3, r7
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	001a      	movs	r2, r3
 8006aa4:	f000 fb32 	bl	800710c <ILI9341_Draw_Pixel>
 8006aa8:	e06d      	b.n	8006b86 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8006aaa:	2315      	movs	r3, #21
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2128      	movs	r1, #40	; 0x28
 8006ab4:	187a      	adds	r2, r7, r1
 8006ab6:	8812      	ldrh	r2, [r2, #0]
 8006ab8:	4353      	muls	r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	1d3b      	adds	r3, r7, #4
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	18d3      	adds	r3, r2, r3
 8006ac2:	b298      	uxth	r0, r3
 8006ac4:	2316      	movs	r3, #22
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	000c      	movs	r4, r1
 8006ace:	187a      	adds	r2, r7, r1
 8006ad0:	8812      	ldrh	r2, [r2, #0]
 8006ad2:	4353      	muls	r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	1cbb      	adds	r3, r7, #2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	b299      	uxth	r1, r3
 8006ade:	0022      	movs	r2, r4
 8006ae0:	193b      	adds	r3, r7, r4
 8006ae2:	881c      	ldrh	r4, [r3, #0]
 8006ae4:	0013      	movs	r3, r2
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	2301      	movs	r3, #1
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	003b      	movs	r3, r7
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	0023      	movs	r3, r4
 8006af6:	f000 fc7d 	bl	80073f4 <ILI9341_Draw_Rectangle>
 8006afa:	e044      	b.n	8006b86 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 8006afc:	2328      	movs	r3, #40	; 0x28
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d116      	bne.n	8006b34 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8006b06:	2315      	movs	r3, #21
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	18d3      	adds	r3, r2, r3
 8006b14:	b298      	uxth	r0, r3
 8006b16:	2316      	movs	r3, #22
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	1cbb      	adds	r3, r7, #2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	18d3      	adds	r3, r2, r3
 8006b24:	b299      	uxth	r1, r3
 8006b26:	232c      	movs	r3, #44	; 0x2c
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	001a      	movs	r2, r3
 8006b2e:	f000 faed 	bl	800710c <ILI9341_Draw_Pixel>
 8006b32:	e028      	b.n	8006b86 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8006b34:	2315      	movs	r3, #21
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2128      	movs	r1, #40	; 0x28
 8006b3e:	187a      	adds	r2, r7, r1
 8006b40:	8812      	ldrh	r2, [r2, #0]
 8006b42:	4353      	muls	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	18d3      	adds	r3, r2, r3
 8006b4c:	b298      	uxth	r0, r3
 8006b4e:	2316      	movs	r3, #22
 8006b50:	18fb      	adds	r3, r7, r3
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	000c      	movs	r4, r1
 8006b58:	187a      	adds	r2, r7, r1
 8006b5a:	8812      	ldrh	r2, [r2, #0]
 8006b5c:	4353      	muls	r3, r2
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	1cbb      	adds	r3, r7, #2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	b299      	uxth	r1, r3
 8006b68:	0022      	movs	r2, r4
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	881c      	ldrh	r4, [r3, #0]
 8006b6e:	0013      	movs	r3, r2
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	2301      	movs	r3, #1
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	232c      	movs	r3, #44	; 0x2c
 8006b7a:	18fb      	adds	r3, r7, r3
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	0023      	movs	r3, r4
 8006b82:	f000 fc37 	bl	80073f4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8006b86:	2116      	movs	r1, #22
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	3201      	adds	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	2316      	movs	r3, #22
 8006b94:	18fb      	adds	r3, r7, r3
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	d800      	bhi.n	8006b9e <ILI9341_Draw_Char+0x1ea>
 8006b9c:	e75b      	b.n	8006a56 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 8006b9e:	2115      	movs	r1, #21
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	187b      	adds	r3, r7, r1
 8006ba6:	3201      	adds	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	2315      	movs	r3, #21
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d800      	bhi.n	8006bb6 <ILI9341_Draw_Char+0x202>
 8006bb4:	e74a      	b.n	8006a4c <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	b006      	add	sp, #24
 8006bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	0800bee8 	.word	0x0800bee8

08006bc4 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	000c      	movs	r4, r1
 8006bce:	0010      	movs	r0, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	250a      	movs	r5, #10
 8006bd4:	197b      	adds	r3, r7, r5
 8006bd6:	1c22      	adds	r2, r4, #0
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	2608      	movs	r6, #8
 8006bdc:	19bb      	adds	r3, r7, r6
 8006bde:	1c02      	adds	r2, r0, #0
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	1dbb      	adds	r3, r7, #6
 8006be4:	1c0a      	adds	r2, r1, #0
 8006be6:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8006be8:	197b      	adds	r3, r7, r5
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b298      	uxth	r0, r3
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	4694      	mov	ip, r2
 8006bf6:	44bc      	add	ip, r7
 8006bf8:	4463      	add	r3, ip
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	2124      	movs	r1, #36	; 0x24
 8006c02:	2308      	movs	r3, #8
 8006c04:	18fc      	adds	r4, r7, r3
 8006c06:	1863      	adds	r3, r4, r1
 8006c08:	881c      	ldrh	r4, [r3, #0]
 8006c0a:	19bb      	adds	r3, r7, r6
 8006c0c:	8819      	ldrh	r1, [r3, #0]
 8006c0e:	0023      	movs	r3, r4
 8006c10:	f000 f974 	bl	8006efc <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8006c14:	197b      	adds	r3, r7, r5
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	3b02      	subs	r3, #2
 8006c1a:	b298      	uxth	r0, r3
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	2208      	movs	r2, #8
 8006c20:	4694      	mov	ip, r2
 8006c22:	44bc      	add	ip, r7
 8006c24:	4463      	add	r3, ip
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	2124      	movs	r1, #36	; 0x24
 8006c2e:	2308      	movs	r3, #8
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	185b      	adds	r3, r3, r1
 8006c34:	881c      	ldrh	r4, [r3, #0]
 8006c36:	19bb      	adds	r3, r7, r6
 8006c38:	8819      	ldrh	r1, [r3, #0]
 8006c3a:	0023      	movs	r3, r4
 8006c3c:	f000 f95e 	bl	8006efc <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8006c40:	e029      	b.n	8006c96 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	60fa      	str	r2, [r7, #12]
 8006c48:	7818      	ldrb	r0, [r3, #0]
 8006c4a:	1dbb      	adds	r3, r7, #6
 8006c4c:	881c      	ldrh	r4, [r3, #0]
 8006c4e:	2308      	movs	r3, #8
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	881a      	ldrh	r2, [r3, #0]
 8006c54:	250a      	movs	r5, #10
 8006c56:	197b      	adds	r3, r7, r5
 8006c58:	8819      	ldrh	r1, [r3, #0]
 8006c5a:	2324      	movs	r3, #36	; 0x24
 8006c5c:	2608      	movs	r6, #8
 8006c5e:	46b4      	mov	ip, r6
 8006c60:	44bc      	add	ip, r7
 8006c62:	4463      	add	r3, ip
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	2620      	movs	r6, #32
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	199b      	adds	r3, r3, r6
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	0023      	movs	r3, r4
 8006c76:	f7ff fe9d 	bl	80069b4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	199b      	adds	r3, r3, r6
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	1c1a      	adds	r2, r3, #0
 8006c84:	1892      	adds	r2, r2, r2
 8006c86:	18d3      	adds	r3, r2, r3
 8006c88:	18db      	adds	r3, r3, r3
 8006c8a:	b299      	uxth	r1, r3
 8006c8c:	197b      	adds	r3, r7, r5
 8006c8e:	197a      	adds	r2, r7, r5
 8006c90:	8812      	ldrh	r2, [r2, #0]
 8006c92:	188a      	adds	r2, r1, r2
 8006c94:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1d1      	bne.n	8006c42 <ILI9341_Draw_Text+0x7e>
    }


}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b005      	add	sp, #20
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ca6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8006caa:	f000 fcc1 	bl	8007630 <_LCD_Enable>
	ILI9341_SPI_Init();
 8006cae:	f000 f909 	bl	8006ec4 <ILI9341_SPI_Init>
	_LCD_Reset();
 8006cb2:	f000 fccb 	bl	800764c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f000 fdc8 	bl	800784c <_LCD_SendCommand>
	HAL_Delay(2000);
 8006cbc:	23fa      	movs	r3, #250	; 0xfa
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fb fff3 	bl	8002cac <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8006cc6:	20cb      	movs	r0, #203	; 0xcb
 8006cc8:	f000 fdc0 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8006ccc:	2039      	movs	r0, #57	; 0x39
 8006cce:	f000 fdf3 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8006cd2:	202c      	movs	r0, #44	; 0x2c
 8006cd4:	f000 fdf0 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f000 fded 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x34);
 8006cde:	2034      	movs	r0, #52	; 0x34
 8006ce0:	f000 fdea 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x02);
 8006ce4:	2002      	movs	r0, #2
 8006ce6:	f000 fde7 	bl	80078b8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8006cea:	20cf      	movs	r0, #207	; 0xcf
 8006cec:	f000 fdae 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f000 fde1 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8006cf6:	20c1      	movs	r0, #193	; 0xc1
 8006cf8:	f000 fdde 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x30);
 8006cfc:	2030      	movs	r0, #48	; 0x30
 8006cfe:	f000 fddb 	bl	80078b8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8006d02:	20e8      	movs	r0, #232	; 0xe8
 8006d04:	f000 fda2 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8006d08:	2085      	movs	r0, #133	; 0x85
 8006d0a:	f000 fdd5 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006d0e:	2000      	movs	r0, #0
 8006d10:	f000 fdd2 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x78);
 8006d14:	2078      	movs	r0, #120	; 0x78
 8006d16:	f000 fdcf 	bl	80078b8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8006d1a:	20ea      	movs	r0, #234	; 0xea
 8006d1c:	f000 fd96 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006d20:	2000      	movs	r0, #0
 8006d22:	f000 fdc9 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006d26:	2000      	movs	r0, #0
 8006d28:	f000 fdc6 	bl	80078b8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8006d2c:	20ed      	movs	r0, #237	; 0xed
 8006d2e:	f000 fd8d 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8006d32:	2064      	movs	r0, #100	; 0x64
 8006d34:	f000 fdc0 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x03);
 8006d38:	2003      	movs	r0, #3
 8006d3a:	f000 fdbd 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x12);
 8006d3e:	2012      	movs	r0, #18
 8006d40:	f000 fdba 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x81);
 8006d44:	2081      	movs	r0, #129	; 0x81
 8006d46:	f000 fdb7 	bl	80078b8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8006d4a:	20f7      	movs	r0, #247	; 0xf7
 8006d4c:	f000 fd7e 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8006d50:	2020      	movs	r0, #32
 8006d52:	f000 fdb1 	bl	80078b8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8006d56:	20c0      	movs	r0, #192	; 0xc0
 8006d58:	f000 fd78 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8006d5c:	2023      	movs	r0, #35	; 0x23
 8006d5e:	f000 fdab 	bl	80078b8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8006d62:	20c1      	movs	r0, #193	; 0xc1
 8006d64:	f000 fd72 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8006d68:	2010      	movs	r0, #16
 8006d6a:	f000 fda5 	bl	80078b8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8006d6e:	20c5      	movs	r0, #197	; 0xc5
 8006d70:	f000 fd6c 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8006d74:	203e      	movs	r0, #62	; 0x3e
 8006d76:	f000 fd9f 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x28);
 8006d7a:	2028      	movs	r0, #40	; 0x28
 8006d7c:	f000 fd9c 	bl	80078b8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8006d80:	20c7      	movs	r0, #199	; 0xc7
 8006d82:	f000 fd63 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8006d86:	2086      	movs	r0, #134	; 0x86
 8006d88:	f000 fd96 	bl	80078b8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8006d8c:	2036      	movs	r0, #54	; 0x36
 8006d8e:	f000 fd5d 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8006d92:	2048      	movs	r0, #72	; 0x48
 8006d94:	f000 fd90 	bl	80078b8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8006d98:	203a      	movs	r0, #58	; 0x3a
 8006d9a:	f000 fd57 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8006d9e:	2055      	movs	r0, #85	; 0x55
 8006da0:	f000 fd8a 	bl	80078b8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8006da4:	20b1      	movs	r0, #177	; 0xb1
 8006da6:	f000 fd51 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006daa:	2000      	movs	r0, #0
 8006dac:	f000 fd84 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x18);
 8006db0:	2018      	movs	r0, #24
 8006db2:	f000 fd81 	bl	80078b8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8006db6:	20b6      	movs	r0, #182	; 0xb6
 8006db8:	f000 fd48 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8006dbc:	2008      	movs	r0, #8
 8006dbe:	f000 fd7b 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x82);
 8006dc2:	2082      	movs	r0, #130	; 0x82
 8006dc4:	f000 fd78 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x27);
 8006dc8:	2027      	movs	r0, #39	; 0x27
 8006dca:	f000 fd75 	bl	80078b8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8006dce:	20f2      	movs	r0, #242	; 0xf2
 8006dd0:	f000 fd3c 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f000 fd6f 	bl	80078b8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8006dda:	2026      	movs	r0, #38	; 0x26
 8006ddc:	f000 fd36 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8006de0:	2001      	movs	r0, #1
 8006de2:	f000 fd69 	bl	80078b8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8006de6:	20e0      	movs	r0, #224	; 0xe0
 8006de8:	f000 fd30 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8006dec:	200f      	movs	r0, #15
 8006dee:	f000 fd63 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x31);
 8006df2:	2031      	movs	r0, #49	; 0x31
 8006df4:	f000 fd60 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8006df8:	202b      	movs	r0, #43	; 0x2b
 8006dfa:	f000 fd5d 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8006dfe:	200c      	movs	r0, #12
 8006e00:	f000 fd5a 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006e04:	200e      	movs	r0, #14
 8006e06:	f000 fd57 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x08);
 8006e0a:	2008      	movs	r0, #8
 8006e0c:	f000 fd54 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8006e10:	204e      	movs	r0, #78	; 0x4e
 8006e12:	f000 fd51 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8006e16:	20f1      	movs	r0, #241	; 0xf1
 8006e18:	f000 fd4e 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x37);
 8006e1c:	2037      	movs	r0, #55	; 0x37
 8006e1e:	f000 fd4b 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x07);
 8006e22:	2007      	movs	r0, #7
 8006e24:	f000 fd48 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x10);
 8006e28:	2010      	movs	r0, #16
 8006e2a:	f000 fd45 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x03);
 8006e2e:	2003      	movs	r0, #3
 8006e30:	f000 fd42 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006e34:	200e      	movs	r0, #14
 8006e36:	f000 fd3f 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x09);
 8006e3a:	2009      	movs	r0, #9
 8006e3c:	f000 fd3c 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x00);
 8006e40:	2000      	movs	r0, #0
 8006e42:	f000 fd39 	bl	80078b8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8006e46:	20e1      	movs	r0, #225	; 0xe1
 8006e48:	f000 fd00 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f000 fd33 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8006e52:	200e      	movs	r0, #14
 8006e54:	f000 fd30 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x14);
 8006e58:	2014      	movs	r0, #20
 8006e5a:	f000 fd2d 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x03);
 8006e5e:	2003      	movs	r0, #3
 8006e60:	f000 fd2a 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x11);
 8006e64:	2011      	movs	r0, #17
 8006e66:	f000 fd27 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x07);
 8006e6a:	2007      	movs	r0, #7
 8006e6c:	f000 fd24 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x31);
 8006e70:	2031      	movs	r0, #49	; 0x31
 8006e72:	f000 fd21 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8006e76:	20c1      	movs	r0, #193	; 0xc1
 8006e78:	f000 fd1e 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x48);
 8006e7c:	2048      	movs	r0, #72	; 0x48
 8006e7e:	f000 fd1b 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x08);
 8006e82:	2008      	movs	r0, #8
 8006e84:	f000 fd18 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8006e88:	200f      	movs	r0, #15
 8006e8a:	f000 fd15 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8006e8e:	200c      	movs	r0, #12
 8006e90:	f000 fd12 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x31);
 8006e94:	2031      	movs	r0, #49	; 0x31
 8006e96:	f000 fd0f 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x36);
 8006e9a:	2036      	movs	r0, #54	; 0x36
 8006e9c:	f000 fd0c 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8006ea0:	200f      	movs	r0, #15
 8006ea2:	f000 fd09 	bl	80078b8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8006ea6:	2011      	movs	r0, #17
 8006ea8:	f000 fcd0 	bl	800784c <_LCD_SendCommand>
	HAL_Delay(240);
 8006eac:	20f0      	movs	r0, #240	; 0xf0
 8006eae:	f7fb fefd 	bl	8002cac <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8006eb2:	2029      	movs	r0, #41	; 0x29
 8006eb4:	f000 fcca 	bl	800784c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f000 fb69 	bl	8007590 <ILI9341_Set_Rotation>
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <ILI9341_SPI_Init+0x30>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2240      	movs	r2, #64	; 0x40
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d005      	beq.n	8006ee0 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <ILI9341_SPI_Init+0x30>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <ILI9341_SPI_Init+0x30>)
 8006eda:	2140      	movs	r1, #64	; 0x40
 8006edc:	430a      	orrs	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <ILI9341_SPI_Init+0x34>)
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <ILI9341_SPI_Init+0x34>)
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	438a      	bics	r2, r1
 8006eea:	615a      	str	r2, [r3, #20]
}
 8006eec:	46c0      	nop			; (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	40013000 	.word	0x40013000
 8006ef8:	48000800 	.word	0x48000800

08006efc <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8006efc:	b5b0      	push	{r4, r5, r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	0005      	movs	r5, r0
 8006f04:	000c      	movs	r4, r1
 8006f06:	0010      	movs	r0, r2
 8006f08:	0019      	movs	r1, r3
 8006f0a:	1dbb      	adds	r3, r7, #6
 8006f0c:	1c2a      	adds	r2, r5, #0
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	1d3b      	adds	r3, r7, #4
 8006f12:	1c22      	adds	r2, r4, #0
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	1cbb      	adds	r3, r7, #2
 8006f18:	1c02      	adds	r2, r0, #0
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	003b      	movs	r3, r7
 8006f1e:	1c0a      	adds	r2, r1, #0
 8006f20:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <ILI9341_Draw_Vertical_Line+0x104>)
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	1dba      	adds	r2, r7, #6
 8006f2a:	8812      	ldrh	r2, [r2, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d300      	bcc.n	8006f32 <ILI9341_Draw_Vertical_Line+0x36>
 8006f30:	e062      	b.n	8006ff8 <ILI9341_Draw_Vertical_Line+0xfc>
 8006f32:	4b34      	ldr	r3, [pc, #208]	; (8007004 <ILI9341_Draw_Vertical_Line+0x108>)
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	1d3a      	adds	r2, r7, #4
 8006f3a:	8812      	ldrh	r2, [r2, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d25b      	bcs.n	8006ff8 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	881a      	ldrh	r2, [r3, #0]
 8006f44:	1cbb      	adds	r3, r7, #2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <ILI9341_Draw_Vertical_Line+0x108>)
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	b292      	uxth	r2, r2
 8006f52:	4293      	cmp	r3, r2
 8006f54:	db07      	blt.n	8006f66 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8006f56:	4b2b      	ldr	r3, [pc, #172]	; (8007004 <ILI9341_Draw_Vertical_Line+0x108>)
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b299      	uxth	r1, r3
 8006f5c:	1cbb      	adds	r3, r7, #2
 8006f5e:	1d3a      	adds	r2, r7, #4
 8006f60:	8812      	ldrh	r2, [r2, #0]
 8006f62:	1a8a      	subs	r2, r1, r2
 8006f64:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8006f66:	1d3a      	adds	r2, r7, #4
 8006f68:	1cbb      	adds	r3, r7, #2
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29c      	uxth	r4, r3
 8006f76:	1dbb      	adds	r3, r7, #6
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	1d3b      	adds	r3, r7, #4
 8006f7c:	8819      	ldrh	r1, [r3, #0]
 8006f7e:	1dbb      	adds	r3, r7, #6
 8006f80:	8818      	ldrh	r0, [r3, #0]
 8006f82:	0023      	movs	r3, r4
 8006f84:	f000 f840 	bl	8007008 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8006f88:	230f      	movs	r3, #15
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8006f90:	1cbb      	adds	r3, r7, #2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	4013      	ands	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <ILI9341_Draw_Vertical_Line+0xbc>
 8006f9a:	1cbb      	adds	r3, r7, #2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d90a      	bls.n	8006fb8 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8006fa2:	230f      	movs	r3, #15
 8006fa4:	18fb      	adds	r3, r7, r3
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8006faa:	1cbb      	adds	r3, r7, #2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	1cba      	adds	r2, r7, #2
 8006fb4:	18db      	adds	r3, r3, r3
 8006fb6:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8006fb8:	230f      	movs	r3, #15
 8006fba:	18fb      	adds	r3, r7, r3
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8006fc2:	1d3a      	adds	r2, r7, #4
 8006fc4:	1cbb      	adds	r3, r7, #2
 8006fc6:	8812      	ldrh	r2, [r2, #0]
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	18d3      	adds	r3, r2, r3
 8006fcc:	b299      	uxth	r1, r3
 8006fce:	003b      	movs	r3, r7
 8006fd0:	881a      	ldrh	r2, [r3, #0]
 8006fd2:	1dbb      	adds	r3, r7, #6
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f898 	bl	800710c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8006fdc:	1cbb      	adds	r3, r7, #2
 8006fde:	881c      	ldrh	r4, [r3, #0]
 8006fe0:	003b      	movs	r3, r7
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	1d3b      	adds	r3, r7, #4
 8006fe6:	8819      	ldrh	r1, [r3, #0]
 8006fe8:	1dbb      	adds	r3, r7, #6
 8006fea:	8818      	ldrh	r0, [r3, #0]
 8006fec:	2303      	movs	r3, #3
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	0023      	movs	r3, r4
 8006ff2:	f000 fb4b 	bl	800768c <_LCD_Write_Frame>
 8006ff6:	e000      	b.n	8006ffa <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8006ff8:	46c0      	nop			; (mov r8, r8)
}
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b004      	add	sp, #16
 8006ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8007000:	20000016 	.word	0x20000016
 8007004:	20000014 	.word	0x20000014

08007008 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8007008:	b5b0      	push	{r4, r5, r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	0005      	movs	r5, r0
 8007010:	000c      	movs	r4, r1
 8007012:	0010      	movs	r0, r2
 8007014:	0019      	movs	r1, r3
 8007016:	1dbb      	adds	r3, r7, #6
 8007018:	1c2a      	adds	r2, r5, #0
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	1c22      	adds	r2, r4, #0
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	1cbb      	adds	r3, r7, #2
 8007024:	1c02      	adds	r2, r0, #0
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	003b      	movs	r3, r7
 800702a:	1c0a      	adds	r2, r1, #0
 800702c:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800702e:	202a      	movs	r0, #42	; 0x2a
 8007030:	f000 fc0c 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8007034:	1dbb      	adds	r3, r7, #6
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	b29b      	uxth	r3, r3
 800703c:	b2db      	uxtb	r3, r3
 800703e:	0018      	movs	r0, r3
 8007040:	f000 fc3a 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(sc);
 8007044:	1dbb      	adds	r3, r7, #6
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	0018      	movs	r0, r3
 800704c:	f000 fc34 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8007050:	1cbb      	adds	r3, r7, #2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	b29b      	uxth	r3, r3
 8007058:	b2db      	uxtb	r3, r3
 800705a:	0018      	movs	r0, r3
 800705c:	f000 fc2c 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(ec);
 8007060:	1cbb      	adds	r3, r7, #2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	0018      	movs	r0, r3
 8007068:	f000 fc26 	bl	80078b8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800706c:	202b      	movs	r0, #43	; 0x2b
 800706e:	f000 fbed 	bl	800784c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	0a1b      	lsrs	r3, r3, #8
 8007078:	b29b      	uxth	r3, r3
 800707a:	b2db      	uxtb	r3, r3
 800707c:	0018      	movs	r0, r3
 800707e:	f000 fc1b 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(sp);
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	0018      	movs	r0, r3
 800708a:	f000 fc15 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800708e:	003b      	movs	r3, r7
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	b29b      	uxth	r3, r3
 8007096:	b2db      	uxtb	r3, r3
 8007098:	0018      	movs	r0, r3
 800709a:	f000 fc0d 	bl	80078b8 <_LCD_SendData>
	_LCD_SendData(ep);
 800709e:	003b      	movs	r3, r7
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	0018      	movs	r0, r3
 80070a6:	f000 fc07 	bl	80078b8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 80070aa:	202c      	movs	r0, #44	; 0x2c
 80070ac:	f000 fbce 	bl	800784c <_LCD_SendCommand>
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b002      	add	sp, #8
 80070b6:	bdb0      	pop	{r4, r5, r7, pc}

080070b8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af02      	add	r7, sp, #8
 80070be:	0002      	movs	r2, r0
 80070c0:	1dbb      	adds	r3, r7, #6
 80070c2:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 80070c4:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <ILI9341_Fill_Screen+0x4c>)
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <ILI9341_Fill_Screen+0x50>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2100      	movs	r1, #0
 80070d2:	2000      	movs	r0, #0
 80070d4:	f7ff ff98 	bl	8007008 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <ILI9341_Fill_Screen+0x4c>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	001a      	movs	r2, r3
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <ILI9341_Fill_Screen+0x50>)
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4353      	muls	r3, r2
 80070e8:	0019      	movs	r1, r3
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	2304      	movs	r3, #4
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	000b      	movs	r3, r1
 80070f4:	2100      	movs	r1, #0
 80070f6:	2000      	movs	r0, #0
 80070f8:	f000 fac8 	bl	800768c <_LCD_Write_Frame>
}
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000016 	.word	0x20000016
 8007108:	20000014 	.word	0x20000014

0800710c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b08f      	sub	sp, #60	; 0x3c
 8007110:	af00      	add	r7, sp, #0
 8007112:	0004      	movs	r4, r0
 8007114:	0008      	movs	r0, r1
 8007116:	0011      	movs	r1, r2
 8007118:	1dbb      	adds	r3, r7, #6
 800711a:	1c22      	adds	r2, r4, #0
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	1d3b      	adds	r3, r7, #4
 8007120:	1c02      	adds	r2, r0, #0
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	1cbb      	adds	r3, r7, #2
 8007126:	1c0a      	adds	r2, r1, #0
 8007128:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800712a:	4bae      	ldr	r3, [pc, #696]	; (80073e4 <ILI9341_Draw_Pixel+0x2d8>)
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	1dba      	adds	r2, r7, #6
 8007132:	8812      	ldrh	r2, [r2, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d300      	bcc.n	800713a <ILI9341_Draw_Pixel+0x2e>
 8007138:	e150      	b.n	80073dc <ILI9341_Draw_Pixel+0x2d0>
 800713a:	4bab      	ldr	r3, [pc, #684]	; (80073e8 <ILI9341_Draw_Pixel+0x2dc>)
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	1d3a      	adds	r2, r7, #4
 8007142:	8812      	ldrh	r2, [r2, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d300      	bcc.n	800714a <ILI9341_Draw_Pixel+0x3e>
 8007148:	e148      	b.n	80073dc <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800714a:	4ba8      	ldr	r3, [pc, #672]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	4ba7      	ldr	r3, [pc, #668]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 8007150:	2101      	movs	r1, #1
 8007152:	438a      	bics	r2, r1
 8007154:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007156:	4ba6      	ldr	r3, [pc, #664]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007158:	695a      	ldr	r2, [r3, #20]
 800715a:	4ba5      	ldr	r3, [pc, #660]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800715c:	2110      	movs	r1, #16
 800715e:	438a      	bics	r2, r1
 8007160:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8007162:	220a      	movs	r2, #10
 8007164:	2100      	movs	r1, #0
 8007166:	202a      	movs	r0, #42	; 0x2a
 8007168:	f000 fbdc 	bl	8007924 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800716c:	2300      	movs	r3, #0
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
 8007170:	e008      	b.n	8007184 <ILI9341_Draw_Pixel+0x78>
 8007172:	4b9f      	ldr	r3, [pc, #636]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	4b9e      	ldr	r3, [pc, #632]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007178:	2110      	movs	r1, #16
 800717a:	438a      	bics	r2, r1
 800717c:	615a      	str	r2, [r3, #20]
 800717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007180:	3301      	adds	r3, #1
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	2b02      	cmp	r3, #2
 8007188:	ddf3      	ble.n	8007172 <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800718a:	4b98      	ldr	r3, [pc, #608]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	4b97      	ldr	r3, [pc, #604]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 8007190:	2101      	movs	r1, #1
 8007192:	430a      	orrs	r2, r1
 8007194:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007196:	4b96      	ldr	r3, [pc, #600]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	4b95      	ldr	r3, [pc, #596]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800719c:	2110      	movs	r1, #16
 800719e:	430a      	orrs	r2, r1
 80071a0:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80071a2:	4b93      	ldr	r3, [pc, #588]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	4b92      	ldr	r3, [pc, #584]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80071a8:	2110      	movs	r1, #16
 80071aa:	438a      	bics	r2, r1
 80071ac:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 80071ae:	1dbb      	adds	r3, r7, #6
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	2114      	movs	r1, #20
 80071ba:	187b      	adds	r3, r7, r1
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	1dbb      	adds	r3, r7, #6
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	187b      	adds	r3, r7, r1
 80071c6:	705a      	strb	r2, [r3, #1]
 80071c8:	1dbb      	adds	r3, r7, #6
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	3301      	adds	r3, #1
 80071ce:	121b      	asrs	r3, r3, #8
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	709a      	strb	r2, [r3, #2]
 80071d6:	1dbb      	adds	r3, r7, #6
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	3301      	adds	r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 80071e4:	1878      	adds	r0, r7, r1
 80071e6:	230a      	movs	r3, #10
 80071e8:	2200      	movs	r2, #0
 80071ea:	2104      	movs	r1, #4
 80071ec:	f000 fbd4 	bl	8007998 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80071f0:	2300      	movs	r3, #0
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30
 80071f4:	e008      	b.n	8007208 <ILI9341_Draw_Pixel+0xfc>
 80071f6:	4b7e      	ldr	r3, [pc, #504]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	4b7d      	ldr	r3, [pc, #500]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80071fc:	2110      	movs	r1, #16
 80071fe:	438a      	bics	r2, r1
 8007200:	615a      	str	r2, [r3, #20]
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	3301      	adds	r3, #1
 8007206:	633b      	str	r3, [r7, #48]	; 0x30
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2b02      	cmp	r3, #2
 800720c:	ddf3      	ble.n	80071f6 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800720e:	4b78      	ldr	r3, [pc, #480]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007210:	695a      	ldr	r2, [r3, #20]
 8007212:	4b77      	ldr	r3, [pc, #476]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007214:	2110      	movs	r1, #16
 8007216:	430a      	orrs	r2, r1
 8007218:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800721a:	4b74      	ldr	r3, [pc, #464]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	4b73      	ldr	r3, [pc, #460]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 8007220:	2101      	movs	r1, #1
 8007222:	438a      	bics	r2, r1
 8007224:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007226:	4b72      	ldr	r3, [pc, #456]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	4b71      	ldr	r3, [pc, #452]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800722c:	2110      	movs	r1, #16
 800722e:	438a      	bics	r2, r1
 8007230:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8007232:	220a      	movs	r2, #10
 8007234:	2100      	movs	r1, #0
 8007236:	202b      	movs	r0, #43	; 0x2b
 8007238:	f000 fb74 	bl	8007924 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800723c:	2300      	movs	r3, #0
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007240:	e008      	b.n	8007254 <ILI9341_Draw_Pixel+0x148>
 8007242:	4b6b      	ldr	r3, [pc, #428]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	4b6a      	ldr	r3, [pc, #424]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007248:	2110      	movs	r1, #16
 800724a:	438a      	bics	r2, r1
 800724c:	615a      	str	r2, [r3, #20]
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	3301      	adds	r3, #1
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	2b02      	cmp	r3, #2
 8007258:	ddf3      	ble.n	8007242 <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800725a:	4b64      	ldr	r3, [pc, #400]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 800725c:	695a      	ldr	r2, [r3, #20]
 800725e:	4b63      	ldr	r3, [pc, #396]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 8007260:	2101      	movs	r1, #1
 8007262:	430a      	orrs	r2, r1
 8007264:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007266:	4b62      	ldr	r3, [pc, #392]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	4b61      	ldr	r3, [pc, #388]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800726c:	2110      	movs	r1, #16
 800726e:	430a      	orrs	r2, r1
 8007270:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007272:	4b5f      	ldr	r3, [pc, #380]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007278:	2110      	movs	r1, #16
 800727a:	438a      	bics	r2, r1
 800727c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	b29b      	uxth	r3, r3
 8007286:	b2da      	uxtb	r2, r3
 8007288:	2110      	movs	r1, #16
 800728a:	187b      	adds	r3, r7, r1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	1d3b      	adds	r3, r7, #4
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	187b      	adds	r3, r7, r1
 8007296:	705a      	strb	r2, [r3, #1]
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	121b      	asrs	r3, r3, #8
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	709a      	strb	r2, [r3, #2]
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	3301      	adds	r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 80072b4:	1878      	adds	r0, r7, r1
 80072b6:	230a      	movs	r3, #10
 80072b8:	2200      	movs	r2, #0
 80072ba:	2104      	movs	r1, #4
 80072bc:	f000 fb6c 	bl	8007998 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80072c0:	2300      	movs	r3, #0
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	e008      	b.n	80072d8 <ILI9341_Draw_Pixel+0x1cc>
 80072c6:	4b4a      	ldr	r3, [pc, #296]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	4b49      	ldr	r3, [pc, #292]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072cc:	2110      	movs	r1, #16
 80072ce:	438a      	bics	r2, r1
 80072d0:	615a      	str	r2, [r3, #20]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	3301      	adds	r3, #1
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b02      	cmp	r3, #2
 80072dc:	ddf3      	ble.n	80072c6 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80072de:	4b44      	ldr	r3, [pc, #272]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	4b43      	ldr	r3, [pc, #268]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072e4:	2110      	movs	r1, #16
 80072e6:	430a      	orrs	r2, r1
 80072e8:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 80072ec:	695a      	ldr	r2, [r3, #20]
 80072ee:	4b3f      	ldr	r3, [pc, #252]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 80072f0:	2101      	movs	r1, #1
 80072f2:	438a      	bics	r2, r1
 80072f4:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80072f6:	4b3e      	ldr	r3, [pc, #248]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	4b3d      	ldr	r3, [pc, #244]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80072fc:	2110      	movs	r1, #16
 80072fe:	438a      	bics	r2, r1
 8007300:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8007302:	220a      	movs	r2, #10
 8007304:	2100      	movs	r1, #0
 8007306:	202c      	movs	r0, #44	; 0x2c
 8007308:	f000 fb0c 	bl	8007924 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800730c:	2300      	movs	r3, #0
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
 8007310:	e008      	b.n	8007324 <ILI9341_Draw_Pixel+0x218>
 8007312:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	4b36      	ldr	r3, [pc, #216]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007318:	2110      	movs	r1, #16
 800731a:	438a      	bics	r2, r1
 800731c:	615a      	str	r2, [r3, #20]
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	3301      	adds	r3, #1
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	2b02      	cmp	r3, #2
 8007328:	ddf3      	ble.n	8007312 <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800732a:	4b30      	ldr	r3, [pc, #192]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <ILI9341_Draw_Pixel+0x2e0>)
 8007330:	2101      	movs	r1, #1
 8007332:	430a      	orrs	r2, r1
 8007334:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007336:	4b2e      	ldr	r3, [pc, #184]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007338:	695a      	ldr	r2, [r3, #20]
 800733a:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800733c:	2110      	movs	r1, #16
 800733e:	430a      	orrs	r2, r1
 8007340:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007348:	2110      	movs	r1, #16
 800734a:	438a      	bics	r2, r1
 800734c:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800734e:	1cbb      	adds	r3, r7, #2
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	b2da      	uxtb	r2, r3
 8007358:	210c      	movs	r1, #12
 800735a:	187b      	adds	r3, r7, r1
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	1cbb      	adds	r3, r7, #2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	187b      	adds	r3, r7, r1
 8007366:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8007368:	1878      	adds	r0, r7, r1
 800736a:	2301      	movs	r3, #1
 800736c:	2200      	movs	r2, #0
 800736e:	2102      	movs	r1, #2
 8007370:	f000 fb12 	bl	8007998 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	e008      	b.n	800738c <ILI9341_Draw_Pixel+0x280>
 800737a:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 8007380:	2110      	movs	r1, #16
 8007382:	438a      	bics	r2, r1
 8007384:	615a      	str	r2, [r3, #20]
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	3301      	adds	r3, #1
 800738a:	623b      	str	r3, [r7, #32]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b02      	cmp	r3, #2
 8007390:	ddf3      	ble.n	800737a <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	e008      	b.n	80073aa <ILI9341_Draw_Pixel+0x29e>
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 800739e:	2110      	movs	r1, #16
 80073a0:	438a      	bics	r2, r1
 80073a2:	615a      	str	r2, [r3, #20]
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3301      	adds	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	ddf3      	ble.n	8007398 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e008      	b.n	80073c8 <ILI9341_Draw_Pixel+0x2bc>
 80073b6:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80073b8:	695a      	ldr	r2, [r3, #20]
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80073bc:	2110      	movs	r1, #16
 80073be:	438a      	bics	r2, r1
 80073c0:	615a      	str	r2, [r3, #20]
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	3301      	adds	r3, #1
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	ddf3      	ble.n	80073b6 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80073d0:	695a      	ldr	r2, [r3, #20]
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <ILI9341_Draw_Pixel+0x2e4>)
 80073d4:	2110      	movs	r1, #16
 80073d6:	430a      	orrs	r2, r1
 80073d8:	615a      	str	r2, [r3, #20]
 80073da:	e000      	b.n	80073de <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80073dc:	46c0      	nop			; (mov r8, r8)


}
 80073de:	46bd      	mov	sp, r7
 80073e0:	b00f      	add	sp, #60	; 0x3c
 80073e2:	bd90      	pop	{r4, r7, pc}
 80073e4:	20000016 	.word	0x20000016
 80073e8:	20000014 	.word	0x20000014
 80073ec:	48000400 	.word	0x48000400
 80073f0:	48000800 	.word	0x48000800

080073f4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80073f4:	b5b0      	push	{r4, r5, r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	0005      	movs	r5, r0
 80073fc:	000c      	movs	r4, r1
 80073fe:	0010      	movs	r0, r2
 8007400:	0019      	movs	r1, r3
 8007402:	1dbb      	adds	r3, r7, #6
 8007404:	1c2a      	adds	r2, r5, #0
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	1d3b      	adds	r3, r7, #4
 800740a:	1c22      	adds	r2, r4, #0
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	1cbb      	adds	r3, r7, #2
 8007410:	1c02      	adds	r2, r0, #0
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	003b      	movs	r3, r7
 8007416:	1c0a      	adds	r2, r1, #0
 8007418:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800741a:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <ILI9341_Draw_Rectangle+0x194>)
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	1dba      	adds	r2, r7, #6
 8007422:	8812      	ldrh	r2, [r2, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d300      	bcc.n	800742a <ILI9341_Draw_Rectangle+0x36>
 8007428:	e0a9      	b.n	800757e <ILI9341_Draw_Rectangle+0x18a>
 800742a:	4b58      	ldr	r3, [pc, #352]	; (800758c <ILI9341_Draw_Rectangle+0x198>)
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	1d3a      	adds	r2, r7, #4
 8007432:	8812      	ldrh	r2, [r2, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d300      	bcc.n	800743a <ILI9341_Draw_Rectangle+0x46>
 8007438:	e0a1      	b.n	800757e <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 800743a:	1dbb      	adds	r3, r7, #6
 800743c:	881a      	ldrh	r2, [r3, #0]
 800743e:	1cbb      	adds	r3, r7, #2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	18d3      	adds	r3, r2, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	4a50      	ldr	r2, [pc, #320]	; (8007588 <ILI9341_Draw_Rectangle+0x194>)
 8007448:	8812      	ldrh	r2, [r2, #0]
 800744a:	b292      	uxth	r2, r2
 800744c:	4293      	cmp	r3, r2
 800744e:	db07      	blt.n	8007460 <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 8007450:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <ILI9341_Draw_Rectangle+0x194>)
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b299      	uxth	r1, r3
 8007456:	1cbb      	adds	r3, r7, #2
 8007458:	1dba      	adds	r2, r7, #6
 800745a:	8812      	ldrh	r2, [r2, #0]
 800745c:	1a8a      	subs	r2, r1, r2
 800745e:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8007460:	1d3b      	adds	r3, r7, #4
 8007462:	881a      	ldrh	r2, [r3, #0]
 8007464:	003b      	movs	r3, r7
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	4a47      	ldr	r2, [pc, #284]	; (800758c <ILI9341_Draw_Rectangle+0x198>)
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	b292      	uxth	r2, r2
 8007472:	4293      	cmp	r3, r2
 8007474:	db07      	blt.n	8007486 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 8007476:	4b45      	ldr	r3, [pc, #276]	; (800758c <ILI9341_Draw_Rectangle+0x198>)
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b299      	uxth	r1, r3
 800747c:	003b      	movs	r3, r7
 800747e:	1d3a      	adds	r2, r7, #4
 8007480:	8812      	ldrh	r2, [r2, #0]
 8007482:	1a8a      	subs	r2, r1, r2
 8007484:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8007486:	1dba      	adds	r2, r7, #6
 8007488:	1cbb      	adds	r3, r7, #2
 800748a:	8812      	ldrh	r2, [r2, #0]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	18d3      	adds	r3, r2, r3
 8007490:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8007492:	3b01      	subs	r3, #1
 8007494:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8007496:	1d3a      	adds	r2, r7, #4
 8007498:	003b      	movs	r3, r7
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	8819      	ldrh	r1, [r3, #0]
 80074aa:	1dbb      	adds	r3, r7, #6
 80074ac:	8818      	ldrh	r0, [r3, #0]
 80074ae:	0013      	movs	r3, r2
 80074b0:	0022      	movs	r2, r4
 80074b2:	f7ff fda9 	bl	8007008 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80074b6:	200e      	movs	r0, #14
 80074b8:	183b      	adds	r3, r7, r0
 80074ba:	003a      	movs	r2, r7
 80074bc:	1cb9      	adds	r1, r7, #2
 80074be:	8812      	ldrh	r2, [r2, #0]
 80074c0:	8809      	ldrh	r1, [r1, #0]
 80074c2:	434a      	muls	r2, r1
 80074c4:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 80074c6:	230d      	movs	r3, #13
 80074c8:	18fb      	adds	r3, r7, r3
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80074ce:	183b      	adds	r3, r7, r0
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	4013      	ands	r3, r2
 80074d6:	d010      	beq.n	80074fa <ILI9341_Draw_Rectangle+0x106>
 80074d8:	230e      	movs	r3, #14
 80074da:	18fb      	adds	r3, r7, r3
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d90b      	bls.n	80074fa <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 80074e2:	230d      	movs	r3, #13
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2201      	movs	r2, #1
 80074e8:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 80074ea:	220e      	movs	r2, #14
 80074ec:	18bb      	adds	r3, r7, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	18ba      	adds	r2, r7, r2
 80074f6:	18db      	adds	r3, r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 80074fa:	230e      	movs	r3, #14
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	881c      	ldrh	r4, [r3, #0]
 8007500:	2320      	movs	r3, #32
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	881a      	ldrh	r2, [r3, #0]
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	8819      	ldrh	r1, [r3, #0]
 800750a:	1dbb      	adds	r3, r7, #6
 800750c:	8818      	ldrh	r0, [r3, #0]
 800750e:	2324      	movs	r3, #36	; 0x24
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	0023      	movs	r3, r4
 8007518:	f000 f8b8 	bl	800768c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800751c:	230d      	movs	r3, #13
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d02c      	beq.n	8007580 <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8007526:	1dba      	adds	r2, r7, #6
 8007528:	1cbb      	adds	r3, r7, #2
 800752a:	8812      	ldrh	r2, [r2, #0]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	18d3      	adds	r3, r2, r3
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b02      	subs	r3, #2
 8007534:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8007536:	1d3a      	adds	r2, r7, #4
 8007538:	003b      	movs	r3, r7
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	18d3      	adds	r3, r2, r3
 8007540:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8007542:	3b01      	subs	r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	2420      	movs	r4, #32
 8007548:	193a      	adds	r2, r7, r4
 800754a:	8812      	ldrh	r2, [r2, #0]
 800754c:	0019      	movs	r1, r3
 800754e:	f7ff fddd 	bl	800710c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8007552:	1dba      	adds	r2, r7, #6
 8007554:	1cbb      	adds	r3, r7, #2
 8007556:	8812      	ldrh	r2, [r2, #0]
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	18d3      	adds	r3, r2, r3
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8007562:	1d3a      	adds	r2, r7, #4
 8007564:	003b      	movs	r3, r7
 8007566:	8812      	ldrh	r2, [r2, #0]
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	18d3      	adds	r3, r2, r3
 800756c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800756e:	3b01      	subs	r3, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	193a      	adds	r2, r7, r4
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	0019      	movs	r1, r3
 8007578:	f7ff fdc8 	bl	800710c <ILI9341_Draw_Pixel>
 800757c:	e000      	b.n	8007580 <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800757e:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 8007580:	46bd      	mov	sp, r7
 8007582:	b004      	add	sp, #16
 8007584:	bdb0      	pop	{r4, r5, r7, pc}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	20000016 	.word	0x20000016
 800758c:	20000014 	.word	0x20000014

08007590 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	0002      	movs	r2, r0
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 800759c:	240f      	movs	r4, #15
 800759e:	193b      	adds	r3, r7, r4
 80075a0:	1dfa      	adds	r2, r7, #7
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 80075a6:	2036      	movs	r0, #54	; 0x36
 80075a8:	f000 f950 	bl	800784c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d013      	beq.n	80075dc <ILI9341_Set_Rotation+0x4c>
 80075b4:	dc02      	bgt.n	80075bc <ILI9341_Set_Rotation+0x2c>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80075ba:	e030      	b.n	800761e <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d018      	beq.n	80075f2 <ILI9341_Set_Rotation+0x62>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d021      	beq.n	8007608 <ILI9341_Set_Rotation+0x78>
			break;
 80075c4:	e02b      	b.n	800761e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 80075c6:	2048      	movs	r0, #72	; 0x48
 80075c8:	f000 f976 	bl	80078b8 <_LCD_SendData>
			LCD_WIDTH = 240;
 80075cc:	4b16      	ldr	r3, [pc, #88]	; (8007628 <ILI9341_Set_Rotation+0x98>)
 80075ce:	22f0      	movs	r2, #240	; 0xf0
 80075d0:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80075d2:	4b16      	ldr	r3, [pc, #88]	; (800762c <ILI9341_Set_Rotation+0x9c>)
 80075d4:	22a0      	movs	r2, #160	; 0xa0
 80075d6:	0052      	lsls	r2, r2, #1
 80075d8:	801a      	strh	r2, [r3, #0]
			break;
 80075da:	e020      	b.n	800761e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 80075dc:	2028      	movs	r0, #40	; 0x28
 80075de:	f000 f96b 	bl	80078b8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <ILI9341_Set_Rotation+0x98>)
 80075e4:	22a0      	movs	r2, #160	; 0xa0
 80075e6:	0052      	lsls	r2, r2, #1
 80075e8:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80075ea:	4b10      	ldr	r3, [pc, #64]	; (800762c <ILI9341_Set_Rotation+0x9c>)
 80075ec:	22f0      	movs	r2, #240	; 0xf0
 80075ee:	801a      	strh	r2, [r3, #0]
			break;
 80075f0:	e015      	b.n	800761e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 80075f2:	2088      	movs	r0, #136	; 0x88
 80075f4:	f000 f960 	bl	80078b8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80075f8:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <ILI9341_Set_Rotation+0x98>)
 80075fa:	22f0      	movs	r2, #240	; 0xf0
 80075fc:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <ILI9341_Set_Rotation+0x9c>)
 8007600:	22a0      	movs	r2, #160	; 0xa0
 8007602:	0052      	lsls	r2, r2, #1
 8007604:	801a      	strh	r2, [r3, #0]
			break;
 8007606:	e00a      	b.n	800761e <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8007608:	20e8      	movs	r0, #232	; 0xe8
 800760a:	f000 f955 	bl	80078b8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <ILI9341_Set_Rotation+0x98>)
 8007610:	22a0      	movs	r2, #160	; 0xa0
 8007612:	0052      	lsls	r2, r2, #1
 8007614:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <ILI9341_Set_Rotation+0x9c>)
 8007618:	22f0      	movs	r2, #240	; 0xf0
 800761a:	801a      	strh	r2, [r3, #0]
			break;
 800761c:	46c0      	nop			; (mov r8, r8)
	}
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b005      	add	sp, #20
 8007624:	bd90      	pop	{r4, r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	20000016 	.word	0x20000016
 800762c:	20000014 	.word	0x20000014

08007630 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <_LCD_Enable+0x18>)
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <_LCD_Enable+0x18>)
 800763a:	2120      	movs	r1, #32
 800763c:	430a      	orrs	r2, r1
 800763e:	615a      	str	r2, [r3, #20]
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	48000800 	.word	0x48000800

0800764c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007650:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <_LCD_Reset+0x3c>)
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <_LCD_Reset+0x3c>)
 8007656:	2120      	movs	r1, #32
 8007658:	438a      	bics	r2, r1
 800765a:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 800765c:	20c8      	movs	r0, #200	; 0xc8
 800765e:	f7fb fb25 	bl	8002cac <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <_LCD_Reset+0x3c>)
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	4b08      	ldr	r3, [pc, #32]	; (8007688 <_LCD_Reset+0x3c>)
 8007668:	2110      	movs	r1, #16
 800766a:	438a      	bics	r2, r1
 800766c:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 800766e:	20c8      	movs	r0, #200	; 0xc8
 8007670:	f7fb fb1c 	bl	8002cac <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <_LCD_Reset+0x3c>)
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <_LCD_Reset+0x3c>)
 800767a:	2120      	movs	r1, #32
 800767c:	430a      	orrs	r2, r1
 800767e:	615a      	str	r2, [r3, #20]
}
 8007680:	46c0      	nop			; (mov r8, r8)
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	48000800 	.word	0x48000800

0800768c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800768c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768e:	b095      	sub	sp, #84	; 0x54
 8007690:	af00      	add	r7, sp, #0
 8007692:	0006      	movs	r6, r0
 8007694:	0008      	movs	r0, r1
 8007696:	0011      	movs	r1, r2
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	230e      	movs	r3, #14
 800769c:	2218      	movs	r2, #24
 800769e:	4694      	mov	ip, r2
 80076a0:	44bc      	add	ip, r7
 80076a2:	4463      	add	r3, ip
 80076a4:	1c32      	adds	r2, r6, #0
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	230c      	movs	r3, #12
 80076aa:	2218      	movs	r2, #24
 80076ac:	4694      	mov	ip, r2
 80076ae:	44bc      	add	ip, r7
 80076b0:	4463      	add	r3, ip
 80076b2:	1c02      	adds	r2, r0, #0
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	230a      	movs	r3, #10
 80076b8:	2218      	movs	r2, #24
 80076ba:	4694      	mov	ip, r2
 80076bc:	44bc      	add	ip, r7
 80076be:	4463      	add	r3, ip
 80076c0:	1c0a      	adds	r2, r1, #0
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	466b      	mov	r3, sp
 80076c6:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	4a5b      	ldr	r2, [pc, #364]	; (8007840 <_LCD_Write_Frame+0x1b4>)
 80076d2:	8812      	ldrh	r2, [r2, #0]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d202      	bcs.n	80076de <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	647b      	str	r3, [r7, #68]	; 0x44
 80076dc:	e002      	b.n	80076e4 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80076de:	4b58      	ldr	r3, [pc, #352]	; (8007840 <_LCD_Write_Frame+0x1b4>)
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 80076e4:	230a      	movs	r3, #10
 80076e6:	2218      	movs	r2, #24
 80076e8:	4694      	mov	ip, r2
 80076ea:	44bc      	add	ip, r7
 80076ec:	4463      	add	r3, ip
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	231f      	movs	r3, #31
 80076f6:	2118      	movs	r1, #24
 80076f8:	468c      	mov	ip, r1
 80076fa:	44bc      	add	ip, r7
 80076fc:	4463      	add	r3, ip
 80076fe:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 8007700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007702:	001a      	movs	r2, r3
 8007704:	3a01      	subs	r2, #1
 8007706:	633a      	str	r2, [r7, #48]	; 0x30
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	60fa      	str	r2, [r7, #12]
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	0002      	movs	r2, r0
 8007714:	0f52      	lsrs	r2, r2, #29
 8007716:	000e      	movs	r6, r1
 8007718:	00f6      	lsls	r6, r6, #3
 800771a:	617e      	str	r6, [r7, #20]
 800771c:	697e      	ldr	r6, [r7, #20]
 800771e:	4316      	orrs	r6, r2
 8007720:	617e      	str	r6, [r7, #20]
 8007722:	0002      	movs	r2, r0
 8007724:	00d2      	lsls	r2, r2, #3
 8007726:	613a      	str	r2, [r7, #16]
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	6838      	ldr	r0, [r7, #0]
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	0002      	movs	r2, r0
 8007734:	0f52      	lsrs	r2, r2, #29
 8007736:	000e      	movs	r6, r1
 8007738:	00f5      	lsls	r5, r6, #3
 800773a:	4315      	orrs	r5, r2
 800773c:	0002      	movs	r2, r0
 800773e:	00d4      	lsls	r4, r2, #3
 8007740:	3307      	adds	r3, #7
 8007742:	08db      	lsrs	r3, r3, #3
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	466a      	mov	r2, sp
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	469d      	mov	sp, r3
 800774c:	466b      	mov	r3, sp
 800774e:	3300      	adds	r3, #0
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007752:	2300      	movs	r3, #0
 8007754:	64bb      	str	r3, [r7, #72]	; 0x48
 8007756:	e017      	b.n	8007788 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 8007758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800775a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775c:	18d3      	adds	r3, r2, r3
 800775e:	221f      	movs	r2, #31
 8007760:	2118      	movs	r1, #24
 8007762:	468c      	mov	ip, r1
 8007764:	44bc      	add	ip, r7
 8007766:	4462      	add	r2, ip
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800776c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800776e:	3301      	adds	r3, #1
 8007770:	220a      	movs	r2, #10
 8007772:	2118      	movs	r1, #24
 8007774:	468c      	mov	ip, r1
 8007776:	44bc      	add	ip, r7
 8007778:	4462      	add	r2, ip
 800777a:	8812      	ldrh	r2, [r2, #0]
 800777c:	b2d1      	uxtb	r1, r2
 800777e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007780:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007784:	3302      	adds	r3, #2
 8007786:	64bb      	str	r3, [r7, #72]	; 0x48
 8007788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778c:	429a      	cmp	r2, r3
 800778e:	d3e3      	bcc.n	8007758 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8007796:	2301      	movs	r3, #1
 8007798:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80077a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a8:	f7f8 fcc0 	bl	800012c <__udivsi3>
 80077ac:	0003      	movs	r3, r0
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7f8 fd3f 	bl	8000238 <__aeabi_uidivmod>
 80077ba:	000b      	movs	r3, r1
 80077bc:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80077be:	4b21      	ldr	r3, [pc, #132]	; (8007844 <_LCD_Write_Frame+0x1b8>)
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <_LCD_Write_Frame+0x1b8>)
 80077c4:	2101      	movs	r1, #1
 80077c6:	430a      	orrs	r2, r1
 80077c8:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80077ca:	4b1f      	ldr	r3, [pc, #124]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 80077cc:	695a      	ldr	r2, [r3, #20]
 80077ce:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 80077d0:	2110      	movs	r1, #16
 80077d2:	438a      	bics	r2, r1
 80077d4:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e0:	e008      	b.n	80077f4 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 80077e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077e6:	230a      	movs	r3, #10
 80077e8:	2200      	movs	r2, #0
 80077ea:	f000 f8d5 	bl	8007998 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f0:	3301      	adds	r3, #1
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d3f2      	bcc.n	80077e2 <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80077fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007800:	230a      	movs	r3, #10
 8007802:	2200      	movs	r2, #0
 8007804:	f000 f8c8 	bl	8007998 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8007808:	2300      	movs	r3, #0
 800780a:	63bb      	str	r3, [r7, #56]	; 0x38
 800780c:	e008      	b.n	8007820 <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 8007810:	695a      	ldr	r2, [r3, #20]
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 8007814:	2110      	movs	r1, #16
 8007816:	438a      	bics	r2, r1
 8007818:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	3301      	adds	r3, #1
 800781e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	2b02      	cmp	r3, #2
 8007824:	ddf3      	ble.n	800780e <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007826:	4b08      	ldr	r3, [pc, #32]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <_LCD_Write_Frame+0x1bc>)
 800782c:	2110      	movs	r1, #16
 800782e:	430a      	orrs	r2, r1
 8007830:	615a      	str	r2, [r3, #20]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	469d      	mov	sp, r3

}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	46bd      	mov	sp, r7
 800783a:	b015      	add	sp, #84	; 0x54
 800783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	20000018 	.word	0x20000018
 8007844:	48000400 	.word	0x48000400
 8007848:	48000800 	.word	0x48000800

0800784c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	0002      	movs	r2, r0
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007858:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <_LCD_SendCommand+0x64>)
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <_LCD_SendCommand+0x64>)
 800785e:	2110      	movs	r1, #16
 8007860:	438a      	bics	r2, r1
 8007862:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007864:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <_LCD_SendCommand+0x68>)
 8007866:	695a      	ldr	r2, [r3, #20]
 8007868:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <_LCD_SendCommand+0x68>)
 800786a:	2101      	movs	r1, #1
 800786c:	438a      	bics	r2, r1
 800786e:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2200      	movs	r2, #0
 8007876:	2100      	movs	r1, #0
 8007878:	0018      	movs	r0, r3
 800787a:	f000 f853 	bl	8007924 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e008      	b.n	8007896 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <_LCD_SendCommand+0x64>)
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <_LCD_SendCommand+0x64>)
 800788a:	2110      	movs	r1, #16
 800788c:	438a      	bics	r2, r1
 800788e:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b02      	cmp	r3, #2
 800789a:	ddf3      	ble.n	8007884 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <_LCD_SendCommand+0x64>)
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <_LCD_SendCommand+0x64>)
 80078a2:	2110      	movs	r1, #16
 80078a4:	430a      	orrs	r2, r1
 80078a6:	615a      	str	r2, [r3, #20]
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b004      	add	sp, #16
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	48000800 	.word	0x48000800
 80078b4:	48000400 	.word	0x48000400

080078b8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	0002      	movs	r2, r0
 80078c0:	1dfb      	adds	r3, r7, #7
 80078c2:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <_LCD_SendData+0x64>)
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	4b14      	ldr	r3, [pc, #80]	; (800791c <_LCD_SendData+0x64>)
 80078ca:	2101      	movs	r1, #1
 80078cc:	430a      	orrs	r2, r1
 80078ce:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <_LCD_SendData+0x68>)
 80078d2:	695a      	ldr	r2, [r3, #20]
 80078d4:	4b12      	ldr	r3, [pc, #72]	; (8007920 <_LCD_SendData+0x68>)
 80078d6:	2110      	movs	r1, #16
 80078d8:	438a      	bics	r2, r1
 80078da:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 80078dc:	1dfb      	adds	r3, r7, #7
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2200      	movs	r2, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f81d 	bl	8007924 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e008      	b.n	8007902 <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <_LCD_SendData+0x68>)
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <_LCD_SendData+0x68>)
 80078f6:	2110      	movs	r1, #16
 80078f8:	438a      	bics	r2, r1
 80078fa:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3301      	adds	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b02      	cmp	r3, #2
 8007906:	ddf3      	ble.n	80078f0 <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <_LCD_SendData+0x68>)
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <_LCD_SendData+0x68>)
 800790e:	2110      	movs	r1, #16
 8007910:	438a      	bics	r2, r1
 8007912:	615a      	str	r2, [r3, #20]
}
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	46bd      	mov	sp, r7
 8007918:	b004      	add	sp, #16
 800791a:	bd80      	pop	{r7, pc}
 800791c:	48000400 	.word	0x48000400
 8007920:	48000800 	.word	0x48000800

08007924 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	0004      	movs	r4, r0
 800792c:	0008      	movs	r0, r1
 800792e:	0011      	movs	r1, r2
 8007930:	1dfb      	adds	r3, r7, #7
 8007932:	1c22      	adds	r2, r4, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	1c02      	adds	r2, r0, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	1d7b      	adds	r3, r7, #5
 800793e:	1c0a      	adds	r2, r1, #0
 8007940:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e003      	b.n	8007950 <_SPI_SendByte+0x2c>
   		asm("nop");
 8007948:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	1dbb      	adds	r3, r7, #6
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	429a      	cmp	r2, r3
 8007958:	dbf6      	blt.n	8007948 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <_SPI_SendByte+0x6c>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2202      	movs	r2, #2
 8007960:	4013      	ands	r3, r2
 8007962:	2b02      	cmp	r3, #2
 8007964:	d103      	bne.n	800796e <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8007966:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <_SPI_SendByte+0x70>)
 8007968:	1dfb      	adds	r3, r7, #7
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800796e:	2300      	movs	r3, #0
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	e003      	b.n	800797c <_SPI_SendByte+0x58>
   		asm("nop");
 8007974:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	60bb      	str	r3, [r7, #8]
 800797c:	1d7b      	adds	r3, r7, #5
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	dbf6      	blt.n	8007974 <_SPI_SendByte+0x50>

#endif

}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b005      	add	sp, #20
 800798c:	bd90      	pop	{r4, r7, pc}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	40013000 	.word	0x40013000
 8007994:	4001300c 	.word	0x4001300c

08007998 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	0019      	movs	r1, r3
 80079a4:	1dfb      	adds	r3, r7, #7
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	1dbb      	adds	r3, r7, #6
 80079aa:	1c0a      	adds	r2, r1, #0
 80079ac:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	e003      	b.n	80079bc <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80079b4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	1dfb      	adds	r3, r7, #7
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dbf6      	blt.n	80079b4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80079ca:	e01d      	b.n	8007a08 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80079cc:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <_SPI_SendByteMultiByte+0xa4>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	2202      	movs	r2, #2
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d117      	bne.n	8007a08 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d90a      	bls.n	80079f4 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	881a      	ldrh	r2, [r3, #0]
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <_SPI_SendByteMultiByte+0xa4>)
 80079e4:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	3302      	adds	r3, #2
 80079ea:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	3b02      	subs	r3, #2
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	e009      	b.n	8007a08 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 80079f4:	4a12      	ldr	r2, [pc, #72]	; (8007a40 <_SPI_SendByteMultiByte+0xa8>)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	3301      	adds	r3, #1
 8007a00:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1de      	bne.n	80079cc <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <_SPI_SendByteMultiByte+0xa4>)
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <_SPI_SendByteMultiByte+0xa4>)
 8007a14:	2140      	movs	r1, #64	; 0x40
 8007a16:	438a      	bics	r2, r1
 8007a18:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e003      	b.n	8007a28 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 8007a20:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	3301      	adds	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	1dbb      	adds	r3, r7, #6
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	dbf6      	blt.n	8007a20 <_SPI_SendByteMultiByte+0x88>

#endif

}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b008      	add	sp, #32
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	40013000 	.word	0x40013000
 8007a40:	4001300c 	.word	0x4001300c

08007a44 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <TSC2046_EM_GetTouchScreenState+0x10>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	200005f0 	.word	0x200005f0

08007a58 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	0002      	movs	r2, r0
 8007a60:	1dfb      	adds	r3, r7, #7
 8007a62:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <TSC2046_EM_ProcessEvent+0x4c>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	3300      	adds	r3, #0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d815      	bhi.n	8007a9a <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 8007a6e:	1dfb      	adds	r3, r7, #7
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <TSC2046_EM_ProcessEvent+0x24>
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d007      	beq.n	8007a8a <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 8007a7a:	e00d      	b.n	8007a98 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 8007a7c:	f000 f81a 	bl	8007ab4 <TSC2046_EM_EnableIdleState>
 8007a80:	0003      	movs	r3, r0
 8007a82:	001a      	movs	r2, r3
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <TSC2046_EM_ProcessEvent+0x4c>)
 8007a86:	701a      	strb	r2, [r3, #0]
					break;
 8007a88:	e006      	b.n	8007a98 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 8007a8a:	f000 f80d 	bl	8007aa8 <TSC2046_EM_EnableConversionState>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	001a      	movs	r2, r3
 8007a92:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <TSC2046_EM_ProcessEvent+0x4c>)
 8007a94:	701a      	strb	r2, [r3, #0]
					break;
 8007a96:	46c0      	nop			; (mov r8, r8)
			break;
 8007a98:	46c0      	nop			; (mov r8, r8)
	}
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b002      	add	sp, #8
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	200005f0 	.word	0x200005f0

08007aa8 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 8007aac:	2301      	movs	r3, #1
}
 8007aae:	0018      	movs	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	0018      	movs	r0, r3
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8007ac6:	4b15      	ldr	r3, [pc, #84]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 8007acc:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ace:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <TSC2046_HM_Init+0x60>)
 8007ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ad8:	2101      	movs	r1, #1
 8007ada:	430a      	orrs	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <TSC2046_HM_Init+0x5c>)
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	e00e      	b.n	8007b0e <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <TSC2046_HM_Init+0x64>)
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	2100      	movs	r1, #0
 8007af8:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <TSC2046_HM_Init+0x64>)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	18d3      	adds	r3, r2, r3
 8007b02:	3302      	adds	r3, #2
 8007b04:	2200      	movs	r2, #0
 8007b06:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	607b      	str	r3, [r7, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dded      	ble.n	8007af0 <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40014800 	.word	0x40014800
 8007b20:	00000fff 	.word	0x00000fff
 8007b24:	20002220 	.word	0x20002220

08007b28 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 8007b2e:	1dfb      	adds	r3, r7, #7
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 8007b34:	f7ff ff86 	bl	8007a44 <TSC2046_EM_GetTouchScreenState>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d138      	bne.n	8007bb0 <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 8007b3e:	f000 f8b7 	bl	8007cb0 <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	603b      	str	r3, [r7, #0]
 8007b46:	e02d      	b.n	8007ba4 <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 8007b48:	f000 f8a2 	bl	8007c90 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8007b4c:	20d0      	movs	r0, #208	; 0xd0
 8007b4e:	f000 f8c3 	bl	8007cd8 <_SpiTransmit8>

				_SpiReceive16();								// dummy receive
 8007b52:	f000 f8d9 	bl	8007d08 <_SpiReceive16>


				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 8007b56:	20d0      	movs	r0, #208	; 0xd0
 8007b58:	f000 f8be 	bl	8007cd8 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 8007b5c:	f000 f8d4 	bl	8007d08 <_SpiReceive16>
 8007b60:	0003      	movs	r3, r0
 8007b62:	0019      	movs	r1, r3
 8007b64:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <TSC2046_HM_RunConversion+0xa8>)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	1c0a      	adds	r2, r1, #0
 8007b70:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 8007b72:	f000 f87f 	bl	8007c74 <_SetCsPinHigh>

				_SetCsPinLow();
 8007b76:	f000 f88b 	bl	8007c90 <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8007b7a:	2090      	movs	r0, #144	; 0x90
 8007b7c:	f000 f8ac 	bl	8007cd8 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 8007b80:	f000 f8c2 	bl	8007d08 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 8007b84:	2090      	movs	r0, #144	; 0x90
 8007b86:	f000 f8a7 	bl	8007cd8 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 8007b8a:	f000 f8bd 	bl	8007d08 <_SpiReceive16>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	0019      	movs	r1, r3
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <TSC2046_HM_RunConversion+0xa8>)
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 8007b9a:	f000 f86b 	bl	8007c74 <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	ddce      	ble.n	8007b48 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 8007baa:	f000 f813 	bl	8007bd4 <TSC2046_HM_ConvertToQVGA>
 8007bae:	e008      	b.n	8007bc2 <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <TSC2046_HM_RunConversion+0xa8>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <TSC2046_HM_RunConversion+0xa8>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 8007bbc:	1dfb      	adds	r3, r7, #7
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8007bc2:	1dfb      	adds	r3, r7, #7
 8007bc4:	781b      	ldrb	r3, [r3, #0]

}
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b002      	add	sp, #8
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	20002220 	.word	0x20002220

08007bd4 <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 8007bda:	1dbb      	adds	r3, r7, #6
 8007bdc:	22a0      	movs	r2, #160	; 0xa0
 8007bde:	0052      	lsls	r2, r2, #1
 8007be0:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 8007be2:	1d3b      	adds	r3, r7, #4
 8007be4:	22f0      	movs	r2, #240	; 0xf0
 8007be6:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	1dbb      	adds	r3, r7, #6
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	0019      	movs	r1, r3
 8007bf2:	0010      	movs	r0, r2
 8007bf4:	f7f8 fa9a 	bl	800012c <__udivsi3>
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007bfe:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 8007c00:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c02:	885a      	ldrh	r2, [r3, #2]
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	0019      	movs	r1, r3
 8007c0a:	0010      	movs	r0, r2
 8007c0c:	f7f8 fa8e 	bl	800012c <__udivsi3>
 8007c10:	0003      	movs	r3, r0
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c16:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	3b0a      	subs	r3, #10
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	4b13      	ldr	r3, [pc, #76]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c22:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c26:	885b      	ldrh	r3, [r3, #2]
 8007c28:	3b0a      	subs	r3, #10
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c2e:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 8007c30:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c32:	881c      	ldrh	r4, [r3, #0]
 8007c34:	1dbb      	adds	r3, r7, #6
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2150      	movs	r1, #80	; 0x50
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f7f8 fa76 	bl	800012c <__udivsi3>
 8007c40:	0003      	movs	r3, r0
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4363      	muls	r3, r4
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c4a:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c4e:	885c      	ldrh	r4, [r3, #2]
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	2164      	movs	r1, #100	; 0x64
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7f8 fa68 	bl	800012c <__udivsi3>
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4363      	muls	r3, r4
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <TSC2046_HM_ConvertToQVGA+0x9c>)
 8007c66:	805a      	strh	r2, [r3, #2]

}
 8007c68:	46c0      	nop			; (mov r8, r8)
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b003      	add	sp, #12
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	20002220 	.word	0x20002220

08007c74 <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <_SetCsPinHigh+0x18>)
 8007c7a:	695a      	ldr	r2, [r3, #20]
 8007c7c:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <_SetCsPinHigh+0x18>)
 8007c7e:	2180      	movs	r1, #128	; 0x80
 8007c80:	0149      	lsls	r1, r1, #5
 8007c82:	430a      	orrs	r2, r1
 8007c84:	615a      	str	r2, [r3, #20]
}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	48000400 	.word	0x48000400

08007c90 <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <_SetCsPinLow+0x18>)
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <_SetCsPinLow+0x18>)
 8007c9a:	4904      	ldr	r1, [pc, #16]	; (8007cac <_SetCsPinLow+0x1c>)
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	615a      	str	r2, [r3, #20]

}
 8007ca0:	46c0      	nop			; (mov r8, r8)
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	48000400 	.word	0x48000400
 8007cac:	ffffefff 	.word	0xffffefff

08007cb0 <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <_EnableSPI+0x24>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2240      	movs	r2, #64	; 0x40
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	d005      	beq.n	8007ccc <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <_EnableSPI+0x24>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <_EnableSPI+0x24>)
 8007cc6:	2140      	movs	r1, #64	; 0x40
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]

	}

}
 8007ccc:	46c0      	nop			; (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	40003800 	.word	0x40003800

08007cd8 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	0002      	movs	r2, r0
 8007ce0:	1dfb      	adds	r3, r7, #7
 8007ce2:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <_SpiTransmit8+0x28>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d103      	bne.n	8007cf8 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 8007cf0:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <_SpiTransmit8+0x2c>)
 8007cf2:	1dfb      	adds	r3, r7, #7
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	7013      	strb	r3, [r2, #0]

	}

}
 8007cf8:	46c0      	nop			; (mov r8, r8)
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40003800 	.word	0x40003800
 8007d04:	4000380c 	.word	0x4000380c

08007d08 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 8007d0e:	1dbb      	adds	r3, r7, #6
 8007d10:	2200      	movs	r2, #0
 8007d12:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 8007d14:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <_SpiReceive16+0x2c>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d103      	bne.n	8007d28 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <_SpiReceive16+0x2c>)
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	1dbb      	adds	r3, r7, #6
 8007d26:	801a      	strh	r2, [r3, #0]

	}
	return data;
 8007d28:	1dbb      	adds	r3, r7, #6
 8007d2a:	881b      	ldrh	r3, [r3, #0]
}
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b002      	add	sp, #8
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40003800 	.word	0x40003800

08007d38 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <TSC4026_STM32_HM_GetXpos+0x10>)
 8007d3e:	881b      	ldrh	r3, [r3, #0]
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	20002220 	.word	0x20002220

08007d4c <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <TSC4026_STM32_HM_GetYpos+0x10>)
 8007d52:	885b      	ldrh	r3, [r3, #2]
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	20002220 	.word	0x20002220

08007d60 <_togglePSU>:
 *
 */
#ifdef USE_FREERTOS

void _togglePSU()
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	// turn on PSU
	if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <_togglePSU+0x34>)
 8007d66:	2108      	movs	r1, #8
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7fb fe71 	bl	8003a50 <HAL_GPIO_ReadPin>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d106      	bne.n	8007d82 <_togglePSU+0x22>
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_RESET);
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <_togglePSU+0x34>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	2108      	movs	r1, #8
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7fb fe85 	bl	8003a8a <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_SET);

	}
}
 8007d80:	e005      	b.n	8007d8e <_togglePSU+0x2e>
		HAL_GPIO_WritePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin, GPIO_PIN_SET);
 8007d82:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <_togglePSU+0x34>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	2108      	movs	r1, #8
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7fb fe7e 	bl	8003a8a <HAL_GPIO_WritePin>
}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	48000400 	.word	0x48000400

08007d98 <UserPenIrqManager>:

void UserPenIrqManager()
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0

	UserDisplayTask();
 8007d9c:	f000 f856 	bl	8007e4c <UserDisplayTask>

	while(1)
	{
		if(myBinarySem01Handle != NULL)
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <UserPenIrqManager+0x28>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0fb      	beq.n	8007da0 <UserPenIrqManager+0x8>
		{
			osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <UserPenIrqManager+0x28>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	2301      	movs	r3, #1
 8007dae:	425b      	negs	r3, r3
 8007db0:	0019      	movs	r1, r3
 8007db2:	0010      	movs	r0, r2
 8007db4:	f7fc fe96 	bl	8004ae4 <osSemaphoreWait>

			_togglePSU();
 8007db8:	f7ff ffd2 	bl	8007d60 <_togglePSU>
		if(myBinarySem01Handle != NULL)
 8007dbc:	e7f0      	b.n	8007da0 <UserPenIrqManager+0x8>
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	200018b8 	.word	0x200018b8

08007dc4 <UserDisplayManager>:
		}
	}
}

void UserDisplayManager()
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0

	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <UserDisplayManager+0x28>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2164      	movs	r1, #100	; 0x64
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7fc fe88 	bl	8004ae4 <osSemaphoreWait>

		// update display
		UserDisplayTask();
 8007dd4:	f000 f83a 	bl	8007e4c <UserDisplayTask>

		osSemaphoreRelease(myBinarySem02Handle);
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <UserDisplayManager+0x28>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7fc fecb 	bl	8004b78 <osSemaphoreRelease>
		osThreadSuspend(NULL);
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7fc fefa 	bl	8004bdc <osThreadSuspend>
		osSemaphoreWait(myBinarySem02Handle, 100);
 8007de8:	e7ee      	b.n	8007dc8 <UserDisplayManager+0x4>
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	20000e50 	.word	0x20000e50

08007df0 <UserAdcManager>:
	}
}

void UserAdcManager()
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0

	while(1)
	{
		osSemaphoreWait(myBinarySem02Handle, 100);
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <UserAdcManager+0x2c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2164      	movs	r1, #100	; 0x64
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f7fc fe72 	bl	8004ae4 <osSemaphoreWait>

		UserAdcTask();
 8007e00:	f000 f8ba 	bl	8007f78 <UserAdcTask>

		osThreadResume(DisplayTaskHandle);
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <UserAdcManager+0x30>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7fc fef5 	bl	8004bf8 <osThreadResume>
		osSemaphoreRelease(myBinarySem02Handle);
 8007e0e:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <UserAdcManager+0x2c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7fc feb0 	bl	8004b78 <osSemaphoreRelease>
		osSemaphoreWait(myBinarySem02Handle, 100);
 8007e18:	e7ec      	b.n	8007df4 <UserAdcManager+0x4>
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	20000e50 	.word	0x20000e50
 8007e20:	200018bc 	.word	0x200018bc

08007e24 <HAL_GPIO_EXTI_Callback>:


#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	1dbb      	adds	r3, r7, #6
 8007e2e:	801a      	strh	r2, [r3, #0]



	#ifdef USE_FREERTOS
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 8007e30:	2001      	movs	r0, #1
 8007e32:	f7ff fe11 	bl	8007a58 <TSC2046_EM_ProcessEvent>
		//xQueueGenericSendFromISR(xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition)

		osSemaphoreRelease(myBinarySem01Handle);
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <HAL_GPIO_EXTI_Callback+0x24>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f7fc fe9c 	bl	8004b78 <osSemaphoreRelease>
	#else
		TSC2046_IM_PENIRQ_EXTI_Handler();
	#endif

}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200018b8 	.word	0x200018b8

08007e4c <UserDisplayTask>:



void UserDisplayTask()
{
 8007e4c:	b590      	push	{r4, r7, lr}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af02      	add	r7, sp, #8

#ifdef USE_FREERTOS
	// make sure UserDisplayTask() is not interrupted
	EXTI->IMR &= ~(TS_IRQ_Pin);
 8007e52:	4b3e      	ldr	r3, [pc, #248]	; (8007f4c <UserDisplayTask+0x100>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b3d      	ldr	r3, [pc, #244]	; (8007f4c <UserDisplayTask+0x100>)
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	438a      	bics	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
#endif

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
 8007e5e:	f7ff fdf1 	bl	8007a44 <TSC2046_EM_GetTouchScreenState>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d03e      	beq.n	8007ee4 <UserDisplayTask+0x98>
	   {
		 ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 8007e66:	483a      	ldr	r0, [pc, #232]	; (8007f50 <UserDisplayTask+0x104>)
 8007e68:	4b3a      	ldr	r3, [pc, #232]	; (8007f54 <UserDisplayTask+0x108>)
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	220a      	movs	r2, #10
 8007e74:	2164      	movs	r1, #100	; 0x64
 8007e76:	f7fe fea5 	bl	8006bc4 <ILI9341_Draw_Text>



		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 8007e7a:	f7ff fe55 	bl	8007b28 <TSC2046_HM_RunConversion>
 8007e7e:	1e03      	subs	r3, r0, #0
 8007e80:	d125      	bne.n	8007ece <UserDisplayTask+0x82>
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 8007e82:	f7ff ff59 	bl	8007d38 <TSC4026_STM32_HM_GetXpos>
 8007e86:	0003      	movs	r3, r0
 8007e88:	001c      	movs	r4, r3
 8007e8a:	f7ff ff5f 	bl	8007d4c <TSC4026_STM32_HM_GetYpos>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	0019      	movs	r1, r3
 8007e92:	4b31      	ldr	r3, [pc, #196]	; (8007f58 <UserDisplayTask+0x10c>)
 8007e94:	2202      	movs	r2, #2
 8007e96:	0020      	movs	r0, r4
 8007e98:	f7fe fcf2 	bl	8006880 <ILI9341_Draw_Filled_Circle>
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 8007e9c:	f7ff ff4c 	bl	8007d38 <TSC4026_STM32_HM_GetXpos>
 8007ea0:	0003      	movs	r3, r0
 8007ea2:	001c      	movs	r4, r3
 8007ea4:	f7ff ff52 	bl	8007d4c <TSC4026_STM32_HM_GetYpos>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	4a2c      	ldr	r2, [pc, #176]	; (8007f5c <UserDisplayTask+0x110>)
 8007eac:	0038      	movs	r0, r7
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	0023      	movs	r3, r4
 8007eb2:	210f      	movs	r1, #15
 8007eb4:	f001 f89c 	bl	8008ff0 <sniprintf>
		   ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 8007eb8:	0038      	movs	r0, r7
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <UserDisplayTask+0x108>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	21b4      	movs	r1, #180	; 0xb4
 8007ec8:	f7fe fe7c 	bl	8006bc4 <ILI9341_Draw_Text>
 8007ecc:	e014      	b.n	8007ef8 <UserDisplayTask+0xac>
		 }
		 else
		 {
		   ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 8007ece:	4824      	ldr	r0, [pc, #144]	; (8007f60 <UserDisplayTask+0x114>)
 8007ed0:	4b20      	ldr	r3, [pc, #128]	; (8007f54 <UserDisplayTask+0x108>)
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	220a      	movs	r2, #10
 8007edc:	21c8      	movs	r1, #200	; 0xc8
 8007ede:	f7fe fe71 	bl	8006bc4 <ILI9341_Draw_Text>
 8007ee2:	e009      	b.n	8007ef8 <UserDisplayTask+0xac>
		 }
	   }

	   else
	   {
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 8007ee4:	481f      	ldr	r0, [pc, #124]	; (8007f64 <UserDisplayTask+0x118>)
 8007ee6:	4b1b      	ldr	r3, [pc, #108]	; (8007f54 <UserDisplayTask+0x108>)
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	2302      	movs	r3, #2
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	2164      	movs	r1, #100	; 0x64
 8007ef4:	f7fe fe66 	bl	8006bc4 <ILI9341_Draw_Text>
	   }

	   // update screen ON/OFF label
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <UserDisplayTask+0x11c>)
 8007efa:	2108      	movs	r1, #8
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7fb fda7 	bl	8003a50 <HAL_GPIO_ReadPin>
 8007f02:	0003      	movs	r3, r0
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d10a      	bne.n	8007f1e <UserDisplayTask+0xd2>
	   {
		   ILI9341_Draw_Text("ON ", 10, 50, BLACK, 3, GREEN);
 8007f08:	4818      	ldr	r0, [pc, #96]	; (8007f6c <UserDisplayTask+0x120>)
 8007f0a:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <UserDisplayTask+0x124>)
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	2303      	movs	r3, #3
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2300      	movs	r3, #0
 8007f14:	2232      	movs	r2, #50	; 0x32
 8007f16:	210a      	movs	r1, #10
 8007f18:	f7fe fe54 	bl	8006bc4 <ILI9341_Draw_Text>
 8007f1c:	e009      	b.n	8007f32 <UserDisplayTask+0xe6>
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 10, 50, BLACK, 3, RED);
 8007f1e:	4815      	ldr	r0, [pc, #84]	; (8007f74 <UserDisplayTask+0x128>)
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <UserDisplayTask+0x108>)
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	2303      	movs	r3, #3
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2232      	movs	r2, #50	; 0x32
 8007f2c:	210a      	movs	r1, #10
 8007f2e:	f7fe fe49 	bl	8006bc4 <ILI9341_Draw_Text>
	   }

#ifdef USE_FREERTOS
		// clear bit and resume EXTI
		__HAL_GPIO_EXTI_CLEAR_IT(TS_IRQ_Pin);
 8007f32:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <UserDisplayTask+0x100>)
 8007f34:	2240      	movs	r2, #64	; 0x40
 8007f36:	615a      	str	r2, [r3, #20]
		EXTI->IMR |= (TS_IRQ_Pin);
 8007f38:	4b04      	ldr	r3, [pc, #16]	; (8007f4c <UserDisplayTask+0x100>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <UserDisplayTask+0x100>)
 8007f3e:	2140      	movs	r1, #64	; 0x40
 8007f40:	430a      	orrs	r2, r1
 8007f42:	601a      	str	r2, [r3, #0]
#endif

}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b005      	add	sp, #20
 8007f4a:	bd90      	pop	{r4, r7, pc}
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	0800be1c 	.word	0x0800be1c
 8007f54:	0000d8c3 	.word	0x0000d8c3
 8007f58:	0000ffff 	.word	0x0000ffff
 8007f5c:	0800be24 	.word	0x0800be24
 8007f60:	0800be34 	.word	0x0800be34
 8007f64:	0800be40 	.word	0x0800be40
 8007f68:	48000400 	.word	0x48000400
 8007f6c:	0800be48 	.word	0x0800be48
 8007f70:	000014a2 	.word	0x000014a2
 8007f74:	0800be4c 	.word	0x0800be4c

08007f78 <UserAdcTask>:

void UserAdcTask()
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af02      	add	r7, sp, #8
		// if PSU enabled, poll imonitor pin
		if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8007f7e:	4b34      	ldr	r3, [pc, #208]	; (8008050 <UserAdcTask+0xd8>)
 8007f80:	2108      	movs	r1, #8
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7fb fd64 	bl	8003a50 <HAL_GPIO_ReadPin>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d142      	bne.n	8008014 <UserAdcTask+0x9c>
		{
		   if(HAL_ADC_PollForConversion(&hadc, 1) == HAL_OK)
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <UserAdcTask+0xdc>)
 8007f90:	2101      	movs	r1, #1
 8007f92:	0018      	movs	r0, r3
 8007f94:	f7fb f840 	bl	8003018 <HAL_ADC_PollForConversion>
 8007f98:	1e03      	subs	r3, r0, #0
 8007f9a:	d13e      	bne.n	800801a <UserAdcTask+0xa2>
		   {
			   if(adc_count == ADC_DATA_SIZE)			// calc adc mean, reset adc data + count
 8007f9c:	4b2e      	ldr	r3, [pc, #184]	; (8008058 <UserAdcTask+0xe0>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f7fa f807 	bl	8001fb4 <__aeabi_i2d>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4b2c      	ldr	r3, [pc, #176]	; (800805c <UserAdcTask+0xe4>)
 8007faa:	f7f8 fa45 	bl	8000438 <__aeabi_dcmpeq>
 8007fae:	1e03      	subs	r3, r0, #0
 8007fb0:	d01f      	beq.n	8007ff2 <UserAdcTask+0x7a>
			   {

#ifdef USE_FLOAT
				   final_adc_data = (float)adc_data / ADC_DATA_SIZE;
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <UserAdcTask+0xe8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f7f8 fa8a 	bl	80004d0 <__aeabi_ui2f>
 8007fbc:	1c02      	adds	r2, r0, #0
 8007fbe:	4b29      	ldr	r3, [pc, #164]	; (8008064 <UserAdcTask+0xec>)
 8007fc0:	601a      	str	r2, [r3, #0]
				   final_adc_data = final_adc_data * ADC_TO_VOLTS_RES;		// convert to decimal
 8007fc2:	4b28      	ldr	r3, [pc, #160]	; (8008064 <UserAdcTask+0xec>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	1c18      	adds	r0, r3, #0
 8007fc8:	f7fa f860 	bl	800208c <__aeabi_f2d>
 8007fcc:	4a26      	ldr	r2, [pc, #152]	; (8008068 <UserAdcTask+0xf0>)
 8007fce:	4b27      	ldr	r3, [pc, #156]	; (800806c <UserAdcTask+0xf4>)
 8007fd0:	f7f9 f9e4 	bl	800139c <__aeabi_dmul>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	000c      	movs	r4, r1
 8007fd8:	0018      	movs	r0, r3
 8007fda:	0021      	movs	r1, r4
 8007fdc:	f7fa f8a8 	bl	8002130 <__aeabi_d2f>
 8007fe0:	1c02      	adds	r2, r0, #0
 8007fe2:	4b20      	ldr	r3, [pc, #128]	; (8008064 <UserAdcTask+0xec>)
 8007fe4:	601a      	str	r2, [r3, #0]
#else
				   final_adc_data = adc_data / ADC_DATA_SIZE;

#endif	//USE_FLOAT
				   adc_data = 0;						// clear the total
 8007fe6:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <UserAdcTask+0xe8>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
				   adc_count = 0;
 8007fec:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <UserAdcTask+0xe0>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
			   }

			   adc_data += HAL_ADC_GetValue(&hadc);		// add next read value to total
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <UserAdcTask+0xdc>)
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7fb f8a1 	bl	800313c <HAL_ADC_GetValue>
 8007ffa:	0002      	movs	r2, r0
 8007ffc:	4b18      	ldr	r3, [pc, #96]	; (8008060 <UserAdcTask+0xe8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	18d2      	adds	r2, r2, r3
 8008002:	4b17      	ldr	r3, [pc, #92]	; (8008060 <UserAdcTask+0xe8>)
 8008004:	601a      	str	r2, [r3, #0]
			   adc_count++;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <UserAdcTask+0xe0>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <UserAdcTask+0xe0>)
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e002      	b.n	800801a <UserAdcTask+0xa2>
		   }
		}
		else
		{
			final_adc_data = 0;
 8008014:	4b13      	ldr	r3, [pc, #76]	; (8008064 <UserAdcTask+0xec>)
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
		}

#ifdef USE_FLOAT
		char imon_string[12];
		sprintf(imon_string, "%f mV", final_adc_data);
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <UserAdcTask+0xec>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	1c18      	adds	r0, r3, #0
 8008020:	f7fa f834 	bl	800208c <__aeabi_f2d>
 8008024:	0003      	movs	r3, r0
 8008026:	000c      	movs	r4, r1
 8008028:	4911      	ldr	r1, [pc, #68]	; (8008070 <UserAdcTask+0xf8>)
 800802a:	1d38      	adds	r0, r7, #4
 800802c:	001a      	movs	r2, r3
 800802e:	0023      	movs	r3, r4
 8008030:	f001 f810 	bl	8009054 <siprintf>
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
 8008034:	1d38      	adds	r0, r7, #4
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <UserAdcTask+0xfc>)
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	2303      	movs	r3, #3
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	2300      	movs	r3, #0
 8008040:	2264      	movs	r2, #100	; 0x64
 8008042:	210a      	movs	r1, #10
 8008044:	f7fe fdbe 	bl	8006bc4 <ILI9341_Draw_Text>
		snprintf(imon_string, sizeof(imon_string), "%lu mV", final_adc_data);
		ILI9341_Draw_Text(imon_string, 10, 100, BLACK, 3, RED);
#endif	//USE_FLOAT


}
 8008048:	46c0      	nop			; (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	b005      	add	sp, #20
 800804e:	bd90      	pop	{r4, r7, pc}
 8008050:	48000400 	.word	0x48000400
 8008054:	20000608 	.word	0x20000608
 8008058:	200005fc 	.word	0x200005fc
 800805c:	3ff00000 	.word	0x3ff00000
 8008060:	200005f8 	.word	0x200005f8
 8008064:	200005f4 	.word	0x200005f4
 8008068:	1416377a 	.word	0x1416377a
 800806c:	3f5a6506 	.word	0x3f5a6506
 8008070:	0800be50 	.word	0x0800be50
 8008074:	0000d8c3 	.word	0x0000d8c3

08008078 <__libc_init_array>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	2600      	movs	r6, #0
 800807c:	4d0c      	ldr	r5, [pc, #48]	; (80080b0 <__libc_init_array+0x38>)
 800807e:	4c0d      	ldr	r4, [pc, #52]	; (80080b4 <__libc_init_array+0x3c>)
 8008080:	1b64      	subs	r4, r4, r5
 8008082:	10a4      	asrs	r4, r4, #2
 8008084:	42a6      	cmp	r6, r4
 8008086:	d109      	bne.n	800809c <__libc_init_array+0x24>
 8008088:	2600      	movs	r6, #0
 800808a:	f003 fe6b 	bl	800bd64 <_init>
 800808e:	4d0a      	ldr	r5, [pc, #40]	; (80080b8 <__libc_init_array+0x40>)
 8008090:	4c0a      	ldr	r4, [pc, #40]	; (80080bc <__libc_init_array+0x44>)
 8008092:	1b64      	subs	r4, r4, r5
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	42a6      	cmp	r6, r4
 8008098:	d105      	bne.n	80080a6 <__libc_init_array+0x2e>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	00b3      	lsls	r3, r6, #2
 800809e:	58eb      	ldr	r3, [r5, r3]
 80080a0:	4798      	blx	r3
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7ee      	b.n	8008084 <__libc_init_array+0xc>
 80080a6:	00b3      	lsls	r3, r6, #2
 80080a8:	58eb      	ldr	r3, [r5, r3]
 80080aa:	4798      	blx	r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	e7f2      	b.n	8008096 <__libc_init_array+0x1e>
 80080b0:	0800c440 	.word	0x0800c440
 80080b4:	0800c440 	.word	0x0800c440
 80080b8:	0800c440 	.word	0x0800c440
 80080bc:	0800c444 	.word	0x0800c444

080080c0 <malloc>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <malloc+0x10>)
 80080c4:	0001      	movs	r1, r0
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	f000 f860 	bl	800818c <_malloc_r>
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	2000001c 	.word	0x2000001c

080080d4 <memcpy>:
 80080d4:	2300      	movs	r3, #0
 80080d6:	b510      	push	{r4, lr}
 80080d8:	429a      	cmp	r2, r3
 80080da:	d100      	bne.n	80080de <memcpy+0xa>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	5ccc      	ldrb	r4, [r1, r3]
 80080e0:	54c4      	strb	r4, [r0, r3]
 80080e2:	3301      	adds	r3, #1
 80080e4:	e7f8      	b.n	80080d8 <memcpy+0x4>

080080e6 <memset>:
 80080e6:	0003      	movs	r3, r0
 80080e8:	1812      	adds	r2, r2, r0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d100      	bne.n	80080f0 <memset+0xa>
 80080ee:	4770      	bx	lr
 80080f0:	7019      	strb	r1, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	e7f9      	b.n	80080ea <memset+0x4>
	...

080080f8 <_free_r>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	0005      	movs	r5, r0
 80080fc:	2900      	cmp	r1, #0
 80080fe:	d010      	beq.n	8008122 <_free_r+0x2a>
 8008100:	1f0c      	subs	r4, r1, #4
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da00      	bge.n	800810a <_free_r+0x12>
 8008108:	18e4      	adds	r4, r4, r3
 800810a:	0028      	movs	r0, r5
 800810c:	f7fa fafa 	bl	8002704 <__malloc_lock>
 8008110:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <_free_r+0x90>)
 8008112:	6813      	ldr	r3, [r2, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <_free_r+0x2c>
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	6014      	str	r4, [r2, #0]
 800811c:	0028      	movs	r0, r5
 800811e:	f7fa fafb 	bl	8002718 <__malloc_unlock>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	42a3      	cmp	r3, r4
 8008126:	d909      	bls.n	800813c <_free_r+0x44>
 8008128:	6821      	ldr	r1, [r4, #0]
 800812a:	1860      	adds	r0, r4, r1
 800812c:	4283      	cmp	r3, r0
 800812e:	d1f3      	bne.n	8008118 <_free_r+0x20>
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	1841      	adds	r1, r0, r1
 8008136:	6021      	str	r1, [r4, #0]
 8008138:	e7ee      	b.n	8008118 <_free_r+0x20>
 800813a:	0013      	movs	r3, r2
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	2a00      	cmp	r2, #0
 8008140:	d001      	beq.n	8008146 <_free_r+0x4e>
 8008142:	42a2      	cmp	r2, r4
 8008144:	d9f9      	bls.n	800813a <_free_r+0x42>
 8008146:	6819      	ldr	r1, [r3, #0]
 8008148:	1858      	adds	r0, r3, r1
 800814a:	42a0      	cmp	r0, r4
 800814c:	d10b      	bne.n	8008166 <_free_r+0x6e>
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	1809      	adds	r1, r1, r0
 8008152:	1858      	adds	r0, r3, r1
 8008154:	6019      	str	r1, [r3, #0]
 8008156:	4282      	cmp	r2, r0
 8008158:	d1e0      	bne.n	800811c <_free_r+0x24>
 800815a:	6810      	ldr	r0, [r2, #0]
 800815c:	6852      	ldr	r2, [r2, #4]
 800815e:	1841      	adds	r1, r0, r1
 8008160:	6019      	str	r1, [r3, #0]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	e7da      	b.n	800811c <_free_r+0x24>
 8008166:	42a0      	cmp	r0, r4
 8008168:	d902      	bls.n	8008170 <_free_r+0x78>
 800816a:	230c      	movs	r3, #12
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	e7d5      	b.n	800811c <_free_r+0x24>
 8008170:	6821      	ldr	r1, [r4, #0]
 8008172:	1860      	adds	r0, r4, r1
 8008174:	4282      	cmp	r2, r0
 8008176:	d103      	bne.n	8008180 <_free_r+0x88>
 8008178:	6810      	ldr	r0, [r2, #0]
 800817a:	6852      	ldr	r2, [r2, #4]
 800817c:	1841      	adds	r1, r0, r1
 800817e:	6021      	str	r1, [r4, #0]
 8008180:	6062      	str	r2, [r4, #4]
 8008182:	605c      	str	r4, [r3, #4]
 8008184:	e7ca      	b.n	800811c <_free_r+0x24>
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	20000600 	.word	0x20000600

0800818c <_malloc_r>:
 800818c:	2303      	movs	r3, #3
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	1ccd      	adds	r5, r1, #3
 8008192:	439d      	bics	r5, r3
 8008194:	3508      	adds	r5, #8
 8008196:	0006      	movs	r6, r0
 8008198:	2d0c      	cmp	r5, #12
 800819a:	d21e      	bcs.n	80081da <_malloc_r+0x4e>
 800819c:	250c      	movs	r5, #12
 800819e:	42a9      	cmp	r1, r5
 80081a0:	d81d      	bhi.n	80081de <_malloc_r+0x52>
 80081a2:	0030      	movs	r0, r6
 80081a4:	f7fa faae 	bl	8002704 <__malloc_lock>
 80081a8:	4a25      	ldr	r2, [pc, #148]	; (8008240 <_malloc_r+0xb4>)
 80081aa:	6814      	ldr	r4, [r2, #0]
 80081ac:	0021      	movs	r1, r4
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d119      	bne.n	80081e6 <_malloc_r+0x5a>
 80081b2:	4c24      	ldr	r4, [pc, #144]	; (8008244 <_malloc_r+0xb8>)
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <_malloc_r+0x36>
 80081ba:	0030      	movs	r0, r6
 80081bc:	f7fa fa44 	bl	8002648 <_sbrk_r>
 80081c0:	6020      	str	r0, [r4, #0]
 80081c2:	0029      	movs	r1, r5
 80081c4:	0030      	movs	r0, r6
 80081c6:	f7fa fa3f 	bl	8002648 <_sbrk_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d12b      	bne.n	8008226 <_malloc_r+0x9a>
 80081ce:	230c      	movs	r3, #12
 80081d0:	0030      	movs	r0, r6
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	f7fa faa0 	bl	8002718 <__malloc_unlock>
 80081d8:	e003      	b.n	80081e2 <_malloc_r+0x56>
 80081da:	2d00      	cmp	r5, #0
 80081dc:	dadf      	bge.n	800819e <_malloc_r+0x12>
 80081de:	230c      	movs	r3, #12
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	2000      	movs	r0, #0
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	680b      	ldr	r3, [r1, #0]
 80081e8:	1b5b      	subs	r3, r3, r5
 80081ea:	d419      	bmi.n	8008220 <_malloc_r+0x94>
 80081ec:	2b0b      	cmp	r3, #11
 80081ee:	d903      	bls.n	80081f8 <_malloc_r+0x6c>
 80081f0:	600b      	str	r3, [r1, #0]
 80081f2:	18cc      	adds	r4, r1, r3
 80081f4:	6025      	str	r5, [r4, #0]
 80081f6:	e003      	b.n	8008200 <_malloc_r+0x74>
 80081f8:	684b      	ldr	r3, [r1, #4]
 80081fa:	428c      	cmp	r4, r1
 80081fc:	d10d      	bne.n	800821a <_malloc_r+0x8e>
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	0030      	movs	r0, r6
 8008202:	f7fa fa89 	bl	8002718 <__malloc_unlock>
 8008206:	0020      	movs	r0, r4
 8008208:	2207      	movs	r2, #7
 800820a:	300b      	adds	r0, #11
 800820c:	1d23      	adds	r3, r4, #4
 800820e:	4390      	bics	r0, r2
 8008210:	1ac3      	subs	r3, r0, r3
 8008212:	d0e7      	beq.n	80081e4 <_malloc_r+0x58>
 8008214:	425a      	negs	r2, r3
 8008216:	50e2      	str	r2, [r4, r3]
 8008218:	e7e4      	b.n	80081e4 <_malloc_r+0x58>
 800821a:	6063      	str	r3, [r4, #4]
 800821c:	000c      	movs	r4, r1
 800821e:	e7ef      	b.n	8008200 <_malloc_r+0x74>
 8008220:	000c      	movs	r4, r1
 8008222:	6849      	ldr	r1, [r1, #4]
 8008224:	e7c3      	b.n	80081ae <_malloc_r+0x22>
 8008226:	2303      	movs	r3, #3
 8008228:	1cc4      	adds	r4, r0, #3
 800822a:	439c      	bics	r4, r3
 800822c:	42a0      	cmp	r0, r4
 800822e:	d0e1      	beq.n	80081f4 <_malloc_r+0x68>
 8008230:	1a21      	subs	r1, r4, r0
 8008232:	0030      	movs	r0, r6
 8008234:	f7fa fa08 	bl	8002648 <_sbrk_r>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d1db      	bne.n	80081f4 <_malloc_r+0x68>
 800823c:	e7c7      	b.n	80081ce <_malloc_r+0x42>
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	20000600 	.word	0x20000600
 8008244:	20000604 	.word	0x20000604

08008248 <__cvt>:
 8008248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800824a:	b08b      	sub	sp, #44	; 0x2c
 800824c:	0014      	movs	r4, r2
 800824e:	1e1d      	subs	r5, r3, #0
 8008250:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008252:	da53      	bge.n	80082fc <__cvt+0xb4>
 8008254:	2480      	movs	r4, #128	; 0x80
 8008256:	0624      	lsls	r4, r4, #24
 8008258:	191b      	adds	r3, r3, r4
 800825a:	001d      	movs	r5, r3
 800825c:	0014      	movs	r4, r2
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	700b      	strb	r3, [r1, #0]
 8008262:	2320      	movs	r3, #32
 8008264:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008266:	2203      	movs	r2, #3
 8008268:	439e      	bics	r6, r3
 800826a:	2e46      	cmp	r6, #70	; 0x46
 800826c:	d007      	beq.n	800827e <__cvt+0x36>
 800826e:	0033      	movs	r3, r6
 8008270:	3b45      	subs	r3, #69	; 0x45
 8008272:	4259      	negs	r1, r3
 8008274:	414b      	adcs	r3, r1
 8008276:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008278:	3a01      	subs	r2, #1
 800827a:	18cb      	adds	r3, r1, r3
 800827c:	9310      	str	r3, [sp, #64]	; 0x40
 800827e:	ab09      	add	r3, sp, #36	; 0x24
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	ab08      	add	r3, sp, #32
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008288:	9200      	str	r2, [sp, #0]
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800828e:	0022      	movs	r2, r4
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	002b      	movs	r3, r5
 8008294:	f001 fe64 	bl	8009f60 <_dtoa_r>
 8008298:	0007      	movs	r7, r0
 800829a:	2e47      	cmp	r6, #71	; 0x47
 800829c:	d102      	bne.n	80082a4 <__cvt+0x5c>
 800829e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a0:	07db      	lsls	r3, r3, #31
 80082a2:	d524      	bpl.n	80082ee <__cvt+0xa6>
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	9307      	str	r3, [sp, #28]
 80082aa:	2e46      	cmp	r6, #70	; 0x46
 80082ac:	d114      	bne.n	80082d8 <__cvt+0x90>
 80082ae:	783b      	ldrb	r3, [r7, #0]
 80082b0:	2b30      	cmp	r3, #48	; 0x30
 80082b2:	d10c      	bne.n	80082ce <__cvt+0x86>
 80082b4:	2200      	movs	r2, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	0020      	movs	r0, r4
 80082ba:	0029      	movs	r1, r5
 80082bc:	f7f8 f8bc 	bl	8000438 <__aeabi_dcmpeq>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d104      	bne.n	80082ce <__cvt+0x86>
 80082c4:	2301      	movs	r3, #1
 80082c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082d0:	9a07      	ldr	r2, [sp, #28]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	18d3      	adds	r3, r2, r3
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	2200      	movs	r2, #0
 80082da:	2300      	movs	r3, #0
 80082dc:	0020      	movs	r0, r4
 80082de:	0029      	movs	r1, r5
 80082e0:	f7f8 f8aa 	bl	8000438 <__aeabi_dcmpeq>
 80082e4:	2230      	movs	r2, #48	; 0x30
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d00d      	beq.n	8008306 <__cvt+0xbe>
 80082ea:	9b07      	ldr	r3, [sp, #28]
 80082ec:	9309      	str	r3, [sp, #36]	; 0x24
 80082ee:	0038      	movs	r0, r7
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082f4:	1bdb      	subs	r3, r3, r7
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	b00b      	add	sp, #44	; 0x2c
 80082fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fc:	2300      	movs	r3, #0
 80082fe:	e7af      	b.n	8008260 <__cvt+0x18>
 8008300:	1c59      	adds	r1, r3, #1
 8008302:	9109      	str	r1, [sp, #36]	; 0x24
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008308:	9907      	ldr	r1, [sp, #28]
 800830a:	428b      	cmp	r3, r1
 800830c:	d3f8      	bcc.n	8008300 <__cvt+0xb8>
 800830e:	e7ee      	b.n	80082ee <__cvt+0xa6>

08008310 <__exponent>:
 8008310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008312:	1c83      	adds	r3, r0, #2
 8008314:	b085      	sub	sp, #20
 8008316:	9301      	str	r3, [sp, #4]
 8008318:	0006      	movs	r6, r0
 800831a:	000c      	movs	r4, r1
 800831c:	7002      	strb	r2, [r0, #0]
 800831e:	232b      	movs	r3, #43	; 0x2b
 8008320:	2900      	cmp	r1, #0
 8008322:	da01      	bge.n	8008328 <__exponent+0x18>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	424c      	negs	r4, r1
 8008328:	7073      	strb	r3, [r6, #1]
 800832a:	2c09      	cmp	r4, #9
 800832c:	dd22      	ble.n	8008374 <__exponent+0x64>
 800832e:	ab02      	add	r3, sp, #8
 8008330:	1ddd      	adds	r5, r3, #7
 8008332:	0020      	movs	r0, r4
 8008334:	210a      	movs	r1, #10
 8008336:	f7f8 f869 	bl	800040c <__aeabi_idivmod>
 800833a:	1e6f      	subs	r7, r5, #1
 800833c:	3130      	adds	r1, #48	; 0x30
 800833e:	7039      	strb	r1, [r7, #0]
 8008340:	0020      	movs	r0, r4
 8008342:	210a      	movs	r1, #10
 8008344:	f7f7 ff7c 	bl	8000240 <__divsi3>
 8008348:	0004      	movs	r4, r0
 800834a:	2809      	cmp	r0, #9
 800834c:	dc0b      	bgt.n	8008366 <__exponent+0x56>
 800834e:	3d02      	subs	r5, #2
 8008350:	3430      	adds	r4, #48	; 0x30
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	702c      	strb	r4, [r5, #0]
 8008356:	aa02      	add	r2, sp, #8
 8008358:	3207      	adds	r2, #7
 800835a:	0018      	movs	r0, r3
 800835c:	42aa      	cmp	r2, r5
 800835e:	d804      	bhi.n	800836a <__exponent+0x5a>
 8008360:	1b80      	subs	r0, r0, r6
 8008362:	b005      	add	sp, #20
 8008364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008366:	003d      	movs	r5, r7
 8008368:	e7e3      	b.n	8008332 <__exponent+0x22>
 800836a:	782a      	ldrb	r2, [r5, #0]
 800836c:	3501      	adds	r5, #1
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	e7f0      	b.n	8008356 <__exponent+0x46>
 8008374:	2330      	movs	r3, #48	; 0x30
 8008376:	18e4      	adds	r4, r4, r3
 8008378:	70b3      	strb	r3, [r6, #2]
 800837a:	1d30      	adds	r0, r6, #4
 800837c:	70f4      	strb	r4, [r6, #3]
 800837e:	e7ef      	b.n	8008360 <__exponent+0x50>

08008380 <_printf_float>:
 8008380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008382:	b095      	sub	sp, #84	; 0x54
 8008384:	000c      	movs	r4, r1
 8008386:	920a      	str	r2, [sp, #40]	; 0x28
 8008388:	930b      	str	r3, [sp, #44]	; 0x2c
 800838a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800838c:	9009      	str	r0, [sp, #36]	; 0x24
 800838e:	f002 fefd 	bl	800b18c <_localeconv_r>
 8008392:	6803      	ldr	r3, [r0, #0]
 8008394:	0018      	movs	r0, r3
 8008396:	930c      	str	r3, [sp, #48]	; 0x30
 8008398:	f7f7 feb6 	bl	8000108 <strlen>
 800839c:	2300      	movs	r3, #0
 800839e:	9312      	str	r3, [sp, #72]	; 0x48
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	900e      	str	r0, [sp, #56]	; 0x38
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
 80083a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083a8:	7e27      	ldrb	r7, [r4, #24]
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	2207      	movs	r2, #7
 80083ae:	05c9      	lsls	r1, r1, #23
 80083b0:	d545      	bpl.n	800843e <_printf_float+0xbe>
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	4393      	bics	r3, r2
 80083b6:	001a      	movs	r2, r3
 80083b8:	3208      	adds	r2, #8
 80083ba:	602a      	str	r2, [r5, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	64a2      	str	r2, [r4, #72]	; 0x48
 80083c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083c4:	2201      	movs	r2, #1
 80083c6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80083c8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80083ca:	006b      	lsls	r3, r5, #1
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d0:	4252      	negs	r2, r2
 80083d2:	4bac      	ldr	r3, [pc, #688]	; (8008684 <_printf_float+0x304>)
 80083d4:	0030      	movs	r0, r6
 80083d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083d8:	f7f9 fd9a 	bl	8001f10 <__aeabi_dcmpun>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d130      	bne.n	8008442 <_printf_float+0xc2>
 80083e0:	2201      	movs	r2, #1
 80083e2:	4ba8      	ldr	r3, [pc, #672]	; (8008684 <_printf_float+0x304>)
 80083e4:	4252      	negs	r2, r2
 80083e6:	0030      	movs	r0, r6
 80083e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083ea:	f7f8 f835 	bl	8000458 <__aeabi_dcmple>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d127      	bne.n	8008442 <_printf_float+0xc2>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	0030      	movs	r0, r6
 80083f8:	0029      	movs	r1, r5
 80083fa:	f7f8 f823 	bl	8000444 <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d003      	beq.n	800840a <_printf_float+0x8a>
 8008402:	0023      	movs	r3, r4
 8008404:	222d      	movs	r2, #45	; 0x2d
 8008406:	3343      	adds	r3, #67	; 0x43
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	4d9f      	ldr	r5, [pc, #636]	; (8008688 <_printf_float+0x308>)
 800840c:	2f47      	cmp	r7, #71	; 0x47
 800840e:	d800      	bhi.n	8008412 <_printf_float+0x92>
 8008410:	4d9e      	ldr	r5, [pc, #632]	; (800868c <_printf_float+0x30c>)
 8008412:	2303      	movs	r3, #3
 8008414:	2600      	movs	r6, #0
 8008416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	3301      	adds	r3, #1
 800841c:	439a      	bics	r2, r3
 800841e:	6022      	str	r2, [r4, #0]
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	aa13      	add	r2, sp, #76	; 0x4c
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	0021      	movs	r1, r4
 8008428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842c:	f000 f9f4 	bl	8008818 <_printf_common>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d000      	beq.n	8008436 <_printf_float+0xb6>
 8008434:	e093      	b.n	800855e <_printf_float+0x1de>
 8008436:	2001      	movs	r0, #1
 8008438:	4240      	negs	r0, r0
 800843a:	b015      	add	sp, #84	; 0x54
 800843c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800843e:	3307      	adds	r3, #7
 8008440:	e7b8      	b.n	80083b4 <_printf_float+0x34>
 8008442:	0032      	movs	r2, r6
 8008444:	002b      	movs	r3, r5
 8008446:	0030      	movs	r0, r6
 8008448:	0029      	movs	r1, r5
 800844a:	f7f9 fd61 	bl	8001f10 <__aeabi_dcmpun>
 800844e:	2800      	cmp	r0, #0
 8008450:	d004      	beq.n	800845c <_printf_float+0xdc>
 8008452:	4d8f      	ldr	r5, [pc, #572]	; (8008690 <_printf_float+0x310>)
 8008454:	2f47      	cmp	r7, #71	; 0x47
 8008456:	d8dc      	bhi.n	8008412 <_printf_float+0x92>
 8008458:	4d8e      	ldr	r5, [pc, #568]	; (8008694 <_printf_float+0x314>)
 800845a:	e7da      	b.n	8008412 <_printf_float+0x92>
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	430b      	orrs	r3, r1
 8008466:	1c51      	adds	r1, r2, #1
 8008468:	d143      	bne.n	80084f2 <_printf_float+0x172>
 800846a:	3207      	adds	r2, #7
 800846c:	6062      	str	r2, [r4, #4]
 800846e:	aa12      	add	r2, sp, #72	; 0x48
 8008470:	2100      	movs	r1, #0
 8008472:	9205      	str	r2, [sp, #20]
 8008474:	aa11      	add	r2, sp, #68	; 0x44
 8008476:	9203      	str	r2, [sp, #12]
 8008478:	2223      	movs	r2, #35	; 0x23
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	9106      	str	r1, [sp, #24]
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	a908      	add	r1, sp, #32
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	1852      	adds	r2, r2, r1
 8008486:	9202      	str	r2, [sp, #8]
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	0032      	movs	r2, r6
 800848c:	002b      	movs	r3, r5
 800848e:	9704      	str	r7, [sp, #16]
 8008490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008492:	f7ff fed9 	bl	8008248 <__cvt>
 8008496:	2320      	movs	r3, #32
 8008498:	003a      	movs	r2, r7
 800849a:	0005      	movs	r5, r0
 800849c:	439a      	bics	r2, r3
 800849e:	2a47      	cmp	r2, #71	; 0x47
 80084a0:	d107      	bne.n	80084b2 <_printf_float+0x132>
 80084a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a4:	1cda      	adds	r2, r3, #3
 80084a6:	db02      	blt.n	80084ae <_printf_float+0x12e>
 80084a8:	6862      	ldr	r2, [r4, #4]
 80084aa:	4293      	cmp	r3, r2
 80084ac:	dd45      	ble.n	800853a <_printf_float+0x1ba>
 80084ae:	3f02      	subs	r7, #2
 80084b0:	b2ff      	uxtb	r7, r7
 80084b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084b4:	2f65      	cmp	r7, #101	; 0x65
 80084b6:	d825      	bhi.n	8008504 <_printf_float+0x184>
 80084b8:	0020      	movs	r0, r4
 80084ba:	3901      	subs	r1, #1
 80084bc:	003a      	movs	r2, r7
 80084be:	3050      	adds	r0, #80	; 0x50
 80084c0:	9111      	str	r1, [sp, #68]	; 0x44
 80084c2:	f7ff ff25 	bl	8008310 <__exponent>
 80084c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084c8:	0006      	movs	r6, r0
 80084ca:	1813      	adds	r3, r2, r0
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2a01      	cmp	r2, #1
 80084d0:	dc02      	bgt.n	80084d8 <_printf_float+0x158>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	07d2      	lsls	r2, r2, #31
 80084d6:	d501      	bpl.n	80084dc <_printf_float+0x15c>
 80084d8:	3301      	adds	r3, #1
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2323      	movs	r3, #35	; 0x23
 80084de:	aa08      	add	r2, sp, #32
 80084e0:	189b      	adds	r3, r3, r2
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d09b      	beq.n	8008420 <_printf_float+0xa0>
 80084e8:	0023      	movs	r3, r4
 80084ea:	222d      	movs	r2, #45	; 0x2d
 80084ec:	3343      	adds	r3, #67	; 0x43
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e796      	b.n	8008420 <_printf_float+0xa0>
 80084f2:	2f67      	cmp	r7, #103	; 0x67
 80084f4:	d100      	bne.n	80084f8 <_printf_float+0x178>
 80084f6:	e176      	b.n	80087e6 <_printf_float+0x466>
 80084f8:	2f47      	cmp	r7, #71	; 0x47
 80084fa:	d1b8      	bne.n	800846e <_printf_float+0xee>
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	d1b6      	bne.n	800846e <_printf_float+0xee>
 8008500:	2201      	movs	r2, #1
 8008502:	e7b3      	b.n	800846c <_printf_float+0xec>
 8008504:	2f66      	cmp	r7, #102	; 0x66
 8008506:	d119      	bne.n	800853c <_printf_float+0x1bc>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	2900      	cmp	r1, #0
 800850c:	dd0c      	ble.n	8008528 <_printf_float+0x1a8>
 800850e:	6121      	str	r1, [r4, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <_printf_float+0x19a>
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	07d2      	lsls	r2, r2, #31
 8008518:	d502      	bpl.n	8008520 <_printf_float+0x1a0>
 800851a:	3301      	adds	r3, #1
 800851c:	185b      	adds	r3, r3, r1
 800851e:	6123      	str	r3, [r4, #16]
 8008520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008522:	2600      	movs	r6, #0
 8008524:	65a3      	str	r3, [r4, #88]	; 0x58
 8008526:	e7d9      	b.n	80084dc <_printf_float+0x15c>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <_printf_float+0x1b4>
 800852c:	2201      	movs	r2, #1
 800852e:	6821      	ldr	r1, [r4, #0]
 8008530:	4211      	tst	r1, r2
 8008532:	d000      	beq.n	8008536 <_printf_float+0x1b6>
 8008534:	1c9a      	adds	r2, r3, #2
 8008536:	6122      	str	r2, [r4, #16]
 8008538:	e7f2      	b.n	8008520 <_printf_float+0x1a0>
 800853a:	2767      	movs	r7, #103	; 0x67
 800853c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800853e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008540:	4293      	cmp	r3, r2
 8008542:	db05      	blt.n	8008550 <_printf_float+0x1d0>
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	07d2      	lsls	r2, r2, #31
 800854a:	d5e9      	bpl.n	8008520 <_printf_float+0x1a0>
 800854c:	3301      	adds	r3, #1
 800854e:	e7e6      	b.n	800851e <_printf_float+0x19e>
 8008550:	2101      	movs	r1, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	dc01      	bgt.n	800855a <_printf_float+0x1da>
 8008556:	1849      	adds	r1, r1, r1
 8008558:	1ac9      	subs	r1, r1, r3
 800855a:	1852      	adds	r2, r2, r1
 800855c:	e7eb      	b.n	8008536 <_printf_float+0x1b6>
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	0553      	lsls	r3, r2, #21
 8008562:	d408      	bmi.n	8008576 <_printf_float+0x1f6>
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	002a      	movs	r2, r5
 8008568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800856a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800856e:	47a8      	blx	r5
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d129      	bne.n	80085c8 <_printf_float+0x248>
 8008574:	e75f      	b.n	8008436 <_printf_float+0xb6>
 8008576:	2f65      	cmp	r7, #101	; 0x65
 8008578:	d800      	bhi.n	800857c <_printf_float+0x1fc>
 800857a:	e0e0      	b.n	800873e <_printf_float+0x3be>
 800857c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800857e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	f7f7 ff58 	bl	8000438 <__aeabi_dcmpeq>
 8008588:	2800      	cmp	r0, #0
 800858a:	d034      	beq.n	80085f6 <_printf_float+0x276>
 800858c:	2301      	movs	r3, #1
 800858e:	4a42      	ldr	r2, [pc, #264]	; (8008698 <_printf_float+0x318>)
 8008590:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008594:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008596:	47a8      	blx	r5
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d100      	bne.n	800859e <_printf_float+0x21e>
 800859c:	e74b      	b.n	8008436 <_printf_float+0xb6>
 800859e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085a2:	4293      	cmp	r3, r2
 80085a4:	db02      	blt.n	80085ac <_printf_float+0x22c>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	07db      	lsls	r3, r3, #31
 80085aa:	d50d      	bpl.n	80085c8 <_printf_float+0x248>
 80085ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80085ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b6:	47a8      	blx	r5
 80085b8:	2500      	movs	r5, #0
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d100      	bne.n	80085c0 <_printf_float+0x240>
 80085be:	e73a      	b.n	8008436 <_printf_float+0xb6>
 80085c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085c2:	3b01      	subs	r3, #1
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dc0a      	bgt.n	80085de <_printf_float+0x25e>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	079b      	lsls	r3, r3, #30
 80085cc:	d500      	bpl.n	80085d0 <_printf_float+0x250>
 80085ce:	e108      	b.n	80087e2 <_printf_float+0x462>
 80085d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085d2:	68e0      	ldr	r0, [r4, #12]
 80085d4:	4298      	cmp	r0, r3
 80085d6:	db00      	blt.n	80085da <_printf_float+0x25a>
 80085d8:	e72f      	b.n	800843a <_printf_float+0xba>
 80085da:	0018      	movs	r0, r3
 80085dc:	e72d      	b.n	800843a <_printf_float+0xba>
 80085de:	0022      	movs	r2, r4
 80085e0:	2301      	movs	r3, #1
 80085e2:	321a      	adds	r2, #26
 80085e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80085ea:	47b0      	blx	r6
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d100      	bne.n	80085f2 <_printf_float+0x272>
 80085f0:	e721      	b.n	8008436 <_printf_float+0xb6>
 80085f2:	3501      	adds	r5, #1
 80085f4:	e7e4      	b.n	80085c0 <_printf_float+0x240>
 80085f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc2d      	bgt.n	8008658 <_printf_float+0x2d8>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <_printf_float+0x318>)
 8008600:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008604:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008606:	47b0      	blx	r6
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d100      	bne.n	800860e <_printf_float+0x28e>
 800860c:	e713      	b.n	8008436 <_printf_float+0xb6>
 800860e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <_printf_float+0x2a0>
 8008614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <_printf_float+0x2a0>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	07db      	lsls	r3, r3, #31
 800861e:	d5d3      	bpl.n	80085c8 <_printf_float+0x248>
 8008620:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008626:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862a:	47b0      	blx	r6
 800862c:	2600      	movs	r6, #0
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d100      	bne.n	8008634 <_printf_float+0x2b4>
 8008632:	e700      	b.n	8008436 <_printf_float+0xb6>
 8008634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008636:	425b      	negs	r3, r3
 8008638:	42b3      	cmp	r3, r6
 800863a:	dc01      	bgt.n	8008640 <_printf_float+0x2c0>
 800863c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800863e:	e792      	b.n	8008566 <_printf_float+0x1e6>
 8008640:	0022      	movs	r2, r4
 8008642:	2301      	movs	r3, #1
 8008644:	321a      	adds	r2, #26
 8008646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800864a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800864c:	47b8      	blx	r7
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d100      	bne.n	8008654 <_printf_float+0x2d4>
 8008652:	e6f0      	b.n	8008436 <_printf_float+0xb6>
 8008654:	3601      	adds	r6, #1
 8008656:	e7ed      	b.n	8008634 <_printf_float+0x2b4>
 8008658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800865a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800865c:	429f      	cmp	r7, r3
 800865e:	dd00      	ble.n	8008662 <_printf_float+0x2e2>
 8008660:	001f      	movs	r7, r3
 8008662:	2f00      	cmp	r7, #0
 8008664:	dd08      	ble.n	8008678 <_printf_float+0x2f8>
 8008666:	003b      	movs	r3, r7
 8008668:	002a      	movs	r2, r5
 800866a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800866c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008670:	47b0      	blx	r6
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d100      	bne.n	8008678 <_printf_float+0x2f8>
 8008676:	e6de      	b.n	8008436 <_printf_float+0xb6>
 8008678:	2300      	movs	r3, #0
 800867a:	930d      	str	r3, [sp, #52]	; 0x34
 800867c:	43fb      	mvns	r3, r7
 800867e:	17db      	asrs	r3, r3, #31
 8008680:	930f      	str	r3, [sp, #60]	; 0x3c
 8008682:	e018      	b.n	80086b6 <_printf_float+0x336>
 8008684:	7fefffff 	.word	0x7fefffff
 8008688:	0800c18c 	.word	0x0800c18c
 800868c:	0800c188 	.word	0x0800c188
 8008690:	0800c194 	.word	0x0800c194
 8008694:	0800c190 	.word	0x0800c190
 8008698:	0800c198 	.word	0x0800c198
 800869c:	0022      	movs	r2, r4
 800869e:	2301      	movs	r3, #1
 80086a0:	321a      	adds	r2, #26
 80086a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80086a8:	47b0      	blx	r6
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d100      	bne.n	80086b0 <_printf_float+0x330>
 80086ae:	e6c2      	b.n	8008436 <_printf_float+0xb6>
 80086b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b2:	3301      	adds	r3, #1
 80086b4:	930d      	str	r3, [sp, #52]	; 0x34
 80086b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086b8:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80086ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086bc:	403b      	ands	r3, r7
 80086be:	1af3      	subs	r3, r6, r3
 80086c0:	4293      	cmp	r3, r2
 80086c2:	dceb      	bgt.n	800869c <_printf_float+0x31c>
 80086c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086c8:	19ad      	adds	r5, r5, r6
 80086ca:	4293      	cmp	r3, r2
 80086cc:	db10      	blt.n	80086f0 <_printf_float+0x370>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	07db      	lsls	r3, r3, #31
 80086d2:	d40d      	bmi.n	80086f0 <_printf_float+0x370>
 80086d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80086d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086d8:	1bbe      	subs	r6, r7, r6
 80086da:	1aff      	subs	r7, r7, r3
 80086dc:	42b7      	cmp	r7, r6
 80086de:	dd00      	ble.n	80086e2 <_printf_float+0x362>
 80086e0:	0037      	movs	r7, r6
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	dc0d      	bgt.n	8008702 <_printf_float+0x382>
 80086e6:	43fe      	mvns	r6, r7
 80086e8:	17f3      	asrs	r3, r6, #31
 80086ea:	2500      	movs	r5, #0
 80086ec:	930c      	str	r3, [sp, #48]	; 0x30
 80086ee:	e01c      	b.n	800872a <_printf_float+0x3aa>
 80086f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80086fa:	47b8      	blx	r7
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d1e9      	bne.n	80086d4 <_printf_float+0x354>
 8008700:	e699      	b.n	8008436 <_printf_float+0xb6>
 8008702:	003b      	movs	r3, r7
 8008704:	002a      	movs	r2, r5
 8008706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800870a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800870c:	47a8      	blx	r5
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d1e9      	bne.n	80086e6 <_printf_float+0x366>
 8008712:	e690      	b.n	8008436 <_printf_float+0xb6>
 8008714:	0022      	movs	r2, r4
 8008716:	2301      	movs	r3, #1
 8008718:	321a      	adds	r2, #26
 800871a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800871c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800871e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008720:	47b0      	blx	r6
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	d100      	bne.n	8008728 <_printf_float+0x3a8>
 8008726:	e686      	b.n	8008436 <_printf_float+0xb6>
 8008728:	3501      	adds	r5, #1
 800872a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800872c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800872e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	003a      	movs	r2, r7
 8008734:	400a      	ands	r2, r1
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	42ab      	cmp	r3, r5
 800873a:	dceb      	bgt.n	8008714 <_printf_float+0x394>
 800873c:	e744      	b.n	80085c8 <_printf_float+0x248>
 800873e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008740:	2b01      	cmp	r3, #1
 8008742:	dc02      	bgt.n	800874a <_printf_float+0x3ca>
 8008744:	2301      	movs	r3, #1
 8008746:	421a      	tst	r2, r3
 8008748:	d032      	beq.n	80087b0 <_printf_float+0x430>
 800874a:	2301      	movs	r3, #1
 800874c:	002a      	movs	r2, r5
 800874e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008752:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008754:	47b8      	blx	r7
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d100      	bne.n	800875c <_printf_float+0x3dc>
 800875a:	e66c      	b.n	8008436 <_printf_float+0xb6>
 800875c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008760:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008764:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008766:	3501      	adds	r5, #1
 8008768:	47b8      	blx	r7
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d100      	bne.n	8008770 <_printf_float+0x3f0>
 800876e:	e662      	b.n	8008436 <_printf_float+0xb6>
 8008770:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008772:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008776:	2200      	movs	r2, #0
 8008778:	1e5f      	subs	r7, r3, #1
 800877a:	2300      	movs	r3, #0
 800877c:	f7f7 fe5c 	bl	8000438 <__aeabi_dcmpeq>
 8008780:	003b      	movs	r3, r7
 8008782:	2800      	cmp	r0, #0
 8008784:	d014      	beq.n	80087b0 <_printf_float+0x430>
 8008786:	2500      	movs	r5, #0
 8008788:	e00a      	b.n	80087a0 <_printf_float+0x420>
 800878a:	0022      	movs	r2, r4
 800878c:	2301      	movs	r3, #1
 800878e:	321a      	adds	r2, #26
 8008790:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008794:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008796:	47b8      	blx	r7
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d100      	bne.n	800879e <_printf_float+0x41e>
 800879c:	e64b      	b.n	8008436 <_printf_float+0xb6>
 800879e:	3501      	adds	r5, #1
 80087a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087a2:	3b01      	subs	r3, #1
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dcf0      	bgt.n	800878a <_printf_float+0x40a>
 80087a8:	0022      	movs	r2, r4
 80087aa:	0033      	movs	r3, r6
 80087ac:	3250      	adds	r2, #80	; 0x50
 80087ae:	e6db      	b.n	8008568 <_printf_float+0x1e8>
 80087b0:	002a      	movs	r2, r5
 80087b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087b8:	47a8      	blx	r5
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d1f4      	bne.n	80087a8 <_printf_float+0x428>
 80087be:	e63a      	b.n	8008436 <_printf_float+0xb6>
 80087c0:	0022      	movs	r2, r4
 80087c2:	2301      	movs	r3, #1
 80087c4:	3219      	adds	r2, #25
 80087c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80087cc:	47b0      	blx	r6
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d100      	bne.n	80087d4 <_printf_float+0x454>
 80087d2:	e630      	b.n	8008436 <_printf_float+0xb6>
 80087d4:	3501      	adds	r5, #1
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dcef      	bgt.n	80087c0 <_printf_float+0x440>
 80087e0:	e6f6      	b.n	80085d0 <_printf_float+0x250>
 80087e2:	2500      	movs	r5, #0
 80087e4:	e7f7      	b.n	80087d6 <_printf_float+0x456>
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d100      	bne.n	80087ec <_printf_float+0x46c>
 80087ea:	e689      	b.n	8008500 <_printf_float+0x180>
 80087ec:	2100      	movs	r1, #0
 80087ee:	9106      	str	r1, [sp, #24]
 80087f0:	a912      	add	r1, sp, #72	; 0x48
 80087f2:	9105      	str	r1, [sp, #20]
 80087f4:	a911      	add	r1, sp, #68	; 0x44
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	2123      	movs	r1, #35	; 0x23
 80087fa:	a808      	add	r0, sp, #32
 80087fc:	1809      	adds	r1, r1, r0
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	9200      	str	r2, [sp, #0]
 8008804:	002b      	movs	r3, r5
 8008806:	9704      	str	r7, [sp, #16]
 8008808:	9102      	str	r1, [sp, #8]
 800880a:	0032      	movs	r2, r6
 800880c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800880e:	f7ff fd1b 	bl	8008248 <__cvt>
 8008812:	0005      	movs	r5, r0
 8008814:	e645      	b.n	80084a2 <_printf_float+0x122>
 8008816:	46c0      	nop			; (mov r8, r8)

08008818 <_printf_common>:
 8008818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800881a:	0015      	movs	r5, r2
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	688a      	ldr	r2, [r1, #8]
 8008820:	690b      	ldr	r3, [r1, #16]
 8008822:	9000      	str	r0, [sp, #0]
 8008824:	000c      	movs	r4, r1
 8008826:	4293      	cmp	r3, r2
 8008828:	da00      	bge.n	800882c <_printf_common+0x14>
 800882a:	0013      	movs	r3, r2
 800882c:	0022      	movs	r2, r4
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	3243      	adds	r2, #67	; 0x43
 8008832:	7812      	ldrb	r2, [r2, #0]
 8008834:	2a00      	cmp	r2, #0
 8008836:	d001      	beq.n	800883c <_printf_common+0x24>
 8008838:	3301      	adds	r3, #1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	069b      	lsls	r3, r3, #26
 8008840:	d502      	bpl.n	8008848 <_printf_common+0x30>
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	3302      	adds	r3, #2
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	2706      	movs	r7, #6
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	401f      	ands	r7, r3
 800884e:	d027      	beq.n	80088a0 <_printf_common+0x88>
 8008850:	0023      	movs	r3, r4
 8008852:	3343      	adds	r3, #67	; 0x43
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	1e5a      	subs	r2, r3, #1
 8008858:	4193      	sbcs	r3, r2
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	0692      	lsls	r2, r2, #26
 800885e:	d430      	bmi.n	80088c2 <_printf_common+0xaa>
 8008860:	0022      	movs	r2, r4
 8008862:	9901      	ldr	r1, [sp, #4]
 8008864:	3243      	adds	r2, #67	; 0x43
 8008866:	9800      	ldr	r0, [sp, #0]
 8008868:	9e08      	ldr	r6, [sp, #32]
 800886a:	47b0      	blx	r6
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d025      	beq.n	80088bc <_printf_common+0xa4>
 8008870:	2306      	movs	r3, #6
 8008872:	6820      	ldr	r0, [r4, #0]
 8008874:	682a      	ldr	r2, [r5, #0]
 8008876:	68e1      	ldr	r1, [r4, #12]
 8008878:	4003      	ands	r3, r0
 800887a:	2500      	movs	r5, #0
 800887c:	2b04      	cmp	r3, #4
 800887e:	d103      	bne.n	8008888 <_printf_common+0x70>
 8008880:	1a8d      	subs	r5, r1, r2
 8008882:	43eb      	mvns	r3, r5
 8008884:	17db      	asrs	r3, r3, #31
 8008886:	401d      	ands	r5, r3
 8008888:	68a3      	ldr	r3, [r4, #8]
 800888a:	6922      	ldr	r2, [r4, #16]
 800888c:	4293      	cmp	r3, r2
 800888e:	dd01      	ble.n	8008894 <_printf_common+0x7c>
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	18ed      	adds	r5, r5, r3
 8008894:	2700      	movs	r7, #0
 8008896:	42bd      	cmp	r5, r7
 8008898:	d120      	bne.n	80088dc <_printf_common+0xc4>
 800889a:	2000      	movs	r0, #0
 800889c:	e010      	b.n	80088c0 <_printf_common+0xa8>
 800889e:	3701      	adds	r7, #1
 80088a0:	68e3      	ldr	r3, [r4, #12]
 80088a2:	682a      	ldr	r2, [r5, #0]
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	42bb      	cmp	r3, r7
 80088a8:	ddd2      	ble.n	8008850 <_printf_common+0x38>
 80088aa:	0022      	movs	r2, r4
 80088ac:	2301      	movs	r3, #1
 80088ae:	3219      	adds	r2, #25
 80088b0:	9901      	ldr	r1, [sp, #4]
 80088b2:	9800      	ldr	r0, [sp, #0]
 80088b4:	9e08      	ldr	r6, [sp, #32]
 80088b6:	47b0      	blx	r6
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d1f0      	bne.n	800889e <_printf_common+0x86>
 80088bc:	2001      	movs	r0, #1
 80088be:	4240      	negs	r0, r0
 80088c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088c2:	2030      	movs	r0, #48	; 0x30
 80088c4:	18e1      	adds	r1, r4, r3
 80088c6:	3143      	adds	r1, #67	; 0x43
 80088c8:	7008      	strb	r0, [r1, #0]
 80088ca:	0021      	movs	r1, r4
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	3145      	adds	r1, #69	; 0x45
 80088d0:	7809      	ldrb	r1, [r1, #0]
 80088d2:	18a2      	adds	r2, r4, r2
 80088d4:	3243      	adds	r2, #67	; 0x43
 80088d6:	3302      	adds	r3, #2
 80088d8:	7011      	strb	r1, [r2, #0]
 80088da:	e7c1      	b.n	8008860 <_printf_common+0x48>
 80088dc:	0022      	movs	r2, r4
 80088de:	2301      	movs	r3, #1
 80088e0:	321a      	adds	r2, #26
 80088e2:	9901      	ldr	r1, [sp, #4]
 80088e4:	9800      	ldr	r0, [sp, #0]
 80088e6:	9e08      	ldr	r6, [sp, #32]
 80088e8:	47b0      	blx	r6
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d0e6      	beq.n	80088bc <_printf_common+0xa4>
 80088ee:	3701      	adds	r7, #1
 80088f0:	e7d1      	b.n	8008896 <_printf_common+0x7e>
	...

080088f4 <_printf_i>:
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	b089      	sub	sp, #36	; 0x24
 80088f8:	9204      	str	r2, [sp, #16]
 80088fa:	000a      	movs	r2, r1
 80088fc:	3243      	adds	r2, #67	; 0x43
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	9003      	str	r0, [sp, #12]
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	7e0a      	ldrb	r2, [r1, #24]
 8008906:	000c      	movs	r4, r1
 8008908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800890a:	2a6e      	cmp	r2, #110	; 0x6e
 800890c:	d100      	bne.n	8008910 <_printf_i+0x1c>
 800890e:	e086      	b.n	8008a1e <_printf_i+0x12a>
 8008910:	d81f      	bhi.n	8008952 <_printf_i+0x5e>
 8008912:	2a63      	cmp	r2, #99	; 0x63
 8008914:	d033      	beq.n	800897e <_printf_i+0x8a>
 8008916:	d808      	bhi.n	800892a <_printf_i+0x36>
 8008918:	2a00      	cmp	r2, #0
 800891a:	d100      	bne.n	800891e <_printf_i+0x2a>
 800891c:	e08c      	b.n	8008a38 <_printf_i+0x144>
 800891e:	2a58      	cmp	r2, #88	; 0x58
 8008920:	d04d      	beq.n	80089be <_printf_i+0xca>
 8008922:	0025      	movs	r5, r4
 8008924:	3542      	adds	r5, #66	; 0x42
 8008926:	702a      	strb	r2, [r5, #0]
 8008928:	e030      	b.n	800898c <_printf_i+0x98>
 800892a:	2a64      	cmp	r2, #100	; 0x64
 800892c:	d001      	beq.n	8008932 <_printf_i+0x3e>
 800892e:	2a69      	cmp	r2, #105	; 0x69
 8008930:	d1f7      	bne.n	8008922 <_printf_i+0x2e>
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	6825      	ldr	r5, [r4, #0]
 8008936:	1d0a      	adds	r2, r1, #4
 8008938:	0628      	lsls	r0, r5, #24
 800893a:	d529      	bpl.n	8008990 <_printf_i+0x9c>
 800893c:	6808      	ldr	r0, [r1, #0]
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	2800      	cmp	r0, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0x58>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	9a02      	ldr	r2, [sp, #8]
 8008948:	4240      	negs	r0, r0
 800894a:	7013      	strb	r3, [r2, #0]
 800894c:	4e6b      	ldr	r6, [pc, #428]	; (8008afc <_printf_i+0x208>)
 800894e:	270a      	movs	r7, #10
 8008950:	e04f      	b.n	80089f2 <_printf_i+0xfe>
 8008952:	2a73      	cmp	r2, #115	; 0x73
 8008954:	d074      	beq.n	8008a40 <_printf_i+0x14c>
 8008956:	d808      	bhi.n	800896a <_printf_i+0x76>
 8008958:	2a6f      	cmp	r2, #111	; 0x6f
 800895a:	d01f      	beq.n	800899c <_printf_i+0xa8>
 800895c:	2a70      	cmp	r2, #112	; 0x70
 800895e:	d1e0      	bne.n	8008922 <_printf_i+0x2e>
 8008960:	2220      	movs	r2, #32
 8008962:	6809      	ldr	r1, [r1, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	e003      	b.n	8008972 <_printf_i+0x7e>
 800896a:	2a75      	cmp	r2, #117	; 0x75
 800896c:	d016      	beq.n	800899c <_printf_i+0xa8>
 800896e:	2a78      	cmp	r2, #120	; 0x78
 8008970:	d1d7      	bne.n	8008922 <_printf_i+0x2e>
 8008972:	0022      	movs	r2, r4
 8008974:	2178      	movs	r1, #120	; 0x78
 8008976:	3245      	adds	r2, #69	; 0x45
 8008978:	7011      	strb	r1, [r2, #0]
 800897a:	4e61      	ldr	r6, [pc, #388]	; (8008b00 <_printf_i+0x20c>)
 800897c:	e022      	b.n	80089c4 <_printf_i+0xd0>
 800897e:	0025      	movs	r5, r4
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	3542      	adds	r5, #66	; 0x42
 8008984:	1d11      	adds	r1, r2, #4
 8008986:	6019      	str	r1, [r3, #0]
 8008988:	6813      	ldr	r3, [r2, #0]
 800898a:	702b      	strb	r3, [r5, #0]
 800898c:	2301      	movs	r3, #1
 800898e:	e065      	b.n	8008a5c <_printf_i+0x168>
 8008990:	6808      	ldr	r0, [r1, #0]
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	0669      	lsls	r1, r5, #25
 8008996:	d5d3      	bpl.n	8008940 <_printf_i+0x4c>
 8008998:	b200      	sxth	r0, r0
 800899a:	e7d1      	b.n	8008940 <_printf_i+0x4c>
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	1d08      	adds	r0, r1, #4
 80089a2:	6018      	str	r0, [r3, #0]
 80089a4:	6808      	ldr	r0, [r1, #0]
 80089a6:	062e      	lsls	r6, r5, #24
 80089a8:	d505      	bpl.n	80089b6 <_printf_i+0xc2>
 80089aa:	4e54      	ldr	r6, [pc, #336]	; (8008afc <_printf_i+0x208>)
 80089ac:	2708      	movs	r7, #8
 80089ae:	2a6f      	cmp	r2, #111	; 0x6f
 80089b0:	d01b      	beq.n	80089ea <_printf_i+0xf6>
 80089b2:	270a      	movs	r7, #10
 80089b4:	e019      	b.n	80089ea <_printf_i+0xf6>
 80089b6:	066d      	lsls	r5, r5, #25
 80089b8:	d5f7      	bpl.n	80089aa <_printf_i+0xb6>
 80089ba:	b280      	uxth	r0, r0
 80089bc:	e7f5      	b.n	80089aa <_printf_i+0xb6>
 80089be:	3145      	adds	r1, #69	; 0x45
 80089c0:	4e4e      	ldr	r6, [pc, #312]	; (8008afc <_printf_i+0x208>)
 80089c2:	700a      	strb	r2, [r1, #0]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	1d01      	adds	r1, r0, #4
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	6019      	str	r1, [r3, #0]
 80089ce:	0615      	lsls	r5, r2, #24
 80089d0:	d521      	bpl.n	8008a16 <_printf_i+0x122>
 80089d2:	07d3      	lsls	r3, r2, #31
 80089d4:	d502      	bpl.n	80089dc <_printf_i+0xe8>
 80089d6:	2320      	movs	r3, #32
 80089d8:	431a      	orrs	r2, r3
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	2710      	movs	r7, #16
 80089de:	2800      	cmp	r0, #0
 80089e0:	d103      	bne.n	80089ea <_printf_i+0xf6>
 80089e2:	2320      	movs	r3, #32
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	439a      	bics	r2, r3
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	0023      	movs	r3, r4
 80089ec:	2200      	movs	r2, #0
 80089ee:	3343      	adds	r3, #67	; 0x43
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	60a3      	str	r3, [r4, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	db58      	blt.n	8008aac <_printf_i+0x1b8>
 80089fa:	2204      	movs	r2, #4
 80089fc:	6821      	ldr	r1, [r4, #0]
 80089fe:	4391      	bics	r1, r2
 8008a00:	6021      	str	r1, [r4, #0]
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d154      	bne.n	8008ab0 <_printf_i+0x1bc>
 8008a06:	9d02      	ldr	r5, [sp, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d05a      	beq.n	8008ac2 <_printf_i+0x1ce>
 8008a0c:	0025      	movs	r5, r4
 8008a0e:	7833      	ldrb	r3, [r6, #0]
 8008a10:	3542      	adds	r5, #66	; 0x42
 8008a12:	702b      	strb	r3, [r5, #0]
 8008a14:	e055      	b.n	8008ac2 <_printf_i+0x1ce>
 8008a16:	0655      	lsls	r5, r2, #25
 8008a18:	d5db      	bpl.n	80089d2 <_printf_i+0xde>
 8008a1a:	b280      	uxth	r0, r0
 8008a1c:	e7d9      	b.n	80089d2 <_printf_i+0xde>
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	680d      	ldr	r5, [r1, #0]
 8008a22:	1d10      	adds	r0, r2, #4
 8008a24:	6949      	ldr	r1, [r1, #20]
 8008a26:	6018      	str	r0, [r3, #0]
 8008a28:	6813      	ldr	r3, [r2, #0]
 8008a2a:	062e      	lsls	r6, r5, #24
 8008a2c:	d501      	bpl.n	8008a32 <_printf_i+0x13e>
 8008a2e:	6019      	str	r1, [r3, #0]
 8008a30:	e002      	b.n	8008a38 <_printf_i+0x144>
 8008a32:	066d      	lsls	r5, r5, #25
 8008a34:	d5fb      	bpl.n	8008a2e <_printf_i+0x13a>
 8008a36:	8019      	strh	r1, [r3, #0]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9d02      	ldr	r5, [sp, #8]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	e04f      	b.n	8008ae0 <_printf_i+0x1ec>
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	1d11      	adds	r1, r2, #4
 8008a44:	6019      	str	r1, [r3, #0]
 8008a46:	6815      	ldr	r5, [r2, #0]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6862      	ldr	r2, [r4, #4]
 8008a4c:	0028      	movs	r0, r5
 8008a4e:	f002 fbbb 	bl	800b1c8 <memchr>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d001      	beq.n	8008a5a <_printf_i+0x166>
 8008a56:	1b40      	subs	r0, r0, r5
 8008a58:	6060      	str	r0, [r4, #4]
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9a02      	ldr	r2, [sp, #8]
 8008a62:	7013      	strb	r3, [r2, #0]
 8008a64:	e03c      	b.n	8008ae0 <_printf_i+0x1ec>
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	002a      	movs	r2, r5
 8008a6a:	9904      	ldr	r1, [sp, #16]
 8008a6c:	9803      	ldr	r0, [sp, #12]
 8008a6e:	9d05      	ldr	r5, [sp, #20]
 8008a70:	47a8      	blx	r5
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	d03e      	beq.n	8008af4 <_printf_i+0x200>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	079b      	lsls	r3, r3, #30
 8008a7a:	d415      	bmi.n	8008aa8 <_printf_i+0x1b4>
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	68e0      	ldr	r0, [r4, #12]
 8008a80:	4298      	cmp	r0, r3
 8008a82:	da39      	bge.n	8008af8 <_printf_i+0x204>
 8008a84:	0018      	movs	r0, r3
 8008a86:	e037      	b.n	8008af8 <_printf_i+0x204>
 8008a88:	0022      	movs	r2, r4
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	3219      	adds	r2, #25
 8008a8e:	9904      	ldr	r1, [sp, #16]
 8008a90:	9803      	ldr	r0, [sp, #12]
 8008a92:	9e05      	ldr	r6, [sp, #20]
 8008a94:	47b0      	blx	r6
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d02c      	beq.n	8008af4 <_printf_i+0x200>
 8008a9a:	3501      	adds	r5, #1
 8008a9c:	68e3      	ldr	r3, [r4, #12]
 8008a9e:	9a07      	ldr	r2, [sp, #28]
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	42ab      	cmp	r3, r5
 8008aa4:	dcf0      	bgt.n	8008a88 <_printf_i+0x194>
 8008aa6:	e7e9      	b.n	8008a7c <_printf_i+0x188>
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	e7f7      	b.n	8008a9c <_printf_i+0x1a8>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d0ad      	beq.n	8008a0c <_printf_i+0x118>
 8008ab0:	9d02      	ldr	r5, [sp, #8]
 8008ab2:	0039      	movs	r1, r7
 8008ab4:	f7f7 fbc0 	bl	8000238 <__aeabi_uidivmod>
 8008ab8:	5c73      	ldrb	r3, [r6, r1]
 8008aba:	3d01      	subs	r5, #1
 8008abc:	702b      	strb	r3, [r5, #0]
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1f7      	bne.n	8008ab2 <_printf_i+0x1be>
 8008ac2:	2f08      	cmp	r7, #8
 8008ac4:	d109      	bne.n	8008ada <_printf_i+0x1e6>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d506      	bpl.n	8008ada <_printf_i+0x1e6>
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	dc02      	bgt.n	8008ada <_printf_i+0x1e6>
 8008ad4:	2330      	movs	r3, #48	; 0x30
 8008ad6:	3d01      	subs	r5, #1
 8008ad8:	702b      	strb	r3, [r5, #0]
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	1b5b      	subs	r3, r3, r5
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	aa07      	add	r2, sp, #28
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	0021      	movs	r1, r4
 8008ae8:	9b04      	ldr	r3, [sp, #16]
 8008aea:	9803      	ldr	r0, [sp, #12]
 8008aec:	f7ff fe94 	bl	8008818 <_printf_common>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d1b8      	bne.n	8008a66 <_printf_i+0x172>
 8008af4:	2001      	movs	r0, #1
 8008af6:	4240      	negs	r0, r0
 8008af8:	b009      	add	sp, #36	; 0x24
 8008afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afc:	0800c19a 	.word	0x0800c19a
 8008b00:	0800c1ab 	.word	0x0800c1ab

08008b04 <_scanf_float>:
 8008b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b06:	b08b      	sub	sp, #44	; 0x2c
 8008b08:	9002      	str	r0, [sp, #8]
 8008b0a:	9200      	str	r2, [sp, #0]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	22ae      	movs	r2, #174	; 0xae
 8008b10:	9305      	str	r3, [sp, #20]
 8008b12:	688b      	ldr	r3, [r1, #8]
 8008b14:	000e      	movs	r6, r1
 8008b16:	1e59      	subs	r1, r3, #1
 8008b18:	0052      	lsls	r2, r2, #1
 8008b1a:	9004      	str	r0, [sp, #16]
 8008b1c:	4291      	cmp	r1, r2
 8008b1e:	d905      	bls.n	8008b2c <_scanf_float+0x28>
 8008b20:	3b5e      	subs	r3, #94	; 0x5e
 8008b22:	3bff      	subs	r3, #255	; 0xff
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	235e      	movs	r3, #94	; 0x5e
 8008b28:	33ff      	adds	r3, #255	; 0xff
 8008b2a:	60b3      	str	r3, [r6, #8]
 8008b2c:	23f0      	movs	r3, #240	; 0xf0
 8008b2e:	6832      	ldr	r2, [r6, #0]
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	6033      	str	r3, [r6, #0]
 8008b36:	0033      	movs	r3, r6
 8008b38:	2700      	movs	r7, #0
 8008b3a:	331c      	adds	r3, #28
 8008b3c:	001d      	movs	r5, r3
 8008b3e:	003c      	movs	r4, r7
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	9708      	str	r7, [sp, #32]
 8008b44:	9707      	str	r7, [sp, #28]
 8008b46:	9701      	str	r7, [sp, #4]
 8008b48:	9706      	str	r7, [sp, #24]
 8008b4a:	68b2      	ldr	r2, [r6, #8]
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	d013      	beq.n	8008b78 <_scanf_float+0x74>
 8008b50:	9b00      	ldr	r3, [sp, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9309      	str	r3, [sp, #36]	; 0x24
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b49      	cmp	r3, #73	; 0x49
 8008b5a:	d100      	bne.n	8008b5e <_scanf_float+0x5a>
 8008b5c:	e07c      	b.n	8008c58 <_scanf_float+0x154>
 8008b5e:	d854      	bhi.n	8008c0a <_scanf_float+0x106>
 8008b60:	2b39      	cmp	r3, #57	; 0x39
 8008b62:	d847      	bhi.n	8008bf4 <_scanf_float+0xf0>
 8008b64:	2b31      	cmp	r3, #49	; 0x31
 8008b66:	d300      	bcc.n	8008b6a <_scanf_float+0x66>
 8008b68:	e094      	b.n	8008c94 <_scanf_float+0x190>
 8008b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8008b6c:	d100      	bne.n	8008b70 <_scanf_float+0x6c>
 8008b6e:	e09c      	b.n	8008caa <_scanf_float+0x1a6>
 8008b70:	d817      	bhi.n	8008ba2 <_scanf_float+0x9e>
 8008b72:	2b2b      	cmp	r3, #43	; 0x2b
 8008b74:	d100      	bne.n	8008b78 <_scanf_float+0x74>
 8008b76:	e098      	b.n	8008caa <_scanf_float+0x1a6>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <_scanf_float+0x82>
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	4b9b      	ldr	r3, [pc, #620]	; (8008df0 <_scanf_float+0x2ec>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	3c01      	subs	r4, #1
 8008b88:	2c01      	cmp	r4, #1
 8008b8a:	d900      	bls.n	8008b8e <_scanf_float+0x8a>
 8008b8c:	e0ee      	b.n	8008d6c <_scanf_float+0x268>
 8008b8e:	24be      	movs	r4, #190	; 0xbe
 8008b90:	0064      	lsls	r4, r4, #1
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	429d      	cmp	r5, r3
 8008b96:	d900      	bls.n	8008b9a <_scanf_float+0x96>
 8008b98:	e0de      	b.n	8008d58 <_scanf_float+0x254>
 8008b9a:	2701      	movs	r7, #1
 8008b9c:	0038      	movs	r0, r7
 8008b9e:	b00b      	add	sp, #44	; 0x2c
 8008ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ba4:	d100      	bne.n	8008ba8 <_scanf_float+0xa4>
 8008ba6:	e0a2      	b.n	8008cee <_scanf_float+0x1ea>
 8008ba8:	2b30      	cmp	r3, #48	; 0x30
 8008baa:	d1e5      	bne.n	8008b78 <_scanf_float+0x74>
 8008bac:	6831      	ldr	r1, [r6, #0]
 8008bae:	05c8      	lsls	r0, r1, #23
 8008bb0:	d570      	bpl.n	8008c94 <_scanf_float+0x190>
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	4399      	bics	r1, r3
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	6031      	str	r1, [r6, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <_scanf_float+0xc8>
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	3201      	adds	r2, #1
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	60b2      	str	r2, [r6, #8]
 8008bcc:	68b3      	ldr	r3, [r6, #8]
 8008bce:	9a00      	ldr	r2, [sp, #0]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	60b3      	str	r3, [r6, #8]
 8008bd4:	6933      	ldr	r3, [r6, #16]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	6133      	str	r3, [r6, #16]
 8008bda:	9b00      	ldr	r3, [sp, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	3b01      	subs	r3, #1
 8008be2:	6053      	str	r3, [r2, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc00      	bgt.n	8008bea <_scanf_float+0xe6>
 8008be8:	e0ac      	b.n	8008d44 <_scanf_float+0x240>
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	9309      	str	r3, [sp, #36]	; 0x24
 8008bee:	3301      	adds	r3, #1
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	e7aa      	b.n	8008b4a <_scanf_float+0x46>
 8008bf4:	2b45      	cmp	r3, #69	; 0x45
 8008bf6:	d100      	bne.n	8008bfa <_scanf_float+0xf6>
 8008bf8:	e083      	b.n	8008d02 <_scanf_float+0x1fe>
 8008bfa:	2b46      	cmp	r3, #70	; 0x46
 8008bfc:	d06d      	beq.n	8008cda <_scanf_float+0x1d6>
 8008bfe:	2b41      	cmp	r3, #65	; 0x41
 8008c00:	d1ba      	bne.n	8008b78 <_scanf_float+0x74>
 8008c02:	2c01      	cmp	r4, #1
 8008c04:	d1b8      	bne.n	8008b78 <_scanf_float+0x74>
 8008c06:	2402      	movs	r4, #2
 8008c08:	e04c      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008c0a:	2b65      	cmp	r3, #101	; 0x65
 8008c0c:	d079      	beq.n	8008d02 <_scanf_float+0x1fe>
 8008c0e:	d81b      	bhi.n	8008c48 <_scanf_float+0x144>
 8008c10:	2b54      	cmp	r3, #84	; 0x54
 8008c12:	d067      	beq.n	8008ce4 <_scanf_float+0x1e0>
 8008c14:	d813      	bhi.n	8008c3e <_scanf_float+0x13a>
 8008c16:	2b4e      	cmp	r3, #78	; 0x4e
 8008c18:	d1ae      	bne.n	8008b78 <_scanf_float+0x74>
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d14c      	bne.n	8008cb8 <_scanf_float+0x1b4>
 8008c1e:	9a01      	ldr	r2, [sp, #4]
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	d14b      	bne.n	8008cbc <_scanf_float+0x1b8>
 8008c24:	21e0      	movs	r1, #224	; 0xe0
 8008c26:	20e0      	movs	r0, #224	; 0xe0
 8008c28:	6832      	ldr	r2, [r6, #0]
 8008c2a:	00c9      	lsls	r1, r1, #3
 8008c2c:	4011      	ands	r1, r2
 8008c2e:	00c0      	lsls	r0, r0, #3
 8008c30:	4281      	cmp	r1, r0
 8008c32:	d143      	bne.n	8008cbc <_scanf_float+0x1b8>
 8008c34:	496f      	ldr	r1, [pc, #444]	; (8008df4 <_scanf_float+0x2f0>)
 8008c36:	3401      	adds	r4, #1
 8008c38:	400a      	ands	r2, r1
 8008c3a:	6032      	str	r2, [r6, #0]
 8008c3c:	e032      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008c3e:	2b59      	cmp	r3, #89	; 0x59
 8008c40:	d023      	beq.n	8008c8a <_scanf_float+0x186>
 8008c42:	2b61      	cmp	r3, #97	; 0x61
 8008c44:	d0dd      	beq.n	8008c02 <_scanf_float+0xfe>
 8008c46:	e797      	b.n	8008b78 <_scanf_float+0x74>
 8008c48:	2b6e      	cmp	r3, #110	; 0x6e
 8008c4a:	d0e6      	beq.n	8008c1a <_scanf_float+0x116>
 8008c4c:	d818      	bhi.n	8008c80 <_scanf_float+0x17c>
 8008c4e:	2b66      	cmp	r3, #102	; 0x66
 8008c50:	d043      	beq.n	8008cda <_scanf_float+0x1d6>
 8008c52:	2b69      	cmp	r3, #105	; 0x69
 8008c54:	d000      	beq.n	8008c58 <_scanf_float+0x154>
 8008c56:	e78f      	b.n	8008b78 <_scanf_float+0x74>
 8008c58:	2f00      	cmp	r7, #0
 8008c5a:	d137      	bne.n	8008ccc <_scanf_float+0x1c8>
 8008c5c:	9a01      	ldr	r2, [sp, #4]
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d000      	beq.n	8008c64 <_scanf_float+0x160>
 8008c62:	e78c      	b.n	8008b7e <_scanf_float+0x7a>
 8008c64:	21e0      	movs	r1, #224	; 0xe0
 8008c66:	20e0      	movs	r0, #224	; 0xe0
 8008c68:	6832      	ldr	r2, [r6, #0]
 8008c6a:	00c9      	lsls	r1, r1, #3
 8008c6c:	4011      	ands	r1, r2
 8008c6e:	00c0      	lsls	r0, r0, #3
 8008c70:	4281      	cmp	r1, r0
 8008c72:	d000      	beq.n	8008c76 <_scanf_float+0x172>
 8008c74:	e787      	b.n	8008b86 <_scanf_float+0x82>
 8008c76:	495f      	ldr	r1, [pc, #380]	; (8008df4 <_scanf_float+0x2f0>)
 8008c78:	3701      	adds	r7, #1
 8008c7a:	400a      	ands	r2, r1
 8008c7c:	6032      	str	r2, [r6, #0]
 8008c7e:	e011      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008c80:	2b74      	cmp	r3, #116	; 0x74
 8008c82:	d02f      	beq.n	8008ce4 <_scanf_float+0x1e0>
 8008c84:	2b79      	cmp	r3, #121	; 0x79
 8008c86:	d000      	beq.n	8008c8a <_scanf_float+0x186>
 8008c88:	e776      	b.n	8008b78 <_scanf_float+0x74>
 8008c8a:	2f07      	cmp	r7, #7
 8008c8c:	d000      	beq.n	8008c90 <_scanf_float+0x18c>
 8008c8e:	e773      	b.n	8008b78 <_scanf_float+0x74>
 8008c90:	2708      	movs	r7, #8
 8008c92:	e007      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008c94:	19e2      	adds	r2, r4, r7
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	d000      	beq.n	8008c9c <_scanf_float+0x198>
 8008c9a:	e76d      	b.n	8008b78 <_scanf_float+0x74>
 8008c9c:	4a56      	ldr	r2, [pc, #344]	; (8008df8 <_scanf_float+0x2f4>)
 8008c9e:	6831      	ldr	r1, [r6, #0]
 8008ca0:	400a      	ands	r2, r1
 8008ca2:	6032      	str	r2, [r6, #0]
 8008ca4:	702b      	strb	r3, [r5, #0]
 8008ca6:	3501      	adds	r5, #1
 8008ca8:	e790      	b.n	8008bcc <_scanf_float+0xc8>
 8008caa:	2180      	movs	r1, #128	; 0x80
 8008cac:	6832      	ldr	r2, [r6, #0]
 8008cae:	420a      	tst	r2, r1
 8008cb0:	d100      	bne.n	8008cb4 <_scanf_float+0x1b0>
 8008cb2:	e761      	b.n	8008b78 <_scanf_float+0x74>
 8008cb4:	438a      	bics	r2, r1
 8008cb6:	e7f4      	b.n	8008ca2 <_scanf_float+0x19e>
 8008cb8:	2c02      	cmp	r4, #2
 8008cba:	d041      	beq.n	8008d40 <_scanf_float+0x23c>
 8008cbc:	2f01      	cmp	r7, #1
 8008cbe:	d002      	beq.n	8008cc6 <_scanf_float+0x1c2>
 8008cc0:	2f04      	cmp	r7, #4
 8008cc2:	d000      	beq.n	8008cc6 <_scanf_float+0x1c2>
 8008cc4:	e758      	b.n	8008b78 <_scanf_float+0x74>
 8008cc6:	3701      	adds	r7, #1
 8008cc8:	b2ff      	uxtb	r7, r7
 8008cca:	e7eb      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008ccc:	2102      	movs	r1, #2
 8008cce:	1efa      	subs	r2, r7, #3
 8008cd0:	438a      	bics	r2, r1
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	d0f6      	beq.n	8008cc6 <_scanf_float+0x1c2>
 8008cd8:	e74e      	b.n	8008b78 <_scanf_float+0x74>
 8008cda:	2f02      	cmp	r7, #2
 8008cdc:	d000      	beq.n	8008ce0 <_scanf_float+0x1dc>
 8008cde:	e74b      	b.n	8008b78 <_scanf_float+0x74>
 8008ce0:	2703      	movs	r7, #3
 8008ce2:	e7df      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008ce4:	2f06      	cmp	r7, #6
 8008ce6:	d000      	beq.n	8008cea <_scanf_float+0x1e6>
 8008ce8:	e746      	b.n	8008b78 <_scanf_float+0x74>
 8008cea:	2707      	movs	r7, #7
 8008cec:	e7da      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008cee:	6832      	ldr	r2, [r6, #0]
 8008cf0:	0591      	lsls	r1, r2, #22
 8008cf2:	d400      	bmi.n	8008cf6 <_scanf_float+0x1f2>
 8008cf4:	e740      	b.n	8008b78 <_scanf_float+0x74>
 8008cf6:	4941      	ldr	r1, [pc, #260]	; (8008dfc <_scanf_float+0x2f8>)
 8008cf8:	400a      	ands	r2, r1
 8008cfa:	6032      	str	r2, [r6, #0]
 8008cfc:	9a01      	ldr	r2, [sp, #4]
 8008cfe:	9206      	str	r2, [sp, #24]
 8008d00:	e7d0      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008d02:	21a0      	movs	r1, #160	; 0xa0
 8008d04:	2080      	movs	r0, #128	; 0x80
 8008d06:	6832      	ldr	r2, [r6, #0]
 8008d08:	00c9      	lsls	r1, r1, #3
 8008d0a:	4011      	ands	r1, r2
 8008d0c:	00c0      	lsls	r0, r0, #3
 8008d0e:	4281      	cmp	r1, r0
 8008d10:	d006      	beq.n	8008d20 <_scanf_float+0x21c>
 8008d12:	4202      	tst	r2, r0
 8008d14:	d100      	bne.n	8008d18 <_scanf_float+0x214>
 8008d16:	e72f      	b.n	8008b78 <_scanf_float+0x74>
 8008d18:	9901      	ldr	r1, [sp, #4]
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	d100      	bne.n	8008d20 <_scanf_float+0x21c>
 8008d1e:	e732      	b.n	8008b86 <_scanf_float+0x82>
 8008d20:	0591      	lsls	r1, r2, #22
 8008d22:	d404      	bmi.n	8008d2e <_scanf_float+0x22a>
 8008d24:	9901      	ldr	r1, [sp, #4]
 8008d26:	9806      	ldr	r0, [sp, #24]
 8008d28:	9508      	str	r5, [sp, #32]
 8008d2a:	1a09      	subs	r1, r1, r0
 8008d2c:	9107      	str	r1, [sp, #28]
 8008d2e:	4931      	ldr	r1, [pc, #196]	; (8008df4 <_scanf_float+0x2f0>)
 8008d30:	400a      	ands	r2, r1
 8008d32:	21c0      	movs	r1, #192	; 0xc0
 8008d34:	0049      	lsls	r1, r1, #1
 8008d36:	430a      	orrs	r2, r1
 8008d38:	6032      	str	r2, [r6, #0]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	9201      	str	r2, [sp, #4]
 8008d3e:	e7b1      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008d40:	2403      	movs	r4, #3
 8008d42:	e7af      	b.n	8008ca4 <_scanf_float+0x1a0>
 8008d44:	23c0      	movs	r3, #192	; 0xc0
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	58f3      	ldr	r3, [r6, r3]
 8008d4a:	9900      	ldr	r1, [sp, #0]
 8008d4c:	9802      	ldr	r0, [sp, #8]
 8008d4e:	4798      	blx	r3
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d100      	bne.n	8008d56 <_scanf_float+0x252>
 8008d54:	e6f9      	b.n	8008b4a <_scanf_float+0x46>
 8008d56:	e70f      	b.n	8008b78 <_scanf_float+0x74>
 8008d58:	3d01      	subs	r5, #1
 8008d5a:	5933      	ldr	r3, [r6, r4]
 8008d5c:	7829      	ldrb	r1, [r5, #0]
 8008d5e:	9a00      	ldr	r2, [sp, #0]
 8008d60:	9802      	ldr	r0, [sp, #8]
 8008d62:	4798      	blx	r3
 8008d64:	6933      	ldr	r3, [r6, #16]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	6133      	str	r3, [r6, #16]
 8008d6a:	e712      	b.n	8008b92 <_scanf_float+0x8e>
 8008d6c:	1e7b      	subs	r3, r7, #1
 8008d6e:	2b06      	cmp	r3, #6
 8008d70:	d826      	bhi.n	8008dc0 <_scanf_float+0x2bc>
 8008d72:	2f02      	cmp	r7, #2
 8008d74:	d839      	bhi.n	8008dea <_scanf_float+0x2e6>
 8008d76:	24be      	movs	r4, #190	; 0xbe
 8008d78:	0064      	lsls	r4, r4, #1
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	429d      	cmp	r5, r3
 8008d7e:	d800      	bhi.n	8008d82 <_scanf_float+0x27e>
 8008d80:	e70b      	b.n	8008b9a <_scanf_float+0x96>
 8008d82:	3d01      	subs	r5, #1
 8008d84:	5933      	ldr	r3, [r6, r4]
 8008d86:	7829      	ldrb	r1, [r5, #0]
 8008d88:	9a00      	ldr	r2, [sp, #0]
 8008d8a:	9802      	ldr	r0, [sp, #8]
 8008d8c:	4798      	blx	r3
 8008d8e:	6933      	ldr	r3, [r6, #16]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	6133      	str	r3, [r6, #16]
 8008d94:	e7f1      	b.n	8008d7a <_scanf_float+0x276>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	9a00      	ldr	r2, [sp, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	7819      	ldrb	r1, [r3, #0]
 8008da0:	23be      	movs	r3, #190	; 0xbe
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	58f3      	ldr	r3, [r6, r3]
 8008da6:	9802      	ldr	r0, [sp, #8]
 8008da8:	9309      	str	r3, [sp, #36]	; 0x24
 8008daa:	4798      	blx	r3
 8008dac:	6933      	ldr	r3, [r6, #16]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	6133      	str	r3, [r6, #16]
 8008db2:	3c01      	subs	r4, #1
 8008db4:	b2e4      	uxtb	r4, r4
 8008db6:	2c02      	cmp	r4, #2
 8008db8:	d1ed      	bne.n	8008d96 <_scanf_float+0x292>
 8008dba:	3f03      	subs	r7, #3
 8008dbc:	b2ff      	uxtb	r7, r7
 8008dbe:	1bed      	subs	r5, r5, r7
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	05da      	lsls	r2, r3, #23
 8008dc4:	d537      	bpl.n	8008e36 <_scanf_float+0x332>
 8008dc6:	055b      	lsls	r3, r3, #21
 8008dc8:	d51a      	bpl.n	8008e00 <_scanf_float+0x2fc>
 8008dca:	24be      	movs	r4, #190	; 0xbe
 8008dcc:	0064      	lsls	r4, r4, #1
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	429d      	cmp	r5, r3
 8008dd2:	d800      	bhi.n	8008dd6 <_scanf_float+0x2d2>
 8008dd4:	e6e1      	b.n	8008b9a <_scanf_float+0x96>
 8008dd6:	3d01      	subs	r5, #1
 8008dd8:	5933      	ldr	r3, [r6, r4]
 8008dda:	7829      	ldrb	r1, [r5, #0]
 8008ddc:	9a00      	ldr	r2, [sp, #0]
 8008dde:	9802      	ldr	r0, [sp, #8]
 8008de0:	4798      	blx	r3
 8008de2:	6933      	ldr	r3, [r6, #16]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	6133      	str	r3, [r6, #16]
 8008de8:	e7f1      	b.n	8008dce <_scanf_float+0x2ca>
 8008dea:	003c      	movs	r4, r7
 8008dec:	9504      	str	r5, [sp, #16]
 8008dee:	e7e0      	b.n	8008db2 <_scanf_float+0x2ae>
 8008df0:	fffffeff 	.word	0xfffffeff
 8008df4:	fffff87f 	.word	0xfffff87f
 8008df8:	fffffe7f 	.word	0xfffffe7f
 8008dfc:	fffffd7f 	.word	0xfffffd7f
 8008e00:	6933      	ldr	r3, [r6, #16]
 8008e02:	1e6c      	subs	r4, r5, #1
 8008e04:	7821      	ldrb	r1, [r4, #0]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	6133      	str	r3, [r6, #16]
 8008e0a:	2965      	cmp	r1, #101	; 0x65
 8008e0c:	d00c      	beq.n	8008e28 <_scanf_float+0x324>
 8008e0e:	2945      	cmp	r1, #69	; 0x45
 8008e10:	d00a      	beq.n	8008e28 <_scanf_float+0x324>
 8008e12:	23be      	movs	r3, #190	; 0xbe
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	58f3      	ldr	r3, [r6, r3]
 8008e18:	9a00      	ldr	r2, [sp, #0]
 8008e1a:	9802      	ldr	r0, [sp, #8]
 8008e1c:	4798      	blx	r3
 8008e1e:	6933      	ldr	r3, [r6, #16]
 8008e20:	1eac      	subs	r4, r5, #2
 8008e22:	3b01      	subs	r3, #1
 8008e24:	7821      	ldrb	r1, [r4, #0]
 8008e26:	6133      	str	r3, [r6, #16]
 8008e28:	23be      	movs	r3, #190	; 0xbe
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	58f3      	ldr	r3, [r6, r3]
 8008e2e:	9a00      	ldr	r2, [sp, #0]
 8008e30:	9802      	ldr	r0, [sp, #8]
 8008e32:	4798      	blx	r3
 8008e34:	0025      	movs	r5, r4
 8008e36:	2710      	movs	r7, #16
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	401f      	ands	r7, r3
 8008e3c:	d15b      	bne.n	8008ef6 <_scanf_float+0x3f2>
 8008e3e:	23c0      	movs	r3, #192	; 0xc0
 8008e40:	702f      	strb	r7, [r5, #0]
 8008e42:	6832      	ldr	r2, [r6, #0]
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	4013      	ands	r3, r2
 8008e48:	2280      	movs	r2, #128	; 0x80
 8008e4a:	00d2      	lsls	r2, r2, #3
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d11b      	bne.n	8008e88 <_scanf_float+0x384>
 8008e50:	9a06      	ldr	r2, [sp, #24]
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	425a      	negs	r2, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d122      	bne.n	8008ea2 <_scanf_float+0x39e>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	9903      	ldr	r1, [sp, #12]
 8008e60:	9802      	ldr	r0, [sp, #8]
 8008e62:	f000 ff57 	bl	8009d14 <_strtod_r>
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	0004      	movs	r4, r0
 8008e6a:	6830      	ldr	r0, [r6, #0]
 8008e6c:	000d      	movs	r5, r1
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	0782      	lsls	r2, r0, #30
 8008e72:	d523      	bpl.n	8008ebc <_scanf_float+0x3b8>
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	9905      	ldr	r1, [sp, #20]
 8008e78:	600a      	str	r2, [r1, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	601c      	str	r4, [r3, #0]
 8008e7e:	605d      	str	r5, [r3, #4]
 8008e80:	68f3      	ldr	r3, [r6, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60f3      	str	r3, [r6, #12]
 8008e86:	e689      	b.n	8008b9c <_scanf_float+0x98>
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0e6      	beq.n	8008e5c <_scanf_float+0x358>
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	003a      	movs	r2, r7
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	9802      	ldr	r0, [sp, #8]
 8008e96:	230a      	movs	r3, #10
 8008e98:	f000 ffcc 	bl	8009e34 <_strtol_r>
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	9d08      	ldr	r5, [sp, #32]
 8008ea0:	1ac2      	subs	r2, r0, r3
 8008ea2:	0033      	movs	r3, r6
 8008ea4:	3370      	adds	r3, #112	; 0x70
 8008ea6:	33ff      	adds	r3, #255	; 0xff
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	d302      	bcc.n	8008eb2 <_scanf_float+0x3ae>
 8008eac:	0035      	movs	r5, r6
 8008eae:	356f      	adds	r5, #111	; 0x6f
 8008eb0:	35ff      	adds	r5, #255	; 0xff
 8008eb2:	4912      	ldr	r1, [pc, #72]	; (8008efc <_scanf_float+0x3f8>)
 8008eb4:	0028      	movs	r0, r5
 8008eb6:	f000 f8cd 	bl	8009054 <siprintf>
 8008eba:	e7cf      	b.n	8008e5c <_scanf_float+0x358>
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	4008      	ands	r0, r1
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	9001      	str	r0, [sp, #4]
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d1d6      	bne.n	8008e76 <_scanf_float+0x372>
 8008ec8:	9905      	ldr	r1, [sp, #20]
 8008eca:	0020      	movs	r0, r4
 8008ecc:	600a      	str	r2, [r1, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	0022      	movs	r2, r4
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	0029      	movs	r1, r5
 8008ed6:	002b      	movs	r3, r5
 8008ed8:	f7f9 f81a 	bl	8001f10 <__aeabi_dcmpun>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d005      	beq.n	8008eec <_scanf_float+0x3e8>
 8008ee0:	9801      	ldr	r0, [sp, #4]
 8008ee2:	f000 f881 	bl	8008fe8 <nanf>
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	6018      	str	r0, [r3, #0]
 8008eea:	e7c9      	b.n	8008e80 <_scanf_float+0x37c>
 8008eec:	0020      	movs	r0, r4
 8008eee:	0029      	movs	r1, r5
 8008ef0:	f7f9 f91e 	bl	8002130 <__aeabi_d2f>
 8008ef4:	e7f7      	b.n	8008ee6 <_scanf_float+0x3e2>
 8008ef6:	2700      	movs	r7, #0
 8008ef8:	e650      	b.n	8008b9c <_scanf_float+0x98>
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	0800c1bc 	.word	0x0800c1bc

08008f00 <cleanup_glue>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	000d      	movs	r5, r1
 8008f04:	6809      	ldr	r1, [r1, #0]
 8008f06:	0004      	movs	r4, r0
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	d001      	beq.n	8008f10 <cleanup_glue+0x10>
 8008f0c:	f7ff fff8 	bl	8008f00 <cleanup_glue>
 8008f10:	0029      	movs	r1, r5
 8008f12:	0020      	movs	r0, r4
 8008f14:	f7ff f8f0 	bl	80080f8 <_free_r>
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f1c <_reclaim_reent>:
 8008f1c:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <_reclaim_reent+0xc8>)
 8008f1e:	b570      	push	{r4, r5, r6, lr}
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	0004      	movs	r4, r0
 8008f24:	4283      	cmp	r3, r0
 8008f26:	d049      	beq.n	8008fbc <_reclaim_reent+0xa0>
 8008f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <_reclaim_reent+0x28>
 8008f2e:	2500      	movs	r5, #0
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	d147      	bne.n	8008fc6 <_reclaim_reent+0xaa>
 8008f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f38:	6819      	ldr	r1, [r3, #0]
 8008f3a:	2900      	cmp	r1, #0
 8008f3c:	d002      	beq.n	8008f44 <_reclaim_reent+0x28>
 8008f3e:	0020      	movs	r0, r4
 8008f40:	f7ff f8da 	bl	80080f8 <_free_r>
 8008f44:	6961      	ldr	r1, [r4, #20]
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d002      	beq.n	8008f50 <_reclaim_reent+0x34>
 8008f4a:	0020      	movs	r0, r4
 8008f4c:	f7ff f8d4 	bl	80080f8 <_free_r>
 8008f50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d002      	beq.n	8008f5c <_reclaim_reent+0x40>
 8008f56:	0020      	movs	r0, r4
 8008f58:	f7ff f8ce 	bl	80080f8 <_free_r>
 8008f5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d002      	beq.n	8008f68 <_reclaim_reent+0x4c>
 8008f62:	0020      	movs	r0, r4
 8008f64:	f7ff f8c8 	bl	80080f8 <_free_r>
 8008f68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d002      	beq.n	8008f74 <_reclaim_reent+0x58>
 8008f6e:	0020      	movs	r0, r4
 8008f70:	f7ff f8c2 	bl	80080f8 <_free_r>
 8008f74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d002      	beq.n	8008f80 <_reclaim_reent+0x64>
 8008f7a:	0020      	movs	r0, r4
 8008f7c:	f7ff f8bc 	bl	80080f8 <_free_r>
 8008f80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f82:	2900      	cmp	r1, #0
 8008f84:	d002      	beq.n	8008f8c <_reclaim_reent+0x70>
 8008f86:	0020      	movs	r0, r4
 8008f88:	f7ff f8b6 	bl	80080f8 <_free_r>
 8008f8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	d002      	beq.n	8008f98 <_reclaim_reent+0x7c>
 8008f92:	0020      	movs	r0, r4
 8008f94:	f7ff f8b0 	bl	80080f8 <_free_r>
 8008f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	d002      	beq.n	8008fa4 <_reclaim_reent+0x88>
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	f7ff f8aa 	bl	80080f8 <_free_r>
 8008fa4:	69a3      	ldr	r3, [r4, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <_reclaim_reent+0xa0>
 8008faa:	0020      	movs	r0, r4
 8008fac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fae:	4798      	blx	r3
 8008fb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	d002      	beq.n	8008fbc <_reclaim_reent+0xa0>
 8008fb6:	0020      	movs	r0, r4
 8008fb8:	f7ff ffa2 	bl	8008f00 <cleanup_glue>
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	5949      	ldr	r1, [r1, r5]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d108      	bne.n	8008fd6 <_reclaim_reent+0xba>
 8008fc4:	3504      	adds	r5, #4
 8008fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc8:	68d9      	ldr	r1, [r3, #12]
 8008fca:	2d80      	cmp	r5, #128	; 0x80
 8008fcc:	d1f7      	bne.n	8008fbe <_reclaim_reent+0xa2>
 8008fce:	0020      	movs	r0, r4
 8008fd0:	f7ff f892 	bl	80080f8 <_free_r>
 8008fd4:	e7af      	b.n	8008f36 <_reclaim_reent+0x1a>
 8008fd6:	680e      	ldr	r6, [r1, #0]
 8008fd8:	0020      	movs	r0, r4
 8008fda:	f7ff f88d 	bl	80080f8 <_free_r>
 8008fde:	0031      	movs	r1, r6
 8008fe0:	e7ee      	b.n	8008fc0 <_reclaim_reent+0xa4>
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	2000001c 	.word	0x2000001c

08008fe8 <nanf>:
 8008fe8:	4800      	ldr	r0, [pc, #0]	; (8008fec <nanf+0x4>)
 8008fea:	4770      	bx	lr
 8008fec:	7fc00000 	.word	0x7fc00000

08008ff0 <sniprintf>:
 8008ff0:	b40c      	push	{r2, r3}
 8008ff2:	b530      	push	{r4, r5, lr}
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <sniprintf+0x60>)
 8008ff6:	b09d      	sub	sp, #116	; 0x74
 8008ff8:	1e0c      	subs	r4, r1, #0
 8008ffa:	681d      	ldr	r5, [r3, #0]
 8008ffc:	da08      	bge.n	8009010 <sniprintf+0x20>
 8008ffe:	238b      	movs	r3, #139	; 0x8b
 8009000:	2001      	movs	r0, #1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	4240      	negs	r0, r0
 8009006:	b01d      	add	sp, #116	; 0x74
 8009008:	bc30      	pop	{r4, r5}
 800900a:	bc08      	pop	{r3}
 800900c:	b002      	add	sp, #8
 800900e:	4718      	bx	r3
 8009010:	2382      	movs	r3, #130	; 0x82
 8009012:	a902      	add	r1, sp, #8
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	818b      	strh	r3, [r1, #12]
 8009018:	2300      	movs	r3, #0
 800901a:	9002      	str	r0, [sp, #8]
 800901c:	6108      	str	r0, [r1, #16]
 800901e:	429c      	cmp	r4, r3
 8009020:	d000      	beq.n	8009024 <sniprintf+0x34>
 8009022:	1e63      	subs	r3, r4, #1
 8009024:	608b      	str	r3, [r1, #8]
 8009026:	614b      	str	r3, [r1, #20]
 8009028:	2301      	movs	r3, #1
 800902a:	425b      	negs	r3, r3
 800902c:	81cb      	strh	r3, [r1, #14]
 800902e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009030:	ab21      	add	r3, sp, #132	; 0x84
 8009032:	0028      	movs	r0, r5
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	f002 fd39 	bl	800baac <_svfiprintf_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	da01      	bge.n	8009042 <sniprintf+0x52>
 800903e:	238b      	movs	r3, #139	; 0x8b
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	2c00      	cmp	r4, #0
 8009044:	d0df      	beq.n	8009006 <sniprintf+0x16>
 8009046:	2300      	movs	r3, #0
 8009048:	9a02      	ldr	r2, [sp, #8]
 800904a:	7013      	strb	r3, [r2, #0]
 800904c:	e7db      	b.n	8009006 <sniprintf+0x16>
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	2000001c 	.word	0x2000001c

08009054 <siprintf>:
 8009054:	b40e      	push	{r1, r2, r3}
 8009056:	b500      	push	{lr}
 8009058:	490b      	ldr	r1, [pc, #44]	; (8009088 <siprintf+0x34>)
 800905a:	b09c      	sub	sp, #112	; 0x70
 800905c:	ab1d      	add	r3, sp, #116	; 0x74
 800905e:	9002      	str	r0, [sp, #8]
 8009060:	9006      	str	r0, [sp, #24]
 8009062:	9107      	str	r1, [sp, #28]
 8009064:	9104      	str	r1, [sp, #16]
 8009066:	4809      	ldr	r0, [pc, #36]	; (800908c <siprintf+0x38>)
 8009068:	4909      	ldr	r1, [pc, #36]	; (8009090 <siprintf+0x3c>)
 800906a:	cb04      	ldmia	r3!, {r2}
 800906c:	9105      	str	r1, [sp, #20]
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	a902      	add	r1, sp, #8
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	f002 fd1a 	bl	800baac <_svfiprintf_r>
 8009078:	2300      	movs	r3, #0
 800907a:	9a02      	ldr	r2, [sp, #8]
 800907c:	7013      	strb	r3, [r2, #0]
 800907e:	b01c      	add	sp, #112	; 0x70
 8009080:	bc08      	pop	{r3}
 8009082:	b003      	add	sp, #12
 8009084:	4718      	bx	r3
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	7fffffff 	.word	0x7fffffff
 800908c:	2000001c 	.word	0x2000001c
 8009090:	ffff0208 	.word	0xffff0208

08009094 <sulp>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	0016      	movs	r6, r2
 8009098:	000d      	movs	r5, r1
 800909a:	f002 fb71 	bl	800b780 <__ulp>
 800909e:	2e00      	cmp	r6, #0
 80090a0:	d00d      	beq.n	80090be <sulp+0x2a>
 80090a2:	236b      	movs	r3, #107	; 0x6b
 80090a4:	006a      	lsls	r2, r5, #1
 80090a6:	0d52      	lsrs	r2, r2, #21
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd07      	ble.n	80090be <sulp+0x2a>
 80090ae:	2400      	movs	r4, #0
 80090b0:	4a03      	ldr	r2, [pc, #12]	; (80090c0 <sulp+0x2c>)
 80090b2:	051b      	lsls	r3, r3, #20
 80090b4:	189d      	adds	r5, r3, r2
 80090b6:	002b      	movs	r3, r5
 80090b8:	0022      	movs	r2, r4
 80090ba:	f7f8 f96f 	bl	800139c <__aeabi_dmul>
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	3ff00000 	.word	0x3ff00000

080090c4 <_strtod_l>:
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	b0a7      	sub	sp, #156	; 0x9c
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9004      	str	r0, [sp, #16]
 80090ce:	9807      	ldr	r0, [sp, #28]
 80090d0:	9322      	str	r3, [sp, #136]	; 0x88
 80090d2:	9106      	str	r1, [sp, #24]
 80090d4:	921d      	str	r2, [sp, #116]	; 0x74
 80090d6:	f002 f857 	bl	800b188 <__localeconv_l>
 80090da:	0005      	movs	r5, r0
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f7f7 f813 	bl	8000108 <strlen>
 80090e2:	2600      	movs	r6, #0
 80090e4:	2700      	movs	r7, #0
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	9005      	str	r0, [sp, #20]
 80090ea:	9321      	str	r3, [sp, #132]	; 0x84
 80090ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	2a0d      	cmp	r2, #13
 80090f2:	d839      	bhi.n	8009168 <_strtod_l+0xa4>
 80090f4:	2a09      	cmp	r2, #9
 80090f6:	d23d      	bcs.n	8009174 <_strtod_l+0xb0>
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	d044      	beq.n	8009186 <_strtod_l+0xc2>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8009100:	2200      	movs	r2, #0
 8009102:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8009104:	920c      	str	r2, [sp, #48]	; 0x30
 8009106:	7823      	ldrb	r3, [r4, #0]
 8009108:	2b30      	cmp	r3, #48	; 0x30
 800910a:	d000      	beq.n	800910e <_strtod_l+0x4a>
 800910c:	e07e      	b.n	800920c <_strtod_l+0x148>
 800910e:	7863      	ldrb	r3, [r4, #1]
 8009110:	2b58      	cmp	r3, #88	; 0x58
 8009112:	d002      	beq.n	800911a <_strtod_l+0x56>
 8009114:	2b78      	cmp	r3, #120	; 0x78
 8009116:	d000      	beq.n	800911a <_strtod_l+0x56>
 8009118:	e06e      	b.n	80091f8 <_strtod_l+0x134>
 800911a:	9b07      	ldr	r3, [sp, #28]
 800911c:	4a96      	ldr	r2, [pc, #600]	; (8009378 <_strtod_l+0x2b4>)
 800911e:	9302      	str	r3, [sp, #8]
 8009120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009122:	a921      	add	r1, sp, #132	; 0x84
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	ab22      	add	r3, sp, #136	; 0x88
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	9804      	ldr	r0, [sp, #16]
 800912c:	ab23      	add	r3, sp, #140	; 0x8c
 800912e:	f001 fd40 	bl	800abb2 <__gethex>
 8009132:	2507      	movs	r5, #7
 8009134:	9005      	str	r0, [sp, #20]
 8009136:	4005      	ands	r5, r0
 8009138:	d005      	beq.n	8009146 <_strtod_l+0x82>
 800913a:	2d06      	cmp	r5, #6
 800913c:	d12f      	bne.n	800919e <_strtod_l+0xda>
 800913e:	2300      	movs	r3, #0
 8009140:	3401      	adds	r4, #1
 8009142:	9421      	str	r4, [sp, #132]	; 0x84
 8009144:	9313      	str	r3, [sp, #76]	; 0x4c
 8009146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <_strtod_l+0x8e>
 800914c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800914e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01d      	beq.n	8009194 <_strtod_l+0xd0>
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	0032      	movs	r2, r6
 800915c:	061b      	lsls	r3, r3, #24
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	0010      	movs	r0, r2
 8009162:	0019      	movs	r1, r3
 8009164:	b027      	add	sp, #156	; 0x9c
 8009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009168:	2a2b      	cmp	r2, #43	; 0x2b
 800916a:	d016      	beq.n	800919a <_strtod_l+0xd6>
 800916c:	2a2d      	cmp	r2, #45	; 0x2d
 800916e:	d003      	beq.n	8009178 <_strtod_l+0xb4>
 8009170:	2a20      	cmp	r2, #32
 8009172:	d1c3      	bne.n	80090fc <_strtod_l+0x38>
 8009174:	3301      	adds	r3, #1
 8009176:	e7b8      	b.n	80090ea <_strtod_l+0x26>
 8009178:	2201      	movs	r2, #1
 800917a:	9213      	str	r2, [sp, #76]	; 0x4c
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	9221      	str	r2, [sp, #132]	; 0x84
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1bc      	bne.n	8009100 <_strtod_l+0x3c>
 8009186:	9b06      	ldr	r3, [sp, #24]
 8009188:	9321      	str	r3, [sp, #132]	; 0x84
 800918a:	2300      	movs	r3, #0
 800918c:	9313      	str	r3, [sp, #76]	; 0x4c
 800918e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1db      	bne.n	800914c <_strtod_l+0x88>
 8009194:	0032      	movs	r2, r6
 8009196:	003b      	movs	r3, r7
 8009198:	e7e2      	b.n	8009160 <_strtod_l+0x9c>
 800919a:	2200      	movs	r2, #0
 800919c:	e7ed      	b.n	800917a <_strtod_l+0xb6>
 800919e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d007      	beq.n	80091b4 <_strtod_l+0xf0>
 80091a4:	2135      	movs	r1, #53	; 0x35
 80091a6:	a824      	add	r0, sp, #144	; 0x90
 80091a8:	f002 fbd7 	bl	800b95a <__copybits>
 80091ac:	9922      	ldr	r1, [sp, #136]	; 0x88
 80091ae:	9804      	ldr	r0, [sp, #16]
 80091b0:	f002 f84d 	bl	800b24e <_Bfree>
 80091b4:	1e68      	subs	r0, r5, #1
 80091b6:	2804      	cmp	r0, #4
 80091b8:	d806      	bhi.n	80091c8 <_strtod_l+0x104>
 80091ba:	f7f6 ffad 	bl	8000118 <__gnu_thumb1_case_uqi>
 80091be:	030c      	.short	0x030c
 80091c0:	1917      	.short	0x1917
 80091c2:	0c          	.byte	0x0c
 80091c3:	00          	.byte	0x00
 80091c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80091c6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	071b      	lsls	r3, r3, #28
 80091cc:	d5bb      	bpl.n	8009146 <_strtod_l+0x82>
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	061b      	lsls	r3, r3, #24
 80091d2:	431f      	orrs	r7, r3
 80091d4:	e7b7      	b.n	8009146 <_strtod_l+0x82>
 80091d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80091d8:	4a68      	ldr	r2, [pc, #416]	; (800937c <_strtod_l+0x2b8>)
 80091da:	4969      	ldr	r1, [pc, #420]	; (8009380 <_strtod_l+0x2bc>)
 80091dc:	401a      	ands	r2, r3
 80091de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091e0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80091e2:	185b      	adds	r3, r3, r1
 80091e4:	051b      	lsls	r3, r3, #20
 80091e6:	431a      	orrs	r2, r3
 80091e8:	0017      	movs	r7, r2
 80091ea:	e7ed      	b.n	80091c8 <_strtod_l+0x104>
 80091ec:	4f65      	ldr	r7, [pc, #404]	; (8009384 <_strtod_l+0x2c0>)
 80091ee:	e7eb      	b.n	80091c8 <_strtod_l+0x104>
 80091f0:	2601      	movs	r6, #1
 80091f2:	4f65      	ldr	r7, [pc, #404]	; (8009388 <_strtod_l+0x2c4>)
 80091f4:	4276      	negs	r6, r6
 80091f6:	e7e7      	b.n	80091c8 <_strtod_l+0x104>
 80091f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	9221      	str	r2, [sp, #132]	; 0x84
 80091fe:	785b      	ldrb	r3, [r3, #1]
 8009200:	2b30      	cmp	r3, #48	; 0x30
 8009202:	d0f9      	beq.n	80091f8 <_strtod_l+0x134>
 8009204:	2b00      	cmp	r3, #0
 8009206:	d09e      	beq.n	8009146 <_strtod_l+0x82>
 8009208:	2301      	movs	r3, #1
 800920a:	930c      	str	r3, [sp, #48]	; 0x30
 800920c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800920e:	220a      	movs	r2, #10
 8009210:	9312      	str	r3, [sp, #72]	; 0x48
 8009212:	2300      	movs	r3, #0
 8009214:	930b      	str	r3, [sp, #44]	; 0x2c
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	930a      	str	r3, [sp, #40]	; 0x28
 800921a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800921c:	7804      	ldrb	r4, [r0, #0]
 800921e:	0023      	movs	r3, r4
 8009220:	3b30      	subs	r3, #48	; 0x30
 8009222:	b2d9      	uxtb	r1, r3
 8009224:	2909      	cmp	r1, #9
 8009226:	d934      	bls.n	8009292 <_strtod_l+0x1ce>
 8009228:	9a05      	ldr	r2, [sp, #20]
 800922a:	6829      	ldr	r1, [r5, #0]
 800922c:	f002 fd3c 	bl	800bca8 <strncmp>
 8009230:	2800      	cmp	r0, #0
 8009232:	d040      	beq.n	80092b6 <_strtod_l+0x1f2>
 8009234:	2000      	movs	r0, #0
 8009236:	0023      	movs	r3, r4
 8009238:	4684      	mov	ip, r0
 800923a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800923c:	9007      	str	r0, [sp, #28]
 800923e:	9205      	str	r2, [sp, #20]
 8009240:	2220      	movs	r2, #32
 8009242:	0019      	movs	r1, r3
 8009244:	4391      	bics	r1, r2
 8009246:	000a      	movs	r2, r1
 8009248:	2100      	movs	r1, #0
 800924a:	2a45      	cmp	r2, #69	; 0x45
 800924c:	d000      	beq.n	8009250 <_strtod_l+0x18c>
 800924e:	e0bf      	b.n	80093d0 <_strtod_l+0x30c>
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009254:	4303      	orrs	r3, r0
 8009256:	4313      	orrs	r3, r2
 8009258:	428b      	cmp	r3, r1
 800925a:	d094      	beq.n	8009186 <_strtod_l+0xc2>
 800925c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800925e:	9306      	str	r3, [sp, #24]
 8009260:	3301      	adds	r3, #1
 8009262:	9321      	str	r3, [sp, #132]	; 0x84
 8009264:	9b06      	ldr	r3, [sp, #24]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b2b      	cmp	r3, #43	; 0x2b
 800926a:	d100      	bne.n	800926e <_strtod_l+0x1aa>
 800926c:	e082      	b.n	8009374 <_strtod_l+0x2b0>
 800926e:	000c      	movs	r4, r1
 8009270:	2b2d      	cmp	r3, #45	; 0x2d
 8009272:	d105      	bne.n	8009280 <_strtod_l+0x1bc>
 8009274:	2401      	movs	r4, #1
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	3302      	adds	r3, #2
 800927a:	9321      	str	r3, [sp, #132]	; 0x84
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	789b      	ldrb	r3, [r3, #2]
 8009280:	001a      	movs	r2, r3
 8009282:	3a30      	subs	r2, #48	; 0x30
 8009284:	2a09      	cmp	r2, #9
 8009286:	d800      	bhi.n	800928a <_strtod_l+0x1c6>
 8009288:	e084      	b.n	8009394 <_strtod_l+0x2d0>
 800928a:	9a06      	ldr	r2, [sp, #24]
 800928c:	2100      	movs	r1, #0
 800928e:	9221      	str	r2, [sp, #132]	; 0x84
 8009290:	e09e      	b.n	80093d0 <_strtod_l+0x30c>
 8009292:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009294:	2908      	cmp	r1, #8
 8009296:	dc09      	bgt.n	80092ac <_strtod_l+0x1e8>
 8009298:	9908      	ldr	r1, [sp, #32]
 800929a:	4351      	muls	r1, r2
 800929c:	18cb      	adds	r3, r1, r3
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a2:	3001      	adds	r0, #1
 80092a4:	3301      	adds	r3, #1
 80092a6:	930a      	str	r3, [sp, #40]	; 0x28
 80092a8:	9021      	str	r0, [sp, #132]	; 0x84
 80092aa:	e7b6      	b.n	800921a <_strtod_l+0x156>
 80092ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ae:	4351      	muls	r1, r2
 80092b0:	18cb      	adds	r3, r1, r3
 80092b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b4:	e7f4      	b.n	80092a0 <_strtod_l+0x1dc>
 80092b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	4694      	mov	ip, r2
 80092bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092be:	4463      	add	r3, ip
 80092c0:	9321      	str	r3, [sp, #132]	; 0x84
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	d036      	beq.n	8009336 <_strtod_l+0x272>
 80092c8:	4684      	mov	ip, r0
 80092ca:	9205      	str	r2, [sp, #20]
 80092cc:	001a      	movs	r2, r3
 80092ce:	3a30      	subs	r2, #48	; 0x30
 80092d0:	2a09      	cmp	r2, #9
 80092d2:	d912      	bls.n	80092fa <_strtod_l+0x236>
 80092d4:	2201      	movs	r2, #1
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	e7b2      	b.n	8009240 <_strtod_l+0x17c>
 80092da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092dc:	3001      	adds	r0, #1
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	9221      	str	r2, [sp, #132]	; 0x84
 80092e2:	785b      	ldrb	r3, [r3, #1]
 80092e4:	2b30      	cmp	r3, #48	; 0x30
 80092e6:	d0f8      	beq.n	80092da <_strtod_l+0x216>
 80092e8:	001a      	movs	r2, r3
 80092ea:	3a31      	subs	r2, #49	; 0x31
 80092ec:	2a08      	cmp	r2, #8
 80092ee:	d83c      	bhi.n	800936a <_strtod_l+0x2a6>
 80092f0:	4684      	mov	ip, r0
 80092f2:	2000      	movs	r0, #0
 80092f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092f6:	9005      	str	r0, [sp, #20]
 80092f8:	9212      	str	r2, [sp, #72]	; 0x48
 80092fa:	3b30      	subs	r3, #48	; 0x30
 80092fc:	1c42      	adds	r2, r0, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d013      	beq.n	800932a <_strtod_l+0x266>
 8009302:	210a      	movs	r1, #10
 8009304:	4494      	add	ip, r2
 8009306:	9a05      	ldr	r2, [sp, #20]
 8009308:	1885      	adds	r5, r0, r2
 800930a:	42aa      	cmp	r2, r5
 800930c:	d115      	bne.n	800933a <_strtod_l+0x276>
 800930e:	9905      	ldr	r1, [sp, #20]
 8009310:	9a05      	ldr	r2, [sp, #20]
 8009312:	3101      	adds	r1, #1
 8009314:	1809      	adds	r1, r1, r0
 8009316:	1812      	adds	r2, r2, r0
 8009318:	9105      	str	r1, [sp, #20]
 800931a:	2a08      	cmp	r2, #8
 800931c:	dc1b      	bgt.n	8009356 <_strtod_l+0x292>
 800931e:	220a      	movs	r2, #10
 8009320:	9908      	ldr	r1, [sp, #32]
 8009322:	434a      	muls	r2, r1
 8009324:	189b      	adds	r3, r3, r2
 8009326:	2200      	movs	r2, #0
 8009328:	9308      	str	r3, [sp, #32]
 800932a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932c:	0010      	movs	r0, r2
 800932e:	1c59      	adds	r1, r3, #1
 8009330:	9121      	str	r1, [sp, #132]	; 0x84
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	e7ca      	b.n	80092cc <_strtod_l+0x208>
 8009336:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009338:	e7d4      	b.n	80092e4 <_strtod_l+0x220>
 800933a:	1c54      	adds	r4, r2, #1
 800933c:	2a08      	cmp	r2, #8
 800933e:	dc04      	bgt.n	800934a <_strtod_l+0x286>
 8009340:	9a08      	ldr	r2, [sp, #32]
 8009342:	434a      	muls	r2, r1
 8009344:	9208      	str	r2, [sp, #32]
 8009346:	0022      	movs	r2, r4
 8009348:	e7df      	b.n	800930a <_strtod_l+0x246>
 800934a:	2c10      	cmp	r4, #16
 800934c:	dcfb      	bgt.n	8009346 <_strtod_l+0x282>
 800934e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009350:	434a      	muls	r2, r1
 8009352:	920b      	str	r2, [sp, #44]	; 0x2c
 8009354:	e7f7      	b.n	8009346 <_strtod_l+0x282>
 8009356:	9905      	ldr	r1, [sp, #20]
 8009358:	2200      	movs	r2, #0
 800935a:	2910      	cmp	r1, #16
 800935c:	dce5      	bgt.n	800932a <_strtod_l+0x266>
 800935e:	210a      	movs	r1, #10
 8009360:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009362:	4341      	muls	r1, r0
 8009364:	185b      	adds	r3, r3, r1
 8009366:	930b      	str	r3, [sp, #44]	; 0x2c
 8009368:	e7df      	b.n	800932a <_strtod_l+0x266>
 800936a:	2200      	movs	r2, #0
 800936c:	4694      	mov	ip, r2
 800936e:	9205      	str	r2, [sp, #20]
 8009370:	3201      	adds	r2, #1
 8009372:	e7b0      	b.n	80092d6 <_strtod_l+0x212>
 8009374:	000c      	movs	r4, r1
 8009376:	e77e      	b.n	8009276 <_strtod_l+0x1b2>
 8009378:	0800c1c4 	.word	0x0800c1c4
 800937c:	ffefffff 	.word	0xffefffff
 8009380:	00000433 	.word	0x00000433
 8009384:	7ff00000 	.word	0x7ff00000
 8009388:	7fffffff 	.word	0x7fffffff
 800938c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	9221      	str	r2, [sp, #132]	; 0x84
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	2b30      	cmp	r3, #48	; 0x30
 8009396:	d0f9      	beq.n	800938c <_strtod_l+0x2c8>
 8009398:	001a      	movs	r2, r3
 800939a:	3a31      	subs	r2, #49	; 0x31
 800939c:	2100      	movs	r1, #0
 800939e:	2a08      	cmp	r2, #8
 80093a0:	d816      	bhi.n	80093d0 <_strtod_l+0x30c>
 80093a2:	3b30      	subs	r3, #48	; 0x30
 80093a4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80093a6:	930e      	str	r3, [sp, #56]	; 0x38
 80093a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093aa:	1c59      	adds	r1, r3, #1
 80093ac:	9121      	str	r1, [sp, #132]	; 0x84
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	001a      	movs	r2, r3
 80093b2:	3a30      	subs	r2, #48	; 0x30
 80093b4:	2a09      	cmp	r2, #9
 80093b6:	d932      	bls.n	800941e <_strtod_l+0x35a>
 80093b8:	1b4a      	subs	r2, r1, r5
 80093ba:	4dad      	ldr	r5, [pc, #692]	; (8009670 <_strtod_l+0x5ac>)
 80093bc:	0029      	movs	r1, r5
 80093be:	2a08      	cmp	r2, #8
 80093c0:	dc03      	bgt.n	80093ca <_strtod_l+0x306>
 80093c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093c4:	42a9      	cmp	r1, r5
 80093c6:	dd00      	ble.n	80093ca <_strtod_l+0x306>
 80093c8:	0029      	movs	r1, r5
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	d000      	beq.n	80093d0 <_strtod_l+0x30c>
 80093ce:	4249      	negs	r1, r1
 80093d0:	9a05      	ldr	r2, [sp, #20]
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d149      	bne.n	800946a <_strtod_l+0x3a6>
 80093d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093d8:	4310      	orrs	r0, r2
 80093da:	d000      	beq.n	80093de <_strtod_l+0x31a>
 80093dc:	e6b3      	b.n	8009146 <_strtod_l+0x82>
 80093de:	9a07      	ldr	r2, [sp, #28]
 80093e0:	2a00      	cmp	r2, #0
 80093e2:	d000      	beq.n	80093e6 <_strtod_l+0x322>
 80093e4:	e6cf      	b.n	8009186 <_strtod_l+0xc2>
 80093e6:	2b4e      	cmp	r3, #78	; 0x4e
 80093e8:	d025      	beq.n	8009436 <_strtod_l+0x372>
 80093ea:	dc1f      	bgt.n	800942c <_strtod_l+0x368>
 80093ec:	2b49      	cmp	r3, #73	; 0x49
 80093ee:	d000      	beq.n	80093f2 <_strtod_l+0x32e>
 80093f0:	e6c9      	b.n	8009186 <_strtod_l+0xc2>
 80093f2:	49a0      	ldr	r1, [pc, #640]	; (8009674 <_strtod_l+0x5b0>)
 80093f4:	a821      	add	r0, sp, #132	; 0x84
 80093f6:	f001 fe19 	bl	800b02c <__match>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d100      	bne.n	8009400 <_strtod_l+0x33c>
 80093fe:	e6c2      	b.n	8009186 <_strtod_l+0xc2>
 8009400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009402:	499d      	ldr	r1, [pc, #628]	; (8009678 <_strtod_l+0x5b4>)
 8009404:	3b01      	subs	r3, #1
 8009406:	a821      	add	r0, sp, #132	; 0x84
 8009408:	9321      	str	r3, [sp, #132]	; 0x84
 800940a:	f001 fe0f 	bl	800b02c <__match>
 800940e:	2800      	cmp	r0, #0
 8009410:	d102      	bne.n	8009418 <_strtod_l+0x354>
 8009412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009414:	3301      	adds	r3, #1
 8009416:	9321      	str	r3, [sp, #132]	; 0x84
 8009418:	4f98      	ldr	r7, [pc, #608]	; (800967c <_strtod_l+0x5b8>)
 800941a:	2600      	movs	r6, #0
 800941c:	e693      	b.n	8009146 <_strtod_l+0x82>
 800941e:	220a      	movs	r2, #10
 8009420:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009422:	434a      	muls	r2, r1
 8009424:	18d2      	adds	r2, r2, r3
 8009426:	3a30      	subs	r2, #48	; 0x30
 8009428:	920e      	str	r2, [sp, #56]	; 0x38
 800942a:	e7bd      	b.n	80093a8 <_strtod_l+0x2e4>
 800942c:	2b69      	cmp	r3, #105	; 0x69
 800942e:	d0e0      	beq.n	80093f2 <_strtod_l+0x32e>
 8009430:	2b6e      	cmp	r3, #110	; 0x6e
 8009432:	d000      	beq.n	8009436 <_strtod_l+0x372>
 8009434:	e6a7      	b.n	8009186 <_strtod_l+0xc2>
 8009436:	4992      	ldr	r1, [pc, #584]	; (8009680 <_strtod_l+0x5bc>)
 8009438:	a821      	add	r0, sp, #132	; 0x84
 800943a:	f001 fdf7 	bl	800b02c <__match>
 800943e:	2800      	cmp	r0, #0
 8009440:	d100      	bne.n	8009444 <_strtod_l+0x380>
 8009442:	e6a0      	b.n	8009186 <_strtod_l+0xc2>
 8009444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b28      	cmp	r3, #40	; 0x28
 800944a:	d10c      	bne.n	8009466 <_strtod_l+0x3a2>
 800944c:	aa24      	add	r2, sp, #144	; 0x90
 800944e:	498d      	ldr	r1, [pc, #564]	; (8009684 <_strtod_l+0x5c0>)
 8009450:	a821      	add	r0, sp, #132	; 0x84
 8009452:	f001 fdff 	bl	800b054 <__hexnan>
 8009456:	2805      	cmp	r0, #5
 8009458:	d105      	bne.n	8009466 <_strtod_l+0x3a2>
 800945a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800945c:	4a87      	ldr	r2, [pc, #540]	; (800967c <_strtod_l+0x5b8>)
 800945e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009460:	431a      	orrs	r2, r3
 8009462:	0017      	movs	r7, r2
 8009464:	e66f      	b.n	8009146 <_strtod_l+0x82>
 8009466:	4f88      	ldr	r7, [pc, #544]	; (8009688 <_strtod_l+0x5c4>)
 8009468:	e7d7      	b.n	800941a <_strtod_l+0x356>
 800946a:	4663      	mov	r3, ip
 800946c:	1acb      	subs	r3, r1, r3
 800946e:	9307      	str	r3, [sp, #28]
 8009470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <_strtod_l+0x3b6>
 8009476:	9b05      	ldr	r3, [sp, #20]
 8009478:	930a      	str	r3, [sp, #40]	; 0x28
 800947a:	9c05      	ldr	r4, [sp, #20]
 800947c:	2c10      	cmp	r4, #16
 800947e:	dd00      	ble.n	8009482 <_strtod_l+0x3be>
 8009480:	2410      	movs	r4, #16
 8009482:	9808      	ldr	r0, [sp, #32]
 8009484:	f7f8 fdd0 	bl	8002028 <__aeabi_ui2d>
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	0006      	movs	r6, r0
 800948c:	000f      	movs	r7, r1
 800948e:	2b09      	cmp	r3, #9
 8009490:	dc15      	bgt.n	80094be <_strtod_l+0x3fa>
 8009492:	9b07      	ldr	r3, [sp, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d100      	bne.n	800949a <_strtod_l+0x3d6>
 8009498:	e655      	b.n	8009146 <_strtod_l+0x82>
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dc00      	bgt.n	80094a2 <_strtod_l+0x3de>
 80094a0:	e07d      	b.n	800959e <_strtod_l+0x4da>
 80094a2:	2b16      	cmp	r3, #22
 80094a4:	dc62      	bgt.n	800956c <_strtod_l+0x4a8>
 80094a6:	00dc      	lsls	r4, r3, #3
 80094a8:	4b78      	ldr	r3, [pc, #480]	; (800968c <_strtod_l+0x5c8>)
 80094aa:	0032      	movs	r2, r6
 80094ac:	1919      	adds	r1, r3, r4
 80094ae:	003b      	movs	r3, r7
 80094b0:	6808      	ldr	r0, [r1, #0]
 80094b2:	6849      	ldr	r1, [r1, #4]
 80094b4:	f7f7 ff72 	bl	800139c <__aeabi_dmul>
 80094b8:	0006      	movs	r6, r0
 80094ba:	000f      	movs	r7, r1
 80094bc:	e643      	b.n	8009146 <_strtod_l+0x82>
 80094be:	0022      	movs	r2, r4
 80094c0:	4b72      	ldr	r3, [pc, #456]	; (800968c <_strtod_l+0x5c8>)
 80094c2:	3a09      	subs	r2, #9
 80094c4:	00d2      	lsls	r2, r2, #3
 80094c6:	189b      	adds	r3, r3, r2
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f7f7 ff66 	bl	800139c <__aeabi_dmul>
 80094d0:	0006      	movs	r6, r0
 80094d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80094d4:	000f      	movs	r7, r1
 80094d6:	f7f8 fda7 	bl	8002028 <__aeabi_ui2d>
 80094da:	000b      	movs	r3, r1
 80094dc:	0002      	movs	r2, r0
 80094de:	0039      	movs	r1, r7
 80094e0:	0030      	movs	r0, r6
 80094e2:	f7f7 f835 	bl	8000550 <__aeabi_dadd>
 80094e6:	9b05      	ldr	r3, [sp, #20]
 80094e8:	0006      	movs	r6, r0
 80094ea:	000f      	movs	r7, r1
 80094ec:	2b0f      	cmp	r3, #15
 80094ee:	ddd0      	ble.n	8009492 <_strtod_l+0x3ce>
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	1b1c      	subs	r4, r3, r4
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	18e4      	adds	r4, r4, r3
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	dc00      	bgt.n	80094fe <_strtod_l+0x43a>
 80094fc:	e094      	b.n	8009628 <_strtod_l+0x564>
 80094fe:	230f      	movs	r3, #15
 8009500:	4023      	ands	r3, r4
 8009502:	d00a      	beq.n	800951a <_strtod_l+0x456>
 8009504:	4961      	ldr	r1, [pc, #388]	; (800968c <_strtod_l+0x5c8>)
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	18c9      	adds	r1, r1, r3
 800950a:	0032      	movs	r2, r6
 800950c:	6808      	ldr	r0, [r1, #0]
 800950e:	6849      	ldr	r1, [r1, #4]
 8009510:	003b      	movs	r3, r7
 8009512:	f7f7 ff43 	bl	800139c <__aeabi_dmul>
 8009516:	0006      	movs	r6, r0
 8009518:	000f      	movs	r7, r1
 800951a:	230f      	movs	r3, #15
 800951c:	439c      	bics	r4, r3
 800951e:	d06e      	beq.n	80095fe <_strtod_l+0x53a>
 8009520:	3326      	adds	r3, #38	; 0x26
 8009522:	33ff      	adds	r3, #255	; 0xff
 8009524:	429c      	cmp	r4, r3
 8009526:	dd48      	ble.n	80095ba <_strtod_l+0x4f6>
 8009528:	2400      	movs	r4, #0
 800952a:	9405      	str	r4, [sp, #20]
 800952c:	940b      	str	r4, [sp, #44]	; 0x2c
 800952e:	940a      	str	r4, [sp, #40]	; 0x28
 8009530:	2322      	movs	r3, #34	; 0x22
 8009532:	2600      	movs	r6, #0
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	4f51      	ldr	r7, [pc, #324]	; (800967c <_strtod_l+0x5b8>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800953c:	42b3      	cmp	r3, r6
 800953e:	d100      	bne.n	8009542 <_strtod_l+0x47e>
 8009540:	e601      	b.n	8009146 <_strtod_l+0x82>
 8009542:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009544:	9804      	ldr	r0, [sp, #16]
 8009546:	f001 fe82 	bl	800b24e <_Bfree>
 800954a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800954c:	9804      	ldr	r0, [sp, #16]
 800954e:	f001 fe7e 	bl	800b24e <_Bfree>
 8009552:	9905      	ldr	r1, [sp, #20]
 8009554:	9804      	ldr	r0, [sp, #16]
 8009556:	f001 fe7a 	bl	800b24e <_Bfree>
 800955a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800955c:	9804      	ldr	r0, [sp, #16]
 800955e:	f001 fe76 	bl	800b24e <_Bfree>
 8009562:	0021      	movs	r1, r4
 8009564:	9804      	ldr	r0, [sp, #16]
 8009566:	f001 fe72 	bl	800b24e <_Bfree>
 800956a:	e5ec      	b.n	8009146 <_strtod_l+0x82>
 800956c:	2325      	movs	r3, #37	; 0x25
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	9a07      	ldr	r2, [sp, #28]
 8009574:	4293      	cmp	r3, r2
 8009576:	dbbb      	blt.n	80094f0 <_strtod_l+0x42c>
 8009578:	230f      	movs	r3, #15
 800957a:	9a05      	ldr	r2, [sp, #20]
 800957c:	4c43      	ldr	r4, [pc, #268]	; (800968c <_strtod_l+0x5c8>)
 800957e:	1a9d      	subs	r5, r3, r2
 8009580:	00e9      	lsls	r1, r5, #3
 8009582:	1861      	adds	r1, r4, r1
 8009584:	0032      	movs	r2, r6
 8009586:	6808      	ldr	r0, [r1, #0]
 8009588:	6849      	ldr	r1, [r1, #4]
 800958a:	003b      	movs	r3, r7
 800958c:	f7f7 ff06 	bl	800139c <__aeabi_dmul>
 8009590:	9b07      	ldr	r3, [sp, #28]
 8009592:	1b5e      	subs	r6, r3, r5
 8009594:	00f6      	lsls	r6, r6, #3
 8009596:	19a6      	adds	r6, r4, r6
 8009598:	6832      	ldr	r2, [r6, #0]
 800959a:	6873      	ldr	r3, [r6, #4]
 800959c:	e78a      	b.n	80094b4 <_strtod_l+0x3f0>
 800959e:	9b07      	ldr	r3, [sp, #28]
 80095a0:	3316      	adds	r3, #22
 80095a2:	dba5      	blt.n	80094f0 <_strtod_l+0x42c>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	0030      	movs	r0, r6
 80095a8:	00da      	lsls	r2, r3, #3
 80095aa:	4b38      	ldr	r3, [pc, #224]	; (800968c <_strtod_l+0x5c8>)
 80095ac:	0039      	movs	r1, r7
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f7f7 fae8 	bl	8000b88 <__aeabi_ddiv>
 80095b8:	e77e      	b.n	80094b8 <_strtod_l+0x3f4>
 80095ba:	2300      	movs	r3, #0
 80095bc:	0030      	movs	r0, r6
 80095be:	0039      	movs	r1, r7
 80095c0:	001d      	movs	r5, r3
 80095c2:	1124      	asrs	r4, r4, #4
 80095c4:	2c01      	cmp	r4, #1
 80095c6:	dc1d      	bgt.n	8009604 <_strtod_l+0x540>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <_strtod_l+0x50c>
 80095cc:	0006      	movs	r6, r0
 80095ce:	000f      	movs	r7, r1
 80095d0:	4b2f      	ldr	r3, [pc, #188]	; (8009690 <_strtod_l+0x5cc>)
 80095d2:	00ed      	lsls	r5, r5, #3
 80095d4:	18ff      	adds	r7, r7, r3
 80095d6:	4b2f      	ldr	r3, [pc, #188]	; (8009694 <_strtod_l+0x5d0>)
 80095d8:	0032      	movs	r2, r6
 80095da:	195d      	adds	r5, r3, r5
 80095dc:	6828      	ldr	r0, [r5, #0]
 80095de:	6869      	ldr	r1, [r5, #4]
 80095e0:	003b      	movs	r3, r7
 80095e2:	f7f7 fedb 	bl	800139c <__aeabi_dmul>
 80095e6:	4b25      	ldr	r3, [pc, #148]	; (800967c <_strtod_l+0x5b8>)
 80095e8:	4a2b      	ldr	r2, [pc, #172]	; (8009698 <_strtod_l+0x5d4>)
 80095ea:	0006      	movs	r6, r0
 80095ec:	400b      	ands	r3, r1
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d89a      	bhi.n	8009528 <_strtod_l+0x464>
 80095f2:	4a2a      	ldr	r2, [pc, #168]	; (800969c <_strtod_l+0x5d8>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d913      	bls.n	8009620 <_strtod_l+0x55c>
 80095f8:	2601      	movs	r6, #1
 80095fa:	4f29      	ldr	r7, [pc, #164]	; (80096a0 <_strtod_l+0x5dc>)
 80095fc:	4276      	negs	r6, r6
 80095fe:	2300      	movs	r3, #0
 8009600:	9306      	str	r3, [sp, #24]
 8009602:	e07b      	b.n	80096fc <_strtod_l+0x638>
 8009604:	2201      	movs	r2, #1
 8009606:	4214      	tst	r4, r2
 8009608:	d007      	beq.n	800961a <_strtod_l+0x556>
 800960a:	4a22      	ldr	r2, [pc, #136]	; (8009694 <_strtod_l+0x5d0>)
 800960c:	00eb      	lsls	r3, r5, #3
 800960e:	189b      	adds	r3, r3, r2
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f7f7 fec2 	bl	800139c <__aeabi_dmul>
 8009618:	2301      	movs	r3, #1
 800961a:	3501      	adds	r5, #1
 800961c:	1064      	asrs	r4, r4, #1
 800961e:	e7d1      	b.n	80095c4 <_strtod_l+0x500>
 8009620:	23d4      	movs	r3, #212	; 0xd4
 8009622:	049b      	lsls	r3, r3, #18
 8009624:	18cf      	adds	r7, r1, r3
 8009626:	e7ea      	b.n	80095fe <_strtod_l+0x53a>
 8009628:	2c00      	cmp	r4, #0
 800962a:	d0e8      	beq.n	80095fe <_strtod_l+0x53a>
 800962c:	230f      	movs	r3, #15
 800962e:	4264      	negs	r4, r4
 8009630:	4023      	ands	r3, r4
 8009632:	d00a      	beq.n	800964a <_strtod_l+0x586>
 8009634:	4a15      	ldr	r2, [pc, #84]	; (800968c <_strtod_l+0x5c8>)
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	18d3      	adds	r3, r2, r3
 800963a:	0030      	movs	r0, r6
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	0039      	movs	r1, r7
 8009642:	f7f7 faa1 	bl	8000b88 <__aeabi_ddiv>
 8009646:	0006      	movs	r6, r0
 8009648:	000f      	movs	r7, r1
 800964a:	1124      	asrs	r4, r4, #4
 800964c:	d0d7      	beq.n	80095fe <_strtod_l+0x53a>
 800964e:	2c1f      	cmp	r4, #31
 8009650:	dd28      	ble.n	80096a4 <_strtod_l+0x5e0>
 8009652:	2400      	movs	r4, #0
 8009654:	9405      	str	r4, [sp, #20]
 8009656:	940b      	str	r4, [sp, #44]	; 0x2c
 8009658:	940a      	str	r4, [sp, #40]	; 0x28
 800965a:	2322      	movs	r3, #34	; 0x22
 800965c:	9a04      	ldr	r2, [sp, #16]
 800965e:	2600      	movs	r6, #0
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009664:	2700      	movs	r7, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d000      	beq.n	800966c <_strtod_l+0x5a8>
 800966a:	e76a      	b.n	8009542 <_strtod_l+0x47e>
 800966c:	e56b      	b.n	8009146 <_strtod_l+0x82>
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	00004e1f 	.word	0x00004e1f
 8009674:	0800c18d 	.word	0x0800c18d
 8009678:	0800c21b 	.word	0x0800c21b
 800967c:	7ff00000 	.word	0x7ff00000
 8009680:	0800c195 	.word	0x0800c195
 8009684:	0800c1d8 	.word	0x0800c1d8
 8009688:	fff80000 	.word	0xfff80000
 800968c:	0800c258 	.word	0x0800c258
 8009690:	fcb00000 	.word	0xfcb00000
 8009694:	0800c230 	.word	0x0800c230
 8009698:	7ca00000 	.word	0x7ca00000
 800969c:	7c900000 	.word	0x7c900000
 80096a0:	7fefffff 	.word	0x7fefffff
 80096a4:	2310      	movs	r3, #16
 80096a6:	4023      	ands	r3, r4
 80096a8:	9306      	str	r3, [sp, #24]
 80096aa:	d001      	beq.n	80096b0 <_strtod_l+0x5ec>
 80096ac:	236a      	movs	r3, #106	; 0x6a
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	2300      	movs	r3, #0
 80096b2:	0030      	movs	r0, r6
 80096b4:	0039      	movs	r1, r7
 80096b6:	001d      	movs	r5, r3
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	dd00      	ble.n	80096be <_strtod_l+0x5fa>
 80096bc:	e10e      	b.n	80098dc <_strtod_l+0x818>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <_strtod_l+0x602>
 80096c2:	0006      	movs	r6, r0
 80096c4:	000f      	movs	r7, r1
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00f      	beq.n	80096ec <_strtod_l+0x628>
 80096cc:	236b      	movs	r3, #107	; 0x6b
 80096ce:	0079      	lsls	r1, r7, #1
 80096d0:	0d49      	lsrs	r1, r1, #21
 80096d2:	003a      	movs	r2, r7
 80096d4:	1a5b      	subs	r3, r3, r1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd08      	ble.n	80096ec <_strtod_l+0x628>
 80096da:	2b1f      	cmp	r3, #31
 80096dc:	dc00      	bgt.n	80096e0 <_strtod_l+0x61c>
 80096de:	e112      	b.n	8009906 <_strtod_l+0x842>
 80096e0:	2600      	movs	r6, #0
 80096e2:	2b34      	cmp	r3, #52	; 0x34
 80096e4:	dc00      	bgt.n	80096e8 <_strtod_l+0x624>
 80096e6:	e107      	b.n	80098f8 <_strtod_l+0x834>
 80096e8:	27dc      	movs	r7, #220	; 0xdc
 80096ea:	04bf      	lsls	r7, r7, #18
 80096ec:	2200      	movs	r2, #0
 80096ee:	2300      	movs	r3, #0
 80096f0:	0030      	movs	r0, r6
 80096f2:	0039      	movs	r1, r7
 80096f4:	f7f6 fea0 	bl	8000438 <__aeabi_dcmpeq>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d1aa      	bne.n	8009652 <_strtod_l+0x58e>
 80096fc:	9b08      	ldr	r3, [sp, #32]
 80096fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	9804      	ldr	r0, [sp, #16]
 8009708:	f001 fdf8 	bl	800b2fc <__s2b>
 800970c:	900b      	str	r0, [sp, #44]	; 0x2c
 800970e:	2800      	cmp	r0, #0
 8009710:	d100      	bne.n	8009714 <_strtod_l+0x650>
 8009712:	e709      	b.n	8009528 <_strtod_l+0x464>
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	9a07      	ldr	r2, [sp, #28]
 8009718:	17db      	asrs	r3, r3, #31
 800971a:	4252      	negs	r2, r2
 800971c:	4013      	ands	r3, r2
 800971e:	9315      	str	r3, [sp, #84]	; 0x54
 8009720:	9b07      	ldr	r3, [sp, #28]
 8009722:	2400      	movs	r4, #0
 8009724:	43db      	mvns	r3, r3
 8009726:	9a07      	ldr	r2, [sp, #28]
 8009728:	17db      	asrs	r3, r3, #31
 800972a:	401a      	ands	r2, r3
 800972c:	921c      	str	r2, [sp, #112]	; 0x70
 800972e:	9405      	str	r4, [sp, #20]
 8009730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009732:	9804      	ldr	r0, [sp, #16]
 8009734:	6859      	ldr	r1, [r3, #4]
 8009736:	f001 fd52 	bl	800b1de <_Balloc>
 800973a:	900a      	str	r0, [sp, #40]	; 0x28
 800973c:	2800      	cmp	r0, #0
 800973e:	d100      	bne.n	8009742 <_strtod_l+0x67e>
 8009740:	e6f6      	b.n	8009530 <_strtod_l+0x46c>
 8009742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	310c      	adds	r1, #12
 800974a:	1c9a      	adds	r2, r3, #2
 800974c:	0092      	lsls	r2, r2, #2
 800974e:	300c      	adds	r0, #12
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	f7fe fcbf 	bl	80080d4 <memcpy>
 8009756:	ab24      	add	r3, sp, #144	; 0x90
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	ab23      	add	r3, sp, #140	; 0x8c
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	0032      	movs	r2, r6
 8009760:	003b      	movs	r3, r7
 8009762:	9804      	ldr	r0, [sp, #16]
 8009764:	960e      	str	r6, [sp, #56]	; 0x38
 8009766:	970f      	str	r7, [sp, #60]	; 0x3c
 8009768:	f002 f87c 	bl	800b864 <__d2b>
 800976c:	9022      	str	r0, [sp, #136]	; 0x88
 800976e:	2800      	cmp	r0, #0
 8009770:	d100      	bne.n	8009774 <_strtod_l+0x6b0>
 8009772:	e6dd      	b.n	8009530 <_strtod_l+0x46c>
 8009774:	2101      	movs	r1, #1
 8009776:	9804      	ldr	r0, [sp, #16]
 8009778:	f001 fe47 	bl	800b40a <__i2b>
 800977c:	9005      	str	r0, [sp, #20]
 800977e:	2800      	cmp	r0, #0
 8009780:	d100      	bne.n	8009784 <_strtod_l+0x6c0>
 8009782:	e6d5      	b.n	8009530 <_strtod_l+0x46c>
 8009784:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009786:	2b00      	cmp	r3, #0
 8009788:	da00      	bge.n	800978c <_strtod_l+0x6c8>
 800978a:	e0c1      	b.n	8009910 <_strtod_l+0x84c>
 800978c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800978e:	189d      	adds	r5, r3, r2
 8009790:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009792:	4694      	mov	ip, r2
 8009794:	9906      	ldr	r1, [sp, #24]
 8009796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009798:	1a5b      	subs	r3, r3, r1
 800979a:	2136      	movs	r1, #54	; 0x36
 800979c:	189b      	adds	r3, r3, r2
 800979e:	1a8a      	subs	r2, r1, r2
 80097a0:	49b2      	ldr	r1, [pc, #712]	; (8009a6c <_strtod_l+0x9a8>)
 80097a2:	3b01      	subs	r3, #1
 80097a4:	2001      	movs	r0, #1
 80097a6:	428b      	cmp	r3, r1
 80097a8:	db00      	blt.n	80097ac <_strtod_l+0x6e8>
 80097aa:	e0bd      	b.n	8009928 <_strtod_l+0x864>
 80097ac:	1ac9      	subs	r1, r1, r3
 80097ae:	1a52      	subs	r2, r2, r1
 80097b0:	291f      	cmp	r1, #31
 80097b2:	dd00      	ble.n	80097b6 <_strtod_l+0x6f2>
 80097b4:	e0b1      	b.n	800991a <_strtod_l+0x856>
 80097b6:	4088      	lsls	r0, r1
 80097b8:	2300      	movs	r3, #0
 80097ba:	9014      	str	r0, [sp, #80]	; 0x50
 80097bc:	9310      	str	r3, [sp, #64]	; 0x40
 80097be:	18ab      	adds	r3, r5, r2
 80097c0:	9308      	str	r3, [sp, #32]
 80097c2:	0013      	movs	r3, r2
 80097c4:	9a06      	ldr	r2, [sp, #24]
 80097c6:	4463      	add	r3, ip
 80097c8:	18d3      	adds	r3, r2, r3
 80097ca:	9a08      	ldr	r2, [sp, #32]
 80097cc:	930c      	str	r3, [sp, #48]	; 0x30
 80097ce:	002b      	movs	r3, r5
 80097d0:	4295      	cmp	r5, r2
 80097d2:	dd00      	ble.n	80097d6 <_strtod_l+0x712>
 80097d4:	0013      	movs	r3, r2
 80097d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097d8:	4293      	cmp	r3, r2
 80097da:	dd00      	ble.n	80097de <_strtod_l+0x71a>
 80097dc:	0013      	movs	r3, r2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	dd06      	ble.n	80097f0 <_strtod_l+0x72c>
 80097e2:	9a08      	ldr	r2, [sp, #32]
 80097e4:	1aed      	subs	r5, r5, r3
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	9208      	str	r2, [sp, #32]
 80097ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ec:	1ad2      	subs	r2, r2, r3
 80097ee:	920c      	str	r2, [sp, #48]	; 0x30
 80097f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d017      	beq.n	8009826 <_strtod_l+0x762>
 80097f6:	001a      	movs	r2, r3
 80097f8:	9905      	ldr	r1, [sp, #20]
 80097fa:	9804      	ldr	r0, [sp, #16]
 80097fc:	f001 fe9e 	bl	800b53c <__pow5mult>
 8009800:	9005      	str	r0, [sp, #20]
 8009802:	2800      	cmp	r0, #0
 8009804:	d100      	bne.n	8009808 <_strtod_l+0x744>
 8009806:	e693      	b.n	8009530 <_strtod_l+0x46c>
 8009808:	0001      	movs	r1, r0
 800980a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800980c:	9804      	ldr	r0, [sp, #16]
 800980e:	f001 fe05 	bl	800b41c <__multiply>
 8009812:	9012      	str	r0, [sp, #72]	; 0x48
 8009814:	2800      	cmp	r0, #0
 8009816:	d100      	bne.n	800981a <_strtod_l+0x756>
 8009818:	e68a      	b.n	8009530 <_strtod_l+0x46c>
 800981a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800981c:	9804      	ldr	r0, [sp, #16]
 800981e:	f001 fd16 	bl	800b24e <_Bfree>
 8009822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009824:	9322      	str	r3, [sp, #136]	; 0x88
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	dd00      	ble.n	800982e <_strtod_l+0x76a>
 800982c:	e07f      	b.n	800992e <_strtod_l+0x86a>
 800982e:	9b07      	ldr	r3, [sp, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dd08      	ble.n	8009846 <_strtod_l+0x782>
 8009834:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009838:	9804      	ldr	r0, [sp, #16]
 800983a:	f001 fe7f 	bl	800b53c <__pow5mult>
 800983e:	900a      	str	r0, [sp, #40]	; 0x28
 8009840:	2800      	cmp	r0, #0
 8009842:	d100      	bne.n	8009846 <_strtod_l+0x782>
 8009844:	e674      	b.n	8009530 <_strtod_l+0x46c>
 8009846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009848:	2b00      	cmp	r3, #0
 800984a:	dd08      	ble.n	800985e <_strtod_l+0x79a>
 800984c:	001a      	movs	r2, r3
 800984e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009850:	9804      	ldr	r0, [sp, #16]
 8009852:	f001 fec5 	bl	800b5e0 <__lshift>
 8009856:	900a      	str	r0, [sp, #40]	; 0x28
 8009858:	2800      	cmp	r0, #0
 800985a:	d100      	bne.n	800985e <_strtod_l+0x79a>
 800985c:	e668      	b.n	8009530 <_strtod_l+0x46c>
 800985e:	2d00      	cmp	r5, #0
 8009860:	dd08      	ble.n	8009874 <_strtod_l+0x7b0>
 8009862:	002a      	movs	r2, r5
 8009864:	9905      	ldr	r1, [sp, #20]
 8009866:	9804      	ldr	r0, [sp, #16]
 8009868:	f001 feba 	bl	800b5e0 <__lshift>
 800986c:	9005      	str	r0, [sp, #20]
 800986e:	2800      	cmp	r0, #0
 8009870:	d100      	bne.n	8009874 <_strtod_l+0x7b0>
 8009872:	e65d      	b.n	8009530 <_strtod_l+0x46c>
 8009874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009876:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009878:	9804      	ldr	r0, [sp, #16]
 800987a:	f001 ff1d 	bl	800b6b8 <__mdiff>
 800987e:	1e04      	subs	r4, r0, #0
 8009880:	d100      	bne.n	8009884 <_strtod_l+0x7c0>
 8009882:	e655      	b.n	8009530 <_strtod_l+0x46c>
 8009884:	2500      	movs	r5, #0
 8009886:	68c3      	ldr	r3, [r0, #12]
 8009888:	9905      	ldr	r1, [sp, #20]
 800988a:	60c5      	str	r5, [r0, #12]
 800988c:	9312      	str	r3, [sp, #72]	; 0x48
 800988e:	f001 fef9 	bl	800b684 <__mcmp>
 8009892:	42a8      	cmp	r0, r5
 8009894:	da55      	bge.n	8009942 <_strtod_l+0x87e>
 8009896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009898:	42ab      	cmp	r3, r5
 800989a:	d11b      	bne.n	80098d4 <_strtod_l+0x810>
 800989c:	42ae      	cmp	r6, r5
 800989e:	d119      	bne.n	80098d4 <_strtod_l+0x810>
 80098a0:	033b      	lsls	r3, r7, #12
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	d116      	bne.n	80098d4 <_strtod_l+0x810>
 80098a6:	22d6      	movs	r2, #214	; 0xd6
 80098a8:	4b71      	ldr	r3, [pc, #452]	; (8009a70 <_strtod_l+0x9ac>)
 80098aa:	04d2      	lsls	r2, r2, #19
 80098ac:	403b      	ands	r3, r7
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d910      	bls.n	80098d4 <_strtod_l+0x810>
 80098b2:	6963      	ldr	r3, [r4, #20]
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	d102      	bne.n	80098be <_strtod_l+0x7fa>
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	dd0a      	ble.n	80098d4 <_strtod_l+0x810>
 80098be:	0021      	movs	r1, r4
 80098c0:	2201      	movs	r2, #1
 80098c2:	9804      	ldr	r0, [sp, #16]
 80098c4:	f001 fe8c 	bl	800b5e0 <__lshift>
 80098c8:	9905      	ldr	r1, [sp, #20]
 80098ca:	0004      	movs	r4, r0
 80098cc:	f001 feda 	bl	800b684 <__mcmp>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc6b      	bgt.n	80099ac <_strtod_l+0x8e8>
 80098d4:	9b06      	ldr	r3, [sp, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d178      	bne.n	80099cc <_strtod_l+0x908>
 80098da:	e632      	b.n	8009542 <_strtod_l+0x47e>
 80098dc:	2201      	movs	r2, #1
 80098de:	4214      	tst	r4, r2
 80098e0:	d007      	beq.n	80098f2 <_strtod_l+0x82e>
 80098e2:	4a64      	ldr	r2, [pc, #400]	; (8009a74 <_strtod_l+0x9b0>)
 80098e4:	00eb      	lsls	r3, r5, #3
 80098e6:	18d3      	adds	r3, r2, r3
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f7f7 fd56 	bl	800139c <__aeabi_dmul>
 80098f0:	2301      	movs	r3, #1
 80098f2:	3501      	adds	r5, #1
 80098f4:	1064      	asrs	r4, r4, #1
 80098f6:	e6df      	b.n	80096b8 <_strtod_l+0x5f4>
 80098f8:	2101      	movs	r1, #1
 80098fa:	3b20      	subs	r3, #32
 80098fc:	4249      	negs	r1, r1
 80098fe:	4099      	lsls	r1, r3
 8009900:	400a      	ands	r2, r1
 8009902:	0017      	movs	r7, r2
 8009904:	e6f2      	b.n	80096ec <_strtod_l+0x628>
 8009906:	2201      	movs	r2, #1
 8009908:	4252      	negs	r2, r2
 800990a:	409a      	lsls	r2, r3
 800990c:	4016      	ands	r6, r2
 800990e:	e6ed      	b.n	80096ec <_strtod_l+0x628>
 8009910:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009912:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	4694      	mov	ip, r2
 8009918:	e73c      	b.n	8009794 <_strtod_l+0x6d0>
 800991a:	4957      	ldr	r1, [pc, #348]	; (8009a78 <_strtod_l+0x9b4>)
 800991c:	1acb      	subs	r3, r1, r3
 800991e:	0001      	movs	r1, r0
 8009920:	4099      	lsls	r1, r3
 8009922:	9110      	str	r1, [sp, #64]	; 0x40
 8009924:	9014      	str	r0, [sp, #80]	; 0x50
 8009926:	e74a      	b.n	80097be <_strtod_l+0x6fa>
 8009928:	2300      	movs	r3, #0
 800992a:	9310      	str	r3, [sp, #64]	; 0x40
 800992c:	e7fa      	b.n	8009924 <_strtod_l+0x860>
 800992e:	9a08      	ldr	r2, [sp, #32]
 8009930:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009932:	9804      	ldr	r0, [sp, #16]
 8009934:	f001 fe54 	bl	800b5e0 <__lshift>
 8009938:	9022      	str	r0, [sp, #136]	; 0x88
 800993a:	2800      	cmp	r0, #0
 800993c:	d000      	beq.n	8009940 <_strtod_l+0x87c>
 800993e:	e776      	b.n	800982e <_strtod_l+0x76a>
 8009940:	e5f6      	b.n	8009530 <_strtod_l+0x46c>
 8009942:	970c      	str	r7, [sp, #48]	; 0x30
 8009944:	2800      	cmp	r0, #0
 8009946:	d000      	beq.n	800994a <_strtod_l+0x886>
 8009948:	e0a0      	b.n	8009a8c <_strtod_l+0x9c8>
 800994a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800994c:	033b      	lsls	r3, r7, #12
 800994e:	0b1b      	lsrs	r3, r3, #12
 8009950:	2a00      	cmp	r2, #0
 8009952:	d027      	beq.n	80099a4 <_strtod_l+0x8e0>
 8009954:	4a49      	ldr	r2, [pc, #292]	; (8009a7c <_strtod_l+0x9b8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d157      	bne.n	8009a0a <_strtod_l+0x946>
 800995a:	2201      	movs	r2, #1
 800995c:	9b06      	ldr	r3, [sp, #24]
 800995e:	4252      	negs	r2, r2
 8009960:	0031      	movs	r1, r6
 8009962:	0010      	movs	r0, r2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <_strtod_l+0x8bc>
 8009968:	25d4      	movs	r5, #212	; 0xd4
 800996a:	4b41      	ldr	r3, [pc, #260]	; (8009a70 <_strtod_l+0x9ac>)
 800996c:	04ed      	lsls	r5, r5, #19
 800996e:	403b      	ands	r3, r7
 8009970:	0010      	movs	r0, r2
 8009972:	42ab      	cmp	r3, r5
 8009974:	d804      	bhi.n	8009980 <_strtod_l+0x8bc>
 8009976:	306c      	adds	r0, #108	; 0x6c
 8009978:	0d1b      	lsrs	r3, r3, #20
 800997a:	1ac3      	subs	r3, r0, r3
 800997c:	409a      	lsls	r2, r3
 800997e:	0010      	movs	r0, r2
 8009980:	4281      	cmp	r1, r0
 8009982:	d142      	bne.n	8009a0a <_strtod_l+0x946>
 8009984:	4b3e      	ldr	r3, [pc, #248]	; (8009a80 <_strtod_l+0x9bc>)
 8009986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009988:	429a      	cmp	r2, r3
 800998a:	d102      	bne.n	8009992 <_strtod_l+0x8ce>
 800998c:	1c4b      	adds	r3, r1, #1
 800998e:	d100      	bne.n	8009992 <_strtod_l+0x8ce>
 8009990:	e5ce      	b.n	8009530 <_strtod_l+0x46c>
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <_strtod_l+0x9ac>)
 8009994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009996:	2600      	movs	r6, #0
 8009998:	401a      	ands	r2, r3
 800999a:	0013      	movs	r3, r2
 800999c:	2280      	movs	r2, #128	; 0x80
 800999e:	0352      	lsls	r2, r2, #13
 80099a0:	189f      	adds	r7, r3, r2
 80099a2:	e797      	b.n	80098d4 <_strtod_l+0x810>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d130      	bne.n	8009a0a <_strtod_l+0x946>
 80099a8:	2e00      	cmp	r6, #0
 80099aa:	d12e      	bne.n	8009a0a <_strtod_l+0x946>
 80099ac:	9906      	ldr	r1, [sp, #24]
 80099ae:	003b      	movs	r3, r7
 80099b0:	4a2f      	ldr	r2, [pc, #188]	; (8009a70 <_strtod_l+0x9ac>)
 80099b2:	2900      	cmp	r1, #0
 80099b4:	d020      	beq.n	80099f8 <_strtod_l+0x934>
 80099b6:	0011      	movs	r1, r2
 80099b8:	20d6      	movs	r0, #214	; 0xd6
 80099ba:	4039      	ands	r1, r7
 80099bc:	04c0      	lsls	r0, r0, #19
 80099be:	4281      	cmp	r1, r0
 80099c0:	dc1a      	bgt.n	80099f8 <_strtod_l+0x934>
 80099c2:	23dc      	movs	r3, #220	; 0xdc
 80099c4:	049b      	lsls	r3, r3, #18
 80099c6:	4299      	cmp	r1, r3
 80099c8:	dc00      	bgt.n	80099cc <_strtod_l+0x908>
 80099ca:	e646      	b.n	800965a <_strtod_l+0x596>
 80099cc:	4b2d      	ldr	r3, [pc, #180]	; (8009a84 <_strtod_l+0x9c0>)
 80099ce:	0030      	movs	r0, r6
 80099d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80099d2:	2300      	movs	r3, #0
 80099d4:	931a      	str	r3, [sp, #104]	; 0x68
 80099d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099da:	0039      	movs	r1, r7
 80099dc:	f7f7 fcde 	bl	800139c <__aeabi_dmul>
 80099e0:	0006      	movs	r6, r0
 80099e2:	000f      	movs	r7, r1
 80099e4:	1e0b      	subs	r3, r1, #0
 80099e6:	d000      	beq.n	80099ea <_strtod_l+0x926>
 80099e8:	e5ab      	b.n	8009542 <_strtod_l+0x47e>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d000      	beq.n	80099f0 <_strtod_l+0x92c>
 80099ee:	e5a8      	b.n	8009542 <_strtod_l+0x47e>
 80099f0:	9a04      	ldr	r2, [sp, #16]
 80099f2:	3322      	adds	r3, #34	; 0x22
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	e5a4      	b.n	8009542 <_strtod_l+0x47e>
 80099f8:	2601      	movs	r6, #1
 80099fa:	4013      	ands	r3, r2
 80099fc:	4a22      	ldr	r2, [pc, #136]	; (8009a88 <_strtod_l+0x9c4>)
 80099fe:	4276      	negs	r6, r6
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	4a1e      	ldr	r2, [pc, #120]	; (8009a7c <_strtod_l+0x9b8>)
 8009a04:	431a      	orrs	r2, r3
 8009a06:	0017      	movs	r7, r2
 8009a08:	e764      	b.n	80098d4 <_strtod_l+0x810>
 8009a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d015      	beq.n	8009a3c <_strtod_l+0x978>
 8009a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a14:	4213      	tst	r3, r2
 8009a16:	d100      	bne.n	8009a1a <_strtod_l+0x956>
 8009a18:	e75c      	b.n	80098d4 <_strtod_l+0x810>
 8009a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a1c:	9a06      	ldr	r2, [sp, #24]
 8009a1e:	0030      	movs	r0, r6
 8009a20:	0039      	movs	r1, r7
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00f      	beq.n	8009a46 <_strtod_l+0x982>
 8009a26:	f7ff fb35 	bl	8009094 <sulp>
 8009a2a:	0002      	movs	r2, r0
 8009a2c:	000b      	movs	r3, r1
 8009a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a32:	f7f6 fd8d 	bl	8000550 <__aeabi_dadd>
 8009a36:	0006      	movs	r6, r0
 8009a38:	000f      	movs	r7, r1
 8009a3a:	e74b      	b.n	80098d4 <_strtod_l+0x810>
 8009a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a3e:	4233      	tst	r3, r6
 8009a40:	d100      	bne.n	8009a44 <_strtod_l+0x980>
 8009a42:	e747      	b.n	80098d4 <_strtod_l+0x810>
 8009a44:	e7e9      	b.n	8009a1a <_strtod_l+0x956>
 8009a46:	f7ff fb25 	bl	8009094 <sulp>
 8009a4a:	0002      	movs	r2, r0
 8009a4c:	000b      	movs	r3, r1
 8009a4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a52:	f7f7 ff15 	bl	8001880 <__aeabi_dsub>
 8009a56:	2200      	movs	r2, #0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	0006      	movs	r6, r0
 8009a5c:	000f      	movs	r7, r1
 8009a5e:	f7f6 fceb 	bl	8000438 <__aeabi_dcmpeq>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d000      	beq.n	8009a68 <_strtod_l+0x9a4>
 8009a66:	e5f8      	b.n	800965a <_strtod_l+0x596>
 8009a68:	e734      	b.n	80098d4 <_strtod_l+0x810>
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	fffffc02 	.word	0xfffffc02
 8009a70:	7ff00000 	.word	0x7ff00000
 8009a74:	0800c1f0 	.word	0x0800c1f0
 8009a78:	fffffbe2 	.word	0xfffffbe2
 8009a7c:	000fffff 	.word	0x000fffff
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	39500000 	.word	0x39500000
 8009a88:	fff00000 	.word	0xfff00000
 8009a8c:	9905      	ldr	r1, [sp, #20]
 8009a8e:	0020      	movs	r0, r4
 8009a90:	f001 ff3c 	bl	800b90c <__ratio>
 8009a94:	2380      	movs	r3, #128	; 0x80
 8009a96:	2200      	movs	r2, #0
 8009a98:	05db      	lsls	r3, r3, #23
 8009a9a:	9008      	str	r0, [sp, #32]
 8009a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a9e:	f7f6 fcdb 	bl	8000458 <__aeabi_dcmple>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d100      	bne.n	8009aa8 <_strtod_l+0x9e4>
 8009aa6:	e07f      	b.n	8009ba8 <_strtod_l+0xae4>
 8009aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d04b      	beq.n	8009b46 <_strtod_l+0xa82>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4b8a      	ldr	r3, [pc, #552]	; (8009cdc <_strtod_l+0xc18>)
 8009ab2:	9210      	str	r2, [sp, #64]	; 0x40
 8009ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8009ab6:	4b89      	ldr	r3, [pc, #548]	; (8009cdc <_strtod_l+0xc18>)
 8009ab8:	9308      	str	r3, [sp, #32]
 8009aba:	4a89      	ldr	r2, [pc, #548]	; (8009ce0 <_strtod_l+0xc1c>)
 8009abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009abe:	4013      	ands	r3, r2
 8009ac0:	9314      	str	r3, [sp, #80]	; 0x50
 8009ac2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ac4:	4b87      	ldr	r3, [pc, #540]	; (8009ce4 <_strtod_l+0xc20>)
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d000      	beq.n	8009acc <_strtod_l+0xa08>
 8009aca:	e0ba      	b.n	8009c42 <_strtod_l+0xb7e>
 8009acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ad0:	921a      	str	r2, [sp, #104]	; 0x68
 8009ad2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ad4:	4a84      	ldr	r2, [pc, #528]	; (8009ce8 <_strtod_l+0xc24>)
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad8:	4694      	mov	ip, r2
 8009ada:	4463      	add	r3, ip
 8009adc:	001f      	movs	r7, r3
 8009ade:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ae2:	0030      	movs	r0, r6
 8009ae4:	0039      	movs	r1, r7
 8009ae6:	920c      	str	r2, [sp, #48]	; 0x30
 8009ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8009aea:	f001 fe49 	bl	800b780 <__ulp>
 8009aee:	0002      	movs	r2, r0
 8009af0:	000b      	movs	r3, r1
 8009af2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009af6:	f7f7 fc51 	bl	800139c <__aeabi_dmul>
 8009afa:	0032      	movs	r2, r6
 8009afc:	003b      	movs	r3, r7
 8009afe:	f7f6 fd27 	bl	8000550 <__aeabi_dadd>
 8009b02:	4a77      	ldr	r2, [pc, #476]	; (8009ce0 <_strtod_l+0xc1c>)
 8009b04:	4b79      	ldr	r3, [pc, #484]	; (8009cec <_strtod_l+0xc28>)
 8009b06:	0006      	movs	r6, r0
 8009b08:	400a      	ands	r2, r1
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d964      	bls.n	8009bd8 <_strtod_l+0xb14>
 8009b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b10:	4a77      	ldr	r2, [pc, #476]	; (8009cf0 <_strtod_l+0xc2c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d103      	bne.n	8009b1e <_strtod_l+0xa5a>
 8009b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b18:	3301      	adds	r3, #1
 8009b1a:	d100      	bne.n	8009b1e <_strtod_l+0xa5a>
 8009b1c:	e508      	b.n	8009530 <_strtod_l+0x46c>
 8009b1e:	2601      	movs	r6, #1
 8009b20:	4f73      	ldr	r7, [pc, #460]	; (8009cf0 <_strtod_l+0xc2c>)
 8009b22:	4276      	negs	r6, r6
 8009b24:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009b26:	9804      	ldr	r0, [sp, #16]
 8009b28:	f001 fb91 	bl	800b24e <_Bfree>
 8009b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b2e:	9804      	ldr	r0, [sp, #16]
 8009b30:	f001 fb8d 	bl	800b24e <_Bfree>
 8009b34:	9905      	ldr	r1, [sp, #20]
 8009b36:	9804      	ldr	r0, [sp, #16]
 8009b38:	f001 fb89 	bl	800b24e <_Bfree>
 8009b3c:	0021      	movs	r1, r4
 8009b3e:	9804      	ldr	r0, [sp, #16]
 8009b40:	f001 fb85 	bl	800b24e <_Bfree>
 8009b44:	e5f4      	b.n	8009730 <_strtod_l+0x66c>
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d11e      	bne.n	8009b88 <_strtod_l+0xac4>
 8009b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b4c:	031b      	lsls	r3, r3, #12
 8009b4e:	d121      	bne.n	8009b94 <_strtod_l+0xad0>
 8009b50:	9808      	ldr	r0, [sp, #32]
 8009b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b54:	2200      	movs	r2, #0
 8009b56:	4b61      	ldr	r3, [pc, #388]	; (8009cdc <_strtod_l+0xc18>)
 8009b58:	f7f6 fc74 	bl	8000444 <__aeabi_dcmplt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d11f      	bne.n	8009ba0 <_strtod_l+0xadc>
 8009b60:	9808      	ldr	r0, [sp, #32]
 8009b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b64:	2200      	movs	r2, #0
 8009b66:	4b63      	ldr	r3, [pc, #396]	; (8009cf4 <_strtod_l+0xc30>)
 8009b68:	f7f7 fc18 	bl	800139c <__aeabi_dmul>
 8009b6c:	0005      	movs	r5, r0
 8009b6e:	9108      	str	r1, [sp, #32]
 8009b70:	2280      	movs	r2, #128	; 0x80
 8009b72:	0612      	lsls	r2, r2, #24
 8009b74:	4694      	mov	ip, r2
 8009b76:	9b08      	ldr	r3, [sp, #32]
 8009b78:	951e      	str	r5, [sp, #120]	; 0x78
 8009b7a:	4463      	add	r3, ip
 8009b7c:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b82:	9210      	str	r2, [sp, #64]	; 0x40
 8009b84:	9311      	str	r3, [sp, #68]	; 0x44
 8009b86:	e798      	b.n	8009aba <_strtod_l+0x9f6>
 8009b88:	2e01      	cmp	r6, #1
 8009b8a:	d103      	bne.n	8009b94 <_strtod_l+0xad0>
 8009b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d100      	bne.n	8009b94 <_strtod_l+0xad0>
 8009b92:	e562      	b.n	800965a <_strtod_l+0x596>
 8009b94:	2200      	movs	r2, #0
 8009b96:	4b58      	ldr	r3, [pc, #352]	; (8009cf8 <_strtod_l+0xc34>)
 8009b98:	2500      	movs	r5, #0
 8009b9a:	9210      	str	r2, [sp, #64]	; 0x40
 8009b9c:	9311      	str	r3, [sp, #68]	; 0x44
 8009b9e:	e78a      	b.n	8009ab6 <_strtod_l+0x9f2>
 8009ba0:	4b54      	ldr	r3, [pc, #336]	; (8009cf4 <_strtod_l+0xc30>)
 8009ba2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009ba4:	9308      	str	r3, [sp, #32]
 8009ba6:	e7e3      	b.n	8009b70 <_strtod_l+0xaac>
 8009ba8:	4b52      	ldr	r3, [pc, #328]	; (8009cf4 <_strtod_l+0xc30>)
 8009baa:	9808      	ldr	r0, [sp, #32]
 8009bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f7f7 fbf4 	bl	800139c <__aeabi_dmul>
 8009bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bb6:	0005      	movs	r5, r0
 8009bb8:	9108      	str	r1, [sp, #32]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d107      	bne.n	8009bce <_strtod_l+0xb0a>
 8009bbe:	2380      	movs	r3, #128	; 0x80
 8009bc0:	061b      	lsls	r3, r3, #24
 8009bc2:	18cb      	adds	r3, r1, r3
 8009bc4:	9016      	str	r0, [sp, #88]	; 0x58
 8009bc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bcc:	e7d9      	b.n	8009b82 <_strtod_l+0xabe>
 8009bce:	0002      	movs	r2, r0
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	9216      	str	r2, [sp, #88]	; 0x58
 8009bd4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bd6:	e7f7      	b.n	8009bc8 <_strtod_l+0xb04>
 8009bd8:	23d4      	movs	r3, #212	; 0xd4
 8009bda:	049b      	lsls	r3, r3, #18
 8009bdc:	18cf      	adds	r7, r1, r3
 8009bde:	9b06      	ldr	r3, [sp, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d19f      	bne.n	8009b24 <_strtod_l+0xa60>
 8009be4:	4b3e      	ldr	r3, [pc, #248]	; (8009ce0 <_strtod_l+0xc1c>)
 8009be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009be8:	970c      	str	r7, [sp, #48]	; 0x30
 8009bea:	403b      	ands	r3, r7
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d199      	bne.n	8009b24 <_strtod_l+0xa60>
 8009bf0:	9908      	ldr	r1, [sp, #32]
 8009bf2:	0028      	movs	r0, r5
 8009bf4:	f7f8 f9a8 	bl	8001f48 <__aeabi_d2iz>
 8009bf8:	f7f8 f9dc 	bl	8001fb4 <__aeabi_i2d>
 8009bfc:	000b      	movs	r3, r1
 8009bfe:	0002      	movs	r2, r0
 8009c00:	9908      	ldr	r1, [sp, #32]
 8009c02:	0028      	movs	r0, r5
 8009c04:	f7f7 fe3c 	bl	8001880 <__aeabi_dsub>
 8009c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c0a:	9008      	str	r0, [sp, #32]
 8009c0c:	9109      	str	r1, [sp, #36]	; 0x24
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <_strtod_l+0xb58>
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	d102      	bne.n	8009c1c <_strtod_l+0xb58>
 8009c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c18:	031b      	lsls	r3, r3, #12
 8009c1a:	d058      	beq.n	8009cce <_strtod_l+0xc0a>
 8009c1c:	9808      	ldr	r0, [sp, #32]
 8009c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c20:	4a36      	ldr	r2, [pc, #216]	; (8009cfc <_strtod_l+0xc38>)
 8009c22:	4b37      	ldr	r3, [pc, #220]	; (8009d00 <_strtod_l+0xc3c>)
 8009c24:	f7f6 fc0e 	bl	8000444 <__aeabi_dcmplt>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d000      	beq.n	8009c2e <_strtod_l+0xb6a>
 8009c2c:	e489      	b.n	8009542 <_strtod_l+0x47e>
 8009c2e:	9808      	ldr	r0, [sp, #32]
 8009c30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c32:	4a34      	ldr	r2, [pc, #208]	; (8009d04 <_strtod_l+0xc40>)
 8009c34:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <_strtod_l+0xc30>)
 8009c36:	f7f6 fc19 	bl	800046c <__aeabi_dcmpgt>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d100      	bne.n	8009c40 <_strtod_l+0xb7c>
 8009c3e:	e771      	b.n	8009b24 <_strtod_l+0xa60>
 8009c40:	e47f      	b.n	8009542 <_strtod_l+0x47e>
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d02a      	beq.n	8009c9e <_strtod_l+0xbda>
 8009c48:	23d4      	movs	r3, #212	; 0xd4
 8009c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c4c:	04db      	lsls	r3, r3, #19
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d825      	bhi.n	8009c9e <_strtod_l+0xbda>
 8009c52:	4a2d      	ldr	r2, [pc, #180]	; (8009d08 <_strtod_l+0xc44>)
 8009c54:	4b2d      	ldr	r3, [pc, #180]	; (8009d0c <_strtod_l+0xc48>)
 8009c56:	0028      	movs	r0, r5
 8009c58:	9908      	ldr	r1, [sp, #32]
 8009c5a:	f7f6 fbfd 	bl	8000458 <__aeabi_dcmple>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d016      	beq.n	8009c90 <_strtod_l+0xbcc>
 8009c62:	0028      	movs	r0, r5
 8009c64:	9908      	ldr	r1, [sp, #32]
 8009c66:	f7f6 fc15 	bl	8000494 <__aeabi_d2uiz>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d100      	bne.n	8009c70 <_strtod_l+0xbac>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f7f8 f9da 	bl	8002028 <__aeabi_ui2d>
 8009c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c76:	0005      	movs	r5, r0
 8009c78:	9108      	str	r1, [sp, #32]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d122      	bne.n	8009cc4 <_strtod_l+0xc00>
 8009c7e:	2380      	movs	r3, #128	; 0x80
 8009c80:	061b      	lsls	r3, r3, #24
 8009c82:	18cb      	adds	r3, r1, r3
 8009c84:	9018      	str	r0, [sp, #96]	; 0x60
 8009c86:	9319      	str	r3, [sp, #100]	; 0x64
 8009c88:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c8c:	9210      	str	r2, [sp, #64]	; 0x40
 8009c8e:	9311      	str	r3, [sp, #68]	; 0x44
 8009c90:	22d6      	movs	r2, #214	; 0xd6
 8009c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c94:	04d2      	lsls	r2, r2, #19
 8009c96:	189b      	adds	r3, r3, r2
 8009c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c9a:	1a9b      	subs	r3, r3, r2
 8009c9c:	9311      	str	r3, [sp, #68]	; 0x44
 8009c9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ca2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009ca4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009ca6:	f001 fd6b 	bl	800b780 <__ulp>
 8009caa:	0002      	movs	r2, r0
 8009cac:	000b      	movs	r3, r1
 8009cae:	0030      	movs	r0, r6
 8009cb0:	0039      	movs	r1, r7
 8009cb2:	f7f7 fb73 	bl	800139c <__aeabi_dmul>
 8009cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cba:	f7f6 fc49 	bl	8000550 <__aeabi_dadd>
 8009cbe:	0006      	movs	r6, r0
 8009cc0:	000f      	movs	r7, r1
 8009cc2:	e78c      	b.n	8009bde <_strtod_l+0xb1a>
 8009cc4:	0002      	movs	r2, r0
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	9218      	str	r2, [sp, #96]	; 0x60
 8009cca:	9319      	str	r3, [sp, #100]	; 0x64
 8009ccc:	e7dc      	b.n	8009c88 <_strtod_l+0xbc4>
 8009cce:	4a0b      	ldr	r2, [pc, #44]	; (8009cfc <_strtod_l+0xc38>)
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	; (8009d10 <_strtod_l+0xc4c>)
 8009cd2:	9808      	ldr	r0, [sp, #32]
 8009cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cd6:	f7f6 fbb5 	bl	8000444 <__aeabi_dcmplt>
 8009cda:	e7ae      	b.n	8009c3a <_strtod_l+0xb76>
 8009cdc:	3ff00000 	.word	0x3ff00000
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	7fe00000 	.word	0x7fe00000
 8009ce8:	fcb00000 	.word	0xfcb00000
 8009cec:	7c9fffff 	.word	0x7c9fffff
 8009cf0:	7fefffff 	.word	0x7fefffff
 8009cf4:	3fe00000 	.word	0x3fe00000
 8009cf8:	bff00000 	.word	0xbff00000
 8009cfc:	94a03595 	.word	0x94a03595
 8009d00:	3fdfffff 	.word	0x3fdfffff
 8009d04:	35afe535 	.word	0x35afe535
 8009d08:	ffc00000 	.word	0xffc00000
 8009d0c:	41dfffff 	.word	0x41dfffff
 8009d10:	3fcfffff 	.word	0x3fcfffff

08009d14 <_strtod_r>:
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <_strtod_r+0x14>)
 8009d16:	b510      	push	{r4, lr}
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d100      	bne.n	8009d22 <_strtod_r+0xe>
 8009d20:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <_strtod_r+0x18>)
 8009d22:	f7ff f9cf 	bl	80090c4 <_strtod_l>
 8009d26:	bd10      	pop	{r4, pc}
 8009d28:	2000001c 	.word	0x2000001c
 8009d2c:	20000080 	.word	0x20000080

08009d30 <_strtol_l.isra.0>:
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	001f      	movs	r7, r3
 8009d34:	000e      	movs	r6, r1
 8009d36:	b087      	sub	sp, #28
 8009d38:	9005      	str	r0, [sp, #20]
 8009d3a:	9101      	str	r1, [sp, #4]
 8009d3c:	9202      	str	r2, [sp, #8]
 8009d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d40:	7834      	ldrb	r4, [r6, #0]
 8009d42:	f001 fa1e 	bl	800b182 <__locale_ctype_ptr_l>
 8009d46:	2208      	movs	r2, #8
 8009d48:	1900      	adds	r0, r0, r4
 8009d4a:	7843      	ldrb	r3, [r0, #1]
 8009d4c:	1c75      	adds	r5, r6, #1
 8009d4e:	4013      	ands	r3, r2
 8009d50:	d136      	bne.n	8009dc0 <_strtol_l.isra.0+0x90>
 8009d52:	2c2d      	cmp	r4, #45	; 0x2d
 8009d54:	d136      	bne.n	8009dc4 <_strtol_l.isra.0+0x94>
 8009d56:	1cb5      	adds	r5, r6, #2
 8009d58:	7874      	ldrb	r4, [r6, #1]
 8009d5a:	2601      	movs	r6, #1
 8009d5c:	2f00      	cmp	r7, #0
 8009d5e:	d062      	beq.n	8009e26 <_strtol_l.isra.0+0xf6>
 8009d60:	2f10      	cmp	r7, #16
 8009d62:	d109      	bne.n	8009d78 <_strtol_l.isra.0+0x48>
 8009d64:	2c30      	cmp	r4, #48	; 0x30
 8009d66:	d107      	bne.n	8009d78 <_strtol_l.isra.0+0x48>
 8009d68:	2220      	movs	r2, #32
 8009d6a:	782b      	ldrb	r3, [r5, #0]
 8009d6c:	4393      	bics	r3, r2
 8009d6e:	2b58      	cmp	r3, #88	; 0x58
 8009d70:	d154      	bne.n	8009e1c <_strtol_l.isra.0+0xec>
 8009d72:	2710      	movs	r7, #16
 8009d74:	786c      	ldrb	r4, [r5, #1]
 8009d76:	3502      	adds	r5, #2
 8009d78:	4b2d      	ldr	r3, [pc, #180]	; (8009e30 <_strtol_l.isra.0+0x100>)
 8009d7a:	0039      	movs	r1, r7
 8009d7c:	18f3      	adds	r3, r6, r3
 8009d7e:	0018      	movs	r0, r3
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	f7f6 fa59 	bl	8000238 <__aeabi_uidivmod>
 8009d86:	9104      	str	r1, [sp, #16]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	4249      	negs	r1, r1
 8009d8e:	0002      	movs	r2, r0
 8009d90:	468c      	mov	ip, r1
 8009d92:	0018      	movs	r0, r3
 8009d94:	0021      	movs	r1, r4
 8009d96:	3930      	subs	r1, #48	; 0x30
 8009d98:	2909      	cmp	r1, #9
 8009d9a:	d81a      	bhi.n	8009dd2 <_strtol_l.isra.0+0xa2>
 8009d9c:	000c      	movs	r4, r1
 8009d9e:	42a7      	cmp	r7, r4
 8009da0:	dd23      	ble.n	8009dea <_strtol_l.isra.0+0xba>
 8009da2:	1c59      	adds	r1, r3, #1
 8009da4:	d009      	beq.n	8009dba <_strtol_l.isra.0+0x8a>
 8009da6:	4663      	mov	r3, ip
 8009da8:	4282      	cmp	r2, r0
 8009daa:	d306      	bcc.n	8009dba <_strtol_l.isra.0+0x8a>
 8009dac:	d102      	bne.n	8009db4 <_strtol_l.isra.0+0x84>
 8009dae:	9904      	ldr	r1, [sp, #16]
 8009db0:	42a1      	cmp	r1, r4
 8009db2:	db02      	blt.n	8009dba <_strtol_l.isra.0+0x8a>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4378      	muls	r0, r7
 8009db8:	1820      	adds	r0, r4, r0
 8009dba:	782c      	ldrb	r4, [r5, #0]
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	e7e9      	b.n	8009d94 <_strtol_l.isra.0+0x64>
 8009dc0:	002e      	movs	r6, r5
 8009dc2:	e7bc      	b.n	8009d3e <_strtol_l.isra.0+0xe>
 8009dc4:	2c2b      	cmp	r4, #43	; 0x2b
 8009dc6:	d001      	beq.n	8009dcc <_strtol_l.isra.0+0x9c>
 8009dc8:	001e      	movs	r6, r3
 8009dca:	e7c7      	b.n	8009d5c <_strtol_l.isra.0+0x2c>
 8009dcc:	1cb5      	adds	r5, r6, #2
 8009dce:	7874      	ldrb	r4, [r6, #1]
 8009dd0:	e7fa      	b.n	8009dc8 <_strtol_l.isra.0+0x98>
 8009dd2:	0021      	movs	r1, r4
 8009dd4:	3941      	subs	r1, #65	; 0x41
 8009dd6:	2919      	cmp	r1, #25
 8009dd8:	d801      	bhi.n	8009dde <_strtol_l.isra.0+0xae>
 8009dda:	3c37      	subs	r4, #55	; 0x37
 8009ddc:	e7df      	b.n	8009d9e <_strtol_l.isra.0+0x6e>
 8009dde:	0021      	movs	r1, r4
 8009de0:	3961      	subs	r1, #97	; 0x61
 8009de2:	2919      	cmp	r1, #25
 8009de4:	d801      	bhi.n	8009dea <_strtol_l.isra.0+0xba>
 8009de6:	3c57      	subs	r4, #87	; 0x57
 8009de8:	e7d9      	b.n	8009d9e <_strtol_l.isra.0+0x6e>
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	d108      	bne.n	8009e00 <_strtol_l.isra.0+0xd0>
 8009dee:	9a05      	ldr	r2, [sp, #20]
 8009df0:	3323      	adds	r3, #35	; 0x23
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	9b02      	ldr	r3, [sp, #8]
 8009df6:	9803      	ldr	r0, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <_strtol_l.isra.0+0xe0>
 8009dfc:	b007      	add	sp, #28
 8009dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e00:	2e00      	cmp	r6, #0
 8009e02:	d000      	beq.n	8009e06 <_strtol_l.isra.0+0xd6>
 8009e04:	4240      	negs	r0, r0
 8009e06:	9a02      	ldr	r2, [sp, #8]
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	d0f7      	beq.n	8009dfc <_strtol_l.isra.0+0xcc>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <_strtol_l.isra.0+0xe4>
 8009e10:	1e6b      	subs	r3, r5, #1
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	9a01      	ldr	r2, [sp, #4]
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	e7ef      	b.n	8009dfc <_strtol_l.isra.0+0xcc>
 8009e1c:	2430      	movs	r4, #48	; 0x30
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	d1aa      	bne.n	8009d78 <_strtol_l.isra.0+0x48>
 8009e22:	2708      	movs	r7, #8
 8009e24:	e7a8      	b.n	8009d78 <_strtol_l.isra.0+0x48>
 8009e26:	2c30      	cmp	r4, #48	; 0x30
 8009e28:	d09e      	beq.n	8009d68 <_strtol_l.isra.0+0x38>
 8009e2a:	270a      	movs	r7, #10
 8009e2c:	e7a4      	b.n	8009d78 <_strtol_l.isra.0+0x48>
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	7fffffff 	.word	0x7fffffff

08009e34 <_strtol_r>:
 8009e34:	b513      	push	{r0, r1, r4, lr}
 8009e36:	4c05      	ldr	r4, [pc, #20]	; (8009e4c <_strtol_r+0x18>)
 8009e38:	6824      	ldr	r4, [r4, #0]
 8009e3a:	6a24      	ldr	r4, [r4, #32]
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	d100      	bne.n	8009e42 <_strtol_r+0xe>
 8009e40:	4c03      	ldr	r4, [pc, #12]	; (8009e50 <_strtol_r+0x1c>)
 8009e42:	9400      	str	r4, [sp, #0]
 8009e44:	f7ff ff74 	bl	8009d30 <_strtol_l.isra.0>
 8009e48:	bd16      	pop	{r1, r2, r4, pc}
 8009e4a:	46c0      	nop			; (mov r8, r8)
 8009e4c:	2000001c 	.word	0x2000001c
 8009e50:	20000080 	.word	0x20000080

08009e54 <quorem>:
 8009e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e56:	6903      	ldr	r3, [r0, #16]
 8009e58:	690c      	ldr	r4, [r1, #16]
 8009e5a:	b089      	sub	sp, #36	; 0x24
 8009e5c:	0007      	movs	r7, r0
 8009e5e:	9105      	str	r1, [sp, #20]
 8009e60:	2600      	movs	r6, #0
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	db65      	blt.n	8009f32 <quorem+0xde>
 8009e66:	000b      	movs	r3, r1
 8009e68:	3c01      	subs	r4, #1
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	00a5      	lsls	r5, r4, #2
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	195b      	adds	r3, r3, r5
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	0003      	movs	r3, r0
 8009e76:	3314      	adds	r3, #20
 8009e78:	9302      	str	r3, [sp, #8]
 8009e7a:	195d      	adds	r5, r3, r5
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	6828      	ldr	r0, [r5, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	1c59      	adds	r1, r3, #1
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	f7f6 f951 	bl	800012c <__udivsi3>
 8009e8a:	9001      	str	r0, [sp, #4]
 8009e8c:	42b0      	cmp	r0, r6
 8009e8e:	d029      	beq.n	8009ee4 <quorem+0x90>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	9802      	ldr	r0, [sp, #8]
 8009e94:	469c      	mov	ip, r3
 8009e96:	9606      	str	r6, [sp, #24]
 8009e98:	4662      	mov	r2, ip
 8009e9a:	ca08      	ldmia	r2!, {r3}
 8009e9c:	4694      	mov	ip, r2
 8009e9e:	9a01      	ldr	r2, [sp, #4]
 8009ea0:	b299      	uxth	r1, r3
 8009ea2:	4351      	muls	r1, r2
 8009ea4:	0c1b      	lsrs	r3, r3, #16
 8009ea6:	4353      	muls	r3, r2
 8009ea8:	1989      	adds	r1, r1, r6
 8009eaa:	0c0a      	lsrs	r2, r1, #16
 8009eac:	189b      	adds	r3, r3, r2
 8009eae:	9307      	str	r3, [sp, #28]
 8009eb0:	0c1e      	lsrs	r6, r3, #16
 8009eb2:	6803      	ldr	r3, [r0, #0]
 8009eb4:	b289      	uxth	r1, r1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	9b06      	ldr	r3, [sp, #24]
 8009eba:	18d2      	adds	r2, r2, r3
 8009ebc:	6803      	ldr	r3, [r0, #0]
 8009ebe:	1a52      	subs	r2, r2, r1
 8009ec0:	0c19      	lsrs	r1, r3, #16
 8009ec2:	466b      	mov	r3, sp
 8009ec4:	8b9b      	ldrh	r3, [r3, #28]
 8009ec6:	1acb      	subs	r3, r1, r3
 8009ec8:	1411      	asrs	r1, r2, #16
 8009eca:	185b      	adds	r3, r3, r1
 8009ecc:	1419      	asrs	r1, r3, #16
 8009ece:	b292      	uxth	r2, r2
 8009ed0:	041b      	lsls	r3, r3, #16
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	9106      	str	r1, [sp, #24]
 8009ed8:	c004      	stmia	r0!, {r2}
 8009eda:	4563      	cmp	r3, ip
 8009edc:	d2dc      	bcs.n	8009e98 <quorem+0x44>
 8009ede:	682b      	ldr	r3, [r5, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02d      	beq.n	8009f40 <quorem+0xec>
 8009ee4:	9905      	ldr	r1, [sp, #20]
 8009ee6:	0038      	movs	r0, r7
 8009ee8:	f001 fbcc 	bl	800b684 <__mcmp>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	db1f      	blt.n	8009f30 <quorem+0xdc>
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	9802      	ldr	r0, [sp, #8]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9903      	ldr	r1, [sp, #12]
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	6802      	ldr	r2, [r0, #0]
 8009efe:	c908      	ldmia	r1!, {r3}
 8009f00:	b292      	uxth	r2, r2
 8009f02:	1955      	adds	r5, r2, r5
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	1aaa      	subs	r2, r5, r2
 8009f08:	6805      	ldr	r5, [r0, #0]
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	0c2d      	lsrs	r5, r5, #16
 8009f0e:	1aeb      	subs	r3, r5, r3
 8009f10:	1415      	asrs	r5, r2, #16
 8009f12:	195b      	adds	r3, r3, r5
 8009f14:	141d      	asrs	r5, r3, #16
 8009f16:	b292      	uxth	r2, r2
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	c008      	stmia	r0!, {r3}
 8009f1e:	9b04      	ldr	r3, [sp, #16]
 8009f20:	428b      	cmp	r3, r1
 8009f22:	d2eb      	bcs.n	8009efc <quorem+0xa8>
 8009f24:	9a02      	ldr	r2, [sp, #8]
 8009f26:	00a3      	lsls	r3, r4, #2
 8009f28:	18d3      	adds	r3, r2, r3
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	d011      	beq.n	8009f54 <quorem+0x100>
 8009f30:	9e01      	ldr	r6, [sp, #4]
 8009f32:	0030      	movs	r0, r6
 8009f34:	b009      	add	sp, #36	; 0x24
 8009f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d104      	bne.n	8009f48 <quorem+0xf4>
 8009f3e:	3c01      	subs	r4, #1
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	3d04      	subs	r5, #4
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	d3f7      	bcc.n	8009f38 <quorem+0xe4>
 8009f48:	613c      	str	r4, [r7, #16]
 8009f4a:	e7cb      	b.n	8009ee4 <quorem+0x90>
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d104      	bne.n	8009f5c <quorem+0x108>
 8009f52:	3c01      	subs	r4, #1
 8009f54:	9a02      	ldr	r2, [sp, #8]
 8009f56:	3b04      	subs	r3, #4
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d3f7      	bcc.n	8009f4c <quorem+0xf8>
 8009f5c:	613c      	str	r4, [r7, #16]
 8009f5e:	e7e7      	b.n	8009f30 <quorem+0xdc>

08009f60 <_dtoa_r>:
 8009f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f62:	0016      	movs	r6, r2
 8009f64:	001f      	movs	r7, r3
 8009f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f68:	b09b      	sub	sp, #108	; 0x6c
 8009f6a:	9002      	str	r0, [sp, #8]
 8009f6c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8009f6e:	9606      	str	r6, [sp, #24]
 8009f70:	9707      	str	r7, [sp, #28]
 8009f72:	2c00      	cmp	r4, #0
 8009f74:	d108      	bne.n	8009f88 <_dtoa_r+0x28>
 8009f76:	2010      	movs	r0, #16
 8009f78:	f7fe f8a2 	bl	80080c0 <malloc>
 8009f7c:	9b02      	ldr	r3, [sp, #8]
 8009f7e:	6258      	str	r0, [r3, #36]	; 0x24
 8009f80:	6044      	str	r4, [r0, #4]
 8009f82:	6084      	str	r4, [r0, #8]
 8009f84:	6004      	str	r4, [r0, #0]
 8009f86:	60c4      	str	r4, [r0, #12]
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	6819      	ldr	r1, [r3, #0]
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	d00b      	beq.n	8009faa <_dtoa_r+0x4a>
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	2301      	movs	r3, #1
 8009f96:	4093      	lsls	r3, r2
 8009f98:	604a      	str	r2, [r1, #4]
 8009f9a:	608b      	str	r3, [r1, #8]
 8009f9c:	9802      	ldr	r0, [sp, #8]
 8009f9e:	f001 f956 	bl	800b24e <_Bfree>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	da20      	bge.n	8009ff0 <_dtoa_r+0x90>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	007b      	lsls	r3, r7, #1
 8009fb4:	085b      	lsrs	r3, r3, #1
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	9c07      	ldr	r4, [sp, #28]
 8009fba:	4bb2      	ldr	r3, [pc, #712]	; (800a284 <_dtoa_r+0x324>)
 8009fbc:	0022      	movs	r2, r4
 8009fbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fc0:	401a      	ands	r2, r3
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d117      	bne.n	8009ff6 <_dtoa_r+0x96>
 8009fc6:	4bb0      	ldr	r3, [pc, #704]	; (800a288 <_dtoa_r+0x328>)
 8009fc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	9b06      	ldr	r3, [sp, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d103      	bne.n	8009fda <_dtoa_r+0x7a>
 8009fd2:	0324      	lsls	r4, r4, #12
 8009fd4:	d101      	bne.n	8009fda <_dtoa_r+0x7a>
 8009fd6:	f000 fd87 	bl	800aae8 <_dtoa_r+0xb88>
 8009fda:	4bac      	ldr	r3, [pc, #688]	; (800a28c <_dtoa_r+0x32c>)
 8009fdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fde:	9308      	str	r3, [sp, #32]
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	d002      	beq.n	8009fea <_dtoa_r+0x8a>
 8009fe4:	4baa      	ldr	r3, [pc, #680]	; (800a290 <_dtoa_r+0x330>)
 8009fe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	9808      	ldr	r0, [sp, #32]
 8009fec:	b01b      	add	sp, #108	; 0x6c
 8009fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	e7e0      	b.n	8009fb8 <_dtoa_r+0x58>
 8009ff6:	9e06      	ldr	r6, [sp, #24]
 8009ff8:	9f07      	ldr	r7, [sp, #28]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	0030      	movs	r0, r6
 800a000:	0039      	movs	r1, r7
 800a002:	f7f6 fa19 	bl	8000438 <__aeabi_dcmpeq>
 800a006:	1e05      	subs	r5, r0, #0
 800a008:	d00b      	beq.n	800a022 <_dtoa_r+0xc2>
 800a00a:	2301      	movs	r3, #1
 800a00c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	4ba0      	ldr	r3, [pc, #640]	; (800a294 <_dtoa_r+0x334>)
 800a012:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a014:	9308      	str	r3, [sp, #32]
 800a016:	2a00      	cmp	r2, #0
 800a018:	d0e7      	beq.n	8009fea <_dtoa_r+0x8a>
 800a01a:	4a9f      	ldr	r2, [pc, #636]	; (800a298 <_dtoa_r+0x338>)
 800a01c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800a01e:	600a      	str	r2, [r1, #0]
 800a020:	e7e3      	b.n	8009fea <_dtoa_r+0x8a>
 800a022:	ab18      	add	r3, sp, #96	; 0x60
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	ab19      	add	r3, sp, #100	; 0x64
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	0032      	movs	r2, r6
 800a02c:	003b      	movs	r3, r7
 800a02e:	9802      	ldr	r0, [sp, #8]
 800a030:	f001 fc18 	bl	800b864 <__d2b>
 800a034:	0063      	lsls	r3, r4, #1
 800a036:	9003      	str	r0, [sp, #12]
 800a038:	0d5b      	lsrs	r3, r3, #21
 800a03a:	d074      	beq.n	800a126 <_dtoa_r+0x1c6>
 800a03c:	033a      	lsls	r2, r7, #12
 800a03e:	4c97      	ldr	r4, [pc, #604]	; (800a29c <_dtoa_r+0x33c>)
 800a040:	0b12      	lsrs	r2, r2, #12
 800a042:	4314      	orrs	r4, r2
 800a044:	0021      	movs	r1, r4
 800a046:	4a96      	ldr	r2, [pc, #600]	; (800a2a0 <_dtoa_r+0x340>)
 800a048:	0030      	movs	r0, r6
 800a04a:	9516      	str	r5, [sp, #88]	; 0x58
 800a04c:	189e      	adds	r6, r3, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	4b94      	ldr	r3, [pc, #592]	; (800a2a4 <_dtoa_r+0x344>)
 800a052:	f7f7 fc15 	bl	8001880 <__aeabi_dsub>
 800a056:	4a94      	ldr	r2, [pc, #592]	; (800a2a8 <_dtoa_r+0x348>)
 800a058:	4b94      	ldr	r3, [pc, #592]	; (800a2ac <_dtoa_r+0x34c>)
 800a05a:	f7f7 f99f 	bl	800139c <__aeabi_dmul>
 800a05e:	4a94      	ldr	r2, [pc, #592]	; (800a2b0 <_dtoa_r+0x350>)
 800a060:	4b94      	ldr	r3, [pc, #592]	; (800a2b4 <_dtoa_r+0x354>)
 800a062:	f7f6 fa75 	bl	8000550 <__aeabi_dadd>
 800a066:	0004      	movs	r4, r0
 800a068:	0030      	movs	r0, r6
 800a06a:	000d      	movs	r5, r1
 800a06c:	f7f7 ffa2 	bl	8001fb4 <__aeabi_i2d>
 800a070:	4a91      	ldr	r2, [pc, #580]	; (800a2b8 <_dtoa_r+0x358>)
 800a072:	4b92      	ldr	r3, [pc, #584]	; (800a2bc <_dtoa_r+0x35c>)
 800a074:	f7f7 f992 	bl	800139c <__aeabi_dmul>
 800a078:	0002      	movs	r2, r0
 800a07a:	000b      	movs	r3, r1
 800a07c:	0020      	movs	r0, r4
 800a07e:	0029      	movs	r1, r5
 800a080:	f7f6 fa66 	bl	8000550 <__aeabi_dadd>
 800a084:	0004      	movs	r4, r0
 800a086:	000d      	movs	r5, r1
 800a088:	f7f7 ff5e 	bl	8001f48 <__aeabi_d2iz>
 800a08c:	2200      	movs	r2, #0
 800a08e:	0007      	movs	r7, r0
 800a090:	2300      	movs	r3, #0
 800a092:	0020      	movs	r0, r4
 800a094:	0029      	movs	r1, r5
 800a096:	f7f6 f9d5 	bl	8000444 <__aeabi_dcmplt>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d009      	beq.n	800a0b2 <_dtoa_r+0x152>
 800a09e:	0038      	movs	r0, r7
 800a0a0:	f7f7 ff88 	bl	8001fb4 <__aeabi_i2d>
 800a0a4:	002b      	movs	r3, r5
 800a0a6:	0022      	movs	r2, r4
 800a0a8:	f7f6 f9c6 	bl	8000438 <__aeabi_dcmpeq>
 800a0ac:	4243      	negs	r3, r0
 800a0ae:	4158      	adcs	r0, r3
 800a0b0:	1a3f      	subs	r7, r7, r0
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	9314      	str	r3, [sp, #80]	; 0x50
 800a0b6:	2f16      	cmp	r7, #22
 800a0b8:	d80d      	bhi.n	800a0d6 <_dtoa_r+0x176>
 800a0ba:	4981      	ldr	r1, [pc, #516]	; (800a2c0 <_dtoa_r+0x360>)
 800a0bc:	00fb      	lsls	r3, r7, #3
 800a0be:	18c9      	adds	r1, r1, r3
 800a0c0:	6808      	ldr	r0, [r1, #0]
 800a0c2:	6849      	ldr	r1, [r1, #4]
 800a0c4:	9a06      	ldr	r2, [sp, #24]
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	f7f6 f9d0 	bl	800046c <__aeabi_dcmpgt>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d046      	beq.n	800a15e <_dtoa_r+0x1fe>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	3f01      	subs	r7, #1
 800a0d4:	9314      	str	r3, [sp, #80]	; 0x50
 800a0d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a0d8:	1b9e      	subs	r6, r3, r6
 800a0da:	2300      	movs	r3, #0
 800a0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0de:	0033      	movs	r3, r6
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e4:	d504      	bpl.n	800a0f0 <_dtoa_r+0x190>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	db36      	blt.n	800a162 <_dtoa_r+0x202>
 800a0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f6:	9711      	str	r7, [sp, #68]	; 0x44
 800a0f8:	19db      	adds	r3, r3, r7
 800a0fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a102:	2401      	movs	r4, #1
 800a104:	2b09      	cmp	r3, #9
 800a106:	d900      	bls.n	800a10a <_dtoa_r+0x1aa>
 800a108:	e084      	b.n	800a214 <_dtoa_r+0x2b4>
 800a10a:	2b05      	cmp	r3, #5
 800a10c:	dd02      	ble.n	800a114 <_dtoa_r+0x1b4>
 800a10e:	2400      	movs	r4, #0
 800a110:	3b04      	subs	r3, #4
 800a112:	9320      	str	r3, [sp, #128]	; 0x80
 800a114:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a116:	1e98      	subs	r0, r3, #2
 800a118:	2803      	cmp	r0, #3
 800a11a:	d900      	bls.n	800a11e <_dtoa_r+0x1be>
 800a11c:	e084      	b.n	800a228 <_dtoa_r+0x2c8>
 800a11e:	f7f5 fffb 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a122:	7775      	.short	0x7775
 800a124:	6a28      	.short	0x6a28
 800a126:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a128:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a12a:	189e      	adds	r6, r3, r2
 800a12c:	4b65      	ldr	r3, [pc, #404]	; (800a2c4 <_dtoa_r+0x364>)
 800a12e:	18f2      	adds	r2, r6, r3
 800a130:	2a20      	cmp	r2, #32
 800a132:	dd0f      	ble.n	800a154 <_dtoa_r+0x1f4>
 800a134:	2340      	movs	r3, #64	; 0x40
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	409c      	lsls	r4, r3
 800a13a:	4b63      	ldr	r3, [pc, #396]	; (800a2c8 <_dtoa_r+0x368>)
 800a13c:	9806      	ldr	r0, [sp, #24]
 800a13e:	18f3      	adds	r3, r6, r3
 800a140:	40d8      	lsrs	r0, r3
 800a142:	4320      	orrs	r0, r4
 800a144:	f7f7 ff70 	bl	8002028 <__aeabi_ui2d>
 800a148:	2301      	movs	r3, #1
 800a14a:	4c60      	ldr	r4, [pc, #384]	; (800a2cc <_dtoa_r+0x36c>)
 800a14c:	3e01      	subs	r6, #1
 800a14e:	1909      	adds	r1, r1, r4
 800a150:	9316      	str	r3, [sp, #88]	; 0x58
 800a152:	e77c      	b.n	800a04e <_dtoa_r+0xee>
 800a154:	2320      	movs	r3, #32
 800a156:	9806      	ldr	r0, [sp, #24]
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	4098      	lsls	r0, r3
 800a15c:	e7f2      	b.n	800a144 <_dtoa_r+0x1e4>
 800a15e:	9014      	str	r0, [sp, #80]	; 0x50
 800a160:	e7b9      	b.n	800a0d6 <_dtoa_r+0x176>
 800a162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a164:	1bdb      	subs	r3, r3, r7
 800a166:	930a      	str	r3, [sp, #40]	; 0x28
 800a168:	427b      	negs	r3, r7
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	2300      	movs	r3, #0
 800a16e:	9311      	str	r3, [sp, #68]	; 0x44
 800a170:	e7c6      	b.n	800a100 <_dtoa_r+0x1a0>
 800a172:	2301      	movs	r3, #1
 800a174:	930d      	str	r3, [sp, #52]	; 0x34
 800a176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dd59      	ble.n	800a230 <_dtoa_r+0x2d0>
 800a17c:	930c      	str	r3, [sp, #48]	; 0x30
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	9a02      	ldr	r2, [sp, #8]
 800a182:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800a184:	2200      	movs	r2, #0
 800a186:	606a      	str	r2, [r5, #4]
 800a188:	3204      	adds	r2, #4
 800a18a:	0010      	movs	r0, r2
 800a18c:	3014      	adds	r0, #20
 800a18e:	6869      	ldr	r1, [r5, #4]
 800a190:	4298      	cmp	r0, r3
 800a192:	d952      	bls.n	800a23a <_dtoa_r+0x2da>
 800a194:	9802      	ldr	r0, [sp, #8]
 800a196:	f001 f822 	bl	800b1de <_Balloc>
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	6028      	str	r0, [r5, #0]
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	2b0e      	cmp	r3, #14
 800a1a8:	d900      	bls.n	800a1ac <_dtoa_r+0x24c>
 800a1aa:	e10a      	b.n	800a3c2 <_dtoa_r+0x462>
 800a1ac:	2c00      	cmp	r4, #0
 800a1ae:	d100      	bne.n	800a1b2 <_dtoa_r+0x252>
 800a1b0:	e107      	b.n	800a3c2 <_dtoa_r+0x462>
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	9c07      	ldr	r4, [sp, #28]
 800a1b6:	9312      	str	r3, [sp, #72]	; 0x48
 800a1b8:	9413      	str	r4, [sp, #76]	; 0x4c
 800a1ba:	2f00      	cmp	r7, #0
 800a1bc:	dc00      	bgt.n	800a1c0 <_dtoa_r+0x260>
 800a1be:	e089      	b.n	800a2d4 <_dtoa_r+0x374>
 800a1c0:	210f      	movs	r1, #15
 800a1c2:	003a      	movs	r2, r7
 800a1c4:	4b3e      	ldr	r3, [pc, #248]	; (800a2c0 <_dtoa_r+0x360>)
 800a1c6:	400a      	ands	r2, r1
 800a1c8:	00d2      	lsls	r2, r2, #3
 800a1ca:	189b      	adds	r3, r3, r2
 800a1cc:	681d      	ldr	r5, [r3, #0]
 800a1ce:	685e      	ldr	r6, [r3, #4]
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	113c      	asrs	r4, r7, #4
 800a1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d6:	06e3      	lsls	r3, r4, #27
 800a1d8:	d50b      	bpl.n	800a1f2 <_dtoa_r+0x292>
 800a1da:	4b3d      	ldr	r3, [pc, #244]	; (800a2d0 <_dtoa_r+0x370>)
 800a1dc:	400c      	ands	r4, r1
 800a1de:	6a1a      	ldr	r2, [r3, #32]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a1e6:	f7f6 fccf 	bl	8000b88 <__aeabi_ddiv>
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	9006      	str	r0, [sp, #24]
 800a1ee:	9107      	str	r1, [sp, #28]
 800a1f0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e03a      	b.n	800a26c <_dtoa_r+0x30c>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	930d      	str	r3, [sp, #52]	; 0x34
 800a1fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1fc:	18fb      	adds	r3, r7, r3
 800a1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a200:	3301      	adds	r3, #1
 800a202:	9309      	str	r3, [sp, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	dcbb      	bgt.n	800a180 <_dtoa_r+0x220>
 800a208:	2301      	movs	r3, #1
 800a20a:	e7b9      	b.n	800a180 <_dtoa_r+0x220>
 800a20c:	2300      	movs	r3, #0
 800a20e:	e7b1      	b.n	800a174 <_dtoa_r+0x214>
 800a210:	2300      	movs	r3, #0
 800a212:	e7f1      	b.n	800a1f8 <_dtoa_r+0x298>
 800a214:	2300      	movs	r3, #0
 800a216:	940d      	str	r4, [sp, #52]	; 0x34
 800a218:	9320      	str	r3, [sp, #128]	; 0x80
 800a21a:	3b01      	subs	r3, #1
 800a21c:	2200      	movs	r2, #0
 800a21e:	930c      	str	r3, [sp, #48]	; 0x30
 800a220:	9309      	str	r3, [sp, #36]	; 0x24
 800a222:	3313      	adds	r3, #19
 800a224:	9221      	str	r2, [sp, #132]	; 0x84
 800a226:	e7ab      	b.n	800a180 <_dtoa_r+0x220>
 800a228:	2301      	movs	r3, #1
 800a22a:	930d      	str	r3, [sp, #52]	; 0x34
 800a22c:	3b02      	subs	r3, #2
 800a22e:	e7f5      	b.n	800a21c <_dtoa_r+0x2bc>
 800a230:	2301      	movs	r3, #1
 800a232:	930c      	str	r3, [sp, #48]	; 0x30
 800a234:	9309      	str	r3, [sp, #36]	; 0x24
 800a236:	001a      	movs	r2, r3
 800a238:	e7f4      	b.n	800a224 <_dtoa_r+0x2c4>
 800a23a:	3101      	adds	r1, #1
 800a23c:	6069      	str	r1, [r5, #4]
 800a23e:	0052      	lsls	r2, r2, #1
 800a240:	e7a3      	b.n	800a18a <_dtoa_r+0x22a>
 800a242:	2301      	movs	r3, #1
 800a244:	421c      	tst	r4, r3
 800a246:	d00e      	beq.n	800a266 <_dtoa_r+0x306>
 800a248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a24a:	4a21      	ldr	r2, [pc, #132]	; (800a2d0 <_dtoa_r+0x370>)
 800a24c:	3301      	adds	r3, #1
 800a24e:	930e      	str	r3, [sp, #56]	; 0x38
 800a250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a252:	0028      	movs	r0, r5
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	189b      	adds	r3, r3, r2
 800a258:	0031      	movs	r1, r6
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f7f7 f89d 	bl	800139c <__aeabi_dmul>
 800a262:	0005      	movs	r5, r0
 800a264:	000e      	movs	r6, r1
 800a266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a268:	1064      	asrs	r4, r4, #1
 800a26a:	3301      	adds	r3, #1
 800a26c:	9310      	str	r3, [sp, #64]	; 0x40
 800a26e:	2c00      	cmp	r4, #0
 800a270:	d1e7      	bne.n	800a242 <_dtoa_r+0x2e2>
 800a272:	9806      	ldr	r0, [sp, #24]
 800a274:	9907      	ldr	r1, [sp, #28]
 800a276:	002a      	movs	r2, r5
 800a278:	0033      	movs	r3, r6
 800a27a:	f7f6 fc85 	bl	8000b88 <__aeabi_ddiv>
 800a27e:	9006      	str	r0, [sp, #24]
 800a280:	9107      	str	r1, [sp, #28]
 800a282:	e042      	b.n	800a30a <_dtoa_r+0x3aa>
 800a284:	7ff00000 	.word	0x7ff00000
 800a288:	0000270f 	.word	0x0000270f
 800a28c:	0800c221 	.word	0x0800c221
 800a290:	0800c224 	.word	0x0800c224
 800a294:	0800c198 	.word	0x0800c198
 800a298:	0800c199 	.word	0x0800c199
 800a29c:	3ff00000 	.word	0x3ff00000
 800a2a0:	fffffc01 	.word	0xfffffc01
 800a2a4:	3ff80000 	.word	0x3ff80000
 800a2a8:	636f4361 	.word	0x636f4361
 800a2ac:	3fd287a7 	.word	0x3fd287a7
 800a2b0:	8b60c8b3 	.word	0x8b60c8b3
 800a2b4:	3fc68a28 	.word	0x3fc68a28
 800a2b8:	509f79fb 	.word	0x509f79fb
 800a2bc:	3fd34413 	.word	0x3fd34413
 800a2c0:	0800c258 	.word	0x0800c258
 800a2c4:	00000432 	.word	0x00000432
 800a2c8:	00000412 	.word	0x00000412
 800a2cc:	fe100000 	.word	0xfe100000
 800a2d0:	0800c230 	.word	0x0800c230
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	d016      	beq.n	800a30a <_dtoa_r+0x3aa>
 800a2dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a2de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a2e0:	427c      	negs	r4, r7
 800a2e2:	330d      	adds	r3, #13
 800a2e4:	4023      	ands	r3, r4
 800a2e6:	4ace      	ldr	r2, [pc, #824]	; (800a620 <_dtoa_r+0x6c0>)
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	18d3      	adds	r3, r2, r3
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f7f7 f854 	bl	800139c <__aeabi_dmul>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	2601      	movs	r6, #1
 800a2f8:	001d      	movs	r5, r3
 800a2fa:	9006      	str	r0, [sp, #24]
 800a2fc:	9107      	str	r1, [sp, #28]
 800a2fe:	1124      	asrs	r4, r4, #4
 800a300:	2c00      	cmp	r4, #0
 800a302:	d000      	beq.n	800a306 <_dtoa_r+0x3a6>
 800a304:	e08c      	b.n	800a420 <_dtoa_r+0x4c0>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1b9      	bne.n	800a27e <_dtoa_r+0x31e>
 800a30a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d100      	bne.n	800a312 <_dtoa_r+0x3b2>
 800a310:	e096      	b.n	800a440 <_dtoa_r+0x4e0>
 800a312:	9c06      	ldr	r4, [sp, #24]
 800a314:	9d07      	ldr	r5, [sp, #28]
 800a316:	2200      	movs	r2, #0
 800a318:	4bc2      	ldr	r3, [pc, #776]	; (800a624 <_dtoa_r+0x6c4>)
 800a31a:	0020      	movs	r0, r4
 800a31c:	0029      	movs	r1, r5
 800a31e:	f7f6 f891 	bl	8000444 <__aeabi_dcmplt>
 800a322:	2800      	cmp	r0, #0
 800a324:	d100      	bne.n	800a328 <_dtoa_r+0x3c8>
 800a326:	e08b      	b.n	800a440 <_dtoa_r+0x4e0>
 800a328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d100      	bne.n	800a330 <_dtoa_r+0x3d0>
 800a32e:	e087      	b.n	800a440 <_dtoa_r+0x4e0>
 800a330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a332:	2b00      	cmp	r3, #0
 800a334:	dd41      	ble.n	800a3ba <_dtoa_r+0x45a>
 800a336:	4bbc      	ldr	r3, [pc, #752]	; (800a628 <_dtoa_r+0x6c8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	0020      	movs	r0, r4
 800a33c:	0029      	movs	r1, r5
 800a33e:	f7f7 f82d 	bl	800139c <__aeabi_dmul>
 800a342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a344:	9006      	str	r0, [sp, #24]
 800a346:	9107      	str	r1, [sp, #28]
 800a348:	3301      	adds	r3, #1
 800a34a:	930e      	str	r3, [sp, #56]	; 0x38
 800a34c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a34e:	1e7e      	subs	r6, r7, #1
 800a350:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a352:	9310      	str	r3, [sp, #64]	; 0x40
 800a354:	f7f7 fe2e 	bl	8001fb4 <__aeabi_i2d>
 800a358:	9a06      	ldr	r2, [sp, #24]
 800a35a:	9b07      	ldr	r3, [sp, #28]
 800a35c:	f7f7 f81e 	bl	800139c <__aeabi_dmul>
 800a360:	2200      	movs	r2, #0
 800a362:	4bb2      	ldr	r3, [pc, #712]	; (800a62c <_dtoa_r+0x6cc>)
 800a364:	f7f6 f8f4 	bl	8000550 <__aeabi_dadd>
 800a368:	4ab1      	ldr	r2, [pc, #708]	; (800a630 <_dtoa_r+0x6d0>)
 800a36a:	900e      	str	r0, [sp, #56]	; 0x38
 800a36c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a36e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a370:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a372:	4694      	mov	ip, r2
 800a374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a376:	4463      	add	r3, ip
 800a378:	9315      	str	r3, [sp, #84]	; 0x54
 800a37a:	001d      	movs	r5, r3
 800a37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d161      	bne.n	800a446 <_dtoa_r+0x4e6>
 800a382:	9806      	ldr	r0, [sp, #24]
 800a384:	9907      	ldr	r1, [sp, #28]
 800a386:	2200      	movs	r2, #0
 800a388:	4baa      	ldr	r3, [pc, #680]	; (800a634 <_dtoa_r+0x6d4>)
 800a38a:	f7f7 fa79 	bl	8001880 <__aeabi_dsub>
 800a38e:	0022      	movs	r2, r4
 800a390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a392:	9006      	str	r0, [sp, #24]
 800a394:	9107      	str	r1, [sp, #28]
 800a396:	f7f6 f869 	bl	800046c <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d000      	beq.n	800a3a0 <_dtoa_r+0x440>
 800a39e:	e2a8      	b.n	800a8f2 <_dtoa_r+0x992>
 800a3a0:	48a5      	ldr	r0, [pc, #660]	; (800a638 <_dtoa_r+0x6d8>)
 800a3a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3a4:	4684      	mov	ip, r0
 800a3a6:	4461      	add	r1, ip
 800a3a8:	000b      	movs	r3, r1
 800a3aa:	9806      	ldr	r0, [sp, #24]
 800a3ac:	9907      	ldr	r1, [sp, #28]
 800a3ae:	0022      	movs	r2, r4
 800a3b0:	f7f6 f848 	bl	8000444 <__aeabi_dcmplt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d000      	beq.n	800a3ba <_dtoa_r+0x45a>
 800a3b8:	e295      	b.n	800a8e6 <_dtoa_r+0x986>
 800a3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a3be:	9306      	str	r3, [sp, #24]
 800a3c0:	9407      	str	r4, [sp, #28]
 800a3c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	da00      	bge.n	800a3ca <_dtoa_r+0x46a>
 800a3c8:	e15c      	b.n	800a684 <_dtoa_r+0x724>
 800a3ca:	2f0e      	cmp	r7, #14
 800a3cc:	dd00      	ble.n	800a3d0 <_dtoa_r+0x470>
 800a3ce:	e159      	b.n	800a684 <_dtoa_r+0x724>
 800a3d0:	4b93      	ldr	r3, [pc, #588]	; (800a620 <_dtoa_r+0x6c0>)
 800a3d2:	00fa      	lsls	r2, r7, #3
 800a3d4:	189b      	adds	r3, r3, r2
 800a3d6:	685c      	ldr	r4, [r3, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	9405      	str	r4, [sp, #20]
 800a3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db00      	blt.n	800a3e6 <_dtoa_r+0x486>
 800a3e4:	e0d8      	b.n	800a598 <_dtoa_r+0x638>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd00      	ble.n	800a3ee <_dtoa_r+0x48e>
 800a3ec:	e0d4      	b.n	800a598 <_dtoa_r+0x638>
 800a3ee:	d000      	beq.n	800a3f2 <_dtoa_r+0x492>
 800a3f0:	e27d      	b.n	800a8ee <_dtoa_r+0x98e>
 800a3f2:	9804      	ldr	r0, [sp, #16]
 800a3f4:	9905      	ldr	r1, [sp, #20]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4b8e      	ldr	r3, [pc, #568]	; (800a634 <_dtoa_r+0x6d4>)
 800a3fa:	f7f6 ffcf 	bl	800139c <__aeabi_dmul>
 800a3fe:	9a06      	ldr	r2, [sp, #24]
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	f7f6 f83d 	bl	8000480 <__aeabi_dcmpge>
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	001e      	movs	r6, r3
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d000      	beq.n	800a412 <_dtoa_r+0x4b2>
 800a410:	e24f      	b.n	800a8b2 <_dtoa_r+0x952>
 800a412:	9b08      	ldr	r3, [sp, #32]
 800a414:	9a08      	ldr	r2, [sp, #32]
 800a416:	1c5d      	adds	r5, r3, #1
 800a418:	2331      	movs	r3, #49	; 0x31
 800a41a:	3701      	adds	r7, #1
 800a41c:	7013      	strb	r3, [r2, #0]
 800a41e:	e24b      	b.n	800a8b8 <_dtoa_r+0x958>
 800a420:	4234      	tst	r4, r6
 800a422:	d00a      	beq.n	800a43a <_dtoa_r+0x4da>
 800a424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a426:	4a85      	ldr	r2, [pc, #532]	; (800a63c <_dtoa_r+0x6dc>)
 800a428:	3301      	adds	r3, #1
 800a42a:	930e      	str	r3, [sp, #56]	; 0x38
 800a42c:	00eb      	lsls	r3, r5, #3
 800a42e:	189b      	adds	r3, r3, r2
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f7f6 ffb2 	bl	800139c <__aeabi_dmul>
 800a438:	0033      	movs	r3, r6
 800a43a:	1064      	asrs	r4, r4, #1
 800a43c:	3501      	adds	r5, #1
 800a43e:	e75f      	b.n	800a300 <_dtoa_r+0x3a0>
 800a440:	003e      	movs	r6, r7
 800a442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a444:	e784      	b.n	800a350 <_dtoa_r+0x3f0>
 800a446:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a448:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	4b74      	ldr	r3, [pc, #464]	; (800a620 <_dtoa_r+0x6c0>)
 800a44e:	00d2      	lsls	r2, r2, #3
 800a450:	189b      	adds	r3, r3, r2
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	2900      	cmp	r1, #0
 800a458:	d049      	beq.n	800a4ee <_dtoa_r+0x58e>
 800a45a:	2000      	movs	r0, #0
 800a45c:	4978      	ldr	r1, [pc, #480]	; (800a640 <_dtoa_r+0x6e0>)
 800a45e:	f7f6 fb93 	bl	8000b88 <__aeabi_ddiv>
 800a462:	002b      	movs	r3, r5
 800a464:	0022      	movs	r2, r4
 800a466:	f7f7 fa0b 	bl	8001880 <__aeabi_dsub>
 800a46a:	9b08      	ldr	r3, [sp, #32]
 800a46c:	900e      	str	r0, [sp, #56]	; 0x38
 800a46e:	910f      	str	r1, [sp, #60]	; 0x3c
 800a470:	9315      	str	r3, [sp, #84]	; 0x54
 800a472:	9806      	ldr	r0, [sp, #24]
 800a474:	9907      	ldr	r1, [sp, #28]
 800a476:	f7f7 fd67 	bl	8001f48 <__aeabi_d2iz>
 800a47a:	0004      	movs	r4, r0
 800a47c:	f7f7 fd9a 	bl	8001fb4 <__aeabi_i2d>
 800a480:	0002      	movs	r2, r0
 800a482:	000b      	movs	r3, r1
 800a484:	9806      	ldr	r0, [sp, #24]
 800a486:	9907      	ldr	r1, [sp, #28]
 800a488:	f7f7 f9fa 	bl	8001880 <__aeabi_dsub>
 800a48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a48e:	3430      	adds	r4, #48	; 0x30
 800a490:	1c5d      	adds	r5, r3, #1
 800a492:	701c      	strb	r4, [r3, #0]
 800a494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a498:	9006      	str	r0, [sp, #24]
 800a49a:	9107      	str	r1, [sp, #28]
 800a49c:	f7f5 ffd2 	bl	8000444 <__aeabi_dcmplt>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d16c      	bne.n	800a57e <_dtoa_r+0x61e>
 800a4a4:	9a06      	ldr	r2, [sp, #24]
 800a4a6:	9b07      	ldr	r3, [sp, #28]
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	495e      	ldr	r1, [pc, #376]	; (800a624 <_dtoa_r+0x6c4>)
 800a4ac:	f7f7 f9e8 	bl	8001880 <__aeabi_dsub>
 800a4b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b4:	f7f5 ffc6 	bl	8000444 <__aeabi_dcmplt>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d000      	beq.n	800a4be <_dtoa_r+0x55e>
 800a4bc:	e0c3      	b.n	800a646 <_dtoa_r+0x6e6>
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4c2:	1aeb      	subs	r3, r5, r3
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	dc00      	bgt.n	800a4ca <_dtoa_r+0x56a>
 800a4c8:	e777      	b.n	800a3ba <_dtoa_r+0x45a>
 800a4ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4b55      	ldr	r3, [pc, #340]	; (800a628 <_dtoa_r+0x6c8>)
 800a4d2:	f7f6 ff63 	bl	800139c <__aeabi_dmul>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	900e      	str	r0, [sp, #56]	; 0x38
 800a4da:	910f      	str	r1, [sp, #60]	; 0x3c
 800a4dc:	9806      	ldr	r0, [sp, #24]
 800a4de:	9907      	ldr	r1, [sp, #28]
 800a4e0:	4b51      	ldr	r3, [pc, #324]	; (800a628 <_dtoa_r+0x6c8>)
 800a4e2:	f7f6 ff5b 	bl	800139c <__aeabi_dmul>
 800a4e6:	9515      	str	r5, [sp, #84]	; 0x54
 800a4e8:	9006      	str	r0, [sp, #24]
 800a4ea:	9107      	str	r1, [sp, #28]
 800a4ec:	e7c1      	b.n	800a472 <_dtoa_r+0x512>
 800a4ee:	0020      	movs	r0, r4
 800a4f0:	0029      	movs	r1, r5
 800a4f2:	f7f6 ff53 	bl	800139c <__aeabi_dmul>
 800a4f6:	9c08      	ldr	r4, [sp, #32]
 800a4f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4fa:	0023      	movs	r3, r4
 800a4fc:	4694      	mov	ip, r2
 800a4fe:	900e      	str	r0, [sp, #56]	; 0x38
 800a500:	910f      	str	r1, [sp, #60]	; 0x3c
 800a502:	4463      	add	r3, ip
 800a504:	9315      	str	r3, [sp, #84]	; 0x54
 800a506:	9806      	ldr	r0, [sp, #24]
 800a508:	9907      	ldr	r1, [sp, #28]
 800a50a:	f7f7 fd1d 	bl	8001f48 <__aeabi_d2iz>
 800a50e:	0005      	movs	r5, r0
 800a510:	f7f7 fd50 	bl	8001fb4 <__aeabi_i2d>
 800a514:	000b      	movs	r3, r1
 800a516:	0002      	movs	r2, r0
 800a518:	9806      	ldr	r0, [sp, #24]
 800a51a:	9907      	ldr	r1, [sp, #28]
 800a51c:	f7f7 f9b0 	bl	8001880 <__aeabi_dsub>
 800a520:	3530      	adds	r5, #48	; 0x30
 800a522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a524:	7025      	strb	r5, [r4, #0]
 800a526:	3401      	adds	r4, #1
 800a528:	9006      	str	r0, [sp, #24]
 800a52a:	9107      	str	r1, [sp, #28]
 800a52c:	42a3      	cmp	r3, r4
 800a52e:	d12a      	bne.n	800a586 <_dtoa_r+0x626>
 800a530:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a532:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a534:	9a08      	ldr	r2, [sp, #32]
 800a536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a538:	4694      	mov	ip, r2
 800a53a:	4463      	add	r3, ip
 800a53c:	2200      	movs	r2, #0
 800a53e:	001d      	movs	r5, r3
 800a540:	4b3f      	ldr	r3, [pc, #252]	; (800a640 <_dtoa_r+0x6e0>)
 800a542:	f7f6 f805 	bl	8000550 <__aeabi_dadd>
 800a546:	0002      	movs	r2, r0
 800a548:	000b      	movs	r3, r1
 800a54a:	9806      	ldr	r0, [sp, #24]
 800a54c:	9907      	ldr	r1, [sp, #28]
 800a54e:	f7f5 ff8d 	bl	800046c <__aeabi_dcmpgt>
 800a552:	2800      	cmp	r0, #0
 800a554:	d000      	beq.n	800a558 <_dtoa_r+0x5f8>
 800a556:	e076      	b.n	800a646 <_dtoa_r+0x6e6>
 800a558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a55c:	2000      	movs	r0, #0
 800a55e:	4938      	ldr	r1, [pc, #224]	; (800a640 <_dtoa_r+0x6e0>)
 800a560:	f7f7 f98e 	bl	8001880 <__aeabi_dsub>
 800a564:	0002      	movs	r2, r0
 800a566:	000b      	movs	r3, r1
 800a568:	9806      	ldr	r0, [sp, #24]
 800a56a:	9907      	ldr	r1, [sp, #28]
 800a56c:	f7f5 ff6a 	bl	8000444 <__aeabi_dcmplt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d100      	bne.n	800a576 <_dtoa_r+0x616>
 800a574:	e721      	b.n	800a3ba <_dtoa_r+0x45a>
 800a576:	1e6b      	subs	r3, r5, #1
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	2a30      	cmp	r2, #48	; 0x30
 800a57c:	d001      	beq.n	800a582 <_dtoa_r+0x622>
 800a57e:	0037      	movs	r7, r6
 800a580:	e03f      	b.n	800a602 <_dtoa_r+0x6a2>
 800a582:	001d      	movs	r5, r3
 800a584:	e7f7      	b.n	800a576 <_dtoa_r+0x616>
 800a586:	9806      	ldr	r0, [sp, #24]
 800a588:	9907      	ldr	r1, [sp, #28]
 800a58a:	2200      	movs	r2, #0
 800a58c:	4b26      	ldr	r3, [pc, #152]	; (800a628 <_dtoa_r+0x6c8>)
 800a58e:	f7f6 ff05 	bl	800139c <__aeabi_dmul>
 800a592:	9006      	str	r0, [sp, #24]
 800a594:	9107      	str	r1, [sp, #28]
 800a596:	e7b6      	b.n	800a506 <_dtoa_r+0x5a6>
 800a598:	9e08      	ldr	r6, [sp, #32]
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	9b05      	ldr	r3, [sp, #20]
 800a59e:	9806      	ldr	r0, [sp, #24]
 800a5a0:	9907      	ldr	r1, [sp, #28]
 800a5a2:	f7f6 faf1 	bl	8000b88 <__aeabi_ddiv>
 800a5a6:	f7f7 fccf 	bl	8001f48 <__aeabi_d2iz>
 800a5aa:	0004      	movs	r4, r0
 800a5ac:	f7f7 fd02 	bl	8001fb4 <__aeabi_i2d>
 800a5b0:	9a04      	ldr	r2, [sp, #16]
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	f7f6 fef2 	bl	800139c <__aeabi_dmul>
 800a5b8:	0002      	movs	r2, r0
 800a5ba:	000b      	movs	r3, r1
 800a5bc:	9806      	ldr	r0, [sp, #24]
 800a5be:	9907      	ldr	r1, [sp, #28]
 800a5c0:	f7f7 f95e 	bl	8001880 <__aeabi_dsub>
 800a5c4:	0023      	movs	r3, r4
 800a5c6:	3330      	adds	r3, #48	; 0x30
 800a5c8:	7033      	strb	r3, [r6, #0]
 800a5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5cc:	9b08      	ldr	r3, [sp, #32]
 800a5ce:	1c75      	adds	r5, r6, #1
 800a5d0:	1aeb      	subs	r3, r5, r3
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d148      	bne.n	800a668 <_dtoa_r+0x708>
 800a5d6:	0002      	movs	r2, r0
 800a5d8:	000b      	movs	r3, r1
 800a5da:	f7f5 ffb9 	bl	8000550 <__aeabi_dadd>
 800a5de:	9a04      	ldr	r2, [sp, #16]
 800a5e0:	9b05      	ldr	r3, [sp, #20]
 800a5e2:	9006      	str	r0, [sp, #24]
 800a5e4:	9107      	str	r1, [sp, #28]
 800a5e6:	f7f5 ff41 	bl	800046c <__aeabi_dcmpgt>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d12a      	bne.n	800a644 <_dtoa_r+0x6e4>
 800a5ee:	9a04      	ldr	r2, [sp, #16]
 800a5f0:	9b05      	ldr	r3, [sp, #20]
 800a5f2:	9806      	ldr	r0, [sp, #24]
 800a5f4:	9907      	ldr	r1, [sp, #28]
 800a5f6:	f7f5 ff1f 	bl	8000438 <__aeabi_dcmpeq>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d001      	beq.n	800a602 <_dtoa_r+0x6a2>
 800a5fe:	07e3      	lsls	r3, r4, #31
 800a600:	d420      	bmi.n	800a644 <_dtoa_r+0x6e4>
 800a602:	9903      	ldr	r1, [sp, #12]
 800a604:	9802      	ldr	r0, [sp, #8]
 800a606:	f000 fe22 	bl	800b24e <_Bfree>
 800a60a:	2300      	movs	r3, #0
 800a60c:	702b      	strb	r3, [r5, #0]
 800a60e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a610:	3701      	adds	r7, #1
 800a612:	601f      	str	r7, [r3, #0]
 800a614:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a616:	2b00      	cmp	r3, #0
 800a618:	d100      	bne.n	800a61c <_dtoa_r+0x6bc>
 800a61a:	e4e6      	b.n	8009fea <_dtoa_r+0x8a>
 800a61c:	601d      	str	r5, [r3, #0]
 800a61e:	e4e4      	b.n	8009fea <_dtoa_r+0x8a>
 800a620:	0800c258 	.word	0x0800c258
 800a624:	3ff00000 	.word	0x3ff00000
 800a628:	40240000 	.word	0x40240000
 800a62c:	401c0000 	.word	0x401c0000
 800a630:	fcc00000 	.word	0xfcc00000
 800a634:	40140000 	.word	0x40140000
 800a638:	7cc00000 	.word	0x7cc00000
 800a63c:	0800c230 	.word	0x0800c230
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	003e      	movs	r6, r7
 800a646:	1e6b      	subs	r3, r5, #1
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	2a39      	cmp	r2, #57	; 0x39
 800a64c:	d106      	bne.n	800a65c <_dtoa_r+0x6fc>
 800a64e:	9a08      	ldr	r2, [sp, #32]
 800a650:	429a      	cmp	r2, r3
 800a652:	d107      	bne.n	800a664 <_dtoa_r+0x704>
 800a654:	2330      	movs	r3, #48	; 0x30
 800a656:	7013      	strb	r3, [r2, #0]
 800a658:	0013      	movs	r3, r2
 800a65a:	3601      	adds	r6, #1
 800a65c:	781a      	ldrb	r2, [r3, #0]
 800a65e:	3201      	adds	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e78c      	b.n	800a57e <_dtoa_r+0x61e>
 800a664:	001d      	movs	r5, r3
 800a666:	e7ee      	b.n	800a646 <_dtoa_r+0x6e6>
 800a668:	2200      	movs	r2, #0
 800a66a:	4ba4      	ldr	r3, [pc, #656]	; (800a8fc <_dtoa_r+0x99c>)
 800a66c:	f7f6 fe96 	bl	800139c <__aeabi_dmul>
 800a670:	2200      	movs	r2, #0
 800a672:	2300      	movs	r3, #0
 800a674:	9006      	str	r0, [sp, #24]
 800a676:	9107      	str	r1, [sp, #28]
 800a678:	002e      	movs	r6, r5
 800a67a:	f7f5 fedd 	bl	8000438 <__aeabi_dcmpeq>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d08b      	beq.n	800a59a <_dtoa_r+0x63a>
 800a682:	e7be      	b.n	800a602 <_dtoa_r+0x6a2>
 800a684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a686:	2a00      	cmp	r2, #0
 800a688:	d100      	bne.n	800a68c <_dtoa_r+0x72c>
 800a68a:	e0da      	b.n	800a842 <_dtoa_r+0x8e2>
 800a68c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a68e:	2a01      	cmp	r2, #1
 800a690:	dd00      	ble.n	800a694 <_dtoa_r+0x734>
 800a692:	e0bd      	b.n	800a810 <_dtoa_r+0x8b0>
 800a694:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a696:	2a00      	cmp	r2, #0
 800a698:	d100      	bne.n	800a69c <_dtoa_r+0x73c>
 800a69a:	e0b5      	b.n	800a808 <_dtoa_r+0x8a8>
 800a69c:	4a98      	ldr	r2, [pc, #608]	; (800a900 <_dtoa_r+0x9a0>)
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	9d04      	ldr	r5, [sp, #16]
 800a6a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	18d2      	adds	r2, r2, r3
 800a6aa:	920a      	str	r2, [sp, #40]	; 0x28
 800a6ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ae:	9802      	ldr	r0, [sp, #8]
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b4:	f000 fea9 	bl	800b40a <__i2b>
 800a6b8:	0006      	movs	r6, r0
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	dd0e      	ble.n	800a6dc <_dtoa_r+0x77c>
 800a6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	dd0b      	ble.n	800a6dc <_dtoa_r+0x77c>
 800a6c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6c6:	0023      	movs	r3, r4
 800a6c8:	4294      	cmp	r4, r2
 800a6ca:	dd00      	ble.n	800a6ce <_dtoa_r+0x76e>
 800a6cc:	0013      	movs	r3, r2
 800a6ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d0:	1ae4      	subs	r4, r4, r3
 800a6d2:	1ad2      	subs	r2, r2, r3
 800a6d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d01f      	beq.n	800a722 <_dtoa_r+0x7c2>
 800a6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d100      	bne.n	800a6ea <_dtoa_r+0x78a>
 800a6e8:	e0af      	b.n	800a84a <_dtoa_r+0x8ea>
 800a6ea:	2d00      	cmp	r5, #0
 800a6ec:	d011      	beq.n	800a712 <_dtoa_r+0x7b2>
 800a6ee:	0031      	movs	r1, r6
 800a6f0:	002a      	movs	r2, r5
 800a6f2:	9802      	ldr	r0, [sp, #8]
 800a6f4:	f000 ff22 	bl	800b53c <__pow5mult>
 800a6f8:	9a03      	ldr	r2, [sp, #12]
 800a6fa:	0001      	movs	r1, r0
 800a6fc:	0006      	movs	r6, r0
 800a6fe:	9802      	ldr	r0, [sp, #8]
 800a700:	f000 fe8c 	bl	800b41c <__multiply>
 800a704:	9903      	ldr	r1, [sp, #12]
 800a706:	9010      	str	r0, [sp, #64]	; 0x40
 800a708:	9802      	ldr	r0, [sp, #8]
 800a70a:	f000 fda0 	bl	800b24e <_Bfree>
 800a70e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a710:	9303      	str	r3, [sp, #12]
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	1b5a      	subs	r2, r3, r5
 800a716:	d004      	beq.n	800a722 <_dtoa_r+0x7c2>
 800a718:	9903      	ldr	r1, [sp, #12]
 800a71a:	9802      	ldr	r0, [sp, #8]
 800a71c:	f000 ff0e 	bl	800b53c <__pow5mult>
 800a720:	9003      	str	r0, [sp, #12]
 800a722:	2101      	movs	r1, #1
 800a724:	9802      	ldr	r0, [sp, #8]
 800a726:	f000 fe70 	bl	800b40a <__i2b>
 800a72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a72c:	9004      	str	r0, [sp, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d100      	bne.n	800a734 <_dtoa_r+0x7d4>
 800a732:	e1e3      	b.n	800aafc <_dtoa_r+0xb9c>
 800a734:	001a      	movs	r2, r3
 800a736:	0001      	movs	r1, r0
 800a738:	9802      	ldr	r0, [sp, #8]
 800a73a:	f000 feff 	bl	800b53c <__pow5mult>
 800a73e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a740:	9004      	str	r0, [sp, #16]
 800a742:	2b01      	cmp	r3, #1
 800a744:	dd00      	ble.n	800a748 <_dtoa_r+0x7e8>
 800a746:	e082      	b.n	800a84e <_dtoa_r+0x8ee>
 800a748:	2500      	movs	r5, #0
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	42ab      	cmp	r3, r5
 800a74e:	d10e      	bne.n	800a76e <_dtoa_r+0x80e>
 800a750:	9b07      	ldr	r3, [sp, #28]
 800a752:	031b      	lsls	r3, r3, #12
 800a754:	42ab      	cmp	r3, r5
 800a756:	d10a      	bne.n	800a76e <_dtoa_r+0x80e>
 800a758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a75a:	9a07      	ldr	r2, [sp, #28]
 800a75c:	4213      	tst	r3, r2
 800a75e:	d006      	beq.n	800a76e <_dtoa_r+0x80e>
 800a760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a762:	3501      	adds	r5, #1
 800a764:	3301      	adds	r3, #1
 800a766:	930a      	str	r3, [sp, #40]	; 0x28
 800a768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a76a:	3301      	adds	r3, #1
 800a76c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a770:	2001      	movs	r0, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d16c      	bne.n	800a850 <_dtoa_r+0x8f0>
 800a776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a778:	1818      	adds	r0, r3, r0
 800a77a:	231f      	movs	r3, #31
 800a77c:	4018      	ands	r0, r3
 800a77e:	d07e      	beq.n	800a87e <_dtoa_r+0x91e>
 800a780:	3301      	adds	r3, #1
 800a782:	1a1b      	subs	r3, r3, r0
 800a784:	2b04      	cmp	r3, #4
 800a786:	dd70      	ble.n	800a86a <_dtoa_r+0x90a>
 800a788:	231c      	movs	r3, #28
 800a78a:	1a18      	subs	r0, r3, r0
 800a78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78e:	1824      	adds	r4, r4, r0
 800a790:	181b      	adds	r3, r3, r0
 800a792:	930a      	str	r3, [sp, #40]	; 0x28
 800a794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a796:	181b      	adds	r3, r3, r0
 800a798:	930b      	str	r3, [sp, #44]	; 0x2c
 800a79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd05      	ble.n	800a7ac <_dtoa_r+0x84c>
 800a7a0:	001a      	movs	r2, r3
 800a7a2:	9903      	ldr	r1, [sp, #12]
 800a7a4:	9802      	ldr	r0, [sp, #8]
 800a7a6:	f000 ff1b 	bl	800b5e0 <__lshift>
 800a7aa:	9003      	str	r0, [sp, #12]
 800a7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	dd05      	ble.n	800a7be <_dtoa_r+0x85e>
 800a7b2:	001a      	movs	r2, r3
 800a7b4:	9904      	ldr	r1, [sp, #16]
 800a7b6:	9802      	ldr	r0, [sp, #8]
 800a7b8:	f000 ff12 	bl	800b5e0 <__lshift>
 800a7bc:	9004      	str	r0, [sp, #16]
 800a7be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05e      	beq.n	800a882 <_dtoa_r+0x922>
 800a7c4:	9904      	ldr	r1, [sp, #16]
 800a7c6:	9803      	ldr	r0, [sp, #12]
 800a7c8:	f000 ff5c 	bl	800b684 <__mcmp>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	da58      	bge.n	800a882 <_dtoa_r+0x922>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	9903      	ldr	r1, [sp, #12]
 800a7d6:	9802      	ldr	r0, [sp, #8]
 800a7d8:	f000 fd52 	bl	800b280 <__multadd>
 800a7dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7de:	3f01      	subs	r7, #1
 800a7e0:	9003      	str	r0, [sp, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d100      	bne.n	800a7e8 <_dtoa_r+0x888>
 800a7e6:	e190      	b.n	800ab0a <_dtoa_r+0xbaa>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	0031      	movs	r1, r6
 800a7ec:	220a      	movs	r2, #10
 800a7ee:	9802      	ldr	r0, [sp, #8]
 800a7f0:	f000 fd46 	bl	800b280 <__multadd>
 800a7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f6:	0006      	movs	r6, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dd00      	ble.n	800a7fe <_dtoa_r+0x89e>
 800a7fc:	e088      	b.n	800a910 <_dtoa_r+0x9b0>
 800a7fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a800:	2b02      	cmp	r3, #2
 800a802:	dc00      	bgt.n	800a806 <_dtoa_r+0x8a6>
 800a804:	e084      	b.n	800a910 <_dtoa_r+0x9b0>
 800a806:	e044      	b.n	800a892 <_dtoa_r+0x932>
 800a808:	2336      	movs	r3, #54	; 0x36
 800a80a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	e747      	b.n	800a6a0 <_dtoa_r+0x740>
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	1e5d      	subs	r5, r3, #1
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	42ab      	cmp	r3, r5
 800a818:	db08      	blt.n	800a82c <_dtoa_r+0x8cc>
 800a81a:	1b5d      	subs	r5, r3, r5
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	da0c      	bge.n	800a83c <_dtoa_r+0x8dc>
 800a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a826:	1a9c      	subs	r4, r3, r2
 800a828:	2300      	movs	r3, #0
 800a82a:	e73b      	b.n	800a6a4 <_dtoa_r+0x744>
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	9504      	str	r5, [sp, #16]
 800a830:	1aea      	subs	r2, r5, r3
 800a832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a834:	2500      	movs	r5, #0
 800a836:	189b      	adds	r3, r3, r2
 800a838:	9311      	str	r3, [sp, #68]	; 0x44
 800a83a:	e7ef      	b.n	800a81c <_dtoa_r+0x8bc>
 800a83c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a840:	e730      	b.n	800a6a4 <_dtoa_r+0x744>
 800a842:	9d04      	ldr	r5, [sp, #16]
 800a844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a846:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a848:	e737      	b.n	800a6ba <_dtoa_r+0x75a>
 800a84a:	9a04      	ldr	r2, [sp, #16]
 800a84c:	e764      	b.n	800a718 <_dtoa_r+0x7b8>
 800a84e:	2500      	movs	r5, #0
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	9310      	str	r3, [sp, #64]	; 0x40
 800a858:	3303      	adds	r3, #3
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	18d3      	adds	r3, r2, r3
 800a85e:	6858      	ldr	r0, [r3, #4]
 800a860:	f000 fd8a 	bl	800b378 <__hi0bits>
 800a864:	2320      	movs	r3, #32
 800a866:	1a18      	subs	r0, r3, r0
 800a868:	e785      	b.n	800a776 <_dtoa_r+0x816>
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d095      	beq.n	800a79a <_dtoa_r+0x83a>
 800a86e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a870:	331c      	adds	r3, #28
 800a872:	18d2      	adds	r2, r2, r3
 800a874:	920a      	str	r2, [sp, #40]	; 0x28
 800a876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a878:	18e4      	adds	r4, r4, r3
 800a87a:	18d3      	adds	r3, r2, r3
 800a87c:	e78c      	b.n	800a798 <_dtoa_r+0x838>
 800a87e:	0003      	movs	r3, r0
 800a880:	e7f5      	b.n	800a86e <_dtoa_r+0x90e>
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	dc3d      	bgt.n	800a904 <_dtoa_r+0x9a4>
 800a888:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	dd3a      	ble.n	800a904 <_dtoa_r+0x9a4>
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	930c      	str	r3, [sp, #48]	; 0x30
 800a892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10c      	bne.n	800a8b2 <_dtoa_r+0x952>
 800a898:	9904      	ldr	r1, [sp, #16]
 800a89a:	2205      	movs	r2, #5
 800a89c:	9802      	ldr	r0, [sp, #8]
 800a89e:	f000 fcef 	bl	800b280 <__multadd>
 800a8a2:	9004      	str	r0, [sp, #16]
 800a8a4:	0001      	movs	r1, r0
 800a8a6:	9803      	ldr	r0, [sp, #12]
 800a8a8:	f000 feec 	bl	800b684 <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	dd00      	ble.n	800a8b2 <_dtoa_r+0x952>
 800a8b0:	e5af      	b.n	800a412 <_dtoa_r+0x4b2>
 800a8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8b4:	9d08      	ldr	r5, [sp, #32]
 800a8b6:	43df      	mvns	r7, r3
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a8bc:	9904      	ldr	r1, [sp, #16]
 800a8be:	9802      	ldr	r0, [sp, #8]
 800a8c0:	f000 fcc5 	bl	800b24e <_Bfree>
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	d100      	bne.n	800a8ca <_dtoa_r+0x96a>
 800a8c8:	e69b      	b.n	800a602 <_dtoa_r+0x6a2>
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <_dtoa_r+0x97c>
 800a8d0:	42b3      	cmp	r3, r6
 800a8d2:	d003      	beq.n	800a8dc <_dtoa_r+0x97c>
 800a8d4:	0019      	movs	r1, r3
 800a8d6:	9802      	ldr	r0, [sp, #8]
 800a8d8:	f000 fcb9 	bl	800b24e <_Bfree>
 800a8dc:	0031      	movs	r1, r6
 800a8de:	9802      	ldr	r0, [sp, #8]
 800a8e0:	f000 fcb5 	bl	800b24e <_Bfree>
 800a8e4:	e68d      	b.n	800a602 <_dtoa_r+0x6a2>
 800a8e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	001e      	movs	r6, r3
 800a8ec:	e7e1      	b.n	800a8b2 <_dtoa_r+0x952>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e7fa      	b.n	800a8e8 <_dtoa_r+0x988>
 800a8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8f4:	0037      	movs	r7, r6
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	001e      	movs	r6, r3
 800a8fa:	e58a      	b.n	800a412 <_dtoa_r+0x4b2>
 800a8fc:	40240000 	.word	0x40240000
 800a900:	00000433 	.word	0x00000433
 800a904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a906:	2b00      	cmp	r3, #0
 800a908:	d100      	bne.n	800a90c <_dtoa_r+0x9ac>
 800a90a:	e0b2      	b.n	800aa72 <_dtoa_r+0xb12>
 800a90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90e:	930c      	str	r3, [sp, #48]	; 0x30
 800a910:	2c00      	cmp	r4, #0
 800a912:	dd05      	ble.n	800a920 <_dtoa_r+0x9c0>
 800a914:	0031      	movs	r1, r6
 800a916:	0022      	movs	r2, r4
 800a918:	9802      	ldr	r0, [sp, #8]
 800a91a:	f000 fe61 	bl	800b5e0 <__lshift>
 800a91e:	0006      	movs	r6, r0
 800a920:	0030      	movs	r0, r6
 800a922:	2d00      	cmp	r5, #0
 800a924:	d011      	beq.n	800a94a <_dtoa_r+0x9ea>
 800a926:	6871      	ldr	r1, [r6, #4]
 800a928:	9802      	ldr	r0, [sp, #8]
 800a92a:	f000 fc58 	bl	800b1de <_Balloc>
 800a92e:	0031      	movs	r1, r6
 800a930:	0004      	movs	r4, r0
 800a932:	6933      	ldr	r3, [r6, #16]
 800a934:	310c      	adds	r1, #12
 800a936:	1c9a      	adds	r2, r3, #2
 800a938:	0092      	lsls	r2, r2, #2
 800a93a:	300c      	adds	r0, #12
 800a93c:	f7fd fbca 	bl	80080d4 <memcpy>
 800a940:	2201      	movs	r2, #1
 800a942:	0021      	movs	r1, r4
 800a944:	9802      	ldr	r0, [sp, #8]
 800a946:	f000 fe4b 	bl	800b5e0 <__lshift>
 800a94a:	9609      	str	r6, [sp, #36]	; 0x24
 800a94c:	0006      	movs	r6, r0
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	930a      	str	r3, [sp, #40]	; 0x28
 800a952:	9904      	ldr	r1, [sp, #16]
 800a954:	9803      	ldr	r0, [sp, #12]
 800a956:	f7ff fa7d 	bl	8009e54 <quorem>
 800a95a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a95c:	900d      	str	r0, [sp, #52]	; 0x34
 800a95e:	0004      	movs	r4, r0
 800a960:	9803      	ldr	r0, [sp, #12]
 800a962:	f000 fe8f 	bl	800b684 <__mcmp>
 800a966:	0032      	movs	r2, r6
 800a968:	9010      	str	r0, [sp, #64]	; 0x40
 800a96a:	9904      	ldr	r1, [sp, #16]
 800a96c:	9802      	ldr	r0, [sp, #8]
 800a96e:	f000 fea3 	bl	800b6b8 <__mdiff>
 800a972:	2301      	movs	r3, #1
 800a974:	930b      	str	r3, [sp, #44]	; 0x2c
 800a976:	68c3      	ldr	r3, [r0, #12]
 800a978:	3430      	adds	r4, #48	; 0x30
 800a97a:	0005      	movs	r5, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <_dtoa_r+0xa2a>
 800a980:	0001      	movs	r1, r0
 800a982:	9803      	ldr	r0, [sp, #12]
 800a984:	f000 fe7e 	bl	800b684 <__mcmp>
 800a988:	900b      	str	r0, [sp, #44]	; 0x2c
 800a98a:	0029      	movs	r1, r5
 800a98c:	9802      	ldr	r0, [sp, #8]
 800a98e:	f000 fc5e 	bl	800b24e <_Bfree>
 800a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a994:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a996:	4313      	orrs	r3, r2
 800a998:	d10e      	bne.n	800a9b8 <_dtoa_r+0xa58>
 800a99a:	9a06      	ldr	r2, [sp, #24]
 800a99c:	3301      	adds	r3, #1
 800a99e:	4213      	tst	r3, r2
 800a9a0:	d10a      	bne.n	800a9b8 <_dtoa_r+0xa58>
 800a9a2:	2c39      	cmp	r4, #57	; 0x39
 800a9a4:	d026      	beq.n	800a9f4 <_dtoa_r+0xa94>
 800a9a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd01      	ble.n	800a9b0 <_dtoa_r+0xa50>
 800a9ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a9ae:	3431      	adds	r4, #49	; 0x31
 800a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b2:	1c5d      	adds	r5, r3, #1
 800a9b4:	701c      	strb	r4, [r3, #0]
 800a9b6:	e781      	b.n	800a8bc <_dtoa_r+0x95c>
 800a9b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	db07      	blt.n	800a9ce <_dtoa_r+0xa6e>
 800a9be:	001d      	movs	r5, r3
 800a9c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9c2:	431d      	orrs	r5, r3
 800a9c4:	d122      	bne.n	800aa0c <_dtoa_r+0xaac>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	9a06      	ldr	r2, [sp, #24]
 800a9ca:	4213      	tst	r3, r2
 800a9cc:	d11e      	bne.n	800aa0c <_dtoa_r+0xaac>
 800a9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dded      	ble.n	800a9b0 <_dtoa_r+0xa50>
 800a9d4:	9903      	ldr	r1, [sp, #12]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	9802      	ldr	r0, [sp, #8]
 800a9da:	f000 fe01 	bl	800b5e0 <__lshift>
 800a9de:	9904      	ldr	r1, [sp, #16]
 800a9e0:	9003      	str	r0, [sp, #12]
 800a9e2:	f000 fe4f 	bl	800b684 <__mcmp>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	dc02      	bgt.n	800a9f0 <_dtoa_r+0xa90>
 800a9ea:	d1e1      	bne.n	800a9b0 <_dtoa_r+0xa50>
 800a9ec:	07e3      	lsls	r3, r4, #31
 800a9ee:	d5df      	bpl.n	800a9b0 <_dtoa_r+0xa50>
 800a9f0:	2c39      	cmp	r4, #57	; 0x39
 800a9f2:	d1db      	bne.n	800a9ac <_dtoa_r+0xa4c>
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9f8:	1c5d      	adds	r5, r3, #1
 800a9fa:	2339      	movs	r3, #57	; 0x39
 800a9fc:	7013      	strb	r3, [r2, #0]
 800a9fe:	1e6b      	subs	r3, r5, #1
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	2a39      	cmp	r2, #57	; 0x39
 800aa04:	d067      	beq.n	800aad6 <_dtoa_r+0xb76>
 800aa06:	3201      	adds	r2, #1
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e757      	b.n	800a8bc <_dtoa_r+0x95c>
 800aa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0e:	1c5d      	adds	r5, r3, #1
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd04      	ble.n	800aa20 <_dtoa_r+0xac0>
 800aa16:	2c39      	cmp	r4, #57	; 0x39
 800aa18:	d0ec      	beq.n	800a9f4 <_dtoa_r+0xa94>
 800aa1a:	3401      	adds	r4, #1
 800aa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1e:	e7c9      	b.n	800a9b4 <_dtoa_r+0xa54>
 800aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa24:	701c      	strb	r4, [r3, #0]
 800aa26:	9b08      	ldr	r3, [sp, #32]
 800aa28:	1aeb      	subs	r3, r5, r3
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d03e      	beq.n	800aaac <_dtoa_r+0xb4c>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	9903      	ldr	r1, [sp, #12]
 800aa34:	9802      	ldr	r0, [sp, #8]
 800aa36:	f000 fc23 	bl	800b280 <__multadd>
 800aa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3c:	9003      	str	r0, [sp, #12]
 800aa3e:	42b3      	cmp	r3, r6
 800aa40:	d109      	bne.n	800aa56 <_dtoa_r+0xaf6>
 800aa42:	2300      	movs	r3, #0
 800aa44:	220a      	movs	r2, #10
 800aa46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa48:	9802      	ldr	r0, [sp, #8]
 800aa4a:	f000 fc19 	bl	800b280 <__multadd>
 800aa4e:	9009      	str	r0, [sp, #36]	; 0x24
 800aa50:	0006      	movs	r6, r0
 800aa52:	950a      	str	r5, [sp, #40]	; 0x28
 800aa54:	e77d      	b.n	800a952 <_dtoa_r+0x9f2>
 800aa56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa58:	2300      	movs	r3, #0
 800aa5a:	220a      	movs	r2, #10
 800aa5c:	9802      	ldr	r0, [sp, #8]
 800aa5e:	f000 fc0f 	bl	800b280 <__multadd>
 800aa62:	2300      	movs	r3, #0
 800aa64:	9009      	str	r0, [sp, #36]	; 0x24
 800aa66:	220a      	movs	r2, #10
 800aa68:	0031      	movs	r1, r6
 800aa6a:	9802      	ldr	r0, [sp, #8]
 800aa6c:	f000 fc08 	bl	800b280 <__multadd>
 800aa70:	e7ee      	b.n	800aa50 <_dtoa_r+0xaf0>
 800aa72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa74:	930c      	str	r3, [sp, #48]	; 0x30
 800aa76:	9b08      	ldr	r3, [sp, #32]
 800aa78:	9306      	str	r3, [sp, #24]
 800aa7a:	9904      	ldr	r1, [sp, #16]
 800aa7c:	9803      	ldr	r0, [sp, #12]
 800aa7e:	f7ff f9e9 	bl	8009e54 <quorem>
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	3030      	adds	r0, #48	; 0x30
 800aa86:	1c5d      	adds	r5, r3, #1
 800aa88:	7018      	strb	r0, [r3, #0]
 800aa8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa8c:	9b08      	ldr	r3, [sp, #32]
 800aa8e:	0004      	movs	r4, r0
 800aa90:	1aeb      	subs	r3, r5, r3
 800aa92:	429a      	cmp	r2, r3
 800aa94:	dd08      	ble.n	800aaa8 <_dtoa_r+0xb48>
 800aa96:	2300      	movs	r3, #0
 800aa98:	220a      	movs	r2, #10
 800aa9a:	9903      	ldr	r1, [sp, #12]
 800aa9c:	9802      	ldr	r0, [sp, #8]
 800aa9e:	f000 fbef 	bl	800b280 <__multadd>
 800aaa2:	9506      	str	r5, [sp, #24]
 800aaa4:	9003      	str	r0, [sp, #12]
 800aaa6:	e7e8      	b.n	800aa7a <_dtoa_r+0xb1a>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9309      	str	r3, [sp, #36]	; 0x24
 800aaac:	9903      	ldr	r1, [sp, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	9802      	ldr	r0, [sp, #8]
 800aab2:	f000 fd95 	bl	800b5e0 <__lshift>
 800aab6:	9904      	ldr	r1, [sp, #16]
 800aab8:	9003      	str	r0, [sp, #12]
 800aaba:	f000 fde3 	bl	800b684 <__mcmp>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	dc9d      	bgt.n	800a9fe <_dtoa_r+0xa9e>
 800aac2:	d101      	bne.n	800aac8 <_dtoa_r+0xb68>
 800aac4:	07e3      	lsls	r3, r4, #31
 800aac6:	d49a      	bmi.n	800a9fe <_dtoa_r+0xa9e>
 800aac8:	1e6b      	subs	r3, r5, #1
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	2a30      	cmp	r2, #48	; 0x30
 800aace:	d000      	beq.n	800aad2 <_dtoa_r+0xb72>
 800aad0:	e6f4      	b.n	800a8bc <_dtoa_r+0x95c>
 800aad2:	001d      	movs	r5, r3
 800aad4:	e7f8      	b.n	800aac8 <_dtoa_r+0xb68>
 800aad6:	9a08      	ldr	r2, [sp, #32]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d103      	bne.n	800aae4 <_dtoa_r+0xb84>
 800aadc:	2331      	movs	r3, #49	; 0x31
 800aade:	3701      	adds	r7, #1
 800aae0:	7013      	strb	r3, [r2, #0]
 800aae2:	e6eb      	b.n	800a8bc <_dtoa_r+0x95c>
 800aae4:	001d      	movs	r5, r3
 800aae6:	e78a      	b.n	800a9fe <_dtoa_r+0xa9e>
 800aae8:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <_dtoa_r+0xbb8>)
 800aaea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aaec:	9308      	str	r3, [sp, #32]
 800aaee:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <_dtoa_r+0xbbc>)
 800aaf0:	2a00      	cmp	r2, #0
 800aaf2:	d001      	beq.n	800aaf8 <_dtoa_r+0xb98>
 800aaf4:	f7ff fa77 	bl	8009fe6 <_dtoa_r+0x86>
 800aaf8:	f7ff fa77 	bl	8009fea <_dtoa_r+0x8a>
 800aafc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	dc00      	bgt.n	800ab04 <_dtoa_r+0xba4>
 800ab02:	e621      	b.n	800a748 <_dtoa_r+0x7e8>
 800ab04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ab06:	2001      	movs	r0, #1
 800ab08:	e635      	b.n	800a776 <_dtoa_r+0x816>
 800ab0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dcb2      	bgt.n	800aa76 <_dtoa_r+0xb16>
 800ab10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	ddaf      	ble.n	800aa76 <_dtoa_r+0xb16>
 800ab16:	e6bc      	b.n	800a892 <_dtoa_r+0x932>
 800ab18:	0800c218 	.word	0x0800c218
 800ab1c:	0800c220 	.word	0x0800c220

0800ab20 <rshift>:
 800ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab22:	0004      	movs	r4, r0
 800ab24:	6905      	ldr	r5, [r0, #16]
 800ab26:	3414      	adds	r4, #20
 800ab28:	114b      	asrs	r3, r1, #5
 800ab2a:	0026      	movs	r6, r4
 800ab2c:	429d      	cmp	r5, r3
 800ab2e:	dd14      	ble.n	800ab5a <rshift+0x3a>
 800ab30:	221f      	movs	r2, #31
 800ab32:	00ad      	lsls	r5, r5, #2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4011      	ands	r1, r2
 800ab38:	1965      	adds	r5, r4, r5
 800ab3a:	18e3      	adds	r3, r4, r3
 800ab3c:	0022      	movs	r2, r4
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	d01e      	beq.n	800ab80 <rshift+0x60>
 800ab42:	cb04      	ldmia	r3!, {r2}
 800ab44:	2720      	movs	r7, #32
 800ab46:	40ca      	lsrs	r2, r1
 800ab48:	46a4      	mov	ip, r4
 800ab4a:	1a7f      	subs	r7, r7, r1
 800ab4c:	4666      	mov	r6, ip
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	d80b      	bhi.n	800ab6a <rshift+0x4a>
 800ab52:	6032      	str	r2, [r6, #0]
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	d000      	beq.n	800ab5a <rshift+0x3a>
 800ab58:	3604      	adds	r6, #4
 800ab5a:	1b33      	subs	r3, r6, r4
 800ab5c:	109b      	asrs	r3, r3, #2
 800ab5e:	6103      	str	r3, [r0, #16]
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	d101      	bne.n	800ab68 <rshift+0x48>
 800ab64:	2300      	movs	r3, #0
 800ab66:	6143      	str	r3, [r0, #20]
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6a:	681e      	ldr	r6, [r3, #0]
 800ab6c:	40be      	lsls	r6, r7
 800ab6e:	4332      	orrs	r2, r6
 800ab70:	4666      	mov	r6, ip
 800ab72:	c604      	stmia	r6!, {r2}
 800ab74:	cb04      	ldmia	r3!, {r2}
 800ab76:	46b4      	mov	ip, r6
 800ab78:	40ca      	lsrs	r2, r1
 800ab7a:	e7e7      	b.n	800ab4c <rshift+0x2c>
 800ab7c:	cb02      	ldmia	r3!, {r1}
 800ab7e:	c202      	stmia	r2!, {r1}
 800ab80:	0016      	movs	r6, r2
 800ab82:	429d      	cmp	r5, r3
 800ab84:	d8fa      	bhi.n	800ab7c <rshift+0x5c>
 800ab86:	e7e8      	b.n	800ab5a <rshift+0x3a>

0800ab88 <__hexdig_fun>:
 800ab88:	0003      	movs	r3, r0
 800ab8a:	3b30      	subs	r3, #48	; 0x30
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	d803      	bhi.n	800ab98 <__hexdig_fun+0x10>
 800ab90:	3820      	subs	r0, #32
 800ab92:	b2c3      	uxtb	r3, r0
 800ab94:	0018      	movs	r0, r3
 800ab96:	4770      	bx	lr
 800ab98:	0003      	movs	r3, r0
 800ab9a:	3b61      	subs	r3, #97	; 0x61
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	d801      	bhi.n	800aba4 <__hexdig_fun+0x1c>
 800aba0:	3847      	subs	r0, #71	; 0x47
 800aba2:	e7f6      	b.n	800ab92 <__hexdig_fun+0xa>
 800aba4:	0002      	movs	r2, r0
 800aba6:	3a41      	subs	r2, #65	; 0x41
 800aba8:	2300      	movs	r3, #0
 800abaa:	2a05      	cmp	r2, #5
 800abac:	d8f2      	bhi.n	800ab94 <__hexdig_fun+0xc>
 800abae:	3827      	subs	r0, #39	; 0x27
 800abb0:	e7ef      	b.n	800ab92 <__hexdig_fun+0xa>

0800abb2 <__gethex>:
 800abb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abb4:	b08d      	sub	sp, #52	; 0x34
 800abb6:	9005      	str	r0, [sp, #20]
 800abb8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800abba:	9109      	str	r1, [sp, #36]	; 0x24
 800abbc:	9202      	str	r2, [sp, #8]
 800abbe:	930a      	str	r3, [sp, #40]	; 0x28
 800abc0:	f000 fae2 	bl	800b188 <__localeconv_l>
 800abc4:	6803      	ldr	r3, [r0, #0]
 800abc6:	0018      	movs	r0, r3
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	f7f5 fa9d 	bl	8000108 <strlen>
 800abce:	2202      	movs	r2, #2
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	4252      	negs	r2, r2
 800abd4:	181b      	adds	r3, r3, r0
 800abd6:	3b01      	subs	r3, #1
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	9004      	str	r0, [sp, #16]
 800abdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800abde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe0:	6819      	ldr	r1, [r3, #0]
 800abe2:	1c8b      	adds	r3, r1, #2
 800abe4:	1a52      	subs	r2, r2, r1
 800abe6:	18d1      	adds	r1, r2, r3
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	9108      	str	r1, [sp, #32]
 800abec:	9901      	ldr	r1, [sp, #4]
 800abee:	3301      	adds	r3, #1
 800abf0:	7808      	ldrb	r0, [r1, #0]
 800abf2:	2830      	cmp	r0, #48	; 0x30
 800abf4:	d0f7      	beq.n	800abe6 <__gethex+0x34>
 800abf6:	f7ff ffc7 	bl	800ab88 <__hexdig_fun>
 800abfa:	1e07      	subs	r7, r0, #0
 800abfc:	d000      	beq.n	800ac00 <__gethex+0x4e>
 800abfe:	e06f      	b.n	800ace0 <__gethex+0x12e>
 800ac00:	9a04      	ldr	r2, [sp, #16]
 800ac02:	9907      	ldr	r1, [sp, #28]
 800ac04:	9801      	ldr	r0, [sp, #4]
 800ac06:	f001 f84f 	bl	800bca8 <strncmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d000      	beq.n	800ac10 <__gethex+0x5e>
 800ac0e:	e06d      	b.n	800acec <__gethex+0x13a>
 800ac10:	9b01      	ldr	r3, [sp, #4]
 800ac12:	9a04      	ldr	r2, [sp, #16]
 800ac14:	189c      	adds	r4, r3, r2
 800ac16:	7820      	ldrb	r0, [r4, #0]
 800ac18:	f7ff ffb6 	bl	800ab88 <__hexdig_fun>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d069      	beq.n	800acf4 <__gethex+0x142>
 800ac20:	9401      	str	r4, [sp, #4]
 800ac22:	9b01      	ldr	r3, [sp, #4]
 800ac24:	7818      	ldrb	r0, [r3, #0]
 800ac26:	2830      	cmp	r0, #48	; 0x30
 800ac28:	d009      	beq.n	800ac3e <__gethex+0x8c>
 800ac2a:	f7ff ffad 	bl	800ab88 <__hexdig_fun>
 800ac2e:	4243      	negs	r3, r0
 800ac30:	4143      	adcs	r3, r0
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	2301      	movs	r3, #1
 800ac36:	0026      	movs	r6, r4
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	9c01      	ldr	r4, [sp, #4]
 800ac3c:	e004      	b.n	800ac48 <__gethex+0x96>
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	3301      	adds	r3, #1
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	e7ed      	b.n	800ac22 <__gethex+0x70>
 800ac46:	3401      	adds	r4, #1
 800ac48:	7820      	ldrb	r0, [r4, #0]
 800ac4a:	f7ff ff9d 	bl	800ab88 <__hexdig_fun>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d1f9      	bne.n	800ac46 <__gethex+0x94>
 800ac52:	9a04      	ldr	r2, [sp, #16]
 800ac54:	9907      	ldr	r1, [sp, #28]
 800ac56:	0020      	movs	r0, r4
 800ac58:	f001 f826 	bl	800bca8 <strncmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d109      	bne.n	800ac74 <__gethex+0xc2>
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	d10a      	bne.n	800ac7a <__gethex+0xc8>
 800ac64:	9b04      	ldr	r3, [sp, #16]
 800ac66:	18e4      	adds	r4, r4, r3
 800ac68:	0026      	movs	r6, r4
 800ac6a:	7820      	ldrb	r0, [r4, #0]
 800ac6c:	f7ff ff8c 	bl	800ab88 <__hexdig_fun>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d139      	bne.n	800ace8 <__gethex+0x136>
 800ac74:	2700      	movs	r7, #0
 800ac76:	42be      	cmp	r6, r7
 800ac78:	d001      	beq.n	800ac7e <__gethex+0xcc>
 800ac7a:	1b37      	subs	r7, r6, r4
 800ac7c:	00bf      	lsls	r7, r7, #2
 800ac7e:	7823      	ldrb	r3, [r4, #0]
 800ac80:	2b50      	cmp	r3, #80	; 0x50
 800ac82:	d001      	beq.n	800ac88 <__gethex+0xd6>
 800ac84:	2b70      	cmp	r3, #112	; 0x70
 800ac86:	d142      	bne.n	800ad0e <__gethex+0x15c>
 800ac88:	7863      	ldrb	r3, [r4, #1]
 800ac8a:	2b2b      	cmp	r3, #43	; 0x2b
 800ac8c:	d034      	beq.n	800acf8 <__gethex+0x146>
 800ac8e:	2b2d      	cmp	r3, #45	; 0x2d
 800ac90:	d036      	beq.n	800ad00 <__gethex+0x14e>
 800ac92:	2300      	movs	r3, #0
 800ac94:	1c66      	adds	r6, r4, #1
 800ac96:	9306      	str	r3, [sp, #24]
 800ac98:	7830      	ldrb	r0, [r6, #0]
 800ac9a:	f7ff ff75 	bl	800ab88 <__hexdig_fun>
 800ac9e:	1e43      	subs	r3, r0, #1
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b18      	cmp	r3, #24
 800aca4:	d833      	bhi.n	800ad0e <__gethex+0x15c>
 800aca6:	3810      	subs	r0, #16
 800aca8:	0005      	movs	r5, r0
 800acaa:	3601      	adds	r6, #1
 800acac:	7830      	ldrb	r0, [r6, #0]
 800acae:	f7ff ff6b 	bl	800ab88 <__hexdig_fun>
 800acb2:	1e43      	subs	r3, r0, #1
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b18      	cmp	r3, #24
 800acb8:	d924      	bls.n	800ad04 <__gethex+0x152>
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d000      	beq.n	800acc2 <__gethex+0x110>
 800acc0:	426d      	negs	r5, r5
 800acc2:	197f      	adds	r7, r7, r5
 800acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc6:	601e      	str	r6, [r3, #0]
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d021      	beq.n	800ad12 <__gethex+0x160>
 800acce:	9b08      	ldr	r3, [sp, #32]
 800acd0:	2606      	movs	r6, #6
 800acd2:	425a      	negs	r2, r3
 800acd4:	4153      	adcs	r3, r2
 800acd6:	425b      	negs	r3, r3
 800acd8:	401e      	ands	r6, r3
 800acda:	0030      	movs	r0, r6
 800acdc:	b00d      	add	sp, #52	; 0x34
 800acde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace0:	2300      	movs	r3, #0
 800ace2:	9303      	str	r3, [sp, #12]
 800ace4:	001e      	movs	r6, r3
 800ace6:	e7a8      	b.n	800ac3a <__gethex+0x88>
 800ace8:	3401      	adds	r4, #1
 800acea:	e7be      	b.n	800ac6a <__gethex+0xb8>
 800acec:	9c01      	ldr	r4, [sp, #4]
 800acee:	2301      	movs	r3, #1
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	e7c4      	b.n	800ac7e <__gethex+0xcc>
 800acf4:	0007      	movs	r7, r0
 800acf6:	e7fa      	b.n	800acee <__gethex+0x13c>
 800acf8:	2300      	movs	r3, #0
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	1ca6      	adds	r6, r4, #2
 800acfe:	e7cb      	b.n	800ac98 <__gethex+0xe6>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e7fa      	b.n	800acfa <__gethex+0x148>
 800ad04:	230a      	movs	r3, #10
 800ad06:	435d      	muls	r5, r3
 800ad08:	182d      	adds	r5, r5, r0
 800ad0a:	3d10      	subs	r5, #16
 800ad0c:	e7cd      	b.n	800acaa <__gethex+0xf8>
 800ad0e:	0026      	movs	r6, r4
 800ad10:	e7d8      	b.n	800acc4 <__gethex+0x112>
 800ad12:	9b01      	ldr	r3, [sp, #4]
 800ad14:	9903      	ldr	r1, [sp, #12]
 800ad16:	1ae3      	subs	r3, r4, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	2b07      	cmp	r3, #7
 800ad1c:	dc47      	bgt.n	800adae <__gethex+0x1fc>
 800ad1e:	9805      	ldr	r0, [sp, #20]
 800ad20:	f000 fa5d 	bl	800b1de <_Balloc>
 800ad24:	0003      	movs	r3, r0
 800ad26:	3314      	adds	r3, #20
 800ad28:	9303      	str	r3, [sp, #12]
 800ad2a:	9308      	str	r3, [sp, #32]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	0005      	movs	r5, r0
 800ad30:	001e      	movs	r6, r3
 800ad32:	9306      	str	r3, [sp, #24]
 800ad34:	9b01      	ldr	r3, [sp, #4]
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	d33c      	bcc.n	800adb4 <__gethex+0x202>
 800ad3a:	9c08      	ldr	r4, [sp, #32]
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	c440      	stmia	r4!, {r6}
 800ad40:	1ae4      	subs	r4, r4, r3
 800ad42:	10a4      	asrs	r4, r4, #2
 800ad44:	612c      	str	r4, [r5, #16]
 800ad46:	0030      	movs	r0, r6
 800ad48:	f000 fb16 	bl	800b378 <__hi0bits>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	0164      	lsls	r4, r4, #5
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	1a26      	subs	r6, r4, r0
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	429e      	cmp	r6, r3
 800ad58:	dd5f      	ble.n	800ae1a <__gethex+0x268>
 800ad5a:	1af6      	subs	r6, r6, r3
 800ad5c:	0031      	movs	r1, r6
 800ad5e:	0028      	movs	r0, r5
 800ad60:	f000 fe11 	bl	800b986 <__any_on>
 800ad64:	1e04      	subs	r4, r0, #0
 800ad66:	d00f      	beq.n	800ad88 <__gethex+0x1d6>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	211f      	movs	r1, #31
 800ad6c:	0020      	movs	r0, r4
 800ad6e:	1e73      	subs	r3, r6, #1
 800ad70:	4019      	ands	r1, r3
 800ad72:	4088      	lsls	r0, r1
 800ad74:	0001      	movs	r1, r0
 800ad76:	115a      	asrs	r2, r3, #5
 800ad78:	9803      	ldr	r0, [sp, #12]
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	5812      	ldr	r2, [r2, r0]
 800ad7e:	420a      	tst	r2, r1
 800ad80:	d002      	beq.n	800ad88 <__gethex+0x1d6>
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	dc41      	bgt.n	800ae0a <__gethex+0x258>
 800ad86:	2402      	movs	r4, #2
 800ad88:	0031      	movs	r1, r6
 800ad8a:	0028      	movs	r0, r5
 800ad8c:	f7ff fec8 	bl	800ab20 <rshift>
 800ad90:	19bf      	adds	r7, r7, r6
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	42bb      	cmp	r3, r7
 800ad9a:	da4e      	bge.n	800ae3a <__gethex+0x288>
 800ad9c:	0029      	movs	r1, r5
 800ad9e:	9805      	ldr	r0, [sp, #20]
 800ada0:	f000 fa55 	bl	800b24e <_Bfree>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ada8:	26a3      	movs	r6, #163	; 0xa3
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	e795      	b.n	800acda <__gethex+0x128>
 800adae:	3101      	adds	r1, #1
 800adb0:	105b      	asrs	r3, r3, #1
 800adb2:	e7b2      	b.n	800ad1a <__gethex+0x168>
 800adb4:	1e63      	subs	r3, r4, #1
 800adb6:	9309      	str	r3, [sp, #36]	; 0x24
 800adb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d015      	beq.n	800adec <__gethex+0x23a>
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d105      	bne.n	800add2 <__gethex+0x220>
 800adc6:	9b08      	ldr	r3, [sp, #32]
 800adc8:	601e      	str	r6, [r3, #0]
 800adca:	2600      	movs	r6, #0
 800adcc:	3304      	adds	r3, #4
 800adce:	9308      	str	r3, [sp, #32]
 800add0:	9606      	str	r6, [sp, #24]
 800add2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add4:	7818      	ldrb	r0, [r3, #0]
 800add6:	f7ff fed7 	bl	800ab88 <__hexdig_fun>
 800adda:	230f      	movs	r3, #15
 800addc:	4018      	ands	r0, r3
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ade2:	4098      	lsls	r0, r3
 800ade4:	3304      	adds	r3, #4
 800ade6:	4306      	orrs	r6, r0
 800ade8:	9306      	str	r3, [sp, #24]
 800adea:	e7a3      	b.n	800ad34 <__gethex+0x182>
 800adec:	2301      	movs	r3, #1
 800adee:	9a04      	ldr	r2, [sp, #16]
 800adf0:	1a9c      	subs	r4, r3, r2
 800adf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf4:	191c      	adds	r4, r3, r4
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d3e1      	bcc.n	800adc0 <__gethex+0x20e>
 800adfc:	9907      	ldr	r1, [sp, #28]
 800adfe:	0020      	movs	r0, r4
 800ae00:	f000 ff52 	bl	800bca8 <strncmp>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d1db      	bne.n	800adc0 <__gethex+0x20e>
 800ae08:	e794      	b.n	800ad34 <__gethex+0x182>
 800ae0a:	1eb1      	subs	r1, r6, #2
 800ae0c:	0028      	movs	r0, r5
 800ae0e:	f000 fdba 	bl	800b986 <__any_on>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d0b7      	beq.n	800ad86 <__gethex+0x1d4>
 800ae16:	2403      	movs	r4, #3
 800ae18:	e7b6      	b.n	800ad88 <__gethex+0x1d6>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	2400      	movs	r4, #0
 800ae1e:	429e      	cmp	r6, r3
 800ae20:	dab7      	bge.n	800ad92 <__gethex+0x1e0>
 800ae22:	1b9e      	subs	r6, r3, r6
 800ae24:	0029      	movs	r1, r5
 800ae26:	0032      	movs	r2, r6
 800ae28:	9805      	ldr	r0, [sp, #20]
 800ae2a:	f000 fbd9 	bl	800b5e0 <__lshift>
 800ae2e:	0003      	movs	r3, r0
 800ae30:	3314      	adds	r3, #20
 800ae32:	0005      	movs	r5, r0
 800ae34:	1bbf      	subs	r7, r7, r6
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	e7ab      	b.n	800ad92 <__gethex+0x1e0>
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	685e      	ldr	r6, [r3, #4]
 800ae3e:	42be      	cmp	r6, r7
 800ae40:	dd6b      	ble.n	800af1a <__gethex+0x368>
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	1bf6      	subs	r6, r6, r7
 800ae46:	42b3      	cmp	r3, r6
 800ae48:	dc32      	bgt.n	800aeb0 <__gethex+0x2fe>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d026      	beq.n	800aea0 <__gethex+0x2ee>
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d028      	beq.n	800aea8 <__gethex+0x2f6>
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d119      	bne.n	800ae8e <__gethex+0x2dc>
 800ae5a:	9b01      	ldr	r3, [sp, #4]
 800ae5c:	42b3      	cmp	r3, r6
 800ae5e:	d116      	bne.n	800ae8e <__gethex+0x2dc>
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	dc0d      	bgt.n	800ae80 <__gethex+0x2ce>
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	2662      	movs	r6, #98	; 0x62
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	2301      	movs	r3, #1
 800ae74:	9a03      	ldr	r2, [sp, #12]
 800ae76:	612b      	str	r3, [r5, #16]
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae7c:	601d      	str	r5, [r3, #0]
 800ae7e:	e72c      	b.n	800acda <__gethex+0x128>
 800ae80:	9901      	ldr	r1, [sp, #4]
 800ae82:	0028      	movs	r0, r5
 800ae84:	3901      	subs	r1, #1
 800ae86:	f000 fd7e 	bl	800b986 <__any_on>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d1ea      	bne.n	800ae64 <__gethex+0x2b2>
 800ae8e:	0029      	movs	r1, r5
 800ae90:	9805      	ldr	r0, [sp, #20]
 800ae92:	f000 f9dc 	bl	800b24e <_Bfree>
 800ae96:	2300      	movs	r3, #0
 800ae98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae9a:	2650      	movs	r6, #80	; 0x50
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	e71c      	b.n	800acda <__gethex+0x128>
 800aea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0de      	beq.n	800ae64 <__gethex+0x2b2>
 800aea6:	e7f2      	b.n	800ae8e <__gethex+0x2dc>
 800aea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1da      	bne.n	800ae64 <__gethex+0x2b2>
 800aeae:	e7ee      	b.n	800ae8e <__gethex+0x2dc>
 800aeb0:	1e77      	subs	r7, r6, #1
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d12f      	bne.n	800af16 <__gethex+0x364>
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d004      	beq.n	800aec4 <__gethex+0x312>
 800aeba:	0039      	movs	r1, r7
 800aebc:	0028      	movs	r0, r5
 800aebe:	f000 fd62 	bl	800b986 <__any_on>
 800aec2:	0004      	movs	r4, r0
 800aec4:	231f      	movs	r3, #31
 800aec6:	117a      	asrs	r2, r7, #5
 800aec8:	401f      	ands	r7, r3
 800aeca:	3b1e      	subs	r3, #30
 800aecc:	40bb      	lsls	r3, r7
 800aece:	9903      	ldr	r1, [sp, #12]
 800aed0:	0092      	lsls	r2, r2, #2
 800aed2:	5852      	ldr	r2, [r2, r1]
 800aed4:	421a      	tst	r2, r3
 800aed6:	d001      	beq.n	800aedc <__gethex+0x32a>
 800aed8:	2302      	movs	r3, #2
 800aeda:	431c      	orrs	r4, r3
 800aedc:	9b01      	ldr	r3, [sp, #4]
 800aede:	0031      	movs	r1, r6
 800aee0:	1b9b      	subs	r3, r3, r6
 800aee2:	2602      	movs	r6, #2
 800aee4:	0028      	movs	r0, r5
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	f7ff fe1a 	bl	800ab20 <rshift>
 800aeec:	9b02      	ldr	r3, [sp, #8]
 800aeee:	685f      	ldr	r7, [r3, #4]
 800aef0:	2c00      	cmp	r4, #0
 800aef2:	d040      	beq.n	800af76 <__gethex+0x3c4>
 800aef4:	9b02      	ldr	r3, [sp, #8]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d010      	beq.n	800af1e <__gethex+0x36c>
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d012      	beq.n	800af26 <__gethex+0x374>
 800af00:	2b01      	cmp	r3, #1
 800af02:	d106      	bne.n	800af12 <__gethex+0x360>
 800af04:	07a2      	lsls	r2, r4, #30
 800af06:	d504      	bpl.n	800af12 <__gethex+0x360>
 800af08:	9a03      	ldr	r2, [sp, #12]
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	4314      	orrs	r4, r2
 800af0e:	421c      	tst	r4, r3
 800af10:	d10c      	bne.n	800af2c <__gethex+0x37a>
 800af12:	2310      	movs	r3, #16
 800af14:	e02e      	b.n	800af74 <__gethex+0x3c2>
 800af16:	2401      	movs	r4, #1
 800af18:	e7d4      	b.n	800aec4 <__gethex+0x312>
 800af1a:	2601      	movs	r6, #1
 800af1c:	e7e8      	b.n	800aef0 <__gethex+0x33e>
 800af1e:	2301      	movs	r3, #1
 800af20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	9313      	str	r3, [sp, #76]	; 0x4c
 800af26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0f2      	beq.n	800af12 <__gethex+0x360>
 800af2c:	692c      	ldr	r4, [r5, #16]
 800af2e:	00a3      	lsls	r3, r4, #2
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	002b      	movs	r3, r5
 800af34:	00a2      	lsls	r2, r4, #2
 800af36:	3314      	adds	r3, #20
 800af38:	1899      	adds	r1, r3, r2
 800af3a:	2200      	movs	r2, #0
 800af3c:	4694      	mov	ip, r2
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	1c50      	adds	r0, r2, #1
 800af42:	d01d      	beq.n	800af80 <__gethex+0x3ce>
 800af44:	3201      	adds	r2, #1
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	002b      	movs	r3, r5
 800af4a:	3314      	adds	r3, #20
 800af4c:	2e02      	cmp	r6, #2
 800af4e:	d13a      	bne.n	800afc6 <__gethex+0x414>
 800af50:	9a02      	ldr	r2, [sp, #8]
 800af52:	9901      	ldr	r1, [sp, #4]
 800af54:	6812      	ldr	r2, [r2, #0]
 800af56:	3a01      	subs	r2, #1
 800af58:	428a      	cmp	r2, r1
 800af5a:	d10a      	bne.n	800af72 <__gethex+0x3c0>
 800af5c:	114a      	asrs	r2, r1, #5
 800af5e:	211f      	movs	r1, #31
 800af60:	9801      	ldr	r0, [sp, #4]
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	4001      	ands	r1, r0
 800af66:	2001      	movs	r0, #1
 800af68:	0004      	movs	r4, r0
 800af6a:	408c      	lsls	r4, r1
 800af6c:	58d3      	ldr	r3, [r2, r3]
 800af6e:	4223      	tst	r3, r4
 800af70:	d148      	bne.n	800b004 <__gethex+0x452>
 800af72:	2320      	movs	r3, #32
 800af74:	431e      	orrs	r6, r3
 800af76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af78:	601d      	str	r5, [r3, #0]
 800af7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7c:	601f      	str	r7, [r3, #0]
 800af7e:	e6ac      	b.n	800acda <__gethex+0x128>
 800af80:	4662      	mov	r2, ip
 800af82:	c304      	stmia	r3!, {r2}
 800af84:	4299      	cmp	r1, r3
 800af86:	d8da      	bhi.n	800af3e <__gethex+0x38c>
 800af88:	68ab      	ldr	r3, [r5, #8]
 800af8a:	429c      	cmp	r4, r3
 800af8c:	db12      	blt.n	800afb4 <__gethex+0x402>
 800af8e:	686b      	ldr	r3, [r5, #4]
 800af90:	9805      	ldr	r0, [sp, #20]
 800af92:	1c59      	adds	r1, r3, #1
 800af94:	f000 f923 	bl	800b1de <_Balloc>
 800af98:	0029      	movs	r1, r5
 800af9a:	692b      	ldr	r3, [r5, #16]
 800af9c:	9003      	str	r0, [sp, #12]
 800af9e:	1c9a      	adds	r2, r3, #2
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	310c      	adds	r1, #12
 800afa4:	300c      	adds	r0, #12
 800afa6:	f7fd f895 	bl	80080d4 <memcpy>
 800afaa:	0029      	movs	r1, r5
 800afac:	9805      	ldr	r0, [sp, #20]
 800afae:	f000 f94e 	bl	800b24e <_Bfree>
 800afb2:	9d03      	ldr	r5, [sp, #12]
 800afb4:	692b      	ldr	r3, [r5, #16]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	612a      	str	r2, [r5, #16]
 800afba:	2201      	movs	r2, #1
 800afbc:	3304      	adds	r3, #4
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	18eb      	adds	r3, r5, r3
 800afc2:	605a      	str	r2, [r3, #4]
 800afc4:	e7c0      	b.n	800af48 <__gethex+0x396>
 800afc6:	692a      	ldr	r2, [r5, #16]
 800afc8:	42a2      	cmp	r2, r4
 800afca:	dd0a      	ble.n	800afe2 <__gethex+0x430>
 800afcc:	2101      	movs	r1, #1
 800afce:	0028      	movs	r0, r5
 800afd0:	f7ff fda6 	bl	800ab20 <rshift>
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	3701      	adds	r7, #1
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	2601      	movs	r6, #1
 800afdc:	42bb      	cmp	r3, r7
 800afde:	dac8      	bge.n	800af72 <__gethex+0x3c0>
 800afe0:	e6dc      	b.n	800ad9c <__gethex+0x1ea>
 800afe2:	241f      	movs	r4, #31
 800afe4:	9a01      	ldr	r2, [sp, #4]
 800afe6:	2601      	movs	r6, #1
 800afe8:	4022      	ands	r2, r4
 800afea:	1e14      	subs	r4, r2, #0
 800afec:	d0c1      	beq.n	800af72 <__gethex+0x3c0>
 800afee:	9a04      	ldr	r2, [sp, #16]
 800aff0:	189b      	adds	r3, r3, r2
 800aff2:	3b04      	subs	r3, #4
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	f000 f9bf 	bl	800b378 <__hi0bits>
 800affa:	2120      	movs	r1, #32
 800affc:	1b0c      	subs	r4, r1, r4
 800affe:	42a0      	cmp	r0, r4
 800b000:	dbe4      	blt.n	800afcc <__gethex+0x41a>
 800b002:	e7b6      	b.n	800af72 <__gethex+0x3c0>
 800b004:	0006      	movs	r6, r0
 800b006:	e7b4      	b.n	800af72 <__gethex+0x3c0>

0800b008 <L_shift>:
 800b008:	2308      	movs	r3, #8
 800b00a:	b570      	push	{r4, r5, r6, lr}
 800b00c:	2520      	movs	r5, #32
 800b00e:	1a9a      	subs	r2, r3, r2
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	1aad      	subs	r5, r5, r2
 800b014:	6843      	ldr	r3, [r0, #4]
 800b016:	6806      	ldr	r6, [r0, #0]
 800b018:	001c      	movs	r4, r3
 800b01a:	40ac      	lsls	r4, r5
 800b01c:	40d3      	lsrs	r3, r2
 800b01e:	4334      	orrs	r4, r6
 800b020:	6004      	str	r4, [r0, #0]
 800b022:	6043      	str	r3, [r0, #4]
 800b024:	3004      	adds	r0, #4
 800b026:	4288      	cmp	r0, r1
 800b028:	d3f4      	bcc.n	800b014 <L_shift+0xc>
 800b02a:	bd70      	pop	{r4, r5, r6, pc}

0800b02c <__match>:
 800b02c:	b530      	push	{r4, r5, lr}
 800b02e:	6803      	ldr	r3, [r0, #0]
 800b030:	780c      	ldrb	r4, [r1, #0]
 800b032:	3301      	adds	r3, #1
 800b034:	2c00      	cmp	r4, #0
 800b036:	d102      	bne.n	800b03e <__match+0x12>
 800b038:	6003      	str	r3, [r0, #0]
 800b03a:	2001      	movs	r0, #1
 800b03c:	bd30      	pop	{r4, r5, pc}
 800b03e:	781a      	ldrb	r2, [r3, #0]
 800b040:	0015      	movs	r5, r2
 800b042:	3d41      	subs	r5, #65	; 0x41
 800b044:	2d19      	cmp	r5, #25
 800b046:	d800      	bhi.n	800b04a <__match+0x1e>
 800b048:	3220      	adds	r2, #32
 800b04a:	3101      	adds	r1, #1
 800b04c:	42a2      	cmp	r2, r4
 800b04e:	d0ef      	beq.n	800b030 <__match+0x4>
 800b050:	2000      	movs	r0, #0
 800b052:	e7f3      	b.n	800b03c <__match+0x10>

0800b054 <__hexnan>:
 800b054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b056:	b08b      	sub	sp, #44	; 0x2c
 800b058:	9201      	str	r2, [sp, #4]
 800b05a:	680a      	ldr	r2, [r1, #0]
 800b05c:	9901      	ldr	r1, [sp, #4]
 800b05e:	1153      	asrs	r3, r2, #5
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	18cb      	adds	r3, r1, r3
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	231f      	movs	r3, #31
 800b068:	401a      	ands	r2, r3
 800b06a:	9008      	str	r0, [sp, #32]
 800b06c:	9206      	str	r2, [sp, #24]
 800b06e:	d002      	beq.n	800b076 <__hexnan+0x22>
 800b070:	9b04      	ldr	r3, [sp, #16]
 800b072:	3304      	adds	r3, #4
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	2500      	movs	r5, #0
 800b07a:	1f1e      	subs	r6, r3, #4
 800b07c:	0037      	movs	r7, r6
 800b07e:	0034      	movs	r4, r6
 800b080:	9b08      	ldr	r3, [sp, #32]
 800b082:	6035      	str	r5, [r6, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	9507      	str	r5, [sp, #28]
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	9502      	str	r5, [sp, #8]
 800b08c:	9b05      	ldr	r3, [sp, #20]
 800b08e:	3301      	adds	r3, #1
 800b090:	9309      	str	r3, [sp, #36]	; 0x24
 800b092:	9b05      	ldr	r3, [sp, #20]
 800b094:	785b      	ldrb	r3, [r3, #1]
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d028      	beq.n	800b0ee <__hexnan+0x9a>
 800b09c:	9803      	ldr	r0, [sp, #12]
 800b09e:	f7ff fd73 	bl	800ab88 <__hexdig_fun>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d145      	bne.n	800b132 <__hexnan+0xde>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d819      	bhi.n	800b0e0 <__hexnan+0x8c>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	9a07      	ldr	r2, [sp, #28]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	dd12      	ble.n	800b0da <__hexnan+0x86>
 800b0b4:	42bc      	cmp	r4, r7
 800b0b6:	d206      	bcs.n	800b0c6 <__hexnan+0x72>
 800b0b8:	2d07      	cmp	r5, #7
 800b0ba:	dc04      	bgt.n	800b0c6 <__hexnan+0x72>
 800b0bc:	002a      	movs	r2, r5
 800b0be:	0039      	movs	r1, r7
 800b0c0:	0020      	movs	r0, r4
 800b0c2:	f7ff ffa1 	bl	800b008 <L_shift>
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	2508      	movs	r5, #8
 800b0ca:	429c      	cmp	r4, r3
 800b0cc:	d905      	bls.n	800b0da <__hexnan+0x86>
 800b0ce:	1f27      	subs	r7, r4, #4
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	003c      	movs	r4, r7
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	603d      	str	r5, [r7, #0]
 800b0d8:	9307      	str	r3, [sp, #28]
 800b0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0dc:	9305      	str	r3, [sp, #20]
 800b0de:	e7d5      	b.n	800b08c <__hexnan+0x38>
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	2b29      	cmp	r3, #41	; 0x29
 800b0e4:	d14a      	bne.n	800b17c <__hexnan+0x128>
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	9a08      	ldr	r2, [sp, #32]
 800b0ea:	3302      	adds	r3, #2
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d043      	beq.n	800b17c <__hexnan+0x128>
 800b0f4:	42bc      	cmp	r4, r7
 800b0f6:	d206      	bcs.n	800b106 <__hexnan+0xb2>
 800b0f8:	2d07      	cmp	r5, #7
 800b0fa:	dc04      	bgt.n	800b106 <__hexnan+0xb2>
 800b0fc:	002a      	movs	r2, r5
 800b0fe:	0039      	movs	r1, r7
 800b100:	0020      	movs	r0, r4
 800b102:	f7ff ff81 	bl	800b008 <L_shift>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	429c      	cmp	r4, r3
 800b10a:	d926      	bls.n	800b15a <__hexnan+0x106>
 800b10c:	cc04      	ldmia	r4!, {r2}
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	3304      	adds	r3, #4
 800b112:	42a6      	cmp	r6, r4
 800b114:	d2fa      	bcs.n	800b10c <__hexnan+0xb8>
 800b116:	2200      	movs	r2, #0
 800b118:	c304      	stmia	r3!, {r2}
 800b11a:	429e      	cmp	r6, r3
 800b11c:	d2fc      	bcs.n	800b118 <__hexnan+0xc4>
 800b11e:	6833      	ldr	r3, [r6, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d104      	bne.n	800b12e <__hexnan+0xda>
 800b124:	9b01      	ldr	r3, [sp, #4]
 800b126:	429e      	cmp	r6, r3
 800b128:	d126      	bne.n	800b178 <__hexnan+0x124>
 800b12a:	2301      	movs	r3, #1
 800b12c:	6033      	str	r3, [r6, #0]
 800b12e:	2005      	movs	r0, #5
 800b130:	e025      	b.n	800b17e <__hexnan+0x12a>
 800b132:	9b02      	ldr	r3, [sp, #8]
 800b134:	3501      	adds	r5, #1
 800b136:	3301      	adds	r3, #1
 800b138:	9302      	str	r3, [sp, #8]
 800b13a:	2d08      	cmp	r5, #8
 800b13c:	dd06      	ble.n	800b14c <__hexnan+0xf8>
 800b13e:	9b01      	ldr	r3, [sp, #4]
 800b140:	429c      	cmp	r4, r3
 800b142:	d9ca      	bls.n	800b0da <__hexnan+0x86>
 800b144:	2300      	movs	r3, #0
 800b146:	2501      	movs	r5, #1
 800b148:	3c04      	subs	r4, #4
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	220f      	movs	r2, #15
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	4010      	ands	r0, r2
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	4318      	orrs	r0, r3
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	e7bf      	b.n	800b0da <__hexnan+0x86>
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0de      	beq.n	800b11e <__hexnan+0xca>
 800b160:	2120      	movs	r1, #32
 800b162:	9a06      	ldr	r2, [sp, #24]
 800b164:	9b04      	ldr	r3, [sp, #16]
 800b166:	1a89      	subs	r1, r1, r2
 800b168:	2201      	movs	r2, #1
 800b16a:	4252      	negs	r2, r2
 800b16c:	40ca      	lsrs	r2, r1
 800b16e:	3b04      	subs	r3, #4
 800b170:	6819      	ldr	r1, [r3, #0]
 800b172:	400a      	ands	r2, r1
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	e7d2      	b.n	800b11e <__hexnan+0xca>
 800b178:	3e04      	subs	r6, #4
 800b17a:	e7d0      	b.n	800b11e <__hexnan+0xca>
 800b17c:	2004      	movs	r0, #4
 800b17e:	b00b      	add	sp, #44	; 0x2c
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b182 <__locale_ctype_ptr_l>:
 800b182:	30ec      	adds	r0, #236	; 0xec
 800b184:	6800      	ldr	r0, [r0, #0]
 800b186:	4770      	bx	lr

0800b188 <__localeconv_l>:
 800b188:	30f0      	adds	r0, #240	; 0xf0
 800b18a:	4770      	bx	lr

0800b18c <_localeconv_r>:
 800b18c:	4b03      	ldr	r3, [pc, #12]	; (800b19c <_localeconv_r+0x10>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a18      	ldr	r0, [r3, #32]
 800b192:	2800      	cmp	r0, #0
 800b194:	d100      	bne.n	800b198 <_localeconv_r+0xc>
 800b196:	4802      	ldr	r0, [pc, #8]	; (800b1a0 <_localeconv_r+0x14>)
 800b198:	30f0      	adds	r0, #240	; 0xf0
 800b19a:	4770      	bx	lr
 800b19c:	2000001c 	.word	0x2000001c
 800b1a0:	20000080 	.word	0x20000080

0800b1a4 <__ascii_mbtowc>:
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d100      	bne.n	800b1ac <__ascii_mbtowc+0x8>
 800b1aa:	a901      	add	r1, sp, #4
 800b1ac:	1e10      	subs	r0, r2, #0
 800b1ae:	d006      	beq.n	800b1be <__ascii_mbtowc+0x1a>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <__ascii_mbtowc+0x1e>
 800b1b4:	7813      	ldrb	r3, [r2, #0]
 800b1b6:	600b      	str	r3, [r1, #0]
 800b1b8:	7810      	ldrb	r0, [r2, #0]
 800b1ba:	1e43      	subs	r3, r0, #1
 800b1bc:	4198      	sbcs	r0, r3
 800b1be:	b002      	add	sp, #8
 800b1c0:	4770      	bx	lr
 800b1c2:	2002      	movs	r0, #2
 800b1c4:	4240      	negs	r0, r0
 800b1c6:	e7fa      	b.n	800b1be <__ascii_mbtowc+0x1a>

0800b1c8 <memchr>:
 800b1c8:	b2c9      	uxtb	r1, r1
 800b1ca:	1882      	adds	r2, r0, r2
 800b1cc:	4290      	cmp	r0, r2
 800b1ce:	d101      	bne.n	800b1d4 <memchr+0xc>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	4770      	bx	lr
 800b1d4:	7803      	ldrb	r3, [r0, #0]
 800b1d6:	428b      	cmp	r3, r1
 800b1d8:	d0fb      	beq.n	800b1d2 <memchr+0xa>
 800b1da:	3001      	adds	r0, #1
 800b1dc:	e7f6      	b.n	800b1cc <memchr+0x4>

0800b1de <_Balloc>:
 800b1de:	b570      	push	{r4, r5, r6, lr}
 800b1e0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1e2:	0004      	movs	r4, r0
 800b1e4:	000d      	movs	r5, r1
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d107      	bne.n	800b1fa <_Balloc+0x1c>
 800b1ea:	2010      	movs	r0, #16
 800b1ec:	f7fc ff68 	bl	80080c0 <malloc>
 800b1f0:	6260      	str	r0, [r4, #36]	; 0x24
 800b1f2:	6046      	str	r6, [r0, #4]
 800b1f4:	6086      	str	r6, [r0, #8]
 800b1f6:	6006      	str	r6, [r0, #0]
 800b1f8:	60c6      	str	r6, [r0, #12]
 800b1fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1fc:	68f3      	ldr	r3, [r6, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d013      	beq.n	800b22a <_Balloc+0x4c>
 800b202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b204:	00aa      	lsls	r2, r5, #2
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	189b      	adds	r3, r3, r2
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d118      	bne.n	800b242 <_Balloc+0x64>
 800b210:	2101      	movs	r1, #1
 800b212:	000e      	movs	r6, r1
 800b214:	40ae      	lsls	r6, r5
 800b216:	1d72      	adds	r2, r6, #5
 800b218:	0092      	lsls	r2, r2, #2
 800b21a:	0020      	movs	r0, r4
 800b21c:	f000 fbd5 	bl	800b9ca <_calloc_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	d00c      	beq.n	800b23e <_Balloc+0x60>
 800b224:	6045      	str	r5, [r0, #4]
 800b226:	6086      	str	r6, [r0, #8]
 800b228:	e00d      	b.n	800b246 <_Balloc+0x68>
 800b22a:	2221      	movs	r2, #33	; 0x21
 800b22c:	2104      	movs	r1, #4
 800b22e:	0020      	movs	r0, r4
 800b230:	f000 fbcb 	bl	800b9ca <_calloc_r>
 800b234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b236:	60f0      	str	r0, [r6, #12]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e1      	bne.n	800b202 <_Balloc+0x24>
 800b23e:	2000      	movs	r0, #0
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	6802      	ldr	r2, [r0, #0]
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	2300      	movs	r3, #0
 800b248:	6103      	str	r3, [r0, #16]
 800b24a:	60c3      	str	r3, [r0, #12]
 800b24c:	e7f8      	b.n	800b240 <_Balloc+0x62>

0800b24e <_Bfree>:
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b252:	0006      	movs	r6, r0
 800b254:	000d      	movs	r5, r1
 800b256:	2c00      	cmp	r4, #0
 800b258:	d107      	bne.n	800b26a <_Bfree+0x1c>
 800b25a:	2010      	movs	r0, #16
 800b25c:	f7fc ff30 	bl	80080c0 <malloc>
 800b260:	6270      	str	r0, [r6, #36]	; 0x24
 800b262:	6044      	str	r4, [r0, #4]
 800b264:	6084      	str	r4, [r0, #8]
 800b266:	6004      	str	r4, [r0, #0]
 800b268:	60c4      	str	r4, [r0, #12]
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	d007      	beq.n	800b27e <_Bfree+0x30>
 800b26e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b270:	686a      	ldr	r2, [r5, #4]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	0092      	lsls	r2, r2, #2
 800b276:	189b      	adds	r3, r3, r2
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	602a      	str	r2, [r5, #0]
 800b27c:	601d      	str	r5, [r3, #0]
 800b27e:	bd70      	pop	{r4, r5, r6, pc}

0800b280 <__multadd>:
 800b280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b282:	001e      	movs	r6, r3
 800b284:	2314      	movs	r3, #20
 800b286:	469c      	mov	ip, r3
 800b288:	0007      	movs	r7, r0
 800b28a:	000c      	movs	r4, r1
 800b28c:	2000      	movs	r0, #0
 800b28e:	690d      	ldr	r5, [r1, #16]
 800b290:	448c      	add	ip, r1
 800b292:	4663      	mov	r3, ip
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3001      	adds	r0, #1
 800b298:	b299      	uxth	r1, r3
 800b29a:	4663      	mov	r3, ip
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4351      	muls	r1, r2
 800b2a0:	0c1b      	lsrs	r3, r3, #16
 800b2a2:	4353      	muls	r3, r2
 800b2a4:	1989      	adds	r1, r1, r6
 800b2a6:	0c0e      	lsrs	r6, r1, #16
 800b2a8:	199b      	adds	r3, r3, r6
 800b2aa:	b289      	uxth	r1, r1
 800b2ac:	0c1e      	lsrs	r6, r3, #16
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	185b      	adds	r3, r3, r1
 800b2b2:	4661      	mov	r1, ip
 800b2b4:	c108      	stmia	r1!, {r3}
 800b2b6:	468c      	mov	ip, r1
 800b2b8:	4285      	cmp	r5, r0
 800b2ba:	dcea      	bgt.n	800b292 <__multadd+0x12>
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	d01b      	beq.n	800b2f8 <__multadd+0x78>
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	42ab      	cmp	r3, r5
 800b2c4:	dc12      	bgt.n	800b2ec <__multadd+0x6c>
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	0038      	movs	r0, r7
 800b2ca:	1c59      	adds	r1, r3, #1
 800b2cc:	f7ff ff87 	bl	800b1de <_Balloc>
 800b2d0:	0021      	movs	r1, r4
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	9001      	str	r0, [sp, #4]
 800b2d6:	1c9a      	adds	r2, r3, #2
 800b2d8:	0092      	lsls	r2, r2, #2
 800b2da:	310c      	adds	r1, #12
 800b2dc:	300c      	adds	r0, #12
 800b2de:	f7fc fef9 	bl	80080d4 <memcpy>
 800b2e2:	0021      	movs	r1, r4
 800b2e4:	0038      	movs	r0, r7
 800b2e6:	f7ff ffb2 	bl	800b24e <_Bfree>
 800b2ea:	9c01      	ldr	r4, [sp, #4]
 800b2ec:	1d2b      	adds	r3, r5, #4
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	18e3      	adds	r3, r4, r3
 800b2f2:	3501      	adds	r5, #1
 800b2f4:	605e      	str	r6, [r3, #4]
 800b2f6:	6125      	str	r5, [r4, #16]
 800b2f8:	0020      	movs	r0, r4
 800b2fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800b2fc <__s2b>:
 800b2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2fe:	0006      	movs	r6, r0
 800b300:	0018      	movs	r0, r3
 800b302:	000c      	movs	r4, r1
 800b304:	3008      	adds	r0, #8
 800b306:	2109      	movs	r1, #9
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	0015      	movs	r5, r2
 800b30c:	f7f4 ff98 	bl	8000240 <__divsi3>
 800b310:	2301      	movs	r3, #1
 800b312:	2100      	movs	r1, #0
 800b314:	4283      	cmp	r3, r0
 800b316:	db1f      	blt.n	800b358 <__s2b+0x5c>
 800b318:	0030      	movs	r0, r6
 800b31a:	f7ff ff60 	bl	800b1de <_Balloc>
 800b31e:	9b08      	ldr	r3, [sp, #32]
 800b320:	6143      	str	r3, [r0, #20]
 800b322:	2301      	movs	r3, #1
 800b324:	6103      	str	r3, [r0, #16]
 800b326:	2d09      	cmp	r5, #9
 800b328:	dd19      	ble.n	800b35e <__s2b+0x62>
 800b32a:	0023      	movs	r3, r4
 800b32c:	3309      	adds	r3, #9
 800b32e:	001f      	movs	r7, r3
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	1964      	adds	r4, r4, r5
 800b334:	783b      	ldrb	r3, [r7, #0]
 800b336:	0001      	movs	r1, r0
 800b338:	3b30      	subs	r3, #48	; 0x30
 800b33a:	220a      	movs	r2, #10
 800b33c:	0030      	movs	r0, r6
 800b33e:	3701      	adds	r7, #1
 800b340:	f7ff ff9e 	bl	800b280 <__multadd>
 800b344:	42a7      	cmp	r7, r4
 800b346:	d1f5      	bne.n	800b334 <__s2b+0x38>
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	195c      	adds	r4, r3, r5
 800b34c:	3c08      	subs	r4, #8
 800b34e:	002f      	movs	r7, r5
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	429f      	cmp	r7, r3
 800b354:	db06      	blt.n	800b364 <__s2b+0x68>
 800b356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	3101      	adds	r1, #1
 800b35c:	e7da      	b.n	800b314 <__s2b+0x18>
 800b35e:	340a      	adds	r4, #10
 800b360:	2509      	movs	r5, #9
 800b362:	e7f4      	b.n	800b34e <__s2b+0x52>
 800b364:	1b63      	subs	r3, r4, r5
 800b366:	5ddb      	ldrb	r3, [r3, r7]
 800b368:	0001      	movs	r1, r0
 800b36a:	3b30      	subs	r3, #48	; 0x30
 800b36c:	220a      	movs	r2, #10
 800b36e:	0030      	movs	r0, r6
 800b370:	f7ff ff86 	bl	800b280 <__multadd>
 800b374:	3701      	adds	r7, #1
 800b376:	e7eb      	b.n	800b350 <__s2b+0x54>

0800b378 <__hi0bits>:
 800b378:	0003      	movs	r3, r0
 800b37a:	0c02      	lsrs	r2, r0, #16
 800b37c:	2000      	movs	r0, #0
 800b37e:	4282      	cmp	r2, r0
 800b380:	d101      	bne.n	800b386 <__hi0bits+0xe>
 800b382:	041b      	lsls	r3, r3, #16
 800b384:	3010      	adds	r0, #16
 800b386:	0e1a      	lsrs	r2, r3, #24
 800b388:	d101      	bne.n	800b38e <__hi0bits+0x16>
 800b38a:	3008      	adds	r0, #8
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	0f1a      	lsrs	r2, r3, #28
 800b390:	d101      	bne.n	800b396 <__hi0bits+0x1e>
 800b392:	3004      	adds	r0, #4
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	0f9a      	lsrs	r2, r3, #30
 800b398:	d101      	bne.n	800b39e <__hi0bits+0x26>
 800b39a:	3002      	adds	r0, #2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	db03      	blt.n	800b3aa <__hi0bits+0x32>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	d400      	bmi.n	800b3aa <__hi0bits+0x32>
 800b3a8:	2020      	movs	r0, #32
 800b3aa:	4770      	bx	lr

0800b3ac <__lo0bits>:
 800b3ac:	2207      	movs	r2, #7
 800b3ae:	6803      	ldr	r3, [r0, #0]
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	0001      	movs	r1, r0
 800b3b4:	401a      	ands	r2, r3
 800b3b6:	d00d      	beq.n	800b3d4 <__lo0bits+0x28>
 800b3b8:	2401      	movs	r4, #1
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	4223      	tst	r3, r4
 800b3be:	d105      	bne.n	800b3cc <__lo0bits+0x20>
 800b3c0:	3002      	adds	r0, #2
 800b3c2:	4203      	tst	r3, r0
 800b3c4:	d003      	beq.n	800b3ce <__lo0bits+0x22>
 800b3c6:	40e3      	lsrs	r3, r4
 800b3c8:	0020      	movs	r0, r4
 800b3ca:	600b      	str	r3, [r1, #0]
 800b3cc:	bd10      	pop	{r4, pc}
 800b3ce:	089b      	lsrs	r3, r3, #2
 800b3d0:	600b      	str	r3, [r1, #0]
 800b3d2:	e7fb      	b.n	800b3cc <__lo0bits+0x20>
 800b3d4:	b29c      	uxth	r4, r3
 800b3d6:	0010      	movs	r0, r2
 800b3d8:	2c00      	cmp	r4, #0
 800b3da:	d101      	bne.n	800b3e0 <__lo0bits+0x34>
 800b3dc:	2010      	movs	r0, #16
 800b3de:	0c1b      	lsrs	r3, r3, #16
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	d101      	bne.n	800b3ea <__lo0bits+0x3e>
 800b3e6:	3008      	adds	r0, #8
 800b3e8:	0a1b      	lsrs	r3, r3, #8
 800b3ea:	071a      	lsls	r2, r3, #28
 800b3ec:	d101      	bne.n	800b3f2 <__lo0bits+0x46>
 800b3ee:	3004      	adds	r0, #4
 800b3f0:	091b      	lsrs	r3, r3, #4
 800b3f2:	079a      	lsls	r2, r3, #30
 800b3f4:	d101      	bne.n	800b3fa <__lo0bits+0x4e>
 800b3f6:	3002      	adds	r0, #2
 800b3f8:	089b      	lsrs	r3, r3, #2
 800b3fa:	07da      	lsls	r2, r3, #31
 800b3fc:	d4e8      	bmi.n	800b3d0 <__lo0bits+0x24>
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	d001      	beq.n	800b406 <__lo0bits+0x5a>
 800b402:	3001      	adds	r0, #1
 800b404:	e7e4      	b.n	800b3d0 <__lo0bits+0x24>
 800b406:	2020      	movs	r0, #32
 800b408:	e7e0      	b.n	800b3cc <__lo0bits+0x20>

0800b40a <__i2b>:
 800b40a:	b510      	push	{r4, lr}
 800b40c:	000c      	movs	r4, r1
 800b40e:	2101      	movs	r1, #1
 800b410:	f7ff fee5 	bl	800b1de <_Balloc>
 800b414:	2301      	movs	r3, #1
 800b416:	6144      	str	r4, [r0, #20]
 800b418:	6103      	str	r3, [r0, #16]
 800b41a:	bd10      	pop	{r4, pc}

0800b41c <__multiply>:
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	690b      	ldr	r3, [r1, #16]
 800b420:	0014      	movs	r4, r2
 800b422:	6912      	ldr	r2, [r2, #16]
 800b424:	b089      	sub	sp, #36	; 0x24
 800b426:	000d      	movs	r5, r1
 800b428:	4293      	cmp	r3, r2
 800b42a:	da01      	bge.n	800b430 <__multiply+0x14>
 800b42c:	0025      	movs	r5, r4
 800b42e:	000c      	movs	r4, r1
 800b430:	692f      	ldr	r7, [r5, #16]
 800b432:	6926      	ldr	r6, [r4, #16]
 800b434:	6869      	ldr	r1, [r5, #4]
 800b436:	19bb      	adds	r3, r7, r6
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	68ab      	ldr	r3, [r5, #8]
 800b43c:	19ba      	adds	r2, r7, r6
 800b43e:	4293      	cmp	r3, r2
 800b440:	da00      	bge.n	800b444 <__multiply+0x28>
 800b442:	3101      	adds	r1, #1
 800b444:	f7ff fecb 	bl	800b1de <_Balloc>
 800b448:	0002      	movs	r2, r0
 800b44a:	19bb      	adds	r3, r7, r6
 800b44c:	3214      	adds	r2, #20
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	18d3      	adds	r3, r2, r3
 800b452:	469c      	mov	ip, r3
 800b454:	2100      	movs	r1, #0
 800b456:	0013      	movs	r3, r2
 800b458:	9004      	str	r0, [sp, #16]
 800b45a:	4563      	cmp	r3, ip
 800b45c:	d31d      	bcc.n	800b49a <__multiply+0x7e>
 800b45e:	3514      	adds	r5, #20
 800b460:	00bf      	lsls	r7, r7, #2
 800b462:	19eb      	adds	r3, r5, r7
 800b464:	3414      	adds	r4, #20
 800b466:	00b6      	lsls	r6, r6, #2
 800b468:	9305      	str	r3, [sp, #20]
 800b46a:	19a3      	adds	r3, r4, r6
 800b46c:	9503      	str	r5, [sp, #12]
 800b46e:	9401      	str	r4, [sp, #4]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	9901      	ldr	r1, [sp, #4]
 800b476:	4299      	cmp	r1, r3
 800b478:	d311      	bcc.n	800b49e <__multiply+0x82>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dd06      	ble.n	800b48e <__multiply+0x72>
 800b480:	2304      	movs	r3, #4
 800b482:	425b      	negs	r3, r3
 800b484:	449c      	add	ip, r3
 800b486:	4663      	mov	r3, ip
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d051      	beq.n	800b532 <__multiply+0x116>
 800b48e:	9b04      	ldr	r3, [sp, #16]
 800b490:	9a02      	ldr	r2, [sp, #8]
 800b492:	0018      	movs	r0, r3
 800b494:	611a      	str	r2, [r3, #16]
 800b496:	b009      	add	sp, #36	; 0x24
 800b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49a:	c302      	stmia	r3!, {r1}
 800b49c:	e7dd      	b.n	800b45a <__multiply+0x3e>
 800b49e:	9b01      	ldr	r3, [sp, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	b298      	uxth	r0, r3
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d01c      	beq.n	800b4e2 <__multiply+0xc6>
 800b4a8:	0015      	movs	r5, r2
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	9f03      	ldr	r7, [sp, #12]
 800b4ae:	cf02      	ldmia	r7!, {r1}
 800b4b0:	682c      	ldr	r4, [r5, #0]
 800b4b2:	b28b      	uxth	r3, r1
 800b4b4:	4343      	muls	r3, r0
 800b4b6:	0c09      	lsrs	r1, r1, #16
 800b4b8:	4341      	muls	r1, r0
 800b4ba:	b2a4      	uxth	r4, r4
 800b4bc:	191b      	adds	r3, r3, r4
 800b4be:	199b      	adds	r3, r3, r6
 800b4c0:	000e      	movs	r6, r1
 800b4c2:	6829      	ldr	r1, [r5, #0]
 800b4c4:	9506      	str	r5, [sp, #24]
 800b4c6:	0c09      	lsrs	r1, r1, #16
 800b4c8:	1871      	adds	r1, r6, r1
 800b4ca:	0c1e      	lsrs	r6, r3, #16
 800b4cc:	1989      	adds	r1, r1, r6
 800b4ce:	0c0e      	lsrs	r6, r1, #16
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	0409      	lsls	r1, r1, #16
 800b4d4:	430b      	orrs	r3, r1
 800b4d6:	c508      	stmia	r5!, {r3}
 800b4d8:	9b05      	ldr	r3, [sp, #20]
 800b4da:	42bb      	cmp	r3, r7
 800b4dc:	d8e7      	bhi.n	800b4ae <__multiply+0x92>
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	605e      	str	r6, [r3, #4]
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	0c1d      	lsrs	r5, r3, #16
 800b4e8:	d01e      	beq.n	800b528 <__multiply+0x10c>
 800b4ea:	0010      	movs	r0, r2
 800b4ec:	2700      	movs	r7, #0
 800b4ee:	6813      	ldr	r3, [r2, #0]
 800b4f0:	9e03      	ldr	r6, [sp, #12]
 800b4f2:	6831      	ldr	r1, [r6, #0]
 800b4f4:	6804      	ldr	r4, [r0, #0]
 800b4f6:	b289      	uxth	r1, r1
 800b4f8:	4369      	muls	r1, r5
 800b4fa:	0c24      	lsrs	r4, r4, #16
 800b4fc:	1909      	adds	r1, r1, r4
 800b4fe:	19c9      	adds	r1, r1, r7
 800b500:	040f      	lsls	r7, r1, #16
 800b502:	b29b      	uxth	r3, r3
 800b504:	433b      	orrs	r3, r7
 800b506:	6003      	str	r3, [r0, #0]
 800b508:	ce80      	ldmia	r6!, {r7}
 800b50a:	6843      	ldr	r3, [r0, #4]
 800b50c:	0c3f      	lsrs	r7, r7, #16
 800b50e:	436f      	muls	r7, r5
 800b510:	b29b      	uxth	r3, r3
 800b512:	18fb      	adds	r3, r7, r3
 800b514:	0c09      	lsrs	r1, r1, #16
 800b516:	185b      	adds	r3, r3, r1
 800b518:	9905      	ldr	r1, [sp, #20]
 800b51a:	9006      	str	r0, [sp, #24]
 800b51c:	0c1f      	lsrs	r7, r3, #16
 800b51e:	3004      	adds	r0, #4
 800b520:	42b1      	cmp	r1, r6
 800b522:	d8e6      	bhi.n	800b4f2 <__multiply+0xd6>
 800b524:	9906      	ldr	r1, [sp, #24]
 800b526:	604b      	str	r3, [r1, #4]
 800b528:	9b01      	ldr	r3, [sp, #4]
 800b52a:	3204      	adds	r2, #4
 800b52c:	3304      	adds	r3, #4
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	e79f      	b.n	800b472 <__multiply+0x56>
 800b532:	9b02      	ldr	r3, [sp, #8]
 800b534:	3b01      	subs	r3, #1
 800b536:	9302      	str	r3, [sp, #8]
 800b538:	e79f      	b.n	800b47a <__multiply+0x5e>
	...

0800b53c <__pow5mult>:
 800b53c:	2303      	movs	r3, #3
 800b53e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b540:	4013      	ands	r3, r2
 800b542:	0005      	movs	r5, r0
 800b544:	000e      	movs	r6, r1
 800b546:	0014      	movs	r4, r2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d008      	beq.n	800b55e <__pow5mult+0x22>
 800b54c:	4922      	ldr	r1, [pc, #136]	; (800b5d8 <__pow5mult+0x9c>)
 800b54e:	3b01      	subs	r3, #1
 800b550:	009a      	lsls	r2, r3, #2
 800b552:	5852      	ldr	r2, [r2, r1]
 800b554:	2300      	movs	r3, #0
 800b556:	0031      	movs	r1, r6
 800b558:	f7ff fe92 	bl	800b280 <__multadd>
 800b55c:	0006      	movs	r6, r0
 800b55e:	10a3      	asrs	r3, r4, #2
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	d036      	beq.n	800b5d2 <__pow5mult+0x96>
 800b564:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800b566:	2c00      	cmp	r4, #0
 800b568:	d107      	bne.n	800b57a <__pow5mult+0x3e>
 800b56a:	2010      	movs	r0, #16
 800b56c:	f7fc fda8 	bl	80080c0 <malloc>
 800b570:	6268      	str	r0, [r5, #36]	; 0x24
 800b572:	6044      	str	r4, [r0, #4]
 800b574:	6084      	str	r4, [r0, #8]
 800b576:	6004      	str	r4, [r0, #0]
 800b578:	60c4      	str	r4, [r0, #12]
 800b57a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800b57c:	68bc      	ldr	r4, [r7, #8]
 800b57e:	2c00      	cmp	r4, #0
 800b580:	d107      	bne.n	800b592 <__pow5mult+0x56>
 800b582:	4916      	ldr	r1, [pc, #88]	; (800b5dc <__pow5mult+0xa0>)
 800b584:	0028      	movs	r0, r5
 800b586:	f7ff ff40 	bl	800b40a <__i2b>
 800b58a:	2300      	movs	r3, #0
 800b58c:	0004      	movs	r4, r0
 800b58e:	60b8      	str	r0, [r7, #8]
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	2201      	movs	r2, #1
 800b594:	9b01      	ldr	r3, [sp, #4]
 800b596:	4213      	tst	r3, r2
 800b598:	d00a      	beq.n	800b5b0 <__pow5mult+0x74>
 800b59a:	0031      	movs	r1, r6
 800b59c:	0022      	movs	r2, r4
 800b59e:	0028      	movs	r0, r5
 800b5a0:	f7ff ff3c 	bl	800b41c <__multiply>
 800b5a4:	0007      	movs	r7, r0
 800b5a6:	0031      	movs	r1, r6
 800b5a8:	0028      	movs	r0, r5
 800b5aa:	f7ff fe50 	bl	800b24e <_Bfree>
 800b5ae:	003e      	movs	r6, r7
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	105b      	asrs	r3, r3, #1
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	d00c      	beq.n	800b5d2 <__pow5mult+0x96>
 800b5b8:	6820      	ldr	r0, [r4, #0]
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d107      	bne.n	800b5ce <__pow5mult+0x92>
 800b5be:	0022      	movs	r2, r4
 800b5c0:	0021      	movs	r1, r4
 800b5c2:	0028      	movs	r0, r5
 800b5c4:	f7ff ff2a 	bl	800b41c <__multiply>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	6020      	str	r0, [r4, #0]
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	0004      	movs	r4, r0
 800b5d0:	e7df      	b.n	800b592 <__pow5mult+0x56>
 800b5d2:	0030      	movs	r0, r6
 800b5d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	0800c320 	.word	0x0800c320
 800b5dc:	00000271 	.word	0x00000271

0800b5e0 <__lshift>:
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	000d      	movs	r5, r1
 800b5e4:	0017      	movs	r7, r2
 800b5e6:	692b      	ldr	r3, [r5, #16]
 800b5e8:	1154      	asrs	r4, r2, #5
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	18e3      	adds	r3, r4, r3
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	6849      	ldr	r1, [r1, #4]
 800b5f6:	68ab      	ldr	r3, [r5, #8]
 800b5f8:	9002      	str	r0, [sp, #8]
 800b5fa:	9a00      	ldr	r2, [sp, #0]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	db35      	blt.n	800b66c <__lshift+0x8c>
 800b600:	9802      	ldr	r0, [sp, #8]
 800b602:	f7ff fdec 	bl	800b1de <_Balloc>
 800b606:	2300      	movs	r3, #0
 800b608:	0002      	movs	r2, r0
 800b60a:	0006      	movs	r6, r0
 800b60c:	0019      	movs	r1, r3
 800b60e:	3214      	adds	r2, #20
 800b610:	42a3      	cmp	r3, r4
 800b612:	db2e      	blt.n	800b672 <__lshift+0x92>
 800b614:	43e3      	mvns	r3, r4
 800b616:	17db      	asrs	r3, r3, #31
 800b618:	401c      	ands	r4, r3
 800b61a:	002b      	movs	r3, r5
 800b61c:	00a4      	lsls	r4, r4, #2
 800b61e:	1914      	adds	r4, r2, r4
 800b620:	692a      	ldr	r2, [r5, #16]
 800b622:	3314      	adds	r3, #20
 800b624:	0092      	lsls	r2, r2, #2
 800b626:	189a      	adds	r2, r3, r2
 800b628:	4694      	mov	ip, r2
 800b62a:	221f      	movs	r2, #31
 800b62c:	4017      	ands	r7, r2
 800b62e:	d024      	beq.n	800b67a <__lshift+0x9a>
 800b630:	3201      	adds	r2, #1
 800b632:	1bd2      	subs	r2, r2, r7
 800b634:	9203      	str	r2, [sp, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	6819      	ldr	r1, [r3, #0]
 800b63a:	0020      	movs	r0, r4
 800b63c:	40b9      	lsls	r1, r7
 800b63e:	430a      	orrs	r2, r1
 800b640:	c404      	stmia	r4!, {r2}
 800b642:	cb04      	ldmia	r3!, {r2}
 800b644:	9903      	ldr	r1, [sp, #12]
 800b646:	40ca      	lsrs	r2, r1
 800b648:	459c      	cmp	ip, r3
 800b64a:	d8f5      	bhi.n	800b638 <__lshift+0x58>
 800b64c:	6042      	str	r2, [r0, #4]
 800b64e:	2a00      	cmp	r2, #0
 800b650:	d002      	beq.n	800b658 <__lshift+0x78>
 800b652:	9b01      	ldr	r3, [sp, #4]
 800b654:	3302      	adds	r3, #2
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	9b00      	ldr	r3, [sp, #0]
 800b65a:	9802      	ldr	r0, [sp, #8]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	6133      	str	r3, [r6, #16]
 800b660:	0029      	movs	r1, r5
 800b662:	f7ff fdf4 	bl	800b24e <_Bfree>
 800b666:	0030      	movs	r0, r6
 800b668:	b005      	add	sp, #20
 800b66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b66c:	3101      	adds	r1, #1
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	e7c3      	b.n	800b5fa <__lshift+0x1a>
 800b672:	0098      	lsls	r0, r3, #2
 800b674:	5011      	str	r1, [r2, r0]
 800b676:	3301      	adds	r3, #1
 800b678:	e7ca      	b.n	800b610 <__lshift+0x30>
 800b67a:	cb04      	ldmia	r3!, {r2}
 800b67c:	c404      	stmia	r4!, {r2}
 800b67e:	459c      	cmp	ip, r3
 800b680:	d8fb      	bhi.n	800b67a <__lshift+0x9a>
 800b682:	e7e9      	b.n	800b658 <__lshift+0x78>

0800b684 <__mcmp>:
 800b684:	690a      	ldr	r2, [r1, #16]
 800b686:	6903      	ldr	r3, [r0, #16]
 800b688:	b530      	push	{r4, r5, lr}
 800b68a:	1a9b      	subs	r3, r3, r2
 800b68c:	d10d      	bne.n	800b6aa <__mcmp+0x26>
 800b68e:	0092      	lsls	r2, r2, #2
 800b690:	3014      	adds	r0, #20
 800b692:	3114      	adds	r1, #20
 800b694:	1884      	adds	r4, r0, r2
 800b696:	1889      	adds	r1, r1, r2
 800b698:	3c04      	subs	r4, #4
 800b69a:	3904      	subs	r1, #4
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	680a      	ldr	r2, [r1, #0]
 800b6a0:	4295      	cmp	r5, r2
 800b6a2:	d004      	beq.n	800b6ae <__mcmp+0x2a>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	4295      	cmp	r5, r2
 800b6a8:	d304      	bcc.n	800b6b4 <__mcmp+0x30>
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	bd30      	pop	{r4, r5, pc}
 800b6ae:	42a0      	cmp	r0, r4
 800b6b0:	d3f2      	bcc.n	800b698 <__mcmp+0x14>
 800b6b2:	e7fa      	b.n	800b6aa <__mcmp+0x26>
 800b6b4:	425b      	negs	r3, r3
 800b6b6:	e7f8      	b.n	800b6aa <__mcmp+0x26>

0800b6b8 <__mdiff>:
 800b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ba:	000d      	movs	r5, r1
 800b6bc:	b085      	sub	sp, #20
 800b6be:	0007      	movs	r7, r0
 800b6c0:	0011      	movs	r1, r2
 800b6c2:	0028      	movs	r0, r5
 800b6c4:	0014      	movs	r4, r2
 800b6c6:	f7ff ffdd 	bl	800b684 <__mcmp>
 800b6ca:	1e06      	subs	r6, r0, #0
 800b6cc:	d108      	bne.n	800b6e0 <__mdiff+0x28>
 800b6ce:	0001      	movs	r1, r0
 800b6d0:	0038      	movs	r0, r7
 800b6d2:	f7ff fd84 	bl	800b1de <_Balloc>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	6146      	str	r6, [r0, #20]
 800b6da:	6103      	str	r3, [r0, #16]
 800b6dc:	b005      	add	sp, #20
 800b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	db04      	blt.n	800b6f2 <__mdiff+0x3a>
 800b6e8:	0023      	movs	r3, r4
 800b6ea:	002c      	movs	r4, r5
 800b6ec:	001d      	movs	r5, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	6861      	ldr	r1, [r4, #4]
 800b6f4:	0038      	movs	r0, r7
 800b6f6:	f7ff fd72 	bl	800b1de <_Balloc>
 800b6fa:	002f      	movs	r7, r5
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	9b01      	ldr	r3, [sp, #4]
 800b700:	6926      	ldr	r6, [r4, #16]
 800b702:	60c3      	str	r3, [r0, #12]
 800b704:	3414      	adds	r4, #20
 800b706:	00b3      	lsls	r3, r6, #2
 800b708:	18e3      	adds	r3, r4, r3
 800b70a:	9302      	str	r3, [sp, #8]
 800b70c:	692b      	ldr	r3, [r5, #16]
 800b70e:	3714      	adds	r7, #20
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	18fb      	adds	r3, r7, r3
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	0003      	movs	r3, r0
 800b718:	4694      	mov	ip, r2
 800b71a:	3314      	adds	r3, #20
 800b71c:	cc20      	ldmia	r4!, {r5}
 800b71e:	cf04      	ldmia	r7!, {r2}
 800b720:	9201      	str	r2, [sp, #4]
 800b722:	b2aa      	uxth	r2, r5
 800b724:	4494      	add	ip, r2
 800b726:	466a      	mov	r2, sp
 800b728:	4661      	mov	r1, ip
 800b72a:	8892      	ldrh	r2, [r2, #4]
 800b72c:	0c2d      	lsrs	r5, r5, #16
 800b72e:	1a8a      	subs	r2, r1, r2
 800b730:	9901      	ldr	r1, [sp, #4]
 800b732:	0c09      	lsrs	r1, r1, #16
 800b734:	1a69      	subs	r1, r5, r1
 800b736:	1415      	asrs	r5, r2, #16
 800b738:	1949      	adds	r1, r1, r5
 800b73a:	140d      	asrs	r5, r1, #16
 800b73c:	b292      	uxth	r2, r2
 800b73e:	0409      	lsls	r1, r1, #16
 800b740:	430a      	orrs	r2, r1
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	9a03      	ldr	r2, [sp, #12]
 800b746:	46ac      	mov	ip, r5
 800b748:	3304      	adds	r3, #4
 800b74a:	42ba      	cmp	r2, r7
 800b74c:	d8e6      	bhi.n	800b71c <__mdiff+0x64>
 800b74e:	9902      	ldr	r1, [sp, #8]
 800b750:	001a      	movs	r2, r3
 800b752:	428c      	cmp	r4, r1
 800b754:	d305      	bcc.n	800b762 <__mdiff+0xaa>
 800b756:	3a04      	subs	r2, #4
 800b758:	6813      	ldr	r3, [r2, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00e      	beq.n	800b77c <__mdiff+0xc4>
 800b75e:	6106      	str	r6, [r0, #16]
 800b760:	e7bc      	b.n	800b6dc <__mdiff+0x24>
 800b762:	cc04      	ldmia	r4!, {r2}
 800b764:	b291      	uxth	r1, r2
 800b766:	4461      	add	r1, ip
 800b768:	140d      	asrs	r5, r1, #16
 800b76a:	0c12      	lsrs	r2, r2, #16
 800b76c:	1952      	adds	r2, r2, r5
 800b76e:	1415      	asrs	r5, r2, #16
 800b770:	b289      	uxth	r1, r1
 800b772:	0412      	lsls	r2, r2, #16
 800b774:	430a      	orrs	r2, r1
 800b776:	46ac      	mov	ip, r5
 800b778:	c304      	stmia	r3!, {r2}
 800b77a:	e7e8      	b.n	800b74e <__mdiff+0x96>
 800b77c:	3e01      	subs	r6, #1
 800b77e:	e7ea      	b.n	800b756 <__mdiff+0x9e>

0800b780 <__ulp>:
 800b780:	000b      	movs	r3, r1
 800b782:	4910      	ldr	r1, [pc, #64]	; (800b7c4 <__ulp+0x44>)
 800b784:	b510      	push	{r4, lr}
 800b786:	4019      	ands	r1, r3
 800b788:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <__ulp+0x48>)
 800b78a:	18c9      	adds	r1, r1, r3
 800b78c:	2900      	cmp	r1, #0
 800b78e:	dd04      	ble.n	800b79a <__ulp+0x1a>
 800b790:	2200      	movs	r2, #0
 800b792:	000b      	movs	r3, r1
 800b794:	0010      	movs	r0, r2
 800b796:	0019      	movs	r1, r3
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	4249      	negs	r1, r1
 800b79c:	1509      	asrs	r1, r1, #20
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2913      	cmp	r1, #19
 800b7a4:	dc04      	bgt.n	800b7b0 <__ulp+0x30>
 800b7a6:	2080      	movs	r0, #128	; 0x80
 800b7a8:	0300      	lsls	r0, r0, #12
 800b7aa:	4108      	asrs	r0, r1
 800b7ac:	0003      	movs	r3, r0
 800b7ae:	e7f1      	b.n	800b794 <__ulp+0x14>
 800b7b0:	3914      	subs	r1, #20
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	291e      	cmp	r1, #30
 800b7b6:	dc02      	bgt.n	800b7be <__ulp+0x3e>
 800b7b8:	241f      	movs	r4, #31
 800b7ba:	1a61      	subs	r1, r4, r1
 800b7bc:	4088      	lsls	r0, r1
 800b7be:	0002      	movs	r2, r0
 800b7c0:	e7e8      	b.n	800b794 <__ulp+0x14>
 800b7c2:	46c0      	nop			; (mov r8, r8)
 800b7c4:	7ff00000 	.word	0x7ff00000
 800b7c8:	fcc00000 	.word	0xfcc00000

0800b7cc <__b2d>:
 800b7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ce:	0006      	movs	r6, r0
 800b7d0:	6903      	ldr	r3, [r0, #16]
 800b7d2:	3614      	adds	r6, #20
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	18f3      	adds	r3, r6, r3
 800b7d8:	1f1d      	subs	r5, r3, #4
 800b7da:	682c      	ldr	r4, [r5, #0]
 800b7dc:	000f      	movs	r7, r1
 800b7de:	0020      	movs	r0, r4
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	f7ff fdc9 	bl	800b378 <__hi0bits>
 800b7e6:	2320      	movs	r3, #32
 800b7e8:	1a1b      	subs	r3, r3, r0
 800b7ea:	603b      	str	r3, [r7, #0]
 800b7ec:	491c      	ldr	r1, [pc, #112]	; (800b860 <__b2d+0x94>)
 800b7ee:	280a      	cmp	r0, #10
 800b7f0:	dc16      	bgt.n	800b820 <__b2d+0x54>
 800b7f2:	230b      	movs	r3, #11
 800b7f4:	0027      	movs	r7, r4
 800b7f6:	1a1b      	subs	r3, r3, r0
 800b7f8:	40df      	lsrs	r7, r3
 800b7fa:	4339      	orrs	r1, r7
 800b7fc:	469c      	mov	ip, r3
 800b7fe:	000b      	movs	r3, r1
 800b800:	2100      	movs	r1, #0
 800b802:	42ae      	cmp	r6, r5
 800b804:	d202      	bcs.n	800b80c <__b2d+0x40>
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	3908      	subs	r1, #8
 800b80a:	6809      	ldr	r1, [r1, #0]
 800b80c:	3015      	adds	r0, #21
 800b80e:	4084      	lsls	r4, r0
 800b810:	4660      	mov	r0, ip
 800b812:	40c1      	lsrs	r1, r0
 800b814:	430c      	orrs	r4, r1
 800b816:	0022      	movs	r2, r4
 800b818:	0010      	movs	r0, r2
 800b81a:	0019      	movs	r1, r3
 800b81c:	b003      	add	sp, #12
 800b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b820:	2700      	movs	r7, #0
 800b822:	42ae      	cmp	r6, r5
 800b824:	d202      	bcs.n	800b82c <__b2d+0x60>
 800b826:	9d01      	ldr	r5, [sp, #4]
 800b828:	3d08      	subs	r5, #8
 800b82a:	682f      	ldr	r7, [r5, #0]
 800b82c:	380b      	subs	r0, #11
 800b82e:	4684      	mov	ip, r0
 800b830:	1e03      	subs	r3, r0, #0
 800b832:	d012      	beq.n	800b85a <__b2d+0x8e>
 800b834:	409c      	lsls	r4, r3
 800b836:	2020      	movs	r0, #32
 800b838:	4321      	orrs	r1, r4
 800b83a:	003c      	movs	r4, r7
 800b83c:	1ac0      	subs	r0, r0, r3
 800b83e:	40c4      	lsrs	r4, r0
 800b840:	4321      	orrs	r1, r4
 800b842:	000b      	movs	r3, r1
 800b844:	2100      	movs	r1, #0
 800b846:	42b5      	cmp	r5, r6
 800b848:	d901      	bls.n	800b84e <__b2d+0x82>
 800b84a:	3d04      	subs	r5, #4
 800b84c:	6829      	ldr	r1, [r5, #0]
 800b84e:	4664      	mov	r4, ip
 800b850:	40c1      	lsrs	r1, r0
 800b852:	40a7      	lsls	r7, r4
 800b854:	430f      	orrs	r7, r1
 800b856:	003a      	movs	r2, r7
 800b858:	e7de      	b.n	800b818 <__b2d+0x4c>
 800b85a:	4321      	orrs	r1, r4
 800b85c:	000b      	movs	r3, r1
 800b85e:	e7fa      	b.n	800b856 <__b2d+0x8a>
 800b860:	3ff00000 	.word	0x3ff00000

0800b864 <__d2b>:
 800b864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b866:	001d      	movs	r5, r3
 800b868:	2101      	movs	r1, #1
 800b86a:	0014      	movs	r4, r2
 800b86c:	9f08      	ldr	r7, [sp, #32]
 800b86e:	f7ff fcb6 	bl	800b1de <_Balloc>
 800b872:	032b      	lsls	r3, r5, #12
 800b874:	006d      	lsls	r5, r5, #1
 800b876:	0006      	movs	r6, r0
 800b878:	0b1b      	lsrs	r3, r3, #12
 800b87a:	0d6d      	lsrs	r5, r5, #21
 800b87c:	d124      	bne.n	800b8c8 <__d2b+0x64>
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	2c00      	cmp	r4, #0
 800b882:	d027      	beq.n	800b8d4 <__d2b+0x70>
 800b884:	4668      	mov	r0, sp
 800b886:	9400      	str	r4, [sp, #0]
 800b888:	f7ff fd90 	bl	800b3ac <__lo0bits>
 800b88c:	9c00      	ldr	r4, [sp, #0]
 800b88e:	2800      	cmp	r0, #0
 800b890:	d01e      	beq.n	800b8d0 <__d2b+0x6c>
 800b892:	9b01      	ldr	r3, [sp, #4]
 800b894:	2120      	movs	r1, #32
 800b896:	001a      	movs	r2, r3
 800b898:	1a09      	subs	r1, r1, r0
 800b89a:	408a      	lsls	r2, r1
 800b89c:	40c3      	lsrs	r3, r0
 800b89e:	4322      	orrs	r2, r4
 800b8a0:	6172      	str	r2, [r6, #20]
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	9c01      	ldr	r4, [sp, #4]
 800b8a6:	61b4      	str	r4, [r6, #24]
 800b8a8:	1e63      	subs	r3, r4, #1
 800b8aa:	419c      	sbcs	r4, r3
 800b8ac:	3401      	adds	r4, #1
 800b8ae:	6134      	str	r4, [r6, #16]
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d018      	beq.n	800b8e6 <__d2b+0x82>
 800b8b4:	4b12      	ldr	r3, [pc, #72]	; (800b900 <__d2b+0x9c>)
 800b8b6:	18ed      	adds	r5, r5, r3
 800b8b8:	2335      	movs	r3, #53	; 0x35
 800b8ba:	182d      	adds	r5, r5, r0
 800b8bc:	603d      	str	r5, [r7, #0]
 800b8be:	1a18      	subs	r0, r3, r0
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	6018      	str	r0, [r3, #0]
 800b8c4:	0030      	movs	r0, r6
 800b8c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8c8:	2280      	movs	r2, #128	; 0x80
 800b8ca:	0352      	lsls	r2, r2, #13
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	e7d6      	b.n	800b87e <__d2b+0x1a>
 800b8d0:	6174      	str	r4, [r6, #20]
 800b8d2:	e7e7      	b.n	800b8a4 <__d2b+0x40>
 800b8d4:	a801      	add	r0, sp, #4
 800b8d6:	f7ff fd69 	bl	800b3ac <__lo0bits>
 800b8da:	2401      	movs	r4, #1
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	6134      	str	r4, [r6, #16]
 800b8e0:	6173      	str	r3, [r6, #20]
 800b8e2:	3020      	adds	r0, #32
 800b8e4:	e7e4      	b.n	800b8b0 <__d2b+0x4c>
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <__d2b+0xa0>)
 800b8e8:	18c0      	adds	r0, r0, r3
 800b8ea:	4b07      	ldr	r3, [pc, #28]	; (800b908 <__d2b+0xa4>)
 800b8ec:	6038      	str	r0, [r7, #0]
 800b8ee:	18e3      	adds	r3, r4, r3
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	18f3      	adds	r3, r6, r3
 800b8f4:	6958      	ldr	r0, [r3, #20]
 800b8f6:	f7ff fd3f 	bl	800b378 <__hi0bits>
 800b8fa:	0164      	lsls	r4, r4, #5
 800b8fc:	1a20      	subs	r0, r4, r0
 800b8fe:	e7df      	b.n	800b8c0 <__d2b+0x5c>
 800b900:	fffffbcd 	.word	0xfffffbcd
 800b904:	fffffbce 	.word	0xfffffbce
 800b908:	3fffffff 	.word	0x3fffffff

0800b90c <__ratio>:
 800b90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b90e:	b085      	sub	sp, #20
 800b910:	000f      	movs	r7, r1
 800b912:	a902      	add	r1, sp, #8
 800b914:	0006      	movs	r6, r0
 800b916:	f7ff ff59 	bl	800b7cc <__b2d>
 800b91a:	0004      	movs	r4, r0
 800b91c:	000d      	movs	r5, r1
 800b91e:	0038      	movs	r0, r7
 800b920:	a903      	add	r1, sp, #12
 800b922:	9400      	str	r4, [sp, #0]
 800b924:	9501      	str	r5, [sp, #4]
 800b926:	f7ff ff51 	bl	800b7cc <__b2d>
 800b92a:	6936      	ldr	r6, [r6, #16]
 800b92c:	693f      	ldr	r7, [r7, #16]
 800b92e:	0002      	movs	r2, r0
 800b930:	1bf7      	subs	r7, r6, r7
 800b932:	017e      	lsls	r6, r7, #5
 800b934:	46b4      	mov	ip, r6
 800b936:	9f03      	ldr	r7, [sp, #12]
 800b938:	9e02      	ldr	r6, [sp, #8]
 800b93a:	000b      	movs	r3, r1
 800b93c:	1bf6      	subs	r6, r6, r7
 800b93e:	4466      	add	r6, ip
 800b940:	0537      	lsls	r7, r6, #20
 800b942:	2e00      	cmp	r6, #0
 800b944:	dd07      	ble.n	800b956 <__ratio+0x4a>
 800b946:	1979      	adds	r1, r7, r5
 800b948:	9101      	str	r1, [sp, #4]
 800b94a:	9800      	ldr	r0, [sp, #0]
 800b94c:	9901      	ldr	r1, [sp, #4]
 800b94e:	f7f5 f91b 	bl	8000b88 <__aeabi_ddiv>
 800b952:	b005      	add	sp, #20
 800b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b956:	1bcb      	subs	r3, r1, r7
 800b958:	e7f7      	b.n	800b94a <__ratio+0x3e>

0800b95a <__copybits>:
 800b95a:	0013      	movs	r3, r2
 800b95c:	3901      	subs	r1, #1
 800b95e:	b510      	push	{r4, lr}
 800b960:	1149      	asrs	r1, r1, #5
 800b962:	6912      	ldr	r2, [r2, #16]
 800b964:	3101      	adds	r1, #1
 800b966:	0089      	lsls	r1, r1, #2
 800b968:	3314      	adds	r3, #20
 800b96a:	0092      	lsls	r2, r2, #2
 800b96c:	1841      	adds	r1, r0, r1
 800b96e:	189a      	adds	r2, r3, r2
 800b970:	429a      	cmp	r2, r3
 800b972:	d803      	bhi.n	800b97c <__copybits+0x22>
 800b974:	2300      	movs	r3, #0
 800b976:	4281      	cmp	r1, r0
 800b978:	d803      	bhi.n	800b982 <__copybits+0x28>
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	cb10      	ldmia	r3!, {r4}
 800b97e:	c010      	stmia	r0!, {r4}
 800b980:	e7f6      	b.n	800b970 <__copybits+0x16>
 800b982:	c008      	stmia	r0!, {r3}
 800b984:	e7f7      	b.n	800b976 <__copybits+0x1c>

0800b986 <__any_on>:
 800b986:	0002      	movs	r2, r0
 800b988:	6900      	ldr	r0, [r0, #16]
 800b98a:	b510      	push	{r4, lr}
 800b98c:	3214      	adds	r2, #20
 800b98e:	114b      	asrs	r3, r1, #5
 800b990:	4298      	cmp	r0, r3
 800b992:	db12      	blt.n	800b9ba <__any_on+0x34>
 800b994:	dd0b      	ble.n	800b9ae <__any_on+0x28>
 800b996:	201f      	movs	r0, #31
 800b998:	4001      	ands	r1, r0
 800b99a:	d008      	beq.n	800b9ae <__any_on+0x28>
 800b99c:	0098      	lsls	r0, r3, #2
 800b99e:	5884      	ldr	r4, [r0, r2]
 800b9a0:	0020      	movs	r0, r4
 800b9a2:	40c8      	lsrs	r0, r1
 800b9a4:	4088      	lsls	r0, r1
 800b9a6:	0001      	movs	r1, r0
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	428c      	cmp	r4, r1
 800b9ac:	d104      	bne.n	800b9b8 <__any_on+0x32>
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	18d3      	adds	r3, r2, r3
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d803      	bhi.n	800b9be <__any_on+0x38>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	0003      	movs	r3, r0
 800b9bc:	e7f7      	b.n	800b9ae <__any_on+0x28>
 800b9be:	3b04      	subs	r3, #4
 800b9c0:	6819      	ldr	r1, [r3, #0]
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d0f5      	beq.n	800b9b2 <__any_on+0x2c>
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	e7f6      	b.n	800b9b8 <__any_on+0x32>

0800b9ca <_calloc_r>:
 800b9ca:	434a      	muls	r2, r1
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	0011      	movs	r1, r2
 800b9d0:	0014      	movs	r4, r2
 800b9d2:	f7fc fbdb 	bl	800818c <_malloc_r>
 800b9d6:	1e05      	subs	r5, r0, #0
 800b9d8:	d003      	beq.n	800b9e2 <_calloc_r+0x18>
 800b9da:	0022      	movs	r2, r4
 800b9dc:	2100      	movs	r1, #0
 800b9de:	f7fc fb82 	bl	80080e6 <memset>
 800b9e2:	0028      	movs	r0, r5
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9e8 <__ssputs_r>:
 800b9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ea:	688e      	ldr	r6, [r1, #8]
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	0007      	movs	r7, r0
 800b9f0:	000c      	movs	r4, r1
 800b9f2:	9203      	str	r2, [sp, #12]
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	d83c      	bhi.n	800ba74 <__ssputs_r+0x8c>
 800b9fa:	2390      	movs	r3, #144	; 0x90
 800b9fc:	898a      	ldrh	r2, [r1, #12]
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	421a      	tst	r2, r3
 800ba02:	d034      	beq.n	800ba6e <__ssputs_r+0x86>
 800ba04:	2503      	movs	r5, #3
 800ba06:	6909      	ldr	r1, [r1, #16]
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	1a5b      	subs	r3, r3, r1
 800ba0c:	9302      	str	r3, [sp, #8]
 800ba0e:	6963      	ldr	r3, [r4, #20]
 800ba10:	9802      	ldr	r0, [sp, #8]
 800ba12:	435d      	muls	r5, r3
 800ba14:	0feb      	lsrs	r3, r5, #31
 800ba16:	195d      	adds	r5, r3, r5
 800ba18:	9b01      	ldr	r3, [sp, #4]
 800ba1a:	106d      	asrs	r5, r5, #1
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	181b      	adds	r3, r3, r0
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	d900      	bls.n	800ba26 <__ssputs_r+0x3e>
 800ba24:	001d      	movs	r5, r3
 800ba26:	0553      	lsls	r3, r2, #21
 800ba28:	d532      	bpl.n	800ba90 <__ssputs_r+0xa8>
 800ba2a:	0029      	movs	r1, r5
 800ba2c:	0038      	movs	r0, r7
 800ba2e:	f7fc fbad 	bl	800818c <_malloc_r>
 800ba32:	1e06      	subs	r6, r0, #0
 800ba34:	d109      	bne.n	800ba4a <__ssputs_r+0x62>
 800ba36:	230c      	movs	r3, #12
 800ba38:	603b      	str	r3, [r7, #0]
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	89a2      	ldrh	r2, [r4, #12]
 800ba40:	4240      	negs	r0, r0
 800ba42:	4313      	orrs	r3, r2
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	b005      	add	sp, #20
 800ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4a:	9a02      	ldr	r2, [sp, #8]
 800ba4c:	6921      	ldr	r1, [r4, #16]
 800ba4e:	f7fc fb41 	bl	80080d4 <memcpy>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	4a14      	ldr	r2, [pc, #80]	; (800baa8 <__ssputs_r+0xc0>)
 800ba56:	401a      	ands	r2, r3
 800ba58:	2380      	movs	r3, #128	; 0x80
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	9b02      	ldr	r3, [sp, #8]
 800ba60:	6126      	str	r6, [r4, #16]
 800ba62:	18f6      	adds	r6, r6, r3
 800ba64:	6026      	str	r6, [r4, #0]
 800ba66:	6165      	str	r5, [r4, #20]
 800ba68:	9e01      	ldr	r6, [sp, #4]
 800ba6a:	1aed      	subs	r5, r5, r3
 800ba6c:	60a5      	str	r5, [r4, #8]
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	429e      	cmp	r6, r3
 800ba72:	d900      	bls.n	800ba76 <__ssputs_r+0x8e>
 800ba74:	9e01      	ldr	r6, [sp, #4]
 800ba76:	0032      	movs	r2, r6
 800ba78:	9903      	ldr	r1, [sp, #12]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	f000 f931 	bl	800bce2 <memmove>
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	2000      	movs	r0, #0
 800ba84:	1b9b      	subs	r3, r3, r6
 800ba86:	60a3      	str	r3, [r4, #8]
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	199e      	adds	r6, r3, r6
 800ba8c:	6026      	str	r6, [r4, #0]
 800ba8e:	e7da      	b.n	800ba46 <__ssputs_r+0x5e>
 800ba90:	002a      	movs	r2, r5
 800ba92:	0038      	movs	r0, r7
 800ba94:	f000 f938 	bl	800bd08 <_realloc_r>
 800ba98:	1e06      	subs	r6, r0, #0
 800ba9a:	d1e0      	bne.n	800ba5e <__ssputs_r+0x76>
 800ba9c:	6921      	ldr	r1, [r4, #16]
 800ba9e:	0038      	movs	r0, r7
 800baa0:	f7fc fb2a 	bl	80080f8 <_free_r>
 800baa4:	e7c7      	b.n	800ba36 <__ssputs_r+0x4e>
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	fffffb7f 	.word	0xfffffb7f

0800baac <_svfiprintf_r>:
 800baac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baae:	b0a1      	sub	sp, #132	; 0x84
 800bab0:	9003      	str	r0, [sp, #12]
 800bab2:	001d      	movs	r5, r3
 800bab4:	898b      	ldrh	r3, [r1, #12]
 800bab6:	000f      	movs	r7, r1
 800bab8:	0016      	movs	r6, r2
 800baba:	061b      	lsls	r3, r3, #24
 800babc:	d511      	bpl.n	800bae2 <_svfiprintf_r+0x36>
 800babe:	690b      	ldr	r3, [r1, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10e      	bne.n	800bae2 <_svfiprintf_r+0x36>
 800bac4:	2140      	movs	r1, #64	; 0x40
 800bac6:	f7fc fb61 	bl	800818c <_malloc_r>
 800baca:	6038      	str	r0, [r7, #0]
 800bacc:	6138      	str	r0, [r7, #16]
 800bace:	2800      	cmp	r0, #0
 800bad0:	d105      	bne.n	800bade <_svfiprintf_r+0x32>
 800bad2:	230c      	movs	r3, #12
 800bad4:	9a03      	ldr	r2, [sp, #12]
 800bad6:	3801      	subs	r0, #1
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	b021      	add	sp, #132	; 0x84
 800badc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	2300      	movs	r3, #0
 800bae4:	ac08      	add	r4, sp, #32
 800bae6:	6163      	str	r3, [r4, #20]
 800bae8:	3320      	adds	r3, #32
 800baea:	7663      	strb	r3, [r4, #25]
 800baec:	3310      	adds	r3, #16
 800baee:	76a3      	strb	r3, [r4, #26]
 800baf0:	9507      	str	r5, [sp, #28]
 800baf2:	0035      	movs	r5, r6
 800baf4:	782b      	ldrb	r3, [r5, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <_svfiprintf_r+0x52>
 800bafa:	2b25      	cmp	r3, #37	; 0x25
 800bafc:	d146      	bne.n	800bb8c <_svfiprintf_r+0xe0>
 800bafe:	1bab      	subs	r3, r5, r6
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	d00c      	beq.n	800bb1e <_svfiprintf_r+0x72>
 800bb04:	0032      	movs	r2, r6
 800bb06:	0039      	movs	r1, r7
 800bb08:	9803      	ldr	r0, [sp, #12]
 800bb0a:	f7ff ff6d 	bl	800b9e8 <__ssputs_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	d100      	bne.n	800bb14 <_svfiprintf_r+0x68>
 800bb12:	e0ae      	b.n	800bc72 <_svfiprintf_r+0x1c6>
 800bb14:	6962      	ldr	r2, [r4, #20]
 800bb16:	9b05      	ldr	r3, [sp, #20]
 800bb18:	4694      	mov	ip, r2
 800bb1a:	4463      	add	r3, ip
 800bb1c:	6163      	str	r3, [r4, #20]
 800bb1e:	782b      	ldrb	r3, [r5, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d100      	bne.n	800bb26 <_svfiprintf_r+0x7a>
 800bb24:	e0a5      	b.n	800bc72 <_svfiprintf_r+0x1c6>
 800bb26:	2201      	movs	r2, #1
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4252      	negs	r2, r2
 800bb2c:	6062      	str	r2, [r4, #4]
 800bb2e:	a904      	add	r1, sp, #16
 800bb30:	3254      	adds	r2, #84	; 0x54
 800bb32:	1852      	adds	r2, r2, r1
 800bb34:	1c6e      	adds	r6, r5, #1
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	60e3      	str	r3, [r4, #12]
 800bb3a:	60a3      	str	r3, [r4, #8]
 800bb3c:	7013      	strb	r3, [r2, #0]
 800bb3e:	65a3      	str	r3, [r4, #88]	; 0x58
 800bb40:	7831      	ldrb	r1, [r6, #0]
 800bb42:	2205      	movs	r2, #5
 800bb44:	4853      	ldr	r0, [pc, #332]	; (800bc94 <_svfiprintf_r+0x1e8>)
 800bb46:	f7ff fb3f 	bl	800b1c8 <memchr>
 800bb4a:	1c75      	adds	r5, r6, #1
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d11f      	bne.n	800bb90 <_svfiprintf_r+0xe4>
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	06d3      	lsls	r3, r2, #27
 800bb54:	d504      	bpl.n	800bb60 <_svfiprintf_r+0xb4>
 800bb56:	2353      	movs	r3, #83	; 0x53
 800bb58:	a904      	add	r1, sp, #16
 800bb5a:	185b      	adds	r3, r3, r1
 800bb5c:	2120      	movs	r1, #32
 800bb5e:	7019      	strb	r1, [r3, #0]
 800bb60:	0713      	lsls	r3, r2, #28
 800bb62:	d504      	bpl.n	800bb6e <_svfiprintf_r+0xc2>
 800bb64:	2353      	movs	r3, #83	; 0x53
 800bb66:	a904      	add	r1, sp, #16
 800bb68:	185b      	adds	r3, r3, r1
 800bb6a:	212b      	movs	r1, #43	; 0x2b
 800bb6c:	7019      	strb	r1, [r3, #0]
 800bb6e:	7833      	ldrb	r3, [r6, #0]
 800bb70:	2b2a      	cmp	r3, #42	; 0x2a
 800bb72:	d016      	beq.n	800bba2 <_svfiprintf_r+0xf6>
 800bb74:	0035      	movs	r5, r6
 800bb76:	2100      	movs	r1, #0
 800bb78:	200a      	movs	r0, #10
 800bb7a:	68e3      	ldr	r3, [r4, #12]
 800bb7c:	782a      	ldrb	r2, [r5, #0]
 800bb7e:	1c6e      	adds	r6, r5, #1
 800bb80:	3a30      	subs	r2, #48	; 0x30
 800bb82:	2a09      	cmp	r2, #9
 800bb84:	d94e      	bls.n	800bc24 <_svfiprintf_r+0x178>
 800bb86:	2900      	cmp	r1, #0
 800bb88:	d018      	beq.n	800bbbc <_svfiprintf_r+0x110>
 800bb8a:	e010      	b.n	800bbae <_svfiprintf_r+0x102>
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	e7b1      	b.n	800baf4 <_svfiprintf_r+0x48>
 800bb90:	4b40      	ldr	r3, [pc, #256]	; (800bc94 <_svfiprintf_r+0x1e8>)
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	1ac0      	subs	r0, r0, r3
 800bb96:	2301      	movs	r3, #1
 800bb98:	4083      	lsls	r3, r0
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	002e      	movs	r6, r5
 800bba0:	e7ce      	b.n	800bb40 <_svfiprintf_r+0x94>
 800bba2:	9b07      	ldr	r3, [sp, #28]
 800bba4:	1d19      	adds	r1, r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	9107      	str	r1, [sp, #28]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	db01      	blt.n	800bbb2 <_svfiprintf_r+0x106>
 800bbae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb0:	e004      	b.n	800bbbc <_svfiprintf_r+0x110>
 800bbb2:	425b      	negs	r3, r3
 800bbb4:	60e3      	str	r3, [r4, #12]
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	782b      	ldrb	r3, [r5, #0]
 800bbbe:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc0:	d10a      	bne.n	800bbd8 <_svfiprintf_r+0x12c>
 800bbc2:	786b      	ldrb	r3, [r5, #1]
 800bbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc6:	d135      	bne.n	800bc34 <_svfiprintf_r+0x188>
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	3502      	adds	r5, #2
 800bbcc:	1d1a      	adds	r2, r3, #4
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	9207      	str	r2, [sp, #28]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	db2b      	blt.n	800bc2e <_svfiprintf_r+0x182>
 800bbd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd8:	4e2f      	ldr	r6, [pc, #188]	; (800bc98 <_svfiprintf_r+0x1ec>)
 800bbda:	7829      	ldrb	r1, [r5, #0]
 800bbdc:	2203      	movs	r2, #3
 800bbde:	0030      	movs	r0, r6
 800bbe0:	f7ff faf2 	bl	800b1c8 <memchr>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d006      	beq.n	800bbf6 <_svfiprintf_r+0x14a>
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	1b80      	subs	r0, r0, r6
 800bbec:	4083      	lsls	r3, r0
 800bbee:	6822      	ldr	r2, [r4, #0]
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	7829      	ldrb	r1, [r5, #0]
 800bbf8:	2206      	movs	r2, #6
 800bbfa:	4828      	ldr	r0, [pc, #160]	; (800bc9c <_svfiprintf_r+0x1f0>)
 800bbfc:	1c6e      	adds	r6, r5, #1
 800bbfe:	7621      	strb	r1, [r4, #24]
 800bc00:	f7ff fae2 	bl	800b1c8 <memchr>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d03c      	beq.n	800bc82 <_svfiprintf_r+0x1d6>
 800bc08:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <_svfiprintf_r+0x1f4>)
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d125      	bne.n	800bc5a <_svfiprintf_r+0x1ae>
 800bc0e:	2207      	movs	r2, #7
 800bc10:	9b07      	ldr	r3, [sp, #28]
 800bc12:	3307      	adds	r3, #7
 800bc14:	4393      	bics	r3, r2
 800bc16:	3308      	adds	r3, #8
 800bc18:	9307      	str	r3, [sp, #28]
 800bc1a:	6963      	ldr	r3, [r4, #20]
 800bc1c:	9a04      	ldr	r2, [sp, #16]
 800bc1e:	189b      	adds	r3, r3, r2
 800bc20:	6163      	str	r3, [r4, #20]
 800bc22:	e766      	b.n	800baf2 <_svfiprintf_r+0x46>
 800bc24:	4343      	muls	r3, r0
 800bc26:	2101      	movs	r1, #1
 800bc28:	189b      	adds	r3, r3, r2
 800bc2a:	0035      	movs	r5, r6
 800bc2c:	e7a6      	b.n	800bb7c <_svfiprintf_r+0xd0>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	425b      	negs	r3, r3
 800bc32:	e7d0      	b.n	800bbd6 <_svfiprintf_r+0x12a>
 800bc34:	2300      	movs	r3, #0
 800bc36:	200a      	movs	r0, #10
 800bc38:	001a      	movs	r2, r3
 800bc3a:	3501      	adds	r5, #1
 800bc3c:	6063      	str	r3, [r4, #4]
 800bc3e:	7829      	ldrb	r1, [r5, #0]
 800bc40:	1c6e      	adds	r6, r5, #1
 800bc42:	3930      	subs	r1, #48	; 0x30
 800bc44:	2909      	cmp	r1, #9
 800bc46:	d903      	bls.n	800bc50 <_svfiprintf_r+0x1a4>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0c5      	beq.n	800bbd8 <_svfiprintf_r+0x12c>
 800bc4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4e:	e7c3      	b.n	800bbd8 <_svfiprintf_r+0x12c>
 800bc50:	4342      	muls	r2, r0
 800bc52:	2301      	movs	r3, #1
 800bc54:	1852      	adds	r2, r2, r1
 800bc56:	0035      	movs	r5, r6
 800bc58:	e7f1      	b.n	800bc3e <_svfiprintf_r+0x192>
 800bc5a:	ab07      	add	r3, sp, #28
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	003a      	movs	r2, r7
 800bc60:	4b10      	ldr	r3, [pc, #64]	; (800bca4 <_svfiprintf_r+0x1f8>)
 800bc62:	0021      	movs	r1, r4
 800bc64:	9803      	ldr	r0, [sp, #12]
 800bc66:	f7fc fb8b 	bl	8008380 <_printf_float>
 800bc6a:	9004      	str	r0, [sp, #16]
 800bc6c:	9b04      	ldr	r3, [sp, #16]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	d1d3      	bne.n	800bc1a <_svfiprintf_r+0x16e>
 800bc72:	89bb      	ldrh	r3, [r7, #12]
 800bc74:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc76:	065b      	lsls	r3, r3, #25
 800bc78:	d400      	bmi.n	800bc7c <_svfiprintf_r+0x1d0>
 800bc7a:	e72e      	b.n	800bada <_svfiprintf_r+0x2e>
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	4240      	negs	r0, r0
 800bc80:	e72b      	b.n	800bada <_svfiprintf_r+0x2e>
 800bc82:	ab07      	add	r3, sp, #28
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	003a      	movs	r2, r7
 800bc88:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <_svfiprintf_r+0x1f8>)
 800bc8a:	0021      	movs	r1, r4
 800bc8c:	9803      	ldr	r0, [sp, #12]
 800bc8e:	f7fc fe31 	bl	80088f4 <_printf_i>
 800bc92:	e7ea      	b.n	800bc6a <_svfiprintf_r+0x1be>
 800bc94:	0800c32c 	.word	0x0800c32c
 800bc98:	0800c332 	.word	0x0800c332
 800bc9c:	0800c336 	.word	0x0800c336
 800bca0:	08008381 	.word	0x08008381
 800bca4:	0800b9e9 	.word	0x0800b9e9

0800bca8 <strncmp>:
 800bca8:	2300      	movs	r3, #0
 800bcaa:	b530      	push	{r4, r5, lr}
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d00a      	beq.n	800bcc6 <strncmp+0x1e>
 800bcb0:	3a01      	subs	r2, #1
 800bcb2:	5cc4      	ldrb	r4, [r0, r3]
 800bcb4:	5ccd      	ldrb	r5, [r1, r3]
 800bcb6:	42ac      	cmp	r4, r5
 800bcb8:	d104      	bne.n	800bcc4 <strncmp+0x1c>
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d002      	beq.n	800bcc4 <strncmp+0x1c>
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	2c00      	cmp	r4, #0
 800bcc2:	d1f6      	bne.n	800bcb2 <strncmp+0xa>
 800bcc4:	1b63      	subs	r3, r4, r5
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	bd30      	pop	{r4, r5, pc}

0800bcca <__ascii_wctomb>:
 800bcca:	1e0b      	subs	r3, r1, #0
 800bccc:	d004      	beq.n	800bcd8 <__ascii_wctomb+0xe>
 800bcce:	2aff      	cmp	r2, #255	; 0xff
 800bcd0:	d904      	bls.n	800bcdc <__ascii_wctomb+0x12>
 800bcd2:	238a      	movs	r3, #138	; 0x8a
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	3b8b      	subs	r3, #139	; 0x8b
 800bcd8:	0018      	movs	r0, r3
 800bcda:	4770      	bx	lr
 800bcdc:	700a      	strb	r2, [r1, #0]
 800bcde:	2301      	movs	r3, #1
 800bce0:	e7fa      	b.n	800bcd8 <__ascii_wctomb+0xe>

0800bce2 <memmove>:
 800bce2:	b510      	push	{r4, lr}
 800bce4:	4288      	cmp	r0, r1
 800bce6:	d902      	bls.n	800bcee <memmove+0xc>
 800bce8:	188b      	adds	r3, r1, r2
 800bcea:	4298      	cmp	r0, r3
 800bcec:	d303      	bcc.n	800bcf6 <memmove+0x14>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e007      	b.n	800bd02 <memmove+0x20>
 800bcf2:	5c8b      	ldrb	r3, [r1, r2]
 800bcf4:	5483      	strb	r3, [r0, r2]
 800bcf6:	3a01      	subs	r2, #1
 800bcf8:	d2fb      	bcs.n	800bcf2 <memmove+0x10>
 800bcfa:	bd10      	pop	{r4, pc}
 800bcfc:	5ccc      	ldrb	r4, [r1, r3]
 800bcfe:	54c4      	strb	r4, [r0, r3]
 800bd00:	3301      	adds	r3, #1
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d1fa      	bne.n	800bcfc <memmove+0x1a>
 800bd06:	e7f8      	b.n	800bcfa <memmove+0x18>

0800bd08 <_realloc_r>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	0007      	movs	r7, r0
 800bd0c:	000d      	movs	r5, r1
 800bd0e:	0016      	movs	r6, r2
 800bd10:	2900      	cmp	r1, #0
 800bd12:	d105      	bne.n	800bd20 <_realloc_r+0x18>
 800bd14:	0011      	movs	r1, r2
 800bd16:	f7fc fa39 	bl	800818c <_malloc_r>
 800bd1a:	0004      	movs	r4, r0
 800bd1c:	0020      	movs	r0, r4
 800bd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	d103      	bne.n	800bd2c <_realloc_r+0x24>
 800bd24:	f7fc f9e8 	bl	80080f8 <_free_r>
 800bd28:	0034      	movs	r4, r6
 800bd2a:	e7f7      	b.n	800bd1c <_realloc_r+0x14>
 800bd2c:	f000 f812 	bl	800bd54 <_malloc_usable_size_r>
 800bd30:	002c      	movs	r4, r5
 800bd32:	42b0      	cmp	r0, r6
 800bd34:	d2f2      	bcs.n	800bd1c <_realloc_r+0x14>
 800bd36:	0031      	movs	r1, r6
 800bd38:	0038      	movs	r0, r7
 800bd3a:	f7fc fa27 	bl	800818c <_malloc_r>
 800bd3e:	1e04      	subs	r4, r0, #0
 800bd40:	d0ec      	beq.n	800bd1c <_realloc_r+0x14>
 800bd42:	0029      	movs	r1, r5
 800bd44:	0032      	movs	r2, r6
 800bd46:	f7fc f9c5 	bl	80080d4 <memcpy>
 800bd4a:	0029      	movs	r1, r5
 800bd4c:	0038      	movs	r0, r7
 800bd4e:	f7fc f9d3 	bl	80080f8 <_free_r>
 800bd52:	e7e3      	b.n	800bd1c <_realloc_r+0x14>

0800bd54 <_malloc_usable_size_r>:
 800bd54:	1f0b      	subs	r3, r1, #4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	1f18      	subs	r0, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da01      	bge.n	800bd62 <_malloc_usable_size_r+0xe>
 800bd5e:	580b      	ldr	r3, [r1, r0]
 800bd60:	18c0      	adds	r0, r0, r3
 800bd62:	4770      	bx	lr

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	46c0      	nop			; (mov r8, r8)
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	46c0      	nop			; (mov r8, r8)
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
