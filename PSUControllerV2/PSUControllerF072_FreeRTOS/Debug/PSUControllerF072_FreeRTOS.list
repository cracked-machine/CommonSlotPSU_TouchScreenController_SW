
PSUControllerF072_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08008b98  08008b98  00018b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009150  08009150  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009150  08009150  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  200001e8  08009340  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  08009340  00021304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016238  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003652  00000000  00000000  00036448  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00039aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  0003ad70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a4f2  00000000  00000000  0003be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012617  00000000  00000000  0005635a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089a40  00000000  00000000  00068971  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f23b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  000f242c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008b80 	.word	0x08008b80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08008b80 	.word	0x08008b80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08008c24 	.word	0x08008c24
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	08008c64 	.word	0x08008c64
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <UserDisplayTask>:
	}
}
*/

void UserDisplayTask()
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b087      	sub	sp, #28
 8002010:	af02      	add	r7, sp, #8
	while(1)
	{
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <UserDisplayTask+0xe8>)
 8002014:	2108      	movs	r1, #8
 8002016:	0018      	movs	r0, r3
 8002018:	f001 f9b2 	bl	8003380 <HAL_GPIO_ReadPin>
 800201c:	0003      	movs	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10a      	bne.n	8002038 <UserDisplayTask+0x2c>
	   {
		   ILI9341_Draw_Text("ON ", 10, 50, BLACK, 3, GREEN);
 8002022:	4835      	ldr	r0, [pc, #212]	; (80020f8 <UserDisplayTask+0xec>)
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <UserDisplayTask+0xf0>)
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2303      	movs	r3, #3
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2300      	movs	r3, #0
 800202e:	2232      	movs	r2, #50	; 0x32
 8002030:	210a      	movs	r1, #10
 8002032:	f003 fbf5 	bl	8005820 <ILI9341_Draw_Text>
 8002036:	e009      	b.n	800204c <UserDisplayTask+0x40>
	   }
	   else
	   {
		   ILI9341_Draw_Text("OFF", 10, 50, BLACK, 3, RED);
 8002038:	4831      	ldr	r0, [pc, #196]	; (8002100 <UserDisplayTask+0xf4>)
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <UserDisplayTask+0xf8>)
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	2303      	movs	r3, #3
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2300      	movs	r3, #0
 8002044:	2232      	movs	r2, #50	; 0x32
 8002046:	210a      	movs	r1, #10
 8002048:	f003 fbea 	bl	8005820 <ILI9341_Draw_Text>
	   }

	   // check for penirq interrupt
	   if(TSC2046_EM_GetTouchScreenState())
 800204c:	f004 fb28 	bl	80066a0 <TSC2046_EM_GetTouchScreenState>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d043      	beq.n	80020dc <UserDisplayTask+0xd0>
	   {
		 ILI9341_Draw_Text("HIT ", 100, 10, BLACK, 2, RED);
 8002054:	482c      	ldr	r0, [pc, #176]	; (8002108 <UserDisplayTask+0xfc>)
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <UserDisplayTask+0xf8>)
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2302      	movs	r3, #2
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	220a      	movs	r2, #10
 8002062:	2164      	movs	r1, #100	; 0x64
 8002064:	f003 fbdc 	bl	8005820 <ILI9341_Draw_Text>
		 HAL_GPIO_TogglePin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin);
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <UserDisplayTask+0xe8>)
 800206a:	2108      	movs	r1, #8
 800206c:	0018      	movs	r0, r3
 800206e:	f001 f9c1 	bl	80033f4 <HAL_GPIO_TogglePin>

		 // get touchscreen coordinate data
		 if( TSC2046_HM_RunConversion() == TSC2046_DATAOK )
 8002072:	f004 fb87 	bl	8006784 <TSC2046_HM_RunConversion>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d125      	bne.n	80020c6 <UserDisplayTask+0xba>
		 {
		   ILI9341_Draw_Filled_Circle(TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos(), 2, WHITE);
 800207a:	f004 fc8b 	bl	8006994 <TSC4026_STM32_HM_GetXpos>
 800207e:	0003      	movs	r3, r0
 8002080:	001c      	movs	r4, r3
 8002082:	f004 fc91 	bl	80069a8 <TSC4026_STM32_HM_GetYpos>
 8002086:	0003      	movs	r3, r0
 8002088:	0019      	movs	r1, r3
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <UserDisplayTask+0x100>)
 800208c:	2202      	movs	r2, #2
 800208e:	0020      	movs	r0, r4
 8002090:	f003 fa24 	bl	80054dc <ILI9341_Draw_Filled_Circle>
		   char pos_string[15];
		   snprintf(pos_string, sizeof(pos_string), "Y:%u,X:%u      ", TSC4026_STM32_HM_GetXpos(), TSC4026_STM32_HM_GetYpos());
 8002094:	f004 fc7e 	bl	8006994 <TSC4026_STM32_HM_GetXpos>
 8002098:	0003      	movs	r3, r0
 800209a:	001c      	movs	r4, r3
 800209c:	f004 fc84 	bl	80069a8 <TSC4026_STM32_HM_GetYpos>
 80020a0:	0003      	movs	r3, r0
 80020a2:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <UserDisplayTask+0x104>)
 80020a4:	0038      	movs	r0, r7
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	0023      	movs	r3, r4
 80020aa:	210f      	movs	r1, #15
 80020ac:	f005 f93e 	bl	800732c <sniprintf>
		   ILI9341_Draw_Text(pos_string, 180, 10, BLACK, 2, RED);
 80020b0:	0038      	movs	r0, r7
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <UserDisplayTask+0xf8>)
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2302      	movs	r3, #2
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	220a      	movs	r2, #10
 80020be:	21b4      	movs	r1, #180	; 0xb4
 80020c0:	f003 fbae 	bl	8005820 <ILI9341_Draw_Text>
 80020c4:	e7a5      	b.n	8002012 <UserDisplayTask+0x6>
		 }
		 else
		 {
		   ILI9341_Draw_Text("DATAERR   ", 200, 10, BLACK, 2, RED);
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <UserDisplayTask+0x108>)
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <UserDisplayTask+0xf8>)
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	2302      	movs	r3, #2
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	220a      	movs	r2, #10
 80020d4:	21c8      	movs	r1, #200	; 0xc8
 80020d6:	f003 fba3 	bl	8005820 <ILI9341_Draw_Text>
 80020da:	e79a      	b.n	8002012 <UserDisplayTask+0x6>
		 }
	   }

	   else
	   {
		 ILI9341_Draw_Text("NONE", 100, 10, BLACK, 2, RED);
 80020dc:	480e      	ldr	r0, [pc, #56]	; (8002118 <UserDisplayTask+0x10c>)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <UserDisplayTask+0xf8>)
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	2302      	movs	r3, #2
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2300      	movs	r3, #0
 80020e8:	220a      	movs	r2, #10
 80020ea:	2164      	movs	r1, #100	; 0x64
 80020ec:	f003 fb98 	bl	8005820 <ILI9341_Draw_Text>
	   if(HAL_GPIO_ReadPin(PSU_SW_ON_GPIO_Port, PSU_SW_ON_Pin) == GPIO_PIN_SET)
 80020f0:	e78f      	b.n	8002012 <UserDisplayTask+0x6>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	48000400 	.word	0x48000400
 80020f8:	08008b98 	.word	0x08008b98
 80020fc:	000014a2 	.word	0x000014a2
 8002100:	08008b9c 	.word	0x08008b9c
 8002104:	0000d8c3 	.word	0x0000d8c3
 8002108:	08008ba0 	.word	0x08008ba0
 800210c:	0000ffff 	.word	0x0000ffff
 8002110:	08008ba8 	.word	0x08008ba8
 8002114:	08008bb8 	.word	0x08008bb8
 8002118:	08008bc4 	.word	0x08008bc4

0800211c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	0018      	movs	r0, r3
 8002126:	230c      	movs	r3, #12
 8002128:	001a      	movs	r2, r3
 800212a:	2100      	movs	r1, #0
 800212c:	f004 fc97 	bl	8006a5e <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002130:	4b26      	ldr	r3, [pc, #152]	; (80021cc <MX_ADC_Init+0xb0>)
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <MX_ADC_Init+0xb4>)
 8002134:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <MX_ADC_Init+0xb0>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <MX_ADC_Init+0xb0>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <MX_ADC_Init+0xb0>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <MX_ADC_Init+0xb0>)
 800214a:	2201      	movs	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800214e:	4b1f      	ldr	r3, [pc, #124]	; (80021cc <MX_ADC_Init+0xb0>)
 8002150:	2204      	movs	r2, #4
 8002152:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_ADC_Init+0xb0>)
 8002156:	2200      	movs	r2, #0
 8002158:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <MX_ADC_Init+0xb0>)
 800215c:	2200      	movs	r2, #0
 800215e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_ADC_Init+0xb0>)
 8002162:	2201      	movs	r2, #1
 8002164:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <MX_ADC_Init+0xb0>)
 8002168:	2200      	movs	r2, #0
 800216a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_ADC_Init+0xb0>)
 800216e:	22c2      	movs	r2, #194	; 0xc2
 8002170:	32ff      	adds	r2, #255	; 0xff
 8002172:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MX_ADC_Init+0xb0>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <MX_ADC_Init+0xb0>)
 800217c:	2224      	movs	r2, #36	; 0x24
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <MX_ADC_Init+0xb0>)
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_ADC_Init+0xb0>)
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fc54 	bl	8002a38 <HAL_ADC_Init>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002194:	f000 f9bb 	bl	800250e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	0152      	lsls	r2, r2, #5
 80021a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021ae:	1d3a      	adds	r2, r7, #4
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_ADC_Init+0xb0>)
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 fd7f 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d001      	beq.n	80021c2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80021be:	f000 f9a6 	bl	800250e <Error_Handler>
  }

}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	200011ac 	.word	0x200011ac
 80021d0:	40012400 	.word	0x40012400

080021d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	2314      	movs	r3, #20
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	0018      	movs	r0, r3
 80021e2:	2314      	movs	r3, #20
 80021e4:	001a      	movs	r2, r3
 80021e6:	2100      	movs	r1, #0
 80021e8:	f004 fc39 	bl	8006a5e <memset>
  if(adcHandle->Instance==ADC1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_ADC_MspInit+0x84>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12c      	bne.n	8002250 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_ADC_MspInit+0x88>)
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_ADC_MspInit+0x88>)
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0089      	lsls	r1, r1, #2
 8002200:	430a      	orrs	r2, r1
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_ADC_MspInit+0x88>)
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_ADC_MspInit+0x88>)
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_ADC_MspInit+0x88>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0289      	lsls	r1, r1, #10
 800221c:	430a      	orrs	r2, r1
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_ADC_MspInit+0x88>)
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800222e:	2114      	movs	r1, #20
 8002230:	187b      	adds	r3, r7, r1
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2203      	movs	r2, #3
 800223a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	187a      	adds	r2, r7, r1
 8002244:	2390      	movs	r3, #144	; 0x90
 8002246:	05db      	lsls	r3, r3, #23
 8002248:	0011      	movs	r1, r2
 800224a:	0018      	movs	r0, r3
 800224c:	f000 ff20 	bl	8003090 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b00a      	add	sp, #40	; 0x28
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40012400 	.word	0x40012400
 800225c:	40021000 	.word	0x40021000

08002260 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a06      	ldr	r2, [pc, #24]	; (8002288 <vApplicationGetIdleTaskMemory+0x28>)
 8002270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <vApplicationGetIdleTaskMemory+0x2c>)
 8002276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	20000204 	.word	0x20000204
 800228c:	20000258 	.word	0x20000258

08002290 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <MX_FREERTOS_Init+0x30>)
 800229a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800229c:	c313      	stmia	r3!, {r0, r1, r4}
 800229e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022a0:	c313      	stmia	r3!, {r0, r1, r4}
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2100      	movs	r1, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f002 f877 	bl	800439e <osThreadCreate>
 80022b0:	0002      	movs	r2, r0
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <MX_FREERTOS_Init+0x34>)
 80022b4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b009      	add	sp, #36	; 0x24
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	08008be0 	.word	0x08008be0
 80022c4:	200011ec 	.word	0x200011ec

080022c8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	UserDisplayTask();
 80022d0:	f7ff fe9c 	bl	800200c <UserDisplayTask>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f002 f8af 	bl	8004438 <osDelay>
 80022da:	e7fb      	b.n	80022d4 <StartDefaultTask+0xc>

080022dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	240c      	movs	r4, #12
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	0018      	movs	r0, r3
 80022e8:	2314      	movs	r3, #20
 80022ea:	001a      	movs	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	f004 fbb6 	bl	8006a5e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <MX_GPIO_Init+0x134>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <MX_GPIO_Init+0x134>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0289      	lsls	r1, r1, #10
 80022fc:	430a      	orrs	r2, r1
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <MX_GPIO_Init+0x134>)
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <MX_GPIO_Init+0x134>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <MX_GPIO_Init+0x134>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0309      	lsls	r1, r1, #12
 8002318:	430a      	orrs	r2, r1
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <MX_GPIO_Init+0x134>)
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	4013      	ands	r3, r2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <MX_GPIO_Init+0x134>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	4b38      	ldr	r3, [pc, #224]	; (8002410 <MX_GPIO_Init+0x134>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	02c9      	lsls	r1, r1, #11
 8002334:	430a      	orrs	r2, r1
 8002336:	615a      	str	r2, [r3, #20]
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <MX_GPIO_Init+0x134>)
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	02db      	lsls	r3, r3, #11
 8002340:	4013      	ands	r3, r2
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <MX_GPIO_Init+0x138>)
 8002348:	2200      	movs	r2, #0
 800234a:	2130      	movs	r1, #48	; 0x30
 800234c:	0018      	movs	r0, r3
 800234e:	f001 f834 	bl	80033ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|TS_CS_Pin|PSU_SW_ON_Pin, GPIO_PIN_RESET);
 8002352:	4931      	ldr	r1, [pc, #196]	; (8002418 <MX_GPIO_Init+0x13c>)
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <MX_GPIO_Init+0x140>)
 8002356:	2200      	movs	r2, #0
 8002358:	0018      	movs	r0, r3
 800235a:	f001 f82e 	bl	80033ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 800235e:	0021      	movs	r1, r4
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2230      	movs	r2, #48	; 0x30
 8002364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2201      	movs	r2, #1
 800236a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2203      	movs	r2, #3
 8002376:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002378:	000c      	movs	r4, r1
 800237a:	187b      	adds	r3, r7, r1
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <MX_GPIO_Init+0x138>)
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f000 fe85 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|TS_CS_Pin;
 8002386:	0021      	movs	r1, r4
 8002388:	187b      	adds	r3, r7, r1
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <MX_GPIO_Init+0x144>)
 800238c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2201      	movs	r2, #1
 8002392:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2203      	movs	r2, #3
 800239e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	000c      	movs	r4, r1
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <MX_GPIO_Init+0x140>)
 80023a6:	0019      	movs	r1, r3
 80023a8:	0010      	movs	r0, r2
 80023aa:	f000 fe71 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin;
 80023ae:	0021      	movs	r1, r4
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <MX_GPIO_Init+0x148>)
 80023ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2201      	movs	r2, #1
 80023c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TS_IRQ_GPIO_Port, &GPIO_InitStruct);
 80023c2:	000c      	movs	r4, r1
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <MX_GPIO_Init+0x138>)
 80023c8:	0019      	movs	r1, r3
 80023ca:	0010      	movs	r0, r2
 80023cc:	f000 fe60 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSU_SW_ON_Pin;
 80023d0:	0021      	movs	r1, r4
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2208      	movs	r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2201      	movs	r2, #1
 80023dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2202      	movs	r2, #2
 80023e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PSU_SW_ON_GPIO_Port, &GPIO_InitStruct);
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <MX_GPIO_Init+0x140>)
 80023ee:	0019      	movs	r1, r3
 80023f0:	0010      	movs	r0, r2
 80023f2:	f000 fe4d 	bl	8003090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2007      	movs	r0, #7
 80023fc:	f000 fe16 	bl	800302c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002400:	2007      	movs	r0, #7
 8002402:	f000 fe28 	bl	8003056 <HAL_NVIC_EnableIRQ>

}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b009      	add	sp, #36	; 0x24
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	48000800 	.word	0x48000800
 8002418:	00001009 	.word	0x00001009
 800241c:	48000400 	.word	0x48000400
 8002420:	00001001 	.word	0x00001001
 8002424:	10210000 	.word	0x10210000

08002428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242c:	f000 fa7e 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002430:	f000 f81c 	bl	800246c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002434:	f7ff ff52 	bl	80022dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002438:	f000 f86e 	bl	8002518 <MX_SPI1_Init>
  MX_SPI2_Init();
 800243c:	f000 f8aa 	bl	8002594 <MX_SPI2_Init>
  MX_TIM17_Init();
 8002440:	f000 f9fa 	bl	8002838 <MX_TIM17_Init>
  MX_ADC_Init();
 8002444:	f7ff fe6a 	bl	800211c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // init ILI9341 library
  ILI9341_Init();
 8002448:	f003 fa5b 	bl	8005902 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800244c:	2003      	movs	r0, #3
 800244e:	f003 fecd 	bl	80061ec <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(BLUE);
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <main+0x40>)
 8002454:	0018      	movs	r0, r3
 8002456:	f003 fc5d 	bl	8005d14 <ILI9341_Fill_Screen>

  // init TSC2046 library
  TSC2046_HM_Init();
 800245a:	f004 f95f 	bl	800671c <TSC2046_HM_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800245e:	f7ff ff17 	bl	8002290 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002462:	f001 ff94 	bl	800438e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002466:	e7fe      	b.n	8002466 <main+0x3e>
 8002468:	000002fd 	.word	0x000002fd

0800246c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b093      	sub	sp, #76	; 0x4c
 8002470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002472:	2414      	movs	r4, #20
 8002474:	193b      	adds	r3, r7, r4
 8002476:	0018      	movs	r0, r3
 8002478:	2334      	movs	r3, #52	; 0x34
 800247a:	001a      	movs	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	f004 faee 	bl	8006a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	0018      	movs	r0, r3
 8002486:	2310      	movs	r3, #16
 8002488:	001a      	movs	r2, r3
 800248a:	2100      	movs	r1, #0
 800248c:	f004 fae7 	bl	8006a5e <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002490:	0021      	movs	r1, r4
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2212      	movs	r2, #18
 8002496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2201      	movs	r2, #1
 800249c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2201      	movs	r2, #1
 80024a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2210      	movs	r2, #16
 80024a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2210      	movs	r2, #16
 80024ae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2202      	movs	r2, #2
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	0352      	lsls	r2, r2, #13
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 ffd2 	bl	8003478 <HAL_RCC_OscConfig>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80024d8:	f000 f819 	bl	800250e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2207      	movs	r2, #7
 80024e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2202      	movs	r2, #2
 80024e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2101      	movs	r1, #1
 80024f8:	0018      	movs	r0, r3
 80024fa:	f001 fb43 	bl	8003b84 <HAL_RCC_ClockConfig>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002502:	f000 f804 	bl	800250e <Error_Handler>
  }
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b013      	add	sp, #76	; 0x4c
 800250c:	bd90      	pop	{r4, r7, pc}

0800250e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MX_SPI1_Init+0x74>)
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <MX_SPI1_Init+0x78>)
 8002520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_SPI1_Init+0x74>)
 8002524:	2282      	movs	r2, #130	; 0x82
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_SPI1_Init+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <MX_SPI1_Init+0x74>)
 8002532:	22e0      	movs	r2, #224	; 0xe0
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_SPI1_Init+0x74>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <MX_SPI1_Init+0x74>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_SPI1_Init+0x74>)
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_SPI1_Init+0x74>)
 800254e:	2208      	movs	r2, #8
 8002550:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_SPI1_Init+0x74>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_SPI1_Init+0x74>)
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MX_SPI1_Init+0x74>)
 8002560:	2200      	movs	r2, #0
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_SPI1_Init+0x74>)
 8002566:	2207      	movs	r2, #7
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <MX_SPI1_Init+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_SPI1_Init+0x74>)
 8002572:	2200      	movs	r2, #0
 8002574:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <MX_SPI1_Init+0x74>)
 8002578:	0018      	movs	r0, r3
 800257a:	f001 fc5b 	bl	8003e34 <HAL_SPI_Init>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002582:	f7ff ffc4 	bl	800250e <Error_Handler>
  }

}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20001254 	.word	0x20001254
 8002590:	40013000 	.word	0x40013000

08002594 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_SPI2_Init+0x74>)
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <MX_SPI2_Init+0x78>)
 800259c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_SPI2_Init+0x74>)
 80025a0:	2282      	movs	r2, #130	; 0x82
 80025a2:	0052      	lsls	r2, r2, #1
 80025a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_SPI2_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ae:	22e0      	movs	r2, #224	; 0xe0
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI2_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_SPI2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI2_Init+0x74>)
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ca:	2210      	movs	r2, #16
 80025cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI2_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI2_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_SPI2_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI2_Init+0x74>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_SPI2_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI2_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <MX_SPI2_Init+0x74>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f001 fc1d 	bl	8003e34 <HAL_SPI_Init>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025fe:	f7ff ff86 	bl	800250e <Error_Handler>
  }

}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200011f0 	.word	0x200011f0
 800260c:	40003800 	.word	0x40003800

08002610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	231c      	movs	r3, #28
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	0018      	movs	r0, r3
 800261e:	2314      	movs	r3, #20
 8002620:	001a      	movs	r2, r3
 8002622:	2100      	movs	r1, #0
 8002624:	f004 fa1b 	bl	8006a5e <memset>
  if(spiHandle->Instance==SPI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a39      	ldr	r2, [pc, #228]	; (8002714 <HAL_SPI_MspInit+0x104>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d133      	bne.n	800269a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_SPI_MspInit+0x108>)
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_SPI_MspInit+0x108>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0149      	lsls	r1, r1, #5
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_SPI_MspInit+0x108>)
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_SPI_MspInit+0x108>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_SPI_MspInit+0x108>)
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0289      	lsls	r1, r1, #10
 8002658:	430a      	orrs	r2, r1
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_SPI_MspInit+0x108>)
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800266a:	211c      	movs	r1, #28
 800266c:	187b      	adds	r3, r7, r1
 800266e:	22e0      	movs	r2, #224	; 0xe0
 8002670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2202      	movs	r2, #2
 8002676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2203      	movs	r2, #3
 8002682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	187a      	adds	r2, r7, r1
 800268c:	2390      	movs	r3, #144	; 0x90
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fcfc 	bl	8003090 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002698:	e037      	b.n	800270a <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_SPI_MspInit+0x10c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d132      	bne.n	800270a <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	01c9      	lsls	r1, r1, #7
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	01db      	lsls	r3, r3, #7
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	02c9      	lsls	r1, r1, #11
 80026ca:	430a      	orrs	r2, r1
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_SPI_MspInit+0x108>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	02db      	lsls	r3, r3, #11
 80026d6:	4013      	ands	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 80026dc:	211c      	movs	r1, #28
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	22e0      	movs	r2, #224	; 0xe0
 80026e2:	0212      	lsls	r2, r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2202      	movs	r2, #2
 80026ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2203      	movs	r2, #3
 80026f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_SPI_MspInit+0x110>)
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 fcc3 	bl	8003090 <HAL_GPIO_Init>
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b00c      	add	sp, #48	; 0x30
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40013000 	.word	0x40013000
 8002718:	40021000 	.word	0x40021000
 800271c:	40003800 	.word	0x40003800
 8002720:	48000400 	.word	0x48000400

08002724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_MspInit+0x50>)
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_MspInit+0x50>)
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	619a      	str	r2, [r3, #24]
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_MspInit+0x50>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_MspInit+0x50>)
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_MspInit+0x50>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0549      	lsls	r1, r1, #21
 800274c:	430a      	orrs	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_MspInit+0x50>)
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	055b      	lsls	r3, r3, #21
 8002758:	4013      	ands	r3, r2
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800275e:	2302      	movs	r3, #2
 8002760:	425b      	negs	r3, r3
 8002762:	2200      	movs	r2, #0
 8002764:	2103      	movs	r1, #3
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fc60 	bl	800302c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <HardFault_Handler+0x4>

08002788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278c:	f000 f916 	bl	80029bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002790:	f002 fb5c 	bl	8004e4c <xTaskGetSchedulerState>
 8002794:	0003      	movs	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800279a:	f002 fcbd 	bl	8005118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	TSC2046_IM_PENIRQ_EXTI_Handler();
 80027a8:	f004 f908 	bl	80069bc <TSC2046_IM_PENIRQ_EXTI_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80027ac:	2040      	movs	r0, #64	; 0x40
 80027ae:	f000 fe3d 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
	TSC2046_IM_HardwareManagerLoopHandler();
 80027bc:	f004 f906 	bl	80069cc <TSC2046_IM_HardwareManagerLoopHandler>
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <TIM17_IRQHandler+0x18>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f001 fbfc 	bl	8003fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	200012b8 	.word	0x200012b8

080027d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x50>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x16>
		heap_end = &end;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <_sbrk+0x50>)
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <_sbrk+0x54>)
 80027e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <_sbrk+0x50>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <_sbrk+0x50>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	18d3      	adds	r3, r2, r3
 80027f8:	466a      	mov	r2, sp
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d907      	bls.n	800280e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027fe:	f004 f8fb 	bl	80069f8 <__errno>
 8002802:	0003      	movs	r3, r0
 8002804:	220c      	movs	r2, #12
 8002806:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002808:	2301      	movs	r3, #1
 800280a:	425b      	negs	r3, r3
 800280c:	e006      	b.n	800281c <_sbrk+0x48>
	}

	heap_end += incr;
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <_sbrk+0x50>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	18d2      	adds	r2, r2, r3
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <_sbrk+0x50>)
 8002818:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000458 	.word	0x20000458
 8002828:	20001308 	.word	0x20001308

0800282c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_TIM17_Init+0x48>)
 800283e:	4a11      	ldr	r2, [pc, #68]	; (8002884 <MX_TIM17_Init+0x4c>)
 8002840:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_TIM17_Init+0x48>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <MX_TIM17_Init+0x48>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_TIM17_Init+0x48>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	00d2      	lsls	r2, r2, #3
 8002854:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <MX_TIM17_Init+0x48>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_TIM17_Init+0x48>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <MX_TIM17_Init+0x48>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <MX_TIM17_Init+0x48>)
 800286a:	0018      	movs	r0, r3
 800286c:	f001 fb7c 	bl	8003f68 <HAL_TIM_Base_Init>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002874:	f7ff fe4b 	bl	800250e <Error_Handler>
  }

}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	200012b8 	.word	0x200012b8
 8002884:	40014800 	.word	0x40014800

08002888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_TIM_Base_MspInit+0x48>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d115      	bne.n	80028c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_TIM_Base_MspInit+0x4c>)
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_TIM_Base_MspInit+0x4c>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	02c9      	lsls	r1, r1, #11
 80028a4:	430a      	orrs	r2, r1
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_TIM_Base_MspInit+0x4c>)
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	02db      	lsls	r3, r3, #11
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	2016      	movs	r0, #22
 80028bc:	f000 fbb6 	bl	800302c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80028c0:	2016      	movs	r0, #22
 80028c2:	f000 fbc8 	bl	8003056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	40014800 	.word	0x40014800
 80028d4:	40021000 	.word	0x40021000

080028d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028dc:	480d      	ldr	r0, [pc, #52]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028de:	490e      	ldr	r1, [pc, #56]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f4:	4c0b      	ldr	r4, [pc, #44]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002902:	f7ff ff93 	bl	800282c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002906:	f004 f87d 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290a:	f7ff fd8d 	bl	8002428 <main>

0800290e <LoopForever>:

LoopForever:
    b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   r0, =_estack
 8002910:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800291c:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 8002920:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002924:	20001304 	.word	0x20001304

08002928 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_COMP_IRQHandler>
	...

0800292c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_Init+0x24>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_Init+0x24>)
 8002936:	2110      	movs	r1, #16
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f809 	bl	8002954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002942:	f7ff feef 	bl	8002724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40022000 	.word	0x40022000

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_InitTick+0x5c>)
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_InitTick+0x60>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	0019      	movs	r1, r3
 8002966:	23fa      	movs	r3, #250	; 0xfa
 8002968:	0098      	lsls	r0, r3, #2
 800296a:	f7fd fbdf 	bl	800012c <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	0019      	movs	r1, r3
 8002972:	0020      	movs	r0, r4
 8002974:	f7fd fbda 	bl	800012c <__udivsi3>
 8002978:	0003      	movs	r3, r0
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fb7b 	bl	8003076 <HAL_SYSTICK_Config>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e00f      	b.n	80029a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d80b      	bhi.n	80029a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	2301      	movs	r3, #1
 8002992:	425b      	negs	r3, r3
 8002994:	2200      	movs	r2, #0
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fb48 	bl	800302c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_InitTick+0x64>)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b003      	add	sp, #12
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000008 	.word	0x20000008
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x1c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	001a      	movs	r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_IncTick+0x20>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	18d2      	adds	r2, r2, r3
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_IncTick+0x20>)
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	20000008 	.word	0x20000008
 80029dc:	200012f8 	.word	0x200012f8

080029e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <HAL_GetTick+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	200012f8 	.word	0x200012f8

080029f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_Delay+0x40>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	001a      	movs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	f7ff ffe0 	bl	80029e0 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000008 	.word	0x20000008

08002a38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	230f      	movs	r3, #15
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e125      	b.n	8002ca2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2234      	movs	r2, #52	; 0x34
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff fbb0 	bl	80021d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d000      	beq.n	8002a80 <HAL_ADC_Init+0x48>
 8002a7e:	e103      	b.n	8002c88 <HAL_ADC_Init+0x250>
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d000      	beq.n	8002a8c <HAL_ADC_Init+0x54>
 8002a8a:	e0fd      	b.n	8002c88 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2204      	movs	r2, #4
 8002a94:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002a96:	d000      	beq.n	8002a9a <HAL_ADC_Init+0x62>
 8002a98:	e0f6      	b.n	8002c88 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	4a83      	ldr	r2, [pc, #524]	; (8002cac <HAL_ADC_Init+0x274>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d112      	bne.n	8002ade <HAL_ADC_Init+0xa6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_Init+0xa2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Init+0xa6>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_Init+0xa8>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2218      	movs	r2, #24
 8002aec:	4393      	bics	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	0899      	lsrs	r1, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4964      	ldr	r1, [pc, #400]	; (8002cb0 <HAL_ADC_Init+0x278>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7e1b      	ldrb	r3, [r3, #24]
 8002b26:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e5b      	ldrb	r3, [r3, #25]
 8002b2c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e9b      	ldrb	r3, [r3, #26]
 8002b34:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002b36:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d002      	beq.n	8002b46 <HAL_ADC_Init+0x10e>
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	015b      	lsls	r3, r3, #5
 8002b44:	e000      	b.n	8002b48 <HAL_ADC_Init+0x110>
 8002b46:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b48:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002b4e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_Init+0x124>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e000      	b.n	8002b5e <HAL_ADC_Init+0x126>
 8002b5c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002b5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2124      	movs	r1, #36	; 0x24
 8002b64:	5c5b      	ldrb	r3, [r3, r1]
 8002b66:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002b68:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7edb      	ldrb	r3, [r3, #27]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d115      	bne.n	8002ba4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7e9b      	ldrb	r3, [r3, #26]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	0252      	lsls	r2, r2, #9
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	2220      	movs	r2, #32
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	23c2      	movs	r3, #194	; 0xc2
 8002baa:	33ff      	adds	r3, #255	; 0xff
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d007      	beq.n	8002bc0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68d9      	ldr	r1, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	055b      	lsls	r3, r3, #21
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d01b      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d017      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d013      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d00f      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00b      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d003      	beq.n	8002c14 <HAL_ADC_Init+0x1dc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d112      	bne.n	8002c3a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2107      	movs	r1, #7
 8002c20:	438a      	bics	r2, r1
 8002c22:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	2207      	movs	r2, #7
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_ADC_Init+0x27c>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d10b      	bne.n	8002c62 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	2203      	movs	r2, #3
 8002c56:	4393      	bics	r3, r2
 8002c58:	2201      	movs	r2, #1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c60:	e01c      	b.n	8002c9c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	2212      	movs	r2, #18
 8002c68:	4393      	bics	r3, r2
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2201      	movs	r2, #1
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c86:	e009      	b.n	8002c9c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002c94:	230f      	movs	r3, #15
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	fffffefd 	.word	0xfffffefd
 8002cb0:	fffe0219 	.word	0xfffe0219
 8002cb4:	833fffe7 	.word	0x833fffe7

08002cb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	230f      	movs	r3, #15
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	055b      	lsls	r3, r3, #21
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d011      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x46>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d00d      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x46>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d009      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x46>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d005      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x46>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d001      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x46>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2234      	movs	r2, #52	; 0x34
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x54>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0d0      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1f6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2234      	movs	r2, #52	; 0x34
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d000      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x6a>
 8002d20:	e0b4      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4a64      	ldr	r2, [pc, #400]	; (8002eb8 <HAL_ADC_ConfigChannel+0x200>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x76>
 8002d2c:	e082      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	055b      	lsls	r3, r3, #21
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d037      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d033      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d02f      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d02b      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d027      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d023      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d01f      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d01b      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2107      	movs	r1, #7
 8002d94:	400b      	ands	r3, r1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d012      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2107      	movs	r1, #7
 8002da6:	438a      	bics	r2, r1
 8002da8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6959      	ldr	r1, [r3, #20]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2207      	movs	r2, #7
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d007      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x120>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b11      	cmp	r3, #17
 8002dce:	d003      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x120>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b12      	cmp	r3, #18
 8002dd6:	d163      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002dd8:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_ADC_ConfigChannel+0x204>)
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d009      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x140>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b11      	cmp	r3, #17
 8002dea:	d102      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x13a>
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	03db      	lsls	r3, r3, #15
 8002df0:	e004      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x144>
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	045b      	lsls	r3, r3, #17
 8002df6:	e001      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x144>
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <HAL_ADC_ConfigChannel+0x204>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d14a      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_ADC_ConfigChannel+0x208>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	492d      	ldr	r1, [pc, #180]	; (8002ec4 <HAL_ADC_ConfigChannel+0x20c>)
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7fd f98b 	bl	800012c <__udivsi3>
 8002e16:	0003      	movs	r3, r0
 8002e18:	001a      	movs	r2, r3
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x16e>
 8002e32:	e035      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4099      	lsls	r1, r3
 8002e42:	000b      	movs	r3, r1
 8002e44:	43d9      	mvns	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d007      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x1ae>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b11      	cmp	r3, #17
 8002e5c:	d003      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x1ae>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b12      	cmp	r3, #18
 8002e64:	d11c      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_ADC_ConfigChannel+0x204>)
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d007      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x1ca>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b11      	cmp	r3, #17
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x1c6>
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_ADC_ConfigChannel+0x210>)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x1cc>
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_ADC_ConfigChannel+0x214>)
 8002e80:	e000      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x1cc>
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_ADC_ConfigChannel+0x218>)
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_ADC_ConfigChannel+0x204>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e009      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2220      	movs	r2, #32
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2234      	movs	r2, #52	; 0x34
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	00001001 	.word	0x00001001
 8002ebc:	40012708 	.word	0x40012708
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	000f4240 	.word	0x000f4240
 8002ec8:	ffbfffff 	.word	0xffbfffff
 8002ecc:	feffffff 	.word	0xfeffffff
 8002ed0:	ff7fffff 	.word	0xff7fffff

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	0002      	movs	r2, r0
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ee6:	d809      	bhi.n	8002efc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	001a      	movs	r2, r3
 8002eee:	231f      	movs	r3, #31
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_EnableIRQ+0x30>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4091      	lsls	r1, r2
 8002ef8:	000a      	movs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
  }
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	0002      	movs	r2, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1c:	d828      	bhi.n	8002f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1e:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	33c0      	adds	r3, #192	; 0xc0
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	589b      	ldr	r3, [r3, r2]
 8002f2e:	1dfa      	adds	r2, r7, #7
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	0011      	movs	r1, r2
 8002f34:	2203      	movs	r2, #3
 8002f36:	400a      	ands	r2, r1
 8002f38:	00d2      	lsls	r2, r2, #3
 8002f3a:	21ff      	movs	r1, #255	; 0xff
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	401a      	ands	r2, r3
 8002f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	2303      	movs	r3, #3
 8002f56:	4003      	ands	r3, r0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	481f      	ldr	r0, [pc, #124]	; (8002fdc <__NVIC_SetPriority+0xd4>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	430a      	orrs	r2, r1
 8002f68:	33c0      	adds	r3, #192	; 0xc0
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f6e:	e031      	b.n	8002fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	0019      	movs	r1, r3
 8002f78:	230f      	movs	r3, #15
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	3b08      	subs	r3, #8
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3306      	adds	r3, #6
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1dfa      	adds	r2, r7, #7
 8002f8c:	7812      	ldrb	r2, [r2, #0]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	2203      	movs	r2, #3
 8002f92:	400a      	ands	r2, r1
 8002f94:	00d2      	lsls	r2, r2, #3
 8002f96:	21ff      	movs	r1, #255	; 0xff
 8002f98:	4091      	lsls	r1, r2
 8002f9a:	000a      	movs	r2, r1
 8002f9c:	43d2      	mvns	r2, r2
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	401a      	ands	r2, r3
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	4003      	ands	r3, r0
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb8:	4809      	ldr	r0, [pc, #36]	; (8002fe0 <__NVIC_SetPriority+0xd8>)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	001c      	movs	r4, r3
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	4023      	ands	r3, r4
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	3306      	adds	r3, #6
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	18c3      	adds	r3, r0, r3
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	601a      	str	r2, [r3, #0]
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b003      	add	sp, #12
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <SysTick_Config+0x40>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e010      	b.n	800301c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <SysTick_Config+0x44>)
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	3a01      	subs	r2, #1
 8003000:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	2301      	movs	r3, #1
 8003004:	425b      	negs	r3, r3
 8003006:	2103      	movs	r1, #3
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff ff7d 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <SysTick_Config+0x44>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x44>)
 8003016:	2207      	movs	r2, #7
 8003018:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301a:	2300      	movs	r3, #0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	00ffffff 	.word	0x00ffffff
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	210f      	movs	r1, #15
 8003038:	187b      	adds	r3, r7, r1
 800303a:	1c02      	adds	r2, r0, #0
 800303c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	187b      	adds	r3, r7, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b25b      	sxtb	r3, r3
 8003046:	0011      	movs	r1, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff5d 	bl	8002f08 <__NVIC_SetPriority>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	0002      	movs	r2, r0
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b25b      	sxtb	r3, r3
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff ff33 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7ff ffaf 	bl	8002fe4 <SysTick_Config>
 8003086:	0003      	movs	r3, r0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309e:	e155      	b.n	800334c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4091      	lsls	r1, r2
 80030aa:	000a      	movs	r2, r1
 80030ac:	4013      	ands	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <HAL_GPIO_Init+0x28>
 80030b6:	e146      	b.n	8003346 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x38>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d123      	bne.n	8003110 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	0092      	lsls	r2, r2, #2
 80030d2:	58d3      	ldr	r3, [r2, r3]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2207      	movs	r2, #7
 80030da:	4013      	ands	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	409a      	lsls	r2, r3
 80030e2:	0013      	movs	r3, r2
 80030e4:	43da      	mvns	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2107      	movs	r1, #7
 80030f4:	400b      	ands	r3, r1
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	409a      	lsls	r2, r3
 80030fa:	0013      	movs	r3, r2
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	08da      	lsrs	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3208      	adds	r2, #8
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	6939      	ldr	r1, [r7, #16]
 800310e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	409a      	lsls	r2, r3
 800311e:	0013      	movs	r3, r2
 8003120:	43da      	mvns	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	401a      	ands	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	0013      	movs	r3, r2
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d00b      	beq.n	8003164 <HAL_GPIO_Init+0xd4>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d007      	beq.n	8003164 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003158:	2b11      	cmp	r3, #17
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b12      	cmp	r3, #18
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	43da      	mvns	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	409a      	lsls	r2, r3
 8003186:	0013      	movs	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	43da      	mvns	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	2201      	movs	r2, #1
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	055b      	lsls	r3, r3, #21
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_GPIO_Init+0x174>
 8003202:	e0a0      	b.n	8003346 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003204:	4b57      	ldr	r3, [pc, #348]	; (8003364 <HAL_GPIO_Init+0x2d4>)
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b56      	ldr	r3, [pc, #344]	; (8003364 <HAL_GPIO_Init+0x2d4>)
 800320a:	2101      	movs	r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
 8003210:	4b54      	ldr	r3, [pc, #336]	; (8003364 <HAL_GPIO_Init+0x2d4>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_GPIO_Init+0x2d8>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	589b      	ldr	r3, [r3, r2]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2203      	movs	r2, #3
 800322e:	4013      	ands	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	43da      	mvns	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	2390      	movs	r3, #144	; 0x90
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	429a      	cmp	r2, r3
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x1ee>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a47      	ldr	r2, [pc, #284]	; (800336c <HAL_GPIO_Init+0x2dc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x1ea>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a46      	ldr	r2, [pc, #280]	; (8003370 <HAL_GPIO_Init+0x2e0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x1e6>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a45      	ldr	r2, [pc, #276]	; (8003374 <HAL_GPIO_Init+0x2e4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x1e2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a44      	ldr	r2, [pc, #272]	; (8003378 <HAL_GPIO_Init+0x2e8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x1de>
 800326a:	2304      	movs	r3, #4
 800326c:	e008      	b.n	8003280 <HAL_GPIO_Init+0x1f0>
 800326e:	2305      	movs	r3, #5
 8003270:	e006      	b.n	8003280 <HAL_GPIO_Init+0x1f0>
 8003272:	2303      	movs	r3, #3
 8003274:	e004      	b.n	8003280 <HAL_GPIO_Init+0x1f0>
 8003276:	2302      	movs	r3, #2
 8003278:	e002      	b.n	8003280 <HAL_GPIO_Init+0x1f0>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_GPIO_Init+0x1f0>
 800327e:	2300      	movs	r3, #0
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	2103      	movs	r1, #3
 8003284:	400a      	ands	r2, r1
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	4093      	lsls	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003290:	4935      	ldr	r1, [pc, #212]	; (8003368 <HAL_GPIO_Init+0x2d8>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329e:	4b37      	ldr	r3, [pc, #220]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	4013      	ands	r3, r2
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032c8:	4b2c      	ldr	r3, [pc, #176]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_GPIO_Init+0x2ec>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43da      	mvns	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	035b      	lsls	r3, r3, #13
 800330a:	4013      	ands	r3, r2
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_GPIO_Init+0x2ec>)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_GPIO_Init+0x2ec>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43da      	mvns	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	039b      	lsls	r3, r3, #14
 8003334:	4013      	ands	r3, r2
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_GPIO_Init+0x2ec>)
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3301      	adds	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	40da      	lsrs	r2, r3
 8003354:	1e13      	subs	r3, r2, #0
 8003356:	d000      	beq.n	800335a <HAL_GPIO_Init+0x2ca>
 8003358:	e6a2      	b.n	80030a0 <HAL_GPIO_Init+0x10>
  } 
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	40010000 	.word	0x40010000
 800336c:	48000400 	.word	0x48000400
 8003370:	48000800 	.word	0x48000800
 8003374:	48000c00 	.word	0x48000c00
 8003378:	48001000 	.word	0x48001000
 800337c:	40010400 	.word	0x40010400

08003380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	000a      	movs	r2, r1
 800338a:	1cbb      	adds	r3, r7, #2
 800338c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	1cba      	adds	r2, r7, #2
 8003394:	8812      	ldrh	r2, [r2, #0]
 8003396:	4013      	ands	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800339a:	230f      	movs	r3, #15
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e003      	b.n	80033ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a4:	230f      	movs	r3, #15
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033ac:	230f      	movs	r3, #15
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
  }
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b004      	add	sp, #16
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	0008      	movs	r0, r1
 80033c4:	0011      	movs	r1, r2
 80033c6:	1cbb      	adds	r3, r7, #2
 80033c8:	1c02      	adds	r2, r0, #0
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	1c7b      	adds	r3, r7, #1
 80033ce:	1c0a      	adds	r2, r1, #0
 80033d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d2:	1c7b      	adds	r3, r7, #1
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033e2:	e003      	b.n	80033ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e4:	1cbb      	adds	r3, r7, #2
 80033e6:	881a      	ldrh	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	000a      	movs	r2, r1
 80033fe:	1cbb      	adds	r3, r7, #2
 8003400:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	1cba      	adds	r2, r7, #2
 8003408:	8812      	ldrh	r2, [r2, #0]
 800340a:	4013      	ands	r3, r2
 800340c:	d005      	beq.n	800341a <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800340e:	1cbb      	adds	r3, r7, #2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	041a      	lsls	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800341a:	1cbb      	adds	r3, r7, #2
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b002      	add	sp, #8
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	0002      	movs	r2, r0
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	1dba      	adds	r2, r7, #6
 800343e:	8812      	ldrh	r2, [r2, #0]
 8003440:	4013      	ands	r3, r2
 8003442:	d008      	beq.n	8003456 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003446:	1dba      	adds	r2, r7, #6
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f807 	bl	8003464 <HAL_GPIO_EXTI_Callback>
  }
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	40010400 	.word	0x40010400

08003464 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	0002      	movs	r2, r0
 800346c:	1dbb      	adds	r3, r7, #6
 800346e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f000 fb76 	bl	8003b78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x20>
 8003496:	e08e      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003498:	4bc5      	ldr	r3, [pc, #788]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	220c      	movs	r2, #12
 800349e:	4013      	ands	r3, r2
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d00e      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a4:	4bc2      	ldr	r3, [pc, #776]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d117      	bne.n	80034e0 <HAL_RCC_OscConfig+0x68>
 80034b0:	4bbf      	ldr	r3, [pc, #764]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	025b      	lsls	r3, r3, #9
 80034b8:	401a      	ands	r2, r3
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10e      	bne.n	80034e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4bbb      	ldr	r3, [pc, #748]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	4013      	ands	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_RCC_OscConfig+0x58>
 80034ce:	e071      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d000      	beq.n	80034da <HAL_RCC_OscConfig+0x62>
 80034d8:	e06c      	b.n	80035b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f000 fb4c 	bl	8003b78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x80>
 80034e8:	4bb1      	ldr	r3, [pc, #708]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4bb0      	ldr	r3, [pc, #704]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	0249      	lsls	r1, r1, #9
 80034f2:	430a      	orrs	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e02f      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0xa2>
 8003500:	4bab      	ldr	r3, [pc, #684]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4baa      	ldr	r3, [pc, #680]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003506:	49ab      	ldr	r1, [pc, #684]	; (80037b4 <HAL_RCC_OscConfig+0x33c>)
 8003508:	400a      	ands	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	4ba8      	ldr	r3, [pc, #672]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4ba7      	ldr	r3, [pc, #668]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003512:	49a9      	ldr	r1, [pc, #676]	; (80037b8 <HAL_RCC_OscConfig+0x340>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e01e      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10e      	bne.n	8003540 <HAL_RCC_OscConfig+0xc8>
 8003522:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4ba2      	ldr	r3, [pc, #648]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	02c9      	lsls	r1, r1, #11
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	4b9f      	ldr	r3, [pc, #636]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b9e      	ldr	r3, [pc, #632]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	0249      	lsls	r1, r1, #9
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xe0>
 8003540:	4b9b      	ldr	r3, [pc, #620]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b9a      	ldr	r3, [pc, #616]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003546:	499b      	ldr	r1, [pc, #620]	; (80037b4 <HAL_RCC_OscConfig+0x33c>)
 8003548:	400a      	ands	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	4b98      	ldr	r3, [pc, #608]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b97      	ldr	r3, [pc, #604]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003552:	4999      	ldr	r1, [pc, #612]	; (80037b8 <HAL_RCC_OscConfig+0x340>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d014      	beq.n	800358a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff fa3e 	bl	80029e0 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800356a:	f7ff fa39 	bl	80029e0 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e2fd      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357c:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0xf2>
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7ff fa29 	bl	80029e0 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003594:	f7ff fa24 	bl	80029e0 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e2e8      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	029b      	lsls	r3, r3, #10
 80035ae:	4013      	ands	r3, r2
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x11c>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2202      	movs	r2, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d100      	bne.n	80035c2 <HAL_RCC_OscConfig+0x14a>
 80035c0:	e06c      	b.n	800369c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c2:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	220c      	movs	r2, #12
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035cc:	4b78      	ldr	r3, [pc, #480]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	220c      	movs	r2, #12
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11f      	bne.n	8003618 <HAL_RCC_OscConfig+0x1a0>
 80035d8:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	23c0      	movs	r3, #192	; 0xc0
 80035de:	025b      	lsls	r3, r3, #9
 80035e0:	401a      	ands	r2, r3
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2202      	movs	r2, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x188>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e2bb      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22f8      	movs	r2, #248	; 0xf8
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00da      	lsls	r2, r3, #3
 8003610:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e041      	b.n	800369c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d024      	beq.n	800366a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003626:	2101      	movs	r1, #1
 8003628:	430a      	orrs	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7ff f9d8 	bl	80029e0 <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003636:	f7ff f9d3 	bl	80029e0 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e297      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	4013      	ands	r3, r2
 8003650:	d0f1      	beq.n	8003636 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	22f8      	movs	r2, #248	; 0xf8
 8003658:	4393      	bics	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00da      	lsls	r2, r3, #3
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e018      	b.n	800369c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7ff f9b3 	bl	80029e0 <HAL_GetTick>
 800367a:	0003      	movs	r3, r0
 800367c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7ff f9ae 	bl	80029e0 <HAL_GetTick>
 8003684:	0002      	movs	r2, r0
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e272      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	d1f1      	bne.n	8003680 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	4013      	ands	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d019      	beq.n	80036e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff f991 	bl	80029e0 <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c4:	f7ff f98c 	bl	80029e0 <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e250      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x24c>
 80036e0:	e018      	b.n	8003714 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e2:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7ff f977 	bl	80029e0 <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7ff f972 	bl	80029e0 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e236      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2202      	movs	r2, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d1f1      	bne.n	80036f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d100      	bne.n	8003720 <HAL_RCC_OscConfig+0x2a8>
 800371e:	e0b5      	b.n	800388c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	055b      	lsls	r3, r3, #21
 8003730:	4013      	ands	r3, r2
 8003732:	d111      	bne.n	8003758 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	0549      	lsls	r1, r1, #21
 800373e:	430a      	orrs	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	055b      	lsls	r3, r3, #21
 800374a:	4013      	ands	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003750:	231f      	movs	r3, #31
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4013      	ands	r3, r2
 8003762:	d11a      	bne.n	800379a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 800376a:	2180      	movs	r1, #128	; 0x80
 800376c:	0049      	lsls	r1, r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7ff f935 	bl	80029e0 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7ff f930 	bl	80029e0 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1f4      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x344>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4013      	ands	r3, r2
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10e      	bne.n	80037c0 <HAL_RCC_OscConfig+0x348>
 80037a2:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <HAL_RCC_OscConfig+0x338>)
 80037a8:	2101      	movs	r1, #1
 80037aa:	430a      	orrs	r2, r1
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	e035      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 80037b0:	40021000 	.word	0x40021000
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	fffbffff 	.word	0xfffbffff
 80037bc:	40007000 	.word	0x40007000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x36a>
 80037c8:	4bca      	ldr	r3, [pc, #808]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	4bc9      	ldr	r3, [pc, #804]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	621a      	str	r2, [r3, #32]
 80037d4:	4bc7      	ldr	r3, [pc, #796]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4bc6      	ldr	r3, [pc, #792]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037da:	2104      	movs	r1, #4
 80037dc:	438a      	bics	r2, r1
 80037de:	621a      	str	r2, [r3, #32]
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x38c>
 80037ea:	4bc2      	ldr	r3, [pc, #776]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	4bc1      	ldr	r3, [pc, #772]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037f0:	2104      	movs	r1, #4
 80037f2:	430a      	orrs	r2, r1
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	4bbf      	ldr	r3, [pc, #764]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	4bbe      	ldr	r3, [pc, #760]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x3a4>
 8003804:	4bbb      	ldr	r3, [pc, #748]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	4bba      	ldr	r3, [pc, #744]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800380a:	2101      	movs	r1, #1
 800380c:	438a      	bics	r2, r1
 800380e:	621a      	str	r2, [r3, #32]
 8003810:	4bb8      	ldr	r3, [pc, #736]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	4bb7      	ldr	r3, [pc, #732]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003816:	2104      	movs	r1, #4
 8003818:	438a      	bics	r2, r1
 800381a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d014      	beq.n	800384e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7ff f8dc 	bl	80029e0 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e009      	b.n	8003842 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7ff f8d7 	bl	80029e0 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	4aaf      	ldr	r2, [pc, #700]	; (8003af8 <HAL_RCC_OscConfig+0x680>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e19a      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4bac      	ldr	r3, [pc, #688]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	2202      	movs	r2, #2
 8003848:	4013      	ands	r3, r2
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x3b6>
 800384c:	e013      	b.n	8003876 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7ff f8c7 	bl	80029e0 <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7ff f8c2 	bl	80029e0 <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	4aa5      	ldr	r2, [pc, #660]	; (8003af8 <HAL_RCC_OscConfig+0x680>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e185      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	2202      	movs	r2, #2
 8003872:	4013      	ands	r3, r2
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b9c      	ldr	r3, [pc, #624]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	4b9b      	ldr	r3, [pc, #620]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003886:	499d      	ldr	r1, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x684>)
 8003888:	400a      	ands	r2, r1
 800388a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	4013      	ands	r3, r2
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12a      	bne.n	80038f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800389e:	4b95      	ldr	r3, [pc, #596]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a2:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038a4:	2104      	movs	r1, #4
 80038a6:	430a      	orrs	r2, r1
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80038aa:	4b92      	ldr	r3, [pc, #584]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ae:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7ff f893 	bl	80029e0 <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038c0:	f7ff f88e 	bl	80029e0 <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e152      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d0f1      	beq.n	80038c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038dc:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	22f8      	movs	r2, #248	; 0xf8
 80038e2:	4393      	bics	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	00da      	lsls	r2, r3, #3
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
 80038f2:	e034      	b.n	800395e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	3305      	adds	r3, #5
 80038fa:	d111      	bne.n	8003920 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038fc:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80038fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003900:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003902:	2104      	movs	r1, #4
 8003904:	438a      	bics	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003908:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	22f8      	movs	r2, #248	; 0xf8
 800390e:	4393      	bics	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800391a:	430a      	orrs	r2, r1
 800391c:	635a      	str	r2, [r3, #52]	; 0x34
 800391e:	e01e      	b.n	800395e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003920:	4b74      	ldr	r3, [pc, #464]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003926:	2104      	movs	r1, #4
 8003928:	430a      	orrs	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800392c:	4b71      	ldr	r3, [pc, #452]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800392e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003932:	2101      	movs	r1, #1
 8003934:	438a      	bics	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7ff f852 	bl	80029e0 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003942:	f7ff f84d 	bl	80029e0 <HAL_GetTick>
 8003946:	0002      	movs	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e111      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003954:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	2202      	movs	r2, #2
 800395a:	4013      	ands	r3, r2
 800395c:	d1f1      	bne.n	8003942 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	d05c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	220c      	movs	r2, #12
 800396e:	4013      	ands	r3, r2
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d00e      	beq.n	8003992 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003974:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	220c      	movs	r2, #12
 800397a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800397c:	2b08      	cmp	r3, #8
 800397e:	d114      	bne.n	80039aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003980:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	401a      	ands	r2, r3
 800398a:	23c0      	movs	r3, #192	; 0xc0
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	429a      	cmp	r2, r3
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003992:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	025b      	lsls	r3, r3, #9
 800399a:	4013      	ands	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_RCC_OscConfig+0x5a8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d03c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0e6      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01b      	beq.n	80039ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	0249      	lsls	r1, r1, #9
 80039bc:	430a      	orrs	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7ff f80e 	bl	80029e0 <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ca:	f7ff f809 	bl	80029e0 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0cd      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	025b      	lsls	r3, r3, #9
 80039e4:	4013      	ands	r3, r2
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x552>
 80039e8:	e01b      	b.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80039ea:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 80039f0:	4943      	ldr	r1, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x688>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fff3 	bl	80029e0 <HAL_GetTick>
 80039fa:	0003      	movs	r3, r0
 80039fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7fe ffee 	bl	80029e0 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0b2      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a12:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x588>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_RCC_OscConfig+0x5b4>
 8003a2a:	e0a4      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	220c      	movs	r2, #12
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d100      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5c2>
 8003a38:	e078      	b.n	8003b2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d14c      	bne.n	8003adc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a48:	492e      	ldr	r1, [pc, #184]	; (8003b04 <HAL_RCC_OscConfig+0x68c>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe ffc7 	bl	80029e0 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe ffc2 	bl	80029e0 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e086      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	049b      	lsls	r3, r3, #18
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_RCC_OscConfig+0x690>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	0449      	lsls	r1, r1, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe ff95 	bl	80029e0 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe ff90 	bl	80029e0 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e054      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	049b      	lsls	r3, r3, #18
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x644>
 8003ada:	e04c      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_RCC_OscConfig+0x67c>)
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <HAL_RCC_OscConfig+0x68c>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fe ff7a 	bl	80029e0 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x6a6>
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40021000 	.word	0x40021000
 8003af8:	00001388 	.word	0x00001388
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	fffeffff 	.word	0xfffeffff
 8003b04:	feffffff 	.word	0xfeffffff
 8003b08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe ff68 	bl	80029e0 <HAL_GetTick>
 8003b10:	0002      	movs	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e02c      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	049b      	lsls	r3, r3, #18
 8003b26:	4013      	ands	r3, r2
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x694>
 8003b2a:	e024      	b.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01f      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x708>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	23c0      	movs	r3, #192	; 0xc0
 8003b48:	025b      	lsls	r3, r3, #9
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	220f      	movs	r2, #15
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	23f0      	movs	r3, #240	; 0xf0
 8003b66:	039b      	lsls	r3, r3, #14
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b008      	add	sp, #32
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0bf      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d911      	bls.n	8003bca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4393      	bics	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	4b5b      	ldr	r3, [pc, #364]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0a6      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d006      	beq.n	8003bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003be4:	21e0      	movs	r1, #224	; 0xe0
 8003be6:	00c9      	lsls	r1, r1, #3
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	22f0      	movs	r2, #240	; 0xf0
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4013      	ands	r3, r2
 8003c08:	d04c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d120      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07a      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	049b      	lsls	r3, r3, #18
 8003c32:	4013      	ands	r3, r2
 8003c34:	d114      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06e      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	025b      	lsls	r3, r3, #9
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e062      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e05b      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2203      	movs	r2, #3
 8003c66:	4393      	bics	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fe feb4 	bl	80029e0 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7c:	e009      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7e:	f7fe feaf 	bl	80029e0 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_RCC_ClockConfig+0x1a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e042      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	220c      	movs	r2, #12
 8003c98:	401a      	ands	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1ec      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d211      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4393      	bics	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x19c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e020      	b.n	8003d18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_RCC_ClockConfig+0x1a8>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cf4:	f000 f820 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf8:	0001      	movs	r1, r0
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1a0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	220f      	movs	r2, #15
 8003d02:	4013      	ands	r3, r2
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x1ac>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	000a      	movs	r2, r1
 8003d0a:	40da      	lsrs	r2, r3
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1b0>)
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d10:	2003      	movs	r0, #3
 8003d12:	f7fe fe1f 	bl	8002954 <HAL_InitTick>
  
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	00001388 	.word	0x00001388
 8003d2c:	fffff8ff 	.word	0xfffff8ff
 8003d30:	08008ca4 	.word	0x08008ca4
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b08f      	sub	sp, #60	; 0x3c
 8003d3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003d3e:	2314      	movs	r3, #20
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003d44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d46:	c313      	stmia	r3!, {r0, r1, r4}
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xec>)
 8003d50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d52:	c313      	stmia	r3!, {r0, r1, r4}
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d60:	2300      	movs	r3, #0
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	220c      	movs	r2, #12
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d006      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x52>
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	d043      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xd0>
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d144      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d88:	e044      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	0c9b      	lsrs	r3, r3, #18
 8003d8e:	220f      	movs	r2, #15
 8003d90:	4013      	ands	r3, r2
 8003d92:	2214      	movs	r2, #20
 8003d94:	18ba      	adds	r2, r7, r2
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	220f      	movs	r2, #15
 8003da0:	4013      	ands	r3, r2
 8003da2:	1d3a      	adds	r2, r7, #4
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003daa:	23c0      	movs	r3, #192	; 0xc0
 8003dac:	025b      	lsls	r3, r3, #9
 8003dae:	401a      	ands	r2, r3
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d109      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dba:	481c      	ldr	r0, [pc, #112]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003dbc:	f7fc f9b6 	bl	800012c <__udivsi3>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	4353      	muls	r3, r2
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dca:	e01a      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dce:	23c0      	movs	r3, #192	; 0xc0
 8003dd0:	025b      	lsls	r3, r3, #9
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	23c0      	movs	r3, #192	; 0xc0
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d109      	bne.n	8003df0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dde:	4814      	ldr	r0, [pc, #80]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003de0:	f7fc f9a4 	bl	800012c <__udivsi3>
 8003de4:	0003      	movs	r3, r0
 8003de6:	001a      	movs	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	4353      	muls	r3, r2
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df2:	480e      	ldr	r0, [pc, #56]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003df4:	f7fc f99a 	bl	800012c <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	4353      	muls	r3, r2
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e12:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b00f      	add	sp, #60	; 0x3c
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	08008bfc 	.word	0x08008bfc
 8003e24:	08008c0c 	.word	0x08008c0c
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	02dc6c00 	.word	0x02dc6c00

08003e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e08a      	b.n	8003f5c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	225d      	movs	r2, #93	; 0x5d
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	225c      	movs	r2, #92	; 0x5c
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fe fbd4 	bl	8002610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	225d      	movs	r2, #93	; 0x5d
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	23e0      	movs	r3, #224	; 0xe0
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d902      	bls.n	8003e92 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e002      	b.n	8003e98 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e92:	2380      	movs	r3, #128	; 0x80
 8003e94:	015b      	lsls	r3, r3, #5
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	23f0      	movs	r3, #240	; 0xf0
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d008      	beq.n	8003eb6 <HAL_SPI_Init+0x82>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	23e0      	movs	r3, #224	; 0xe0
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d002      	beq.n	8003eb6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	23e0      	movs	r3, #224	; 0xe0
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d903      	bls.n	8003ed2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed0:	e002      	b.n	8003ed8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	0011      	movs	r1, r2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	0011      	movs	r1, r2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4907      	ldr	r1, [pc, #28]	; (8003f64 <HAL_SPI_Init+0x130>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	225d      	movs	r2, #93	; 0x5d
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	fffff7ff 	.word	0xfffff7ff

08003f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e01e      	b.n	8003fb8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	223d      	movs	r2, #61	; 0x3d
 8003f7e:	5c9b      	ldrb	r3, [r3, r2]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	223c      	movs	r2, #60	; 0x3c
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7fe fc79 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	223d      	movs	r2, #61	; 0x3d
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	0010      	movs	r0, r2
 8003faa:	f000 f947 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	223d      	movs	r2, #61	; 0x3d
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d124      	bne.n	8004020 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11d      	bne.n	8004020 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4252      	negs	r2, r2
 8003fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f000 f902 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8004008:	e007      	b.n	800401a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f8f5 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 f901 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
 800402a:	2b04      	cmp	r3, #4
 800402c:	d125      	bne.n	800407a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2204      	movs	r2, #4
 8004036:	4013      	ands	r3, r2
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11e      	bne.n	800407a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2205      	movs	r2, #5
 8004042:	4252      	negs	r2, r2
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	23c0      	movs	r3, #192	; 0xc0
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f8d5 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8004062:	e007      	b.n	8004074 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f8c8 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f8d4 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	2b08      	cmp	r3, #8
 8004086:	d124      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2208      	movs	r2, #8
 8004090:	4013      	ands	r3, r2
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11d      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2209      	movs	r2, #9
 800409c:	4252      	negs	r2, r2
 800409e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2203      	movs	r2, #3
 80040ae:	4013      	ands	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f8a9 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 80040ba:	e007      	b.n	80040cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f89c 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f8a8 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2210      	movs	r2, #16
 80040da:	4013      	ands	r3, r2
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d125      	bne.n	800412c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2210      	movs	r2, #16
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d11e      	bne.n	800412c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2211      	movs	r2, #17
 80040f4:	4252      	negs	r2, r2
 80040f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2208      	movs	r2, #8
 80040fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	23c0      	movs	r3, #192	; 0xc0
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4013      	ands	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 f87c 	bl	800420c <HAL_TIM_IC_CaptureCallback>
 8004114:	e007      	b.n	8004126 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f000 f86f 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f87b 	bl	800421c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2201      	movs	r2, #1
 8004134:	4013      	ands	r3, r2
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10f      	bne.n	800415a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	4013      	ands	r3, r2
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	4252      	negs	r2, r2
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f849 	bl	80041ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	4013      	ands	r3, r2
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d10f      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	4013      	ands	r3, r2
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d108      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2281      	movs	r2, #129	; 0x81
 800417c:	4252      	negs	r2, r2
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 f8e2 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	4013      	ands	r3, r2
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d10f      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d108      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2241      	movs	r2, #65	; 0x41
 80041aa:	4252      	negs	r2, r2
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 f83b 	bl	800422c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2220      	movs	r2, #32
 80041be:	4013      	ands	r3, r2
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d10f      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d108      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2221      	movs	r2, #33	; 0x21
 80041d8:	4252      	negs	r2, r2
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 f8ac 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b002      	add	sp, #8
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a34      	ldr	r2, [pc, #208]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d008      	beq.n	8004266 <TIM_Base_SetConfig+0x2a>
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	429a      	cmp	r2, r3
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0x2a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <TIM_Base_SetConfig+0xe8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2270      	movs	r2, #112	; 0x70
 800426a:	4393      	bics	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a29      	ldr	r2, [pc, #164]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	05db      	lsls	r3, r3, #23
 8004286:	429a      	cmp	r2, r3
 8004288:	d013      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <TIM_Base_SetConfig+0xe8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00f      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a24      	ldr	r2, [pc, #144]	; (8004328 <TIM_Base_SetConfig+0xec>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <TIM_Base_SetConfig+0xf0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_Base_SetConfig+0xf4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_Base_SetConfig+0x76>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a21      	ldr	r2, [pc, #132]	; (8004334 <TIM_Base_SetConfig+0xf8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <TIM_Base_SetConfig+0xfc>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	4393      	bics	r3, r2
 80042ca:	001a      	movs	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_Base_SetConfig+0xce>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a0d      	ldr	r2, [pc, #52]	; (800432c <TIM_Base_SetConfig+0xf0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_Base_SetConfig+0xce>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <TIM_Base_SetConfig+0xf4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_Base_SetConfig+0xce>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <TIM_Base_SetConfig+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d103      	bne.n	8004312 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	615a      	str	r2, [r3, #20]
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40002000 	.word	0x40002000
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	fffffcff 	.word	0xfffffcff

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	0002      	movs	r2, r0
 8004364:	1dbb      	adds	r3, r7, #6
 8004366:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800436c:	1dbb      	adds	r3, r7, #6
 800436e:	2200      	movs	r2, #0
 8004370:	5e9b      	ldrsh	r3, [r3, r2]
 8004372:	2b84      	cmp	r3, #132	; 0x84
 8004374:	d006      	beq.n	8004384 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004376:	1dbb      	adds	r3, r7, #6
 8004378:	2200      	movs	r2, #0
 800437a:	5e9a      	ldrsh	r2, [r3, r2]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	18d3      	adds	r3, r2, r3
 8004380:	3303      	adds	r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b004      	add	sp, #16
 800438c:	bd80      	pop	{r7, pc}

0800438e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004392:	f000 faa1 	bl	80048d8 <vTaskStartScheduler>
  
  return osOK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800439e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a0:	b089      	sub	sp, #36	; 0x24
 80043a2:	af04      	add	r7, sp, #16
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <osThreadCreate+0x54>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01c      	beq.n	80043f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685c      	ldr	r4, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681d      	ldr	r5, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691e      	ldr	r6, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2208      	movs	r2, #8
 80043c8:	5e9b      	ldrsh	r3, [r3, r2]
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff ffc6 	bl	800435c <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	9201      	str	r2, [sp, #4]
 80043de:	9000      	str	r0, [sp, #0]
 80043e0:	000b      	movs	r3, r1
 80043e2:	0032      	movs	r2, r6
 80043e4:	0029      	movs	r1, r5
 80043e6:	0020      	movs	r0, r4
 80043e8:	f000 f8e3 	bl	80045b2 <xTaskCreateStatic>
 80043ec:	0003      	movs	r3, r0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e01d      	b.n	800442e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685c      	ldr	r4, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043fe:	b29e      	uxth	r6, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2208      	movs	r2, #8
 8004404:	5e9b      	ldrsh	r3, [r3, r2]
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff ffa8 	bl	800435c <makeFreeRtosPriority>
 800440c:	0001      	movs	r1, r0
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	230c      	movs	r3, #12
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	9100      	str	r1, [sp, #0]
 8004418:	0013      	movs	r3, r2
 800441a:	0032      	movs	r2, r6
 800441c:	0029      	movs	r1, r5
 800441e:	0020      	movs	r0, r4
 8004420:	f000 f90a 	bl	8004638 <xTaskCreate>
 8004424:	0003      	movs	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b005      	add	sp, #20
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004438 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <osDelay+0x16>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	e000      	b.n	8004450 <osDelay+0x18>
 800444e:	2301      	movs	r3, #1
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fa1b 	bl	800488c <vTaskDelay>
  
  return osOK;
 8004456:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}

08004460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3308      	adds	r3, #8
 800446c:	001a      	movs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	4252      	negs	r2, r2
 8004478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3308      	adds	r3, #8
 800447e:	001a      	movs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3308      	adds	r3, #8
 8004488:	001a      	movs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	d103      	bne.n	8004514 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e00c      	b.n	800452e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3308      	adds	r3, #8
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e002      	b.n	8004522 <vListInsert+0x2c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d2f6      	bcs.n	800451c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b004      	add	sp, #16
 8004560:	bd80      	pop	{r7, pc}

08004562 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6852      	ldr	r2, [r2, #4]
 8004582:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d103      	bne.n	8004596 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b004      	add	sp, #16
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045b2:	b590      	push	{r4, r7, lr}
 80045b4:	b08d      	sub	sp, #52	; 0x34
 80045b6:	af04      	add	r7, sp, #16
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xTaskCreateStatic+0x18>
 80045c6:	b672      	cpsid	i
 80045c8:	e7fe      	b.n	80045c8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <xTaskCreateStatic+0x22>
 80045d0:	b672      	cpsid	i
 80045d2:	e7fe      	b.n	80045d2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045d4:	2354      	movs	r3, #84	; 0x54
 80045d6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b54      	cmp	r3, #84	; 0x54
 80045dc:	d001      	beq.n	80045e2 <xTaskCreateStatic+0x30>
 80045de:	b672      	cpsid	i
 80045e0:	e7fe      	b.n	80045e0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <xTaskCreateStatic+0x78>
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01d      	beq.n	800462a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2251      	movs	r2, #81	; 0x51
 80045fc:	2102      	movs	r1, #2
 80045fe:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004600:	683c      	ldr	r4, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	2300      	movs	r3, #0
 800460a:	9303      	str	r3, [sp, #12]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	2318      	movs	r3, #24
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	0023      	movs	r3, r4
 800461c:	f000 f858 	bl	80046d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f8ce 	bl	80047c4 <prvAddNewTaskToReadyList>
 8004628:	e001      	b.n	800462e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800462e:	69bb      	ldr	r3, [r7, #24]
	}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b009      	add	sp, #36	; 0x24
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b08d      	sub	sp, #52	; 0x34
 800463c:	af04      	add	r7, sp, #16
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004648:	1dbb      	adds	r3, r7, #6
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fd9e 	bl	8005190 <pvPortMalloc>
 8004654:	0003      	movs	r3, r0
 8004656:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d010      	beq.n	8004680 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800465e:	2054      	movs	r0, #84	; 0x54
 8004660:	f000 fd96 	bl	8005190 <pvPortMalloc>
 8004664:	0003      	movs	r3, r0
 8004666:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
 8004674:	e006      	b.n	8004684 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 fe2f 	bl	80052dc <vPortFree>
 800467e:	e001      	b.n	8004684 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01a      	beq.n	80046c0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2251      	movs	r2, #81	; 0x51
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004692:	1dbb      	adds	r3, r7, #6
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	683c      	ldr	r4, [r7, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	2300      	movs	r3, #0
 800469e:	9303      	str	r3, [sp, #12]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	9302      	str	r3, [sp, #8]
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	0023      	movs	r3, r4
 80046ae:	f000 f80f 	bl	80046d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 f885 	bl	80047c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e002      	b.n	80046c6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046c0:	2301      	movs	r3, #1
 80046c2:	425b      	negs	r3, r3
 80046c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c6:	69bb      	ldr	r3, [r7, #24]
	}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b009      	add	sp, #36	; 0x24
 80046ce:	bd90      	pop	{r4, r7, pc}

080046d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4936      	ldr	r1, [pc, #216]	; (80047c0 <prvInitialiseNewTask+0xf0>)
 80046e6:	468c      	mov	ip, r1
 80046e8:	4463      	add	r3, ip
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2207      	movs	r2, #7
 80046f4:	4393      	bics	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2207      	movs	r2, #7
 80046fc:	4013      	ands	r3, r2
 80046fe:	d001      	beq.n	8004704 <prvInitialiseNewTask+0x34>
 8004700:	b672      	cpsid	i
 8004702:	e7fe      	b.n	8004702 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e013      	b.n	8004732 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	18d3      	adds	r3, r2, r3
 8004710:	7818      	ldrb	r0, [r3, #0]
 8004712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004714:	2134      	movs	r1, #52	; 0x34
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	18d3      	adds	r3, r2, r3
 800471a:	185b      	adds	r3, r3, r1
 800471c:	1c02      	adds	r2, r0, #0
 800471e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	18d3      	adds	r3, r2, r3
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3301      	adds	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d9e8      	bls.n	800470a <prvInitialiseNewTask+0x3a>
 8004738:	e000      	b.n	800473c <prvInitialiseNewTask+0x6c>
		{
			break;
 800473a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2243      	movs	r2, #67	; 0x43
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b06      	cmp	r3, #6
 8004748:	d901      	bls.n	800474e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800474a:	2306      	movs	r3, #6
 800474c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2200      	movs	r2, #0
 800475e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	3304      	adds	r3, #4
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff fe99 	bl	800449c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	3318      	adds	r3, #24
 800476e:	0018      	movs	r0, r3
 8004770:	f7ff fe94 	bl	800449c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004778:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2207      	movs	r2, #7
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	2200      	movs	r2, #0
 800478e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2250      	movs	r2, #80	; 0x50
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 fbc4 	bl	8004f2c <pxPortInitialiseStack>
 80047a4:	0002      	movs	r2, r0
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b006      	add	sp, #24
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	3fffffff 	.word	0x3fffffff

080047c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047cc:	f000 fc48 	bl	8005060 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvAddNewTaskToReadyList+0xb0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <prvAddNewTaskToReadyList+0xb0>)
 80047d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <prvAddNewTaskToReadyList+0xb4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <prvAddNewTaskToReadyList+0xb4>)
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <prvAddNewTaskToReadyList+0xb0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d110      	bne.n	8004812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047f0:	f000 fa6e 	bl	8004cd0 <prvInitialiseTaskLists>
 80047f4:	e00d      	b.n	8004812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <prvAddNewTaskToReadyList+0xb8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <prvAddNewTaskToReadyList+0xb4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	429a      	cmp	r2, r3
 800480a:	d802      	bhi.n	8004812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <prvAddNewTaskToReadyList+0xb4>)
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <prvAddNewTaskToReadyList+0xbc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <prvAddNewTaskToReadyList+0xbc>)
 800481a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <prvAddNewTaskToReadyList+0xc0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d903      	bls.n	8004830 <prvAddNewTaskToReadyList+0x6c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <prvAddNewTaskToReadyList+0xc0>)
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	0013      	movs	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	189b      	adds	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <prvAddNewTaskToReadyList+0xc4>)
 800483e:	189a      	adds	r2, r3, r2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	0019      	movs	r1, r3
 8004846:	0010      	movs	r0, r2
 8004848:	f7ff fe33 	bl	80044b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800484c:	f000 fc1a 	bl	8005084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvAddNewTaskToReadyList+0xb8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <prvAddNewTaskToReadyList+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d201      	bcs.n	800486a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004866:	f000 fbeb 	bl	8005040 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	b002      	add	sp, #8
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	2000055c 	.word	0x2000055c
 8004878:	2000045c 	.word	0x2000045c
 800487c:	20000568 	.word	0x20000568
 8004880:	20000578 	.word	0x20000578
 8004884:	20000564 	.word	0x20000564
 8004888:	20000460 	.word	0x20000460

0800488c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d010      	beq.n	80048c0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <vTaskDelay+0x48>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <vTaskDelay+0x1e>
 80048a6:	b672      	cpsid	i
 80048a8:	e7fe      	b.n	80048a8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80048aa:	f000 f863 	bl	8004974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2100      	movs	r1, #0
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fae6 	bl	8004e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048b8:	f000 f868 	bl	800498c <xTaskResumeAll>
 80048bc:	0003      	movs	r3, r0
 80048be:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80048c6:	f000 fbbb 	bl	8005040 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	20000584 	.word	0x20000584

080048d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048e6:	003a      	movs	r2, r7
 80048e8:	1d39      	adds	r1, r7, #4
 80048ea:	2308      	movs	r3, #8
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7fd fcb6 	bl	8002260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048f4:	683c      	ldr	r4, [r7, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	4918      	ldr	r1, [pc, #96]	; (800495c <vTaskStartScheduler+0x84>)
 80048fc:	4818      	ldr	r0, [pc, #96]	; (8004960 <vTaskStartScheduler+0x88>)
 80048fe:	9202      	str	r2, [sp, #8]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	2300      	movs	r3, #0
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	0022      	movs	r2, r4
 800490a:	f7ff fe52 	bl	80045b2 <xTaskCreateStatic>
 800490e:	0002      	movs	r2, r0
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <vTaskStartScheduler+0x8c>)
 8004912:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <vTaskStartScheduler+0x8c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800491c:	2301      	movs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e001      	b.n	8004926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10d      	bne.n	8004948 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800492c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <vTaskStartScheduler+0x90>)
 8004930:	2201      	movs	r2, #1
 8004932:	4252      	negs	r2, r2
 8004934:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <vTaskStartScheduler+0x94>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <vTaskStartScheduler+0x98>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004942:	f000 fb59 	bl	8004ff8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004946:	e004      	b.n	8004952 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	d101      	bne.n	8004952 <vTaskStartScheduler+0x7a>
 800494e:	b672      	cpsid	i
 8004950:	e7fe      	b.n	8004950 <vTaskStartScheduler+0x78>
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b005      	add	sp, #20
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	08008c1c 	.word	0x08008c1c
 8004960:	08004cb1 	.word	0x08004cb1
 8004964:	20000580 	.word	0x20000580
 8004968:	2000057c 	.word	0x2000057c
 800496c:	20000568 	.word	0x20000568
 8004970:	20000560 	.word	0x20000560

08004974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <vTaskSuspendAll+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	4b02      	ldr	r3, [pc, #8]	; (8004988 <vTaskSuspendAll+0x14>)
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000584 	.word	0x20000584

0800498c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <xTaskResumeAll+0xf8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <xTaskResumeAll+0x1a>
 80049a2:	b672      	cpsid	i
 80049a4:	e7fe      	b.n	80049a4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049a6:	f000 fb5b 	bl	8005060 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <xTaskResumeAll+0xf8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <xTaskResumeAll+0xf8>)
 80049b2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b4:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <xTaskResumeAll+0xf8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d15b      	bne.n	8004a74 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <xTaskResumeAll+0xfc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d057      	beq.n	8004a74 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c4:	e02f      	b.n	8004a26 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049c6:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <xTaskResumeAll+0x100>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3318      	adds	r3, #24
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff fdc5 	bl	8004562 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3304      	adds	r3, #4
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff fdc0 	bl	8004562 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	4b2a      	ldr	r3, [pc, #168]	; (8004a90 <xTaskResumeAll+0x104>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d903      	bls.n	80049f6 <xTaskResumeAll+0x6a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <xTaskResumeAll+0x104>)
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	0013      	movs	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <xTaskResumeAll+0x108>)
 8004a04:	189a      	adds	r2, r3, r2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	0010      	movs	r0, r2
 8004a0e:	f7ff fd50 	bl	80044b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <xTaskResumeAll+0x10c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <xTaskResumeAll+0x110>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <xTaskResumeAll+0x100>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1cb      	bne.n	80049c6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a34:	f000 f9e6 	bl	8004e04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <xTaskResumeAll+0x114>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00f      	beq.n	8004a64 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a44:	f000 f82e 	bl	8004aa4 <xTaskIncrementTick>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d002      	beq.n	8004a52 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <xTaskResumeAll+0x110>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f2      	bne.n	8004a44 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <xTaskResumeAll+0x114>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <xTaskResumeAll+0x110>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a70:	f000 fae6 	bl	8005040 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a74:	f000 fb06 	bl	8005084 <vPortExitCritical>

	return xAlreadyYielded;
 8004a78:	68bb      	ldr	r3, [r7, #8]
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	20000584 	.word	0x20000584
 8004a88:	2000055c 	.word	0x2000055c
 8004a8c:	2000051c 	.word	0x2000051c
 8004a90:	20000564 	.word	0x20000564
 8004a94:	20000460 	.word	0x20000460
 8004a98:	2000045c 	.word	0x2000045c
 8004a9c:	20000570 	.word	0x20000570
 8004aa0:	2000056c 	.word	0x2000056c

08004aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aae:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <xTaskIncrementTick+0x13c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d000      	beq.n	8004ab8 <xTaskIncrementTick+0x14>
 8004ab6:	e083      	b.n	8004bc0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab8:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <xTaskIncrementTick+0x140>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ac0:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <xTaskIncrementTick+0x140>)
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d117      	bne.n	8004afc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <xTaskIncrementTick+0x144>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <xTaskIncrementTick+0x36>
 8004ad6:	b672      	cpsid	i
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskIncrementTick+0x34>
 8004ada:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <xTaskIncrementTick+0x144>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	4b42      	ldr	r3, [pc, #264]	; (8004bec <xTaskIncrementTick+0x148>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <xTaskIncrementTick+0x144>)
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4b40      	ldr	r3, [pc, #256]	; (8004bec <xTaskIncrementTick+0x148>)
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <xTaskIncrementTick+0x14c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xTaskIncrementTick+0x14c>)
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f000 f984 	bl	8004e04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004afc:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <xTaskIncrementTick+0x150>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d34e      	bcc.n	8004ba4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b06:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <xTaskIncrementTick+0x144>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xTaskIncrementTick+0x70>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xTaskIncrementTick+0x72>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1a:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <xTaskIncrementTick+0x150>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4252      	negs	r2, r2
 8004b20:	601a      	str	r2, [r3, #0]
					break;
 8004b22:	e03f      	b.n	8004ba4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b24:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <xTaskIncrementTick+0x144>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d203      	bcs.n	8004b44 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <xTaskIncrementTick+0x150>)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
						break;
 8004b42:	e02f      	b.n	8004ba4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff fd0a 	bl	8004562 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	3318      	adds	r3, #24
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7ff fd01 	bl	8004562 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <xTaskIncrementTick+0x154>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d903      	bls.n	8004b74 <xTaskIncrementTick+0xd0>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <xTaskIncrementTick+0x154>)
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	0013      	movs	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	189b      	adds	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <xTaskIncrementTick+0x158>)
 8004b82:	189a      	adds	r2, r3, r2
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3304      	adds	r3, #4
 8004b88:	0019      	movs	r1, r3
 8004b8a:	0010      	movs	r0, r2
 8004b8c:	f7ff fc91 	bl	80044b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <xTaskIncrementTick+0x15c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3b3      	bcc.n	8004b06 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba2:	e7b0      	b.n	8004b06 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ba4:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <xTaskIncrementTick+0x15c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	4914      	ldr	r1, [pc, #80]	; (8004bfc <xTaskIncrementTick+0x158>)
 8004bac:	0013      	movs	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	585b      	ldr	r3, [r3, r1]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d907      	bls.n	8004bca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e004      	b.n	8004bca <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <xTaskIncrementTick+0x160>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <xTaskIncrementTick+0x160>)
 8004bc8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <xTaskIncrementTick+0x164>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bd6:	697b      	ldr	r3, [r7, #20]
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000584 	.word	0x20000584
 8004be4:	20000560 	.word	0x20000560
 8004be8:	20000514 	.word	0x20000514
 8004bec:	20000518 	.word	0x20000518
 8004bf0:	20000574 	.word	0x20000574
 8004bf4:	2000057c 	.word	0x2000057c
 8004bf8:	20000564 	.word	0x20000564
 8004bfc:	20000460 	.word	0x20000460
 8004c00:	2000045c 	.word	0x2000045c
 8004c04:	2000056c 	.word	0x2000056c
 8004c08:	20000570 	.word	0x20000570

08004c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <vTaskSwitchContext+0x90>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <vTaskSwitchContext+0x94>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c20:	e037      	b.n	8004c92 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004c22:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <vTaskSwitchContext+0x94>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <vTaskSwitchContext+0x98>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e007      	b.n	8004c40 <vTaskSwitchContext+0x34>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <vTaskSwitchContext+0x2e>
 8004c36:	b672      	cpsid	i
 8004c38:	e7fe      	b.n	8004c38 <vTaskSwitchContext+0x2c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	4919      	ldr	r1, [pc, #100]	; (8004ca8 <vTaskSwitchContext+0x9c>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	0013      	movs	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	585b      	ldr	r3, [r3, r1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ee      	beq.n	8004c30 <vTaskSwitchContext+0x24>
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	0013      	movs	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	189b      	adds	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <vTaskSwitchContext+0x9c>)
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d104      	bne.n	8004c82 <vTaskSwitchContext+0x76>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <vTaskSwitchContext+0xa0>)
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <vTaskSwitchContext+0x98>)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	20000584 	.word	0x20000584
 8004ca0:	20000570 	.word	0x20000570
 8004ca4:	20000564 	.word	0x20000564
 8004ca8:	20000460 	.word	0x20000460
 8004cac:	2000045c 	.word	0x2000045c

08004cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cb8:	f000 f84e 	bl	8004d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <prvIdleTask+0x1c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d9f9      	bls.n	8004cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cc4:	f000 f9bc 	bl	8005040 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004cc8:	e7f6      	b.n	8004cb8 <prvIdleTask+0x8>
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	20000460 	.word	0x20000460

08004cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e00c      	b.n	8004cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	0013      	movs	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <prvInitialiseTaskLists+0x68>)
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	0018      	movs	r0, r3
 8004cec:	f7ff fbb8 	bl	8004460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d9ef      	bls.n	8004cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <prvInitialiseTaskLists+0x6c>)
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7ff fbae 	bl	8004460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <prvInitialiseTaskLists+0x70>)
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7ff fbaa 	bl	8004460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <prvInitialiseTaskLists+0x74>)
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff fba6 	bl	8004460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvInitialiseTaskLists+0x78>)
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff fba2 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <prvInitialiseTaskLists+0x7c>)
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff fb9e 	bl	8004460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <prvInitialiseTaskLists+0x80>)
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <prvInitialiseTaskLists+0x6c>)
 8004d28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvInitialiseTaskLists+0x84>)
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <prvInitialiseTaskLists+0x70>)
 8004d2e:	601a      	str	r2, [r3, #0]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000460 	.word	0x20000460
 8004d3c:	200004ec 	.word	0x200004ec
 8004d40:	20000500 	.word	0x20000500
 8004d44:	2000051c 	.word	0x2000051c
 8004d48:	20000530 	.word	0x20000530
 8004d4c:	20000548 	.word	0x20000548
 8004d50:	20000514 	.word	0x20000514
 8004d54:	20000518 	.word	0x20000518

08004d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d5e:	e01a      	b.n	8004d96 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004d60:	f000 f97e 	bl	8005060 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <prvCheckTasksWaitingTermination+0x50>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff fbf6 	bl	8004562 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <prvCheckTasksWaitingTermination+0x54>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <prvCheckTasksWaitingTermination+0x54>)
 8004d7e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <prvCheckTasksWaitingTermination+0x58>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	1e5a      	subs	r2, r3, #1
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <prvCheckTasksWaitingTermination+0x58>)
 8004d88:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004d8a:	f000 f97b 	bl	8005084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 f80f 	bl	8004db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <prvCheckTasksWaitingTermination+0x58>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e0      	bne.n	8004d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b002      	add	sp, #8
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	20000530 	.word	0x20000530
 8004dac:	2000055c 	.word	0x2000055c
 8004db0:	20000544 	.word	0x20000544

08004db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2251      	movs	r2, #81	; 0x51
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 fa86 	bl	80052dc <vPortFree>
				vPortFree( pxTCB );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fa82 	bl	80052dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dd8:	e010      	b.n	8004dfc <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2251      	movs	r2, #81	; 0x51
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d104      	bne.n	8004dee <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 fa78 	bl	80052dc <vPortFree>
	}
 8004dec:	e006      	b.n	8004dfc <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2251      	movs	r2, #81	; 0x51
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d001      	beq.n	8004dfc <prvDeleteTCB+0x48>
 8004df8:	b672      	cpsid	i
 8004dfa:	e7fe      	b.n	8004dfa <prvDeleteTCB+0x46>
	}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b002      	add	sp, #8
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <prvResetNextTaskUnblockTime+0x40>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <prvResetNextTaskUnblockTime+0x14>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <prvResetNextTaskUnblockTime+0x16>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <prvResetNextTaskUnblockTime+0x44>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	4252      	negs	r2, r2
 8004e24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e26:	e008      	b.n	8004e3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <prvResetNextTaskUnblockTime+0x40>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <prvResetNextTaskUnblockTime+0x44>)
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b002      	add	sp, #8
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	20000514 	.word	0x20000514
 8004e48:	2000057c 	.word	0x2000057c

08004e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <xTaskGetSchedulerState+0x30>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	e008      	b.n	8004e72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <xTaskGetSchedulerState+0x34>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	e001      	b.n	8004e72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e72:	687b      	ldr	r3, [r7, #4]
	}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000568 	.word	0x20000568
 8004e80:	20000584 	.word	0x20000584

08004e84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e94:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f7ff fb61 	bl	8004562 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	d10b      	bne.n	8004ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7ff fafb 	bl	80044b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ebc:	e026      	b.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	18d3      	adds	r3, r2, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d209      	bcs.n	8004eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	f7ff fb07 	bl	80044f6 <vListInsert>
}
 8004ee8:	e010      	b.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	0010      	movs	r0, r2
 8004ef8:	f7ff fafd 	bl	80044f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d202      	bcs.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	601a      	str	r2, [r3, #0]
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b004      	add	sp, #16
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000560 	.word	0x20000560
 8004f18:	2000045c 	.word	0x2000045c
 8004f1c:	20000548 	.word	0x20000548
 8004f20:	20000518 	.word	0x20000518
 8004f24:	20000514 	.word	0x20000514
 8004f28:	2000057c 	.word	0x2000057c

08004f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	0452      	lsls	r2, r2, #17
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f58:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <pxPortInitialiseStack+0x50>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b14      	subs	r3, #20
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b20      	subs	r3, #32
 8004f6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	08004f81 	.word	0x08004f81

08004f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <prvTaskExitError+0x28>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	d001      	beq.n	8004f96 <prvTaskExitError+0x16>
 8004f92:	b672      	cpsid	i
 8004f94:	e7fe      	b.n	8004f94 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004f96:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0fc      	beq.n	8004f9a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004fc0:	4a0b      	ldr	r2, [pc, #44]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	3020      	adds	r0, #32
 8004fc8:	f380 8809 	msr	PSP, r0
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f380 8814 	msr	CONTROL, r0
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004fd8:	46ae      	mov	lr, r5
 8004fda:	bc08      	pop	{r3}
 8004fdc:	bc04      	pop	{r2}
 8004fde:	b662      	cpsie	i
 8004fe0:	4718      	bx	r3
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46c0      	nop			; (mov r8, r8)

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	2000045c 	.word	0x2000045c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46c0      	nop			; (mov r8, r8)

08004ff8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <xPortStartScheduler+0x40>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <xPortStartScheduler+0x40>)
 8005002:	21ff      	movs	r1, #255	; 0xff
 8005004:	0409      	lsls	r1, r1, #16
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <xPortStartScheduler+0x40>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <xPortStartScheduler+0x40>)
 8005010:	21ff      	movs	r1, #255	; 0xff
 8005012:	0609      	lsls	r1, r1, #24
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005018:	f000 f898 	bl	800514c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <xPortStartScheduler+0x44>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005022:	f7ff ffcd 	bl	8004fc0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005026:	f7ff fdf1 	bl	8004c0c <vTaskSwitchContext>
	prvTaskExitError();
 800502a:	f7ff ffa9 	bl	8004f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000000c 	.word	0x2000000c

08005040 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <vPortYield+0x1c>)
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	0552      	lsls	r2, r2, #21
 800504a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800504c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005050:	f3bf 8f6f 	isb	sy
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005064:	b672      	cpsid	i
    uxCriticalNesting++;
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <vPortEnterCritical+0x20>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <vPortEnterCritical+0x20>)
 800506e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005070:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005074:	f3bf 8f6f 	isb	sy
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	2000000c 	.word	0x2000000c

08005084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <vPortExitCritical+0x2c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <vPortExitCritical+0x10>
 8005090:	b672      	cpsid	i
 8005092:	e7fe      	b.n	8005092 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <vPortExitCritical+0x2c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <vPortExitCritical+0x2c>)
 800509c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <vPortExitCritical+0x2c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d100      	bne.n	80050a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80050a6:	b662      	cpsie	i
    }
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	2000000c 	.word	0x2000000c

080050b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80050b4:	f3ef 8010 	mrs	r0, PRIMASK
 80050b8:	b672      	cpsid	i
 80050ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	0018      	movs	r0, r3

080050c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80050c0:	f380 8810 	msr	PRIMASK, r0
 80050c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80050c6:	46c0      	nop			; (mov r8, r8)
	...

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <pxCurrentTCBConst>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	3820      	subs	r0, #32
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80050de:	4644      	mov	r4, r8
 80050e0:	464d      	mov	r5, r9
 80050e2:	4656      	mov	r6, sl
 80050e4:	465f      	mov	r7, fp
 80050e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80050e8:	b508      	push	{r3, lr}
 80050ea:	b672      	cpsid	i
 80050ec:	f7ff fd8e 	bl	8004c0c <vTaskSwitchContext>
 80050f0:	b662      	cpsie	i
 80050f2:	bc0c      	pop	{r2, r3}
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	6808      	ldr	r0, [r1, #0]
 80050f8:	3010      	adds	r0, #16
 80050fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80050fc:	46a0      	mov	r8, r4
 80050fe:	46a9      	mov	r9, r5
 8005100:	46b2      	mov	sl, r6
 8005102:	46bb      	mov	fp, r7
 8005104:	f380 8809 	msr	PSP, r0
 8005108:	3820      	subs	r0, #32
 800510a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800510c:	4718      	bx	r3
 800510e:	46c0      	nop			; (mov r8, r8)

08005110 <pxCurrentTCBConst>:
 8005110:	2000045c 	.word	0x2000045c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46c0      	nop			; (mov r8, r8)

08005118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800511e:	f7ff ffc9 	bl	80050b4 <ulSetInterruptMaskFromISR>
 8005122:	0003      	movs	r3, r0
 8005124:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005126:	f7ff fcbd 	bl	8004aa4 <xTaskIncrementTick>
 800512a:	1e03      	subs	r3, r0, #0
 800512c:	d003      	beq.n	8005136 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <xPortSysTickHandler+0x30>)
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	0552      	lsls	r2, r2, #21
 8005134:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f7ff ffc1 	bl	80050c0 <vClearInterruptMaskFromISR>
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <prvSetupTimerInterrupt+0x34>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <prvSetupTimerInterrupt+0x38>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <prvSetupTimerInterrupt+0x3c>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	23fa      	movs	r3, #250	; 0xfa
 8005162:	0099      	lsls	r1, r3, #2
 8005164:	0010      	movs	r0, r2
 8005166:	f7fa ffe1 	bl	800012c <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	001a      	movs	r2, r3
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <prvSetupTimerInterrupt+0x40>)
 8005170:	3a01      	subs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <prvSetupTimerInterrupt+0x34>)
 8005176:	2207      	movs	r2, #7
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000e010 	.word	0xe000e010
 8005184:	e000e018 	.word	0xe000e018
 8005188:	20000000 	.word	0x20000000
 800518c:	e000e014 	.word	0xe000e014

08005190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800519c:	f7ff fbea 	bl	8004974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <pvPortMalloc+0x138>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a8:	f000 f8e0 	bl	800536c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ac:	4b47      	ldr	r3, [pc, #284]	; (80052cc <pvPortMalloc+0x13c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4013      	ands	r3, r2
 80051b4:	d000      	beq.n	80051b8 <pvPortMalloc+0x28>
 80051b6:	e079      	b.n	80052ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80051be:	2208      	movs	r2, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2207      	movs	r2, #7
 80051ca:	4013      	ands	r3, r2
 80051cc:	d00a      	beq.n	80051e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2207      	movs	r2, #7
 80051d2:	4393      	bics	r3, r2
 80051d4:	3308      	adds	r3, #8
 80051d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2207      	movs	r2, #7
 80051dc:	4013      	ands	r3, r2
 80051de:	d001      	beq.n	80051e4 <pvPortMalloc+0x54>
 80051e0:	b672      	cpsid	i
 80051e2:	e7fe      	b.n	80051e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d060      	beq.n	80052ac <pvPortMalloc+0x11c>
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <pvPortMalloc+0x140>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d85b      	bhi.n	80052ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051f4:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <pvPortMalloc+0x144>)
 80051f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <pvPortMalloc+0x144>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fe:	e004      	b.n	800520a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <pvPortMalloc+0x8c>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f1      	bne.n	8005200 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800521c:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <pvPortMalloc+0x138>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	429a      	cmp	r2, r3
 8005224:	d042      	beq.n	80052ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2208      	movs	r2, #8
 800522c:	189b      	adds	r3, r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	2308      	movs	r3, #8
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	429a      	cmp	r2, r3
 8005246:	d916      	bls.n	8005276 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2207      	movs	r2, #7
 8005254:	4013      	ands	r3, r2
 8005256:	d001      	beq.n	800525c <pvPortMalloc+0xcc>
 8005258:	b672      	cpsid	i
 800525a:	e7fe      	b.n	800525a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f8db 	bl	800542c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <pvPortMalloc+0x140>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <pvPortMalloc+0x140>)
 8005282:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <pvPortMalloc+0x140>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <pvPortMalloc+0x148>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d203      	bcs.n	8005298 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <pvPortMalloc+0x140>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <pvPortMalloc+0x148>)
 8005296:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <pvPortMalloc+0x13c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052ac:	f7ff fb6e 	bl	800498c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2207      	movs	r2, #7
 80052b4:	4013      	ands	r3, r2
 80052b6:	d001      	beq.n	80052bc <pvPortMalloc+0x12c>
 80052b8:	b672      	cpsid	i
 80052ba:	e7fe      	b.n	80052ba <pvPortMalloc+0x12a>
	return pvReturn;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b006      	add	sp, #24
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	20001190 	.word	0x20001190
 80052cc:	2000119c 	.word	0x2000119c
 80052d0:	20001194 	.word	0x20001194
 80052d4:	20001188 	.word	0x20001188
 80052d8:	20001198 	.word	0x20001198

080052dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d035      	beq.n	800535a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ee:	2308      	movs	r3, #8
 80052f0:	425b      	negs	r3, r3
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	18d3      	adds	r3, r2, r3
 80052f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b18      	ldr	r3, [pc, #96]	; (8005364 <vPortFree+0x88>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4013      	ands	r3, r2
 8005306:	d101      	bne.n	800530c <vPortFree+0x30>
 8005308:	b672      	cpsid	i
 800530a:	e7fe      	b.n	800530a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <vPortFree+0x3c>
 8005314:	b672      	cpsid	i
 8005316:	e7fe      	b.n	8005316 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <vPortFree+0x88>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4013      	ands	r3, r2
 8005322:	d01a      	beq.n	800535a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <vPortFree+0x88>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	43db      	mvns	r3, r3
 8005336:	401a      	ands	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800533c:	f7ff fb1a 	bl	8004974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <vPortFree+0x8c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	18d2      	adds	r2, r2, r3
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <vPortFree+0x8c>)
 800534c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 f86b 	bl	800542c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005356:	f7ff fb19 	bl	800498c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	2000119c 	.word	0x2000119c
 8005368:	20001194 	.word	0x20001194

0800536c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005372:	23c0      	movs	r3, #192	; 0xc0
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <prvHeapInit+0xa8>)
 800537a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2207      	movs	r2, #7
 8005380:	4013      	ands	r3, r2
 8005382:	d00c      	beq.n	800539e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3307      	adds	r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2207      	movs	r2, #7
 800538e:	4393      	bics	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <prvHeapInit+0xa8>)
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <prvHeapInit+0xac>)
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <prvHeapInit+0xac>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053b6:	2208      	movs	r2, #8
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2207      	movs	r2, #7
 80053c2:	4393      	bics	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4b14      	ldr	r3, [pc, #80]	; (800541c <prvHeapInit+0xb0>)
 80053ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <prvHeapInit+0xb0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <prvHeapInit+0xb0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	1ad2      	subs	r2, r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <prvHeapInit+0xb0>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvHeapInit+0xb4>)
 80053f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <prvHeapInit+0xb8>)
 8005400:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <prvHeapInit+0xbc>)
 8005404:	2280      	movs	r2, #128	; 0x80
 8005406:	0612      	lsls	r2, r2, #24
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	20000588 	.word	0x20000588
 8005418:	20001188 	.word	0x20001188
 800541c:	20001190 	.word	0x20001190
 8005420:	20001198 	.word	0x20001198
 8005424:	20001194 	.word	0x20001194
 8005428:	2000119c 	.word	0x2000119c

0800542c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e002      	b.n	8005440 <prvInsertBlockIntoFreeList+0x14>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d8f7      	bhi.n	800543a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d108      	bne.n	800546e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	18d2      	adds	r2, r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	18d2      	adds	r2, r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d118      	bne.n	80054b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvInsertBlockIntoFreeList+0xac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d00d      	beq.n	80054aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	18d2      	adds	r2, r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e008      	b.n	80054bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <prvInsertBlockIntoFreeList+0xac>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e003      	b.n	80054bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d002      	beq.n	80054ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	20001188 	.word	0x20001188
 80054d8:	20001190 	.word	0x20001190

080054dc <ILI9341_Draw_Filled_Circle>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Filled_Circle(uint16_t x, uint16_t y, uint16_t r, uint16_t Colour)
{
 80054dc:	b5b0      	push	{r4, r5, r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	0005      	movs	r5, r0
 80054e4:	000c      	movs	r4, r1
 80054e6:	0010      	movs	r0, r2
 80054e8:	0019      	movs	r1, r3
 80054ea:	1dbb      	adds	r3, r7, #6
 80054ec:	1c2a      	adds	r2, r5, #0
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	1c22      	adds	r2, r4, #0
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	1cbb      	adds	r3, r7, #2
 80054f8:	1c02      	adds	r2, r0, #0
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	003b      	movs	r3, r7
 80054fe:	1c0a      	adds	r2, r1, #0
 8005500:	801a      	strh	r2, [r3, #0]
	
	int tx = r;
 8005502:	1cbb      	adds	r3, r7, #2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
    int ty = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (r << 1);
 800550c:	1cbb      	adds	r3, r7, #2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2201      	movs	r2, #1
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]

    while (tx >= ty)
 8005520:	e06d      	b.n	80055fe <ILI9341_Draw_Filled_Circle+0x122>
    {
        for (int i = x - tx; i <= x + tx; i++)
 8005522:	1dbb      	adds	r3, r7, #6
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	e01c      	b.n	8005568 <ILI9341_Draw_Filled_Circle+0x8c>
        {
            ILI9341_Draw_Pixel(i, y + ty,Colour);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	b298      	uxth	r0, r3
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	b29a      	uxth	r2, r3
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	18d3      	adds	r3, r2, r3
 800553c:	b299      	uxth	r1, r3
 800553e:	003b      	movs	r3, r7
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	001a      	movs	r2, r3
 8005544:	f000 fc10 	bl	8005d68 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - ty,Colour);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	b298      	uxth	r0, r3
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b29b      	uxth	r3, r3
 8005550:	1d3a      	adds	r2, r7, #4
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	b299      	uxth	r1, r3
 8005558:	003b      	movs	r3, r7
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	001a      	movs	r2, r3
 800555e:	f000 fc03 	bl	8005d68 <ILI9341_Draw_Pixel>
        for (int i = x - tx; i <= x + tx; i++)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3301      	adds	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	1dbb      	adds	r3, r7, #6
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	dddb      	ble.n	800552e <ILI9341_Draw_Filled_Circle+0x52>
        }
        for (int i = x - ty; i <= x + ty; i++)
 8005576:	1dbb      	adds	r3, r7, #6
 8005578:	881a      	ldrh	r2, [r3, #0]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e01c      	b.n	80055bc <ILI9341_Draw_Filled_Circle+0xe0>
        {
            ILI9341_Draw_Pixel(i, y + tx,Colour);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	b298      	uxth	r0, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	b29a      	uxth	r2, r3
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	b299      	uxth	r1, r3
 8005592:	003b      	movs	r3, r7
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	001a      	movs	r2, r3
 8005598:	f000 fbe6 	bl	8005d68 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, y - tx,Colour);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	b298      	uxth	r0, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	1d3a      	adds	r2, r7, #4
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	b299      	uxth	r1, r3
 80055ac:	003b      	movs	r3, r7
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	001a      	movs	r2, r3
 80055b2:	f000 fbd9 	bl	8005d68 <ILI9341_Draw_Pixel>
        for (int i = x - ty; i <= x + ty; i++)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	1dbb      	adds	r3, r7, #6
 80055be:	881a      	ldrh	r2, [r3, #0]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	dddb      	ble.n	8005582 <ILI9341_Draw_Filled_Circle+0xa6>
        }

        ty++;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	3301      	adds	r3, #1
 80055ce:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	3302      	adds	r3, #2
 80055dc:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	005a      	lsls	r2, r3, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dd09      	ble.n	80055fe <ILI9341_Draw_Filled_Circle+0x122>
        {
        	tx--;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	3b01      	subs	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3302      	adds	r3, #2
 80055fc:	61fb      	str	r3, [r7, #28]
    while (tx >= ty)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	429a      	cmp	r2, r3
 8005604:	da8d      	bge.n	8005522 <ILI9341_Draw_Filled_Circle+0x46>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	b00a      	add	sp, #40	; 0x28
 800560c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005610 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	0005      	movs	r5, r0
 8005618:	000c      	movs	r4, r1
 800561a:	0010      	movs	r0, r2
 800561c:	0019      	movs	r1, r3
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	1c2a      	adds	r2, r5, #0
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	1c22      	adds	r2, r4, #0
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	1cbb      	adds	r3, r7, #2
 800562c:	1c02      	adds	r2, r0, #0
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	003b      	movs	r3, r7
 8005632:	1c0a      	adds	r2, r1, #0
 8005634:	801a      	strh	r2, [r3, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8005636:	2117      	movs	r1, #23
 8005638:	187b      	adds	r3, r7, r1
 800563a:	1dfa      	adds	r2, r7, #7
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	701a      	strb	r2, [r3, #0]
		
    if (function_char < ' ')
 8005640:	187b      	adds	r3, r7, r1
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b1f      	cmp	r3, #31
 8005646:	d803      	bhi.n	8005650 <ILI9341_Draw_Char+0x40>
    {
        character = 0;
 8005648:	1dfb      	adds	r3, r7, #7
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e005      	b.n	800565c <ILI9341_Draw_Char+0x4c>
    }
    else
    {
    	function_char -= 32;
 8005650:	2217      	movs	r2, #23
 8005652:	18bb      	adds	r3, r7, r2
 8005654:	18ba      	adds	r2, r7, r2
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	3a20      	subs	r2, #32
 800565a:	701a      	strb	r2, [r3, #0]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800565c:	2314      	movs	r3, #20
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e016      	b.n	8005694 <ILI9341_Draw_Char+0x84>
	{
		temp[k] = font[function_char][k];
 8005666:	2317      	movs	r3, #23
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	781a      	ldrb	r2, [r3, #0]
 800566c:	2514      	movs	r5, #20
 800566e:	197b      	adds	r3, r7, r5
 8005670:	7818      	ldrb	r0, [r3, #0]
 8005672:	197b      	adds	r3, r7, r5
 8005674:	7819      	ldrb	r1, [r3, #0]
 8005676:	4c69      	ldr	r4, [pc, #420]	; (800581c <ILI9341_Draw_Char+0x20c>)
 8005678:	0013      	movs	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	189b      	adds	r3, r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	18e3      	adds	r3, r4, r3
 8005682:	5c1a      	ldrb	r2, [r3, r0]
 8005684:	230c      	movs	r3, #12
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	545a      	strb	r2, [r3, r1]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800568a:	197b      	adds	r3, r7, r5
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	197b      	adds	r3, r7, r5
 8005690:	3201      	adds	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	2314      	movs	r3, #20
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d9e3      	bls.n	8005666 <ILI9341_Draw_Char+0x56>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800569e:	2315      	movs	r3, #21
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e0ae      	b.n	8005806 <ILI9341_Draw_Char+0x1f6>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80056a8:	2316      	movs	r3, #22
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	e09d      	b.n	80057ee <ILI9341_Draw_Char+0x1de>
        {
            if (temp[j] & (1<<i))
 80056b2:	2315      	movs	r3, #21
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	220c      	movs	r2, #12
 80056ba:	18ba      	adds	r2, r7, r2
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	001a      	movs	r2, r3
 80056c0:	2316      	movs	r3, #22
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	411a      	asrs	r2, r3
 80056c8:	0013      	movs	r3, r2
 80056ca:	2201      	movs	r2, #1
 80056cc:	4013      	ands	r3, r2
 80056ce:	d043      	beq.n	8005758 <ILI9341_Draw_Char+0x148>
            {
            	if(size == 1)
 80056d0:	2328      	movs	r3, #40	; 0x28
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d115      	bne.n	8005706 <ILI9341_Draw_Char+0xf6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80056da:	2315      	movs	r3, #21
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	18d3      	adds	r3, r2, r3
 80056e8:	b298      	uxth	r0, r3
 80056ea:	2316      	movs	r3, #22
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	1cbb      	adds	r3, r7, #2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	18d3      	adds	r3, r2, r3
 80056f8:	b299      	uxth	r1, r3
 80056fa:	003b      	movs	r3, r7
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	001a      	movs	r2, r3
 8005700:	f000 fb32 	bl	8005d68 <ILI9341_Draw_Pixel>
 8005704:	e06d      	b.n	80057e2 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8005706:	2315      	movs	r3, #21
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	2128      	movs	r1, #40	; 0x28
 8005710:	187a      	adds	r2, r7, r1
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	4353      	muls	r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	18d3      	adds	r3, r2, r3
 800571e:	b298      	uxth	r0, r3
 8005720:	2316      	movs	r3, #22
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	000c      	movs	r4, r1
 800572a:	187a      	adds	r2, r7, r1
 800572c:	8812      	ldrh	r2, [r2, #0]
 800572e:	4353      	muls	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	1cbb      	adds	r3, r7, #2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	18d3      	adds	r3, r2, r3
 8005738:	b299      	uxth	r1, r3
 800573a:	0022      	movs	r2, r4
 800573c:	193b      	adds	r3, r7, r4
 800573e:	881c      	ldrh	r4, [r3, #0]
 8005740:	0013      	movs	r3, r2
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	2301      	movs	r3, #1
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	003b      	movs	r3, r7
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	0023      	movs	r3, r4
 8005752:	f000 fc7d 	bl	8006050 <ILI9341_Draw_Rectangle>
 8005756:	e044      	b.n	80057e2 <ILI9341_Draw_Char+0x1d2>
				}
            }
            else
            {
               	if(size == 1)
 8005758:	2328      	movs	r3, #40	; 0x28
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d116      	bne.n	8005790 <ILI9341_Draw_Char+0x180>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8005762:	2315      	movs	r3, #21
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b29a      	uxth	r2, r3
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	b298      	uxth	r0, r3
 8005772:	2316      	movs	r3, #22
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b29a      	uxth	r2, r3
 800577a:	1cbb      	adds	r3, r7, #2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	18d3      	adds	r3, r2, r3
 8005780:	b299      	uxth	r1, r3
 8005782:	232c      	movs	r3, #44	; 0x2c
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	001a      	movs	r2, r3
 800578a:	f000 faed 	bl	8005d68 <ILI9341_Draw_Pixel>
 800578e:	e028      	b.n	80057e2 <ILI9341_Draw_Char+0x1d2>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8005790:	2315      	movs	r3, #21
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	2128      	movs	r1, #40	; 0x28
 800579a:	187a      	adds	r2, r7, r1
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	4353      	muls	r3, r2
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	18d3      	adds	r3, r2, r3
 80057a8:	b298      	uxth	r0, r3
 80057aa:	2316      	movs	r3, #22
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	000c      	movs	r4, r1
 80057b4:	187a      	adds	r2, r7, r1
 80057b6:	8812      	ldrh	r2, [r2, #0]
 80057b8:	4353      	muls	r3, r2
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	1cbb      	adds	r3, r7, #2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	18d3      	adds	r3, r2, r3
 80057c2:	b299      	uxth	r1, r3
 80057c4:	0022      	movs	r2, r4
 80057c6:	193b      	adds	r3, r7, r4
 80057c8:	881c      	ldrh	r4, [r3, #0]
 80057ca:	0013      	movs	r3, r2
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	2301      	movs	r3, #1
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	232c      	movs	r3, #44	; 0x2c
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	0023      	movs	r3, r4
 80057de:	f000 fc37 	bl	8006050 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80057e2:	2116      	movs	r1, #22
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	3201      	adds	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	2316      	movs	r3, #22
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b07      	cmp	r3, #7
 80057f6:	d800      	bhi.n	80057fa <ILI9341_Draw_Char+0x1ea>
 80057f8:	e75b      	b.n	80056b2 <ILI9341_Draw_Char+0xa2>
    for (j=0; j<CHAR_WIDTH; j++)
 80057fa:	2115      	movs	r1, #21
 80057fc:	187b      	adds	r3, r7, r1
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	187b      	adds	r3, r7, r1
 8005802:	3201      	adds	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	2315      	movs	r3, #21
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d800      	bhi.n	8005812 <ILI9341_Draw_Char+0x202>
 8005810:	e74a      	b.n	80056a8 <ILI9341_Draw_Char+0x98>
				}
            }
        }
    }
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	46bd      	mov	sp, r7
 8005816:	b006      	add	sp, #24
 8005818:	bdb0      	pop	{r4, r5, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	08008cb4 	.word	0x08008cb4

08005820 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8005820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005822:	b087      	sub	sp, #28
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	000c      	movs	r4, r1
 800582a:	0010      	movs	r0, r2
 800582c:	0019      	movs	r1, r3
 800582e:	250a      	movs	r5, #10
 8005830:	197b      	adds	r3, r7, r5
 8005832:	1c22      	adds	r2, r4, #0
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	2608      	movs	r6, #8
 8005838:	19bb      	adds	r3, r7, r6
 800583a:	1c02      	adds	r2, r0, #0
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	1dbb      	adds	r3, r7, #6
 8005840:	1c0a      	adds	r2, r1, #0
 8005842:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 8005844:	197b      	adds	r3, r7, r5
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	b298      	uxth	r0, r3
 800584c:	2320      	movs	r3, #32
 800584e:	2208      	movs	r2, #8
 8005850:	4694      	mov	ip, r2
 8005852:	44bc      	add	ip, r7
 8005854:	4463      	add	r3, ip
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	b29a      	uxth	r2, r3
 800585c:	2124      	movs	r1, #36	; 0x24
 800585e:	2308      	movs	r3, #8
 8005860:	18fc      	adds	r4, r7, r3
 8005862:	1863      	adds	r3, r4, r1
 8005864:	881c      	ldrh	r4, [r3, #0]
 8005866:	19bb      	adds	r3, r7, r6
 8005868:	8819      	ldrh	r1, [r3, #0]
 800586a:	0023      	movs	r3, r4
 800586c:	f000 f974 	bl	8005b58 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 8005870:	197b      	adds	r3, r7, r5
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	3b02      	subs	r3, #2
 8005876:	b298      	uxth	r0, r3
 8005878:	2320      	movs	r3, #32
 800587a:	2208      	movs	r2, #8
 800587c:	4694      	mov	ip, r2
 800587e:	44bc      	add	ip, r7
 8005880:	4463      	add	r3, ip
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	b29a      	uxth	r2, r3
 8005888:	2124      	movs	r1, #36	; 0x24
 800588a:	2308      	movs	r3, #8
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	185b      	adds	r3, r3, r1
 8005890:	881c      	ldrh	r4, [r3, #0]
 8005892:	19bb      	adds	r3, r7, r6
 8005894:	8819      	ldrh	r1, [r3, #0]
 8005896:	0023      	movs	r3, r4
 8005898:	f000 f95e 	bl	8005b58 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800589c:	e029      	b.n	80058f2 <ILI9341_Draw_Text+0xd2>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	60fa      	str	r2, [r7, #12]
 80058a4:	7818      	ldrb	r0, [r3, #0]
 80058a6:	1dbb      	adds	r3, r7, #6
 80058a8:	881c      	ldrh	r4, [r3, #0]
 80058aa:	2308      	movs	r3, #8
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	250a      	movs	r5, #10
 80058b2:	197b      	adds	r3, r7, r5
 80058b4:	8819      	ldrh	r1, [r3, #0]
 80058b6:	2324      	movs	r3, #36	; 0x24
 80058b8:	2608      	movs	r6, #8
 80058ba:	46b4      	mov	ip, r6
 80058bc:	44bc      	add	ip, r7
 80058be:	4463      	add	r3, ip
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	2620      	movs	r6, #32
 80058c6:	2308      	movs	r3, #8
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	199b      	adds	r3, r3, r6
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	0023      	movs	r3, r4
 80058d2:	f7ff fe9d 	bl	8005610 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80058d6:	2308      	movs	r3, #8
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	199b      	adds	r3, r3, r6
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	1c1a      	adds	r2, r3, #0
 80058e0:	1892      	adds	r2, r2, r2
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	18db      	adds	r3, r3, r3
 80058e6:	b299      	uxth	r1, r3
 80058e8:	197b      	adds	r3, r7, r5
 80058ea:	197a      	adds	r2, r7, r5
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	188a      	adds	r2, r1, r2
 80058f0:	801a      	strh	r2, [r3, #0]
    while (*Text) {
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d1      	bne.n	800589e <ILI9341_Draw_Text+0x7e>
    }


}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b005      	add	sp, #20
 8005900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005902 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8005906:	f000 fcc1 	bl	800628c <_LCD_Enable>
	ILI9341_SPI_Init();
 800590a:	f000 f909 	bl	8005b20 <ILI9341_SPI_Init>
	_LCD_Reset();
 800590e:	f000 fccb 	bl	80062a8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8005912:	2001      	movs	r0, #1
 8005914:	f000 fdc8 	bl	80064a8 <_LCD_SendCommand>
	HAL_Delay(2000);
 8005918:	23fa      	movs	r3, #250	; 0xfa
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	0018      	movs	r0, r3
 800591e:	f7fd f869 	bl	80029f4 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8005922:	20cb      	movs	r0, #203	; 0xcb
 8005924:	f000 fdc0 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8005928:	2039      	movs	r0, #57	; 0x39
 800592a:	f000 fdf3 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800592e:	202c      	movs	r0, #44	; 0x2c
 8005930:	f000 fdf0 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x00);
 8005934:	2000      	movs	r0, #0
 8005936:	f000 fded 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x34);
 800593a:	2034      	movs	r0, #52	; 0x34
 800593c:	f000 fdea 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x02);
 8005940:	2002      	movs	r0, #2
 8005942:	f000 fde7 	bl	8006514 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8005946:	20cf      	movs	r0, #207	; 0xcf
 8005948:	f000 fdae 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800594c:	2000      	movs	r0, #0
 800594e:	f000 fde1 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8005952:	20c1      	movs	r0, #193	; 0xc1
 8005954:	f000 fdde 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x30);
 8005958:	2030      	movs	r0, #48	; 0x30
 800595a:	f000 fddb 	bl	8006514 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800595e:	20e8      	movs	r0, #232	; 0xe8
 8005960:	f000 fda2 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8005964:	2085      	movs	r0, #133	; 0x85
 8005966:	f000 fdd5 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x00);
 800596a:	2000      	movs	r0, #0
 800596c:	f000 fdd2 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x78);
 8005970:	2078      	movs	r0, #120	; 0x78
 8005972:	f000 fdcf 	bl	8006514 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8005976:	20ea      	movs	r0, #234	; 0xea
 8005978:	f000 fd96 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800597c:	2000      	movs	r0, #0
 800597e:	f000 fdc9 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x00);
 8005982:	2000      	movs	r0, #0
 8005984:	f000 fdc6 	bl	8006514 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8005988:	20ed      	movs	r0, #237	; 0xed
 800598a:	f000 fd8d 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800598e:	2064      	movs	r0, #100	; 0x64
 8005990:	f000 fdc0 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x03);
 8005994:	2003      	movs	r0, #3
 8005996:	f000 fdbd 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x12);
 800599a:	2012      	movs	r0, #18
 800599c:	f000 fdba 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x81);
 80059a0:	2081      	movs	r0, #129	; 0x81
 80059a2:	f000 fdb7 	bl	8006514 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 80059a6:	20f7      	movs	r0, #247	; 0xf7
 80059a8:	f000 fd7e 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 80059ac:	2020      	movs	r0, #32
 80059ae:	f000 fdb1 	bl	8006514 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 80059b2:	20c0      	movs	r0, #192	; 0xc0
 80059b4:	f000 fd78 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 80059b8:	2023      	movs	r0, #35	; 0x23
 80059ba:	f000 fdab 	bl	8006514 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 80059be:	20c1      	movs	r0, #193	; 0xc1
 80059c0:	f000 fd72 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 80059c4:	2010      	movs	r0, #16
 80059c6:	f000 fda5 	bl	8006514 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 80059ca:	20c5      	movs	r0, #197	; 0xc5
 80059cc:	f000 fd6c 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80059d0:	203e      	movs	r0, #62	; 0x3e
 80059d2:	f000 fd9f 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x28);
 80059d6:	2028      	movs	r0, #40	; 0x28
 80059d8:	f000 fd9c 	bl	8006514 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 80059dc:	20c7      	movs	r0, #199	; 0xc7
 80059de:	f000 fd63 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80059e2:	2086      	movs	r0, #134	; 0x86
 80059e4:	f000 fd96 	bl	8006514 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80059e8:	2036      	movs	r0, #54	; 0x36
 80059ea:	f000 fd5d 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80059ee:	2048      	movs	r0, #72	; 0x48
 80059f0:	f000 fd90 	bl	8006514 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80059f4:	203a      	movs	r0, #58	; 0x3a
 80059f6:	f000 fd57 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80059fa:	2055      	movs	r0, #85	; 0x55
 80059fc:	f000 fd8a 	bl	8006514 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8005a00:	20b1      	movs	r0, #177	; 0xb1
 8005a02:	f000 fd51 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8005a06:	2000      	movs	r0, #0
 8005a08:	f000 fd84 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x18);
 8005a0c:	2018      	movs	r0, #24
 8005a0e:	f000 fd81 	bl	8006514 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8005a12:	20b6      	movs	r0, #182	; 0xb6
 8005a14:	f000 fd48 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8005a18:	2008      	movs	r0, #8
 8005a1a:	f000 fd7b 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x82);
 8005a1e:	2082      	movs	r0, #130	; 0x82
 8005a20:	f000 fd78 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x27);
 8005a24:	2027      	movs	r0, #39	; 0x27
 8005a26:	f000 fd75 	bl	8006514 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8005a2a:	20f2      	movs	r0, #242	; 0xf2
 8005a2c:	f000 fd3c 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8005a30:	2000      	movs	r0, #0
 8005a32:	f000 fd6f 	bl	8006514 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8005a36:	2026      	movs	r0, #38	; 0x26
 8005a38:	f000 fd36 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f000 fd69 	bl	8006514 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8005a42:	20e0      	movs	r0, #224	; 0xe0
 8005a44:	f000 fd30 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8005a48:	200f      	movs	r0, #15
 8005a4a:	f000 fd63 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x31);
 8005a4e:	2031      	movs	r0, #49	; 0x31
 8005a50:	f000 fd60 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8005a54:	202b      	movs	r0, #43	; 0x2b
 8005a56:	f000 fd5d 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8005a5a:	200c      	movs	r0, #12
 8005a5c:	f000 fd5a 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8005a60:	200e      	movs	r0, #14
 8005a62:	f000 fd57 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x08);
 8005a66:	2008      	movs	r0, #8
 8005a68:	f000 fd54 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8005a6c:	204e      	movs	r0, #78	; 0x4e
 8005a6e:	f000 fd51 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8005a72:	20f1      	movs	r0, #241	; 0xf1
 8005a74:	f000 fd4e 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x37);
 8005a78:	2037      	movs	r0, #55	; 0x37
 8005a7a:	f000 fd4b 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x07);
 8005a7e:	2007      	movs	r0, #7
 8005a80:	f000 fd48 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x10);
 8005a84:	2010      	movs	r0, #16
 8005a86:	f000 fd45 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x03);
 8005a8a:	2003      	movs	r0, #3
 8005a8c:	f000 fd42 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8005a90:	200e      	movs	r0, #14
 8005a92:	f000 fd3f 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x09);
 8005a96:	2009      	movs	r0, #9
 8005a98:	f000 fd3c 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x00);
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f000 fd39 	bl	8006514 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8005aa2:	20e1      	movs	r0, #225	; 0xe1
 8005aa4:	f000 fd00 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f000 fd33 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8005aae:	200e      	movs	r0, #14
 8005ab0:	f000 fd30 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x14);
 8005ab4:	2014      	movs	r0, #20
 8005ab6:	f000 fd2d 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x03);
 8005aba:	2003      	movs	r0, #3
 8005abc:	f000 fd2a 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x11);
 8005ac0:	2011      	movs	r0, #17
 8005ac2:	f000 fd27 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x07);
 8005ac6:	2007      	movs	r0, #7
 8005ac8:	f000 fd24 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x31);
 8005acc:	2031      	movs	r0, #49	; 0x31
 8005ace:	f000 fd21 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8005ad2:	20c1      	movs	r0, #193	; 0xc1
 8005ad4:	f000 fd1e 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x48);
 8005ad8:	2048      	movs	r0, #72	; 0x48
 8005ada:	f000 fd1b 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x08);
 8005ade:	2008      	movs	r0, #8
 8005ae0:	f000 fd18 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8005ae4:	200f      	movs	r0, #15
 8005ae6:	f000 fd15 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8005aea:	200c      	movs	r0, #12
 8005aec:	f000 fd12 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x31);
 8005af0:	2031      	movs	r0, #49	; 0x31
 8005af2:	f000 fd0f 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x36);
 8005af6:	2036      	movs	r0, #54	; 0x36
 8005af8:	f000 fd0c 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8005afc:	200f      	movs	r0, #15
 8005afe:	f000 fd09 	bl	8006514 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8005b02:	2011      	movs	r0, #17
 8005b04:	f000 fcd0 	bl	80064a8 <_LCD_SendCommand>
	HAL_Delay(240);
 8005b08:	20f0      	movs	r0, #240	; 0xf0
 8005b0a:	f7fc ff73 	bl	80029f4 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8005b0e:	2029      	movs	r0, #41	; 0x29
 8005b10:	f000 fcca 	bl	80064a8 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005b14:	2000      	movs	r0, #0
 8005b16:	f000 fb69 	bl	80061ec <ILI9341_Set_Rotation>
}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <ILI9341_SPI_Init+0x30>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2240      	movs	r2, #64	; 0x40
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d005      	beq.n	8005b3c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <ILI9341_SPI_Init+0x30>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <ILI9341_SPI_Init+0x30>)
 8005b36:	2140      	movs	r1, #64	; 0x40
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <ILI9341_SPI_Init+0x34>)
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <ILI9341_SPI_Init+0x34>)
 8005b42:	2110      	movs	r1, #16
 8005b44:	438a      	bics	r2, r1
 8005b46:	615a      	str	r2, [r3, #20]
}
 8005b48:	46c0      	nop			; (mov r8, r8)
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	40013000 	.word	0x40013000
 8005b54:	48000800 	.word	0x48000800

08005b58 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8005b58:	b5b0      	push	{r4, r5, r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	0005      	movs	r5, r0
 8005b60:	000c      	movs	r4, r1
 8005b62:	0010      	movs	r0, r2
 8005b64:	0019      	movs	r1, r3
 8005b66:	1dbb      	adds	r3, r7, #6
 8005b68:	1c2a      	adds	r2, r5, #0
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	1c22      	adds	r2, r4, #0
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	1cbb      	adds	r3, r7, #2
 8005b74:	1c02      	adds	r2, r0, #0
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	003b      	movs	r3, r7
 8005b7a:	1c0a      	adds	r2, r1, #0
 8005b7c:	801a      	strh	r2, [r3, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <ILI9341_Draw_Vertical_Line+0x104>)
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	1dba      	adds	r2, r7, #6
 8005b86:	8812      	ldrh	r2, [r2, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d300      	bcc.n	8005b8e <ILI9341_Draw_Vertical_Line+0x36>
 8005b8c:	e062      	b.n	8005c54 <ILI9341_Draw_Vertical_Line+0xfc>
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <ILI9341_Draw_Vertical_Line+0x108>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	1d3a      	adds	r2, r7, #4
 8005b96:	8812      	ldrh	r2, [r2, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d25b      	bcs.n	8005c54 <ILI9341_Draw_Vertical_Line+0xfc>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	1cbb      	adds	r3, r7, #2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	18d3      	adds	r3, r2, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	; (8005c60 <ILI9341_Draw_Vertical_Line+0x108>)
 8005baa:	8812      	ldrh	r2, [r2, #0]
 8005bac:	b292      	uxth	r2, r2
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	db07      	blt.n	8005bc2 <ILI9341_Draw_Vertical_Line+0x6a>
	{
		height= LCD_HEIGHT - ypos;
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <ILI9341_Draw_Vertical_Line+0x108>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b299      	uxth	r1, r3
 8005bb8:	1cbb      	adds	r3, r7, #2
 8005bba:	1d3a      	adds	r2, r7, #4
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	1a8a      	subs	r2, r1, r2
 8005bc0:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8005bc2:	1d3a      	adds	r2, r7, #4
 8005bc4:	1cbb      	adds	r3, r7, #2
 8005bc6:	8812      	ldrh	r2, [r2, #0]
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	18d3      	adds	r3, r2, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29c      	uxth	r4, r3
 8005bd2:	1dbb      	adds	r3, r7, #6
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	8819      	ldrh	r1, [r3, #0]
 8005bda:	1dbb      	adds	r3, r7, #6
 8005bdc:	8818      	ldrh	r0, [r3, #0]
 8005bde:	0023      	movs	r3, r4
 8005be0:	f000 f840 	bl	8005c64 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8005be4:	230f      	movs	r3, #15
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8005bec:	1cbb      	adds	r3, r7, #2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <ILI9341_Draw_Vertical_Line+0xbc>
 8005bf6:	1cbb      	adds	r3, r7, #2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d90a      	bls.n	8005c14 <ILI9341_Draw_Vertical_Line+0xbc>
	{
		truncated = 1;
 8005bfe:	230f      	movs	r3, #15
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2201      	movs	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
		height = ((height >> 1) * 2);
 8005c06:	1cbb      	adds	r3, r7, #2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	1cba      	adds	r2, r7, #2
 8005c10:	18db      	adds	r3, r3, r3
 8005c12:	8013      	strh	r3, [r2, #0]
//TODO


	//

	if(truncated)
 8005c14:	230f      	movs	r3, #15
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <ILI9341_Draw_Vertical_Line+0xe0>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8005c1e:	1d3a      	adds	r2, r7, #4
 8005c20:	1cbb      	adds	r3, r7, #2
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	18d3      	adds	r3, r2, r3
 8005c28:	b299      	uxth	r1, r3
 8005c2a:	003b      	movs	r3, r7
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 f898 	bl	8005d68 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8005c38:	1cbb      	adds	r3, r7, #2
 8005c3a:	881c      	ldrh	r4, [r3, #0]
 8005c3c:	003b      	movs	r3, r7
 8005c3e:	881a      	ldrh	r2, [r3, #0]
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	8819      	ldrh	r1, [r3, #0]
 8005c44:	1dbb      	adds	r3, r7, #6
 8005c46:	8818      	ldrh	r0, [r3, #0]
 8005c48:	2303      	movs	r3, #3
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	0023      	movs	r3, r4
 8005c4e:	f000 fb4b 	bl	80062e8 <_LCD_Write_Frame>
 8005c52:	e000      	b.n	8005c56 <ILI9341_Draw_Vertical_Line+0xfe>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8005c54:	46c0      	nop			; (mov r8, r8)
}
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b004      	add	sp, #16
 8005c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c5c:	20000012 	.word	0x20000012
 8005c60:	20000010 	.word	0x20000010

08005c64 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	0005      	movs	r5, r0
 8005c6c:	000c      	movs	r4, r1
 8005c6e:	0010      	movs	r0, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	1dbb      	adds	r3, r7, #6
 8005c74:	1c2a      	adds	r2, r5, #0
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	1c22      	adds	r2, r4, #0
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	1cbb      	adds	r3, r7, #2
 8005c80:	1c02      	adds	r2, r0, #0
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	003b      	movs	r3, r7
 8005c86:	1c0a      	adds	r2, r1, #0
 8005c88:	801a      	strh	r2, [r3, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8005c8a:	202a      	movs	r0, #42	; 0x2a
 8005c8c:	f000 fc0c 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 fc3a 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(sc);
 8005ca0:	1dbb      	adds	r3, r7, #6
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 fc34 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8005cac:	1cbb      	adds	r3, r7, #2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 fc2c 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(ec);
 8005cbc:	1cbb      	adds	r3, r7, #2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f000 fc26 	bl	8006514 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8005cc8:	202b      	movs	r0, #43	; 0x2b
 8005cca:	f000 fbed 	bl	80064a8 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f000 fc1b 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(sp);
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 fc15 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8005cea:	003b      	movs	r3, r7
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fc0d 	bl	8006514 <_LCD_SendData>
	_LCD_SendData(ep);
 8005cfa:	003b      	movs	r3, r7
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 fc07 	bl	8006514 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8005d06:	202c      	movs	r0, #44	; 0x2c
 8005d08:	f000 fbce 	bl	80064a8 <_LCD_SendCommand>
}
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bdb0      	pop	{r4, r5, r7, pc}

08005d14 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	1dbb      	adds	r3, r7, #6
 8005d1e:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <ILI9341_Fill_Screen+0x4c>)
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <ILI9341_Fill_Screen+0x50>)
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f7ff ff98 	bl	8005c64 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <ILI9341_Fill_Screen+0x4c>)
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	001a      	movs	r2, r3
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <ILI9341_Fill_Screen+0x50>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4353      	muls	r3, r2
 8005d44:	0019      	movs	r1, r3
 8005d46:	1dbb      	adds	r3, r7, #6
 8005d48:	881a      	ldrh	r2, [r3, #0]
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	000b      	movs	r3, r1
 8005d50:	2100      	movs	r1, #0
 8005d52:	2000      	movs	r0, #0
 8005d54:	f000 fac8 	bl	80062e8 <_LCD_Write_Frame>
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000012 	.word	0x20000012
 8005d64:	20000010 	.word	0x20000010

08005d68 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b08f      	sub	sp, #60	; 0x3c
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	0004      	movs	r4, r0
 8005d70:	0008      	movs	r0, r1
 8005d72:	0011      	movs	r1, r2
 8005d74:	1dbb      	adds	r3, r7, #6
 8005d76:	1c22      	adds	r2, r4, #0
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	1c02      	adds	r2, r0, #0
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	1cbb      	adds	r3, r7, #2
 8005d82:	1c0a      	adds	r2, r1, #0
 8005d84:	801a      	strh	r2, [r3, #0]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005d86:	4bae      	ldr	r3, [pc, #696]	; (8006040 <ILI9341_Draw_Pixel+0x2d8>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	1dba      	adds	r2, r7, #6
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d300      	bcc.n	8005d96 <ILI9341_Draw_Pixel+0x2e>
 8005d94:	e150      	b.n	8006038 <ILI9341_Draw_Pixel+0x2d0>
 8005d96:	4bab      	ldr	r3, [pc, #684]	; (8006044 <ILI9341_Draw_Pixel+0x2dc>)
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	1d3a      	adds	r2, r7, #4
 8005d9e:	8812      	ldrh	r2, [r2, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d300      	bcc.n	8005da6 <ILI9341_Draw_Pixel+0x3e>
 8005da4:	e148      	b.n	8006038 <ILI9341_Draw_Pixel+0x2d0>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8005da6:	4ba8      	ldr	r3, [pc, #672]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	4ba7      	ldr	r3, [pc, #668]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005dac:	2101      	movs	r1, #1
 8005dae:	438a      	bics	r2, r1
 8005db0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005db2:	4ba6      	ldr	r3, [pc, #664]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	4ba5      	ldr	r3, [pc, #660]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005db8:	2110      	movs	r1, #16
 8005dba:	438a      	bics	r2, r1
 8005dbc:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	202a      	movs	r0, #42	; 0x2a
 8005dc4:	f000 fbdc 	bl	8006580 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
 8005dcc:	e008      	b.n	8005de0 <ILI9341_Draw_Pixel+0x78>
 8005dce:	4b9f      	ldr	r3, [pc, #636]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	4b9e      	ldr	r3, [pc, #632]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005dd4:	2110      	movs	r1, #16
 8005dd6:	438a      	bics	r2, r1
 8005dd8:	615a      	str	r2, [r3, #20]
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	3301      	adds	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	ddf3      	ble.n	8005dce <ILI9341_Draw_Pixel+0x66>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005de6:	4b98      	ldr	r3, [pc, #608]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	4b97      	ldr	r3, [pc, #604]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005dec:	2101      	movs	r1, #1
 8005dee:	430a      	orrs	r2, r1
 8005df0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005df2:	4b96      	ldr	r3, [pc, #600]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	4b95      	ldr	r3, [pc, #596]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005df8:	2110      	movs	r1, #16
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	615a      	str	r2, [r3, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005dfe:	4b93      	ldr	r3, [pc, #588]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	4b92      	ldr	r3, [pc, #584]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e04:	2110      	movs	r1, #16
 8005e06:	438a      	bics	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8005e0a:	1dbb      	adds	r3, r7, #6
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	2114      	movs	r1, #20
 8005e16:	187b      	adds	r3, r7, r1
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	1dbb      	adds	r3, r7, #6
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	705a      	strb	r2, [r3, #1]
 8005e24:	1dbb      	adds	r3, r7, #6
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	121b      	asrs	r3, r3, #8
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	709a      	strb	r2, [r3, #2]
 8005e32:	1dbb      	adds	r3, r7, #6
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	187b      	adds	r3, r7, r1
 8005e3e:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8005e40:	1878      	adds	r0, r7, r1
 8005e42:	230a      	movs	r3, #10
 8005e44:	2200      	movs	r2, #0
 8005e46:	2104      	movs	r1, #4
 8005e48:	f000 fbd4 	bl	80065f4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e50:	e008      	b.n	8005e64 <ILI9341_Draw_Pixel+0xfc>
 8005e52:	4b7e      	ldr	r3, [pc, #504]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	4b7d      	ldr	r3, [pc, #500]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e58:	2110      	movs	r1, #16
 8005e5a:	438a      	bics	r2, r1
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	3301      	adds	r3, #1
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	ddf3      	ble.n	8005e52 <ILI9341_Draw_Pixel+0xea>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	4b77      	ldr	r3, [pc, #476]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e70:	2110      	movs	r1, #16
 8005e72:	430a      	orrs	r2, r1
 8005e74:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8005e76:	4b74      	ldr	r3, [pc, #464]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	4b73      	ldr	r3, [pc, #460]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	438a      	bics	r2, r1
 8005e80:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005e82:	4b72      	ldr	r3, [pc, #456]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e84:	695a      	ldr	r2, [r3, #20]
 8005e86:	4b71      	ldr	r3, [pc, #452]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005e88:	2110      	movs	r1, #16
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8005e8e:	220a      	movs	r2, #10
 8005e90:	2100      	movs	r1, #0
 8005e92:	202b      	movs	r0, #43	; 0x2b
 8005e94:	f000 fb74 	bl	8006580 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9c:	e008      	b.n	8005eb0 <ILI9341_Draw_Pixel+0x148>
 8005e9e:	4b6b      	ldr	r3, [pc, #428]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	4b6a      	ldr	r3, [pc, #424]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ea4:	2110      	movs	r1, #16
 8005ea6:	438a      	bics	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	3301      	adds	r3, #1
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	ddf3      	ble.n	8005e9e <ILI9341_Draw_Pixel+0x136>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005eb6:	4b64      	ldr	r3, [pc, #400]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	4b63      	ldr	r3, [pc, #396]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005ec2:	4b62      	ldr	r3, [pc, #392]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	4b61      	ldr	r3, [pc, #388]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ec8:	2110      	movs	r1, #16
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	615a      	str	r2, [r3, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	4b5e      	ldr	r3, [pc, #376]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ed4:	2110      	movs	r1, #16
 8005ed6:	438a      	bics	r2, r1
 8005ed8:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	2110      	movs	r1, #16
 8005ee6:	187b      	adds	r3, r7, r1
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	187b      	adds	r3, r7, r1
 8005ef2:	705a      	strb	r2, [r3, #1]
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	121b      	asrs	r3, r3, #8
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	187b      	adds	r3, r7, r1
 8005f00:	709a      	strb	r2, [r3, #2]
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	70da      	strb	r2, [r3, #3]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8005f10:	1878      	adds	r0, r7, r1
 8005f12:	230a      	movs	r3, #10
 8005f14:	2200      	movs	r2, #0
 8005f16:	2104      	movs	r1, #4
 8005f18:	f000 fb6c 	bl	80065f4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f20:	e008      	b.n	8005f34 <ILI9341_Draw_Pixel+0x1cc>
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f28:	2110      	movs	r1, #16
 8005f2a:	438a      	bics	r2, r1
 8005f2c:	615a      	str	r2, [r3, #20]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	3301      	adds	r3, #1
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	ddf3      	ble.n	8005f22 <ILI9341_Draw_Pixel+0x1ba>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005f3a:	4b44      	ldr	r3, [pc, #272]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f40:	2110      	movs	r1, #16
 8005f42:	430a      	orrs	r2, r1
 8005f44:	615a      	str	r2, [r3, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8005f46:	4b40      	ldr	r3, [pc, #256]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	438a      	bics	r2, r1
 8005f50:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005f52:	4b3e      	ldr	r3, [pc, #248]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f58:	2110      	movs	r1, #16
 8005f5a:	438a      	bics	r2, r1
 8005f5c:	615a      	str	r2, [r3, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8005f5e:	220a      	movs	r2, #10
 8005f60:	2100      	movs	r1, #0
 8005f62:	202c      	movs	r0, #44	; 0x2c
 8005f64:	f000 fb0c 	bl	8006580 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6c:	e008      	b.n	8005f80 <ILI9341_Draw_Pixel+0x218>
 8005f6e:	4b37      	ldr	r3, [pc, #220]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	4b36      	ldr	r3, [pc, #216]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f74:	2110      	movs	r1, #16
 8005f76:	438a      	bics	r2, r1
 8005f78:	615a      	str	r2, [r3, #20]
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	ddf3      	ble.n	8005f6e <ILI9341_Draw_Pixel+0x206>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8005f86:	4b30      	ldr	r3, [pc, #192]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <ILI9341_Draw_Pixel+0x2e0>)
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f94:	695a      	ldr	r2, [r3, #20]
 8005f96:	4b2d      	ldr	r3, [pc, #180]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005f98:	2110      	movs	r1, #16
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	615a      	str	r2, [r3, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005f9e:	4b2b      	ldr	r3, [pc, #172]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005fa4:	2110      	movs	r1, #16
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	615a      	str	r2, [r3, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8005faa:	1cbb      	adds	r3, r7, #2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	210c      	movs	r1, #12
 8005fb6:	187b      	adds	r3, r7, r1
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	1cbb      	adds	r3, r7, #2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	705a      	strb	r2, [r3, #1]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8005fc4:	1878      	adds	r0, r7, r1
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2102      	movs	r1, #2
 8005fcc:	f000 fb12 	bl	80065f4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	623b      	str	r3, [r7, #32]
 8005fd4:	e008      	b.n	8005fe8 <ILI9341_Draw_Pixel+0x280>
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	4b1c      	ldr	r3, [pc, #112]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005fdc:	2110      	movs	r1, #16
 8005fde:	438a      	bics	r2, r1
 8005fe0:	615a      	str	r2, [r3, #20]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	623b      	str	r3, [r7, #32]
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	ddf3      	ble.n	8005fd6 <ILI9341_Draw_Pixel+0x26e>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	e008      	b.n	8006006 <ILI9341_Draw_Pixel+0x29e>
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	4b14      	ldr	r3, [pc, #80]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8005ffa:	2110      	movs	r1, #16
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	615a      	str	r2, [r3, #20]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	3301      	adds	r3, #1
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b02      	cmp	r3, #2
 800600a:	ddf3      	ble.n	8005ff4 <ILI9341_Draw_Pixel+0x28c>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e008      	b.n	8006024 <ILI9341_Draw_Pixel+0x2bc>
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8006014:	695a      	ldr	r2, [r3, #20]
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8006018:	2110      	movs	r1, #16
 800601a:	438a      	bics	r2, r1
 800601c:	615a      	str	r2, [r3, #20]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	3301      	adds	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	ddf3      	ble.n	8006012 <ILI9341_Draw_Pixel+0x2aa>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <ILI9341_Draw_Pixel+0x2e4>)
 8006030:	2110      	movs	r1, #16
 8006032:	430a      	orrs	r2, r1
 8006034:	615a      	str	r2, [r3, #20]
 8006036:	e000      	b.n	800603a <ILI9341_Draw_Pixel+0x2d2>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006038:	46c0      	nop			; (mov r8, r8)


}
 800603a:	46bd      	mov	sp, r7
 800603c:	b00f      	add	sp, #60	; 0x3c
 800603e:	bd90      	pop	{r4, r7, pc}
 8006040:	20000012 	.word	0x20000012
 8006044:	20000010 	.word	0x20000010
 8006048:	48000400 	.word	0x48000400
 800604c:	48000800 	.word	0x48000800

08006050 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8006050:	b5b0      	push	{r4, r5, r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	0005      	movs	r5, r0
 8006058:	000c      	movs	r4, r1
 800605a:	0010      	movs	r0, r2
 800605c:	0019      	movs	r1, r3
 800605e:	1dbb      	adds	r3, r7, #6
 8006060:	1c2a      	adds	r2, r5, #0
 8006062:	801a      	strh	r2, [r3, #0]
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	1c22      	adds	r2, r4, #0
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	1cbb      	adds	r3, r7, #2
 800606c:	1c02      	adds	r2, r0, #0
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	003b      	movs	r3, r7
 8006072:	1c0a      	adds	r2, r1, #0
 8006074:	801a      	strh	r2, [r3, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8006076:	4b5b      	ldr	r3, [pc, #364]	; (80061e4 <ILI9341_Draw_Rectangle+0x194>)
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	1dba      	adds	r2, r7, #6
 800607e:	8812      	ldrh	r2, [r2, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d300      	bcc.n	8006086 <ILI9341_Draw_Rectangle+0x36>
 8006084:	e0a9      	b.n	80061da <ILI9341_Draw_Rectangle+0x18a>
 8006086:	4b58      	ldr	r3, [pc, #352]	; (80061e8 <ILI9341_Draw_Rectangle+0x198>)
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	1d3a      	adds	r2, r7, #4
 800608e:	8812      	ldrh	r2, [r2, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d300      	bcc.n	8006096 <ILI9341_Draw_Rectangle+0x46>
 8006094:	e0a1      	b.n	80061da <ILI9341_Draw_Rectangle+0x18a>
	if((xpos+width-1)>=LCD_WIDTH)
 8006096:	1dbb      	adds	r3, r7, #6
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	1cbb      	adds	r3, r7, #2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	4a50      	ldr	r2, [pc, #320]	; (80061e4 <ILI9341_Draw_Rectangle+0x194>)
 80060a4:	8812      	ldrh	r2, [r2, #0]
 80060a6:	b292      	uxth	r2, r2
 80060a8:	4293      	cmp	r3, r2
 80060aa:	db07      	blt.n	80060bc <ILI9341_Draw_Rectangle+0x6c>
		{
			width=LCD_WIDTH-xpos;
 80060ac:	4b4d      	ldr	r3, [pc, #308]	; (80061e4 <ILI9341_Draw_Rectangle+0x194>)
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b299      	uxth	r1, r3
 80060b2:	1cbb      	adds	r3, r7, #2
 80060b4:	1dba      	adds	r2, r7, #6
 80060b6:	8812      	ldrh	r2, [r2, #0]
 80060b8:	1a8a      	subs	r2, r1, r2
 80060ba:	801a      	strh	r2, [r3, #0]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	881a      	ldrh	r2, [r3, #0]
 80060c0:	003b      	movs	r3, r7
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	18d3      	adds	r3, r2, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	4a47      	ldr	r2, [pc, #284]	; (80061e8 <ILI9341_Draw_Rectangle+0x198>)
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	b292      	uxth	r2, r2
 80060ce:	4293      	cmp	r3, r2
 80060d0:	db07      	blt.n	80060e2 <ILI9341_Draw_Rectangle+0x92>
		{
			height=LCD_HEIGHT-ypos;
 80060d2:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <ILI9341_Draw_Rectangle+0x198>)
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b299      	uxth	r1, r3
 80060d8:	003b      	movs	r3, r7
 80060da:	1d3a      	adds	r2, r7, #4
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	1a8a      	subs	r2, r1, r2
 80060e0:	801a      	strh	r2, [r3, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 80060e2:	1dba      	adds	r2, r7, #6
 80060e4:	1cbb      	adds	r3, r7, #2
 80060e6:	8812      	ldrh	r2, [r2, #0]
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	18d3      	adds	r3, r2, r3
 80060ec:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80060f2:	1d3a      	adds	r2, r7, #4
 80060f4:	003b      	movs	r3, r7
 80060f6:	8812      	ldrh	r2, [r2, #0]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	18d3      	adds	r3, r2, r3
 80060fc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	1d3b      	adds	r3, r7, #4
 8006104:	8819      	ldrh	r1, [r3, #0]
 8006106:	1dbb      	adds	r3, r7, #6
 8006108:	8818      	ldrh	r0, [r3, #0]
 800610a:	0013      	movs	r3, r2
 800610c:	0022      	movs	r2, r4
 800610e:	f7ff fda9 	bl	8005c64 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8006112:	200e      	movs	r0, #14
 8006114:	183b      	adds	r3, r7, r0
 8006116:	003a      	movs	r2, r7
 8006118:	1cb9      	adds	r1, r7, #2
 800611a:	8812      	ldrh	r2, [r2, #0]
 800611c:	8809      	ldrh	r1, [r1, #0]
 800611e:	434a      	muls	r2, r1
 8006120:	801a      	strh	r2, [r3, #0]
	uint8_t truncated = 0;
 8006122:	230d      	movs	r3, #13
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800612a:	183b      	adds	r3, r7, r0
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	d010      	beq.n	8006156 <ILI9341_Draw_Rectangle+0x106>
 8006134:	230e      	movs	r3, #14
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d90b      	bls.n	8006156 <ILI9341_Draw_Rectangle+0x106>
	{
		truncated = 1;
 800613e:	230d      	movs	r3, #13
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
	 	size = ((size >> 1) * 2);
 8006146:	220e      	movs	r2, #14
 8006148:	18bb      	adds	r3, r7, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	18ba      	adds	r2, r7, r2
 8006152:	18db      	adds	r3, r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
	}

	_LCD_Write_Frame(	xpos,
 8006156:	230e      	movs	r3, #14
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	881c      	ldrh	r4, [r3, #0]
 800615c:	2320      	movs	r3, #32
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	1d3b      	adds	r3, r7, #4
 8006164:	8819      	ldrh	r1, [r3, #0]
 8006166:	1dbb      	adds	r3, r7, #6
 8006168:	8818      	ldrh	r0, [r3, #0]
 800616a:	2324      	movs	r3, #36	; 0x24
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	0023      	movs	r3, r4
 8006174:	f000 f8b8 	bl	80062e8 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8006178:	230d      	movs	r3, #13
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02c      	beq.n	80061dc <ILI9341_Draw_Rectangle+0x18c>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8006182:	1dba      	adds	r2, r7, #6
 8006184:	1cbb      	adds	r3, r7, #2
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	18d3      	adds	r3, r2, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b02      	subs	r3, #2
 8006190:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8006192:	1d3a      	adds	r2, r7, #4
 8006194:	003b      	movs	r3, r7
 8006196:	8812      	ldrh	r2, [r2, #0]
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	18d3      	adds	r3, r2, r3
 800619c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2420      	movs	r4, #32
 80061a4:	193a      	adds	r2, r7, r4
 80061a6:	8812      	ldrh	r2, [r2, #0]
 80061a8:	0019      	movs	r1, r3
 80061aa:	f7ff fddd 	bl	8005d68 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80061ae:	1dba      	adds	r2, r7, #6
 80061b0:	1cbb      	adds	r3, r7, #2
 80061b2:	8812      	ldrh	r2, [r2, #0]
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	18d3      	adds	r3, r2, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80061be:	1d3a      	adds	r2, r7, #4
 80061c0:	003b      	movs	r3, r7
 80061c2:	8812      	ldrh	r2, [r2, #0]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	18d3      	adds	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	193a      	adds	r2, r7, r4
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	0019      	movs	r1, r3
 80061d4:	f7ff fdc8 	bl	8005d68 <ILI9341_Draw_Pixel>
 80061d8:	e000      	b.n	80061dc <ILI9341_Draw_Rectangle+0x18c>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80061da:	46c0      	nop			; (mov r8, r8)
							colour);
	}
}
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bdb0      	pop	{r4, r5, r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	20000012 	.word	0x20000012
 80061e8:	20000010 	.word	0x20000010

080061ec <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	0002      	movs	r2, r0
 80061f4:	1dfb      	adds	r3, r7, #7
 80061f6:	701a      	strb	r2, [r3, #0]

	uint8_t screen_rotation = rotation;
 80061f8:	240f      	movs	r4, #15
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	1dfa      	adds	r2, r7, #7
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	701a      	strb	r2, [r3, #0]

	_LCD_SendCommand(0x36);
 8006202:	2036      	movs	r0, #54	; 0x36
 8006204:	f000 f950 	bl	80064a8 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8006208:	193b      	adds	r3, r7, r4
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d013      	beq.n	8006238 <ILI9341_Set_Rotation+0x4c>
 8006210:	dc02      	bgt.n	8006218 <ILI9341_Set_Rotation+0x2c>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <ILI9341_Set_Rotation+0x36>
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8006216:	e030      	b.n	800627a <ILI9341_Set_Rotation+0x8e>
	switch(screen_rotation)
 8006218:	2b02      	cmp	r3, #2
 800621a:	d018      	beq.n	800624e <ILI9341_Set_Rotation+0x62>
 800621c:	2b03      	cmp	r3, #3
 800621e:	d021      	beq.n	8006264 <ILI9341_Set_Rotation+0x78>
			break;
 8006220:	e02b      	b.n	800627a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x08);
 8006222:	2048      	movs	r0, #72	; 0x48
 8006224:	f000 f976 	bl	8006514 <_LCD_SendData>
			LCD_WIDTH = 240;
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <ILI9341_Set_Rotation+0x98>)
 800622a:	22f0      	movs	r2, #240	; 0xf0
 800622c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <ILI9341_Set_Rotation+0x9c>)
 8006230:	22a0      	movs	r2, #160	; 0xa0
 8006232:	0052      	lsls	r2, r2, #1
 8006234:	801a      	strh	r2, [r3, #0]
			break;
 8006236:	e020      	b.n	800627a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x20|0x08);
 8006238:	2028      	movs	r0, #40	; 0x28
 800623a:	f000 f96b 	bl	8006514 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <ILI9341_Set_Rotation+0x98>)
 8006240:	22a0      	movs	r2, #160	; 0xa0
 8006242:	0052      	lsls	r2, r2, #1
 8006244:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <ILI9341_Set_Rotation+0x9c>)
 8006248:	22f0      	movs	r2, #240	; 0xf0
 800624a:	801a      	strh	r2, [r3, #0]
			break;
 800624c:	e015      	b.n	800627a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x80|0x08);
 800624e:	2088      	movs	r0, #136	; 0x88
 8006250:	f000 f960 	bl	8006514 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <ILI9341_Set_Rotation+0x98>)
 8006256:	22f0      	movs	r2, #240	; 0xf0
 8006258:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <ILI9341_Set_Rotation+0x9c>)
 800625c:	22a0      	movs	r2, #160	; 0xa0
 800625e:	0052      	lsls	r2, r2, #1
 8006260:	801a      	strh	r2, [r3, #0]
			break;
 8006262:	e00a      	b.n	800627a <ILI9341_Set_Rotation+0x8e>
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8006264:	20e8      	movs	r0, #232	; 0xe8
 8006266:	f000 f955 	bl	8006514 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <ILI9341_Set_Rotation+0x98>)
 800626c:	22a0      	movs	r2, #160	; 0xa0
 800626e:	0052      	lsls	r2, r2, #1
 8006270:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <ILI9341_Set_Rotation+0x9c>)
 8006274:	22f0      	movs	r2, #240	; 0xf0
 8006276:	801a      	strh	r2, [r3, #0]
			break;
 8006278:	46c0      	nop			; (mov r8, r8)
	}
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b005      	add	sp, #20
 8006280:	bd90      	pop	{r4, r7, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	20000012 	.word	0x20000012
 8006288:	20000010 	.word	0x20000010

0800628c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <_LCD_Enable+0x18>)
 8006292:	695a      	ldr	r2, [r3, #20]
 8006294:	4b03      	ldr	r3, [pc, #12]	; (80062a4 <_LCD_Enable+0x18>)
 8006296:	2120      	movs	r1, #32
 8006298:	430a      	orrs	r2, r1
 800629a:	615a      	str	r2, [r3, #20]
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	48000800 	.word	0x48000800

080062a8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80062ac:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <_LCD_Reset+0x3c>)
 80062ae:	695a      	ldr	r2, [r3, #20]
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <_LCD_Reset+0x3c>)
 80062b2:	2120      	movs	r1, #32
 80062b4:	438a      	bics	r2, r1
 80062b6:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80062b8:	20c8      	movs	r0, #200	; 0xc8
 80062ba:	f7fc fb9b 	bl	80029f4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <_LCD_Reset+0x3c>)
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <_LCD_Reset+0x3c>)
 80062c4:	2110      	movs	r1, #16
 80062c6:	438a      	bics	r2, r1
 80062c8:	615a      	str	r2, [r3, #20]
	HAL_Delay(200);
 80062ca:	20c8      	movs	r0, #200	; 0xc8
 80062cc:	f7fc fb92 	bl	80029f4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <_LCD_Reset+0x3c>)
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <_LCD_Reset+0x3c>)
 80062d6:	2120      	movs	r1, #32
 80062d8:	430a      	orrs	r2, r1
 80062da:	615a      	str	r2, [r3, #20]
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	48000800 	.word	0x48000800

080062e8 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ea:	b095      	sub	sp, #84	; 0x54
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	0006      	movs	r6, r0
 80062f0:	0008      	movs	r0, r1
 80062f2:	0011      	movs	r1, r2
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	230e      	movs	r3, #14
 80062f8:	2218      	movs	r2, #24
 80062fa:	4694      	mov	ip, r2
 80062fc:	44bc      	add	ip, r7
 80062fe:	4463      	add	r3, ip
 8006300:	1c32      	adds	r2, r6, #0
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	230c      	movs	r3, #12
 8006306:	2218      	movs	r2, #24
 8006308:	4694      	mov	ip, r2
 800630a:	44bc      	add	ip, r7
 800630c:	4463      	add	r3, ip
 800630e:	1c02      	adds	r2, r0, #0
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	230a      	movs	r3, #10
 8006314:	2218      	movs	r2, #24
 8006316:	4694      	mov	ip, r2
 8006318:	44bc      	add	ip, r7
 800631a:	4463      	add	r3, ip
 800631c:	1c0a      	adds	r2, r1, #0
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	466b      	mov	r3, sp
 8006322:	61bb      	str	r3, [r7, #24]

	uint32_t buffer_size = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	647b      	str	r3, [r7, #68]	; 0x44
	if((chunk_size*2) < BURST_MAX_SIZE)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	4a5b      	ldr	r2, [pc, #364]	; (800649c <_LCD_Write_Frame+0x1b4>)
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	4293      	cmp	r3, r2
 8006332:	d202      	bcs.n	800633a <_LCD_Write_Frame+0x52>
	{
		buffer_size = chunk_size;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	647b      	str	r3, [r7, #68]	; 0x44
 8006338:	e002      	b.n	8006340 <_LCD_Write_Frame+0x58>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800633a:	4b58      	ldr	r3, [pc, #352]	; (800649c <_LCD_Write_Frame+0x1b4>)
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
	}

	unsigned char chifted = 	colour>>8;;
 8006340:	230a      	movs	r3, #10
 8006342:	2218      	movs	r2, #24
 8006344:	4694      	mov	ip, r2
 8006346:	44bc      	add	ip, r7
 8006348:	4463      	add	r3, ip
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	b29a      	uxth	r2, r3
 8006350:	231f      	movs	r3, #31
 8006352:	2118      	movs	r1, #24
 8006354:	468c      	mov	ip, r1
 8006356:	44bc      	add	ip, r7
 8006358:	4463      	add	r3, ip
 800635a:	701a      	strb	r2, [r3, #0]
	unsigned char burst_buffer[buffer_size];
 800635c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635e:	001a      	movs	r2, r3
 8006360:	3a01      	subs	r2, #1
 8006362:	633a      	str	r2, [r7, #48]	; 0x30
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	60fa      	str	r2, [r7, #12]
 800636a:	68b8      	ldr	r0, [r7, #8]
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	0002      	movs	r2, r0
 8006370:	0f52      	lsrs	r2, r2, #29
 8006372:	000e      	movs	r6, r1
 8006374:	00f6      	lsls	r6, r6, #3
 8006376:	617e      	str	r6, [r7, #20]
 8006378:	697e      	ldr	r6, [r7, #20]
 800637a:	4316      	orrs	r6, r2
 800637c:	617e      	str	r6, [r7, #20]
 800637e:	0002      	movs	r2, r0
 8006380:	00d2      	lsls	r2, r2, #3
 8006382:	613a      	str	r2, [r7, #16]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	6838      	ldr	r0, [r7, #0]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	0002      	movs	r2, r0
 8006390:	0f52      	lsrs	r2, r2, #29
 8006392:	000e      	movs	r6, r1
 8006394:	00f5      	lsls	r5, r6, #3
 8006396:	4315      	orrs	r5, r2
 8006398:	0002      	movs	r2, r0
 800639a:	00d4      	lsls	r4, r2, #3
 800639c:	3307      	adds	r3, #7
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	466a      	mov	r2, sp
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	469d      	mov	sp, r3
 80063a8:	466b      	mov	r3, sp
 80063aa:	3300      	adds	r3, #0
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80063ae:	2300      	movs	r3, #0
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b2:	e017      	b.n	80063e4 <_LCD_Write_Frame+0xfc>
	{
			burst_buffer[j] = 	chifted;
 80063b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b8:	18d3      	adds	r3, r2, r3
 80063ba:	221f      	movs	r2, #31
 80063bc:	2118      	movs	r1, #24
 80063be:	468c      	mov	ip, r1
 80063c0:	44bc      	add	ip, r7
 80063c2:	4462      	add	r2, ip
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80063c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ca:	3301      	adds	r3, #1
 80063cc:	220a      	movs	r2, #10
 80063ce:	2118      	movs	r1, #24
 80063d0:	468c      	mov	ip, r1
 80063d2:	44bc      	add	ip, r7
 80063d4:	4462      	add	r2, ip
 80063d6:	8812      	ldrh	r2, [r2, #0]
 80063d8:	b2d1      	uxtb	r1, r2
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e0:	3302      	adds	r3, #2
 80063e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3e3      	bcc.n	80063b4 <_LCD_Write_Frame+0xcc>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Remainder_from_block = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	643b      	str	r3, [r7, #64]	; 0x40
	if(chunk_size > 0)
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <_LCD_Write_Frame+0x132>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8006400:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	f7f9 fe92 	bl	800012c <__udivsi3>
 8006408:	0003      	movs	r3, r0
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
			Remainder_from_block 	= Sending_size%buffer_size;
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006410:	0018      	movs	r0, r3
 8006412:	f7f9 ff11 	bl	8000238 <__aeabi_uidivmod>
 8006416:	000b      	movs	r3, r1
 8006418:	643b      	str	r3, [r7, #64]	; 0x40
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800641a:	4b21      	ldr	r3, [pc, #132]	; (80064a0 <_LCD_Write_Frame+0x1b8>)
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <_LCD_Write_Frame+0x1b8>)
 8006420:	2101      	movs	r1, #1
 8006422:	430a      	orrs	r2, r1
 8006424:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006426:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 800642c:	2110      	movs	r1, #16
 800642e:	438a      	bics	r2, r1
 8006430:	615a      	str	r2, [r3, #20]
//TODO
	if(Sending_in_Block != 0)
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00f      	beq.n	8006458 <_LCD_Write_Frame+0x170>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006438:	2300      	movs	r3, #0
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800643c:	e008      	b.n	8006450 <_LCD_Write_Frame+0x168>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800643e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006440:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006442:	230a      	movs	r3, #10
 8006444:	2200      	movs	r2, #0
 8006446:	f000 f8d5 	bl	80065f4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	3301      	adds	r3, #1
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006454:	429a      	cmp	r2, r3
 8006456:	d3f2      	bcc.n	800643e <_LCD_Write_Frame+0x156>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8006458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800645a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645c:	230a      	movs	r3, #10
 800645e:	2200      	movs	r2, #0
 8006460:	f000 f8c8 	bl	80065f4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006464:	2300      	movs	r3, #0
 8006466:	63bb      	str	r3, [r7, #56]	; 0x38
 8006468:	e008      	b.n	800647c <_LCD_Write_Frame+0x194>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800646a:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 8006470:	2110      	movs	r1, #16
 8006472:	438a      	bics	r2, r1
 8006474:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	3301      	adds	r3, #1
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	2b02      	cmp	r3, #2
 8006480:	ddf3      	ble.n	800646a <_LCD_Write_Frame+0x182>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <_LCD_Write_Frame+0x1bc>)
 8006488:	2110      	movs	r1, #16
 800648a:	430a      	orrs	r2, r1
 800648c:	615a      	str	r2, [r3, #20]
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	469d      	mov	sp, r3

}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	46bd      	mov	sp, r7
 8006496:	b015      	add	sp, #84	; 0x54
 8006498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	20000014 	.word	0x20000014
 80064a0:	48000400 	.word	0x48000400
 80064a4:	48000800 	.word	0x48000800

080064a8 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	0002      	movs	r2, r0
 80064b0:	1dfb      	adds	r3, r7, #7
 80064b2:	701a      	strb	r2, [r3, #0]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80064b4:	4b15      	ldr	r3, [pc, #84]	; (800650c <_LCD_SendCommand+0x64>)
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <_LCD_SendCommand+0x64>)
 80064ba:	2110      	movs	r1, #16
 80064bc:	438a      	bics	r2, r1
 80064be:	615a      	str	r2, [r3, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <_LCD_SendCommand+0x68>)
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <_LCD_SendCommand+0x68>)
 80064c6:	2101      	movs	r1, #1
 80064c8:	438a      	bics	r2, r1
 80064ca:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(command, 0 , 0);
 80064cc:	1dfb      	adds	r3, r7, #7
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	0018      	movs	r0, r3
 80064d6:	f000 f853 	bl	8006580 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e008      	b.n	80064f2 <_LCD_SendCommand+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <_LCD_SendCommand+0x64>)
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <_LCD_SendCommand+0x64>)
 80064e6:	2110      	movs	r1, #16
 80064e8:	438a      	bics	r2, r1
 80064ea:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	ddf3      	ble.n	80064e0 <_LCD_SendCommand+0x38>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <_LCD_SendCommand+0x64>)
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	4b03      	ldr	r3, [pc, #12]	; (800650c <_LCD_SendCommand+0x64>)
 80064fe:	2110      	movs	r1, #16
 8006500:	430a      	orrs	r2, r1
 8006502:	615a      	str	r2, [r3, #20]
}
 8006504:	46c0      	nop			; (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b004      	add	sp, #16
 800650a:	bd80      	pop	{r7, pc}
 800650c:	48000800 	.word	0x48000800
 8006510:	48000400 	.word	0x48000400

08006514 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	0002      	movs	r2, r0
 800651c:	1dfb      	adds	r3, r7, #7
 800651e:	701a      	strb	r2, [r3, #0]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <_LCD_SendData+0x64>)
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <_LCD_SendData+0x64>)
 8006526:	2101      	movs	r1, #1
 8006528:	430a      	orrs	r2, r1
 800652a:	615a      	str	r2, [r3, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800652c:	4b13      	ldr	r3, [pc, #76]	; (800657c <_LCD_SendData+0x68>)
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <_LCD_SendData+0x68>)
 8006532:	2110      	movs	r1, #16
 8006534:	438a      	bics	r2, r1
 8006536:	615a      	str	r2, [r3, #20]

	_SPI_SendByte(data, 0 , 0);
 8006538:	1dfb      	adds	r3, r7, #7
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	2100      	movs	r1, #0
 8006540:	0018      	movs	r0, r3
 8006542:	f000 f81d 	bl	8006580 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e008      	b.n	800655e <_LCD_SendData+0x4a>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <_LCD_SendData+0x68>)
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	4b0a      	ldr	r3, [pc, #40]	; (800657c <_LCD_SendData+0x68>)
 8006552:	2110      	movs	r1, #16
 8006554:	438a      	bics	r2, r1
 8006556:	615a      	str	r2, [r3, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b02      	cmp	r3, #2
 8006562:	ddf3      	ble.n	800654c <_LCD_SendData+0x38>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <_LCD_SendData+0x68>)
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <_LCD_SendData+0x68>)
 800656a:	2110      	movs	r1, #16
 800656c:	438a      	bics	r2, r1
 800656e:	615a      	str	r2, [r3, #20]
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}
 8006578:	48000400 	.word	0x48000400
 800657c:	48000800 	.word	0x48000800

08006580 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	0004      	movs	r4, r0
 8006588:	0008      	movs	r0, r1
 800658a:	0011      	movs	r1, r2
 800658c:	1dfb      	adds	r3, r7, #7
 800658e:	1c22      	adds	r2, r4, #0
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	1dbb      	adds	r3, r7, #6
 8006594:	1c02      	adds	r2, r0, #0
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	1d7b      	adds	r3, r7, #5
 800659a:	1c0a      	adds	r2, r1, #0
 800659c:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e003      	b.n	80065ac <_SPI_SendByte+0x2c>
   		asm("nop");
 80065a4:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	1dbb      	adds	r3, r7, #6
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	dbf6      	blt.n	80065a4 <_SPI_SendByte+0x24>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <_SPI_SendByte+0x6c>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2202      	movs	r2, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <_SPI_SendByte+0x4a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80065c2:	4a0b      	ldr	r2, [pc, #44]	; (80065f0 <_SPI_SendByte+0x70>)
 80065c4:	1dfb      	adds	r3, r7, #7
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]
 80065ce:	e003      	b.n	80065d8 <_SPI_SendByte+0x58>
   		asm("nop");
 80065d0:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60bb      	str	r3, [r7, #8]
 80065d8:	1d7b      	adds	r3, r7, #5
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	dbf6      	blt.n	80065d0 <_SPI_SendByte+0x50>

#endif

}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	46bd      	mov	sp, r7
 80065e6:	b005      	add	sp, #20
 80065e8:	bd90      	pop	{r4, r7, pc}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	40013000 	.word	0x40013000
 80065f0:	4001300c 	.word	0x4001300c

080065f4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	0019      	movs	r1, r3
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	1dbb      	adds	r3, r7, #6
 8006606:	1c0a      	adds	r2, r1, #0
 8006608:	701a      	strb	r2, [r3, #0]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e003      	b.n	8006618 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8006610:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < pre_frame_delay ; d++)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	3301      	adds	r3, #1
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	1dfb      	adds	r3, r7, #7
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	429a      	cmp	r2, r3
 8006620:	dbf6      	blt.n	8006610 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8006626:	e01d      	b.n	8006664 <_SPI_SendByteMultiByte+0x70>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8006628:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <_SPI_SendByteMultiByte+0xa4>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2202      	movs	r2, #2
 800662e:	4013      	ands	r3, r2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d117      	bne.n	8006664 <_SPI_SendByteMultiByte+0x70>
		{
			if (buffer_size > 1U)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d90a      	bls.n	8006650 <_SPI_SendByteMultiByte+0x5c>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <_SPI_SendByteMultiByte+0xa4>)
 8006640:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3302      	adds	r3, #2
 8006646:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3b02      	subs	r3, #2
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	e009      	b.n	8006664 <_SPI_SendByteMultiByte+0x70>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8006650:	4a12      	ldr	r2, [pc, #72]	; (800669c <_SPI_SendByteMultiByte+0xa8>)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	3301      	adds	r3, #1
 800665c:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3b01      	subs	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1de      	bne.n	8006628 <_SPI_SendByteMultiByte+0x34>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <_SPI_SendByteMultiByte+0xa4>)
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <_SPI_SendByteMultiByte+0xa4>)
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	438a      	bics	r2, r1
 8006674:	609a      	str	r2, [r3, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e003      	b.n	8006684 <_SPI_SendByteMultiByte+0x90>
   		asm("nop");
 800667c:	46c0      	nop			; (mov r8, r8)
   	for(int d = 0; d < post_frame_delay ; d++)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	3301      	adds	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	1dbb      	adds	r3, r7, #6
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	429a      	cmp	r2, r3
 800668c:	dbf6      	blt.n	800667c <_SPI_SendByteMultiByte+0x88>

#endif

}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b008      	add	sp, #32
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	40013000 	.word	0x40013000
 800669c:	4001300c 	.word	0x4001300c

080066a0 <TSC2046_EM_GetTouchScreenState>:
 *	@retval TSC2046_StatesTypedef - 	TSC2046_IdleState = 0x0,
											TSC2046_ConversionState
 *
 */
TSC2046_StatesTypedef 	TSC2046_EM_GetTouchScreenState()
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	return eTouchScreenState;
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <TSC2046_EM_GetTouchScreenState+0x10>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	200011a0 	.word	0x200011a0

080066b4 <TSC2046_EM_ProcessEvent>:
 *	@param newEvent
 *	@retval None
 *
 */
void TSC2046_EM_ProcessEvent(TSC2046_EventsTypedef newEvent)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	0002      	movs	r2, r0
 80066bc:	1dfb      	adds	r3, r7, #7
 80066be:	701a      	strb	r2, [r3, #0]
	switch(eTouchScreenState)
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <TSC2046_EM_ProcessEvent+0x4c>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	3300      	adds	r3, #0
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d815      	bhi.n	80066f6 <TSC2046_EM_ProcessEvent+0x42>
	{
		case TSC2046_IdleState:
		case TSC2046_ConversionState:

			switch(newEvent)
 80066ca:	1dfb      	adds	r3, r7, #7
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <TSC2046_EM_ProcessEvent+0x24>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d007      	beq.n	80066e6 <TSC2046_EM_ProcessEvent+0x32>

				case TSC2046_evPen:
					eTouchScreenState = TSC2046_EM_EnableConversionState();
					break;
			}
			break;
 80066d6:	e00d      	b.n	80066f4 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableIdleState();
 80066d8:	f000 f81a 	bl	8006710 <TSC2046_EM_EnableIdleState>
 80066dc:	0003      	movs	r3, r0
 80066de:	001a      	movs	r2, r3
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <TSC2046_EM_ProcessEvent+0x4c>)
 80066e2:	701a      	strb	r2, [r3, #0]
					break;
 80066e4:	e006      	b.n	80066f4 <TSC2046_EM_ProcessEvent+0x40>
					eTouchScreenState = TSC2046_EM_EnableConversionState();
 80066e6:	f000 f80d 	bl	8006704 <TSC2046_EM_EnableConversionState>
 80066ea:	0003      	movs	r3, r0
 80066ec:	001a      	movs	r2, r3
 80066ee:	4b04      	ldr	r3, [pc, #16]	; (8006700 <TSC2046_EM_ProcessEvent+0x4c>)
 80066f0:	701a      	strb	r2, [r3, #0]
					break;
 80066f2:	46c0      	nop			; (mov r8, r8)
			break;
 80066f4:	46c0      	nop			; (mov r8, r8)
	}
}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b002      	add	sp, #8
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	200011a0 	.word	0x200011a0

08006704 <TSC2046_EM_EnableConversionState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableConversionState()
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
	return TSC2046_ConversionState;
 8006708:	2301      	movs	r3, #1
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <TSC2046_EM_EnableIdleState>:
 *	@param None
 *	@retval TSC2046_StatesTypedef
 *
 */
TSC2046_StatesTypedef	TSC2046_EM_EnableIdleState()
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TSC2046_IRQ_PORT, TSC2046_IRQ_PIN, GPIO_PIN_RESET);
	return TSC2046_IdleState;
 8006714:	2300      	movs	r3, #0
}
 8006716:	0018      	movs	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <TSC2046_HM_Init>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_Init()
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
	TSC2046_HW_LOOP_TIMER->PSC = 0;
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <TSC2046_HM_Init+0x5c>)
 8006724:	2200      	movs	r2, #0
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
	TSC2046_HW_LOOP_TIMER->ARR = 4095;
 8006728:	4b13      	ldr	r3, [pc, #76]	; (8006778 <TSC2046_HM_Init+0x5c>)
 800672a:	4a14      	ldr	r2, [pc, #80]	; (800677c <TSC2046_HM_Init+0x60>)
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c
	TSC2046_HW_LOOP_TIMER->CR1 |= TIM_CR1_CEN;
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <TSC2046_HM_Init+0x5c>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <TSC2046_HM_Init+0x5c>)
 8006734:	2101      	movs	r1, #1
 8006736:	430a      	orrs	r2, r1
 8006738:	601a      	str	r2, [r3, #0]
	TSC2046_HW_LOOP_TIMER->DIER |= TIM_DIER_UIE;
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <TSC2046_HM_Init+0x5c>)
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <TSC2046_HM_Init+0x5c>)
 8006740:	2101      	movs	r1, #1
 8006742:	430a      	orrs	r2, r1
 8006744:	60da      	str	r2, [r3, #12]

#if TSC2046_OVERSAMPLE > 0

	// statically initialise the array to hold
	// read values from TSC2046 touch controller
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	e00e      	b.n	800676a <TSC2046_HM_Init+0x4e>
	{
		tsc2046_data[p].XPOS = 0;
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <TSC2046_HM_Init+0x64>)
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	0092      	lsls	r2, r2, #2
 8006752:	2100      	movs	r1, #0
 8006754:	52d1      	strh	r1, [r2, r3]
		tsc2046_data[p].YPOS = 0;
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <TSC2046_HM_Init+0x64>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	18d3      	adds	r3, r2, r3
 800675e:	3302      	adds	r3, #2
 8006760:	2200      	movs	r2, #0
 8006762:	801a      	strh	r2, [r3, #0]
	for(int p = 0; p < TSC2046_OVERSAMPLE; p++)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dded      	ble.n	800674c <TSC2046_HM_Init+0x30>

#else
	#error "TSC2046_OVERSAMPLE (TSC2046_STM32_HardwareManager.h) cannot be zero!"
#endif

}
 8006770:	46c0      	nop			; (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	b002      	add	sp, #8
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40014800 	.word	0x40014800
 800677c:	00000fff 	.word	0x00000fff
 8006780:	200012fc 	.word	0x200012fc

08006784 <TSC2046_HM_RunConversion>:
 *	@param None
 *	@retval
 *
 */
eTSC2046ReadStatusTypedef TSC2046_HM_RunConversion()
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
	eTSC2046ReadStatusTypedef status = TSC2046_DATAOK;
 800678a:	1dfb      	adds	r3, r7, #7
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
	#else
		//TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
		//_SetCsPinHigh();
	#endif

	if(TSC2046_EM_GetTouchScreenState() == TSC2046_ConversionState)
 8006790:	f7ff ff86 	bl	80066a0 <TSC2046_EM_GetTouchScreenState>
 8006794:	0003      	movs	r3, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d138      	bne.n	800680c <TSC2046_HM_RunConversion+0x88>
	{

	// Check SPI is enabled
		_EnableSPI();
 800679a:	f000 f8b7 	bl	800690c <_EnableSPI>
			HAL_SPI_Receive(&hspi2, tsc2046_read_ypos_data, 2, 1);

			HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
		#else

			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 800679e:	2300      	movs	r3, #0
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	e02d      	b.n	8006800 <TSC2046_HM_RunConversion+0x7c>
			{
				_SetCsPinLow();
 80067a4:	f000 f8a2 	bl	80068ec <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 80067a8:	20d0      	movs	r0, #208	; 0xd0
 80067aa:	f000 f8c3 	bl	8006934 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 80067ae:	f000 f8d9 	bl	8006964 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(YPOSCMD);							// Y POS CMD transmit
 80067b2:	20d0      	movs	r0, #208	; 0xd0
 80067b4:	f000 f8be 	bl	8006934 <_SpiTransmit8>
				tsc2046_data[s].YPOS = _SpiReceive16();		// Y POS receive
 80067b8:	f000 f8d4 	bl	8006964 <_SpiReceive16>
 80067bc:	0003      	movs	r3, r0
 80067be:	0019      	movs	r1, r3
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <TSC2046_HM_RunConversion+0xa8>)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	18d3      	adds	r3, r2, r3
 80067c8:	3302      	adds	r3, #2
 80067ca:	1c0a      	adds	r2, r1, #0
 80067cc:	801a      	strh	r2, [r3, #0]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80067ce:	f000 f87f 	bl	80068d0 <_SetCsPinHigh>

				_SetCsPinLow();
 80067d2:	f000 f88b 	bl	80068ec <_SetCsPinLow>
				//_WaitDelay(100);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80067d6:	2090      	movs	r0, #144	; 0x90
 80067d8:	f000 f8ac 	bl	8006934 <_SpiTransmit8>
				_SpiReceive16();								// dummy receive
 80067dc:	f000 f8c2 	bl	8006964 <_SpiReceive16>

				//_WaitDelay(0);

				_SpiTransmit8(XPOSCMD);							// X POS CMD transmit
 80067e0:	2090      	movs	r0, #144	; 0x90
 80067e2:	f000 f8a7 	bl	8006934 <_SpiTransmit8>
				tsc2046_data[s].XPOS = _SpiReceive16();		// Y POS receive
 80067e6:	f000 f8bd 	bl	8006964 <_SpiReceive16>
 80067ea:	0003      	movs	r3, r0
 80067ec:	0019      	movs	r1, r3
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <TSC2046_HM_RunConversion+0xa8>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	52d1      	strh	r1, [r2, r3]

				//_WaitDelay(100);
				_SetCsPinHigh();
 80067f6:	f000 f86b 	bl	80068d0 <_SetCsPinHigh>
			for( int s = 0; s < TSC2046_OVERSAMPLE; s++)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	ddce      	ble.n	80067a4 <TSC2046_HM_RunConversion+0x20>
			}

		#endif

		#ifdef TSC2046_USE_QVGA
			TSC2046_HM_ConvertToQVGA();
 8006806:	f000 f813 	bl	8006830 <TSC2046_HM_ConvertToQVGA>
 800680a:	e008      	b.n	800681e <TSC2046_HM_RunConversion+0x9a>
		#endif

	}
	else
	{
		tsc2046_data[0].XPOS = 0;
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <TSC2046_HM_RunConversion+0xa8>)
 800680e:	2200      	movs	r2, #0
 8006810:	801a      	strh	r2, [r3, #0]
		tsc2046_data[0].YPOS = 0;
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <TSC2046_HM_RunConversion+0xa8>)
 8006814:	2200      	movs	r2, #0
 8006816:	805a      	strh	r2, [r3, #2]
		status = TSC2046_DATAERR;
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800681e:	1dfb      	adds	r3, r7, #7
 8006820:	781b      	ldrb	r3, [r3, #0]

}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b002      	add	sp, #8
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	200012fc 	.word	0x200012fc

08006830 <TSC2046_HM_ConvertToQVGA>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_HM_ConvertToQVGA()
{
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
	uint16_t QVGA_MAX_XRES = 	320;
 8006836:	1dbb      	adds	r3, r7, #6
 8006838:	22a0      	movs	r2, #160	; 0xa0
 800683a:	0052      	lsls	r2, r2, #1
 800683c:	801a      	strh	r2, [r3, #0]
	uint16_t QVGA_MAX_YRES = 	240;
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	22f0      	movs	r2, #240	; 0xf0
 8006842:	801a      	strh	r2, [r3, #0]

	// Convert to
	tsc2046_data[0].XPOS /= QVGA_MAX_XRES;
 8006844:	4b21      	ldr	r3, [pc, #132]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	1dbb      	adds	r3, r7, #6
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	0019      	movs	r1, r3
 800684e:	0010      	movs	r0, r2
 8006850:	f7f9 fc6c 	bl	800012c <__udivsi3>
 8006854:	0003      	movs	r3, r0
 8006856:	b29a      	uxth	r2, r3
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 800685a:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS /= QVGA_MAX_YRES;
 800685c:	4b1b      	ldr	r3, [pc, #108]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 800685e:	885a      	ldrh	r2, [r3, #2]
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	0019      	movs	r1, r3
 8006866:	0010      	movs	r0, r2
 8006868:	f7f9 fc60 	bl	800012c <__udivsi3>
 800686c:	0003      	movs	r3, r0
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 8006872:	805a      	strh	r2, [r3, #2]
		tsc2046_data[0].YPOS = QVGA_MAX_YRES - tsc2046_data[0].YPOS;
	#endif


	// Offset adjustment
	tsc2046_data[0].XPOS -= 10;
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	3b0a      	subs	r3, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	4b13      	ldr	r3, [pc, #76]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 800687e:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS -= 10;
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	3b0a      	subs	r3, #10
 8006886:	b29a      	uxth	r2, r3
 8006888:	4b10      	ldr	r3, [pc, #64]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 800688a:	805a      	strh	r2, [r3, #2]

	// Scale adjustment
	tsc2046_data[0].XPOS *= (QVGA_MAX_XRES/80);
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 800688e:	881c      	ldrh	r4, [r3, #0]
 8006890:	1dbb      	adds	r3, r7, #6
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	2150      	movs	r1, #80	; 0x50
 8006896:	0018      	movs	r0, r3
 8006898:	f7f9 fc48 	bl	800012c <__udivsi3>
 800689c:	0003      	movs	r3, r0
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4363      	muls	r3, r4
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 80068a6:	801a      	strh	r2, [r3, #0]
	tsc2046_data[0].YPOS *= (QVGA_MAX_YRES/100);
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 80068aa:	885c      	ldrh	r4, [r3, #2]
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	2164      	movs	r1, #100	; 0x64
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7f9 fc3a 	bl	800012c <__udivsi3>
 80068b8:	0003      	movs	r3, r0
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4363      	muls	r3, r4
 80068be:	b29a      	uxth	r2, r3
 80068c0:	4b02      	ldr	r3, [pc, #8]	; (80068cc <TSC2046_HM_ConvertToQVGA+0x9c>)
 80068c2:	805a      	strh	r2, [r3, #2]

}
 80068c4:	46c0      	nop			; (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b003      	add	sp, #12
 80068ca:	bd90      	pop	{r4, r7, pc}
 80068cc:	200012fc 	.word	0x200012fc

080068d0 <_SetCsPinHigh>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinHigh()
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR |= TS_CS_Pin;
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <_SetCsPinHigh+0x18>)
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <_SetCsPinHigh+0x18>)
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	0149      	lsls	r1, r1, #5
 80068de:	430a      	orrs	r2, r1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	48000400 	.word	0x48000400

080068ec <_SetCsPinLow>:
 *	@param None
 *	@retval
 *
 */
void _SetCsPinLow()
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
	TS_CS_GPIO_Port->ODR &= ~TS_CS_Pin;
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <_SetCsPinLow+0x18>)
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <_SetCsPinLow+0x18>)
 80068f6:	4904      	ldr	r1, [pc, #16]	; (8006908 <_SetCsPinLow+0x1c>)
 80068f8:	400a      	ands	r2, r1
 80068fa:	615a      	str	r2, [r3, #20]
}
 80068fc:	46c0      	nop			; (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	48000400 	.word	0x48000400
 8006908:	ffffefff 	.word	0xffffefff

0800690c <_EnableSPI>:
 *	@param None
 *	@retval
 *
 */
void _EnableSPI()
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
	// Check SPI is enabled
	if ((TSC2046_SPI->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <_EnableSPI+0x24>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2240      	movs	r2, #64	; 0x40
 8006916:	4013      	ands	r3, r2
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	d005      	beq.n	8006928 <_EnableSPI+0x1c>
	{
		TSC2046_SPI->CR1 |= SPI_CR1_SPE;
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <_EnableSPI+0x24>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b03      	ldr	r3, [pc, #12]	; (8006930 <_EnableSPI+0x24>)
 8006922:	2140      	movs	r1, #64	; 0x40
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]
	}

}
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	40003800 	.word	0x40003800

08006934 <_SpiTransmit8>:
 *	@param None
 *	@retval
 *
 */
void _SpiTransmit8(uint8_t data)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	0002      	movs	r2, r0
 800693c:	1dfb      	adds	r3, r7, #7
 800693e:	701a      	strb	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <_SpiTransmit8+0x28>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2202      	movs	r2, #2
 8006946:	4013      	ands	r3, r2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d103      	bne.n	8006954 <_SpiTransmit8+0x20>
	{
		*(volatile uint8_t *)&(SPI2->DR) = data;
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <_SpiTransmit8+0x2c>)
 800694e:	1dfb      	adds	r3, r7, #7
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	7013      	strb	r3, [r2, #0]
	}
}
 8006954:	46c0      	nop			; (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b002      	add	sp, #8
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40003800 	.word	0x40003800
 8006960:	4000380c 	.word	0x4000380c

08006964 <_SpiReceive16>:
 *	@param None
 *	@retval
 *
 */
uint16_t _SpiReceive16()
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 800696a:	1dbb      	adds	r3, r7, #6
 800696c:	2200      	movs	r2, #0
 800696e:	801a      	strh	r2, [r3, #0]
	if ((SPI2->SR & SPI_SR_RXNE) == SPI_SR_RXNE)
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <_SpiReceive16+0x2c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2201      	movs	r2, #1
 8006976:	4013      	ands	r3, r2
 8006978:	2b01      	cmp	r3, #1
 800697a:	d103      	bne.n	8006984 <_SpiReceive16+0x20>
	{
		data = (uint16_t)SPI2->DR;
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <_SpiReceive16+0x2c>)
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	1dbb      	adds	r3, r7, #6
 8006982:	801a      	strh	r2, [r3, #0]
	}
	return data;
 8006984:	1dbb      	adds	r3, r7, #6
 8006986:	881b      	ldrh	r3, [r3, #0]
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40003800 	.word	0x40003800

08006994 <TSC4026_STM32_HM_GetXpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetXpos()
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
	return tsc2046_data[0].XPOS;
 8006998:	4b02      	ldr	r3, [pc, #8]	; (80069a4 <TSC4026_STM32_HM_GetXpos+0x10>)
 800699a:	881b      	ldrh	r3, [r3, #0]
}
 800699c:	0018      	movs	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	200012fc 	.word	0x200012fc

080069a8 <TSC4026_STM32_HM_GetYpos>:
 *	@param None
 *	@retval
 *
 */
uint16_t TSC4026_STM32_HM_GetYpos()
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
	return tsc2046_data[0].YPOS;
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <TSC4026_STM32_HM_GetYpos+0x10>)
 80069ae:	885b      	ldrh	r3, [r3, #2]
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	200012fc 	.word	0x200012fc

080069bc <TSC2046_IM_PENIRQ_EXTI_Handler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_PENIRQ_EXTI_Handler()
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
//	uint32_t interrupt_time = TSC2046_HW_DEBOUNCE_TIMER->CNT;

//	if( (interrupt_time - touchscreen_last_interrupt_time) > MAX_TOUCHSCREEN_DEBOUNCE_DELAY )
//	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7ff fe77 	bl	80066b4 <TSC2046_EM_ProcessEvent>
//	}
//	touchscreen_last_interrupt_time = interrupt_time;
}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <TSC2046_IM_HardwareManagerLoopHandler>:
 *	@param None
 *	@retval
 *
 */
void TSC2046_IM_HardwareManagerLoopHandler()
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin) == 0)
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <TSC2046_IM_HardwareManagerLoopHandler+0x28>)
 80069d2:	2140      	movs	r1, #64	; 0x40
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fc fcd3 	bl	8003380 <HAL_GPIO_ReadPin>
 80069da:	1e03      	subs	r3, r0, #0
 80069dc:	d103      	bne.n	80069e6 <TSC2046_IM_HardwareManagerLoopHandler+0x1a>
	{
		TSC2046_EM_ProcessEvent(TSC2046_evPen);
 80069de:	2001      	movs	r0, #1
 80069e0:	f7ff fe68 	bl	80066b4 <TSC2046_EM_ProcessEvent>
	}
	else
	{
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
	}
}
 80069e4:	e002      	b.n	80069ec <TSC2046_IM_HardwareManagerLoopHandler+0x20>
		TSC2046_EM_ProcessEvent(TSC2046_evIdle);
 80069e6:	2000      	movs	r0, #0
 80069e8:	f7ff fe64 	bl	80066b4 <TSC2046_EM_ProcessEvent>
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	48000800 	.word	0x48000800

080069f8 <__errno>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	; (8006a00 <__errno+0x8>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	20000018 	.word	0x20000018

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	2600      	movs	r6, #0
 8006a08:	4d0c      	ldr	r5, [pc, #48]	; (8006a3c <__libc_init_array+0x38>)
 8006a0a:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	2600      	movs	r6, #0
 8006a16:	f002 f8b3 	bl	8008b80 <_init>
 8006a1a:	4d0a      	ldr	r5, [pc, #40]	; (8006a44 <__libc_init_array+0x40>)
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <__libc_init_array+0x44>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	00b3      	lsls	r3, r6, #2
 8006a2a:	58eb      	ldr	r3, [r5, r3]
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	00b3      	lsls	r3, r6, #2
 8006a34:	58eb      	ldr	r3, [r5, r3]
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08009150 	.word	0x08009150
 8006a40:	08009150 	.word	0x08009150
 8006a44:	08009150 	.word	0x08009150
 8006a48:	08009154 	.word	0x08009154

08006a4c <memcpy>:
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d100      	bne.n	8006a56 <memcpy+0xa>
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	5ccc      	ldrb	r4, [r1, r3]
 8006a58:	54c4      	strb	r4, [r0, r3]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	e7f8      	b.n	8006a50 <memcpy+0x4>

08006a5e <memset>:
 8006a5e:	0003      	movs	r3, r0
 8006a60:	1812      	adds	r2, r2, r0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d100      	bne.n	8006a68 <memset+0xa>
 8006a66:	4770      	bx	lr
 8006a68:	7019      	strb	r1, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	e7f9      	b.n	8006a62 <memset+0x4>

08006a6e <__cvt>:
 8006a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a70:	b08b      	sub	sp, #44	; 0x2c
 8006a72:	0014      	movs	r4, r2
 8006a74:	1e1d      	subs	r5, r3, #0
 8006a76:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006a78:	da53      	bge.n	8006b22 <__cvt+0xb4>
 8006a7a:	2480      	movs	r4, #128	; 0x80
 8006a7c:	0624      	lsls	r4, r4, #24
 8006a7e:	191b      	adds	r3, r3, r4
 8006a80:	001d      	movs	r5, r3
 8006a82:	0014      	movs	r4, r2
 8006a84:	232d      	movs	r3, #45	; 0x2d
 8006a86:	700b      	strb	r3, [r1, #0]
 8006a88:	2320      	movs	r3, #32
 8006a8a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	439e      	bics	r6, r3
 8006a90:	2e46      	cmp	r6, #70	; 0x46
 8006a92:	d007      	beq.n	8006aa4 <__cvt+0x36>
 8006a94:	0033      	movs	r3, r6
 8006a96:	3b45      	subs	r3, #69	; 0x45
 8006a98:	4259      	negs	r1, r3
 8006a9a:	414b      	adcs	r3, r1
 8006a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a9e:	3a01      	subs	r2, #1
 8006aa0:	18cb      	adds	r3, r1, r3
 8006aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8006aa4:	ab09      	add	r3, sp, #36	; 0x24
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	ab08      	add	r3, sp, #32
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aae:	9200      	str	r2, [sp, #0]
 8006ab0:	9302      	str	r3, [sp, #8]
 8006ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ab4:	0022      	movs	r2, r4
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	002b      	movs	r3, r5
 8006aba:	f000 fcef 	bl	800749c <_dtoa_r>
 8006abe:	0007      	movs	r7, r0
 8006ac0:	2e47      	cmp	r6, #71	; 0x47
 8006ac2:	d102      	bne.n	8006aca <__cvt+0x5c>
 8006ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ac6:	07db      	lsls	r3, r3, #31
 8006ac8:	d524      	bpl.n	8006b14 <__cvt+0xa6>
 8006aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	2e46      	cmp	r6, #70	; 0x46
 8006ad2:	d114      	bne.n	8006afe <__cvt+0x90>
 8006ad4:	783b      	ldrb	r3, [r7, #0]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d10c      	bne.n	8006af4 <__cvt+0x86>
 8006ada:	2200      	movs	r2, #0
 8006adc:	2300      	movs	r3, #0
 8006ade:	0020      	movs	r0, r4
 8006ae0:	0029      	movs	r1, r5
 8006ae2:	f7f9 fca9 	bl	8000438 <__aeabi_dcmpeq>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d104      	bne.n	8006af4 <__cvt+0x86>
 8006aea:	2301      	movs	r3, #1
 8006aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	18d3      	adds	r3, r2, r3
 8006afc:	9307      	str	r3, [sp, #28]
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	0020      	movs	r0, r4
 8006b04:	0029      	movs	r1, r5
 8006b06:	f7f9 fc97 	bl	8000438 <__aeabi_dcmpeq>
 8006b0a:	2230      	movs	r2, #48	; 0x30
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d00d      	beq.n	8006b2c <__cvt+0xbe>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	9309      	str	r3, [sp, #36]	; 0x24
 8006b14:	0038      	movs	r0, r7
 8006b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b1a:	1bdb      	subs	r3, r3, r7
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	b00b      	add	sp, #44	; 0x2c
 8006b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b22:	2300      	movs	r3, #0
 8006b24:	e7af      	b.n	8006a86 <__cvt+0x18>
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	9109      	str	r1, [sp, #36]	; 0x24
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	9907      	ldr	r1, [sp, #28]
 8006b30:	428b      	cmp	r3, r1
 8006b32:	d3f8      	bcc.n	8006b26 <__cvt+0xb8>
 8006b34:	e7ee      	b.n	8006b14 <__cvt+0xa6>

08006b36 <__exponent>:
 8006b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b38:	1c83      	adds	r3, r0, #2
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	0006      	movs	r6, r0
 8006b40:	000c      	movs	r4, r1
 8006b42:	7002      	strb	r2, [r0, #0]
 8006b44:	232b      	movs	r3, #43	; 0x2b
 8006b46:	2900      	cmp	r1, #0
 8006b48:	da01      	bge.n	8006b4e <__exponent+0x18>
 8006b4a:	232d      	movs	r3, #45	; 0x2d
 8006b4c:	424c      	negs	r4, r1
 8006b4e:	7073      	strb	r3, [r6, #1]
 8006b50:	2c09      	cmp	r4, #9
 8006b52:	dd22      	ble.n	8006b9a <__exponent+0x64>
 8006b54:	ab02      	add	r3, sp, #8
 8006b56:	1ddd      	adds	r5, r3, #7
 8006b58:	0020      	movs	r0, r4
 8006b5a:	210a      	movs	r1, #10
 8006b5c:	f7f9 fc56 	bl	800040c <__aeabi_idivmod>
 8006b60:	1e6f      	subs	r7, r5, #1
 8006b62:	3130      	adds	r1, #48	; 0x30
 8006b64:	7039      	strb	r1, [r7, #0]
 8006b66:	0020      	movs	r0, r4
 8006b68:	210a      	movs	r1, #10
 8006b6a:	f7f9 fb69 	bl	8000240 <__divsi3>
 8006b6e:	0004      	movs	r4, r0
 8006b70:	2809      	cmp	r0, #9
 8006b72:	dc0b      	bgt.n	8006b8c <__exponent+0x56>
 8006b74:	3d02      	subs	r5, #2
 8006b76:	3430      	adds	r4, #48	; 0x30
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	702c      	strb	r4, [r5, #0]
 8006b7c:	aa02      	add	r2, sp, #8
 8006b7e:	3207      	adds	r2, #7
 8006b80:	0018      	movs	r0, r3
 8006b82:	42aa      	cmp	r2, r5
 8006b84:	d804      	bhi.n	8006b90 <__exponent+0x5a>
 8006b86:	1b80      	subs	r0, r0, r6
 8006b88:	b005      	add	sp, #20
 8006b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8c:	003d      	movs	r5, r7
 8006b8e:	e7e3      	b.n	8006b58 <__exponent+0x22>
 8006b90:	782a      	ldrb	r2, [r5, #0]
 8006b92:	3501      	adds	r5, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	e7f0      	b.n	8006b7c <__exponent+0x46>
 8006b9a:	2330      	movs	r3, #48	; 0x30
 8006b9c:	18e4      	adds	r4, r4, r3
 8006b9e:	70b3      	strb	r3, [r6, #2]
 8006ba0:	1d30      	adds	r0, r6, #4
 8006ba2:	70f4      	strb	r4, [r6, #3]
 8006ba4:	e7ef      	b.n	8006b86 <__exponent+0x50>
	...

08006ba8 <_printf_float>:
 8006ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006baa:	b095      	sub	sp, #84	; 0x54
 8006bac:	000c      	movs	r4, r1
 8006bae:	920a      	str	r2, [sp, #40]	; 0x28
 8006bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bb2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006bb4:	9009      	str	r0, [sp, #36]	; 0x24
 8006bb6:	f001 fa51 	bl	800805c <_localeconv_r>
 8006bba:	6803      	ldr	r3, [r0, #0]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc0:	f7f9 faa2 	bl	8000108 <strlen>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9312      	str	r3, [sp, #72]	; 0x48
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	900e      	str	r0, [sp, #56]	; 0x38
 8006bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8006bce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bd0:	7e27      	ldrb	r7, [r4, #24]
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	05c9      	lsls	r1, r1, #23
 8006bd8:	d545      	bpl.n	8006c66 <_printf_float+0xbe>
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	4393      	bics	r3, r2
 8006bde:	001a      	movs	r2, r3
 8006be0:	3208      	adds	r2, #8
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	64a2      	str	r2, [r4, #72]	; 0x48
 8006bea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bec:	2201      	movs	r2, #1
 8006bee:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006bf0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006bf2:	006b      	lsls	r3, r5, #1
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bf8:	4252      	negs	r2, r2
 8006bfa:	4bac      	ldr	r3, [pc, #688]	; (8006eac <_printf_float+0x304>)
 8006bfc:	0030      	movs	r0, r6
 8006bfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c00:	f7fb f928 	bl	8001e54 <__aeabi_dcmpun>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d130      	bne.n	8006c6a <_printf_float+0xc2>
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4ba8      	ldr	r3, [pc, #672]	; (8006eac <_printf_float+0x304>)
 8006c0c:	4252      	negs	r2, r2
 8006c0e:	0030      	movs	r0, r6
 8006c10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c12:	f7f9 fc21 	bl	8000458 <__aeabi_dcmple>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d127      	bne.n	8006c6a <_printf_float+0xc2>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	0030      	movs	r0, r6
 8006c20:	0029      	movs	r1, r5
 8006c22:	f7f9 fc0f 	bl	8000444 <__aeabi_dcmplt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d003      	beq.n	8006c32 <_printf_float+0x8a>
 8006c2a:	0023      	movs	r3, r4
 8006c2c:	222d      	movs	r2, #45	; 0x2d
 8006c2e:	3343      	adds	r3, #67	; 0x43
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	4d9f      	ldr	r5, [pc, #636]	; (8006eb0 <_printf_float+0x308>)
 8006c34:	2f47      	cmp	r7, #71	; 0x47
 8006c36:	d800      	bhi.n	8006c3a <_printf_float+0x92>
 8006c38:	4d9e      	ldr	r5, [pc, #632]	; (8006eb4 <_printf_float+0x30c>)
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	3301      	adds	r3, #1
 8006c44:	439a      	bics	r2, r3
 8006c46:	6022      	str	r2, [r4, #0]
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	aa13      	add	r2, sp, #76	; 0x4c
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	0021      	movs	r1, r4
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c54:	f000 f9f4 	bl	8007040 <_printf_common>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d000      	beq.n	8006c5e <_printf_float+0xb6>
 8006c5c:	e093      	b.n	8006d86 <_printf_float+0x1de>
 8006c5e:	2001      	movs	r0, #1
 8006c60:	4240      	negs	r0, r0
 8006c62:	b015      	add	sp, #84	; 0x54
 8006c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c66:	3307      	adds	r3, #7
 8006c68:	e7b8      	b.n	8006bdc <_printf_float+0x34>
 8006c6a:	0032      	movs	r2, r6
 8006c6c:	002b      	movs	r3, r5
 8006c6e:	0030      	movs	r0, r6
 8006c70:	0029      	movs	r1, r5
 8006c72:	f7fb f8ef 	bl	8001e54 <__aeabi_dcmpun>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d004      	beq.n	8006c84 <_printf_float+0xdc>
 8006c7a:	4d8f      	ldr	r5, [pc, #572]	; (8006eb8 <_printf_float+0x310>)
 8006c7c:	2f47      	cmp	r7, #71	; 0x47
 8006c7e:	d8dc      	bhi.n	8006c3a <_printf_float+0x92>
 8006c80:	4d8e      	ldr	r5, [pc, #568]	; (8006ebc <_printf_float+0x314>)
 8006c82:	e7da      	b.n	8006c3a <_printf_float+0x92>
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	1c51      	adds	r1, r2, #1
 8006c90:	d143      	bne.n	8006d1a <_printf_float+0x172>
 8006c92:	3207      	adds	r2, #7
 8006c94:	6062      	str	r2, [r4, #4]
 8006c96:	aa12      	add	r2, sp, #72	; 0x48
 8006c98:	2100      	movs	r1, #0
 8006c9a:	9205      	str	r2, [sp, #20]
 8006c9c:	aa11      	add	r2, sp, #68	; 0x44
 8006c9e:	9203      	str	r2, [sp, #12]
 8006ca0:	2223      	movs	r2, #35	; 0x23
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	9106      	str	r1, [sp, #24]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	a908      	add	r1, sp, #32
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	1852      	adds	r2, r2, r1
 8006cae:	9202      	str	r2, [sp, #8]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	0032      	movs	r2, r6
 8006cb4:	002b      	movs	r3, r5
 8006cb6:	9704      	str	r7, [sp, #16]
 8006cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cba:	f7ff fed8 	bl	8006a6e <__cvt>
 8006cbe:	2320      	movs	r3, #32
 8006cc0:	003a      	movs	r2, r7
 8006cc2:	0005      	movs	r5, r0
 8006cc4:	439a      	bics	r2, r3
 8006cc6:	2a47      	cmp	r2, #71	; 0x47
 8006cc8:	d107      	bne.n	8006cda <_printf_float+0x132>
 8006cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ccc:	1cda      	adds	r2, r3, #3
 8006cce:	db02      	blt.n	8006cd6 <_printf_float+0x12e>
 8006cd0:	6862      	ldr	r2, [r4, #4]
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	dd45      	ble.n	8006d62 <_printf_float+0x1ba>
 8006cd6:	3f02      	subs	r7, #2
 8006cd8:	b2ff      	uxtb	r7, r7
 8006cda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cdc:	2f65      	cmp	r7, #101	; 0x65
 8006cde:	d825      	bhi.n	8006d2c <_printf_float+0x184>
 8006ce0:	0020      	movs	r0, r4
 8006ce2:	3901      	subs	r1, #1
 8006ce4:	003a      	movs	r2, r7
 8006ce6:	3050      	adds	r0, #80	; 0x50
 8006ce8:	9111      	str	r1, [sp, #68]	; 0x44
 8006cea:	f7ff ff24 	bl	8006b36 <__exponent>
 8006cee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cf0:	0006      	movs	r6, r0
 8006cf2:	1813      	adds	r3, r2, r0
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	2a01      	cmp	r2, #1
 8006cf8:	dc02      	bgt.n	8006d00 <_printf_float+0x158>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	07d2      	lsls	r2, r2, #31
 8006cfe:	d501      	bpl.n	8006d04 <_printf_float+0x15c>
 8006d00:	3301      	adds	r3, #1
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2323      	movs	r3, #35	; 0x23
 8006d06:	aa08      	add	r2, sp, #32
 8006d08:	189b      	adds	r3, r3, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d09b      	beq.n	8006c48 <_printf_float+0xa0>
 8006d10:	0023      	movs	r3, r4
 8006d12:	222d      	movs	r2, #45	; 0x2d
 8006d14:	3343      	adds	r3, #67	; 0x43
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e796      	b.n	8006c48 <_printf_float+0xa0>
 8006d1a:	2f67      	cmp	r7, #103	; 0x67
 8006d1c:	d100      	bne.n	8006d20 <_printf_float+0x178>
 8006d1e:	e176      	b.n	800700e <_printf_float+0x466>
 8006d20:	2f47      	cmp	r7, #71	; 0x47
 8006d22:	d1b8      	bne.n	8006c96 <_printf_float+0xee>
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d1b6      	bne.n	8006c96 <_printf_float+0xee>
 8006d28:	2201      	movs	r2, #1
 8006d2a:	e7b3      	b.n	8006c94 <_printf_float+0xec>
 8006d2c:	2f66      	cmp	r7, #102	; 0x66
 8006d2e:	d119      	bne.n	8006d64 <_printf_float+0x1bc>
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	2900      	cmp	r1, #0
 8006d34:	dd0c      	ble.n	8006d50 <_printf_float+0x1a8>
 8006d36:	6121      	str	r1, [r4, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <_printf_float+0x19a>
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	07d2      	lsls	r2, r2, #31
 8006d40:	d502      	bpl.n	8006d48 <_printf_float+0x1a0>
 8006d42:	3301      	adds	r3, #1
 8006d44:	185b      	adds	r3, r3, r1
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d4e:	e7d9      	b.n	8006d04 <_printf_float+0x15c>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <_printf_float+0x1b4>
 8006d54:	2201      	movs	r2, #1
 8006d56:	6821      	ldr	r1, [r4, #0]
 8006d58:	4211      	tst	r1, r2
 8006d5a:	d000      	beq.n	8006d5e <_printf_float+0x1b6>
 8006d5c:	1c9a      	adds	r2, r3, #2
 8006d5e:	6122      	str	r2, [r4, #16]
 8006d60:	e7f2      	b.n	8006d48 <_printf_float+0x1a0>
 8006d62:	2767      	movs	r7, #103	; 0x67
 8006d64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	db05      	blt.n	8006d78 <_printf_float+0x1d0>
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	07d2      	lsls	r2, r2, #31
 8006d72:	d5e9      	bpl.n	8006d48 <_printf_float+0x1a0>
 8006d74:	3301      	adds	r3, #1
 8006d76:	e7e6      	b.n	8006d46 <_printf_float+0x19e>
 8006d78:	2101      	movs	r1, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc01      	bgt.n	8006d82 <_printf_float+0x1da>
 8006d7e:	1849      	adds	r1, r1, r1
 8006d80:	1ac9      	subs	r1, r1, r3
 8006d82:	1852      	adds	r2, r2, r1
 8006d84:	e7eb      	b.n	8006d5e <_printf_float+0x1b6>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	0553      	lsls	r3, r2, #21
 8006d8a:	d408      	bmi.n	8006d9e <_printf_float+0x1f6>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	002a      	movs	r2, r5
 8006d90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006d96:	47a8      	blx	r5
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d129      	bne.n	8006df0 <_printf_float+0x248>
 8006d9c:	e75f      	b.n	8006c5e <_printf_float+0xb6>
 8006d9e:	2f65      	cmp	r7, #101	; 0x65
 8006da0:	d800      	bhi.n	8006da4 <_printf_float+0x1fc>
 8006da2:	e0e0      	b.n	8006f66 <_printf_float+0x3be>
 8006da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006da6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	f7f9 fb44 	bl	8000438 <__aeabi_dcmpeq>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d034      	beq.n	8006e1e <_printf_float+0x276>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4a42      	ldr	r2, [pc, #264]	; (8006ec0 <_printf_float+0x318>)
 8006db8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dbe:	47a8      	blx	r5
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d100      	bne.n	8006dc6 <_printf_float+0x21e>
 8006dc4:	e74b      	b.n	8006c5e <_printf_float+0xb6>
 8006dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	db02      	blt.n	8006dd4 <_printf_float+0x22c>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	07db      	lsls	r3, r3, #31
 8006dd2:	d50d      	bpl.n	8006df0 <_printf_float+0x248>
 8006dd4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dde:	47a8      	blx	r5
 8006de0:	2500      	movs	r5, #0
 8006de2:	1c43      	adds	r3, r0, #1
 8006de4:	d100      	bne.n	8006de8 <_printf_float+0x240>
 8006de6:	e73a      	b.n	8006c5e <_printf_float+0xb6>
 8006de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dea:	3b01      	subs	r3, #1
 8006dec:	42ab      	cmp	r3, r5
 8006dee:	dc0a      	bgt.n	8006e06 <_printf_float+0x25e>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	d500      	bpl.n	8006df8 <_printf_float+0x250>
 8006df6:	e108      	b.n	800700a <_printf_float+0x462>
 8006df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	db00      	blt.n	8006e02 <_printf_float+0x25a>
 8006e00:	e72f      	b.n	8006c62 <_printf_float+0xba>
 8006e02:	0018      	movs	r0, r3
 8006e04:	e72d      	b.n	8006c62 <_printf_float+0xba>
 8006e06:	0022      	movs	r2, r4
 8006e08:	2301      	movs	r3, #1
 8006e0a:	321a      	adds	r2, #26
 8006e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e12:	47b0      	blx	r6
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d100      	bne.n	8006e1a <_printf_float+0x272>
 8006e18:	e721      	b.n	8006c5e <_printf_float+0xb6>
 8006e1a:	3501      	adds	r5, #1
 8006e1c:	e7e4      	b.n	8006de8 <_printf_float+0x240>
 8006e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc2d      	bgt.n	8006e80 <_printf_float+0x2d8>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4a26      	ldr	r2, [pc, #152]	; (8006ec0 <_printf_float+0x318>)
 8006e28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e2e:	47b0      	blx	r6
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d100      	bne.n	8006e36 <_printf_float+0x28e>
 8006e34:	e713      	b.n	8006c5e <_printf_float+0xb6>
 8006e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <_printf_float+0x2a0>
 8006e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <_printf_float+0x2a0>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	07db      	lsls	r3, r3, #31
 8006e46:	d5d3      	bpl.n	8006df0 <_printf_float+0x248>
 8006e48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e52:	47b0      	blx	r6
 8006e54:	2600      	movs	r6, #0
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d100      	bne.n	8006e5c <_printf_float+0x2b4>
 8006e5a:	e700      	b.n	8006c5e <_printf_float+0xb6>
 8006e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e5e:	425b      	negs	r3, r3
 8006e60:	42b3      	cmp	r3, r6
 8006e62:	dc01      	bgt.n	8006e68 <_printf_float+0x2c0>
 8006e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e66:	e792      	b.n	8006d8e <_printf_float+0x1e6>
 8006e68:	0022      	movs	r2, r4
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	321a      	adds	r2, #26
 8006e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006e74:	47b8      	blx	r7
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d100      	bne.n	8006e7c <_printf_float+0x2d4>
 8006e7a:	e6f0      	b.n	8006c5e <_printf_float+0xb6>
 8006e7c:	3601      	adds	r6, #1
 8006e7e:	e7ed      	b.n	8006e5c <_printf_float+0x2b4>
 8006e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e82:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006e84:	429f      	cmp	r7, r3
 8006e86:	dd00      	ble.n	8006e8a <_printf_float+0x2e2>
 8006e88:	001f      	movs	r7, r3
 8006e8a:	2f00      	cmp	r7, #0
 8006e8c:	dd08      	ble.n	8006ea0 <_printf_float+0x2f8>
 8006e8e:	003b      	movs	r3, r7
 8006e90:	002a      	movs	r2, r5
 8006e92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e98:	47b0      	blx	r6
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d100      	bne.n	8006ea0 <_printf_float+0x2f8>
 8006e9e:	e6de      	b.n	8006c5e <_printf_float+0xb6>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea4:	43fb      	mvns	r3, r7
 8006ea6:	17db      	asrs	r3, r3, #31
 8006ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eaa:	e018      	b.n	8006ede <_printf_float+0x336>
 8006eac:	7fefffff 	.word	0x7fefffff
 8006eb0:	08008ef8 	.word	0x08008ef8
 8006eb4:	08008ef4 	.word	0x08008ef4
 8006eb8:	08008f00 	.word	0x08008f00
 8006ebc:	08008efc 	.word	0x08008efc
 8006ec0:	08008f04 	.word	0x08008f04
 8006ec4:	0022      	movs	r2, r4
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	321a      	adds	r2, #26
 8006eca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ece:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ed0:	47b0      	blx	r6
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d100      	bne.n	8006ed8 <_printf_float+0x330>
 8006ed6:	e6c2      	b.n	8006c5e <_printf_float+0xb6>
 8006ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eda:	3301      	adds	r3, #1
 8006edc:	930d      	str	r3, [sp, #52]	; 0x34
 8006ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ee0:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ee4:	403b      	ands	r3, r7
 8006ee6:	1af3      	subs	r3, r6, r3
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	dceb      	bgt.n	8006ec4 <_printf_float+0x31c>
 8006eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ef0:	19ad      	adds	r5, r5, r6
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	db10      	blt.n	8006f18 <_printf_float+0x370>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d40d      	bmi.n	8006f18 <_printf_float+0x370>
 8006efc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f00:	1bbe      	subs	r6, r7, r6
 8006f02:	1aff      	subs	r7, r7, r3
 8006f04:	42b7      	cmp	r7, r6
 8006f06:	dd00      	ble.n	8006f0a <_printf_float+0x362>
 8006f08:	0037      	movs	r7, r6
 8006f0a:	2f00      	cmp	r7, #0
 8006f0c:	dc0d      	bgt.n	8006f2a <_printf_float+0x382>
 8006f0e:	43fe      	mvns	r6, r7
 8006f10:	17f3      	asrs	r3, r6, #31
 8006f12:	2500      	movs	r5, #0
 8006f14:	930c      	str	r3, [sp, #48]	; 0x30
 8006f16:	e01c      	b.n	8006f52 <_printf_float+0x3aa>
 8006f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f22:	47b8      	blx	r7
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d1e9      	bne.n	8006efc <_printf_float+0x354>
 8006f28:	e699      	b.n	8006c5e <_printf_float+0xb6>
 8006f2a:	003b      	movs	r3, r7
 8006f2c:	002a      	movs	r2, r5
 8006f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f34:	47a8      	blx	r5
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d1e9      	bne.n	8006f0e <_printf_float+0x366>
 8006f3a:	e690      	b.n	8006c5e <_printf_float+0xb6>
 8006f3c:	0022      	movs	r2, r4
 8006f3e:	2301      	movs	r3, #1
 8006f40:	321a      	adds	r2, #26
 8006f42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f46:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f48:	47b0      	blx	r6
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d100      	bne.n	8006f50 <_printf_float+0x3a8>
 8006f4e:	e686      	b.n	8006c5e <_printf_float+0xb6>
 8006f50:	3501      	adds	r5, #1
 8006f52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	003a      	movs	r2, r7
 8006f5c:	400a      	ands	r2, r1
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dceb      	bgt.n	8006f3c <_printf_float+0x394>
 8006f64:	e744      	b.n	8006df0 <_printf_float+0x248>
 8006f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	dc02      	bgt.n	8006f72 <_printf_float+0x3ca>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	421a      	tst	r2, r3
 8006f70:	d032      	beq.n	8006fd8 <_printf_float+0x430>
 8006f72:	2301      	movs	r3, #1
 8006f74:	002a      	movs	r2, r5
 8006f76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f7c:	47b8      	blx	r7
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d100      	bne.n	8006f84 <_printf_float+0x3dc>
 8006f82:	e66c      	b.n	8006c5e <_printf_float+0xb6>
 8006f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006f8e:	3501      	adds	r5, #1
 8006f90:	47b8      	blx	r7
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d100      	bne.n	8006f98 <_printf_float+0x3f0>
 8006f96:	e662      	b.n	8006c5e <_printf_float+0xb6>
 8006f98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	1e5f      	subs	r7, r3, #1
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f7f9 fa48 	bl	8000438 <__aeabi_dcmpeq>
 8006fa8:	003b      	movs	r3, r7
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d014      	beq.n	8006fd8 <_printf_float+0x430>
 8006fae:	2500      	movs	r5, #0
 8006fb0:	e00a      	b.n	8006fc8 <_printf_float+0x420>
 8006fb2:	0022      	movs	r2, r4
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	321a      	adds	r2, #26
 8006fb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fbc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006fbe:	47b8      	blx	r7
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d100      	bne.n	8006fc6 <_printf_float+0x41e>
 8006fc4:	e64b      	b.n	8006c5e <_printf_float+0xb6>
 8006fc6:	3501      	adds	r5, #1
 8006fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	42ab      	cmp	r3, r5
 8006fce:	dcf0      	bgt.n	8006fb2 <_printf_float+0x40a>
 8006fd0:	0022      	movs	r2, r4
 8006fd2:	0033      	movs	r3, r6
 8006fd4:	3250      	adds	r2, #80	; 0x50
 8006fd6:	e6db      	b.n	8006d90 <_printf_float+0x1e8>
 8006fd8:	002a      	movs	r2, r5
 8006fda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fde:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006fe0:	47a8      	blx	r5
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	d1f4      	bne.n	8006fd0 <_printf_float+0x428>
 8006fe6:	e63a      	b.n	8006c5e <_printf_float+0xb6>
 8006fe8:	0022      	movs	r2, r4
 8006fea:	2301      	movs	r3, #1
 8006fec:	3219      	adds	r2, #25
 8006fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ff4:	47b0      	blx	r6
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d100      	bne.n	8006ffc <_printf_float+0x454>
 8006ffa:	e630      	b.n	8006c5e <_printf_float+0xb6>
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	42ab      	cmp	r3, r5
 8007006:	dcef      	bgt.n	8006fe8 <_printf_float+0x440>
 8007008:	e6f6      	b.n	8006df8 <_printf_float+0x250>
 800700a:	2500      	movs	r5, #0
 800700c:	e7f7      	b.n	8006ffe <_printf_float+0x456>
 800700e:	2a00      	cmp	r2, #0
 8007010:	d100      	bne.n	8007014 <_printf_float+0x46c>
 8007012:	e689      	b.n	8006d28 <_printf_float+0x180>
 8007014:	2100      	movs	r1, #0
 8007016:	9106      	str	r1, [sp, #24]
 8007018:	a912      	add	r1, sp, #72	; 0x48
 800701a:	9105      	str	r1, [sp, #20]
 800701c:	a911      	add	r1, sp, #68	; 0x44
 800701e:	9103      	str	r1, [sp, #12]
 8007020:	2123      	movs	r1, #35	; 0x23
 8007022:	a808      	add	r0, sp, #32
 8007024:	1809      	adds	r1, r1, r0
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	9200      	str	r2, [sp, #0]
 800702c:	002b      	movs	r3, r5
 800702e:	9704      	str	r7, [sp, #16]
 8007030:	9102      	str	r1, [sp, #8]
 8007032:	0032      	movs	r2, r6
 8007034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007036:	f7ff fd1a 	bl	8006a6e <__cvt>
 800703a:	0005      	movs	r5, r0
 800703c:	e645      	b.n	8006cca <_printf_float+0x122>
 800703e:	46c0      	nop			; (mov r8, r8)

08007040 <_printf_common>:
 8007040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007042:	0015      	movs	r5, r2
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	688a      	ldr	r2, [r1, #8]
 8007048:	690b      	ldr	r3, [r1, #16]
 800704a:	9000      	str	r0, [sp, #0]
 800704c:	000c      	movs	r4, r1
 800704e:	4293      	cmp	r3, r2
 8007050:	da00      	bge.n	8007054 <_printf_common+0x14>
 8007052:	0013      	movs	r3, r2
 8007054:	0022      	movs	r2, r4
 8007056:	602b      	str	r3, [r5, #0]
 8007058:	3243      	adds	r2, #67	; 0x43
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	2a00      	cmp	r2, #0
 800705e:	d001      	beq.n	8007064 <_printf_common+0x24>
 8007060:	3301      	adds	r3, #1
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	069b      	lsls	r3, r3, #26
 8007068:	d502      	bpl.n	8007070 <_printf_common+0x30>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	3302      	adds	r3, #2
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	2706      	movs	r7, #6
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	401f      	ands	r7, r3
 8007076:	d027      	beq.n	80070c8 <_printf_common+0x88>
 8007078:	0023      	movs	r3, r4
 800707a:	3343      	adds	r3, #67	; 0x43
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	1e5a      	subs	r2, r3, #1
 8007080:	4193      	sbcs	r3, r2
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	0692      	lsls	r2, r2, #26
 8007086:	d430      	bmi.n	80070ea <_printf_common+0xaa>
 8007088:	0022      	movs	r2, r4
 800708a:	9901      	ldr	r1, [sp, #4]
 800708c:	3243      	adds	r2, #67	; 0x43
 800708e:	9800      	ldr	r0, [sp, #0]
 8007090:	9e08      	ldr	r6, [sp, #32]
 8007092:	47b0      	blx	r6
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d025      	beq.n	80070e4 <_printf_common+0xa4>
 8007098:	2306      	movs	r3, #6
 800709a:	6820      	ldr	r0, [r4, #0]
 800709c:	682a      	ldr	r2, [r5, #0]
 800709e:	68e1      	ldr	r1, [r4, #12]
 80070a0:	4003      	ands	r3, r0
 80070a2:	2500      	movs	r5, #0
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d103      	bne.n	80070b0 <_printf_common+0x70>
 80070a8:	1a8d      	subs	r5, r1, r2
 80070aa:	43eb      	mvns	r3, r5
 80070ac:	17db      	asrs	r3, r3, #31
 80070ae:	401d      	ands	r5, r3
 80070b0:	68a3      	ldr	r3, [r4, #8]
 80070b2:	6922      	ldr	r2, [r4, #16]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	dd01      	ble.n	80070bc <_printf_common+0x7c>
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	18ed      	adds	r5, r5, r3
 80070bc:	2700      	movs	r7, #0
 80070be:	42bd      	cmp	r5, r7
 80070c0:	d120      	bne.n	8007104 <_printf_common+0xc4>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e010      	b.n	80070e8 <_printf_common+0xa8>
 80070c6:	3701      	adds	r7, #1
 80070c8:	68e3      	ldr	r3, [r4, #12]
 80070ca:	682a      	ldr	r2, [r5, #0]
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	ddd2      	ble.n	8007078 <_printf_common+0x38>
 80070d2:	0022      	movs	r2, r4
 80070d4:	2301      	movs	r3, #1
 80070d6:	3219      	adds	r2, #25
 80070d8:	9901      	ldr	r1, [sp, #4]
 80070da:	9800      	ldr	r0, [sp, #0]
 80070dc:	9e08      	ldr	r6, [sp, #32]
 80070de:	47b0      	blx	r6
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d1f0      	bne.n	80070c6 <_printf_common+0x86>
 80070e4:	2001      	movs	r0, #1
 80070e6:	4240      	negs	r0, r0
 80070e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070ea:	2030      	movs	r0, #48	; 0x30
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	3143      	adds	r1, #67	; 0x43
 80070f0:	7008      	strb	r0, [r1, #0]
 80070f2:	0021      	movs	r1, r4
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	3145      	adds	r1, #69	; 0x45
 80070f8:	7809      	ldrb	r1, [r1, #0]
 80070fa:	18a2      	adds	r2, r4, r2
 80070fc:	3243      	adds	r2, #67	; 0x43
 80070fe:	3302      	adds	r3, #2
 8007100:	7011      	strb	r1, [r2, #0]
 8007102:	e7c1      	b.n	8007088 <_printf_common+0x48>
 8007104:	0022      	movs	r2, r4
 8007106:	2301      	movs	r3, #1
 8007108:	321a      	adds	r2, #26
 800710a:	9901      	ldr	r1, [sp, #4]
 800710c:	9800      	ldr	r0, [sp, #0]
 800710e:	9e08      	ldr	r6, [sp, #32]
 8007110:	47b0      	blx	r6
 8007112:	1c43      	adds	r3, r0, #1
 8007114:	d0e6      	beq.n	80070e4 <_printf_common+0xa4>
 8007116:	3701      	adds	r7, #1
 8007118:	e7d1      	b.n	80070be <_printf_common+0x7e>
	...

0800711c <_printf_i>:
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	b089      	sub	sp, #36	; 0x24
 8007120:	9204      	str	r2, [sp, #16]
 8007122:	000a      	movs	r2, r1
 8007124:	3243      	adds	r2, #67	; 0x43
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	9003      	str	r0, [sp, #12]
 800712a:	9202      	str	r2, [sp, #8]
 800712c:	7e0a      	ldrb	r2, [r1, #24]
 800712e:	000c      	movs	r4, r1
 8007130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007132:	2a6e      	cmp	r2, #110	; 0x6e
 8007134:	d100      	bne.n	8007138 <_printf_i+0x1c>
 8007136:	e086      	b.n	8007246 <_printf_i+0x12a>
 8007138:	d81f      	bhi.n	800717a <_printf_i+0x5e>
 800713a:	2a63      	cmp	r2, #99	; 0x63
 800713c:	d033      	beq.n	80071a6 <_printf_i+0x8a>
 800713e:	d808      	bhi.n	8007152 <_printf_i+0x36>
 8007140:	2a00      	cmp	r2, #0
 8007142:	d100      	bne.n	8007146 <_printf_i+0x2a>
 8007144:	e08c      	b.n	8007260 <_printf_i+0x144>
 8007146:	2a58      	cmp	r2, #88	; 0x58
 8007148:	d04d      	beq.n	80071e6 <_printf_i+0xca>
 800714a:	0025      	movs	r5, r4
 800714c:	3542      	adds	r5, #66	; 0x42
 800714e:	702a      	strb	r2, [r5, #0]
 8007150:	e030      	b.n	80071b4 <_printf_i+0x98>
 8007152:	2a64      	cmp	r2, #100	; 0x64
 8007154:	d001      	beq.n	800715a <_printf_i+0x3e>
 8007156:	2a69      	cmp	r2, #105	; 0x69
 8007158:	d1f7      	bne.n	800714a <_printf_i+0x2e>
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	6825      	ldr	r5, [r4, #0]
 800715e:	1d0a      	adds	r2, r1, #4
 8007160:	0628      	lsls	r0, r5, #24
 8007162:	d529      	bpl.n	80071b8 <_printf_i+0x9c>
 8007164:	6808      	ldr	r0, [r1, #0]
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	2800      	cmp	r0, #0
 800716a:	da03      	bge.n	8007174 <_printf_i+0x58>
 800716c:	232d      	movs	r3, #45	; 0x2d
 800716e:	9a02      	ldr	r2, [sp, #8]
 8007170:	4240      	negs	r0, r0
 8007172:	7013      	strb	r3, [r2, #0]
 8007174:	4e6b      	ldr	r6, [pc, #428]	; (8007324 <_printf_i+0x208>)
 8007176:	270a      	movs	r7, #10
 8007178:	e04f      	b.n	800721a <_printf_i+0xfe>
 800717a:	2a73      	cmp	r2, #115	; 0x73
 800717c:	d074      	beq.n	8007268 <_printf_i+0x14c>
 800717e:	d808      	bhi.n	8007192 <_printf_i+0x76>
 8007180:	2a6f      	cmp	r2, #111	; 0x6f
 8007182:	d01f      	beq.n	80071c4 <_printf_i+0xa8>
 8007184:	2a70      	cmp	r2, #112	; 0x70
 8007186:	d1e0      	bne.n	800714a <_printf_i+0x2e>
 8007188:	2220      	movs	r2, #32
 800718a:	6809      	ldr	r1, [r1, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	e003      	b.n	800719a <_printf_i+0x7e>
 8007192:	2a75      	cmp	r2, #117	; 0x75
 8007194:	d016      	beq.n	80071c4 <_printf_i+0xa8>
 8007196:	2a78      	cmp	r2, #120	; 0x78
 8007198:	d1d7      	bne.n	800714a <_printf_i+0x2e>
 800719a:	0022      	movs	r2, r4
 800719c:	2178      	movs	r1, #120	; 0x78
 800719e:	3245      	adds	r2, #69	; 0x45
 80071a0:	7011      	strb	r1, [r2, #0]
 80071a2:	4e61      	ldr	r6, [pc, #388]	; (8007328 <_printf_i+0x20c>)
 80071a4:	e022      	b.n	80071ec <_printf_i+0xd0>
 80071a6:	0025      	movs	r5, r4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	3542      	adds	r5, #66	; 0x42
 80071ac:	1d11      	adds	r1, r2, #4
 80071ae:	6019      	str	r1, [r3, #0]
 80071b0:	6813      	ldr	r3, [r2, #0]
 80071b2:	702b      	strb	r3, [r5, #0]
 80071b4:	2301      	movs	r3, #1
 80071b6:	e065      	b.n	8007284 <_printf_i+0x168>
 80071b8:	6808      	ldr	r0, [r1, #0]
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	0669      	lsls	r1, r5, #25
 80071be:	d5d3      	bpl.n	8007168 <_printf_i+0x4c>
 80071c0:	b200      	sxth	r0, r0
 80071c2:	e7d1      	b.n	8007168 <_printf_i+0x4c>
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	1d08      	adds	r0, r1, #4
 80071ca:	6018      	str	r0, [r3, #0]
 80071cc:	6808      	ldr	r0, [r1, #0]
 80071ce:	062e      	lsls	r6, r5, #24
 80071d0:	d505      	bpl.n	80071de <_printf_i+0xc2>
 80071d2:	4e54      	ldr	r6, [pc, #336]	; (8007324 <_printf_i+0x208>)
 80071d4:	2708      	movs	r7, #8
 80071d6:	2a6f      	cmp	r2, #111	; 0x6f
 80071d8:	d01b      	beq.n	8007212 <_printf_i+0xf6>
 80071da:	270a      	movs	r7, #10
 80071dc:	e019      	b.n	8007212 <_printf_i+0xf6>
 80071de:	066d      	lsls	r5, r5, #25
 80071e0:	d5f7      	bpl.n	80071d2 <_printf_i+0xb6>
 80071e2:	b280      	uxth	r0, r0
 80071e4:	e7f5      	b.n	80071d2 <_printf_i+0xb6>
 80071e6:	3145      	adds	r1, #69	; 0x45
 80071e8:	4e4e      	ldr	r6, [pc, #312]	; (8007324 <_printf_i+0x208>)
 80071ea:	700a      	strb	r2, [r1, #0]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	1d01      	adds	r1, r0, #4
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	6019      	str	r1, [r3, #0]
 80071f6:	0615      	lsls	r5, r2, #24
 80071f8:	d521      	bpl.n	800723e <_printf_i+0x122>
 80071fa:	07d3      	lsls	r3, r2, #31
 80071fc:	d502      	bpl.n	8007204 <_printf_i+0xe8>
 80071fe:	2320      	movs	r3, #32
 8007200:	431a      	orrs	r2, r3
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	2710      	movs	r7, #16
 8007206:	2800      	cmp	r0, #0
 8007208:	d103      	bne.n	8007212 <_printf_i+0xf6>
 800720a:	2320      	movs	r3, #32
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	439a      	bics	r2, r3
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	0023      	movs	r3, r4
 8007214:	2200      	movs	r2, #0
 8007216:	3343      	adds	r3, #67	; 0x43
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	6863      	ldr	r3, [r4, #4]
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	db58      	blt.n	80072d4 <_printf_i+0x1b8>
 8007222:	2204      	movs	r2, #4
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	4391      	bics	r1, r2
 8007228:	6021      	str	r1, [r4, #0]
 800722a:	2800      	cmp	r0, #0
 800722c:	d154      	bne.n	80072d8 <_printf_i+0x1bc>
 800722e:	9d02      	ldr	r5, [sp, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d05a      	beq.n	80072ea <_printf_i+0x1ce>
 8007234:	0025      	movs	r5, r4
 8007236:	7833      	ldrb	r3, [r6, #0]
 8007238:	3542      	adds	r5, #66	; 0x42
 800723a:	702b      	strb	r3, [r5, #0]
 800723c:	e055      	b.n	80072ea <_printf_i+0x1ce>
 800723e:	0655      	lsls	r5, r2, #25
 8007240:	d5db      	bpl.n	80071fa <_printf_i+0xde>
 8007242:	b280      	uxth	r0, r0
 8007244:	e7d9      	b.n	80071fa <_printf_i+0xde>
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	680d      	ldr	r5, [r1, #0]
 800724a:	1d10      	adds	r0, r2, #4
 800724c:	6949      	ldr	r1, [r1, #20]
 800724e:	6018      	str	r0, [r3, #0]
 8007250:	6813      	ldr	r3, [r2, #0]
 8007252:	062e      	lsls	r6, r5, #24
 8007254:	d501      	bpl.n	800725a <_printf_i+0x13e>
 8007256:	6019      	str	r1, [r3, #0]
 8007258:	e002      	b.n	8007260 <_printf_i+0x144>
 800725a:	066d      	lsls	r5, r5, #25
 800725c:	d5fb      	bpl.n	8007256 <_printf_i+0x13a>
 800725e:	8019      	strh	r1, [r3, #0]
 8007260:	2300      	movs	r3, #0
 8007262:	9d02      	ldr	r5, [sp, #8]
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	e04f      	b.n	8007308 <_printf_i+0x1ec>
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	1d11      	adds	r1, r2, #4
 800726c:	6019      	str	r1, [r3, #0]
 800726e:	6815      	ldr	r5, [r2, #0]
 8007270:	2100      	movs	r1, #0
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	0028      	movs	r0, r5
 8007276:	f000 ff07 	bl	8008088 <memchr>
 800727a:	2800      	cmp	r0, #0
 800727c:	d001      	beq.n	8007282 <_printf_i+0x166>
 800727e:	1b40      	subs	r0, r0, r5
 8007280:	6060      	str	r0, [r4, #4]
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	2300      	movs	r3, #0
 8007288:	9a02      	ldr	r2, [sp, #8]
 800728a:	7013      	strb	r3, [r2, #0]
 800728c:	e03c      	b.n	8007308 <_printf_i+0x1ec>
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	002a      	movs	r2, r5
 8007292:	9904      	ldr	r1, [sp, #16]
 8007294:	9803      	ldr	r0, [sp, #12]
 8007296:	9d05      	ldr	r5, [sp, #20]
 8007298:	47a8      	blx	r5
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d03e      	beq.n	800731c <_printf_i+0x200>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	079b      	lsls	r3, r3, #30
 80072a2:	d415      	bmi.n	80072d0 <_printf_i+0x1b4>
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	68e0      	ldr	r0, [r4, #12]
 80072a8:	4298      	cmp	r0, r3
 80072aa:	da39      	bge.n	8007320 <_printf_i+0x204>
 80072ac:	0018      	movs	r0, r3
 80072ae:	e037      	b.n	8007320 <_printf_i+0x204>
 80072b0:	0022      	movs	r2, r4
 80072b2:	2301      	movs	r3, #1
 80072b4:	3219      	adds	r2, #25
 80072b6:	9904      	ldr	r1, [sp, #16]
 80072b8:	9803      	ldr	r0, [sp, #12]
 80072ba:	9e05      	ldr	r6, [sp, #20]
 80072bc:	47b0      	blx	r6
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d02c      	beq.n	800731c <_printf_i+0x200>
 80072c2:	3501      	adds	r5, #1
 80072c4:	68e3      	ldr	r3, [r4, #12]
 80072c6:	9a07      	ldr	r2, [sp, #28]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	42ab      	cmp	r3, r5
 80072cc:	dcf0      	bgt.n	80072b0 <_printf_i+0x194>
 80072ce:	e7e9      	b.n	80072a4 <_printf_i+0x188>
 80072d0:	2500      	movs	r5, #0
 80072d2:	e7f7      	b.n	80072c4 <_printf_i+0x1a8>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0ad      	beq.n	8007234 <_printf_i+0x118>
 80072d8:	9d02      	ldr	r5, [sp, #8]
 80072da:	0039      	movs	r1, r7
 80072dc:	f7f8 ffac 	bl	8000238 <__aeabi_uidivmod>
 80072e0:	5c73      	ldrb	r3, [r6, r1]
 80072e2:	3d01      	subs	r5, #1
 80072e4:	702b      	strb	r3, [r5, #0]
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d1f7      	bne.n	80072da <_printf_i+0x1be>
 80072ea:	2f08      	cmp	r7, #8
 80072ec:	d109      	bne.n	8007302 <_printf_i+0x1e6>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d506      	bpl.n	8007302 <_printf_i+0x1e6>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	6922      	ldr	r2, [r4, #16]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	dc02      	bgt.n	8007302 <_printf_i+0x1e6>
 80072fc:	2330      	movs	r3, #48	; 0x30
 80072fe:	3d01      	subs	r5, #1
 8007300:	702b      	strb	r3, [r5, #0]
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	1b5b      	subs	r3, r3, r5
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	9b05      	ldr	r3, [sp, #20]
 800730a:	aa07      	add	r2, sp, #28
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	0021      	movs	r1, r4
 8007310:	9b04      	ldr	r3, [sp, #16]
 8007312:	9803      	ldr	r0, [sp, #12]
 8007314:	f7ff fe94 	bl	8007040 <_printf_common>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d1b8      	bne.n	800728e <_printf_i+0x172>
 800731c:	2001      	movs	r0, #1
 800731e:	4240      	negs	r0, r0
 8007320:	b009      	add	sp, #36	; 0x24
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007324:	08008f06 	.word	0x08008f06
 8007328:	08008f17 	.word	0x08008f17

0800732c <sniprintf>:
 800732c:	b40c      	push	{r2, r3}
 800732e:	b530      	push	{r4, r5, lr}
 8007330:	4b16      	ldr	r3, [pc, #88]	; (800738c <sniprintf+0x60>)
 8007332:	b09d      	sub	sp, #116	; 0x74
 8007334:	1e0c      	subs	r4, r1, #0
 8007336:	681d      	ldr	r5, [r3, #0]
 8007338:	da08      	bge.n	800734c <sniprintf+0x20>
 800733a:	238b      	movs	r3, #139	; 0x8b
 800733c:	2001      	movs	r0, #1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	4240      	negs	r0, r0
 8007342:	b01d      	add	sp, #116	; 0x74
 8007344:	bc30      	pop	{r4, r5}
 8007346:	bc08      	pop	{r3}
 8007348:	b002      	add	sp, #8
 800734a:	4718      	bx	r3
 800734c:	2382      	movs	r3, #130	; 0x82
 800734e:	a902      	add	r1, sp, #8
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	818b      	strh	r3, [r1, #12]
 8007354:	2300      	movs	r3, #0
 8007356:	9002      	str	r0, [sp, #8]
 8007358:	6108      	str	r0, [r1, #16]
 800735a:	429c      	cmp	r4, r3
 800735c:	d000      	beq.n	8007360 <sniprintf+0x34>
 800735e:	1e63      	subs	r3, r4, #1
 8007360:	608b      	str	r3, [r1, #8]
 8007362:	614b      	str	r3, [r1, #20]
 8007364:	2301      	movs	r3, #1
 8007366:	425b      	negs	r3, r3
 8007368:	81cb      	strh	r3, [r1, #14]
 800736a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800736c:	ab21      	add	r3, sp, #132	; 0x84
 800736e:	0028      	movs	r0, r5
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	f001 fa93 	bl	800889c <_svfiprintf_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	da01      	bge.n	800737e <sniprintf+0x52>
 800737a:	238b      	movs	r3, #139	; 0x8b
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	2c00      	cmp	r4, #0
 8007380:	d0df      	beq.n	8007342 <sniprintf+0x16>
 8007382:	2300      	movs	r3, #0
 8007384:	9a02      	ldr	r2, [sp, #8]
 8007386:	7013      	strb	r3, [r2, #0]
 8007388:	e7db      	b.n	8007342 <sniprintf+0x16>
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	20000018 	.word	0x20000018

08007390 <quorem>:
 8007390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007392:	6903      	ldr	r3, [r0, #16]
 8007394:	690c      	ldr	r4, [r1, #16]
 8007396:	b089      	sub	sp, #36	; 0x24
 8007398:	0007      	movs	r7, r0
 800739a:	9105      	str	r1, [sp, #20]
 800739c:	2600      	movs	r6, #0
 800739e:	42a3      	cmp	r3, r4
 80073a0:	db65      	blt.n	800746e <quorem+0xde>
 80073a2:	000b      	movs	r3, r1
 80073a4:	3c01      	subs	r4, #1
 80073a6:	3314      	adds	r3, #20
 80073a8:	00a5      	lsls	r5, r4, #2
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	195b      	adds	r3, r3, r5
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	0003      	movs	r3, r0
 80073b2:	3314      	adds	r3, #20
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	195d      	adds	r5, r3, r5
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	6828      	ldr	r0, [r5, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	1c59      	adds	r1, r3, #1
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	f7f8 feb3 	bl	800012c <__udivsi3>
 80073c6:	9001      	str	r0, [sp, #4]
 80073c8:	42b0      	cmp	r0, r6
 80073ca:	d029      	beq.n	8007420 <quorem+0x90>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	9802      	ldr	r0, [sp, #8]
 80073d0:	469c      	mov	ip, r3
 80073d2:	9606      	str	r6, [sp, #24]
 80073d4:	4662      	mov	r2, ip
 80073d6:	ca08      	ldmia	r2!, {r3}
 80073d8:	4694      	mov	ip, r2
 80073da:	9a01      	ldr	r2, [sp, #4]
 80073dc:	b299      	uxth	r1, r3
 80073de:	4351      	muls	r1, r2
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	4353      	muls	r3, r2
 80073e4:	1989      	adds	r1, r1, r6
 80073e6:	0c0a      	lsrs	r2, r1, #16
 80073e8:	189b      	adds	r3, r3, r2
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	0c1e      	lsrs	r6, r3, #16
 80073ee:	6803      	ldr	r3, [r0, #0]
 80073f0:	b289      	uxth	r1, r1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	18d2      	adds	r2, r2, r3
 80073f8:	6803      	ldr	r3, [r0, #0]
 80073fa:	1a52      	subs	r2, r2, r1
 80073fc:	0c19      	lsrs	r1, r3, #16
 80073fe:	466b      	mov	r3, sp
 8007400:	8b9b      	ldrh	r3, [r3, #28]
 8007402:	1acb      	subs	r3, r1, r3
 8007404:	1411      	asrs	r1, r2, #16
 8007406:	185b      	adds	r3, r3, r1
 8007408:	1419      	asrs	r1, r3, #16
 800740a:	b292      	uxth	r2, r2
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	431a      	orrs	r2, r3
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	9106      	str	r1, [sp, #24]
 8007414:	c004      	stmia	r0!, {r2}
 8007416:	4563      	cmp	r3, ip
 8007418:	d2dc      	bcs.n	80073d4 <quorem+0x44>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02d      	beq.n	800747c <quorem+0xec>
 8007420:	9905      	ldr	r1, [sp, #20]
 8007422:	0038      	movs	r0, r7
 8007424:	f001 f850 	bl	80084c8 <__mcmp>
 8007428:	2800      	cmp	r0, #0
 800742a:	db1f      	blt.n	800746c <quorem+0xdc>
 800742c:	2500      	movs	r5, #0
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	9802      	ldr	r0, [sp, #8]
 8007432:	3301      	adds	r3, #1
 8007434:	9903      	ldr	r1, [sp, #12]
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	6802      	ldr	r2, [r0, #0]
 800743a:	c908      	ldmia	r1!, {r3}
 800743c:	b292      	uxth	r2, r2
 800743e:	1955      	adds	r5, r2, r5
 8007440:	b29a      	uxth	r2, r3
 8007442:	1aaa      	subs	r2, r5, r2
 8007444:	6805      	ldr	r5, [r0, #0]
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	0c2d      	lsrs	r5, r5, #16
 800744a:	1aeb      	subs	r3, r5, r3
 800744c:	1415      	asrs	r5, r2, #16
 800744e:	195b      	adds	r3, r3, r5
 8007450:	141d      	asrs	r5, r3, #16
 8007452:	b292      	uxth	r2, r2
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	4313      	orrs	r3, r2
 8007458:	c008      	stmia	r0!, {r3}
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	428b      	cmp	r3, r1
 800745e:	d2eb      	bcs.n	8007438 <quorem+0xa8>
 8007460:	9a02      	ldr	r2, [sp, #8]
 8007462:	00a3      	lsls	r3, r4, #2
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	2a00      	cmp	r2, #0
 800746a:	d011      	beq.n	8007490 <quorem+0x100>
 800746c:	9e01      	ldr	r6, [sp, #4]
 800746e:	0030      	movs	r0, r6
 8007470:	b009      	add	sp, #36	; 0x24
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <quorem+0xf4>
 800747a:	3c01      	subs	r4, #1
 800747c:	9b02      	ldr	r3, [sp, #8]
 800747e:	3d04      	subs	r5, #4
 8007480:	42ab      	cmp	r3, r5
 8007482:	d3f7      	bcc.n	8007474 <quorem+0xe4>
 8007484:	613c      	str	r4, [r7, #16]
 8007486:	e7cb      	b.n	8007420 <quorem+0x90>
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	2a00      	cmp	r2, #0
 800748c:	d104      	bne.n	8007498 <quorem+0x108>
 800748e:	3c01      	subs	r4, #1
 8007490:	9a02      	ldr	r2, [sp, #8]
 8007492:	3b04      	subs	r3, #4
 8007494:	429a      	cmp	r2, r3
 8007496:	d3f7      	bcc.n	8007488 <quorem+0xf8>
 8007498:	613c      	str	r4, [r7, #16]
 800749a:	e7e7      	b.n	800746c <quorem+0xdc>

0800749c <_dtoa_r>:
 800749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749e:	0016      	movs	r6, r2
 80074a0:	001f      	movs	r7, r3
 80074a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80074a4:	b09b      	sub	sp, #108	; 0x6c
 80074a6:	9002      	str	r0, [sp, #8]
 80074a8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80074aa:	9606      	str	r6, [sp, #24]
 80074ac:	9707      	str	r7, [sp, #28]
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	d108      	bne.n	80074c4 <_dtoa_r+0x28>
 80074b2:	2010      	movs	r0, #16
 80074b4:	f000 fdde 	bl	8008074 <malloc>
 80074b8:	9b02      	ldr	r3, [sp, #8]
 80074ba:	6258      	str	r0, [r3, #36]	; 0x24
 80074bc:	6044      	str	r4, [r0, #4]
 80074be:	6084      	str	r4, [r0, #8]
 80074c0:	6004      	str	r4, [r0, #0]
 80074c2:	60c4      	str	r4, [r0, #12]
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	6819      	ldr	r1, [r3, #0]
 80074ca:	2900      	cmp	r1, #0
 80074cc:	d00b      	beq.n	80074e6 <_dtoa_r+0x4a>
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	2301      	movs	r3, #1
 80074d2:	4093      	lsls	r3, r2
 80074d4:	604a      	str	r2, [r1, #4]
 80074d6:	608b      	str	r3, [r1, #8]
 80074d8:	9802      	ldr	r0, [sp, #8]
 80074da:	f000 fe18 	bl	800810e <_Bfree>
 80074de:	2200      	movs	r2, #0
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	da20      	bge.n	800752c <_dtoa_r+0x90>
 80074ea:	2301      	movs	r3, #1
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	007b      	lsls	r3, r7, #1
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	9307      	str	r3, [sp, #28]
 80074f4:	9c07      	ldr	r4, [sp, #28]
 80074f6:	4bb2      	ldr	r3, [pc, #712]	; (80077c0 <_dtoa_r+0x324>)
 80074f8:	0022      	movs	r2, r4
 80074fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80074fc:	401a      	ands	r2, r3
 80074fe:	429a      	cmp	r2, r3
 8007500:	d117      	bne.n	8007532 <_dtoa_r+0x96>
 8007502:	4bb0      	ldr	r3, [pc, #704]	; (80077c4 <_dtoa_r+0x328>)
 8007504:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	9b06      	ldr	r3, [sp, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <_dtoa_r+0x7a>
 800750e:	0324      	lsls	r4, r4, #12
 8007510:	d101      	bne.n	8007516 <_dtoa_r+0x7a>
 8007512:	f000 fd87 	bl	8008024 <_dtoa_r+0xb88>
 8007516:	4bac      	ldr	r3, [pc, #688]	; (80077c8 <_dtoa_r+0x32c>)
 8007518:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800751a:	9308      	str	r3, [sp, #32]
 800751c:	2a00      	cmp	r2, #0
 800751e:	d002      	beq.n	8007526 <_dtoa_r+0x8a>
 8007520:	4baa      	ldr	r3, [pc, #680]	; (80077cc <_dtoa_r+0x330>)
 8007522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	9808      	ldr	r0, [sp, #32]
 8007528:	b01b      	add	sp, #108	; 0x6c
 800752a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752c:	2300      	movs	r3, #0
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	e7e0      	b.n	80074f4 <_dtoa_r+0x58>
 8007532:	9e06      	ldr	r6, [sp, #24]
 8007534:	9f07      	ldr	r7, [sp, #28]
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	0030      	movs	r0, r6
 800753c:	0039      	movs	r1, r7
 800753e:	f7f8 ff7b 	bl	8000438 <__aeabi_dcmpeq>
 8007542:	1e05      	subs	r5, r0, #0
 8007544:	d00b      	beq.n	800755e <_dtoa_r+0xc2>
 8007546:	2301      	movs	r3, #1
 8007548:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4ba0      	ldr	r3, [pc, #640]	; (80077d0 <_dtoa_r+0x334>)
 800754e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	2a00      	cmp	r2, #0
 8007554:	d0e7      	beq.n	8007526 <_dtoa_r+0x8a>
 8007556:	4a9f      	ldr	r2, [pc, #636]	; (80077d4 <_dtoa_r+0x338>)
 8007558:	9924      	ldr	r1, [sp, #144]	; 0x90
 800755a:	600a      	str	r2, [r1, #0]
 800755c:	e7e3      	b.n	8007526 <_dtoa_r+0x8a>
 800755e:	ab18      	add	r3, sp, #96	; 0x60
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	ab19      	add	r3, sp, #100	; 0x64
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	0032      	movs	r2, r6
 8007568:	003b      	movs	r3, r7
 800756a:	9802      	ldr	r0, [sp, #8]
 800756c:	f001 f82a 	bl	80085c4 <__d2b>
 8007570:	0063      	lsls	r3, r4, #1
 8007572:	9003      	str	r0, [sp, #12]
 8007574:	0d5b      	lsrs	r3, r3, #21
 8007576:	d074      	beq.n	8007662 <_dtoa_r+0x1c6>
 8007578:	033a      	lsls	r2, r7, #12
 800757a:	4c97      	ldr	r4, [pc, #604]	; (80077d8 <_dtoa_r+0x33c>)
 800757c:	0b12      	lsrs	r2, r2, #12
 800757e:	4314      	orrs	r4, r2
 8007580:	0021      	movs	r1, r4
 8007582:	4a96      	ldr	r2, [pc, #600]	; (80077dc <_dtoa_r+0x340>)
 8007584:	0030      	movs	r0, r6
 8007586:	9516      	str	r5, [sp, #88]	; 0x58
 8007588:	189e      	adds	r6, r3, r2
 800758a:	2200      	movs	r2, #0
 800758c:	4b94      	ldr	r3, [pc, #592]	; (80077e0 <_dtoa_r+0x344>)
 800758e:	f7fa f919 	bl	80017c4 <__aeabi_dsub>
 8007592:	4a94      	ldr	r2, [pc, #592]	; (80077e4 <_dtoa_r+0x348>)
 8007594:	4b94      	ldr	r3, [pc, #592]	; (80077e8 <_dtoa_r+0x34c>)
 8007596:	f7f9 fea3 	bl	80012e0 <__aeabi_dmul>
 800759a:	4a94      	ldr	r2, [pc, #592]	; (80077ec <_dtoa_r+0x350>)
 800759c:	4b94      	ldr	r3, [pc, #592]	; (80077f0 <_dtoa_r+0x354>)
 800759e:	f7f8 ff79 	bl	8000494 <__aeabi_dadd>
 80075a2:	0004      	movs	r4, r0
 80075a4:	0030      	movs	r0, r6
 80075a6:	000d      	movs	r5, r1
 80075a8:	f7fa fca6 	bl	8001ef8 <__aeabi_i2d>
 80075ac:	4a91      	ldr	r2, [pc, #580]	; (80077f4 <_dtoa_r+0x358>)
 80075ae:	4b92      	ldr	r3, [pc, #584]	; (80077f8 <_dtoa_r+0x35c>)
 80075b0:	f7f9 fe96 	bl	80012e0 <__aeabi_dmul>
 80075b4:	0002      	movs	r2, r0
 80075b6:	000b      	movs	r3, r1
 80075b8:	0020      	movs	r0, r4
 80075ba:	0029      	movs	r1, r5
 80075bc:	f7f8 ff6a 	bl	8000494 <__aeabi_dadd>
 80075c0:	0004      	movs	r4, r0
 80075c2:	000d      	movs	r5, r1
 80075c4:	f7fa fc62 	bl	8001e8c <__aeabi_d2iz>
 80075c8:	2200      	movs	r2, #0
 80075ca:	0007      	movs	r7, r0
 80075cc:	2300      	movs	r3, #0
 80075ce:	0020      	movs	r0, r4
 80075d0:	0029      	movs	r1, r5
 80075d2:	f7f8 ff37 	bl	8000444 <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d009      	beq.n	80075ee <_dtoa_r+0x152>
 80075da:	0038      	movs	r0, r7
 80075dc:	f7fa fc8c 	bl	8001ef8 <__aeabi_i2d>
 80075e0:	002b      	movs	r3, r5
 80075e2:	0022      	movs	r2, r4
 80075e4:	f7f8 ff28 	bl	8000438 <__aeabi_dcmpeq>
 80075e8:	4243      	negs	r3, r0
 80075ea:	4158      	adcs	r0, r3
 80075ec:	1a3f      	subs	r7, r7, r0
 80075ee:	2301      	movs	r3, #1
 80075f0:	9314      	str	r3, [sp, #80]	; 0x50
 80075f2:	2f16      	cmp	r7, #22
 80075f4:	d80d      	bhi.n	8007612 <_dtoa_r+0x176>
 80075f6:	4981      	ldr	r1, [pc, #516]	; (80077fc <_dtoa_r+0x360>)
 80075f8:	00fb      	lsls	r3, r7, #3
 80075fa:	18c9      	adds	r1, r1, r3
 80075fc:	6808      	ldr	r0, [r1, #0]
 80075fe:	6849      	ldr	r1, [r1, #4]
 8007600:	9a06      	ldr	r2, [sp, #24]
 8007602:	9b07      	ldr	r3, [sp, #28]
 8007604:	f7f8 ff32 	bl	800046c <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	d046      	beq.n	800769a <_dtoa_r+0x1fe>
 800760c:	2300      	movs	r3, #0
 800760e:	3f01      	subs	r7, #1
 8007610:	9314      	str	r3, [sp, #80]	; 0x50
 8007612:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007614:	1b9e      	subs	r6, r3, r6
 8007616:	2300      	movs	r3, #0
 8007618:	930a      	str	r3, [sp, #40]	; 0x28
 800761a:	0033      	movs	r3, r6
 800761c:	3b01      	subs	r3, #1
 800761e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007620:	d504      	bpl.n	800762c <_dtoa_r+0x190>
 8007622:	2301      	movs	r3, #1
 8007624:	1b9b      	subs	r3, r3, r6
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	2300      	movs	r3, #0
 800762a:	930b      	str	r3, [sp, #44]	; 0x2c
 800762c:	2f00      	cmp	r7, #0
 800762e:	db36      	blt.n	800769e <_dtoa_r+0x202>
 8007630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007632:	9711      	str	r7, [sp, #68]	; 0x44
 8007634:	19db      	adds	r3, r3, r7
 8007636:	930b      	str	r3, [sp, #44]	; 0x2c
 8007638:	2300      	movs	r3, #0
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800763e:	2401      	movs	r4, #1
 8007640:	2b09      	cmp	r3, #9
 8007642:	d900      	bls.n	8007646 <_dtoa_r+0x1aa>
 8007644:	e084      	b.n	8007750 <_dtoa_r+0x2b4>
 8007646:	2b05      	cmp	r3, #5
 8007648:	dd02      	ble.n	8007650 <_dtoa_r+0x1b4>
 800764a:	2400      	movs	r4, #0
 800764c:	3b04      	subs	r3, #4
 800764e:	9320      	str	r3, [sp, #128]	; 0x80
 8007650:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007652:	1e98      	subs	r0, r3, #2
 8007654:	2803      	cmp	r0, #3
 8007656:	d900      	bls.n	800765a <_dtoa_r+0x1be>
 8007658:	e084      	b.n	8007764 <_dtoa_r+0x2c8>
 800765a:	f7f8 fd5d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800765e:	7775      	.short	0x7775
 8007660:	6a28      	.short	0x6a28
 8007662:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007664:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007666:	189e      	adds	r6, r3, r2
 8007668:	4b65      	ldr	r3, [pc, #404]	; (8007800 <_dtoa_r+0x364>)
 800766a:	18f2      	adds	r2, r6, r3
 800766c:	2a20      	cmp	r2, #32
 800766e:	dd0f      	ble.n	8007690 <_dtoa_r+0x1f4>
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	409c      	lsls	r4, r3
 8007676:	4b63      	ldr	r3, [pc, #396]	; (8007804 <_dtoa_r+0x368>)
 8007678:	9806      	ldr	r0, [sp, #24]
 800767a:	18f3      	adds	r3, r6, r3
 800767c:	40d8      	lsrs	r0, r3
 800767e:	4320      	orrs	r0, r4
 8007680:	f7fa fc74 	bl	8001f6c <__aeabi_ui2d>
 8007684:	2301      	movs	r3, #1
 8007686:	4c60      	ldr	r4, [pc, #384]	; (8007808 <_dtoa_r+0x36c>)
 8007688:	3e01      	subs	r6, #1
 800768a:	1909      	adds	r1, r1, r4
 800768c:	9316      	str	r3, [sp, #88]	; 0x58
 800768e:	e77c      	b.n	800758a <_dtoa_r+0xee>
 8007690:	2320      	movs	r3, #32
 8007692:	9806      	ldr	r0, [sp, #24]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	4098      	lsls	r0, r3
 8007698:	e7f2      	b.n	8007680 <_dtoa_r+0x1e4>
 800769a:	9014      	str	r0, [sp, #80]	; 0x50
 800769c:	e7b9      	b.n	8007612 <_dtoa_r+0x176>
 800769e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a0:	1bdb      	subs	r3, r3, r7
 80076a2:	930a      	str	r3, [sp, #40]	; 0x28
 80076a4:	427b      	negs	r3, r7
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9311      	str	r3, [sp, #68]	; 0x44
 80076ac:	e7c6      	b.n	800763c <_dtoa_r+0x1a0>
 80076ae:	2301      	movs	r3, #1
 80076b0:	930d      	str	r3, [sp, #52]	; 0x34
 80076b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd59      	ble.n	800776c <_dtoa_r+0x2d0>
 80076b8:	930c      	str	r3, [sp, #48]	; 0x30
 80076ba:	9309      	str	r3, [sp, #36]	; 0x24
 80076bc:	9a02      	ldr	r2, [sp, #8]
 80076be:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80076c0:	2200      	movs	r2, #0
 80076c2:	606a      	str	r2, [r5, #4]
 80076c4:	3204      	adds	r2, #4
 80076c6:	0010      	movs	r0, r2
 80076c8:	3014      	adds	r0, #20
 80076ca:	6869      	ldr	r1, [r5, #4]
 80076cc:	4298      	cmp	r0, r3
 80076ce:	d952      	bls.n	8007776 <_dtoa_r+0x2da>
 80076d0:	9802      	ldr	r0, [sp, #8]
 80076d2:	f000 fce4 	bl	800809e <_Balloc>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	6028      	str	r0, [r5, #0]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	9308      	str	r3, [sp, #32]
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	2b0e      	cmp	r3, #14
 80076e4:	d900      	bls.n	80076e8 <_dtoa_r+0x24c>
 80076e6:	e10a      	b.n	80078fe <_dtoa_r+0x462>
 80076e8:	2c00      	cmp	r4, #0
 80076ea:	d100      	bne.n	80076ee <_dtoa_r+0x252>
 80076ec:	e107      	b.n	80078fe <_dtoa_r+0x462>
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	9c07      	ldr	r4, [sp, #28]
 80076f2:	9312      	str	r3, [sp, #72]	; 0x48
 80076f4:	9413      	str	r4, [sp, #76]	; 0x4c
 80076f6:	2f00      	cmp	r7, #0
 80076f8:	dc00      	bgt.n	80076fc <_dtoa_r+0x260>
 80076fa:	e089      	b.n	8007810 <_dtoa_r+0x374>
 80076fc:	210f      	movs	r1, #15
 80076fe:	003a      	movs	r2, r7
 8007700:	4b3e      	ldr	r3, [pc, #248]	; (80077fc <_dtoa_r+0x360>)
 8007702:	400a      	ands	r2, r1
 8007704:	00d2      	lsls	r2, r2, #3
 8007706:	189b      	adds	r3, r3, r2
 8007708:	681d      	ldr	r5, [r3, #0]
 800770a:	685e      	ldr	r6, [r3, #4]
 800770c:	2302      	movs	r3, #2
 800770e:	113c      	asrs	r4, r7, #4
 8007710:	930e      	str	r3, [sp, #56]	; 0x38
 8007712:	06e3      	lsls	r3, r4, #27
 8007714:	d50b      	bpl.n	800772e <_dtoa_r+0x292>
 8007716:	4b3d      	ldr	r3, [pc, #244]	; (800780c <_dtoa_r+0x370>)
 8007718:	400c      	ands	r4, r1
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007720:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007722:	f7f9 f9d3 	bl	8000acc <__aeabi_ddiv>
 8007726:	2303      	movs	r3, #3
 8007728:	9006      	str	r0, [sp, #24]
 800772a:	9107      	str	r1, [sp, #28]
 800772c:	930e      	str	r3, [sp, #56]	; 0x38
 800772e:	2300      	movs	r3, #0
 8007730:	e03a      	b.n	80077a8 <_dtoa_r+0x30c>
 8007732:	2301      	movs	r3, #1
 8007734:	930d      	str	r3, [sp, #52]	; 0x34
 8007736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	930c      	str	r3, [sp, #48]	; 0x30
 800773c:	3301      	adds	r3, #1
 800773e:	9309      	str	r3, [sp, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	dcbb      	bgt.n	80076bc <_dtoa_r+0x220>
 8007744:	2301      	movs	r3, #1
 8007746:	e7b9      	b.n	80076bc <_dtoa_r+0x220>
 8007748:	2300      	movs	r3, #0
 800774a:	e7b1      	b.n	80076b0 <_dtoa_r+0x214>
 800774c:	2300      	movs	r3, #0
 800774e:	e7f1      	b.n	8007734 <_dtoa_r+0x298>
 8007750:	2300      	movs	r3, #0
 8007752:	940d      	str	r4, [sp, #52]	; 0x34
 8007754:	9320      	str	r3, [sp, #128]	; 0x80
 8007756:	3b01      	subs	r3, #1
 8007758:	2200      	movs	r2, #0
 800775a:	930c      	str	r3, [sp, #48]	; 0x30
 800775c:	9309      	str	r3, [sp, #36]	; 0x24
 800775e:	3313      	adds	r3, #19
 8007760:	9221      	str	r2, [sp, #132]	; 0x84
 8007762:	e7ab      	b.n	80076bc <_dtoa_r+0x220>
 8007764:	2301      	movs	r3, #1
 8007766:	930d      	str	r3, [sp, #52]	; 0x34
 8007768:	3b02      	subs	r3, #2
 800776a:	e7f5      	b.n	8007758 <_dtoa_r+0x2bc>
 800776c:	2301      	movs	r3, #1
 800776e:	930c      	str	r3, [sp, #48]	; 0x30
 8007770:	9309      	str	r3, [sp, #36]	; 0x24
 8007772:	001a      	movs	r2, r3
 8007774:	e7f4      	b.n	8007760 <_dtoa_r+0x2c4>
 8007776:	3101      	adds	r1, #1
 8007778:	6069      	str	r1, [r5, #4]
 800777a:	0052      	lsls	r2, r2, #1
 800777c:	e7a3      	b.n	80076c6 <_dtoa_r+0x22a>
 800777e:	2301      	movs	r3, #1
 8007780:	421c      	tst	r4, r3
 8007782:	d00e      	beq.n	80077a2 <_dtoa_r+0x306>
 8007784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007786:	4a21      	ldr	r2, [pc, #132]	; (800780c <_dtoa_r+0x370>)
 8007788:	3301      	adds	r3, #1
 800778a:	930e      	str	r3, [sp, #56]	; 0x38
 800778c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800778e:	0028      	movs	r0, r5
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	189b      	adds	r3, r3, r2
 8007794:	0031      	movs	r1, r6
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f7f9 fda1 	bl	80012e0 <__aeabi_dmul>
 800779e:	0005      	movs	r5, r0
 80077a0:	000e      	movs	r6, r1
 80077a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077a4:	1064      	asrs	r4, r4, #1
 80077a6:	3301      	adds	r3, #1
 80077a8:	9310      	str	r3, [sp, #64]	; 0x40
 80077aa:	2c00      	cmp	r4, #0
 80077ac:	d1e7      	bne.n	800777e <_dtoa_r+0x2e2>
 80077ae:	9806      	ldr	r0, [sp, #24]
 80077b0:	9907      	ldr	r1, [sp, #28]
 80077b2:	002a      	movs	r2, r5
 80077b4:	0033      	movs	r3, r6
 80077b6:	f7f9 f989 	bl	8000acc <__aeabi_ddiv>
 80077ba:	9006      	str	r0, [sp, #24]
 80077bc:	9107      	str	r1, [sp, #28]
 80077be:	e042      	b.n	8007846 <_dtoa_r+0x3aa>
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	0000270f 	.word	0x0000270f
 80077c8:	08008f31 	.word	0x08008f31
 80077cc:	08008f34 	.word	0x08008f34
 80077d0:	08008f04 	.word	0x08008f04
 80077d4:	08008f05 	.word	0x08008f05
 80077d8:	3ff00000 	.word	0x3ff00000
 80077dc:	fffffc01 	.word	0xfffffc01
 80077e0:	3ff80000 	.word	0x3ff80000
 80077e4:	636f4361 	.word	0x636f4361
 80077e8:	3fd287a7 	.word	0x3fd287a7
 80077ec:	8b60c8b3 	.word	0x8b60c8b3
 80077f0:	3fc68a28 	.word	0x3fc68a28
 80077f4:	509f79fb 	.word	0x509f79fb
 80077f8:	3fd34413 	.word	0x3fd34413
 80077fc:	08008f60 	.word	0x08008f60
 8007800:	00000432 	.word	0x00000432
 8007804:	00000412 	.word	0x00000412
 8007808:	fe100000 	.word	0xfe100000
 800780c:	08008f38 	.word	0x08008f38
 8007810:	2302      	movs	r3, #2
 8007812:	930e      	str	r3, [sp, #56]	; 0x38
 8007814:	2f00      	cmp	r7, #0
 8007816:	d016      	beq.n	8007846 <_dtoa_r+0x3aa>
 8007818:	9812      	ldr	r0, [sp, #72]	; 0x48
 800781a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800781c:	427c      	negs	r4, r7
 800781e:	330d      	adds	r3, #13
 8007820:	4023      	ands	r3, r4
 8007822:	4ace      	ldr	r2, [pc, #824]	; (8007b5c <_dtoa_r+0x6c0>)
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	18d3      	adds	r3, r2, r3
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f7f9 fd58 	bl	80012e0 <__aeabi_dmul>
 8007830:	2300      	movs	r3, #0
 8007832:	2601      	movs	r6, #1
 8007834:	001d      	movs	r5, r3
 8007836:	9006      	str	r0, [sp, #24]
 8007838:	9107      	str	r1, [sp, #28]
 800783a:	1124      	asrs	r4, r4, #4
 800783c:	2c00      	cmp	r4, #0
 800783e:	d000      	beq.n	8007842 <_dtoa_r+0x3a6>
 8007840:	e08c      	b.n	800795c <_dtoa_r+0x4c0>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1b9      	bne.n	80077ba <_dtoa_r+0x31e>
 8007846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007848:	2b00      	cmp	r3, #0
 800784a:	d100      	bne.n	800784e <_dtoa_r+0x3b2>
 800784c:	e096      	b.n	800797c <_dtoa_r+0x4e0>
 800784e:	9c06      	ldr	r4, [sp, #24]
 8007850:	9d07      	ldr	r5, [sp, #28]
 8007852:	2200      	movs	r2, #0
 8007854:	4bc2      	ldr	r3, [pc, #776]	; (8007b60 <_dtoa_r+0x6c4>)
 8007856:	0020      	movs	r0, r4
 8007858:	0029      	movs	r1, r5
 800785a:	f7f8 fdf3 	bl	8000444 <__aeabi_dcmplt>
 800785e:	2800      	cmp	r0, #0
 8007860:	d100      	bne.n	8007864 <_dtoa_r+0x3c8>
 8007862:	e08b      	b.n	800797c <_dtoa_r+0x4e0>
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d100      	bne.n	800786c <_dtoa_r+0x3d0>
 800786a:	e087      	b.n	800797c <_dtoa_r+0x4e0>
 800786c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800786e:	2b00      	cmp	r3, #0
 8007870:	dd41      	ble.n	80078f6 <_dtoa_r+0x45a>
 8007872:	4bbc      	ldr	r3, [pc, #752]	; (8007b64 <_dtoa_r+0x6c8>)
 8007874:	2200      	movs	r2, #0
 8007876:	0020      	movs	r0, r4
 8007878:	0029      	movs	r1, r5
 800787a:	f7f9 fd31 	bl	80012e0 <__aeabi_dmul>
 800787e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007880:	9006      	str	r0, [sp, #24]
 8007882:	9107      	str	r1, [sp, #28]
 8007884:	3301      	adds	r3, #1
 8007886:	930e      	str	r3, [sp, #56]	; 0x38
 8007888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800788a:	1e7e      	subs	r6, r7, #1
 800788c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800788e:	9310      	str	r3, [sp, #64]	; 0x40
 8007890:	f7fa fb32 	bl	8001ef8 <__aeabi_i2d>
 8007894:	9a06      	ldr	r2, [sp, #24]
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	f7f9 fd22 	bl	80012e0 <__aeabi_dmul>
 800789c:	2200      	movs	r2, #0
 800789e:	4bb2      	ldr	r3, [pc, #712]	; (8007b68 <_dtoa_r+0x6cc>)
 80078a0:	f7f8 fdf8 	bl	8000494 <__aeabi_dadd>
 80078a4:	4ab1      	ldr	r2, [pc, #708]	; (8007b6c <_dtoa_r+0x6d0>)
 80078a6:	900e      	str	r0, [sp, #56]	; 0x38
 80078a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80078aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80078ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078ae:	4694      	mov	ip, r2
 80078b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b2:	4463      	add	r3, ip
 80078b4:	9315      	str	r3, [sp, #84]	; 0x54
 80078b6:	001d      	movs	r5, r3
 80078b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d161      	bne.n	8007982 <_dtoa_r+0x4e6>
 80078be:	9806      	ldr	r0, [sp, #24]
 80078c0:	9907      	ldr	r1, [sp, #28]
 80078c2:	2200      	movs	r2, #0
 80078c4:	4baa      	ldr	r3, [pc, #680]	; (8007b70 <_dtoa_r+0x6d4>)
 80078c6:	f7f9 ff7d 	bl	80017c4 <__aeabi_dsub>
 80078ca:	0022      	movs	r2, r4
 80078cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ce:	9006      	str	r0, [sp, #24]
 80078d0:	9107      	str	r1, [sp, #28]
 80078d2:	f7f8 fdcb 	bl	800046c <__aeabi_dcmpgt>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d000      	beq.n	80078dc <_dtoa_r+0x440>
 80078da:	e2a8      	b.n	8007e2e <_dtoa_r+0x992>
 80078dc:	48a5      	ldr	r0, [pc, #660]	; (8007b74 <_dtoa_r+0x6d8>)
 80078de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078e0:	4684      	mov	ip, r0
 80078e2:	4461      	add	r1, ip
 80078e4:	000b      	movs	r3, r1
 80078e6:	9806      	ldr	r0, [sp, #24]
 80078e8:	9907      	ldr	r1, [sp, #28]
 80078ea:	0022      	movs	r2, r4
 80078ec:	f7f8 fdaa 	bl	8000444 <__aeabi_dcmplt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d000      	beq.n	80078f6 <_dtoa_r+0x45a>
 80078f4:	e295      	b.n	8007e22 <_dtoa_r+0x986>
 80078f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80078fa:	9306      	str	r3, [sp, #24]
 80078fc:	9407      	str	r4, [sp, #28]
 80078fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007900:	2b00      	cmp	r3, #0
 8007902:	da00      	bge.n	8007906 <_dtoa_r+0x46a>
 8007904:	e15c      	b.n	8007bc0 <_dtoa_r+0x724>
 8007906:	2f0e      	cmp	r7, #14
 8007908:	dd00      	ble.n	800790c <_dtoa_r+0x470>
 800790a:	e159      	b.n	8007bc0 <_dtoa_r+0x724>
 800790c:	4b93      	ldr	r3, [pc, #588]	; (8007b5c <_dtoa_r+0x6c0>)
 800790e:	00fa      	lsls	r2, r7, #3
 8007910:	189b      	adds	r3, r3, r2
 8007912:	685c      	ldr	r4, [r3, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	9405      	str	r4, [sp, #20]
 800791a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800791c:	2b00      	cmp	r3, #0
 800791e:	db00      	blt.n	8007922 <_dtoa_r+0x486>
 8007920:	e0d8      	b.n	8007ad4 <_dtoa_r+0x638>
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd00      	ble.n	800792a <_dtoa_r+0x48e>
 8007928:	e0d4      	b.n	8007ad4 <_dtoa_r+0x638>
 800792a:	d000      	beq.n	800792e <_dtoa_r+0x492>
 800792c:	e27d      	b.n	8007e2a <_dtoa_r+0x98e>
 800792e:	9804      	ldr	r0, [sp, #16]
 8007930:	9905      	ldr	r1, [sp, #20]
 8007932:	2200      	movs	r2, #0
 8007934:	4b8e      	ldr	r3, [pc, #568]	; (8007b70 <_dtoa_r+0x6d4>)
 8007936:	f7f9 fcd3 	bl	80012e0 <__aeabi_dmul>
 800793a:	9a06      	ldr	r2, [sp, #24]
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	f7f8 fd9f 	bl	8000480 <__aeabi_dcmpge>
 8007942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	001e      	movs	r6, r3
 8007948:	2800      	cmp	r0, #0
 800794a:	d000      	beq.n	800794e <_dtoa_r+0x4b2>
 800794c:	e24f      	b.n	8007dee <_dtoa_r+0x952>
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	9a08      	ldr	r2, [sp, #32]
 8007952:	1c5d      	adds	r5, r3, #1
 8007954:	2331      	movs	r3, #49	; 0x31
 8007956:	3701      	adds	r7, #1
 8007958:	7013      	strb	r3, [r2, #0]
 800795a:	e24b      	b.n	8007df4 <_dtoa_r+0x958>
 800795c:	4234      	tst	r4, r6
 800795e:	d00a      	beq.n	8007976 <_dtoa_r+0x4da>
 8007960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007962:	4a85      	ldr	r2, [pc, #532]	; (8007b78 <_dtoa_r+0x6dc>)
 8007964:	3301      	adds	r3, #1
 8007966:	930e      	str	r3, [sp, #56]	; 0x38
 8007968:	00eb      	lsls	r3, r5, #3
 800796a:	189b      	adds	r3, r3, r2
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f7f9 fcb6 	bl	80012e0 <__aeabi_dmul>
 8007974:	0033      	movs	r3, r6
 8007976:	1064      	asrs	r4, r4, #1
 8007978:	3501      	adds	r5, #1
 800797a:	e75f      	b.n	800783c <_dtoa_r+0x3a0>
 800797c:	003e      	movs	r6, r7
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	e784      	b.n	800788c <_dtoa_r+0x3f0>
 8007982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007984:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007986:	1e5a      	subs	r2, r3, #1
 8007988:	4b74      	ldr	r3, [pc, #464]	; (8007b5c <_dtoa_r+0x6c0>)
 800798a:	00d2      	lsls	r2, r2, #3
 800798c:	189b      	adds	r3, r3, r2
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2900      	cmp	r1, #0
 8007994:	d049      	beq.n	8007a2a <_dtoa_r+0x58e>
 8007996:	2000      	movs	r0, #0
 8007998:	4978      	ldr	r1, [pc, #480]	; (8007b7c <_dtoa_r+0x6e0>)
 800799a:	f7f9 f897 	bl	8000acc <__aeabi_ddiv>
 800799e:	002b      	movs	r3, r5
 80079a0:	0022      	movs	r2, r4
 80079a2:	f7f9 ff0f 	bl	80017c4 <__aeabi_dsub>
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	900e      	str	r0, [sp, #56]	; 0x38
 80079aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80079ac:	9315      	str	r3, [sp, #84]	; 0x54
 80079ae:	9806      	ldr	r0, [sp, #24]
 80079b0:	9907      	ldr	r1, [sp, #28]
 80079b2:	f7fa fa6b 	bl	8001e8c <__aeabi_d2iz>
 80079b6:	0004      	movs	r4, r0
 80079b8:	f7fa fa9e 	bl	8001ef8 <__aeabi_i2d>
 80079bc:	0002      	movs	r2, r0
 80079be:	000b      	movs	r3, r1
 80079c0:	9806      	ldr	r0, [sp, #24]
 80079c2:	9907      	ldr	r1, [sp, #28]
 80079c4:	f7f9 fefe 	bl	80017c4 <__aeabi_dsub>
 80079c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ca:	3430      	adds	r4, #48	; 0x30
 80079cc:	1c5d      	adds	r5, r3, #1
 80079ce:	701c      	strb	r4, [r3, #0]
 80079d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079d4:	9006      	str	r0, [sp, #24]
 80079d6:	9107      	str	r1, [sp, #28]
 80079d8:	f7f8 fd34 	bl	8000444 <__aeabi_dcmplt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d16c      	bne.n	8007aba <_dtoa_r+0x61e>
 80079e0:	9a06      	ldr	r2, [sp, #24]
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	2000      	movs	r0, #0
 80079e6:	495e      	ldr	r1, [pc, #376]	; (8007b60 <_dtoa_r+0x6c4>)
 80079e8:	f7f9 feec 	bl	80017c4 <__aeabi_dsub>
 80079ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f0:	f7f8 fd28 	bl	8000444 <__aeabi_dcmplt>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d000      	beq.n	80079fa <_dtoa_r+0x55e>
 80079f8:	e0c3      	b.n	8007b82 <_dtoa_r+0x6e6>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079fe:	1aeb      	subs	r3, r5, r3
 8007a00:	429a      	cmp	r2, r3
 8007a02:	dc00      	bgt.n	8007a06 <_dtoa_r+0x56a>
 8007a04:	e777      	b.n	80078f6 <_dtoa_r+0x45a>
 8007a06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4b55      	ldr	r3, [pc, #340]	; (8007b64 <_dtoa_r+0x6c8>)
 8007a0e:	f7f9 fc67 	bl	80012e0 <__aeabi_dmul>
 8007a12:	2200      	movs	r2, #0
 8007a14:	900e      	str	r0, [sp, #56]	; 0x38
 8007a16:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a18:	9806      	ldr	r0, [sp, #24]
 8007a1a:	9907      	ldr	r1, [sp, #28]
 8007a1c:	4b51      	ldr	r3, [pc, #324]	; (8007b64 <_dtoa_r+0x6c8>)
 8007a1e:	f7f9 fc5f 	bl	80012e0 <__aeabi_dmul>
 8007a22:	9515      	str	r5, [sp, #84]	; 0x54
 8007a24:	9006      	str	r0, [sp, #24]
 8007a26:	9107      	str	r1, [sp, #28]
 8007a28:	e7c1      	b.n	80079ae <_dtoa_r+0x512>
 8007a2a:	0020      	movs	r0, r4
 8007a2c:	0029      	movs	r1, r5
 8007a2e:	f7f9 fc57 	bl	80012e0 <__aeabi_dmul>
 8007a32:	9c08      	ldr	r4, [sp, #32]
 8007a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a36:	0023      	movs	r3, r4
 8007a38:	4694      	mov	ip, r2
 8007a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a3e:	4463      	add	r3, ip
 8007a40:	9315      	str	r3, [sp, #84]	; 0x54
 8007a42:	9806      	ldr	r0, [sp, #24]
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	f7fa fa21 	bl	8001e8c <__aeabi_d2iz>
 8007a4a:	0005      	movs	r5, r0
 8007a4c:	f7fa fa54 	bl	8001ef8 <__aeabi_i2d>
 8007a50:	000b      	movs	r3, r1
 8007a52:	0002      	movs	r2, r0
 8007a54:	9806      	ldr	r0, [sp, #24]
 8007a56:	9907      	ldr	r1, [sp, #28]
 8007a58:	f7f9 feb4 	bl	80017c4 <__aeabi_dsub>
 8007a5c:	3530      	adds	r5, #48	; 0x30
 8007a5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a60:	7025      	strb	r5, [r4, #0]
 8007a62:	3401      	adds	r4, #1
 8007a64:	9006      	str	r0, [sp, #24]
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	d12a      	bne.n	8007ac2 <_dtoa_r+0x626>
 8007a6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a74:	4694      	mov	ip, r2
 8007a76:	4463      	add	r3, ip
 8007a78:	2200      	movs	r2, #0
 8007a7a:	001d      	movs	r5, r3
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <_dtoa_r+0x6e0>)
 8007a7e:	f7f8 fd09 	bl	8000494 <__aeabi_dadd>
 8007a82:	0002      	movs	r2, r0
 8007a84:	000b      	movs	r3, r1
 8007a86:	9806      	ldr	r0, [sp, #24]
 8007a88:	9907      	ldr	r1, [sp, #28]
 8007a8a:	f7f8 fcef 	bl	800046c <__aeabi_dcmpgt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d000      	beq.n	8007a94 <_dtoa_r+0x5f8>
 8007a92:	e076      	b.n	8007b82 <_dtoa_r+0x6e6>
 8007a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a98:	2000      	movs	r0, #0
 8007a9a:	4938      	ldr	r1, [pc, #224]	; (8007b7c <_dtoa_r+0x6e0>)
 8007a9c:	f7f9 fe92 	bl	80017c4 <__aeabi_dsub>
 8007aa0:	0002      	movs	r2, r0
 8007aa2:	000b      	movs	r3, r1
 8007aa4:	9806      	ldr	r0, [sp, #24]
 8007aa6:	9907      	ldr	r1, [sp, #28]
 8007aa8:	f7f8 fccc 	bl	8000444 <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d100      	bne.n	8007ab2 <_dtoa_r+0x616>
 8007ab0:	e721      	b.n	80078f6 <_dtoa_r+0x45a>
 8007ab2:	1e6b      	subs	r3, r5, #1
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	2a30      	cmp	r2, #48	; 0x30
 8007ab8:	d001      	beq.n	8007abe <_dtoa_r+0x622>
 8007aba:	0037      	movs	r7, r6
 8007abc:	e03f      	b.n	8007b3e <_dtoa_r+0x6a2>
 8007abe:	001d      	movs	r5, r3
 8007ac0:	e7f7      	b.n	8007ab2 <_dtoa_r+0x616>
 8007ac2:	9806      	ldr	r0, [sp, #24]
 8007ac4:	9907      	ldr	r1, [sp, #28]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4b26      	ldr	r3, [pc, #152]	; (8007b64 <_dtoa_r+0x6c8>)
 8007aca:	f7f9 fc09 	bl	80012e0 <__aeabi_dmul>
 8007ace:	9006      	str	r0, [sp, #24]
 8007ad0:	9107      	str	r1, [sp, #28]
 8007ad2:	e7b6      	b.n	8007a42 <_dtoa_r+0x5a6>
 8007ad4:	9e08      	ldr	r6, [sp, #32]
 8007ad6:	9a04      	ldr	r2, [sp, #16]
 8007ad8:	9b05      	ldr	r3, [sp, #20]
 8007ada:	9806      	ldr	r0, [sp, #24]
 8007adc:	9907      	ldr	r1, [sp, #28]
 8007ade:	f7f8 fff5 	bl	8000acc <__aeabi_ddiv>
 8007ae2:	f7fa f9d3 	bl	8001e8c <__aeabi_d2iz>
 8007ae6:	0004      	movs	r4, r0
 8007ae8:	f7fa fa06 	bl	8001ef8 <__aeabi_i2d>
 8007aec:	9a04      	ldr	r2, [sp, #16]
 8007aee:	9b05      	ldr	r3, [sp, #20]
 8007af0:	f7f9 fbf6 	bl	80012e0 <__aeabi_dmul>
 8007af4:	0002      	movs	r2, r0
 8007af6:	000b      	movs	r3, r1
 8007af8:	9806      	ldr	r0, [sp, #24]
 8007afa:	9907      	ldr	r1, [sp, #28]
 8007afc:	f7f9 fe62 	bl	80017c4 <__aeabi_dsub>
 8007b00:	0023      	movs	r3, r4
 8007b02:	3330      	adds	r3, #48	; 0x30
 8007b04:	7033      	strb	r3, [r6, #0]
 8007b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	1c75      	adds	r5, r6, #1
 8007b0c:	1aeb      	subs	r3, r5, r3
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d148      	bne.n	8007ba4 <_dtoa_r+0x708>
 8007b12:	0002      	movs	r2, r0
 8007b14:	000b      	movs	r3, r1
 8007b16:	f7f8 fcbd 	bl	8000494 <__aeabi_dadd>
 8007b1a:	9a04      	ldr	r2, [sp, #16]
 8007b1c:	9b05      	ldr	r3, [sp, #20]
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	9107      	str	r1, [sp, #28]
 8007b22:	f7f8 fca3 	bl	800046c <__aeabi_dcmpgt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d12a      	bne.n	8007b80 <_dtoa_r+0x6e4>
 8007b2a:	9a04      	ldr	r2, [sp, #16]
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	9806      	ldr	r0, [sp, #24]
 8007b30:	9907      	ldr	r1, [sp, #28]
 8007b32:	f7f8 fc81 	bl	8000438 <__aeabi_dcmpeq>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d001      	beq.n	8007b3e <_dtoa_r+0x6a2>
 8007b3a:	07e3      	lsls	r3, r4, #31
 8007b3c:	d420      	bmi.n	8007b80 <_dtoa_r+0x6e4>
 8007b3e:	9903      	ldr	r1, [sp, #12]
 8007b40:	9802      	ldr	r0, [sp, #8]
 8007b42:	f000 fae4 	bl	800810e <_Bfree>
 8007b46:	2300      	movs	r3, #0
 8007b48:	702b      	strb	r3, [r5, #0]
 8007b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b4c:	3701      	adds	r7, #1
 8007b4e:	601f      	str	r7, [r3, #0]
 8007b50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d100      	bne.n	8007b58 <_dtoa_r+0x6bc>
 8007b56:	e4e6      	b.n	8007526 <_dtoa_r+0x8a>
 8007b58:	601d      	str	r5, [r3, #0]
 8007b5a:	e4e4      	b.n	8007526 <_dtoa_r+0x8a>
 8007b5c:	08008f60 	.word	0x08008f60
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	40240000 	.word	0x40240000
 8007b68:	401c0000 	.word	0x401c0000
 8007b6c:	fcc00000 	.word	0xfcc00000
 8007b70:	40140000 	.word	0x40140000
 8007b74:	7cc00000 	.word	0x7cc00000
 8007b78:	08008f38 	.word	0x08008f38
 8007b7c:	3fe00000 	.word	0x3fe00000
 8007b80:	003e      	movs	r6, r7
 8007b82:	1e6b      	subs	r3, r5, #1
 8007b84:	781a      	ldrb	r2, [r3, #0]
 8007b86:	2a39      	cmp	r2, #57	; 0x39
 8007b88:	d106      	bne.n	8007b98 <_dtoa_r+0x6fc>
 8007b8a:	9a08      	ldr	r2, [sp, #32]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d107      	bne.n	8007ba0 <_dtoa_r+0x704>
 8007b90:	2330      	movs	r3, #48	; 0x30
 8007b92:	7013      	strb	r3, [r2, #0]
 8007b94:	0013      	movs	r3, r2
 8007b96:	3601      	adds	r6, #1
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e78c      	b.n	8007aba <_dtoa_r+0x61e>
 8007ba0:	001d      	movs	r5, r3
 8007ba2:	e7ee      	b.n	8007b82 <_dtoa_r+0x6e6>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4ba4      	ldr	r3, [pc, #656]	; (8007e38 <_dtoa_r+0x99c>)
 8007ba8:	f7f9 fb9a 	bl	80012e0 <__aeabi_dmul>
 8007bac:	2200      	movs	r2, #0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9006      	str	r0, [sp, #24]
 8007bb2:	9107      	str	r1, [sp, #28]
 8007bb4:	002e      	movs	r6, r5
 8007bb6:	f7f8 fc3f 	bl	8000438 <__aeabi_dcmpeq>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d08b      	beq.n	8007ad6 <_dtoa_r+0x63a>
 8007bbe:	e7be      	b.n	8007b3e <_dtoa_r+0x6a2>
 8007bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d100      	bne.n	8007bc8 <_dtoa_r+0x72c>
 8007bc6:	e0da      	b.n	8007d7e <_dtoa_r+0x8e2>
 8007bc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bca:	2a01      	cmp	r2, #1
 8007bcc:	dd00      	ble.n	8007bd0 <_dtoa_r+0x734>
 8007bce:	e0bd      	b.n	8007d4c <_dtoa_r+0x8b0>
 8007bd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	d100      	bne.n	8007bd8 <_dtoa_r+0x73c>
 8007bd6:	e0b5      	b.n	8007d44 <_dtoa_r+0x8a8>
 8007bd8:	4a98      	ldr	r2, [pc, #608]	; (8007e3c <_dtoa_r+0x9a0>)
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	9d04      	ldr	r5, [sp, #16]
 8007bde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be2:	2101      	movs	r1, #1
 8007be4:	18d2      	adds	r2, r2, r3
 8007be6:	920a      	str	r2, [sp, #40]	; 0x28
 8007be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bea:	9802      	ldr	r0, [sp, #8]
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf0:	f000 fb2d 	bl	800824e <__i2b>
 8007bf4:	0006      	movs	r6, r0
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	dd0e      	ble.n	8007c18 <_dtoa_r+0x77c>
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd0b      	ble.n	8007c18 <_dtoa_r+0x77c>
 8007c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c02:	0023      	movs	r3, r4
 8007c04:	4294      	cmp	r4, r2
 8007c06:	dd00      	ble.n	8007c0a <_dtoa_r+0x76e>
 8007c08:	0013      	movs	r3, r2
 8007c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0c:	1ae4      	subs	r4, r4, r3
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	920a      	str	r2, [sp, #40]	; 0x28
 8007c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01f      	beq.n	8007c5e <_dtoa_r+0x7c2>
 8007c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d100      	bne.n	8007c26 <_dtoa_r+0x78a>
 8007c24:	e0af      	b.n	8007d86 <_dtoa_r+0x8ea>
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d011      	beq.n	8007c4e <_dtoa_r+0x7b2>
 8007c2a:	0031      	movs	r1, r6
 8007c2c:	002a      	movs	r2, r5
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	f000 fba6 	bl	8008380 <__pow5mult>
 8007c34:	9a03      	ldr	r2, [sp, #12]
 8007c36:	0001      	movs	r1, r0
 8007c38:	0006      	movs	r6, r0
 8007c3a:	9802      	ldr	r0, [sp, #8]
 8007c3c:	f000 fb10 	bl	8008260 <__multiply>
 8007c40:	9903      	ldr	r1, [sp, #12]
 8007c42:	9010      	str	r0, [sp, #64]	; 0x40
 8007c44:	9802      	ldr	r0, [sp, #8]
 8007c46:	f000 fa62 	bl	800810e <_Bfree>
 8007c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	1b5a      	subs	r2, r3, r5
 8007c52:	d004      	beq.n	8007c5e <_dtoa_r+0x7c2>
 8007c54:	9903      	ldr	r1, [sp, #12]
 8007c56:	9802      	ldr	r0, [sp, #8]
 8007c58:	f000 fb92 	bl	8008380 <__pow5mult>
 8007c5c:	9003      	str	r0, [sp, #12]
 8007c5e:	2101      	movs	r1, #1
 8007c60:	9802      	ldr	r0, [sp, #8]
 8007c62:	f000 faf4 	bl	800824e <__i2b>
 8007c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c68:	9004      	str	r0, [sp, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d100      	bne.n	8007c70 <_dtoa_r+0x7d4>
 8007c6e:	e1e3      	b.n	8008038 <_dtoa_r+0xb9c>
 8007c70:	001a      	movs	r2, r3
 8007c72:	0001      	movs	r1, r0
 8007c74:	9802      	ldr	r0, [sp, #8]
 8007c76:	f000 fb83 	bl	8008380 <__pow5mult>
 8007c7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c7c:	9004      	str	r0, [sp, #16]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	dd00      	ble.n	8007c84 <_dtoa_r+0x7e8>
 8007c82:	e082      	b.n	8007d8a <_dtoa_r+0x8ee>
 8007c84:	2500      	movs	r5, #0
 8007c86:	9b06      	ldr	r3, [sp, #24]
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	d10e      	bne.n	8007caa <_dtoa_r+0x80e>
 8007c8c:	9b07      	ldr	r3, [sp, #28]
 8007c8e:	031b      	lsls	r3, r3, #12
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	d10a      	bne.n	8007caa <_dtoa_r+0x80e>
 8007c94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c96:	9a07      	ldr	r2, [sp, #28]
 8007c98:	4213      	tst	r3, r2
 8007c9a:	d006      	beq.n	8007caa <_dtoa_r+0x80e>
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	3501      	adds	r5, #1
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cac:	2001      	movs	r0, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d16c      	bne.n	8007d8c <_dtoa_r+0x8f0>
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb4:	1818      	adds	r0, r3, r0
 8007cb6:	231f      	movs	r3, #31
 8007cb8:	4018      	ands	r0, r3
 8007cba:	d07e      	beq.n	8007dba <_dtoa_r+0x91e>
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	1a1b      	subs	r3, r3, r0
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	dd70      	ble.n	8007da6 <_dtoa_r+0x90a>
 8007cc4:	231c      	movs	r3, #28
 8007cc6:	1a18      	subs	r0, r3, r0
 8007cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cca:	1824      	adds	r4, r4, r0
 8007ccc:	181b      	adds	r3, r3, r0
 8007cce:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cd2:	181b      	adds	r3, r3, r0
 8007cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dd05      	ble.n	8007ce8 <_dtoa_r+0x84c>
 8007cdc:	001a      	movs	r2, r3
 8007cde:	9903      	ldr	r1, [sp, #12]
 8007ce0:	9802      	ldr	r0, [sp, #8]
 8007ce2:	f000 fb9f 	bl	8008424 <__lshift>
 8007ce6:	9003      	str	r0, [sp, #12]
 8007ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x85e>
 8007cee:	001a      	movs	r2, r3
 8007cf0:	9904      	ldr	r1, [sp, #16]
 8007cf2:	9802      	ldr	r0, [sp, #8]
 8007cf4:	f000 fb96 	bl	8008424 <__lshift>
 8007cf8:	9004      	str	r0, [sp, #16]
 8007cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d05e      	beq.n	8007dbe <_dtoa_r+0x922>
 8007d00:	9904      	ldr	r1, [sp, #16]
 8007d02:	9803      	ldr	r0, [sp, #12]
 8007d04:	f000 fbe0 	bl	80084c8 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	da58      	bge.n	8007dbe <_dtoa_r+0x922>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	220a      	movs	r2, #10
 8007d10:	9903      	ldr	r1, [sp, #12]
 8007d12:	9802      	ldr	r0, [sp, #8]
 8007d14:	f000 fa14 	bl	8008140 <__multadd>
 8007d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1a:	3f01      	subs	r7, #1
 8007d1c:	9003      	str	r0, [sp, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d100      	bne.n	8007d24 <_dtoa_r+0x888>
 8007d22:	e190      	b.n	8008046 <_dtoa_r+0xbaa>
 8007d24:	2300      	movs	r3, #0
 8007d26:	0031      	movs	r1, r6
 8007d28:	220a      	movs	r2, #10
 8007d2a:	9802      	ldr	r0, [sp, #8]
 8007d2c:	f000 fa08 	bl	8008140 <__multadd>
 8007d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d32:	0006      	movs	r6, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd00      	ble.n	8007d3a <_dtoa_r+0x89e>
 8007d38:	e088      	b.n	8007e4c <_dtoa_r+0x9b0>
 8007d3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	dc00      	bgt.n	8007d42 <_dtoa_r+0x8a6>
 8007d40:	e084      	b.n	8007e4c <_dtoa_r+0x9b0>
 8007d42:	e044      	b.n	8007dce <_dtoa_r+0x932>
 8007d44:	2336      	movs	r3, #54	; 0x36
 8007d46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	e747      	b.n	8007bdc <_dtoa_r+0x740>
 8007d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4e:	1e5d      	subs	r5, r3, #1
 8007d50:	9b04      	ldr	r3, [sp, #16]
 8007d52:	42ab      	cmp	r3, r5
 8007d54:	db08      	blt.n	8007d68 <_dtoa_r+0x8cc>
 8007d56:	1b5d      	subs	r5, r3, r5
 8007d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da0c      	bge.n	8007d78 <_dtoa_r+0x8dc>
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d62:	1a9c      	subs	r4, r3, r2
 8007d64:	2300      	movs	r3, #0
 8007d66:	e73b      	b.n	8007be0 <_dtoa_r+0x744>
 8007d68:	9b04      	ldr	r3, [sp, #16]
 8007d6a:	9504      	str	r5, [sp, #16]
 8007d6c:	1aea      	subs	r2, r5, r3
 8007d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d70:	2500      	movs	r5, #0
 8007d72:	189b      	adds	r3, r3, r2
 8007d74:	9311      	str	r3, [sp, #68]	; 0x44
 8007d76:	e7ef      	b.n	8007d58 <_dtoa_r+0x8bc>
 8007d78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7c:	e730      	b.n	8007be0 <_dtoa_r+0x744>
 8007d7e:	9d04      	ldr	r5, [sp, #16]
 8007d80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d82:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007d84:	e737      	b.n	8007bf6 <_dtoa_r+0x75a>
 8007d86:	9a04      	ldr	r2, [sp, #16]
 8007d88:	e764      	b.n	8007c54 <_dtoa_r+0x7b8>
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	9310      	str	r3, [sp, #64]	; 0x40
 8007d94:	3303      	adds	r3, #3
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	18d3      	adds	r3, r2, r3
 8007d9a:	6858      	ldr	r0, [r3, #4]
 8007d9c:	f000 fa0e 	bl	80081bc <__hi0bits>
 8007da0:	2320      	movs	r3, #32
 8007da2:	1a18      	subs	r0, r3, r0
 8007da4:	e785      	b.n	8007cb2 <_dtoa_r+0x816>
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d095      	beq.n	8007cd6 <_dtoa_r+0x83a>
 8007daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dac:	331c      	adds	r3, #28
 8007dae:	18d2      	adds	r2, r2, r3
 8007db0:	920a      	str	r2, [sp, #40]	; 0x28
 8007db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007db4:	18e4      	adds	r4, r4, r3
 8007db6:	18d3      	adds	r3, r2, r3
 8007db8:	e78c      	b.n	8007cd4 <_dtoa_r+0x838>
 8007dba:	0003      	movs	r3, r0
 8007dbc:	e7f5      	b.n	8007daa <_dtoa_r+0x90e>
 8007dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc3d      	bgt.n	8007e40 <_dtoa_r+0x9a4>
 8007dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	dd3a      	ble.n	8007e40 <_dtoa_r+0x9a4>
 8007dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8007dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10c      	bne.n	8007dee <_dtoa_r+0x952>
 8007dd4:	9904      	ldr	r1, [sp, #16]
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	9802      	ldr	r0, [sp, #8]
 8007dda:	f000 f9b1 	bl	8008140 <__multadd>
 8007dde:	9004      	str	r0, [sp, #16]
 8007de0:	0001      	movs	r1, r0
 8007de2:	9803      	ldr	r0, [sp, #12]
 8007de4:	f000 fb70 	bl	80084c8 <__mcmp>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dd00      	ble.n	8007dee <_dtoa_r+0x952>
 8007dec:	e5af      	b.n	800794e <_dtoa_r+0x4b2>
 8007dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df0:	9d08      	ldr	r5, [sp, #32]
 8007df2:	43df      	mvns	r7, r3
 8007df4:	2300      	movs	r3, #0
 8007df6:	9309      	str	r3, [sp, #36]	; 0x24
 8007df8:	9904      	ldr	r1, [sp, #16]
 8007dfa:	9802      	ldr	r0, [sp, #8]
 8007dfc:	f000 f987 	bl	800810e <_Bfree>
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	d100      	bne.n	8007e06 <_dtoa_r+0x96a>
 8007e04:	e69b      	b.n	8007b3e <_dtoa_r+0x6a2>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <_dtoa_r+0x97c>
 8007e0c:	42b3      	cmp	r3, r6
 8007e0e:	d003      	beq.n	8007e18 <_dtoa_r+0x97c>
 8007e10:	0019      	movs	r1, r3
 8007e12:	9802      	ldr	r0, [sp, #8]
 8007e14:	f000 f97b 	bl	800810e <_Bfree>
 8007e18:	0031      	movs	r1, r6
 8007e1a:	9802      	ldr	r0, [sp, #8]
 8007e1c:	f000 f977 	bl	800810e <_Bfree>
 8007e20:	e68d      	b.n	8007b3e <_dtoa_r+0x6a2>
 8007e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	001e      	movs	r6, r3
 8007e28:	e7e1      	b.n	8007dee <_dtoa_r+0x952>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e7fa      	b.n	8007e24 <_dtoa_r+0x988>
 8007e2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e30:	0037      	movs	r7, r6
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	001e      	movs	r6, r3
 8007e36:	e58a      	b.n	800794e <_dtoa_r+0x4b2>
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	00000433 	.word	0x00000433
 8007e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d100      	bne.n	8007e48 <_dtoa_r+0x9ac>
 8007e46:	e0b2      	b.n	8007fae <_dtoa_r+0xb12>
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e4c:	2c00      	cmp	r4, #0
 8007e4e:	dd05      	ble.n	8007e5c <_dtoa_r+0x9c0>
 8007e50:	0031      	movs	r1, r6
 8007e52:	0022      	movs	r2, r4
 8007e54:	9802      	ldr	r0, [sp, #8]
 8007e56:	f000 fae5 	bl	8008424 <__lshift>
 8007e5a:	0006      	movs	r6, r0
 8007e5c:	0030      	movs	r0, r6
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	d011      	beq.n	8007e86 <_dtoa_r+0x9ea>
 8007e62:	6871      	ldr	r1, [r6, #4]
 8007e64:	9802      	ldr	r0, [sp, #8]
 8007e66:	f000 f91a 	bl	800809e <_Balloc>
 8007e6a:	0031      	movs	r1, r6
 8007e6c:	0004      	movs	r4, r0
 8007e6e:	6933      	ldr	r3, [r6, #16]
 8007e70:	310c      	adds	r1, #12
 8007e72:	1c9a      	adds	r2, r3, #2
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	300c      	adds	r0, #12
 8007e78:	f7fe fde8 	bl	8006a4c <memcpy>
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	0021      	movs	r1, r4
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	f000 facf 	bl	8008424 <__lshift>
 8007e86:	9609      	str	r6, [sp, #36]	; 0x24
 8007e88:	0006      	movs	r6, r0
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8e:	9904      	ldr	r1, [sp, #16]
 8007e90:	9803      	ldr	r0, [sp, #12]
 8007e92:	f7ff fa7d 	bl	8007390 <quorem>
 8007e96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e98:	900d      	str	r0, [sp, #52]	; 0x34
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	9803      	ldr	r0, [sp, #12]
 8007e9e:	f000 fb13 	bl	80084c8 <__mcmp>
 8007ea2:	0032      	movs	r2, r6
 8007ea4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ea6:	9904      	ldr	r1, [sp, #16]
 8007ea8:	9802      	ldr	r0, [sp, #8]
 8007eaa:	f000 fb27 	bl	80084fc <__mdiff>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eb2:	68c3      	ldr	r3, [r0, #12]
 8007eb4:	3430      	adds	r4, #48	; 0x30
 8007eb6:	0005      	movs	r5, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <_dtoa_r+0xa2a>
 8007ebc:	0001      	movs	r1, r0
 8007ebe:	9803      	ldr	r0, [sp, #12]
 8007ec0:	f000 fb02 	bl	80084c8 <__mcmp>
 8007ec4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ec6:	0029      	movs	r1, r5
 8007ec8:	9802      	ldr	r0, [sp, #8]
 8007eca:	f000 f920 	bl	800810e <_Bfree>
 8007ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	d10e      	bne.n	8007ef4 <_dtoa_r+0xa58>
 8007ed6:	9a06      	ldr	r2, [sp, #24]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4213      	tst	r3, r2
 8007edc:	d10a      	bne.n	8007ef4 <_dtoa_r+0xa58>
 8007ede:	2c39      	cmp	r4, #57	; 0x39
 8007ee0:	d026      	beq.n	8007f30 <_dtoa_r+0xa94>
 8007ee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd01      	ble.n	8007eec <_dtoa_r+0xa50>
 8007ee8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007eea:	3431      	adds	r4, #49	; 0x31
 8007eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eee:	1c5d      	adds	r5, r3, #1
 8007ef0:	701c      	strb	r4, [r3, #0]
 8007ef2:	e781      	b.n	8007df8 <_dtoa_r+0x95c>
 8007ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	db07      	blt.n	8007f0a <_dtoa_r+0xa6e>
 8007efa:	001d      	movs	r5, r3
 8007efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007efe:	431d      	orrs	r5, r3
 8007f00:	d122      	bne.n	8007f48 <_dtoa_r+0xaac>
 8007f02:	2301      	movs	r3, #1
 8007f04:	9a06      	ldr	r2, [sp, #24]
 8007f06:	4213      	tst	r3, r2
 8007f08:	d11e      	bne.n	8007f48 <_dtoa_r+0xaac>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dded      	ble.n	8007eec <_dtoa_r+0xa50>
 8007f10:	9903      	ldr	r1, [sp, #12]
 8007f12:	2201      	movs	r2, #1
 8007f14:	9802      	ldr	r0, [sp, #8]
 8007f16:	f000 fa85 	bl	8008424 <__lshift>
 8007f1a:	9904      	ldr	r1, [sp, #16]
 8007f1c:	9003      	str	r0, [sp, #12]
 8007f1e:	f000 fad3 	bl	80084c8 <__mcmp>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	dc02      	bgt.n	8007f2c <_dtoa_r+0xa90>
 8007f26:	d1e1      	bne.n	8007eec <_dtoa_r+0xa50>
 8007f28:	07e3      	lsls	r3, r4, #31
 8007f2a:	d5df      	bpl.n	8007eec <_dtoa_r+0xa50>
 8007f2c:	2c39      	cmp	r4, #57	; 0x39
 8007f2e:	d1db      	bne.n	8007ee8 <_dtoa_r+0xa4c>
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f34:	1c5d      	adds	r5, r3, #1
 8007f36:	2339      	movs	r3, #57	; 0x39
 8007f38:	7013      	strb	r3, [r2, #0]
 8007f3a:	1e6b      	subs	r3, r5, #1
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	2a39      	cmp	r2, #57	; 0x39
 8007f40:	d067      	beq.n	8008012 <_dtoa_r+0xb76>
 8007f42:	3201      	adds	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
 8007f46:	e757      	b.n	8007df8 <_dtoa_r+0x95c>
 8007f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4a:	1c5d      	adds	r5, r3, #1
 8007f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd04      	ble.n	8007f5c <_dtoa_r+0xac0>
 8007f52:	2c39      	cmp	r4, #57	; 0x39
 8007f54:	d0ec      	beq.n	8007f30 <_dtoa_r+0xa94>
 8007f56:	3401      	adds	r4, #1
 8007f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5a:	e7c9      	b.n	8007ef0 <_dtoa_r+0xa54>
 8007f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f60:	701c      	strb	r4, [r3, #0]
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	1aeb      	subs	r3, r5, r3
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d03e      	beq.n	8007fe8 <_dtoa_r+0xb4c>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	9903      	ldr	r1, [sp, #12]
 8007f70:	9802      	ldr	r0, [sp, #8]
 8007f72:	f000 f8e5 	bl	8008140 <__multadd>
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	9003      	str	r0, [sp, #12]
 8007f7a:	42b3      	cmp	r3, r6
 8007f7c:	d109      	bne.n	8007f92 <_dtoa_r+0xaf6>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	220a      	movs	r2, #10
 8007f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f84:	9802      	ldr	r0, [sp, #8]
 8007f86:	f000 f8db 	bl	8008140 <__multadd>
 8007f8a:	9009      	str	r0, [sp, #36]	; 0x24
 8007f8c:	0006      	movs	r6, r0
 8007f8e:	950a      	str	r5, [sp, #40]	; 0x28
 8007f90:	e77d      	b.n	8007e8e <_dtoa_r+0x9f2>
 8007f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f94:	2300      	movs	r3, #0
 8007f96:	220a      	movs	r2, #10
 8007f98:	9802      	ldr	r0, [sp, #8]
 8007f9a:	f000 f8d1 	bl	8008140 <__multadd>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9009      	str	r0, [sp, #36]	; 0x24
 8007fa2:	220a      	movs	r2, #10
 8007fa4:	0031      	movs	r1, r6
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	f000 f8ca 	bl	8008140 <__multadd>
 8007fac:	e7ee      	b.n	8007f8c <_dtoa_r+0xaf0>
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007fb2:	9b08      	ldr	r3, [sp, #32]
 8007fb4:	9306      	str	r3, [sp, #24]
 8007fb6:	9904      	ldr	r1, [sp, #16]
 8007fb8:	9803      	ldr	r0, [sp, #12]
 8007fba:	f7ff f9e9 	bl	8007390 <quorem>
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	3030      	adds	r0, #48	; 0x30
 8007fc2:	1c5d      	adds	r5, r3, #1
 8007fc4:	7018      	strb	r0, [r3, #0]
 8007fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	0004      	movs	r4, r0
 8007fcc:	1aeb      	subs	r3, r5, r3
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	dd08      	ble.n	8007fe4 <_dtoa_r+0xb48>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	9903      	ldr	r1, [sp, #12]
 8007fd8:	9802      	ldr	r0, [sp, #8]
 8007fda:	f000 f8b1 	bl	8008140 <__multadd>
 8007fde:	9506      	str	r5, [sp, #24]
 8007fe0:	9003      	str	r0, [sp, #12]
 8007fe2:	e7e8      	b.n	8007fb6 <_dtoa_r+0xb1a>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe8:	9903      	ldr	r1, [sp, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	9802      	ldr	r0, [sp, #8]
 8007fee:	f000 fa19 	bl	8008424 <__lshift>
 8007ff2:	9904      	ldr	r1, [sp, #16]
 8007ff4:	9003      	str	r0, [sp, #12]
 8007ff6:	f000 fa67 	bl	80084c8 <__mcmp>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	dc9d      	bgt.n	8007f3a <_dtoa_r+0xa9e>
 8007ffe:	d101      	bne.n	8008004 <_dtoa_r+0xb68>
 8008000:	07e3      	lsls	r3, r4, #31
 8008002:	d49a      	bmi.n	8007f3a <_dtoa_r+0xa9e>
 8008004:	1e6b      	subs	r3, r5, #1
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	2a30      	cmp	r2, #48	; 0x30
 800800a:	d000      	beq.n	800800e <_dtoa_r+0xb72>
 800800c:	e6f4      	b.n	8007df8 <_dtoa_r+0x95c>
 800800e:	001d      	movs	r5, r3
 8008010:	e7f8      	b.n	8008004 <_dtoa_r+0xb68>
 8008012:	9a08      	ldr	r2, [sp, #32]
 8008014:	429a      	cmp	r2, r3
 8008016:	d103      	bne.n	8008020 <_dtoa_r+0xb84>
 8008018:	2331      	movs	r3, #49	; 0x31
 800801a:	3701      	adds	r7, #1
 800801c:	7013      	strb	r3, [r2, #0]
 800801e:	e6eb      	b.n	8007df8 <_dtoa_r+0x95c>
 8008020:	001d      	movs	r5, r3
 8008022:	e78a      	b.n	8007f3a <_dtoa_r+0xa9e>
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <_dtoa_r+0xbb8>)
 8008026:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008028:	9308      	str	r3, [sp, #32]
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <_dtoa_r+0xbbc>)
 800802c:	2a00      	cmp	r2, #0
 800802e:	d001      	beq.n	8008034 <_dtoa_r+0xb98>
 8008030:	f7ff fa77 	bl	8007522 <_dtoa_r+0x86>
 8008034:	f7ff fa77 	bl	8007526 <_dtoa_r+0x8a>
 8008038:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800803a:	2b01      	cmp	r3, #1
 800803c:	dc00      	bgt.n	8008040 <_dtoa_r+0xba4>
 800803e:	e621      	b.n	8007c84 <_dtoa_r+0x7e8>
 8008040:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008042:	2001      	movs	r0, #1
 8008044:	e635      	b.n	8007cb2 <_dtoa_r+0x816>
 8008046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008048:	2b00      	cmp	r3, #0
 800804a:	dcb2      	bgt.n	8007fb2 <_dtoa_r+0xb16>
 800804c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800804e:	2b02      	cmp	r3, #2
 8008050:	ddaf      	ble.n	8007fb2 <_dtoa_r+0xb16>
 8008052:	e6bc      	b.n	8007dce <_dtoa_r+0x932>
 8008054:	08008f28 	.word	0x08008f28
 8008058:	08008f30 	.word	0x08008f30

0800805c <_localeconv_r>:
 800805c:	4b03      	ldr	r3, [pc, #12]	; (800806c <_localeconv_r+0x10>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6a18      	ldr	r0, [r3, #32]
 8008062:	2800      	cmp	r0, #0
 8008064:	d100      	bne.n	8008068 <_localeconv_r+0xc>
 8008066:	4802      	ldr	r0, [pc, #8]	; (8008070 <_localeconv_r+0x14>)
 8008068:	30f0      	adds	r0, #240	; 0xf0
 800806a:	4770      	bx	lr
 800806c:	20000018 	.word	0x20000018
 8008070:	2000007c 	.word	0x2000007c

08008074 <malloc>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4b03      	ldr	r3, [pc, #12]	; (8008084 <malloc+0x10>)
 8008078:	0001      	movs	r1, r0
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	f000 fb4e 	bl	800871c <_malloc_r>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	20000018 	.word	0x20000018

08008088 <memchr>:
 8008088:	b2c9      	uxtb	r1, r1
 800808a:	1882      	adds	r2, r0, r2
 800808c:	4290      	cmp	r0, r2
 800808e:	d101      	bne.n	8008094 <memchr+0xc>
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	7803      	ldrb	r3, [r0, #0]
 8008096:	428b      	cmp	r3, r1
 8008098:	d0fb      	beq.n	8008092 <memchr+0xa>
 800809a:	3001      	adds	r0, #1
 800809c:	e7f6      	b.n	800808c <memchr+0x4>

0800809e <_Balloc>:
 800809e:	b570      	push	{r4, r5, r6, lr}
 80080a0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080a2:	0004      	movs	r4, r0
 80080a4:	000d      	movs	r5, r1
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	d107      	bne.n	80080ba <_Balloc+0x1c>
 80080aa:	2010      	movs	r0, #16
 80080ac:	f7ff ffe2 	bl	8008074 <malloc>
 80080b0:	6260      	str	r0, [r4, #36]	; 0x24
 80080b2:	6046      	str	r6, [r0, #4]
 80080b4:	6086      	str	r6, [r0, #8]
 80080b6:	6006      	str	r6, [r0, #0]
 80080b8:	60c6      	str	r6, [r0, #12]
 80080ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080bc:	68f3      	ldr	r3, [r6, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <_Balloc+0x4c>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	00aa      	lsls	r2, r5, #2
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	189b      	adds	r3, r3, r2
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d118      	bne.n	8008102 <_Balloc+0x64>
 80080d0:	2101      	movs	r1, #1
 80080d2:	000e      	movs	r6, r1
 80080d4:	40ae      	lsls	r6, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	0020      	movs	r0, r4
 80080dc:	f000 fac6 	bl	800866c <_calloc_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d00c      	beq.n	80080fe <_Balloc+0x60>
 80080e4:	6045      	str	r5, [r0, #4]
 80080e6:	6086      	str	r6, [r0, #8]
 80080e8:	e00d      	b.n	8008106 <_Balloc+0x68>
 80080ea:	2221      	movs	r2, #33	; 0x21
 80080ec:	2104      	movs	r1, #4
 80080ee:	0020      	movs	r0, r4
 80080f0:	f000 fabc 	bl	800866c <_calloc_r>
 80080f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f6:	60f0      	str	r0, [r6, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e1      	bne.n	80080c2 <_Balloc+0x24>
 80080fe:	2000      	movs	r0, #0
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	6802      	ldr	r2, [r0, #0]
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	2300      	movs	r3, #0
 8008108:	6103      	str	r3, [r0, #16]
 800810a:	60c3      	str	r3, [r0, #12]
 800810c:	e7f8      	b.n	8008100 <_Balloc+0x62>

0800810e <_Bfree>:
 800810e:	b570      	push	{r4, r5, r6, lr}
 8008110:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008112:	0006      	movs	r6, r0
 8008114:	000d      	movs	r5, r1
 8008116:	2c00      	cmp	r4, #0
 8008118:	d107      	bne.n	800812a <_Bfree+0x1c>
 800811a:	2010      	movs	r0, #16
 800811c:	f7ff ffaa 	bl	8008074 <malloc>
 8008120:	6270      	str	r0, [r6, #36]	; 0x24
 8008122:	6044      	str	r4, [r0, #4]
 8008124:	6084      	str	r4, [r0, #8]
 8008126:	6004      	str	r4, [r0, #0]
 8008128:	60c4      	str	r4, [r0, #12]
 800812a:	2d00      	cmp	r5, #0
 800812c:	d007      	beq.n	800813e <_Bfree+0x30>
 800812e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008130:	686a      	ldr	r2, [r5, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	0092      	lsls	r2, r2, #2
 8008136:	189b      	adds	r3, r3, r2
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	602a      	str	r2, [r5, #0]
 800813c:	601d      	str	r5, [r3, #0]
 800813e:	bd70      	pop	{r4, r5, r6, pc}

08008140 <__multadd>:
 8008140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008142:	001e      	movs	r6, r3
 8008144:	2314      	movs	r3, #20
 8008146:	469c      	mov	ip, r3
 8008148:	0007      	movs	r7, r0
 800814a:	000c      	movs	r4, r1
 800814c:	2000      	movs	r0, #0
 800814e:	690d      	ldr	r5, [r1, #16]
 8008150:	448c      	add	ip, r1
 8008152:	4663      	mov	r3, ip
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3001      	adds	r0, #1
 8008158:	b299      	uxth	r1, r3
 800815a:	4663      	mov	r3, ip
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4351      	muls	r1, r2
 8008160:	0c1b      	lsrs	r3, r3, #16
 8008162:	4353      	muls	r3, r2
 8008164:	1989      	adds	r1, r1, r6
 8008166:	0c0e      	lsrs	r6, r1, #16
 8008168:	199b      	adds	r3, r3, r6
 800816a:	b289      	uxth	r1, r1
 800816c:	0c1e      	lsrs	r6, r3, #16
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	185b      	adds	r3, r3, r1
 8008172:	4661      	mov	r1, ip
 8008174:	c108      	stmia	r1!, {r3}
 8008176:	468c      	mov	ip, r1
 8008178:	4285      	cmp	r5, r0
 800817a:	dcea      	bgt.n	8008152 <__multadd+0x12>
 800817c:	2e00      	cmp	r6, #0
 800817e:	d01b      	beq.n	80081b8 <__multadd+0x78>
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	42ab      	cmp	r3, r5
 8008184:	dc12      	bgt.n	80081ac <__multadd+0x6c>
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	0038      	movs	r0, r7
 800818a:	1c59      	adds	r1, r3, #1
 800818c:	f7ff ff87 	bl	800809e <_Balloc>
 8008190:	0021      	movs	r1, r4
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	9001      	str	r0, [sp, #4]
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	0092      	lsls	r2, r2, #2
 800819a:	310c      	adds	r1, #12
 800819c:	300c      	adds	r0, #12
 800819e:	f7fe fc55 	bl	8006a4c <memcpy>
 80081a2:	0021      	movs	r1, r4
 80081a4:	0038      	movs	r0, r7
 80081a6:	f7ff ffb2 	bl	800810e <_Bfree>
 80081aa:	9c01      	ldr	r4, [sp, #4]
 80081ac:	1d2b      	adds	r3, r5, #4
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	18e3      	adds	r3, r4, r3
 80081b2:	3501      	adds	r5, #1
 80081b4:	605e      	str	r6, [r3, #4]
 80081b6:	6125      	str	r5, [r4, #16]
 80081b8:	0020      	movs	r0, r4
 80081ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080081bc <__hi0bits>:
 80081bc:	0003      	movs	r3, r0
 80081be:	0c02      	lsrs	r2, r0, #16
 80081c0:	2000      	movs	r0, #0
 80081c2:	4282      	cmp	r2, r0
 80081c4:	d101      	bne.n	80081ca <__hi0bits+0xe>
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	3010      	adds	r0, #16
 80081ca:	0e1a      	lsrs	r2, r3, #24
 80081cc:	d101      	bne.n	80081d2 <__hi0bits+0x16>
 80081ce:	3008      	adds	r0, #8
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	0f1a      	lsrs	r2, r3, #28
 80081d4:	d101      	bne.n	80081da <__hi0bits+0x1e>
 80081d6:	3004      	adds	r0, #4
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	0f9a      	lsrs	r2, r3, #30
 80081dc:	d101      	bne.n	80081e2 <__hi0bits+0x26>
 80081de:	3002      	adds	r0, #2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	db03      	blt.n	80081ee <__hi0bits+0x32>
 80081e6:	3001      	adds	r0, #1
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	d400      	bmi.n	80081ee <__hi0bits+0x32>
 80081ec:	2020      	movs	r0, #32
 80081ee:	4770      	bx	lr

080081f0 <__lo0bits>:
 80081f0:	2207      	movs	r2, #7
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	b510      	push	{r4, lr}
 80081f6:	0001      	movs	r1, r0
 80081f8:	401a      	ands	r2, r3
 80081fa:	d00d      	beq.n	8008218 <__lo0bits+0x28>
 80081fc:	2401      	movs	r4, #1
 80081fe:	2000      	movs	r0, #0
 8008200:	4223      	tst	r3, r4
 8008202:	d105      	bne.n	8008210 <__lo0bits+0x20>
 8008204:	3002      	adds	r0, #2
 8008206:	4203      	tst	r3, r0
 8008208:	d003      	beq.n	8008212 <__lo0bits+0x22>
 800820a:	40e3      	lsrs	r3, r4
 800820c:	0020      	movs	r0, r4
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	bd10      	pop	{r4, pc}
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	600b      	str	r3, [r1, #0]
 8008216:	e7fb      	b.n	8008210 <__lo0bits+0x20>
 8008218:	b29c      	uxth	r4, r3
 800821a:	0010      	movs	r0, r2
 800821c:	2c00      	cmp	r4, #0
 800821e:	d101      	bne.n	8008224 <__lo0bits+0x34>
 8008220:	2010      	movs	r0, #16
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	b2da      	uxtb	r2, r3
 8008226:	2a00      	cmp	r2, #0
 8008228:	d101      	bne.n	800822e <__lo0bits+0x3e>
 800822a:	3008      	adds	r0, #8
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	071a      	lsls	r2, r3, #28
 8008230:	d101      	bne.n	8008236 <__lo0bits+0x46>
 8008232:	3004      	adds	r0, #4
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	079a      	lsls	r2, r3, #30
 8008238:	d101      	bne.n	800823e <__lo0bits+0x4e>
 800823a:	3002      	adds	r0, #2
 800823c:	089b      	lsrs	r3, r3, #2
 800823e:	07da      	lsls	r2, r3, #31
 8008240:	d4e8      	bmi.n	8008214 <__lo0bits+0x24>
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	d001      	beq.n	800824a <__lo0bits+0x5a>
 8008246:	3001      	adds	r0, #1
 8008248:	e7e4      	b.n	8008214 <__lo0bits+0x24>
 800824a:	2020      	movs	r0, #32
 800824c:	e7e0      	b.n	8008210 <__lo0bits+0x20>

0800824e <__i2b>:
 800824e:	b510      	push	{r4, lr}
 8008250:	000c      	movs	r4, r1
 8008252:	2101      	movs	r1, #1
 8008254:	f7ff ff23 	bl	800809e <_Balloc>
 8008258:	2301      	movs	r3, #1
 800825a:	6144      	str	r4, [r0, #20]
 800825c:	6103      	str	r3, [r0, #16]
 800825e:	bd10      	pop	{r4, pc}

08008260 <__multiply>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	0014      	movs	r4, r2
 8008266:	6912      	ldr	r2, [r2, #16]
 8008268:	b089      	sub	sp, #36	; 0x24
 800826a:	000d      	movs	r5, r1
 800826c:	4293      	cmp	r3, r2
 800826e:	da01      	bge.n	8008274 <__multiply+0x14>
 8008270:	0025      	movs	r5, r4
 8008272:	000c      	movs	r4, r1
 8008274:	692f      	ldr	r7, [r5, #16]
 8008276:	6926      	ldr	r6, [r4, #16]
 8008278:	6869      	ldr	r1, [r5, #4]
 800827a:	19bb      	adds	r3, r7, r6
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	68ab      	ldr	r3, [r5, #8]
 8008280:	19ba      	adds	r2, r7, r6
 8008282:	4293      	cmp	r3, r2
 8008284:	da00      	bge.n	8008288 <__multiply+0x28>
 8008286:	3101      	adds	r1, #1
 8008288:	f7ff ff09 	bl	800809e <_Balloc>
 800828c:	0002      	movs	r2, r0
 800828e:	19bb      	adds	r3, r7, r6
 8008290:	3214      	adds	r2, #20
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	18d3      	adds	r3, r2, r3
 8008296:	469c      	mov	ip, r3
 8008298:	2100      	movs	r1, #0
 800829a:	0013      	movs	r3, r2
 800829c:	9004      	str	r0, [sp, #16]
 800829e:	4563      	cmp	r3, ip
 80082a0:	d31d      	bcc.n	80082de <__multiply+0x7e>
 80082a2:	3514      	adds	r5, #20
 80082a4:	00bf      	lsls	r7, r7, #2
 80082a6:	19eb      	adds	r3, r5, r7
 80082a8:	3414      	adds	r4, #20
 80082aa:	00b6      	lsls	r6, r6, #2
 80082ac:	9305      	str	r3, [sp, #20]
 80082ae:	19a3      	adds	r3, r4, r6
 80082b0:	9503      	str	r5, [sp, #12]
 80082b2:	9401      	str	r4, [sp, #4]
 80082b4:	9307      	str	r3, [sp, #28]
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	9901      	ldr	r1, [sp, #4]
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d311      	bcc.n	80082e2 <__multiply+0x82>
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dd06      	ble.n	80082d2 <__multiply+0x72>
 80082c4:	2304      	movs	r3, #4
 80082c6:	425b      	negs	r3, r3
 80082c8:	449c      	add	ip, r3
 80082ca:	4663      	mov	r3, ip
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d051      	beq.n	8008376 <__multiply+0x116>
 80082d2:	9b04      	ldr	r3, [sp, #16]
 80082d4:	9a02      	ldr	r2, [sp, #8]
 80082d6:	0018      	movs	r0, r3
 80082d8:	611a      	str	r2, [r3, #16]
 80082da:	b009      	add	sp, #36	; 0x24
 80082dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082de:	c302      	stmia	r3!, {r1}
 80082e0:	e7dd      	b.n	800829e <__multiply+0x3e>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	b298      	uxth	r0, r3
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d01c      	beq.n	8008326 <__multiply+0xc6>
 80082ec:	0015      	movs	r5, r2
 80082ee:	2600      	movs	r6, #0
 80082f0:	9f03      	ldr	r7, [sp, #12]
 80082f2:	cf02      	ldmia	r7!, {r1}
 80082f4:	682c      	ldr	r4, [r5, #0]
 80082f6:	b28b      	uxth	r3, r1
 80082f8:	4343      	muls	r3, r0
 80082fa:	0c09      	lsrs	r1, r1, #16
 80082fc:	4341      	muls	r1, r0
 80082fe:	b2a4      	uxth	r4, r4
 8008300:	191b      	adds	r3, r3, r4
 8008302:	199b      	adds	r3, r3, r6
 8008304:	000e      	movs	r6, r1
 8008306:	6829      	ldr	r1, [r5, #0]
 8008308:	9506      	str	r5, [sp, #24]
 800830a:	0c09      	lsrs	r1, r1, #16
 800830c:	1871      	adds	r1, r6, r1
 800830e:	0c1e      	lsrs	r6, r3, #16
 8008310:	1989      	adds	r1, r1, r6
 8008312:	0c0e      	lsrs	r6, r1, #16
 8008314:	b29b      	uxth	r3, r3
 8008316:	0409      	lsls	r1, r1, #16
 8008318:	430b      	orrs	r3, r1
 800831a:	c508      	stmia	r5!, {r3}
 800831c:	9b05      	ldr	r3, [sp, #20]
 800831e:	42bb      	cmp	r3, r7
 8008320:	d8e7      	bhi.n	80082f2 <__multiply+0x92>
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	605e      	str	r6, [r3, #4]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	0c1d      	lsrs	r5, r3, #16
 800832c:	d01e      	beq.n	800836c <__multiply+0x10c>
 800832e:	0010      	movs	r0, r2
 8008330:	2700      	movs	r7, #0
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	9e03      	ldr	r6, [sp, #12]
 8008336:	6831      	ldr	r1, [r6, #0]
 8008338:	6804      	ldr	r4, [r0, #0]
 800833a:	b289      	uxth	r1, r1
 800833c:	4369      	muls	r1, r5
 800833e:	0c24      	lsrs	r4, r4, #16
 8008340:	1909      	adds	r1, r1, r4
 8008342:	19c9      	adds	r1, r1, r7
 8008344:	040f      	lsls	r7, r1, #16
 8008346:	b29b      	uxth	r3, r3
 8008348:	433b      	orrs	r3, r7
 800834a:	6003      	str	r3, [r0, #0]
 800834c:	ce80      	ldmia	r6!, {r7}
 800834e:	6843      	ldr	r3, [r0, #4]
 8008350:	0c3f      	lsrs	r7, r7, #16
 8008352:	436f      	muls	r7, r5
 8008354:	b29b      	uxth	r3, r3
 8008356:	18fb      	adds	r3, r7, r3
 8008358:	0c09      	lsrs	r1, r1, #16
 800835a:	185b      	adds	r3, r3, r1
 800835c:	9905      	ldr	r1, [sp, #20]
 800835e:	9006      	str	r0, [sp, #24]
 8008360:	0c1f      	lsrs	r7, r3, #16
 8008362:	3004      	adds	r0, #4
 8008364:	42b1      	cmp	r1, r6
 8008366:	d8e6      	bhi.n	8008336 <__multiply+0xd6>
 8008368:	9906      	ldr	r1, [sp, #24]
 800836a:	604b      	str	r3, [r1, #4]
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	3204      	adds	r2, #4
 8008370:	3304      	adds	r3, #4
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	e79f      	b.n	80082b6 <__multiply+0x56>
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	3b01      	subs	r3, #1
 800837a:	9302      	str	r3, [sp, #8]
 800837c:	e79f      	b.n	80082be <__multiply+0x5e>
	...

08008380 <__pow5mult>:
 8008380:	2303      	movs	r3, #3
 8008382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008384:	4013      	ands	r3, r2
 8008386:	0005      	movs	r5, r0
 8008388:	000e      	movs	r6, r1
 800838a:	0014      	movs	r4, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <__pow5mult+0x22>
 8008390:	4922      	ldr	r1, [pc, #136]	; (800841c <__pow5mult+0x9c>)
 8008392:	3b01      	subs	r3, #1
 8008394:	009a      	lsls	r2, r3, #2
 8008396:	5852      	ldr	r2, [r2, r1]
 8008398:	2300      	movs	r3, #0
 800839a:	0031      	movs	r1, r6
 800839c:	f7ff fed0 	bl	8008140 <__multadd>
 80083a0:	0006      	movs	r6, r0
 80083a2:	10a3      	asrs	r3, r4, #2
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	d036      	beq.n	8008416 <__pow5mult+0x96>
 80083a8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	d107      	bne.n	80083be <__pow5mult+0x3e>
 80083ae:	2010      	movs	r0, #16
 80083b0:	f7ff fe60 	bl	8008074 <malloc>
 80083b4:	6268      	str	r0, [r5, #36]	; 0x24
 80083b6:	6044      	str	r4, [r0, #4]
 80083b8:	6084      	str	r4, [r0, #8]
 80083ba:	6004      	str	r4, [r0, #0]
 80083bc:	60c4      	str	r4, [r0, #12]
 80083be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80083c0:	68bc      	ldr	r4, [r7, #8]
 80083c2:	2c00      	cmp	r4, #0
 80083c4:	d107      	bne.n	80083d6 <__pow5mult+0x56>
 80083c6:	4916      	ldr	r1, [pc, #88]	; (8008420 <__pow5mult+0xa0>)
 80083c8:	0028      	movs	r0, r5
 80083ca:	f7ff ff40 	bl	800824e <__i2b>
 80083ce:	2300      	movs	r3, #0
 80083d0:	0004      	movs	r4, r0
 80083d2:	60b8      	str	r0, [r7, #8]
 80083d4:	6003      	str	r3, [r0, #0]
 80083d6:	2201      	movs	r2, #1
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	4213      	tst	r3, r2
 80083dc:	d00a      	beq.n	80083f4 <__pow5mult+0x74>
 80083de:	0031      	movs	r1, r6
 80083e0:	0022      	movs	r2, r4
 80083e2:	0028      	movs	r0, r5
 80083e4:	f7ff ff3c 	bl	8008260 <__multiply>
 80083e8:	0007      	movs	r7, r0
 80083ea:	0031      	movs	r1, r6
 80083ec:	0028      	movs	r0, r5
 80083ee:	f7ff fe8e 	bl	800810e <_Bfree>
 80083f2:	003e      	movs	r6, r7
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	105b      	asrs	r3, r3, #1
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	d00c      	beq.n	8008416 <__pow5mult+0x96>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	2800      	cmp	r0, #0
 8008400:	d107      	bne.n	8008412 <__pow5mult+0x92>
 8008402:	0022      	movs	r2, r4
 8008404:	0021      	movs	r1, r4
 8008406:	0028      	movs	r0, r5
 8008408:	f7ff ff2a 	bl	8008260 <__multiply>
 800840c:	2300      	movs	r3, #0
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	0004      	movs	r4, r0
 8008414:	e7df      	b.n	80083d6 <__pow5mult+0x56>
 8008416:	0030      	movs	r0, r6
 8008418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	08009028 	.word	0x08009028
 8008420:	00000271 	.word	0x00000271

08008424 <__lshift>:
 8008424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008426:	000d      	movs	r5, r1
 8008428:	0017      	movs	r7, r2
 800842a:	692b      	ldr	r3, [r5, #16]
 800842c:	1154      	asrs	r4, r2, #5
 800842e:	b085      	sub	sp, #20
 8008430:	18e3      	adds	r3, r4, r3
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	3301      	adds	r3, #1
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	6849      	ldr	r1, [r1, #4]
 800843a:	68ab      	ldr	r3, [r5, #8]
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	9a00      	ldr	r2, [sp, #0]
 8008440:	4293      	cmp	r3, r2
 8008442:	db35      	blt.n	80084b0 <__lshift+0x8c>
 8008444:	9802      	ldr	r0, [sp, #8]
 8008446:	f7ff fe2a 	bl	800809e <_Balloc>
 800844a:	2300      	movs	r3, #0
 800844c:	0002      	movs	r2, r0
 800844e:	0006      	movs	r6, r0
 8008450:	0019      	movs	r1, r3
 8008452:	3214      	adds	r2, #20
 8008454:	42a3      	cmp	r3, r4
 8008456:	db2e      	blt.n	80084b6 <__lshift+0x92>
 8008458:	43e3      	mvns	r3, r4
 800845a:	17db      	asrs	r3, r3, #31
 800845c:	401c      	ands	r4, r3
 800845e:	002b      	movs	r3, r5
 8008460:	00a4      	lsls	r4, r4, #2
 8008462:	1914      	adds	r4, r2, r4
 8008464:	692a      	ldr	r2, [r5, #16]
 8008466:	3314      	adds	r3, #20
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	189a      	adds	r2, r3, r2
 800846c:	4694      	mov	ip, r2
 800846e:	221f      	movs	r2, #31
 8008470:	4017      	ands	r7, r2
 8008472:	d024      	beq.n	80084be <__lshift+0x9a>
 8008474:	3201      	adds	r2, #1
 8008476:	1bd2      	subs	r2, r2, r7
 8008478:	9203      	str	r2, [sp, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	0020      	movs	r0, r4
 8008480:	40b9      	lsls	r1, r7
 8008482:	430a      	orrs	r2, r1
 8008484:	c404      	stmia	r4!, {r2}
 8008486:	cb04      	ldmia	r3!, {r2}
 8008488:	9903      	ldr	r1, [sp, #12]
 800848a:	40ca      	lsrs	r2, r1
 800848c:	459c      	cmp	ip, r3
 800848e:	d8f5      	bhi.n	800847c <__lshift+0x58>
 8008490:	6042      	str	r2, [r0, #4]
 8008492:	2a00      	cmp	r2, #0
 8008494:	d002      	beq.n	800849c <__lshift+0x78>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	3302      	adds	r3, #2
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	9802      	ldr	r0, [sp, #8]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	6133      	str	r3, [r6, #16]
 80084a4:	0029      	movs	r1, r5
 80084a6:	f7ff fe32 	bl	800810e <_Bfree>
 80084aa:	0030      	movs	r0, r6
 80084ac:	b005      	add	sp, #20
 80084ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b0:	3101      	adds	r1, #1
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	e7c3      	b.n	800843e <__lshift+0x1a>
 80084b6:	0098      	lsls	r0, r3, #2
 80084b8:	5011      	str	r1, [r2, r0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	e7ca      	b.n	8008454 <__lshift+0x30>
 80084be:	cb04      	ldmia	r3!, {r2}
 80084c0:	c404      	stmia	r4!, {r2}
 80084c2:	459c      	cmp	ip, r3
 80084c4:	d8fb      	bhi.n	80084be <__lshift+0x9a>
 80084c6:	e7e9      	b.n	800849c <__lshift+0x78>

080084c8 <__mcmp>:
 80084c8:	690a      	ldr	r2, [r1, #16]
 80084ca:	6903      	ldr	r3, [r0, #16]
 80084cc:	b530      	push	{r4, r5, lr}
 80084ce:	1a9b      	subs	r3, r3, r2
 80084d0:	d10d      	bne.n	80084ee <__mcmp+0x26>
 80084d2:	0092      	lsls	r2, r2, #2
 80084d4:	3014      	adds	r0, #20
 80084d6:	3114      	adds	r1, #20
 80084d8:	1884      	adds	r4, r0, r2
 80084da:	1889      	adds	r1, r1, r2
 80084dc:	3c04      	subs	r4, #4
 80084de:	3904      	subs	r1, #4
 80084e0:	6825      	ldr	r5, [r4, #0]
 80084e2:	680a      	ldr	r2, [r1, #0]
 80084e4:	4295      	cmp	r5, r2
 80084e6:	d004      	beq.n	80084f2 <__mcmp+0x2a>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4295      	cmp	r5, r2
 80084ec:	d304      	bcc.n	80084f8 <__mcmp+0x30>
 80084ee:	0018      	movs	r0, r3
 80084f0:	bd30      	pop	{r4, r5, pc}
 80084f2:	42a0      	cmp	r0, r4
 80084f4:	d3f2      	bcc.n	80084dc <__mcmp+0x14>
 80084f6:	e7fa      	b.n	80084ee <__mcmp+0x26>
 80084f8:	425b      	negs	r3, r3
 80084fa:	e7f8      	b.n	80084ee <__mcmp+0x26>

080084fc <__mdiff>:
 80084fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084fe:	000d      	movs	r5, r1
 8008500:	b085      	sub	sp, #20
 8008502:	0007      	movs	r7, r0
 8008504:	0011      	movs	r1, r2
 8008506:	0028      	movs	r0, r5
 8008508:	0014      	movs	r4, r2
 800850a:	f7ff ffdd 	bl	80084c8 <__mcmp>
 800850e:	1e06      	subs	r6, r0, #0
 8008510:	d108      	bne.n	8008524 <__mdiff+0x28>
 8008512:	0001      	movs	r1, r0
 8008514:	0038      	movs	r0, r7
 8008516:	f7ff fdc2 	bl	800809e <_Balloc>
 800851a:	2301      	movs	r3, #1
 800851c:	6146      	str	r6, [r0, #20]
 800851e:	6103      	str	r3, [r0, #16]
 8008520:	b005      	add	sp, #20
 8008522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008524:	2301      	movs	r3, #1
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	2800      	cmp	r0, #0
 800852a:	db04      	blt.n	8008536 <__mdiff+0x3a>
 800852c:	0023      	movs	r3, r4
 800852e:	002c      	movs	r4, r5
 8008530:	001d      	movs	r5, r3
 8008532:	2300      	movs	r3, #0
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	6861      	ldr	r1, [r4, #4]
 8008538:	0038      	movs	r0, r7
 800853a:	f7ff fdb0 	bl	800809e <_Balloc>
 800853e:	002f      	movs	r7, r5
 8008540:	2200      	movs	r2, #0
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	6926      	ldr	r6, [r4, #16]
 8008546:	60c3      	str	r3, [r0, #12]
 8008548:	3414      	adds	r4, #20
 800854a:	00b3      	lsls	r3, r6, #2
 800854c:	18e3      	adds	r3, r4, r3
 800854e:	9302      	str	r3, [sp, #8]
 8008550:	692b      	ldr	r3, [r5, #16]
 8008552:	3714      	adds	r7, #20
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	18fb      	adds	r3, r7, r3
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	0003      	movs	r3, r0
 800855c:	4694      	mov	ip, r2
 800855e:	3314      	adds	r3, #20
 8008560:	cc20      	ldmia	r4!, {r5}
 8008562:	cf04      	ldmia	r7!, {r2}
 8008564:	9201      	str	r2, [sp, #4]
 8008566:	b2aa      	uxth	r2, r5
 8008568:	4494      	add	ip, r2
 800856a:	466a      	mov	r2, sp
 800856c:	4661      	mov	r1, ip
 800856e:	8892      	ldrh	r2, [r2, #4]
 8008570:	0c2d      	lsrs	r5, r5, #16
 8008572:	1a8a      	subs	r2, r1, r2
 8008574:	9901      	ldr	r1, [sp, #4]
 8008576:	0c09      	lsrs	r1, r1, #16
 8008578:	1a69      	subs	r1, r5, r1
 800857a:	1415      	asrs	r5, r2, #16
 800857c:	1949      	adds	r1, r1, r5
 800857e:	140d      	asrs	r5, r1, #16
 8008580:	b292      	uxth	r2, r2
 8008582:	0409      	lsls	r1, r1, #16
 8008584:	430a      	orrs	r2, r1
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	9a03      	ldr	r2, [sp, #12]
 800858a:	46ac      	mov	ip, r5
 800858c:	3304      	adds	r3, #4
 800858e:	42ba      	cmp	r2, r7
 8008590:	d8e6      	bhi.n	8008560 <__mdiff+0x64>
 8008592:	9902      	ldr	r1, [sp, #8]
 8008594:	001a      	movs	r2, r3
 8008596:	428c      	cmp	r4, r1
 8008598:	d305      	bcc.n	80085a6 <__mdiff+0xaa>
 800859a:	3a04      	subs	r2, #4
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00e      	beq.n	80085c0 <__mdiff+0xc4>
 80085a2:	6106      	str	r6, [r0, #16]
 80085a4:	e7bc      	b.n	8008520 <__mdiff+0x24>
 80085a6:	cc04      	ldmia	r4!, {r2}
 80085a8:	b291      	uxth	r1, r2
 80085aa:	4461      	add	r1, ip
 80085ac:	140d      	asrs	r5, r1, #16
 80085ae:	0c12      	lsrs	r2, r2, #16
 80085b0:	1952      	adds	r2, r2, r5
 80085b2:	1415      	asrs	r5, r2, #16
 80085b4:	b289      	uxth	r1, r1
 80085b6:	0412      	lsls	r2, r2, #16
 80085b8:	430a      	orrs	r2, r1
 80085ba:	46ac      	mov	ip, r5
 80085bc:	c304      	stmia	r3!, {r2}
 80085be:	e7e8      	b.n	8008592 <__mdiff+0x96>
 80085c0:	3e01      	subs	r6, #1
 80085c2:	e7ea      	b.n	800859a <__mdiff+0x9e>

080085c4 <__d2b>:
 80085c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c6:	001d      	movs	r5, r3
 80085c8:	2101      	movs	r1, #1
 80085ca:	0014      	movs	r4, r2
 80085cc:	9f08      	ldr	r7, [sp, #32]
 80085ce:	f7ff fd66 	bl	800809e <_Balloc>
 80085d2:	032b      	lsls	r3, r5, #12
 80085d4:	006d      	lsls	r5, r5, #1
 80085d6:	0006      	movs	r6, r0
 80085d8:	0b1b      	lsrs	r3, r3, #12
 80085da:	0d6d      	lsrs	r5, r5, #21
 80085dc:	d124      	bne.n	8008628 <__d2b+0x64>
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	d027      	beq.n	8008634 <__d2b+0x70>
 80085e4:	4668      	mov	r0, sp
 80085e6:	9400      	str	r4, [sp, #0]
 80085e8:	f7ff fe02 	bl	80081f0 <__lo0bits>
 80085ec:	9c00      	ldr	r4, [sp, #0]
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d01e      	beq.n	8008630 <__d2b+0x6c>
 80085f2:	9b01      	ldr	r3, [sp, #4]
 80085f4:	2120      	movs	r1, #32
 80085f6:	001a      	movs	r2, r3
 80085f8:	1a09      	subs	r1, r1, r0
 80085fa:	408a      	lsls	r2, r1
 80085fc:	40c3      	lsrs	r3, r0
 80085fe:	4322      	orrs	r2, r4
 8008600:	6172      	str	r2, [r6, #20]
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	9c01      	ldr	r4, [sp, #4]
 8008606:	61b4      	str	r4, [r6, #24]
 8008608:	1e63      	subs	r3, r4, #1
 800860a:	419c      	sbcs	r4, r3
 800860c:	3401      	adds	r4, #1
 800860e:	6134      	str	r4, [r6, #16]
 8008610:	2d00      	cmp	r5, #0
 8008612:	d018      	beq.n	8008646 <__d2b+0x82>
 8008614:	4b12      	ldr	r3, [pc, #72]	; (8008660 <__d2b+0x9c>)
 8008616:	18ed      	adds	r5, r5, r3
 8008618:	2335      	movs	r3, #53	; 0x35
 800861a:	182d      	adds	r5, r5, r0
 800861c:	603d      	str	r5, [r7, #0]
 800861e:	1a18      	subs	r0, r3, r0
 8008620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008622:	6018      	str	r0, [r3, #0]
 8008624:	0030      	movs	r0, r6
 8008626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008628:	2280      	movs	r2, #128	; 0x80
 800862a:	0352      	lsls	r2, r2, #13
 800862c:	4313      	orrs	r3, r2
 800862e:	e7d6      	b.n	80085de <__d2b+0x1a>
 8008630:	6174      	str	r4, [r6, #20]
 8008632:	e7e7      	b.n	8008604 <__d2b+0x40>
 8008634:	a801      	add	r0, sp, #4
 8008636:	f7ff fddb 	bl	80081f0 <__lo0bits>
 800863a:	2401      	movs	r4, #1
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	6134      	str	r4, [r6, #16]
 8008640:	6173      	str	r3, [r6, #20]
 8008642:	3020      	adds	r0, #32
 8008644:	e7e4      	b.n	8008610 <__d2b+0x4c>
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <__d2b+0xa0>)
 8008648:	18c0      	adds	r0, r0, r3
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <__d2b+0xa4>)
 800864c:	6038      	str	r0, [r7, #0]
 800864e:	18e3      	adds	r3, r4, r3
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	18f3      	adds	r3, r6, r3
 8008654:	6958      	ldr	r0, [r3, #20]
 8008656:	f7ff fdb1 	bl	80081bc <__hi0bits>
 800865a:	0164      	lsls	r4, r4, #5
 800865c:	1a20      	subs	r0, r4, r0
 800865e:	e7df      	b.n	8008620 <__d2b+0x5c>
 8008660:	fffffbcd 	.word	0xfffffbcd
 8008664:	fffffbce 	.word	0xfffffbce
 8008668:	3fffffff 	.word	0x3fffffff

0800866c <_calloc_r>:
 800866c:	434a      	muls	r2, r1
 800866e:	b570      	push	{r4, r5, r6, lr}
 8008670:	0011      	movs	r1, r2
 8008672:	0014      	movs	r4, r2
 8008674:	f000 f852 	bl	800871c <_malloc_r>
 8008678:	1e05      	subs	r5, r0, #0
 800867a:	d003      	beq.n	8008684 <_calloc_r+0x18>
 800867c:	0022      	movs	r2, r4
 800867e:	2100      	movs	r1, #0
 8008680:	f7fe f9ed 	bl	8006a5e <memset>
 8008684:	0028      	movs	r0, r5
 8008686:	bd70      	pop	{r4, r5, r6, pc}

08008688 <_free_r>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	0005      	movs	r5, r0
 800868c:	2900      	cmp	r1, #0
 800868e:	d010      	beq.n	80086b2 <_free_r+0x2a>
 8008690:	1f0c      	subs	r4, r1, #4
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	da00      	bge.n	800869a <_free_r+0x12>
 8008698:	18e4      	adds	r4, r4, r3
 800869a:	0028      	movs	r0, r5
 800869c:	f000 fa33 	bl	8008b06 <__malloc_lock>
 80086a0:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <_free_r+0x90>)
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d105      	bne.n	80086b4 <_free_r+0x2c>
 80086a8:	6063      	str	r3, [r4, #4]
 80086aa:	6014      	str	r4, [r2, #0]
 80086ac:	0028      	movs	r0, r5
 80086ae:	f000 fa2b 	bl	8008b08 <__malloc_unlock>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d909      	bls.n	80086cc <_free_r+0x44>
 80086b8:	6821      	ldr	r1, [r4, #0]
 80086ba:	1860      	adds	r0, r4, r1
 80086bc:	4283      	cmp	r3, r0
 80086be:	d1f3      	bne.n	80086a8 <_free_r+0x20>
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	1841      	adds	r1, r0, r1
 80086c6:	6021      	str	r1, [r4, #0]
 80086c8:	e7ee      	b.n	80086a8 <_free_r+0x20>
 80086ca:	0013      	movs	r3, r2
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	d001      	beq.n	80086d6 <_free_r+0x4e>
 80086d2:	42a2      	cmp	r2, r4
 80086d4:	d9f9      	bls.n	80086ca <_free_r+0x42>
 80086d6:	6819      	ldr	r1, [r3, #0]
 80086d8:	1858      	adds	r0, r3, r1
 80086da:	42a0      	cmp	r0, r4
 80086dc:	d10b      	bne.n	80086f6 <_free_r+0x6e>
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1809      	adds	r1, r1, r0
 80086e2:	1858      	adds	r0, r3, r1
 80086e4:	6019      	str	r1, [r3, #0]
 80086e6:	4282      	cmp	r2, r0
 80086e8:	d1e0      	bne.n	80086ac <_free_r+0x24>
 80086ea:	6810      	ldr	r0, [r2, #0]
 80086ec:	6852      	ldr	r2, [r2, #4]
 80086ee:	1841      	adds	r1, r0, r1
 80086f0:	6019      	str	r1, [r3, #0]
 80086f2:	605a      	str	r2, [r3, #4]
 80086f4:	e7da      	b.n	80086ac <_free_r+0x24>
 80086f6:	42a0      	cmp	r0, r4
 80086f8:	d902      	bls.n	8008700 <_free_r+0x78>
 80086fa:	230c      	movs	r3, #12
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	e7d5      	b.n	80086ac <_free_r+0x24>
 8008700:	6821      	ldr	r1, [r4, #0]
 8008702:	1860      	adds	r0, r4, r1
 8008704:	4282      	cmp	r2, r0
 8008706:	d103      	bne.n	8008710 <_free_r+0x88>
 8008708:	6810      	ldr	r0, [r2, #0]
 800870a:	6852      	ldr	r2, [r2, #4]
 800870c:	1841      	adds	r1, r0, r1
 800870e:	6021      	str	r1, [r4, #0]
 8008710:	6062      	str	r2, [r4, #4]
 8008712:	605c      	str	r4, [r3, #4]
 8008714:	e7ca      	b.n	80086ac <_free_r+0x24>
 8008716:	46c0      	nop			; (mov r8, r8)
 8008718:	200011a4 	.word	0x200011a4

0800871c <_malloc_r>:
 800871c:	2303      	movs	r3, #3
 800871e:	b570      	push	{r4, r5, r6, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	439d      	bics	r5, r3
 8008724:	3508      	adds	r5, #8
 8008726:	0006      	movs	r6, r0
 8008728:	2d0c      	cmp	r5, #12
 800872a:	d21e      	bcs.n	800876a <_malloc_r+0x4e>
 800872c:	250c      	movs	r5, #12
 800872e:	42a9      	cmp	r1, r5
 8008730:	d81d      	bhi.n	800876e <_malloc_r+0x52>
 8008732:	0030      	movs	r0, r6
 8008734:	f000 f9e7 	bl	8008b06 <__malloc_lock>
 8008738:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <_malloc_r+0xb4>)
 800873a:	6814      	ldr	r4, [r2, #0]
 800873c:	0021      	movs	r1, r4
 800873e:	2900      	cmp	r1, #0
 8008740:	d119      	bne.n	8008776 <_malloc_r+0x5a>
 8008742:	4c24      	ldr	r4, [pc, #144]	; (80087d4 <_malloc_r+0xb8>)
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <_malloc_r+0x36>
 800874a:	0030      	movs	r0, r6
 800874c:	f000 f9a4 	bl	8008a98 <_sbrk_r>
 8008750:	6020      	str	r0, [r4, #0]
 8008752:	0029      	movs	r1, r5
 8008754:	0030      	movs	r0, r6
 8008756:	f000 f99f 	bl	8008a98 <_sbrk_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d12b      	bne.n	80087b6 <_malloc_r+0x9a>
 800875e:	230c      	movs	r3, #12
 8008760:	0030      	movs	r0, r6
 8008762:	6033      	str	r3, [r6, #0]
 8008764:	f000 f9d0 	bl	8008b08 <__malloc_unlock>
 8008768:	e003      	b.n	8008772 <_malloc_r+0x56>
 800876a:	2d00      	cmp	r5, #0
 800876c:	dadf      	bge.n	800872e <_malloc_r+0x12>
 800876e:	230c      	movs	r3, #12
 8008770:	6033      	str	r3, [r6, #0]
 8008772:	2000      	movs	r0, #0
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	680b      	ldr	r3, [r1, #0]
 8008778:	1b5b      	subs	r3, r3, r5
 800877a:	d419      	bmi.n	80087b0 <_malloc_r+0x94>
 800877c:	2b0b      	cmp	r3, #11
 800877e:	d903      	bls.n	8008788 <_malloc_r+0x6c>
 8008780:	600b      	str	r3, [r1, #0]
 8008782:	18cc      	adds	r4, r1, r3
 8008784:	6025      	str	r5, [r4, #0]
 8008786:	e003      	b.n	8008790 <_malloc_r+0x74>
 8008788:	684b      	ldr	r3, [r1, #4]
 800878a:	428c      	cmp	r4, r1
 800878c:	d10d      	bne.n	80087aa <_malloc_r+0x8e>
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	0030      	movs	r0, r6
 8008792:	f000 f9b9 	bl	8008b08 <__malloc_unlock>
 8008796:	0020      	movs	r0, r4
 8008798:	2207      	movs	r2, #7
 800879a:	300b      	adds	r0, #11
 800879c:	1d23      	adds	r3, r4, #4
 800879e:	4390      	bics	r0, r2
 80087a0:	1ac3      	subs	r3, r0, r3
 80087a2:	d0e7      	beq.n	8008774 <_malloc_r+0x58>
 80087a4:	425a      	negs	r2, r3
 80087a6:	50e2      	str	r2, [r4, r3]
 80087a8:	e7e4      	b.n	8008774 <_malloc_r+0x58>
 80087aa:	6063      	str	r3, [r4, #4]
 80087ac:	000c      	movs	r4, r1
 80087ae:	e7ef      	b.n	8008790 <_malloc_r+0x74>
 80087b0:	000c      	movs	r4, r1
 80087b2:	6849      	ldr	r1, [r1, #4]
 80087b4:	e7c3      	b.n	800873e <_malloc_r+0x22>
 80087b6:	2303      	movs	r3, #3
 80087b8:	1cc4      	adds	r4, r0, #3
 80087ba:	439c      	bics	r4, r3
 80087bc:	42a0      	cmp	r0, r4
 80087be:	d0e1      	beq.n	8008784 <_malloc_r+0x68>
 80087c0:	1a21      	subs	r1, r4, r0
 80087c2:	0030      	movs	r0, r6
 80087c4:	f000 f968 	bl	8008a98 <_sbrk_r>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d1db      	bne.n	8008784 <_malloc_r+0x68>
 80087cc:	e7c7      	b.n	800875e <_malloc_r+0x42>
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	200011a4 	.word	0x200011a4
 80087d4:	200011a8 	.word	0x200011a8

080087d8 <__ssputs_r>:
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087da:	688e      	ldr	r6, [r1, #8]
 80087dc:	b085      	sub	sp, #20
 80087de:	0007      	movs	r7, r0
 80087e0:	000c      	movs	r4, r1
 80087e2:	9203      	str	r2, [sp, #12]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	429e      	cmp	r6, r3
 80087e8:	d83c      	bhi.n	8008864 <__ssputs_r+0x8c>
 80087ea:	2390      	movs	r3, #144	; 0x90
 80087ec:	898a      	ldrh	r2, [r1, #12]
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	421a      	tst	r2, r3
 80087f2:	d034      	beq.n	800885e <__ssputs_r+0x86>
 80087f4:	2503      	movs	r5, #3
 80087f6:	6909      	ldr	r1, [r1, #16]
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	1a5b      	subs	r3, r3, r1
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	6963      	ldr	r3, [r4, #20]
 8008800:	9802      	ldr	r0, [sp, #8]
 8008802:	435d      	muls	r5, r3
 8008804:	0feb      	lsrs	r3, r5, #31
 8008806:	195d      	adds	r5, r3, r5
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	106d      	asrs	r5, r5, #1
 800880c:	3301      	adds	r3, #1
 800880e:	181b      	adds	r3, r3, r0
 8008810:	42ab      	cmp	r3, r5
 8008812:	d900      	bls.n	8008816 <__ssputs_r+0x3e>
 8008814:	001d      	movs	r5, r3
 8008816:	0553      	lsls	r3, r2, #21
 8008818:	d532      	bpl.n	8008880 <__ssputs_r+0xa8>
 800881a:	0029      	movs	r1, r5
 800881c:	0038      	movs	r0, r7
 800881e:	f7ff ff7d 	bl	800871c <_malloc_r>
 8008822:	1e06      	subs	r6, r0, #0
 8008824:	d109      	bne.n	800883a <__ssputs_r+0x62>
 8008826:	230c      	movs	r3, #12
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	2001      	movs	r0, #1
 800882e:	89a2      	ldrh	r2, [r4, #12]
 8008830:	4240      	negs	r0, r0
 8008832:	4313      	orrs	r3, r2
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	b005      	add	sp, #20
 8008838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883a:	9a02      	ldr	r2, [sp, #8]
 800883c:	6921      	ldr	r1, [r4, #16]
 800883e:	f7fe f905 	bl	8006a4c <memcpy>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	4a14      	ldr	r2, [pc, #80]	; (8008898 <__ssputs_r+0xc0>)
 8008846:	401a      	ands	r2, r3
 8008848:	2380      	movs	r3, #128	; 0x80
 800884a:	4313      	orrs	r3, r2
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	9b02      	ldr	r3, [sp, #8]
 8008850:	6126      	str	r6, [r4, #16]
 8008852:	18f6      	adds	r6, r6, r3
 8008854:	6026      	str	r6, [r4, #0]
 8008856:	6165      	str	r5, [r4, #20]
 8008858:	9e01      	ldr	r6, [sp, #4]
 800885a:	1aed      	subs	r5, r5, r3
 800885c:	60a5      	str	r5, [r4, #8]
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	429e      	cmp	r6, r3
 8008862:	d900      	bls.n	8008866 <__ssputs_r+0x8e>
 8008864:	9e01      	ldr	r6, [sp, #4]
 8008866:	0032      	movs	r2, r6
 8008868:	9903      	ldr	r1, [sp, #12]
 800886a:	6820      	ldr	r0, [r4, #0]
 800886c:	f000 f938 	bl	8008ae0 <memmove>
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	2000      	movs	r0, #0
 8008874:	1b9b      	subs	r3, r3, r6
 8008876:	60a3      	str	r3, [r4, #8]
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	199e      	adds	r6, r3, r6
 800887c:	6026      	str	r6, [r4, #0]
 800887e:	e7da      	b.n	8008836 <__ssputs_r+0x5e>
 8008880:	002a      	movs	r2, r5
 8008882:	0038      	movs	r0, r7
 8008884:	f000 f941 	bl	8008b0a <_realloc_r>
 8008888:	1e06      	subs	r6, r0, #0
 800888a:	d1e0      	bne.n	800884e <__ssputs_r+0x76>
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	0038      	movs	r0, r7
 8008890:	f7ff fefa 	bl	8008688 <_free_r>
 8008894:	e7c7      	b.n	8008826 <__ssputs_r+0x4e>
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	fffffb7f 	.word	0xfffffb7f

0800889c <_svfiprintf_r>:
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	b0a1      	sub	sp, #132	; 0x84
 80088a0:	9003      	str	r0, [sp, #12]
 80088a2:	001d      	movs	r5, r3
 80088a4:	898b      	ldrh	r3, [r1, #12]
 80088a6:	000f      	movs	r7, r1
 80088a8:	0016      	movs	r6, r2
 80088aa:	061b      	lsls	r3, r3, #24
 80088ac:	d511      	bpl.n	80088d2 <_svfiprintf_r+0x36>
 80088ae:	690b      	ldr	r3, [r1, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10e      	bne.n	80088d2 <_svfiprintf_r+0x36>
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	f7ff ff31 	bl	800871c <_malloc_r>
 80088ba:	6038      	str	r0, [r7, #0]
 80088bc:	6138      	str	r0, [r7, #16]
 80088be:	2800      	cmp	r0, #0
 80088c0:	d105      	bne.n	80088ce <_svfiprintf_r+0x32>
 80088c2:	230c      	movs	r3, #12
 80088c4:	9a03      	ldr	r2, [sp, #12]
 80088c6:	3801      	subs	r0, #1
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	b021      	add	sp, #132	; 0x84
 80088cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	2300      	movs	r3, #0
 80088d4:	ac08      	add	r4, sp, #32
 80088d6:	6163      	str	r3, [r4, #20]
 80088d8:	3320      	adds	r3, #32
 80088da:	7663      	strb	r3, [r4, #25]
 80088dc:	3310      	adds	r3, #16
 80088de:	76a3      	strb	r3, [r4, #26]
 80088e0:	9507      	str	r5, [sp, #28]
 80088e2:	0035      	movs	r5, r6
 80088e4:	782b      	ldrb	r3, [r5, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <_svfiprintf_r+0x52>
 80088ea:	2b25      	cmp	r3, #37	; 0x25
 80088ec:	d146      	bne.n	800897c <_svfiprintf_r+0xe0>
 80088ee:	1bab      	subs	r3, r5, r6
 80088f0:	9305      	str	r3, [sp, #20]
 80088f2:	d00c      	beq.n	800890e <_svfiprintf_r+0x72>
 80088f4:	0032      	movs	r2, r6
 80088f6:	0039      	movs	r1, r7
 80088f8:	9803      	ldr	r0, [sp, #12]
 80088fa:	f7ff ff6d 	bl	80087d8 <__ssputs_r>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d100      	bne.n	8008904 <_svfiprintf_r+0x68>
 8008902:	e0ae      	b.n	8008a62 <_svfiprintf_r+0x1c6>
 8008904:	6962      	ldr	r2, [r4, #20]
 8008906:	9b05      	ldr	r3, [sp, #20]
 8008908:	4694      	mov	ip, r2
 800890a:	4463      	add	r3, ip
 800890c:	6163      	str	r3, [r4, #20]
 800890e:	782b      	ldrb	r3, [r5, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d100      	bne.n	8008916 <_svfiprintf_r+0x7a>
 8008914:	e0a5      	b.n	8008a62 <_svfiprintf_r+0x1c6>
 8008916:	2201      	movs	r2, #1
 8008918:	2300      	movs	r3, #0
 800891a:	4252      	negs	r2, r2
 800891c:	6062      	str	r2, [r4, #4]
 800891e:	a904      	add	r1, sp, #16
 8008920:	3254      	adds	r2, #84	; 0x54
 8008922:	1852      	adds	r2, r2, r1
 8008924:	1c6e      	adds	r6, r5, #1
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	60e3      	str	r3, [r4, #12]
 800892a:	60a3      	str	r3, [r4, #8]
 800892c:	7013      	strb	r3, [r2, #0]
 800892e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008930:	7831      	ldrb	r1, [r6, #0]
 8008932:	2205      	movs	r2, #5
 8008934:	4853      	ldr	r0, [pc, #332]	; (8008a84 <_svfiprintf_r+0x1e8>)
 8008936:	f7ff fba7 	bl	8008088 <memchr>
 800893a:	1c75      	adds	r5, r6, #1
 800893c:	2800      	cmp	r0, #0
 800893e:	d11f      	bne.n	8008980 <_svfiprintf_r+0xe4>
 8008940:	6822      	ldr	r2, [r4, #0]
 8008942:	06d3      	lsls	r3, r2, #27
 8008944:	d504      	bpl.n	8008950 <_svfiprintf_r+0xb4>
 8008946:	2353      	movs	r3, #83	; 0x53
 8008948:	a904      	add	r1, sp, #16
 800894a:	185b      	adds	r3, r3, r1
 800894c:	2120      	movs	r1, #32
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	0713      	lsls	r3, r2, #28
 8008952:	d504      	bpl.n	800895e <_svfiprintf_r+0xc2>
 8008954:	2353      	movs	r3, #83	; 0x53
 8008956:	a904      	add	r1, sp, #16
 8008958:	185b      	adds	r3, r3, r1
 800895a:	212b      	movs	r1, #43	; 0x2b
 800895c:	7019      	strb	r1, [r3, #0]
 800895e:	7833      	ldrb	r3, [r6, #0]
 8008960:	2b2a      	cmp	r3, #42	; 0x2a
 8008962:	d016      	beq.n	8008992 <_svfiprintf_r+0xf6>
 8008964:	0035      	movs	r5, r6
 8008966:	2100      	movs	r1, #0
 8008968:	200a      	movs	r0, #10
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	782a      	ldrb	r2, [r5, #0]
 800896e:	1c6e      	adds	r6, r5, #1
 8008970:	3a30      	subs	r2, #48	; 0x30
 8008972:	2a09      	cmp	r2, #9
 8008974:	d94e      	bls.n	8008a14 <_svfiprintf_r+0x178>
 8008976:	2900      	cmp	r1, #0
 8008978:	d018      	beq.n	80089ac <_svfiprintf_r+0x110>
 800897a:	e010      	b.n	800899e <_svfiprintf_r+0x102>
 800897c:	3501      	adds	r5, #1
 800897e:	e7b1      	b.n	80088e4 <_svfiprintf_r+0x48>
 8008980:	4b40      	ldr	r3, [pc, #256]	; (8008a84 <_svfiprintf_r+0x1e8>)
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	1ac0      	subs	r0, r0, r3
 8008986:	2301      	movs	r3, #1
 8008988:	4083      	lsls	r3, r0
 800898a:	4313      	orrs	r3, r2
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	002e      	movs	r6, r5
 8008990:	e7ce      	b.n	8008930 <_svfiprintf_r+0x94>
 8008992:	9b07      	ldr	r3, [sp, #28]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	9107      	str	r1, [sp, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	db01      	blt.n	80089a2 <_svfiprintf_r+0x106>
 800899e:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a0:	e004      	b.n	80089ac <_svfiprintf_r+0x110>
 80089a2:	425b      	negs	r3, r3
 80089a4:	60e3      	str	r3, [r4, #12]
 80089a6:	2302      	movs	r3, #2
 80089a8:	4313      	orrs	r3, r2
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	782b      	ldrb	r3, [r5, #0]
 80089ae:	2b2e      	cmp	r3, #46	; 0x2e
 80089b0:	d10a      	bne.n	80089c8 <_svfiprintf_r+0x12c>
 80089b2:	786b      	ldrb	r3, [r5, #1]
 80089b4:	2b2a      	cmp	r3, #42	; 0x2a
 80089b6:	d135      	bne.n	8008a24 <_svfiprintf_r+0x188>
 80089b8:	9b07      	ldr	r3, [sp, #28]
 80089ba:	3502      	adds	r5, #2
 80089bc:	1d1a      	adds	r2, r3, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	9207      	str	r2, [sp, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	db2b      	blt.n	8008a1e <_svfiprintf_r+0x182>
 80089c6:	9309      	str	r3, [sp, #36]	; 0x24
 80089c8:	4e2f      	ldr	r6, [pc, #188]	; (8008a88 <_svfiprintf_r+0x1ec>)
 80089ca:	7829      	ldrb	r1, [r5, #0]
 80089cc:	2203      	movs	r2, #3
 80089ce:	0030      	movs	r0, r6
 80089d0:	f7ff fb5a 	bl	8008088 <memchr>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d006      	beq.n	80089e6 <_svfiprintf_r+0x14a>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	1b80      	subs	r0, r0, r6
 80089dc:	4083      	lsls	r3, r0
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	3501      	adds	r5, #1
 80089e2:	4313      	orrs	r3, r2
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	7829      	ldrb	r1, [r5, #0]
 80089e8:	2206      	movs	r2, #6
 80089ea:	4828      	ldr	r0, [pc, #160]	; (8008a8c <_svfiprintf_r+0x1f0>)
 80089ec:	1c6e      	adds	r6, r5, #1
 80089ee:	7621      	strb	r1, [r4, #24]
 80089f0:	f7ff fb4a 	bl	8008088 <memchr>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d03c      	beq.n	8008a72 <_svfiprintf_r+0x1d6>
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <_svfiprintf_r+0x1f4>)
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d125      	bne.n	8008a4a <_svfiprintf_r+0x1ae>
 80089fe:	2207      	movs	r2, #7
 8008a00:	9b07      	ldr	r3, [sp, #28]
 8008a02:	3307      	adds	r3, #7
 8008a04:	4393      	bics	r3, r2
 8008a06:	3308      	adds	r3, #8
 8008a08:	9307      	str	r3, [sp, #28]
 8008a0a:	6963      	ldr	r3, [r4, #20]
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	189b      	adds	r3, r3, r2
 8008a10:	6163      	str	r3, [r4, #20]
 8008a12:	e766      	b.n	80088e2 <_svfiprintf_r+0x46>
 8008a14:	4343      	muls	r3, r0
 8008a16:	2101      	movs	r1, #1
 8008a18:	189b      	adds	r3, r3, r2
 8008a1a:	0035      	movs	r5, r6
 8008a1c:	e7a6      	b.n	800896c <_svfiprintf_r+0xd0>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	425b      	negs	r3, r3
 8008a22:	e7d0      	b.n	80089c6 <_svfiprintf_r+0x12a>
 8008a24:	2300      	movs	r3, #0
 8008a26:	200a      	movs	r0, #10
 8008a28:	001a      	movs	r2, r3
 8008a2a:	3501      	adds	r5, #1
 8008a2c:	6063      	str	r3, [r4, #4]
 8008a2e:	7829      	ldrb	r1, [r5, #0]
 8008a30:	1c6e      	adds	r6, r5, #1
 8008a32:	3930      	subs	r1, #48	; 0x30
 8008a34:	2909      	cmp	r1, #9
 8008a36:	d903      	bls.n	8008a40 <_svfiprintf_r+0x1a4>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0c5      	beq.n	80089c8 <_svfiprintf_r+0x12c>
 8008a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3e:	e7c3      	b.n	80089c8 <_svfiprintf_r+0x12c>
 8008a40:	4342      	muls	r2, r0
 8008a42:	2301      	movs	r3, #1
 8008a44:	1852      	adds	r2, r2, r1
 8008a46:	0035      	movs	r5, r6
 8008a48:	e7f1      	b.n	8008a2e <_svfiprintf_r+0x192>
 8008a4a:	ab07      	add	r3, sp, #28
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	003a      	movs	r2, r7
 8008a50:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <_svfiprintf_r+0x1f8>)
 8008a52:	0021      	movs	r1, r4
 8008a54:	9803      	ldr	r0, [sp, #12]
 8008a56:	f7fe f8a7 	bl	8006ba8 <_printf_float>
 8008a5a:	9004      	str	r0, [sp, #16]
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	d1d3      	bne.n	8008a0a <_svfiprintf_r+0x16e>
 8008a62:	89bb      	ldrh	r3, [r7, #12]
 8008a64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a66:	065b      	lsls	r3, r3, #25
 8008a68:	d400      	bmi.n	8008a6c <_svfiprintf_r+0x1d0>
 8008a6a:	e72e      	b.n	80088ca <_svfiprintf_r+0x2e>
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	4240      	negs	r0, r0
 8008a70:	e72b      	b.n	80088ca <_svfiprintf_r+0x2e>
 8008a72:	ab07      	add	r3, sp, #28
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	003a      	movs	r2, r7
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <_svfiprintf_r+0x1f8>)
 8008a7a:	0021      	movs	r1, r4
 8008a7c:	9803      	ldr	r0, [sp, #12]
 8008a7e:	f7fe fb4d 	bl	800711c <_printf_i>
 8008a82:	e7ea      	b.n	8008a5a <_svfiprintf_r+0x1be>
 8008a84:	08009034 	.word	0x08009034
 8008a88:	0800903a 	.word	0x0800903a
 8008a8c:	0800903e 	.word	0x0800903e
 8008a90:	08006ba9 	.word	0x08006ba9
 8008a94:	080087d9 	.word	0x080087d9

08008a98 <_sbrk_r>:
 8008a98:	2300      	movs	r3, #0
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	4c06      	ldr	r4, [pc, #24]	; (8008ab8 <_sbrk_r+0x20>)
 8008a9e:	0005      	movs	r5, r0
 8008aa0:	0008      	movs	r0, r1
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	f7f9 fe96 	bl	80027d4 <_sbrk>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d103      	bne.n	8008ab4 <_sbrk_r+0x1c>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d000      	beq.n	8008ab4 <_sbrk_r+0x1c>
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	bd70      	pop	{r4, r5, r6, pc}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	20001300 	.word	0x20001300

08008abc <__ascii_mbtowc>:
 8008abc:	b082      	sub	sp, #8
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	d100      	bne.n	8008ac4 <__ascii_mbtowc+0x8>
 8008ac2:	a901      	add	r1, sp, #4
 8008ac4:	1e10      	subs	r0, r2, #0
 8008ac6:	d006      	beq.n	8008ad6 <__ascii_mbtowc+0x1a>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <__ascii_mbtowc+0x1e>
 8008acc:	7813      	ldrb	r3, [r2, #0]
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	7810      	ldrb	r0, [r2, #0]
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	4198      	sbcs	r0, r3
 8008ad6:	b002      	add	sp, #8
 8008ad8:	4770      	bx	lr
 8008ada:	2002      	movs	r0, #2
 8008adc:	4240      	negs	r0, r0
 8008ade:	e7fa      	b.n	8008ad6 <__ascii_mbtowc+0x1a>

08008ae0 <memmove>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4288      	cmp	r0, r1
 8008ae4:	d902      	bls.n	8008aec <memmove+0xc>
 8008ae6:	188b      	adds	r3, r1, r2
 8008ae8:	4298      	cmp	r0, r3
 8008aea:	d303      	bcc.n	8008af4 <memmove+0x14>
 8008aec:	2300      	movs	r3, #0
 8008aee:	e007      	b.n	8008b00 <memmove+0x20>
 8008af0:	5c8b      	ldrb	r3, [r1, r2]
 8008af2:	5483      	strb	r3, [r0, r2]
 8008af4:	3a01      	subs	r2, #1
 8008af6:	d2fb      	bcs.n	8008af0 <memmove+0x10>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	5ccc      	ldrb	r4, [r1, r3]
 8008afc:	54c4      	strb	r4, [r0, r3]
 8008afe:	3301      	adds	r3, #1
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d1fa      	bne.n	8008afa <memmove+0x1a>
 8008b04:	e7f8      	b.n	8008af8 <memmove+0x18>

08008b06 <__malloc_lock>:
 8008b06:	4770      	bx	lr

08008b08 <__malloc_unlock>:
 8008b08:	4770      	bx	lr

08008b0a <_realloc_r>:
 8008b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0c:	0007      	movs	r7, r0
 8008b0e:	000d      	movs	r5, r1
 8008b10:	0016      	movs	r6, r2
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d105      	bne.n	8008b22 <_realloc_r+0x18>
 8008b16:	0011      	movs	r1, r2
 8008b18:	f7ff fe00 	bl	800871c <_malloc_r>
 8008b1c:	0004      	movs	r4, r0
 8008b1e:	0020      	movs	r0, r4
 8008b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d103      	bne.n	8008b2e <_realloc_r+0x24>
 8008b26:	f7ff fdaf 	bl	8008688 <_free_r>
 8008b2a:	0034      	movs	r4, r6
 8008b2c:	e7f7      	b.n	8008b1e <_realloc_r+0x14>
 8008b2e:	f000 f81e 	bl	8008b6e <_malloc_usable_size_r>
 8008b32:	002c      	movs	r4, r5
 8008b34:	42b0      	cmp	r0, r6
 8008b36:	d2f2      	bcs.n	8008b1e <_realloc_r+0x14>
 8008b38:	0031      	movs	r1, r6
 8008b3a:	0038      	movs	r0, r7
 8008b3c:	f7ff fdee 	bl	800871c <_malloc_r>
 8008b40:	1e04      	subs	r4, r0, #0
 8008b42:	d0ec      	beq.n	8008b1e <_realloc_r+0x14>
 8008b44:	0029      	movs	r1, r5
 8008b46:	0032      	movs	r2, r6
 8008b48:	f7fd ff80 	bl	8006a4c <memcpy>
 8008b4c:	0029      	movs	r1, r5
 8008b4e:	0038      	movs	r0, r7
 8008b50:	f7ff fd9a 	bl	8008688 <_free_r>
 8008b54:	e7e3      	b.n	8008b1e <_realloc_r+0x14>

08008b56 <__ascii_wctomb>:
 8008b56:	1e0b      	subs	r3, r1, #0
 8008b58:	d004      	beq.n	8008b64 <__ascii_wctomb+0xe>
 8008b5a:	2aff      	cmp	r2, #255	; 0xff
 8008b5c:	d904      	bls.n	8008b68 <__ascii_wctomb+0x12>
 8008b5e:	238a      	movs	r3, #138	; 0x8a
 8008b60:	6003      	str	r3, [r0, #0]
 8008b62:	3b8b      	subs	r3, #139	; 0x8b
 8008b64:	0018      	movs	r0, r3
 8008b66:	4770      	bx	lr
 8008b68:	700a      	strb	r2, [r1, #0]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7fa      	b.n	8008b64 <__ascii_wctomb+0xe>

08008b6e <_malloc_usable_size_r>:
 8008b6e:	1f0b      	subs	r3, r1, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	1f18      	subs	r0, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da01      	bge.n	8008b7c <_malloc_usable_size_r+0xe>
 8008b78:	580b      	ldr	r3, [r1, r0]
 8008b7a:	18c0      	adds	r0, r0, r3
 8008b7c:	4770      	bx	lr
	...

08008b80 <_init>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr

08008b8c <_fini>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr
